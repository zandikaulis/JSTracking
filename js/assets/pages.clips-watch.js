(window.webpackJsonp = window.webpackJsonp || []).push([
    [38], {
        "+LJB": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("0Log"),
                r = n("/aPz"),
                a = n("0Lz3");

            function o(e, t, n, o) {
                return {
                    topic: n ? Object(r.c)(n) : "",
                    type: i.PubsubMessageType.BitsLeaderboardEvent,
                    mutator: function(e, t) {
                        if (!t || !n) return t;
                        var i = e.top.map(function(e) {
                            return Object(a.b)(e, n.id)
                        });
                        if (t.user) {
                            if (t.user.tournament && t.user.tournament.teamLeaderboard && (t.user.tournament.teamLeaderboard.items.edges = i), t.user.tournament && t.user.tournament.globalLeaderboard && (t.user.tournament.globalLeaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.tournament.self && t.user.tournament.self.globalLeaderboardItem)) {
                                var r = Object(a.b)(e.entry_context.entry, n.id);
                                t.user.tournament.self.globalLeaderboardItem = r.node
                            }
                            if (t.user.cheer && t.user.cheer.leaderboard && (t.user.cheer.leaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.self && t.user.self.bitsLeaderboardItem)) {
                                var s = Object(a.b)(e.entry_context.entry, n.id);
                                t.user.self.bitsLeaderboardItem = s.node
                            }
                        }
                        return t
                    },
                    skip: !n,
                    query: e,
                    variables: {
                        channelID: t
                    }
                }
            }
        },
        "+U0Y": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            });
            var i = "core.user-preferences.LANGUAGE_PREFERENCES_UPDATED";

            function r(e) {
                return {
                    type: i,
                    languagePreferences: e
                }
            }
        },
        "+Zgt": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "PreviewCardClip"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Clip"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "viewCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "curator"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "boxArtURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "52"
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "72"
                                        }
                                    }],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcaster"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "50"
                                        }
                                    }],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "thumbnailURL"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createdAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "durationSeconds"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 245
                }
            };
            n.loc.source = {
                body: "fragment PreviewCardClip on Clip {\nid\nslug\ntitle\nviewCount\ncurator {\nid\nlogin\ndisplayName\n}\ngame {\nid\nname\nboxArtURL(width: 52 height: 72)\n}\nbroadcaster {\nid\nlogin\ndisplayName\nprofileImageURL(width: 50)\n}\nthumbnailURL\ncreatedAt\ndurationSeconds\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "+kC+": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatLine_SubsOnlyUpsell_UserSubscriptionProducts"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 121
                }
            };
            n.loc.source = {
                body: "query ChatLine_SubsOnlyUpsell_UserSubscriptionProducts($id: ID!) {\nuser(id: $id) {\nid\nsubscriptionProducts {\nid\nurl\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "+pBb": function(e, t, n) {
            "use strict";
            n.d(t, "d", function() {
                return i
            }), n.d(t, "e", function() {
                return r
            }), n.d(t, "i", function() {
                return a
            }), n.d(t, "j", function() {
                return o
            }), n.d(t, "q", function() {
                return s
            }), n.d(t, "c", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "g", function() {
                return d
            }), n.d(t, "h", function() {
                return u
            }), n.d(t, "f", function() {
                return p
            }), n.d(t, "l", function() {
                return m
            }), n.d(t, "k", function() {
                return h
            }), n.d(t, "n", function() {
                return g
            }), n.d(t, "m", function() {
                return f
            }), n.d(t, "r", function() {
                return v
            }), n.d(t, "t", function() {
                return b
            }), n.d(t, "s", function() {
                return k
            }), n.d(t, "w", function() {
                return y
            }), n.d(t, "v", function() {
                return C
            }), n.d(t, "a", function() {
                return S
            }), n.d(t, "o", function() {
                return E
            }), n.d(t, "p", function() {
                return N
            }), n.d(t, "u", function() {
                return O
            }), n.d(t, "J", function() {
                return _
            }), n.d(t, "E", function() {
                return w
            }), n.d(t, "K", function() {
                return D
            }), n.d(t, "F", function() {
                return I
            }), n.d(t, "O", function() {
                return T
            }), n.d(t, "L", function() {
                return M
            }), n.d(t, "H", function() {
                return R
            }), n.d(t, "C", function() {
                return L
            }), n.d(t, "I", function() {
                return F
            }), n.d(t, "D", function() {
                return j
            }), n.d(t, "G", function() {
                return x
            }), n.d(t, "B", function() {
                return A
            }), n.d(t, "y", function() {
                return U
            }), n.d(t, "A", function() {
                return P
            }), n.d(t, "M", function() {
                return B
            }), n.d(t, "z", function() {
                return V
            }), n.d(t, "P", function() {
                return W
            }), n.d(t, "S", function() {
                return H
            }), n.d(t, "x", function() {
                return G
            }), n.d(t, "N", function() {
                return Y
            }), n.d(t, "R", function() {
                return z
            }), n.d(t, "Q", function() {
                return q
            });
            var i = "chat.CHAT_HIDDEN",
                r = "chat.CHAT_SHOWN",
                a = "chat.EMOTE_SETS_UPDATED",
                o = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
                s = "chat.ROOM_STATE_UPDATED",
                l = "chat.AUTOMOD_ACTIONS_ENABLED",
                c = "chat.AUTOMOD_ACTIONS_DISABLED",
                d = "chat.EMOTE_PICKER_CLOSED",
                u = "chat.EMOTE_PICKER_OPENED",
                p = "chat.CLOSE_CHAT_RULES",
                m = "chat.MODERATION_ACTIONS_ENABLED",
                h = "chat.MODERATION_ACTIONS_DISABLED",
                g = "chat.MOD_ICONS_ENABLED",
                f = "chat.MOD_ICONS_DISABLED",
                v = "chat.SHOW_CHAT_RULES",
                b = "chat.TIMESTAMPS_ENABLED",
                k = "chat.TIMESTAMPS_DISABLED",
                y = "chat.USERNAME_CONTRAST_ENABLED",
                C = "chat.USERNAME_CONTRAST_DISABLED",
                S = "chat.ADD_COMMAND",
                E = "chat.REMOVE_COMMAND",
                N = "chat.RENDER_SENT_CHAT_MESSAGE",
                O = "chat.UNHIDE_IGNORED_COMMAND";

            function _() {
                return {
                    type: b
                }
            }

            function w() {
                return {
                    type: k
                }
            }

            function D() {
                return {
                    type: y
                }
            }

            function I() {
                return {
                    type: C
                }
            }

            function T() {
                return {
                    type: r
                }
            }

            function M() {
                return {
                    type: i
                }
            }

            function R() {
                return {
                    type: l
                }
            }

            function L() {
                return {
                    type: c
                }
            }

            function F() {
                return {
                    type: m
                }
            }

            function j() {
                return {
                    type: h
                }
            }

            function x() {
                return {
                    type: g
                }
            }

            function A() {
                return {
                    type: f
                }
            }

            function U(e, t) {
                return {
                    type: o,
                    channelLogin: e,
                    duration: t
                }
            }

            function P() {
                return {
                    type: d
                }
            }

            function B() {
                return {
                    type: u
                }
            }

            function V() {
                return {
                    type: p
                }
            }

            function W() {
                return {
                    type: v
                }
            }

            function H(e) {
                return {
                    type: s,
                    roomState: e
                }
            }

            function G(e, t) {
                return {
                    type: S,
                    command: e.toLowerCase(),
                    handler: t
                }
            }

            function Y(e, t) {
                return {
                    type: E,
                    command: e.toLowerCase(),
                    handler: t
                }
            }

            function z(e) {
                return {
                    type: N,
                    customEvent: e
                }
            }

            function q(e) {
                return {
                    type: O,
                    userID: e
                }
            }
        },
        "/HY+": function(e, t, n) {
            "use strict";
            var i = n("dAHa"),
                r = n("mrSG"),
                a = n("q1tI"),
                o = n("/MKj"),
                s = n("fvjX"),
                l = n("cZKs"),
                c = n("aCAx"),
                d = n("GnwI"),
                u = n("Ue10"),
                p = (n("Oy4H"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleClose = function(e, n) {
                            t.props.closeModal(), t.props.onClose && t.props.onClose(e, n)
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(u.Fb, {
                            className: "reporting-modal__container",
                            background: u.r.Base,
                            padding: {
                                x: 2,
                                y: 3
                            }
                        }, a.createElement(i.b, {
                            onClose: this.handleClose,
                            reportContext: this.props.reportContext,
                            title: this.props.title,
                            defaultDescription: this.props.defaultDescription
                        }), a.createElement(l.a, null))
                    }, t
                }(a.Component));
            var m = Object(s.compose)(Object(d.b)("ReportUserModal"), Object(o.connect)(null, function(e) {
                return Object(s.bindActionCreators)({
                    closeModal: c.c
                }, e)
            }))(p);
            n.d(t, !1, function() {}), n.d(t, !1, function() {
                return i.c
            }), n.d(t, !1, function() {
                return i.a
            }), n.d(t, !1, function() {}), n.d(t, !1, function() {
                return i.b
            }), n.d(t, !1, function() {
                return p
            }), n.d(t, "a", function() {
                return m
            })
        },
        "/Kya": function(e, t, n) {},
        "/gva": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "CurrentUserBannedStatus"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "banStatus"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPermanent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 135
                }
            };
            n.loc.source = {
                body: "query CurrentUserBannedStatus($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nself {\nbanStatus {\nisPermanent\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "/i69": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/7QA"),
                s = n("gcd7"),
                l = n("QVaV"),
                c = n("iyGE"),
                d = n("a2UF"),
                u = n("vSeP"),
                p = n("WytW"),
                m = n("AREq"),
                h = n("Av0x"),
                g = n("Ue10"),
                f = 600,
                v = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.banUser = function(e) {
                            var n = Object(p.k)("/ban " + e);
                            if (n) {
                                var i = t.userLogin(n.banTarget),
                                    r = n.reason || void 0;
                                if (i) {
                                    var a = Object(o.d)("Unable to ban user.", "BanCommandHandler");
                                    return {
                                        deferred: t.props.banUserMutation(i, void 0, r).then(function(e) {
                                            var n = e.banUserFromChatRoom;
                                            return n ? n.error ? {
                                                notice: Object(m.a)(i, n.error.code)
                                            } : t.props.suppressLocalSuccessMessage ? {} : {
                                                notice: Object(o.d)("{userLogin} is now banned from this channel.", {
                                                    userLogin: i
                                                }, "BanCommandHandler")
                                            } : {
                                                notice: a
                                            }
                                        }).catch(function() {
                                            return {
                                                notice: a
                                            }
                                        })
                                    }
                                }
                                return {
                                    deferred: Promise.resolve({
                                        notice: Object(o.d)("Please specify a user to ban.", "BanCommandHandler")
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Usage: /ban [login]", "BanCommandHandler")
                                })
                            }
                        }, t.unbanUser = function(e) {
                            if (e && 0 !== e.length) {
                                var n = t.userLogin(e),
                                    i = Object(o.d)("Unable to unban user.", "BanCommandHandler");
                                return {
                                    deferred: t.props.unbanUserMutation(n).then(function(e) {
                                        var r = e.unbanUserFromChatRoom;
                                        return r ? r.error ? {
                                            notice: Object(h.a)(n, r.error.code)
                                        } : t.props.suppressLocalSuccessMessage ? {} : {
                                            notice: Object(o.d)("{bannedUserLogin} is no longer banned from this channel.", {
                                                bannedUserLogin: n
                                            }, "BanCommandHandler")
                                        } : {
                                            notice: i
                                        }
                                    }).catch(function() {
                                        return {
                                            notice: i
                                        }
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Please specify a user to unban.", "BanCommandHandler")
                                })
                            }
                        }, t.timeoutUser = function(e) {
                            var n = Object(p.o)("/timeout " + e);
                            if (n) {
                                var i = t.userLogin(n.banTarget),
                                    r = n.duration || f,
                                    a = n.reason || void 0;
                                if (i) {
                                    var s = Object(o.d)("Unable to timeout user.", "BanCommandHandler");
                                    return {
                                        deferred: t.props.banUserMutation(i, r, a).then(function(e) {
                                            var n = e.banUserFromChatRoom;
                                            return n ? n.error ? {
                                                notice: Object(m.a)(i, n.error.code, !0)
                                            } : t.props.suppressLocalSuccessMessage ? {} : {
                                                notice: Object(o.d)("{userLogin} has been timed out for {duration} seconds.", {
                                                    userLogin: i,
                                                    duration: r
                                                }, "BanCommandHandler")
                                            } : {
                                                notice: s
                                            }
                                        }).catch(function() {
                                            return {
                                                notice: s
                                            }
                                        })
                                    }
                                }
                                return {
                                    deferred: Promise.resolve({
                                        notice: Object(o.d)("Please specify a user to timeout.", "BanCommandHandler")
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Usage: /timeout [login] [duration in seconds]", "BanCommandHandler")
                                })
                            }
                        }, t.untimeoutUser = function(e) {
                            if (e) {
                                var n = t.userLogin(e),
                                    i = Object(o.d)("Unable to untimeout user.", "BanCommandHandler");
                                return {
                                    deferred: t.props.unbanUserMutation(n).then(function(e) {
                                        var r = e.unbanUserFromChatRoom;
                                        return r ? r.error ? {
                                            notice: Object(h.a)(n, r.error.code, !0)
                                        } : t.props.suppressLocalSuccessMessage ? {} : {
                                            notice: Object(o.d)("{login} is no longer timed out in this channel.", {
                                                login: n
                                            }, "BanCommandHandler")
                                        } : {
                                            notice: i
                                        }
                                    }).catch(function() {
                                        return {
                                            notice: i
                                        }
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Please specify a user to untimeout.", "BanCommandHandler")
                                })
                            }
                        }, t.userLogin = function(e) {
                            return "@" === e[0] && (e = e.substr(1)), Object(l.b)(e) ? e : t.props.activeChattersAPI ? t.props.activeChattersAPI.getActiveChatterLoginFromDisplayName(e) || e : t.props.displayNameToLogin && t.props.displayNameToLogin(e) || e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(g.Ya, {
                            display: g.X.Hide
                        }, r.createElement(s.a, {
                            command: "ban",
                            handler: this.banUser
                        }), r.createElement(s.a, {
                            command: "unban",
                            handler: this.unbanUser
                        }), r.createElement(s.a, {
                            command: "timeout",
                            handler: this.timeoutUser
                        }), r.createElement(s.a, {
                            command: "untimeout",
                            handler: this.untimeoutUser
                        }))
                    }, t
                }(r.Component),
                b = function(e) {
                    return {
                        channelID: e.channelID
                    }
                },
                k = Object(a.compose)(u.a, Object(d.a)(b), Object(c.a)(b))(v);
            n.d(t, "a", function() {
                return k
            })
        },
        "/nm5": function(e, t, n) {},
        "04j6": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Core_Services_Spade_ChatEvent_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPartner"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 116
                }
            };
            n.loc.source = {
                body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "0EKw": function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("z36O"),
                o = n("kduP"),
                s = n("Ue10"),
                l = function(e) {
                    return i.createElement(a.a, {
                        linkTo: {
                            pathname: Object(o.c)(e.name),
                            state: {
                                content: "current_game",
                                medium: "twitch_channel"
                            }
                        },
                        tooltip: Object(r.d)("Game", "GameLink"),
                        svgAsset: s.ub.NavGames,
                        title: e.name,
                        "data-a-target": "stream-game-link"
                    })
                };
            n.d(t, "a", function() {
                return l
            })
        },
        "0FG4": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "c", function() {
                return s
            }), n.d(t, "b", function() {
                return c
            });
            var i, r = n("RcPG"),
                a = n("a1OF");
            ! function(e) {
                e[e.Position = 0] = "Position", e[e.Token = 1] = "Token"
            }(i || (i = {}));
            var o = "0";

            function s(e, t, n) {
                var o = n.type === i.Position ? t : e,
                    s = n.map[o];
                if (s) {
                    var l = function(e, t) {
                        return {
                            images: {
                                sources: {
                                    "1x": Object(a.d)(t, 1),
                                    "2x": Object(a.d)(t, 2),
                                    "4x": Object(a.d)(t, 4)
                                },
                                themed: !1
                            },
                            alt: e
                        }
                    }(e, s.id);
                    return {
                        type: r.a.Emote,
                        content: l
                    }
                }
                return null
            }
            var l = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            };

            function c(e) {
                for (var t = {}, n = 0, i = e; n < i.length; n++) {
                    var r = i[n];
                    if (r && r.emotes)
                        for (var a = 0, s = r.emotes; a < s.length; a++) {
                            var c = s[a];
                            if (c && c.id && c.token)
                                for (var d = 0, u = l[c.token] || [c.token]; d < u.length; d++) {
                                    var p = u[d];
                                    t[p] && r.id === o || (t[p] = {
                                        id: c.id,
                                        token: p
                                    })
                                }
                        }
                }
                return t
            }
        },
        "0INk": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "a", function() {
                return d
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("gAd6"),
                s = function() {
                    var e = r.o.getLastPageview();
                    return e && e.location || a.PageviewLocation.None
                },
                l = function(e) {
                    r.o.trackItemSectionClick({
                        carousel_content: a.PageviewContent.Video,
                        channel_id: e.broadcasterID || "0",
                        channel: e.channelLogin || "unknown",
                        content: a.PageviewContent.PreviewCardGameName,
                        item_index: e.contentIndex,
                        medium: e.pageviewMedium,
                        item_id: e.videoID,
                        item_type: a.TwitchDataType.Video,
                        item_viewcount: null,
                        location: s()
                    })
                },
                c = function(e) {
                    r.o.trackItemSectionClick({
                        carousel_content: a.PageviewContent.PreviewCardGameBalloonGame,
                        channel_id: e.broadcasterID || "0",
                        channel: e.channelLogin || "unknown",
                        content: a.PageviewContent.PreviewCardGameBalloonGame,
                        item_index: e.contentIndex,
                        medium: e.pageviewMedium,
                        item_id: e.videoID,
                        item_type: a.TwitchDataType.Video,
                        item_viewcount: null,
                        location: s()
                    })
                },
                d = function(e) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var t, n, l, c, d, u = this;
                        return i.__generator(this, function(p) {
                            switch (p.label) {
                                case 0:
                                    return p.trys.push([0, 2, , 3]), t = e.map(function(e) {
                                        return i.__awaiter(u, void 0, void 0, function() {
                                            var t;
                                            return i.__generator(this, function(n) {
                                                switch (n.label) {
                                                    case 0:
                                                        return [4, r.p.apollo.client.query({
                                                            query: o,
                                                            variables: {
                                                                name: e
                                                            }
                                                        })];
                                                    case 1:
                                                        return [2, (t = n.sent().data).game && t.game.id]
                                                }
                                            })
                                        })
                                    }), [4, Promise.all(t)];
                                case 1:
                                    return n = p.sent(), l = n.filter(function(e) {
                                        return !!e
                                    }), c = l.map(function() {
                                        return a.TwitchDataType.Game
                                    }), d = l.map(function() {
                                        return null
                                    }), r.o.trackItemSectionLoad({
                                        carousel_content: a.PageviewContent.PreviewCardGameBalloonGame,
                                        rendered_item_count: l.length,
                                        rendered_item_list: l,
                                        rendered_item_types: c,
                                        rendered_items_viewcounts: d,
                                        location: s()
                                    }), [3, 3];
                                case 2:
                                    return p.sent(), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }
        },
        "0Rl0": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("q1tI"),
                r = n("Ue10"),
                a = function() {
                    return i.createElement(r.G, null, i.createElement(r.o, {
                        ratio: r.p.Aspect16x9
                    }, i.createElement(r.jb, null)), i.createElement(r.H, null, i.createElement(r.Ya, {
                        display: r.X.Flex,
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(r.Ya, {
                        display: r.X.InlineBlock,
                        margin: {
                            top: 1,
                            right: 1
                        }
                    }, i.createElement(r.jb, {
                        width: 40,
                        height: 56
                    })), i.createElement(r.Ya, {
                        display: r.X.InlineBlock,
                        margin: {
                            top: 1
                        }
                    }, i.createElement(r.W, null, i.createElement(r.jb, {
                        width: 150
                    })), i.createElement(r.W, {
                        fontSize: r.Ca.Size7
                    }, i.createElement(r.jb, {
                        width: 100
                    }))))))
                }
        },
        "0T/G": function(e, t) {},
        "0WFu": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("3Bft");

            function r(e) {
                return [i.a.Prime, i.a.Custom].includes(e) ? null : parseInt(e, 10) / 1e3
            }
        },
        "0bws": function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("mrSG"),
                a = n("1hWM"),
                o = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.updateContext({}, t), n
                    }
                    return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        this.updateContext(this.props, e)
                    }, t.prototype.shouldComponentUpdate = function() {
                        return !1
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.updateContext = function(e, t) {
                        var n = {};
                        t.theme !== e.theme && (n.theme = t.theme), t.game !== e.game && (n.game = t.game), t.hostingInfo !== e.hostingInfo && (n.hostingInfo = t.hostingInfo), Object.keys(n).length > 0 && a.extensionService.postContext(n)
                    }, t
                }(n("q1tI").Component);

            function s(e) {
                return {
                    theme: e.ui.theme
                }
            }
            var l = Object(i.connect)(s)(o);
            n.d(t, !1, function() {
                return s
            }), n.d(t, "a", function() {
                return l
            })
        },
        "0hI/": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportUserData"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "targetUserID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "targetUser"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "targetUserID"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "lookupType"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "ALL"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blockedUsers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 176
                }
            };
            n.loc.source = {
                body: "query ReportUserModal_ReportUserData($targetUserID: ID!) {\ntargetUser: user(id: $targetUserID lookupType: ALL) {\nid\nlogin\ndisplayName\n}\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "0lTu": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "esportsLootCampaign"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hasPrime"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blizzardAccount"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "battleTag"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "region"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 97
                }
            };
            n.loc.source = {
                body: "query esportsLootCampaign {\ncurrentUser {\nid\nhasPrime\nblizzardAccount {\nid\nbattleTag\nregion\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "16Gl": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "c", function() {
                return a
            }), n.d(t, "d", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            });
            var i = n("kduP");

            function r(e, t) {
                return Object(i.d)(e) + "/edit/" + t
            }

            function a(e, t) {
                return Object(i.d)(e) + "/highlighter/" + t
            }

            function o(e, t) {
                return Object(i.d)(e) + "/schedule/" + t
            }

            function s(e, t) {
                return Object(i.d)(e) + "/appeal/" + t
            }
        },
        "1G35": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "e", function() {
                return c
            }), n.d(t, "a", function() {
                return l
            }), n.d(t, "c", function() {
                return d
            }), n.d(t, "d", function() {
                return u
            });
            var i, r = n("/7QA"),
                a = n("f00E"),
                o = 2e10,
                s = "20GB";
            ! function(e) {
                e[e.published = 0] = "published", e[e.private = 1] = "private"
            }(i || (i = {}));
            var l, c = ["video/mp4", "video/quicktime", "video/avi", "video/x-flv", "video/x-msvideo", "video/*", ".mp4", ".mov", ".flv", ".avi"];

            function d(e) {
                return Object.assign({
                    id: Object(a.b)(),
                    errors: [],
                    fileSizeBytes: 0,
                    totalBytesSent: 0,
                    viewable: i.private,
                    videoAuthToken: "",
                    status: l.queued,
                    progressPercentage: 0
                }, e)
            }

            function u(e, t) {
                var n = [];
                if (e || n.push(new Error(Object(r.d)("Only accounts with verified email addresses can upload files. Please check your inbox for the verification email", "VideoUploadModel"))), !c.includes(t.type)) {
                    var i = "." + t.name.split(".").pop();
                    c.includes(i) || n.push(new Error(Object(r.d)("File type {filetype} is not currently supported", {
                        filetype: t.type ? t.type : i
                    }, "VideoUploadModel")))
                }
                return t.size > o && n.push(new Error(Object(r.d)("File too large. The maximum file size is {maxFileSizeLabel}", {
                    maxFileSizeLabel: s
                }, "VideoUploadModel"))), n
            }! function(e) {
                e[e.queued = 0] = "queued", e[e.uploading = 1] = "uploading", e[e.completed = 2] = "completed", e[e.errored = 3] = "errored", e[e.stopped = 4] = "stopped"
            }(l || (l = {}))
        },
        "1Rv/": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_UnbanUserFromChatRoom"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnbanUserFromChatRoomInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unbanUserFromChatRoom"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "ban"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPermanent"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bannedUser"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 170
                }
            };
            n.loc.source = {
                body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\nbannedUser {\nid\n}\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "1k85": function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("fvjX"),
                s = n("/7QA"),
                l = n("eJ65"),
                c = n("DMoW"),
                d = n("2xye"),
                u = n("dIU+"),
                p = n("GnwI"),
                m = n("RQ6e"),
                h = n("QjI3"),
                g = n("Ue10");
            n("axcf");
            ! function(e) {
                e.ChannelName = "hosting-ui__channel-name", e.Footer = "hosting-ui__footer", e.Header = "hosting-ui__header", e.MoreButton = "hosting-ui__more-button", e.ReportButton = "hosting-ui__report-button"
            }(i || (i = {}));
            var f = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleReportHosterClick = function() {
                            t.props.isLoggedIn ? t.props.showReportUserModal({
                                onClose: t.handleReportModalClose,
                                reportContext: {
                                    contentType: c.N.USER_REPORT,
                                    targetUserID: t.props.hostChannelID
                                },
                                title: Object(s.d)("Report {channelDisplayName}", {
                                    channelDisplayName: t.props.hostChannelDisplayName
                                }, "VideoPlayerHostingUI")
                            }) : t.props.login()
                        }, t.handleReportModalClose = function(e) {
                            (e === m.a.MutationError || e === m.a.Success) && t.props.history.push("/")
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidUpdate = function(e) {
                        this.isVisible(this.props) !== this.isVisible(e) && this.props.triggerPlayerReposition && this.props.triggerPlayerReposition()
                    }, t.prototype.render = function() {
                        var e = this.isVisible(this.props);
                        return a.createElement(g.Fb, {
                            className: "video-player-hosting-ui__container"
                        }, e && this.renderHeader(), a.createElement("span", {
                            key: "video-player"
                        }, this.props.children), a.createElement(g.Ya, {
                            display: e ? g.X.Block : g.X.Hide,
                            position: g.kb.Relative,
                            zIndex: g.jc.Above
                        }, e && this.renderFooter()))
                    }, t.prototype.isVisible = function(e) {
                        return !!e.hostedChannelDisplayName
                    }, t.prototype.renderHeader = function() {
                        return a.createElement(g.i, {
                            type: g.n.SlideInBottom,
                            delay: g.j.Medium,
                            duration: g.k.Medium,
                            enabled: !0
                        }, a.createElement(g.U, {
                            key: "hosting-ui-header",
                            className: "video-player-hosting-ui__link",
                            to: {
                                pathname: "/" + this.props.hostedChannelLogin,
                                state: {
                                    medium: d.PageviewMedium.Channel,
                                    content: d.PageviewContent.Host
                                }
                            },
                            "data-a-target": "hosting-ui-link",
                            "data-test-selector": i.Header
                        }, a.createElement(g.Fb, {
                            className: "video-player-hosting-ui__header",
                            display: g.X.Flex,
                            background: g.r.AccentAlt2,
                            color: g.O.Overlay,
                            alignItems: g.f.Center,
                            padding: {
                                x: 1,
                                y: .5
                            },
                            "data-a-target": "hosting-ui-header",
                            borderRadius: {
                                topLeft: g.x.Medium,
                                topRight: g.x.Medium
                            }
                        }, a.createElement(g.Ya, {
                            className: "video-player-hosting-ui__avatar-container"
                        }, a.createElement(g.q, {
                            src: this.props.hostedChannelProfileImageURL || s.a.defaultAvatarURL,
                            size: 30,
                            alt: Object(s.d)("Hosted Channel {hostedChannelDisplayName}'s Avatar", {
                                hostedChannelDisplayName: this.props.hostedChannelDisplayName || ""
                            }, "VideoPlayerHostingUI")
                        })), a.createElement(g.Fb, {
                            margin: {
                                left: 1
                            },
                            fontSize: g.Ca.Size5
                        }, Object(s.d)("Hosting", "VideoPlayerHostingUI"), " ", a.createElement(g.W, {
                            type: g.Wb.Span,
                            className: "video-player-hosting-ui__channel-name",
                            color: g.O.OverlayAlt,
                            "data-a-target": "hosting-ui-channel-name",
                            "data-test-selector": i.ChannelName
                        }, this.props.hostedChannelDisplayName)))))
                    }, t.prototype.renderFooter = function() {
                        return a.createElement(g.i, {
                            type: g.n.SlideInTop,
                            enabled: !0,
                            delay: g.j.Medium,
                            duration: g.k.Medium
                        }, a.createElement(g.Fb, {
                            key: "hosting-ui-footer",
                            background: g.r.AccentAlt2,
                            className: "video-player-hosting-ui__footer",
                            display: g.X.Block,
                            padding: 1,
                            "data-test-selector": i.Footer,
                            "data-a-target": "hosting-ui-footer",
                            borderRadius: {
                                bottomLeft: g.x.Medium,
                                bottomRight: g.x.Medium
                            }
                        }, this.props.firstPageLoaded && a.createElement(g.Ya, {
                            padding: {
                                y: .5
                            },
                            display: g.X.Flex,
                            justifyContent: g.Xa.Between
                        }, a.createElement(g.Ya, {
                            display: g.X.Flex
                        }, a.createElement(g.Ya, {
                            margin: {
                                right: 1
                            }
                        }, a.createElement(u.a, {
                            "data-a-target": "hosting-ui-follow-button",
                            channelName: this.props.hostedChannelLogin || "",
                            channelLogin: this.props.hostedChannelLogin,
                            hostChannelLogin: this.props.hostChannelLogin,
                            hostChannelID: this.props.hostChannelID,
                            isHostedFollow: !0,
                            balloonDirection: g.v.BottomLeft,
                            followUIType: u.b.IconAndText,
                            unfollowUIType: u.b.IconOnly
                        })), a.createElement(g.Ya, null, a.createElement(h.a, {
                            channelLogin: this.props.hostedChannelLogin,
                            hostChannelID: this.props.hostChannelID,
                            hostChannelLogin: this.props.hostChannelLogin,
                            "data-a-target": "hosting-ui-subscribe-button"
                        }))), a.createElement(l.a, null, a.createElement(g.A, {
                            ariaLabel: Object(s.d)("More options", "HostingUI"),
                            overlay: !0,
                            icon: g.ub.More,
                            onClick: this.handleReportHosterClick,
                            "data-a-target": "hosting-ui-more-button",
                            "data-test-selector": i.MoreButton
                        }), a.createElement(g.u, {
                            direction: g.v.TopRight,
                            "data-a-target": "hosting-ui-more-balloon"
                        }, a.createElement(g.Ya, {
                            padding: {
                                y: 1
                            }
                        }, a.createElement(g.Va, {
                            onClick: this.handleReportHosterClick,
                            "data-a-target": "hosting-ui-report-button",
                            "data-test-selector": i.ReportButton
                        }, a.createElement(g.Ya, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, Object(s.d)("Report {hostChannelDisplayName}", {
                            hostChannelDisplayName: this.props.hostChannelDisplayName
                        }, "VideoPlayerHostingUI")))))))))
                    }, t
                }(a.Component),
                v = Object(o.compose)(Object(p.b)("HostingUI", {
                    autoReportInteractive: !0
                }))(f),
                b = n("/MKj"),
                k = n("wIs1"),
                y = n("1/iK"),
                C = n("aCAx"),
                S = n("y5D0"),
                E = n("kRBY"),
                N = n("/HY+");
            var O = Object(b.connect)(function(e) {
                return {
                    isLoggedIn: Object(E.f)(e),
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }, function(e) {
                return Object(o.bindActionCreators)({
                    login: function() {
                        return Object(S.e)(y.a.ReportHoster)
                    },
                    showReportUserModal: function(e) {
                        var t = r.__rest(e, []);
                        return Object(C.d)(N.a, t)
                    }
                }, e)
            })(Object(k.a)(v));
            n.d(t, !1, function() {
                return i
            }), n.d(t, !1, function() {
                return f
            }), n.d(t, !1, function() {
                return v
            }), n.d(t, "a", function() {
                return O
            })
        },
        "1rIY": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("2Ygb");

            function s(e, t) {
                var n = r.createContext(t),
                    s = n.Consumer,
                    l = n.Provider;
                return {
                    withContext: function(t) {
                        return function(n) {
                            var a;
                            return (a = function(e) {
                                function a() {
                                    return null !== e && e.apply(this, arguments) || this
                                }
                                return i.__extends(a, e), a.prototype.render = function() {
                                    var e = this;
                                    return r.createElement(s, null, function(a) {
                                        var o = t(a);
                                        return r.createElement(n, i.__assign({}, e.props, o))
                                    })
                                }, a
                            }(r.Component)).displayName = Object(o.a)("With" + e, n), a
                        }
                    },
                    InnerProvider: function(t) {
                        function n() {
                            return null !== t && t.apply(this, arguments) || this
                        }
                        return i.__extends(n, t), n.prototype.componentDidMount = function() {
                            "object" === typeof this.props.value && this.props.value || a.k.error(new Error(n.displayName + " rendered without an appropriate initial value"), "Set an initial value in your provider component at mount time.")
                        }, n.prototype.render = function() {
                            return r.createElement(l, {
                                value: this.props.value
                            }, this.props.children)
                        }, n.displayName = "Inner" + e + "Provider", n
                    }(r.Component)
                }
            }
        },
        "26nv": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Chat_ChannelData"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "chatSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "blockLinks"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "rules"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isModerator"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 166
                }
            };
            n.loc.source = {
                body: "query Chat_ChannelData($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nlogin\ndisplayName\nchatSettings {\nblockLinks\nrules\n}\nself {\nisModerator\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "2C+f": function(e, t, n) {},
        "2D+f": function(e, t, n) {},
        "2Dht": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "WhisperThread"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "whisperThread"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "userLastMessageRead"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sentAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "unreadMessagesCount"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "messages"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "20"
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cursor"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "nonce"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "content"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "emotes"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "emoteID"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "setID"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "from"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "to"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "__typename"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "__typename"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "from"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "sentAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "editedAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "deletedAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "__typename"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 347
                }
            };
            n.loc.source = {
                body: "query WhisperThread($id: ID!) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n__typename\n}\nunreadMessagesCount\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\nnonce\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n__typename\n}\n__typename\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n__typename\n}\n__typename\n}\n__typename\n}\n__typename\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "2EzP": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                r = Object(i.a)("MessageHandler"),
                a = (r.InnerProvider, r.withChatServiceProvider),
                o = (0, r.withContext)(function(e) {
                    return {
                        messageHandlerAPI: e.serviceAPI,
                        setMessageHandlerAPI: e.setServiceAPI
                    }
                })
        },
        "2bi+": function(e, t, n) {
            "use strict";
            n("DLhE");
            var i = n("fvjX"),
                r = n("/7QA"),
                a = n("mrSG"),
                o = n("V3Pk"),
                s = n("ZuiC"),
                l = function(e) {
                    return a.__assign({
                        searchHits: [],
                        videos: {}
                    }, e)
                };
            var c = n("sf7/"),
                d = n("DpwM"),
                u = n("g807"),
                p = n("RNNG"),
                m = n("Sfdh"),
                h = function(e) {
                    return a.__assign({
                        comments: Object(u.c)(),
                        currentVideoTime: 0,
                        cursor: {
                            future: d.g,
                            past: d.g
                        },
                        errorMessage: "",
                        hasDismissedChatReplayError: !1,
                        hasLoadedCurrentUserBlockedList: !1,
                        hasLoadedData: !1,
                        isPostCooldownActive: !1,
                        isReplayFilterOn: !1,
                        isScrollingSynced: !0,
                        replyCursorMap: {},
                        hideTimestamps: !1
                    }, e)
                },
                g = 150;
            var f = {
                apiToken: "",
                deviceId: ""
            };
            var v = {
                    users: {}
                },
                b = function(e) {
                    return a.__assign({
                        users: {}
                    }, e)
                };

            function k(e, t) {
                var n = t.reduce(function(e, t) {
                    return e[t.id] = t, e
                }, {});
                return a.__assign({}, e, n)
            }
            var y = Object(i.combineReducers)({
                comments: function(e, t) {
                    var n;
                    switch (void 0 === e && (e = h()), t.type) {
                        case s.l:
                            var i = a.__assign({}, t.comments[0], {
                                highlight: !0,
                                source: d.f
                            });
                            return a.__assign({}, e, {
                                comments: Object(u.d)(e.comments, [i]),
                                isPostCooldownActive: !0
                            });
                        case s.m:
                            return a.__assign({}, e, {
                                errorMessage: t.createError
                            });
                        case s.o:
                            return a.__assign({}, e, {
                                errorMessage: t.errorMessage
                            });
                        case s.d:
                            var r = t.comments[0].parentId,
                                l = e.cursor,
                                f = e.replyCursorMap,
                                v = t.comments.slice();
                            if ("" === r) l = t.cursor;
                            else if (f = a.__assign({}, e.replyCursorMap, ((n = {})[r] = t.cursor.future, n)), t.cursor.future === d.g) {
                                var b = Object(u.b)(e.comments, r);
                                if (b) {
                                    var k = a.__assign({}, b, {
                                        moreReplies: !1
                                    });
                                    v.push(k)
                                }
                            }
                            var y = Object(u.d)(e.comments, v);
                            return e.isScrollingSynced && (y = Object(p.e)(y, g)), a.__assign({}, e, {
                                comments: y,
                                cursor: l,
                                hasLoadedData: !0,
                                replyCursorMap: f
                            });
                        case s.e:
                            return a.__assign({}, e, {
                                comments: Object(u.d)(Object(u.c)(), t.comments),
                                hasLoadedData: !0,
                                cursor: t.cursor,
                                replyCursorMap: {}
                            });
                        case s.f:
                            return a.__assign({}, e, {
                                hasLoadedData: !0
                            });
                        case o.c:
                            return a.__assign({}, e, {
                                comments: Object(u.d)(Object(u.c)(), t.comments),
                                cursor: t.cursor,
                                hasLoadedData: !0,
                                errorMessage: ""
                            });
                        case o.b:
                            return a.__assign({}, h(), {
                                hasLoadedData: !0,
                                errorMessage: t.error
                            });
                        case c.b:
                            return a.__assign({}, e, {
                                currentVideoTime: Math.floor(t.updatedTime)
                            });
                        case c.a:
                        case s.c:
                            return a.__assign({}, h());
                        case s.n:
                            return a.__assign({}, e, {
                                comments: Object(p.d)(e.comments, t.comment)
                            });
                        case s.k:
                            var C = e.errorMessage;
                            return C === Object(m.a)().messageCreatedTooQuickError && (C = ""), a.__assign({}, e, {
                                isPostCooldownActive: !1,
                                errorMessage: C
                            });
                        case s.h:
                            return a.__assign({}, e, {
                                isScrollingSynced: !1
                            });
                        case s.i:
                            return a.__assign({}, e, {
                                comments: Object(p.e)(e.comments, g),
                                isScrollingSynced: !0
                            });
                        case o.a:
                            return a.__assign({}, e, {
                                comments: Object(p.a)(e.comments, function(e) {
                                    return e.commenter !== t.user
                                })
                            });
                        case s.p:
                            return a.__assign({}, e, {
                                comments: Object(u.d)(e.comments, t.comments)
                            });
                        case s.g:
                            return a.__assign({}, e, {
                                isReplayFilterOn: t.isReplayFilterOn
                            });
                        case s.a:
                            return a.__assign({}, e, {
                                hasDismissedChatReplayError: !0
                            });
                        case s.j:
                            return a.__assign({}, e, {
                                hideTimestamps: t.hideTimestamps
                            });
                        case s.b:
                            return a.__assign({}, e, {
                                isReplayFilterOn: t.isReplayFilterOn,
                                hideTimestamps: t.hideTimestamps
                            });
                        default:
                            return e
                    }
                },
                config: function(e) {
                    return void 0 === e && (e = f), e
                },
                users: function(e, t) {
                    switch (void 0 === e && (e = v), t.type) {
                        case s.d:
                        case s.e:
                        case o.c:
                        case s.l:
                            return {
                                users: k(e.users, t.users)
                            };
                        case s.c:
                            return a.__assign({}, b());
                        default:
                            return e
                    }
                },
                moderation: function(e, t) {
                    switch (void 0 === e && (e = l()), t.type) {
                        case o.c:
                            return a.__assign({}, e, {
                                videos: function(e, t) {
                                    var n = t.reduce(function(e, t) {
                                        return e[t.id] = t, e
                                    }, {});
                                    return a.__assign({}, e, n)
                                }(e.videos, t.videos)
                            });
                        case o.d:
                            return t.hits && t.hits.results.length > 0 ? a.__assign({}, e, {
                                searchHits: t.hits.results
                            }) : a.__assign({}, e, {
                                searchHits: []
                            });
                        case s.c:
                            return a.__assign({}, l());
                        default:
                            return e
                    }
                }
            });
            r.p.store.registerReducer("vodChat", y);
            n("WK0g"), n("ahza");
            var C = n("nxZp"),
                S = (function() {}(), n("pU2t"), n("l41m")),
                E = n("HjbF"),
                N = n("kVrx"),
                O = n("ZUUl"),
                _ = n("82xK"),
                w = n("zClW"),
                D = (n("3Ps+"), n("GCGb")),
                I = n("Zkco"),
                T = n("KD05"),
                M = n("fCiU"),
                R = n("XXm5"),
                L = n("znm4"),
                F = (n("pwkZ"), n("4OCo")),
                j = n("GEnX");
            n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {
                return C.a
            }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "A", function() {
                return S.d
            }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "o", function() {
                return s.y
            }), n.d(t, "q", function() {
                return c.d
            }), n.d(t, "u", function() {
                return E.c
            }), n.d(t, "v", function() {
                return E.d
            }), n.d(t, "n", function() {
                return E.a
            }), n.d(t, "m", function() {
                return N.a
            }), n.d(t, "x", function() {
                return N.b
            }), n.d(t, "z", function() {
                return N.c
            }), n.d(t, "B", function() {
                return O.a
            }), n.d(t, "C", function() {
                return O.b
            }), n.d(t, "k", function() {
                return _.a
            }), n.d(t, "p", function() {
                return w.a
            }), n.d(t, "r", function() {
                return w.b
            }), n.d(t, "y", function() {
                return w.c
            }), n.d(t, "H", function() {
                return w.i
            }), n.d(t, "D", function() {
                return w.d
            }), n.d(t, "E", function() {
                return w.e
            }), n.d(t, "F", function() {
                return w.f
            }), n.d(t, "G", function() {
                return w.g
            }), n.d(t, !1, function() {}), n.d(t, "b", function() {
                return d.b
            }), n.d(t, "d", function() {
                return d.d
            }), n.d(t, "a", function() {
                return d.a
            }), n.d(t, "c", function() {
                return d.c
            }), n.d(t, !1, function() {}), n.d(t, "w", function() {
                return d.h
            }), n.d(t, "e", function() {
                return D.b
            }), n.d(t, !1, function() {}), n.d(t, "h", function() {
                return I.a
            }), n.d(t, "t", function() {
                return T.b
            }), n.d(t, "s", function() {
                return M.b
            }), n.d(t, "f", function() {
                return R.a
            }), n.d(t, "g", function() {
                return R.b
            }), n.d(t, "l", function() {
                return L.a
            }), n.d(t, !1, function() {}), n.d(t, "j", function() {
                return F.a
            }), n.d(t, "i", function() {
                return j.a
            })
        },
        "2e6W": function(e, t, n) {},
        "3Bft": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                Prime: "prime",
                Tier1: "1000",
                Tier2: "2000",
                Tier3: "3000",
                Custom: "Custom"
            }
        },
        "3GF+": function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("Ue10");
            n("jPLR");

            function a(e) {
                e.stopPropagation()
            }
            var o = function(e) {
                return i.createElement(r.Qa, {
                    fullWidth: e.fullWidth,
                    display: r.X.InlineBlock
                }, i.createElement("div", {
                    className: "viewer-card-drag-cancel",
                    onMouseDown: a
                }, e.children))
            };
            n.d(t, "a", function() {
                return o
            })
        },
        "3HtZ": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Mods"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "mods"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "100"
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "login"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 94
                }
            };
            n.loc.source = {
                body: "query Mods($id: ID!) {\nuser(id: $id) {\nid\nmods(first: 100) {\nedges {\nnode {\nid\nlogin\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "3Ps+": function(e, t) {},
        "3YIm": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "SendWhisper"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SendWhisperInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "sendWhisper"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "nonce"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "content"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "content"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "emotes"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "emoteID"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "setID"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "from"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "to"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "__typename"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "from"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sentAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "editedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "deletedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "thread"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "participants"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "self"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "whisperPermissions"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "receive"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 352
                }
            };
            n.loc.source = {
                body: "mutation SendWhisper($input: SendWhisperInput!) {\nsendWhisper(input: $input) {\nmessage {\nid\nnonce\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n__typename\n}\n__typename\n}\nfrom {\nid\n__typename\n}\nsentAt\neditedAt\ndeletedAt\nthread {\nid\nparticipants {\nid\nself {\nwhisperPermissions {\nreceive\n}\n}\n}\n}\n__typename\n}\nerror {\ncode\n__typename\n}\n__typename\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "3ncn": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "productInfo"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ProductInfo"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "asin"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "crateASINs"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "description"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "256"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isEntitled"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isFeatured"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "isForSale"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "price"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "primeOffer"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "purchaseURL"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 164
                }
            };
            n.loc.source = {
                body: "fragment productInfo on ProductInfo {\nid\nasin\ncrateASINs\ndescription\nimageURL(size: 256)\nisEntitled\nisFeatured\nisForSale\nprice\nprimeOffer {\nid\n}\npurchaseURL\ntitle\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "41XU": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelBanner"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bannerImageURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 100
                }
            };
            n.loc.source = {
                body: "query ChannelBanner($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nlogin\nbannerImageURL\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4HoE": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ModUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ModUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "modUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "target"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 119
                }
            };
            n.loc.source = {
                body: "mutation ModUser($input: ModUserInput!){\nmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4IKE": function(e, t, n) {},
        "4L7N": function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("kRBY"),
                a = n("mrSG"),
                o = n("q1tI"),
                s = n("VwyG"),
                l = n("X7Ac"),
                c = n("yR8l"),
                d = n("MLDe"),
                u = n("v8tf"),
                p = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.data.clip,
                            n = "";
                        if (t && t.videoQualities) {
                            var i = t.videoQualities[0];
                            n = i.sourceURL
                        }
                        var r = this.props,
                            a = r.broadcasterId,
                            c = r.broadcasterLogin,
                            u = r.forceShow;
                        return o.createElement(s.a, {
                            ownerLogin: this.props.broadcasterLogin,
                            permittedRoles: {
                                editor: !0,
                                staff: !0
                            }
                        }, function(i) {
                            var r = i.permitted;
                            return n && (r || u) ? o.createElement(l.a, {
                                type: l.b.Download,
                                text: e.props.slug,
                                url: n,
                                onShareClick: t ? Object(d.c)(t.id, t.game && t.game.name, a, c, e.props.pageType) : void 0
                            }) : null
                        })
                    }, t
                }(o.Component),
                m = Object(c.a)(u)(p);
            var h = Object(i.connect)(function(e) {
                var t = Object(r.e)(e);
                return {
                    userLogin: t ? t.login : ""
                }
            })(m);
            n.d(t, "a", function() {
                return h
            })
        },
        "4OCo": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return u
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("mmRu"),
                s = n("cpJf"),
                l = n("Sfdh"),
                c = n("Tqc9"),
                d = n("Ue10"),
                u = (n("sbEw"), function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.submitReply = function() {
                            if ("" !== n.state.newReplyText) {
                                if (n.props.isCreationCoolDownActive) return n.setState({
                                    showCoolDownState: !0
                                }), void(n.props.onError && n.props.onError(Object(l.a)().messageCreatedTooQuickError));
                                n.props.onReplySubmit(n.state.newReplyText), n.setState({
                                    newReplyText: ""
                                })
                            }
                        }, n.onChange = function(e) {
                            e.preventDefault(), n.setState({
                                newReplyText: e.currentTarget.value
                            })
                        }, n.onEmoticonClick = function(e) {
                            n.setState({
                                newReplyText: n.state.newReplyText + " " + e
                            })
                        }, n.onKeyDown = function(e) {
                            e.key === c.b && (e.preventDefault(), n.submitReply()), n.props.onReplyFormClose && e.key === c.c && (e.preventDefault(), n.props.onReplyFormClose())
                        }, n.setTextareaRef = function(e) {
                            return n.textArea = e
                        }, n.state = {
                            newReplyText: t.replyToUserDisplayName ? "@" + t.replyToUserDisplayName + " " : "",
                            showCoolDownState: !1
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.isCreationCoolDownActive || this.setState({
                            showCoolDownState: !1
                        }), e.replyToUserDisplayName && e.replyToUserDisplayName !== this.props.replyToUserDisplayName && this.setState({
                            newReplyText: "@" + e.replyToUserDisplayName + " "
                        })
                    }, t.prototype.render = function() {
                        return r.createElement(d.Ya, {
                            className: this.props.classNames,
                            position: d.kb.Relative
                        }, r.createElement(d.Tb, {
                            error: this.state.showCoolDownState,
                            maxLength: 512,
                            noResize: !0,
                            onChange: this.onChange,
                            onKeyDown: this.onKeyDown,
                            placeholder: Object(a.d)("Reply", "ReplyForm"),
                            refDelegate: this.setTextareaRef,
                            value: this.state.newReplyText
                        }), r.createElement(o.a, {
                            attachRight: !0,
                            attachTop: !0,
                            channelOwnerID: this.props.videoOwnerID,
                            emotePickerSource: s.a.VodChat,
                            inputRef: this.textArea,
                            onClickEmote: this.onEmoticonClick,
                            position: d.kb.Absolute
                        }))
                    }, t
                }(r.Component))
        },
        "4hz/": function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("Ue10"),
                a = function() {
                    return i.createElement(r.Fb, {
                        margin: {
                            y: 1
                        },
                        background: r.r.Base,
                        elevation: 1
                    }, i.createElement(r.G, {
                        row: !0
                    }, i.createElement(r.Ya, {
                        flexShrink: 0,
                        position: r.kb.Relative
                    }, i.createElement(r.Ya, {
                        padding: 1,
                        position: r.kb.Absolute
                    }, i.createElement(r.jb, {
                        height: 57,
                        width: 47
                    })), i.createElement(r.jb, {
                        height: 180,
                        width: 320
                    })), i.createElement(r.H, null, i.createElement(r.Ya, {
                        margin: {
                            x: 2
                        }
                    }, i.createElement(r.Qa, {
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(r.W, {
                        type: r.Wb.H4
                    }, i.createElement(r.jb, {
                        lineCount: 1
                    }))), i.createElement(r.W, {
                        color: r.O.Alt2
                    }, i.createElement(r.jb, {
                        lineCount: 1
                    })), i.createElement(r.W, {
                        color: r.O.Alt2
                    }, i.createElement(r.jb, {
                        lineCount: 1
                    })), i.createElement(r.Ya, {
                        display: r.X.Flex,
                        margin: {
                            top: 2
                        }
                    }, i.createElement(r.Ya, {
                        margin: {
                            right: 1
                        }
                    }, i.createElement(r.jb, {
                        height: 28,
                        width: 73
                    })), i.createElement(r.Ya, {
                        margin: {
                            right: 1
                        }
                    }, i.createElement(r.jb, {
                        height: 28,
                        width: 83
                    })), i.createElement(r.jb, {
                        height: 28,
                        width: 28
                    }))))))
                };
            n.d(t, "a", function() {
                return o
            });
            var o = function() {
                for (var e = [], t = 0; t < 10; t++) e.push(i.createElement(a, {
                    key: t
                }));
                return i.createElement(i.Fragment, null, e)
            }
        },
        "4w0E": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_BanUserFromChatRoom"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BanUserFromChatRoomInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "banUserFromChatRoom"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "ban"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPermanent"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bannedUser"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 164
                }
            };
            n.loc.source = {
                body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\nbannedUser {\nid\n}\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4zGI": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_DenyRejectedCheerMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DenyRejectedCheerInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "denyRejectedCheer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 115
                }
            };
            n.loc.source = {
                body: "mutation Chat_DenyRejectedCheerMessage($input: DenyRejectedCheerInput!) {\ndenyRejectedCheer(input: $input) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "52dQ": function(e, t, n) {},
        "5Ijs": function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("oJmH"),
                o = n("/7QA"),
                s = n("q1tI"),
                l = n("eJ65"),
                c = n("EuPq"),
                d = n("KYAw"),
                u = n("Ue10"),
                p = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = Object(d.a)(this.props.collection.id);
                        return s.createElement("div", null, s.createElement(u.W, null, Object(o.d)("Collection Link", "VideoShareBox")), s.createElement(c.a, {
                            onClick: function() {
                                e.props.onClick(t)
                            },
                            value: t
                        }))
                    }, t
                }(s.Component),
                m = n("BQs+"),
                h = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickHandler = function(e) {
                            var n = {
                                location: t.props.tracking.location,
                                platform: m.a.Link,
                                shareURL: e
                            };
                            Object(m.b)(t.props.collection, n, o.p.apollo.client)
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return s.createElement(p, r.__assign({}, this.props, {
                            onClick: this.onClickHandler
                        }))
                    }, t
                }(s.Component),
                g = n("EdhP"),
                f = n("2xye"),
                v = n("Addw");

            function b(e) {
                switch (e.type) {
                    case i.Collection:
                        return e.currentVideo || null;
                    case i.Video:
                        return e;
                    default:
                        return e
                }
            }! function(e) {
                e[e.Collection = 0] = "Collection", e[e.Video = 1] = "Video"
            }(i || (i = {}));
            var k = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.content,
                            n = this.getEmbedPlayerContentURL(t);
                        return s.createElement("div", null, s.createElement(u.W, null, Object(o.d)("Embed Video", "VideoShareBox")), s.createElement(c.a, {
                            onClick: function() {
                                e.props.onClick(n)
                            },
                            value: this.getEmbedPlayerCode(t)
                        }))
                    }, t.prototype.getEmbedPlayerCode = function(e) {
                        var t = function(e, t) {
                                var n = {
                                    autoplay: !1
                                };
                                switch (e.type) {
                                    case i.Collection:
                                        e.currentVideo ? (n.video = e.currentVideo.id, n.t = t ? Object(v.a)(t) : void 0) : n.collection = e.id;
                                        break;
                                    case i.Video:
                                        n.video = e.id, n.t = t ? Object(v.a)(t) : void 0
                                }
                                return n
                            }(e, null !== this.props.selectedVideoStartTime ? this.props.selectedVideoStartTime : void 0),
                            n = e.owner.displayName,
                            r = e.title,
                            a = Object(o.d)("Watch {title} from {displayName} on www.twitch.tv", {
                                displayName: n,
                                title: r
                            }, "VideoShareBox");
                        return Object(g.b)(t, {
                            textLink: {
                                url: this.getEmbedPlayerContentURL(e),
                                text: a
                            },
                            allowScrolling: !1,
                            allowFullscreen: !0
                        })
                    }, t.prototype.getEmbedPlayerContentURL = function(e) {
                        switch (e.type) {
                            case i.Collection:
                                return e.currentVideo ? Object(d.b)(e.currentVideo.id, {
                                    tt_medium: f.PageviewMedium.VideoEmbed,
                                    tt_content: f.PageviewContent.TextLink,
                                    t: this.props.selectedVideoStartTime
                                }) : Object(d.a)(e.id, {
                                    tt_medium: f.PageviewMedium.VideoEmbed,
                                    tt_content: f.PageviewContent.TextLink
                                });
                            case i.Video:
                                return Object(d.b)(e.id, {
                                    tt_medium: f.PageviewMedium.VideoEmbed,
                                    tt_content: f.PageviewContent.TextLink,
                                    t: this.props.selectedVideoStartTime
                                });
                            default:
                                return e
                        }
                    }, t
                }(s.Component),
                y = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickHandler = function(e) {
                            var n = t.props.content;
                            switch (n.type) {
                                case i.Collection:
                                    n.currentVideo ? t.trackVideoShare(e, n.currentVideo) : t.trackCollectionShare(e, n);
                                    break;
                                case i.Video:
                                    t.trackVideoShare(e, n);
                                    break;
                                default:
                                    return n
                            }
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return s.createElement(k, r.__assign({}, this.props, {
                            onClick: this.onClickHandler
                        }))
                    }, t.prototype.trackCollectionShare = function(e, t) {
                        var n = {
                            location: this.props.tracking.location,
                            platform: m.a.Embed,
                            shareURL: e
                        };
                        Object(m.b)(t, n, o.p.apollo.client)
                    }, t.prototype.trackVideoShare = function(e, t) {
                        var n = {
                            location: this.props.tracking.location,
                            platform: m.a.Embed,
                            shareURL: e
                        };
                        Object(m.c)(t, n, o.p.apollo.client)
                    }, t
                }(s.Component),
                C = n("X7Ac"),
                S = [{
                    type: C.b.Twitter,
                    selector: "twitter-button"
                }, {
                    type: C.b.Facebook,
                    selector: "fb-button"
                }, {
                    type: C.b.VKontakte,
                    selector: "vk-button"
                }, {
                    type: C.b.Reddit,
                    selector: "reddit-button"
                }, {
                    type: C.b.Copy,
                    selector: "copy-link-button"
                }],
                E = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.content,
                            n = this.getContentURL(t),
                            i = this.getSocialShareContextTitle(t),
                            r = S.map(function(t) {
                                return s.createElement(C.a, {
                                    "data-test-selector": t.selector,
                                    key: t.type,
                                    onShareClick: function(t) {
                                        e.props.onClick(n, t)
                                    },
                                    text: i,
                                    type: t.type,
                                    url: n
                                })
                            });
                        return s.createElement(u.Ya, {
                            display: u.X.Flex,
                            justifyContent: u.Xa.Between
                        }, r)
                    }, t.prototype.getSocialShareContextTitle = function(e) {
                        return Object(o.d)("Check out {title} from {displayName} on www.twitch.tv", {
                            displayName: e.owner.displayName,
                            title: e.title
                        }, "VideoShareBox")
                    }, t.prototype.getContentURL = function(e) {
                        switch (e.type) {
                            case i.Collection:
                                return e.currentVideo ? Object(d.b)(e.currentVideo.id, {
                                    collection: e.id,
                                    t: this.props.selectedVideoStartTime
                                }) : Object(d.a)(e.id);
                            case i.Video:
                                return Object(d.b)(e.id, {
                                    t: this.props.selectedVideoStartTime
                                });
                            default:
                                return e
                        }
                    }, t
                }(s.Component),
                N = function(e) {
                    switch (e) {
                        case C.b.Twitter:
                            return m.a.Twitter;
                        case C.b.Reddit:
                            return m.a.Reddit;
                        case C.b.VKontakte:
                            return m.a.VKontakte;
                        case C.b.Facebook:
                            return m.a.Facebook;
                        case C.b.Copy:
                            return m.a.Copy;
                        case C.b.CopyInput:
                            return m.a.Link;
                        case C.b.Download:
                            return m.a.Download;
                        default:
                            return e
                    }
                },
                O = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickHandler = function(e, n) {
                            var r = t.props.content;
                            switch (r.type) {
                                case i.Collection:
                                    r.currentVideo ? t.trackVideoShare(e, r.currentVideo, n, r.id) : t.trackCollectionShare(e, r, n);
                                    break;
                                case i.Video:
                                    t.trackVideoShare(e, r, n);
                                    break;
                                default:
                                    return r
                            }
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return s.createElement(E, r.__assign({}, this.props, {
                            onClick: this.onClickHandler
                        }))
                    }, t.prototype.trackCollectionShare = function(e, t, n) {
                        var i = {
                            location: this.props.tracking.location,
                            platform: N(n),
                            shareURL: e
                        };
                        Object(m.b)(t, i, o.p.apollo.client)
                    }, t.prototype.trackVideoShare = function(e, t, n, i) {
                        var r = {
                            collectionID: i,
                            location: this.props.tracking.location,
                            platform: N(n),
                            shareURL: e
                        };
                        Object(m.c)(t, r, o.p.apollo.client)
                    }, t
                }(s.Component),
                _ = n("hyVY"),
                w = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onShareTimestampClick = function(e) {
                            void 0 !== t.props.currentVideoTime && t.props.onVideoStartTimeChange(e.currentTarget.checked ? t.props.currentVideoTime : void 0)
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = {};
                        this.props.collectionID && (t.collection = this.props.collectionID), this.props.selectedVideoStartTime && (t.t = this.props.selectedVideoStartTime);
                        var n = Object(d.b)(this.props.video.id, t);
                        return s.createElement("div", null, s.createElement(u.W, null, Object(o.d)("Video Link", "VideoShareBox")), s.createElement(c.a, {
                            onClick: function() {
                                e.props.onInputClick(n)
                            },
                            value: n
                        }), this.renderCurrentVideoOffsetLinkOption())
                    }, t.prototype.renderCurrentVideoOffsetLinkOption = function() {
                        if (void 0 === this.props.currentVideoTime) return null;
                        var e = this.props.selectedVideoStartTime || this.props.currentVideoTime,
                            t = Object(_.b)(e);
                        return s.createElement(u.Ya, {
                            padding: {
                                top: .5
                            }
                        }, s.createElement(u.N, {
                            id: "video-share-timestamp-toggle",
                            label: Object(o.d)("Skip to {deeplinkTimestamp}", {
                                deeplinkTimestamp: t
                            }, "VideoShareBox"),
                            "data-a-target": "video-share-timestamp-toggle",
                            "data-a-value": void 0 !== this.props.selectedVideoStartTime,
                            checked: !!this.props.selectedVideoStartTime,
                            onChange: this.onShareTimestampClick
                        }))
                    }, t
                }(s.Component),
                D = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickHandler = function(e, n) {
                            var i = {
                                collectionID: n,
                                location: t.props.tracking.location,
                                platform: m.a.Link,
                                shareURL: e
                            };
                            Object(m.c)(t.props.video, i, o.p.apollo.client)
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return s.createElement(w, r.__assign({}, this.props, {
                            onInputClick: this.onClickHandler
                        }))
                    }, t
                }(s.Component),
                I = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {}, t.toggleTimer = function(e) {
                            t.props.getCurrentVideoTime && !e && (t.updateCurrentTime(), t.getTimeTimer = setInterval(t.updateCurrentTime, 1e3))
                        }, t.updateCurrentTime = function() {
                            if (t.props.getCurrentVideoTime) {
                                var e = t.props.getCurrentVideoTime();
                                t.setState({
                                    currentTime: e
                                })
                            }
                        }, t.onVideoStartTimeChangeHandler = function(e) {
                            t.setState({
                                selectedVideoStartTime: e
                            })
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.currentVideoTime === this.state.currentTime || e.getCurrentVideoTime || this.setState({
                            currentTime: e.currentVideoTime
                        })
                    }, t.prototype.componentWillUnmount = function() {
                        this.getTimeTimer && clearTimeout(this.getTimeTimer)
                    }, t.prototype.render = function() {
                        var e = null;
                        return this.props.content && (e = this.shareBalloonContent(this.props.content)), s.createElement(l.a, {
                            onToggle: this.toggleTimer
                        }, s.createElement(u.z, {
                            disabled: !this.props.content,
                            icon: u.ub.Share,
                            type: this.props.buttonType
                        }, Object(o.d)("Share", "VideoShareBox")), s.createElement(u.u, {
                            direction: this.props.balloonDirection,
                            size: u.w.Small
                        }, e))
                    }, t.prototype.shareBalloonContent = function(e) {
                        return s.createElement(u.Ya, {
                            padding: 1
                        }, s.createElement(O, {
                            content: e,
                            selectedVideoStartTime: this.state.selectedVideoStartTime,
                            tracking: this.props.tracking
                        }), this.renderCollectionShareInput(e), this.renderVideoShareInput(e), this.renderEmbedPlayerInput(e))
                    }, t.prototype.renderCollectionShareInput = function(e) {
                        return e.type !== i.Collection ? null : s.createElement(u.Ya, {
                            padding: {
                                top: 1
                            }
                        }, s.createElement(h, {
                            collection: e,
                            tracking: this.props.tracking
                        }))
                    }, t.prototype.renderVideoShareInput = function(e) {
                        var t, n;
                        if (e.type === i.Collection) {
                            if (!e.currentVideo) return null;
                            n = e.id, t = e.currentVideo
                        } else t = e;
                        return s.createElement(u.Ya, {
                            padding: {
                                top: 1
                            }
                        }, s.createElement(D, {
                            collectionID: n,
                            currentVideoTime: this.state.currentTime,
                            onVideoStartTimeChange: this.onVideoStartTimeChangeHandler,
                            selectedVideoStartTime: this.state.selectedVideoStartTime,
                            tracking: this.props.tracking,
                            video: t
                        }))
                    }, t.prototype.renderEmbedPlayerInput = function(e) {
                        return s.createElement(u.Ya, {
                            padding: {
                                top: 1
                            }
                        }, s.createElement(y, {
                            content: e,
                            selectedVideoStartTime: this.state.selectedVideoStartTime,
                            tracking: this.props.tracking
                        }))
                    }, t
                }(s.Component),
                T = n("gFHd");

            function M(e) {
                return e.owner && e.title ? {
                    type: i.Video,
                    id: e.id,
                    owner: {
                        id: e.owner.id,
                        displayName: e.owner.displayName
                    },
                    title: e.title
                } : null
            }
            var R = Object(a.compose)(Object(a.graphql)(T, {
                options: function(e) {
                    var t = e.content;
                    return t ? {
                        variables: {
                            collectionID: t.collectionID || "",
                            hasCollection: !!t.collectionID,
                            hasVideo: !!t.videoID,
                            videoID: t.videoID || ""
                        }
                    } : {
                        variables: {
                            collectionID: "",
                            hasCollection: !1,
                            hasVideo: !1,
                            videoID: ""
                        }
                    }
                },
                props: function(e) {
                    var t = r.__assign({}, e, {
                            content: void 0
                        }),
                        n = e.data;
                    return n.loading ? t : n.error ? (o.k.error(n.error, "VideoShareBoxContainer"), t) : (n.collection ? t.content = function(e, t) {
                        var n;
                        if (t) {
                            var r = M(t);
                            if (!r) return null;
                            n = r
                        }
                        return e.owner && e.title ? {
                            type: i.Collection,
                            id: e.id,
                            owner: {
                                id: e.owner.id,
                                displayName: e.owner.displayName
                            },
                            title: e.title,
                            currentVideo: n
                        } : null
                    }(n.collection, n.video) || void 0 : n.video && (t.content = M(n.video) || void 0), t)
                }
            }))(I);
            n.d(t, "a", function() {
                return R
            }), n.d(t, !1, function() {
                return i
            }), n.d(t, !1, function() {
                return b
            })
        },
        "5NSO": function(e, t, n) {},
        "5Siz": function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "b", function() {
                    return i
                }), n.d(t, "a", function() {
                    return r
                }),
                function(e) {
                    e.PopoutChat = "popout_chat", e.Chat = "chat", e.LiveDashButton = "live_dashboard_button", e.LiveDashHotkey = "live_dashboard_hotkey", e.LiveDashChat = "live_dashboard_chat"
                }(i || (i = {}));
            var r = 140
        },
        "5a1p": function(e, t, n) {},
        "5g1g": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("wUQP"),
                o = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return this.props.incremental && Object(a.c)(this.props.name) || Object(a.b)(this.props.name) ? this.props.children : null
                    }, t
                }(r.Component),
                s = o;
            n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            })
        },
        "5goO": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("z36O"),
                s = n("Ue10"),
                l = function(e) {
                    return r.createElement(o.a, i.__assign({
                        linkTo: "/team/" + e.name,
                        svgAsset: s.ub.Team,
                        title: e.displayName,
                        tooltip: Object(a.d)("Team", "TeamLink")
                    }, Object(s.kc)(e)))
                };
            n.d(t, "a", function() {
                return l
            })
        },
        "5in9": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage_ChannelInfoBar_User_RENAME1"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "lastBroadcast"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "title"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "boxArtURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "85"
                                                        }
                                                    }, {
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "113"
                                                        }
                                                    }],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "primaryTeam"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileViewCount"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "boxArtURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "85"
                                                        }
                                                    }, {
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "113"
                                                        }
                                                    }],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "title"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "viewersCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 324
                }
            };
            n.loc.source = {
                body: "query ChannelPage_ChannelInfoBar_User_RENAME1($login: String!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nlastBroadcast {\nid\ntitle\ngame {\nid\nname\nboxArtURL(width: 85 height: 113)\n}\n}\nprimaryTeam {\nid\ndisplayName\nname\n}\nprofileViewCount\nstream {\nid\ngame {\nid\nname\nboxArtURL(width: 85 height: 113)\n}\ntitle\nviewersCount\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "5xw2": function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return l
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "b", function() {
                return d
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("HSqT"),
                o = n("+U0Y"),
                s = "languageDirectoryFilters";

            function l(e, t) {
                var n = this;
                return function(a) {
                    return i.__awaiter(n, void 0, void 0, function() {
                        var n, l;
                        return i.__generator(this, function(i) {
                            return n = new Set(d()), t ? n.add(e) : n.delete(e), l = Array.from(n), r.m.set(s, l), a(Object(o.b)(l)), [2]
                        })
                    })
                }
            }

            function c() {
                var e = this;
                return function(t) {
                    return i.__awaiter(e, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            return r.m.set(s, []), t(Object(o.b)([])), [2]
                        })
                    })
                }
            }

            function d() {
                return r.m.get(s, []).filter(function(e) {
                    return a.a.has(e)
                })
            }
        },
        "5zf8": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return l
            });
            var i, r, a = n("/7QA");

            function o(e, t) {
                switch (e) {
                    case i.Second:
                        return Object(a.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                            secondCount: t
                        }, "formatDuration");
                    case i.Minute:
                        return Object(a.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                            minuteCount: t
                        }, "formatDuration");
                    case i.Hour:
                        return Object(a.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                            hourCount: t
                        }, "formatDuration");
                    case i.Day:
                        return Object(a.d)("{dayCount, plural, one {# day} other {# days}}", {
                            dayCount: t
                        }, "formatDuration");
                    case i.Week:
                        return Object(a.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                            weekCount: t
                        }, "formatDuration");
                    case i.Month:
                        return Object(a.d)("{monthCount, plural, one {# month} other {# months}}", {
                            monthCount: t
                        }, "formatDuration");
                    default:
                        return ""
                }
            }

            function s(e, t) {
                switch (e) {
                    case i.Second:
                        return Object(a.d)("{secondCount}s", {
                            secondCount: t
                        }, "formatDuration");
                    case i.Minute:
                        return Object(a.d)("{minuteCount}m", {
                            minuteCount: t
                        }, "formatDuration");
                    case i.Hour:
                        return Object(a.d)("{hourCount}h", {
                            hourCount: t
                        }, "formatDuration");
                    case i.Day:
                        return Object(a.d)("{dayCount}d", {
                            dayCount: t
                        }, "formatDuration");
                    case i.Week:
                        return Object(a.d)("{weekCount}w", {
                            weekCount: t
                        }, "formatDuration");
                    case i.Month:
                        return Object(a.d)("{monthCount}mo", {
                            monthCount: t
                        }, "formatDuration");
                    default:
                        return ""
                }
            }

            function l(e, t) {
                var n;
                switch (void 0 === t && (t = r.Humanized), t === r.ClockAuto && (t = e >= 3600 ? r.ClockHMS : r.ClockMS), t) {
                    case r.ClockHM:
                    case r.ClockHMS:
                        n = i.Hour;
                        break;
                    case r.ClockMS:
                        n = i.Minute
                }
                var l = 2;
                t === r.ClockHMS && (l = 3);
                var d = function(e, t) {
                        void 0 === t && (t = i.Month);
                        var n = {};
                        return n.seconds = e, e < 60 || t === i.Second ? n : (n.minutes = Math.floor(e / 60), n.seconds = e % 60, n.minutes < 60 || t === i.Minute ? n : (n.hours = Math.floor(n.minutes / 60), n.minutes = n.minutes % 60, n.hours < 24 || t === i.Hour ? n : (n.days = Math.floor(n.hours / 24), n.hours = n.hours % 24, n.days < 7 || t === i.Day ? n : n.days <= 26 || t === i.Week ? (n.weeks = Math.floor(n.days / 7), n.days = n.days % 7, n) : (n.months = Math.round((n.days + 3) / 30), n))))
                    }(e, n),
                    u = Object.keys(d);
                if (u.forEach(function(e, n) {
                        t !== r.Humanized && t !== r.HumanizedShort || d[e] || delete d[e], n < u.length - l && delete d[e]
                    }), t === r.Humanized) return function(e) {
                    return e.months ? o(i.Month, e.months) : e.weeks && e.days ? o(i.Week, e.weeks) + " " + o(i.Day, e.days) : e.weeks ? o(i.Week, e.weeks) : e.days && e.hours ? o(i.Day, e.days) + " " + o(i.Hour, e.hours) : e.days ? o(i.Day, e.days) : e.hours && e.minutes ? o(i.Hour, e.hours) + " " + o(i.Minute, e.minutes) : e.hours ? o(i.Hour, e.hours) : e.minutes && e.seconds ? o(i.Minute, e.minutes) + " " + o(i.Second, e.seconds) : e.minutes ? o(i.Minute, e.minutes) : o(i.Second, e.seconds || 0)
                }(d);
                if (t === r.HumanizedShort) return function(e) {
                    return e.months ? s(i.Month, e.months) : e.weeks && e.days ? "" + s(i.Week, e.weeks) + s(i.Day, e.days) : e.weeks ? s(i.Week, e.weeks) : e.days && e.hours ? "" + s(i.Day, e.days) + s(i.Hour, e.hours) : e.days ? s(i.Day, e.days) : e.hours && e.minutes ? "" + s(i.Hour, e.hours) + s(i.Minute, e.minutes) : e.hours ? s(i.Hour, e.hours) : e.minutes && e.seconds ? "" + s(i.Minute, e.minutes) + s(i.Second, e.seconds) : e.minutes ? s(i.Minute, e.minutes) : s(i.Second, e.seconds || 0)
                }(d);
                var p = ":",
                    m = !1;
                switch (a.p.intl.getLanguageCode()) {
                    case "cy":
                    case "da":
                    case "fi":
                    case "id":
                    case "nb":
                    case "si":
                        p = ".";
                        break;
                    case "af":
                    case "fr":
                    case "lt":
                        m = !0
                }
                var h = d.seconds || 0,
                    g = d.minutes || 0,
                    f = d.hours || 0;
                switch (t) {
                    case r.ClockHM:
                    case r.ClockHMS:
                        var v = (m ? c(f, 2) : f) + p + c(g, 2);
                        return t === r.ClockHMS && (v += p + c(h, 2)), v;
                    case r.ClockMS:
                        return (m ? c(g, 2) : g) + p + c(h, 2)
                }
            }

            function c(e, t) {
                var n = e.toString();
                return n.length < t ? "0".repeat(t - n.length) + n : n
            }! function(e) {
                e[e.Second = 0] = "Second", e[e.Minute = 1] = "Minute", e[e.Hour = 2] = "Hour", e[e.Day = 3] = "Day", e[e.Week = 4] = "Week", e[e.Month = 5] = "Month"
            }(i || (i = {})),
            function(e) {
                e[e.Humanized = 0] = "Humanized", e[e.HumanizedShort = 1] = "HumanizedShort", e[e.ClockAuto = 2] = "ClockAuto", e[e.ClockHM = 3] = "ClockHM", e[e.ClockMS = 4] = "ClockMS", e[e.ClockHMS = 5] = "ClockHMS"
            }(r || (r = {}))
        },
        "60o1": function(e, t, n) {
            "use strict";

            function i(e, t) {
                var n = e,
                    i = !1;
                return n ? function(e) {
                    return e.split("").map(function(e) {
                        return e.charCodeAt(0) > 127
                    }).reduce(function(e, t) {
                        return e || t
                    })
                }(n) && (i = !0) : n = t, {
                    userDisplayName: n,
                    isIntl: i
                }
            }
            n.d(t, "a", function() {
                return i
            })
        },
        "6MRn": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsPinnedCheerV2_LeaderboardEntry"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "userID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "profileImageWidth"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "userID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "profileImageWidth"
                                            }
                                        }
                                    }],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 168
                }
            };
            n.loc.source = {
                body: "query BitsPinnedCheerV2_LeaderboardEntry($userID: ID! $profileImageWidth: Int!) {\nuser(id: $userID) {\nid\ndisplayName\nlogin\nprofileImageURL(width:$profileImageWidth)\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "6h5w": function(e, t, n) {
            "use strict";
            var i, r = n("q1tI"),
                a = n("9C/b"),
                o = n("/7QA"),
                s = n("vRsq"),
                l = n("tuvy"),
                c = n("Ue10"),
                d = Object(a.a)(function(e) {
                    var t, n = e.options;
                    return t = Object(l.a)() ? Object(s.j)(e.channelLogin, e, n) : Object(s.q)(e.channelLogin, n && {
                        filter: n.filter ? Object(s.z)(n.filter) : void 0,
                        sort: n.sort
                    }), r.createElement(c.U, {
                        to: t,
                        hoverUnderlineNone: !0
                    }, r.createElement(c.Ya, {
                        display: c.X.InlineFlex,
                        flexDirection: c.Aa.Row,
                        alignItems: c.f.Center
                    }, r.createElement(c.W, {
                        type: c.Wb.H5
                    }, Object(o.d)("Expand All", "VideoShelfExpandLink")), r.createElement(c.tb, {
                        asset: c.ub.AngleRight,
                        height: 14
                    })))
                });
            n.d(t, "a", function() {
                    return u
                }),
                function(e) {
                    e.Title = "title", e.SubTitle = "subtitle"
                }(i || (i = {}));
            var u = function(e) {
                if (!e.titleMessage) return r.createElement(c.jb, {
                    width: 200
                });
                var t = r.createElement(c.W, {
                    type: c.Wb.H4,
                    color: c.O.Base,
                    bold: !0,
                    "data-test-selector": i.Title
                }, e.titleMessage);
                e.titleLinkTo && (t = r.createElement(c.U, {
                    to: e.titleLinkTo,
                    type: c.V.Inherit
                }, t));
                var n = e.subTitle;
                return e.subTitle && "string" == typeof e.subTitle ? n = r.createElement(c.W, {
                    color: c.O.Alt2,
                    type: c.Wb.Span,
                    "data-test-selector": i.SubTitle
                }, e.subTitle) : e.subTitle && (n = r.createElement(c.Ya, {
                    "data-test-selector": i.SubTitle
                }, n)), r.createElement(r.Fragment, null, r.createElement(c.Ya, {
                    display: c.X.Flex,
                    flexDirection: c.Aa.Row,
                    alignItems: c.f.End
                }, t, e.expandLink && r.createElement(c.Ya, {
                    padding: {
                        left: 1
                    }
                }, r.createElement(d, {
                    channelLogin: e.expandLink.channelLogin,
                    options: e.expandLink.options
                }))), n)
            }
        },
        "6j5V": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("RcPG");

            function r(e) {
                return {
                    type: i.a.Text,
                    content: e
                }
            }
        },
        "7JxC": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("q1tI"),
                r = n("Ue10"),
                a = function() {
                    for (var e = [], t = 0; t < 9; t++) {
                        var n = i.createElement(r.Ya, {
                            padding: {
                                bottom: 2
                            },
                            key: t
                        }, i.createElement(r.jb, {
                            height: 320,
                            width: 320
                        }));
                        e.push(n)
                    }
                    return i.createElement(r.cc, {
                        center: !0,
                        noGrow: !0,
                        childWidth: r.dc.Large,
                        gutterSize: r.ec.Small,
                        placeholderItems: 9
                    }, e)
                }
        },
        "7NxT": function(e, t, n) {
            "use strict";
            n("DLhE");
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("tY8L");
            r.p.store.registerReducer("viewerCard", function(e, t) {
                switch (void 0 === e && (e = {
                    viewerCardOptions: null
                }), t.type) {
                    case a.a:
                        return i.__assign({}, e, {
                            viewerCardOptions: null
                        });
                    case a.b:
                        return t.viewerCardOptions ? i.__assign({}, e, {
                            viewerCardOptions: i.__assign({}, t.viewerCardOptions)
                        }) : e;
                    default:
                        return e
                }
            })
        },
        "7SjK": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("TSYQ"),
                o = n("/7QA"),
                s = n("GnwI"),
                l = n("Ue10"),
                c = (n("GOKC"), r.createElement(l.Fb, {
                    alignItems: l.f.Center,
                    background: l.r.Overlay,
                    borderRadius: l.x.Small,
                    className: "emote-button__lock",
                    color: l.O.Overlay,
                    "data-test-selector": "emote-button-lock",
                    display: l.X.InlineFlex,
                    justifyContent: l.Xa.Center,
                    position: l.kb.Absolute,
                    zIndex: l.jc.Above
                }, r.createElement(l.tb, {
                    asset: l.ub.Lock,
                    height: 10,
                    width: 10
                }))),
                d = function(e) {
                    var t = a("emote-button__link", {
                            "emote-button__link--locked": !e.onClick
                        }),
                        n = e.emote,
                        i = n.displayName,
                        d = n.srcSet;
                    if (!d) return null;
                    var u = r.createElement("img", {
                        className: "emote-picker__image",
                        srcSet: d,
                        alt: i
                    });
                    if (e.isCriticalImage) {
                        for (var p = d.split(" ")[0], m = {}, h = 0, g = d.split(","); h < g.length; h++) {
                            var f = g[h].trim().split(" "),
                                v = f[1],
                                b = f[0];
                            m[v] = b
                        }
                        u = r.createElement(s.a, {
                            className: "emote-picker__emote-image",
                            src: p,
                            srcSet: m,
                            alt: i || ""
                        })
                    }
                    return r.createElement("div", {
                        className: "emote-button"
                    }, r.createElement(l.Zb, {
                        label: i || Object(o.d)("Emote", "EmoteButton"),
                        direction: l.bc.Bottom
                    }, r.createElement(l.Qa, {
                        display: l.X.Flex,
                        alignItems: l.f.Center,
                        justifyContent: l.Xa.Center
                    }, r.createElement("button", {
                        "data-test-selector": "emote-button-clickable",
                        className: t,
                        "aria-label": i,
                        name: i,
                        onClick: e.onClick ? e.onClick.bind(null, e.emote) : void 0,
                        "data-a-target": i
                    }, r.createElement("figure", null, e.locked ? c : null, u)))))
                },
                u = (n("VrOd"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleClickEmote = function(e) {
                            t.props.onClickEmote && t.props.onClickEmote(e, t.props.context)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.emotes.map(function(t, n) {
                                return r.createElement(l.Ya, {
                                    key: "emote-button-padder-" + t.id + "--" + t.setID,
                                    padding: {
                                        left: e.props.spaced ? .5 : 0
                                    }
                                }, r.createElement(d, {
                                    key: "emote-button-" + t.id + "--" + t.setID,
                                    emote: t,
                                    isCriticalImage: 0 === n,
                                    locked: e.props.locked || t.isLocked,
                                    onClick: e.props.locked ? void 0 : e.handleClickEmote
                                }))
                            });
                        return r.createElement(l.Ya, {
                            display: l.X.Flex,
                            flexWrap: l.Ba.Wrap,
                            justifyContent: l.Xa.Center
                        }, t)
                    }, t
                }(r.Component));
            n.d(t, "a", function() {
                return u
            })
        },
        "7TkE": function(e, t, n) {
            e.exports = n.p + "assets/gift-open-ba127d9c110a18648ca1.png"
        },
        "7c8l": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("2xye"),
                s = 0,
                l = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.trackLongtask = function(e) {
                            if (t.shouldTrackLongtask()) {
                                var n = e.attribution.find(function(e) {
                                    return "script" === e.name
                                });
                                a.o.track(o.SpadeEventType.UserLongtask, {
                                    container_id: n && n.containerId,
                                    container_name: n && n.containerName,
                                    container_src: n && n.containerSrc,
                                    container_type: n && n.containerType,
                                    longtask_duration: e.duration,
                                    longtask_name: e.name
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this;
                        if (++s > 1) {
                            var t = "Multiple LongtaskTrackers mounted (one maximum allowed).";
                            a.k.error(new Error(t), t)
                        } else window.PerformanceObserver && window.PerformanceLongTaskTiming && (this.performanceObserver = new window.PerformanceObserver(function(t) {
                            t.getEntries().forEach(e.trackLongtask)
                        }), this.performanceObserver.observe({
                            entryTypes: ["longtask"]
                        }))
                    }, t.prototype.componentWillUnmount = function() {
                        s--, this.performanceObserver && this.performanceObserver.disconnect()
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.shouldTrackLongtask = function() {
                        return a.b.get("longtask_tracking_sample_rate", 1) > Math.random()
                    }, t
                }(r.Component);
            n.d(t, "a", function() {
                return l
            })
        },
        "80G/": function(e, t, n) {},
        "82xK": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("Ue10"),
                o = function(e) {
                    return i.createElement(a.z, {
                        type: a.F.Text,
                        onClick: e.onClick
                    }, Object(r.d)("Show more replies...", "chomments.moderation.showMoreRepliesAction"))
                }
        },
        "86FS": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("H1ft"),
                o = n("SWMh"),
                s = n("cr+I"),
                l = n("/7QA"),
                c = n("GFmA"),
                d = n("0INk"),
                u = n("yWUM"),
                p = n("vRsq"),
                m = n("2xye"),
                h = n("GnwI"),
                g = n("4HIT"),
                f = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickHandler = function() {
                            t.props.onClick && t.props.onClick(t.props.tracking.content_index)
                        }, t.gameChangesWithLinks = function() {
                            return t.props.videoGameChanges.map(function(e) {
                                var n = {
                                    t: Object(u.a)(e.offset)
                                };
                                return t.props.collectionID && (n.collection = t.props.collectionID), i.__assign({}, e, {
                                    linkTo: {
                                        pathname: "/videos/" + t.props.video.id,
                                        search: s.stringify(n),
                                        state: {
                                            content: m.PageviewContent.PreviewCardGameBalloonGame,
                                            medium: t.props.tracking.medium
                                        }
                                    }
                                })
                            })
                        }, t.trackVideoGameBalloonClick = function(e) {
                            t.props.video.owner && t.props.video.owner.id && t.props.video.owner.login && Object(d.b)({
                                videoID: e,
                                broadcasterID: t.props.video.owner.id,
                                channelLogin: t.props.video.owner.login,
                                contentIndex: t.props.tracking.content_index,
                                pageviewMedium: t.props.tracking.medium
                            })
                        }, t.trackVideoGameBalloonItemClick = function(e, n) {
                            t.props.video.owner && t.props.video.owner.id && t.props.video.owner.login && Object(d.c)({
                                videoID: e,
                                broadcasterID: t.props.video.owner.id,
                                channelLogin: t.props.video.owner.login,
                                contentIndex: n,
                                pageviewMedium: t.props.tracking.medium
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = {
                            context: this.props.context,
                            onClick: this.onClickHandler,
                            title: this.props.video.title,
                            linkTo: {
                                pathname: Object(p.i)(void 0, this.props.video.id),
                                state: this.getLinkState(),
                                search: this.generateSearchString()
                            },
                            thumbnailImageProps: {
                                src: this.props.video.previewThumbnailURL,
                                alt: this.props.video.title || ""
                            },
                            channelDisplayName: this.props.video.owner && this.props.video.owner.displayName || "",
                            channelLogin: this.props.video.owner && this.props.video.owner.login || "",
                            channelLinkTo: {
                                pathname: "/" + (this.props.video.owner ? this.props.video.owner.login : ""),
                                state: this.getLinkState()
                            },
                            channelImageProps: {
                                src: this.props.video.owner && this.props.video.owner.profileImageURL || "",
                                alt: this.props.video.owner && this.props.video.owner.displayName || ""
                            },
                            gameTitle: this.props.video.game && this.props.video.game.name || "",
                            gameTitleLinkTo: {
                                pathname: "/directory/game/" + encodeURI(this.props.video.game && this.props.video.game.name || ""),
                                state: this.getLinkState()
                            },
                            gameBoxArtImageProps: {
                                src: this.props.video.game && this.props.video.game.boxArtURL || l.a.defaultBoxArtURL,
                                alt: this.props.video.game ? this.props.video.game.displayName : ""
                            },
                            videoGameChanges: this.gameChangesWithLinks(),
                            multipleVideoGameMarkersType: this.props.multipleVideoGameMarkersType,
                            datePublished: this.props.video.publishedAt,
                            viewCount: this.props.video.viewCount || 0,
                            durationInSeconds: !this.props.hideDuration && this.props.video.lengthSeconds ? this.props.video.lengthSeconds : void 0,
                            animatedImageProps: this.props.video.animatedPreviewURL ? {
                                src: this.props.video.animatedPreviewURL,
                                alt: ""
                            } : void 0,
                            watchedProgressPercent: this.getVideoPreviousWatchPercentage() || 0,
                            listPosition: this.props.listPosition,
                            topBar: this.props.topBar,
                            restriction: this.getRestrictionProps(),
                            trackImageLatency: this.props.trackImageLatency,
                            onVideoGameBalloonClick: this.trackVideoGameBalloonClick,
                            onVideoGameBalloonItemClick: this.trackVideoGameBalloonItemClick,
                            trackingContext: this.props.tracking,
                            tagListProps: !0 !== this.props.hideTags && this.props.video.contentTags ? {
                                tags: this.props.video.contentTags,
                                linkPath: g.a.PopularTag
                            } : void 0
                        };
                        return r.createElement(c.a, i.__assign({}, e))
                    }, t.prototype.generateSearchString = function() {
                        var e = {};
                        this.props.collectionID && (e.collection = this.props.collectionID);
                        var t = s.stringify(e);
                        return t ? "?" + t : ""
                    }, t.prototype.getVideoPreviousWatchPercentage = function() {
                        return this.props.video && this.props.video.self && this.props.video.self.viewingHistory && null !== this.props.video.self.viewingHistory.position ? 0 === this.props.video.lengthSeconds || 0 === this.props.video.self.viewingHistory.position ? null : this.props.video.self.viewingHistory.position / (this.props.video.lengthSeconds || 1 / 0) * 100 : null
                    }, t.prototype.getRestrictionProps = function() {
                        var e = this.props.video.restriction && this.props.video.restriction.productName ? "/products/" + this.props.video.restriction.productName : "";
                        return {
                            productName: this.props.video.restriction && this.props.video.restriction.productName,
                            title: this.props.video.restriction && this.props.video.restriction.productTitle,
                            canViewRestricted: this.props.video.self && !this.props.video.self.isRestricted || !1,
                            upsellLinkTo: {
                                pathname: e,
                                state: this.getLinkState()
                            }
                        }
                    }, t.prototype.getLinkState = function() {
                        return {
                            content: this.props.tracking.content,
                            content_index: this.props.tracking.content_index,
                            medium: this.props.tracking.medium
                        }
                    }, t
                }(r.Component),
                v = Object(h.b)("VideoPreviewCard", {
                    autoReportInteractive: !0
                })(f);
            n.d(t, "a", function() {
                return b
            });
            var b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        videoGameChanges: []
                    }, t.maybeFetchVideoMarkers = function(e, n) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return this.promise = Object(o.a)(e, n, this.props.video.game), [4, this.promise];
                                    case 1:
                                        return t = i.sent(), this.setState({
                                            videoGameChanges: t
                                        }), [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(v, i.__assign({
                        videoGameChanges: this.state.videoGameChanges
                    }, this.props))
                }, t.prototype.componentWillMount = function() {
                    this.props.multipleVideoGameMarkersType && this.props.multipleVideoGameMarkersType !== a.a.None && !this.promise && this.maybeFetchVideoMarkers(this.props.video.id, this.props.video.lengthSeconds || 0)
                }, t
            }(r.Component)
        },
        "8AB4": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "esportsPassCampaign_RENAME2"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "campaignSubscriptionProduct"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hasPrime"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blizzardAccount"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "battleTag"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "region"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 312
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/campaigns/models/subscription-product.gql"\nquery esportsPassCampaign_RENAME2($channelID: ID!) {\nuser(id: $channelID) {\nid\nsubscriptionProducts {\n...campaignSubscriptionProduct\n}\nself {\nsubscriptionBenefit {\nid\n}\n}\n}\ncurrentUser {\nid\nhasPrime\nblizzardAccount {\nid\nbattleTag\nregion\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("ySEf").definitions)), e.exports = i
        },
        "8SX2": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/MKj"),
                s = n("fvjX"),
                l = n("tY8L"),
                c = n("Ue10"),
                d = (n("rVcM"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.usernameClickHandler = function(e) {
                            t.props.onUsernameClick(t.props.login, t.props.sourceType, t.props.contentID, e.currentTarget.getBoundingClientRect().bottom)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("button", {
                            className: "chatter-name",
                            onClick: this.usernameClickHandler
                        }, r.createElement(c.W, {
                            bold: !0,
                            color: c.O.Base,
                            type: c.Wb.Span
                        }, this.props.children))
                    }, t
                }(r.Component));
            var u = Object(a.compose)(Object(o.connect)(void 0, function(e) {
                return Object(s.bindActionCreators)({
                    onUsernameClick: l.e
                }, e)
            }))(d);
            n.d(t, !1, function() {
                return d
            }), n.d(t, "a", function() {
                return u
            })
        },
        "8in3": function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("fvjX"),
                a = n("tY8L"),
                o = n("mrSG"),
                s = n("TSYQ"),
                l = n("q1tI"),
                c = n("ZS2+"),
                d = n("uy8m"),
                u = n("4rCz"),
                p = n("3GF+"),
                m = n("oK83"),
                h = n("Ue10"),
                g = (n("2D+f"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            dragging: !1,
                            viewerCardComponentLoaded: !1
                        }, t.ViewerCard = c.a.wrap(function() {
                            return Promise.all([n.e(0), n.e(204)]).then(n.bind(null, "q3Qz"))
                        }, "ViewerCard", {
                            placeholder: l.createElement(h.Fb, {
                                background: h.r.Base,
                                fullHeight: !0,
                                fullWidth: !0,
                                padding: 2
                            }, l.createElement(h.ab, {
                                fillContent: !0
                            })),
                            onRendered: function() {
                                return t.setState({
                                    viewerCardComponentLoaded: !0
                                })
                            }
                        }), t.ExtensionMessageCard = c.a.wrap(function() {
                            return n.e(203).then(n.bind(null, "n3tJ"))
                        }, "ExtensionMessageCard", {
                            placeholder: l.createElement(h.Fb, {
                                background: h.r.Base,
                                fullHeight: !0,
                                fullWidth: !0,
                                padding: 2
                            }, l.createElement(h.ab, {
                                fillContent: !0
                            })),
                            onRendered: function() {
                                return t.setState({
                                    viewerCardComponentLoaded: !0
                                })
                            }
                        }), t.onDragStart = function(e) {
                            t.cardContainerRef && t.layerRef && e.button === d.a.Left && (window.addEventListener("mousemove", t.onDrag), window.addEventListener("mouseup", t.onDragEnd), window.addEventListener("selectstart", t.cancelSelection), t.setState({
                                dragging: !0
                            }), t.initCardX = t.cardContainerRef.offsetLeft, t.initCardY = t.cardContainerRef.offsetTop, t.initMouseX = e.clientX, t.initMouseY = e.clientY)
                        }, t.onDrag = function(e) {
                            t.nextTop = t.initCardY + e.clientY - t.initMouseY, t.nextLeft = t.initCardX + e.clientX - t.initMouseX, t.rafHandle || (t.rafHandle = requestAnimationFrame(function() {
                                t.rafHandle = 0, t.cardContainerRef && (t.cardContainerRef.style.top = t.nextTop + "px", t.cardContainerRef.style.left = t.nextLeft + "px")
                            }))
                        }, t.onDragEnd = function() {
                            t.removeDragListeners(), t.setState({
                                dragging: !1
                            })
                        }, t.removeDragListeners = function() {
                            window.removeEventListener("mousemove", t.onDrag), window.removeEventListener("mouseup", t.onDragEnd), window.removeEventListener("selectstart", t.cancelSelection)
                        }, t.cancelSelection = function(e) {
                            e.preventDefault()
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillUnmount = function() {
                        this.props.hideViewerCard(), this.rafHandle && cancelAnimationFrame(this.rafHandle), this.removeDragListeners()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.viewerCardOptions && e.viewerCardOptions && (e.viewerCardOptions.targetID === this.props.viewerCardOptions.targetID && e.viewerCardOptions.initialTopOffset === this.props.viewerCardOptions.initialTopOffset || this.cardContainerRef && (this.cardContainerRef.style.left = "0px"))
                    }, t.prototype.render = function() {
                        var e = this,
                            t = {
                                "viewer-card-layer": !0,
                                "viewer-card-layer--dragging": this.state.dragging
                            },
                            n = {
                                "viewer-card-layer__draggable": !0,
                                "viewer-card-layer__draggable--dragging": this.state.dragging
                            },
                            i = null,
                            r = {};
                        if (this.props.viewerCardOptions) {
                            if (this.layerRef) {
                                var a = this.layerRef.getBoundingClientRect();
                                r = {
                                    top: Math.max(this.props.viewerCardOptions.initialTopOffset - a.top, 0) + "px"
                                }
                            }
                            switch (this.props.viewerCardOptions.viewerCardType) {
                                case m.b.Extension:
                                    i = l.createElement(this.ExtensionMessageCard, {
                                        channelID: this.props.channelID,
                                        extensionID: this.props.viewerCardOptions.targetID,
                                        extensionVersion: this.props.viewerCardOptions.extensionVersion,
                                        hideMessageCard: this.props.hideViewerCard
                                    });
                                    break;
                                case m.b.Viewer:
                                    i = l.createElement(this.ViewerCard, {
                                        channelID: this.props.channelID,
                                        isPopout: this.props.isPopout,
                                        isEmbedded: this.props.isEmbedded,
                                        targetLogin: this.props.viewerCardOptions.targetID,
                                        sourceType: this.props.viewerCardOptions.sourceType,
                                        sourceID: this.props.viewerCardOptions.sourceID,
                                        confirmModerationAction: this.props.confirmModerationAction,
                                        hideViewerCard: this.props.hideViewerCard,
                                        sendMessageToTMI: this.props.onSendMessage
                                    });
                                    break;
                                default:
                                    i = null
                            }
                        }
                        var o = null;
                        return i && (o = l.createElement(h.Ra, {
                            background: h.r.Base,
                            className: s(n),
                            position: h.kb.Absolute
                        }, l.createElement("div", {
                            onMouseDown: this.onDragStart,
                            ref: function(t) {
                                e.cardContainerRef = t
                            },
                            style: r,
                            "data-a-target": "viewer-card-positioner"
                        }, i, l.createElement(h.Ya, {
                            position: h.kb.Absolute,
                            attachRight: !0,
                            attachTop: !0,
                            margin: {
                                top: .5,
                                right: .5
                            },
                            "data-a-target": "viewer-card-close-button"
                        }, l.createElement(p.a, null, l.createElement(h.A, {
                            icon: h.ub.Close,
                            onClick: this.props.hideViewerCard,
                            ariaLabel: Object(u.d)("Hide", "ViewerCard"),
                            overlay: this.state.viewerCardComponentLoaded,
                            "data-test-selector": "close-viewer-card"
                        })))))), l.createElement(h.Qa, {
                            className: s(t),
                            fullHeight: !0,
                            fullWidth: !0,
                            position: h.kb.Relative,
                            zIndex: h.jc.Above
                        }, l.createElement("div", {
                            onMouseUp: this.onDragEnd,
                            ref: function(t) {
                                e.layerRef = t
                            }
                        }, o))
                    }, t
                }(l.Component));
            var f = Object(i.connect)(function(e) {
                return {
                    viewerCardOptions: e.viewerCard.viewerCardOptions
                }
            }, function(e) {
                return Object(r.bindActionCreators)({
                    hideViewerCard: a.c
                }, e)
            })(g);
            n.d(t, "a", function() {
                return f
            })
        },
        "8jSG": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "blockedUsers"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "blockedUsers"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 56
                }
            };
            n.loc.source = {
                body: "fragment blockedUsers on User {\nid\nblockedUsers {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "8uuy": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoChatVideoTrackingContext"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 117
                }
            };
            n.loc.source = {
                body: "query VideoChatVideoTrackingContext($videoID: ID) {\nvideo(id: $videoID) {\nid\nbroadcastType\ntitle\ngame {\nid\nname\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "94Uw": function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.ProfileImage = "profile_image", e.ProfileBanner = "profile_banner", e.ChannelOfflineImage = "channel_offline_image"
                }(i || (i = {}))
        },
        "986b": function(e, t, n) {},
        "9KaG": function(e, t, n) {},
        "9P+5": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Chat_UserData"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isGlobalMod"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSiteAdmin"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 95
                }
            };
            n.loc.source = {
                body: "query Chat_UserData {\nuser {\nid\ndisplayName\nlogin\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "9RDd": function(e, t, n) {},
        "9Rmp": function(e, t, n) {},
        "9kuA": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RecentBroadcasterClipsCarousel_UserClips"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "limit"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "criteria"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UserClipsInput"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "clips"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "limit"
                                            }
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "criteria"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "criteria"
                                            }
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "FragmentSpread",
                                                            name: {
                                                                kind: "Name",
                                                                value: "PreviewCardClip"
                                                            },
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 396
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/video-carousel/components/recent-broadcaster-clips-carousel/components/clip-preview-card/models/preview-card-clip-fragment.gql"\nquery RecentBroadcasterClipsCarousel_UserClips($channelLogin: String! $limit: Int $criteria: UserClipsInput) {\nuser(login: $channelLogin) {\nid\ndisplayName\nclips(first: $limit criteria: $criteria) {\nedges {\nnode {\n...PreviewCardClip\n}\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("+Zgt").definitions)), e.exports = i
        },
        "9yes": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_AllowRejectedChatMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "AllowRejectedChatMessageInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "allowRejectedChatMessage"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 141
                }
            };
            n.loc.source = {
                body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\nallowRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "A7Y/": function(e, t, n) {},
        AKV8: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return s
            });
            var i, r = n("mrSG"),
                a = n("yR8l"),
                o = n("4HoE");

            function s(e) {
                var t = this;
                return Object(a.a)(o, {
                    props: function(n) {
                        return {
                            modUserMutation: function(i) {
                                return r.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return r.__generator(this, function(r) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("modUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }! function(e) {
                e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserAlreadyModded = "TARGET_ALREADY_MOD", e.UserBanned = "TARGET_IS_CHAT_BANNED", e.UserNotFound = "TARGET_NOT_FOUND"
            }(i || (i = {}))
        },
        AREq: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("/7QA"),
                r = n("DMoW");

            function a(e, t, n) {
                if (void 0 === n && (n = !1), n) switch (t) {
                    case r.c.FORBIDDEN:
                        return Object(i.d)("You don't have permissions to timeout {login}.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_IS_ADMIN:
                        return Object(i.d)("You cannot timeout admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_ALREADY_BANNED:
                        return Object(i.d)("{login} is already banned in this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_IS_ANONYMOUS:
                        return Object(i.d)("You cannot timeout anonymous users.", "BanUserErrorCode");
                    case r.c.TARGET_IS_BROADCASTER:
                        return Object(i.d)("You cannot timeout the broadcaster.", "BanUserErrorCode");
                    case r.c.TARGET_IS_GLOBAL_MOD:
                        return Object(i.d)("You cannot timeout global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_IS_MOD:
                        return Object(i.d)("You cannot timeout moderator {login} unless you are the owner of this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_IS_SELF:
                        return Object(i.d)("You cannot timeout yourself.", "BanUserErrorCode");
                    case r.c.TARGET_IS_STAFF:
                        return Object(i.d)("You cannot timeout staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_NOT_FOUND:
                        return Object(i.d)("The user you are trying to timeout doesn't exist.", "BanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result.")
                } else switch (t) {
                    case r.c.FORBIDDEN:
                        return Object(i.d)("You don't have permissions to ban {login}.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_IS_ADMIN:
                        return Object(i.d)("You cannot ban admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_ALREADY_BANNED:
                        return Object(i.d)("{login} is currently banned in this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_IS_ANONYMOUS:
                        return Object(i.d)("You cannot ban anonymous users.", "BanUserErrorCode");
                    case r.c.TARGET_IS_BROADCASTER:
                        return Object(i.d)("You cannot ban the broadcaster.", "BanUserErrorCode");
                    case r.c.TARGET_IS_GLOBAL_MOD:
                        return Object(i.d)("You cannot ban global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_IS_MOD:
                        return Object(i.d)("You cannot ban moderator {login} unless you are the owner of this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_IS_SELF:
                        return Object(i.d)("You cannot ban yourself.", "BanUserErrorCode");
                    case r.c.TARGET_IS_STAFF:
                        return Object(i.d)("You cannot ban staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.c.TARGET_NOT_FOUND:
                        return Object(i.d)("The user you are trying to ban doesn't exist.", "BanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result.")
                }
            }
        },
        "Aa/l": function(e, t, n) {},
        AcdH: function(e, t, n) {},
        Av0x: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("/7QA"),
                r = n("DMoW");

            function a(e, t, n) {
                if (void 0 === n && (n = !1), n) switch (t) {
                    case r.Aa.FORBIDDEN:
                        return Object(i.d)("You don't have permissions to untimeout {login}.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    case r.Aa.TARGET_NOT_FOUND:
                        return Object(i.d)("The user you are trying to untimeout doesn't exist.", "UnbanUserErrorCode");
                    case r.Aa.TARGET_NOT_BANNED:
                        return Object(i.d)("{login} is not currently timed out from this channel.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result")
                } else switch (t) {
                    case r.Aa.FORBIDDEN:
                        return Object(i.d)("You don't have permissions to unban {login}.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    case r.Aa.TARGET_NOT_FOUND:
                        return Object(i.d)("The user you are trying to unban doesn't exist.", "UnbanUserErrorCode");
                    case r.Aa.TARGET_NOT_BANNED:
                        return Object(i.d)("{login} is not currently banned from this channel.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result")
                }
            }
        },
        B3R5: function(e, t, n) {},
        BJwa: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("9C/b"),
                o = n("fvjX"),
                s = n("/7QA"),
                l = n("ZS2+"),
                c = n("yR8l"),
                d = n("eDVu"),
                u = n("0Log"),
                p = n("/0dD"),
                m = n("/aPz"),
                h = n("DMoW"),
                g = n("uIkQ"),
                f = n("4rCz"),
                v = n("ZVTe"),
                b = n("Ue10"),
                k = (n("e7rh"), function(e) {
                    return r.createElement(b.Fb, {
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        margin: {
                            x: 2
                        },
                        borderTop: !0,
                        display: b.X.Block,
                        flexDirection: b.Aa.Column
                    }, r.createElement(b.Ya, {
                        padding: {
                            bottom: .5
                        }
                    }, r.createElement(g.b, {
                        badgeSets: e.badgeSets,
                        badgesToRender: {
                            twitchbot: "1"
                        }
                    }), r.createElement(v.a, {
                        userData: {
                            color: "#6441A5",
                            isIntl: !1,
                            userDisplayName: "AutoMod",
                            userID: "automod",
                            userLogin: "automod",
                            userType: "global_mod"
                        }
                    }), r.createElement(b.W, {
                        type: b.Wb.Span,
                        color: b.O.Alt2
                    }, Object(f.d)(": Your text may be removed by moderation. Bits will still be sent to the streamer. Review the highlighted text or continue below.", "BitsAutoModOffenderPrompt"))), r.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Row
                    }, r.createElement(b.Ya, {
                        padding: {
                            right: .5
                        }
                    }, r.createElement(b.z, {
                        onClick: e.onEditCheer
                    }, r.createElement(b.Ya, {
                        padding: {
                            x: 2
                        }
                    }, Object(f.d)("Edit", "BitsAutoModOffender")))), r.createElement(b.z, {
                        onClick: e.onCheerAnyway,
                        type: b.F.Hollow
                    }, Object(f.d)("Cheer Anyway", "BitsAutoModOffender")), r.createElement(b.Ya, {
                        className: "bits-auto-mod-offender-prompt__notification-icon",
                        display: b.X.Flex,
                        flexDirection: b.Aa.Column,
                        justifyContent: b.Xa.End,
                        alignSelf: b.g.End,
                        margin: {
                            left: "auto",
                            right: .5
                        }
                    }, r.createElement(b.tb, {
                        asset: b.ub.NotificationWarning
                    }))))
                }),
                y = n("qnat"),
                C = n("H31v"),
                S = n("oJmH"),
                E = n("/MKj"),
                N = n("u5aL"),
                O = n("x7UT"),
                _ = n("8Ad5"),
                w = n("HGFl"),
                D = n("wUQP"),
                I = n("oe5X"),
                T = n("1/iK"),
                M = n("f00E"),
                R = n("y5D0"),
                L = n("kz7j"),
                F = n("kRBY"),
                j = n("9o5F"),
                x = n("tKDy"),
                A = n("okS7"),
                U = n("ry0r"),
                P = n("17x9"),
                B = n("uu1w"),
                V = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autocompleteType = B.a.Hashtag, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                            return e.startsWith("#") && null !== t.props.hashTags.edges ? t.props.hashTags.edges.filter(function(t) {
                                return t.node.id.includes(e)
                            }).map(function(n) {
                                return {
                                    current: e,
                                    replacement: n.node.id,
                                    element: t.genearateHashtagDisplay(n.node.id)
                                }
                            }) : null
                        }, t.genearateHashtagDisplay = function(e) {
                            return r.createElement(b.Ya, {
                                padding: {
                                    right: .5
                                },
                                key: "hashtag:" + e
                            }, r.createElement(b.W, null, e))
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerAutocompleteProvider(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.render = function() {
                        return null
                    }, t.contextTypes = {
                        registerAutocompleteProvider: P.func
                    }, t
                }(r.Component),
                W = n("5zXJ"),
                H = n("XmgI"),
                G = n("ebRM"),
                Y = n("RiD7"),
                z = n("i4un"),
                q = n("tFCv"),
                X = n("+pBb"),
                Q = n("QVaV"),
                K = n("vSeP"),
                $ = 5,
                J = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autocompleteType = B.a.Mention, t.canBeTriggeredByTab = !0, t.getMatches = function(e, n) {
                            return n || e.startsWith("@") ? t.getMentions(e, n) : null
                        }, t.getMentions = function(e, n) {
                            if (!t.props.activeChattersAPI) return [];
                            var i = n ? e : e.substring(1);
                            return t.props.activeChattersAPI.getActiveChatters(i, $).map(function(i) {
                                return {
                                    current: e,
                                    replacement: (n ? "" : "@") + (i.displayName || i.login),
                                    element: t.renderMention(i)
                                }
                            })
                        }, t.renderMention = function(e) {
                            return r.createElement("span", null, Object(Q.a)(e.login, e.displayName || null))
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerAutocompleteProvider(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.render = function() {
                        return null
                    }, t.contextTypes = {
                        registerAutocompleteProvider: P.func
                    }, t
                }(r.Component),
                Z = Object(K.a)(J),
                ee = n("5zf8"),
                te = n("NAv5");

            function ne(e, t) {
                var n = Object(te.addSeconds)(e, t);
                return Math.max(0, Object(te.differenceInSeconds)(n, new Date))
            }
            var ie = n("2xye");
            var re, ae = n("dIU+"),
                oe = n("GnwI"),
                se = n("QjI3"),
                le = n("nIRf");
            ! function(e) {
                e.ChatRestrictedHeader = "chat-restricted-header"
            }(re || (re = {}));
            var ce, de = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.renderBalloon = function(e, t) {
                            if (!n.props.showBalloon) return null;
                            var i = null;
                            return t && (i = r.createElement(b.Ya, {
                                display: b.X.Flex,
                                margin: {
                                    top: 1
                                }
                            }, t, r.createElement(b.Ya, null))), r.createElement(N.a, {
                                onClickOut: n.handleBalloonClickOut
                            }, r.createElement(b.u, {
                                direction: b.v.TopLeft,
                                offsetY: "-0.5rem",
                                size: b.w.Medium,
                                show: n.props.showBalloon,
                                tailOffset: 50
                            }, r.createElement(b.Fb, {
                                color: b.O.Base,
                                padding: 1
                            }, e, i)))
                        }, n.startTimer = function(e, t) {
                            if (e) {
                                var i = ne(e, t);
                                n.setState({
                                    secondsRemaining: i
                                }), n.countdownTimer.start()
                            }
                        }, n.stopTimer = function() {
                            n.countdownTimer.stop()
                        }, n.tick = function() {
                            if (null === n.props.followedTime || n.state.secondsRemaining <= 0) n.stopTimer();
                            else {
                                var e = ne(n.props.followedTime, n.props.requiredFollowDurationSeconds);
                                n.setState({
                                    secondsRemaining: e
                                }), e <= 0 && n.requestRecheck()
                            }
                        }, n.requestRecheck = function() {
                            n.state.requestedRecheck || (n.setState({
                                requestedRecheck: !0
                            }), n.props.recheckRestrictions())
                        }, n.handleBalloonClickOut = function(e) {
                            n.rootRef && n.rootRef.contains(e.target) && e.stopPropagation(), n.props.closeBalloon()
                        }, n.handleActionClick = function() {
                            ! function(e) {
                                var t;
                                switch (e.restriction) {
                                    case h.l.SUBSCRIBERS_ONLY:
                                        t = "subscribe";
                                        break;
                                    case h.l.VERIFIED_ONLY:
                                        t = "go_to_settings";
                                        break;
                                    case h.l.FOLLOWERS_ONLY:
                                        t = "follow";
                                        break;
                                    default:
                                        return
                                }
                                var n = {
                                    action_type: t,
                                    channel: e.channelLogin,
                                    channel_id: e.channelID
                                };
                                s.o.track(ie.SpadeEventType.ChatInputRestrictedAction, n)
                            }({
                                channelID: n.props.channelID,
                                channelLogin: n.props.channelLogin,
                                restriction: n.props.reason
                            })
                        }, n.setRootRef = function(e) {
                            return n.rootRef = e
                        }, n.state = {
                            secondsRemaining: 0,
                            requestedRecheck: !1
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.showBalloon && this.trackImpression(), this.countdownTimer = new le.a({
                            onInterval: this.tick,
                            intervalMillis: 1e3
                        }), this.props.requiredFollowDurationSeconds > 0 && this.startTimer(this.props.followedTime, this.props.requiredFollowDurationSeconds)
                    }, t.prototype.componentWillUnmount = function() {
                        this.stopTimer()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.showBalloon && !this.props.showBalloon && this.trackImpression();
                        var t = this.props.followedTime || new Date(0),
                            n = e.followedTime || new Date(0);
                        this.props.requiredFollowDurationSeconds === e.requiredFollowDurationSeconds && t.getTime() === n.getTime() || (this.setState({
                            requestedRecheck: !1
                        }), e.requiredFollowDurationSeconds <= 0 ? this.stopTimer() : e.followedTime && this.startTimer(e.followedTime, e.requiredFollowDurationSeconds))
                    }, t.prototype.render = function() {
                        var e = "",
                            t = null,
                            n = null;
                        switch (this.props.reason) {
                            case h.l.SUBSCRIBERS_ONLY:
                                e = Object(s.d)("Subscribers-Only Chat", "ChatModeHeader"), t = Object(s.d)("Only {streamer}'s subscribers can chat right now. Subscribe and join in!", {
                                    streamer: this.props.channelDisplayName
                                }, "ChatModeHeader"), n = r.createElement("div", {
                                    onClick: this.handleActionClick
                                }, r.createElement(se.a, {
                                    balloonDirection: b.v.TopRight,
                                    channelLogin: this.props.channelLogin
                                }));
                                break;
                            case h.l.VERIFIED_ONLY:
                                e = Object(s.d)("Verified Email Only Chat", "ChatModeHeader"), t = Object(s.d)("Verify your email in Settings to chat!", "ChatModeHeader"), n = r.createElement(b.z, {
                                    onClick: this.handleActionClick,
                                    linkTo: "/settings/profile",
                                    targetBlank: !0
                                }, Object(s.d)("Go to Settings", "ChatModeHeader"));
                                break;
                            case h.l.FOLLOWERS_ONLY:
                                if (e = Object(s.d)("Followers-Only Chat", "ChatModeHeader"), 0 === this.props.requiredFollowDurationSeconds || null === this.props.followedTime) t = Object(s.d)("You need to be a follower of {streamer} to chat.", {
                                    streamer: this.props.channelDisplayName
                                }, "ChatModeHeader"), n = r.createElement(ae.a, {
                                    channelLogin: this.props.channelLogin,
                                    onFollow: this.handleActionClick,
                                    onUnfollow: this.handleActionClick,
                                    followUIType: ae.b.IconAndText,
                                    unfollowUIType: ae.b.IconAndText,
                                    balloonDirection: b.v.TopRight,
                                    hideDropdownWhenFollowing: !0
                                });
                                else {
                                    var i = Object(ee.b)(this.props.requiredFollowDurationSeconds),
                                        a = Object(ee.b)(this.state.secondsRemaining);
                                    t = Object(s.d)("You need to be a follower for {timeRequired} to chat, and you have {timeRemaining} left.", {
                                        timeRequired: i,
                                        timeRemaining: a
                                    }, "ChatModeHeader")
                                }
                                break;
                            default:
                                return null
                        }
                        return r.createElement("div", {
                            ref: this.setRootRef
                        }, r.createElement(b.Fb, {
                            borderTop: !0,
                            color: b.O.Alt2,
                            display: b.X.Flex,
                            fontSize: b.Ca.Size6,
                            padding: {
                                y: .5
                            },
                            position: b.kb.Relative,
                            "data-test-selector": re.ChatRestrictedHeader
                        }, r.createElement(b.U, {
                            hoverColorInherit: !0,
                            hoverUnderlineNone: !0,
                            onClick: this.props.openBalloon,
                            type: b.V.Inherit
                        }, r.createElement(b.W, {
                            bold: !0
                        }, e)), r.createElement(b.Ya, {
                            margin: {
                                left: .5
                            }
                        }, r.createElement(b.A, {
                            icon: b.ub.NotificationInfo,
                            onClick: this.props.openBalloon,
                            type: b.C.Secondary
                        })), this.renderBalloon(t, n)))
                    }, t.prototype.trackImpression = function() {
                        ! function(e) {
                            var t;
                            switch (e.restriction) {
                                case h.l.SUBSCRIBERS_ONLY:
                                    t = "subscriber_mode";
                                    break;
                                case h.l.VERIFIED_ONLY:
                                    t = "verified_mode";
                                    break;
                                case h.l.FOLLOWERS_ONLY:
                                    t = e.requiredDuration ? "follow_mode_timer" : "follow_mode";
                                    break;
                                default:
                                    return
                            }
                            var n = {
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                impression_type: t
                            };
                            s.o.track(ie.SpadeEventType.ChatInputRestrictedImpression, n)
                        }({
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            restriction: this.props.reason,
                            requiredDuration: this.props.requiredFollowDurationSeconds
                        })
                    }, t
                }(r.Component),
                ue = Object(oe.b)("ChatRestrictedHeader")(de),
                pe = function() {
                    return r.createElement(b.u, {
                        direction: b.v.TopLeft,
                        offsetY: "11px",
                        show: !0
                    }, r.createElement(b.Ya, {
                        padding: 1,
                        "data-test-selector": "manage-moderation-settings-tooltip"
                    }, Object(s.d)("Mods can now update AutoMod levels as well as Blocked and Permitted Terms.", "ManageModerationSettingsChat")))
                },
                me = n("cys1"),
                he = (n("ZuCe"), function(e) {
                    return r.createElement(b.Fb, {
                        position: b.kb.Relative,
                        borderRadius: b.x.Medium,
                        className: "moderated-message-fake-input__container"
                    }, r.createElement(b.Fb, {
                        className: "moderated-message-fake-input__content",
                        display: b.X.Block,
                        overflow: b.db.Auto,
                        color: b.O.Alt,
                        background: b.r.Alt,
                        fullWidth: !0
                    }, r.createElement(b.Ra, {
                        padding: {
                            y: .5,
                            left: 1
                        },
                        fullHeight: !0
                    }, r.createElement("div", {
                        style: {
                            paddingRight: "6rem"
                        }
                    }, Object(me.f)(e.moderatedMessageParts)))), r.createElement(b.Fb, {
                        position: b.kb.Absolute,
                        display: b.X.Flex,
                        flexDirection: b.Aa.Row,
                        attachRight: !0,
                        attachTop: !0
                    }, r.createElement(b.Ya, {
                        display: b.X.InlineFlex,
                        alignItems: b.f.Center,
                        className: "moderated-message-fake-input__icon",
                        padding: .5
                    }, r.createElement(b.tb, {
                        asset: b.ub.Bits,
                        type: b.vb.Inherit
                    })), r.createElement(b.Ya, {
                        display: b.X.InlineFlex,
                        alignItems: b.f.Center,
                        className: "moderated-message-fake-input__icon",
                        padding: .5
                    }, r.createElement(b.tb, {
                        asset: b.ub.Emoticons,
                        type: b.vb.Inherit
                    }))))
                }),
                ge = n("ilCE");
            n("MVDO");

            function fe(e, t) {
                var n = t.action ? {
                        action: t.action
                    } : {},
                    r = i.__assign({
                        raid_upsell_source_id: Number(t.sourceChannelID),
                        raid_upsell_target_id: Number(t.targetChannelID)
                    }, n);
                s.o.track(e, r)
            }! function(e) {
                e.Host = "host", e.Raid = "raid", e.Dismiss = "dismiss"
            }(ce || (ce = {}));
            var ve = n("D7An"),
                be = "raid-now-upsell";
            var ke, ye = {
                    "data-test-selector": "dismiss"
                },
                Ce = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleDismissUpsell = function() {
                            ! function(e) {
                                fe(ie.SpadeEventType.RaidUpsellClick, i.__assign({}, e, {
                                    action: ce.Dismiss
                                }))
                            }({
                                sourceChannelID: t.props.data.sourceChannel.id,
                                targetChannelID: t.props.data.targetChannel.id
                            }), t.props.closeRaidUpsell()
                        }, t.handleSendHostMsgFromUpsell = function() {
                            ! function(e) {
                                fe(ie.SpadeEventType.RaidUpsellClick, i.__assign({}, e, {
                                    action: ce.Host
                                }))
                            }({
                                sourceChannelID: t.props.data.sourceChannel.id,
                                targetChannelID: t.props.data.targetChannel.id
                            }), t.handleSendHostMsg()
                        }, t.handleSendHostMsg = function() {
                            t.props.send("/host " + t.props.targetChannelLogin), t.props.closeRaidUpsell()
                        }, t.handleSendRaidMsg = function() {
                            ! function(e) {
                                fe(ie.SpadeEventType.RaidUpsellClick, i.__assign({}, e, {
                                    action: ce.Raid
                                }))
                            }({
                                sourceChannelID: t.props.data.sourceChannel.id,
                                targetChannelID: t.props.data.targetChannel.id
                            }), t.props.send("/raid " + t.props.targetChannelLogin), t.props.closeRaidUpsell()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.data.refetch()
                    }, t.prototype.componentDidUpdate = function(e) {
                        if (e.data.loading !== this.props.data.loading && !this.props.data.loading) {
                            if (!this.channelDisplayName || !this.isViewersCountWithinRange || this.isAttemptingToHostSelf) return this.handleSendHostMsg();
                            ! function(e) {
                                fe(ie.SpadeEventType.RaidUpsellImpression, e)
                            }({
                                sourceChannelID: this.props.data.sourceChannel.id,
                                targetChannelID: this.props.data.targetChannel.id
                            }), s.m.set(be, !0)
                        }
                    }, t.prototype.render = function() {
                        var e = this.props.data.loading,
                            t = this.channelDisplayName;
                        return e || !t || !this.isViewersCountWithinRange || this.isAttemptingToHostSelf ? null : r.createElement(b.Ya, {
                            className: "raid-upsell-prompt",
                            padding: 1,
                            margin: {
                                x: 2
                            }
                        }, r.createElement(b.Ya, {
                            display: b.X.Flex,
                            justifyContent: b.Xa.Between
                        }, r.createElement(b.Ya, {
                            display: b.X.Flex
                        }, r.createElement(b.Ya, {
                            className: "raid-upsell-prompt__notification",
                            margin: {
                                top: .5
                            }
                        }, r.createElement(b.tb, {
                            asset: b.ub.NotificationInfo
                        })), r.createElement(b.Ya, {
                            margin: {
                                x: 1
                            }
                        }, r.createElement(b.W, {
                            type: b.Wb.H6,
                            bold: !0
                        }, Object(s.d)("How about raiding {channelDisplayName}?", {
                            channelDisplayName: t
                        }, "RaidUpsellPrompt")), r.createElement(b.W, {
                            type: b.Wb.P,
                            color: b.O.Alt2
                        }, Object(s.d)("Now you can raid whenever you want instead of waiting 30 seconds.", "RaidUpsellPrompt")))), r.createElement(b.Fb, {
                            color: b.O.OverlayAlt
                        }, r.createElement(b.A, i.__assign({}, ye, {
                            icon: b.ub.Close,
                            size: b.B.Small,
                            ariaLabel: Object(s.d)("Dismiss", "RaidUpsellPrompt"),
                            onClick: this.handleDismissUpsell
                        })))), r.createElement(Se, {
                            onSendHostMsg: this.handleSendHostMsgFromUpsell,
                            onSendRaidMsg: this.handleSendRaidMsg
                        }))
                    }, Object.defineProperty(t.prototype, "channelDisplayName", {
                        get: function() {
                            var e = this.props.data.targetChannel;
                            return e && e.displayName
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "isViewersCountWithinRange", {
                        get: function() {
                            var e = this.props.data.sourceChannel,
                                t = e && e.stream && e.stream.viewersCount;
                            return t && t >= 3 && t < 1e5
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "isAttemptingToHostSelf", {
                        get: function() {
                            return this.props.targetChannelLogin === this.props.sourceChannelLogin
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(r.Component),
                Se = function(e) {
                    return r.createElement(b.Ya, {
                        display: b.X.Flex,
                        justifyContent: b.Xa.End,
                        margin: {
                            top: 1
                        }
                    }, r.createElement(b.Ya, {
                        margin: {
                            right: 1
                        }
                    }, r.createElement(b.z, {
                        type: b.F.Hollow,
                        size: b.D.Small,
                        onClick: e.onSendHostMsg
                    }, r.createElement(b.Ya, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Host", "RaidUpsellPrompt")))), r.createElement(b.Ya, null, r.createElement(b.z, {
                        size: b.D.Small,
                        onClick: e.onSendRaidMsg
                    }, r.createElement(b.Ya, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Raid", "RaidUpsellPrompt")))))
                },
                Ee = Object(c.a)(ge, {
                    options: function(e) {
                        return {
                            variables: {
                                targetChannelLogin: e.targetChannelLogin,
                                sourceChannelLogin: e.sourceChannelLogin
                            }
                        }
                    }
                })(Ce),
                Ne = n("gTu3"),
                Oe = n("RcPG"),
                _e = n("YXxK"),
                we = n("WytW");
            ! function(e) {
                e.ON = "on", e.STAFF_ONLY = "staff"
            }(ke || (ke = {}));
            var De = function(e) {
                    var t = s.b.get("chat_input_box_verified_only_restriction_enabled", "off"),
                        n = !1;
                    return t === ke.ON ? n = !0 : t === ke.STAFF_ONLY && e && (n = !0), s.m.get("overrideRestrictedChatInputFeatureFlag", n)
                },
                Ie = function(e) {
                    var t = s.b.get("chat_input_box_followers_only_restriction_enabled", "off"),
                        n = !1;
                    return t === ke.ON ? n = !0 : t === ke.STAFF_ONLY && e && (n = !0), s.m.get("overrideRestrictedChatInputFeatureFlag", n)
                };
            var Te, Me, Re, Le, Fe = n("lNGo"),
                je = n("ySk3"),
                xe = n("x0gr"),
                Ae = n("mmRu"),
                Ue = n("cpJf"),
                Pe = n("GzyO"),
                Be = n("EOIh"),
                Ve = n("FS60"),
                We = "bits_automod_cheering_enabled",
                He = /\S/;
            ! function(e) {
                e[e.Bits = 0] = "Bits", e[e.ChatRestriction = 1] = "ChatRestriction", e[e.Emotes = 2] = "Emotes", e[e.None = 3] = "None"
            }(Le || (Le = {}));
            var Ge = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.incrementAndHideAutomodTooltipCounter = function() {
                        var e = s.m.get("automodChatCogTooltipSeenNumTimes", 0) + 1;
                        s.m.set("automodChatCogTooltipSeenNumTimes", e), n.setState({
                            showAutomodSettingsTooltip: !1
                        })
                    }, n.setChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInputRef = e
                    }, n.onChatSettingsToggle = function(e) {
                        n.handleModerationSettingsToggle(e), e || Object(xe.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode
                        })
                    }, n.handleModerationSettingsToggle = function(e) {
                        if (!e) {
                            var t = s.m.get("autoModToolTipSeen", 0) + 1;
                            n.setState({
                                showAutomodSettingsTooltip: !1
                            }), s.m.set("autoModToolTipSeen", t)
                        }
                    }, n.onKeyDown = function(e) {
                        var t = e.charCode || e.keyCode;
                        switch (n.props.onKeyDown && t !== _.a.Enter && n.props.onKeyDown(e), n.props.bitsSendHasError && n.props.clearBitsSendError(), t) {
                            case _.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                            case _.a.Esc:
                                return void(n.state.showCard === Le.Bits && n.setState({
                                    showCard: Le.None
                                }));
                            default:
                                return
                        }
                    }, n.onMessageValueUpdate = function(e) {
                        n.setState({
                            value: e
                        })
                    }, n.onInputFocus = function() {
                        n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onMouseEnterInput = function() {
                        n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onChatCommand = function(e) {
                        n.props.onChatCommand(e), n.trackChatEvent(n.props.emotePickerSessionID)
                    }, n.confirmEmbedAction = function(e, t, i) {
                        var r = n,
                            a = r.hasConfirmedInEmbed;
                        if (r.hasSeenConfirmationPrompt) return a;
                        var o = window.confirm(n.confirmationMessage(e, t, i));
                        return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = o, n.setState({
                            hasSeenAndRejectedEmbedPrompt: !o
                        }), o
                    }, n.confirmationMessage = function(e, t, n) {
                        return Object(s.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                            displayName: e,
                            message: t,
                            channelLogin: n
                        }, "ChatInput")
                    }, n.onMessageSend = function() {
                        return i.__awaiter(n, void 0, void 0, function() {
                            var e, t, n, r, a, o, l, c, d = this;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return e = this.chatRestrictedReason(), this.isTypingCommand() || this.isTypingCheer() || null === e ? this.props.authToken ? this.props.channelID ? (t = He.test(this.state.value)) ? this.state.isSendingBits ? (s.k.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (s.k.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : (this.resetAndUpdateRenderSentChatMessageEvent(), this.state.value.split(/\s+/).forEach(function(e) {
                                            var t = d.props.emoteMap && d.props.emoteMap[e];
                                            t && Object(Pe.a)(t)
                                        }), this.props.data && this.props.data.currentUser ? 0 === (n = Object(G.a)(this.state.messageCheers)).total ? (this.sendRegularMessage(), [2]) : this.props.data.channel ? this.props.data.channel.cheer ? this.props.data.channel.cheer.settings ? this.props.bitsConfig ? (r = Object(G.f)({
                                            messageBits: n,
                                            balance: this.props.data.currentUser.bitsBalance,
                                            cheerMinimumBits: this.props.data.channel.cheer.settings.cheerMinimumBits,
                                            emoteMinimumBits: this.props.data.channel.cheer.settings.emoteMinimumBits,
                                            inputValue: this.state.value,
                                            bitsConfig: this.props.bitsConfig
                                        })).canSpend ? this.props.sendCheer ? (this.setState({
                                            isSendingBits: !0
                                        }), n.total >= W.r ? [4, new Promise(function(e) {
                                            var t = setTimeout(e, W.v.UNDO_PROMPT_DURATION),
                                                n = function(n) {
                                                    void 0 === n && (n = !1), clearTimeout(t), d.cancelDelayedSend = null, d.confirmDelayedSend = null, e(n)
                                                };
                                            d.cancelDelayedSend = function() {
                                                return n(!0)
                                            }, d.confirmDelayedSend = function() {
                                                return n(!1)
                                            }
                                        })] : [3, 2]) : (s.k.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (s.k.warn("[Chat Input] Spending bits forbidden.", r), [2]) : (s.k.warn("[Chat Input] Bits Config is undefined"), [2]) : (s.k.warn("[Chat Input] Cheer Settings are undefined."), [2]) : (s.k.warn("[Chat Input] Cheer is null."), [2]) : (s.k.warn("[Chat Input] User is null."), [2]) : (this.sendRegularMessage(), [2])) : (s.k.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                            hasSendableInput: t,
                                            value: this.state.value
                                        }), [2]) : (s.k.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.handleLogin(), [2]) : (this.setState({
                                            showCard: Le.ChatRestriction
                                        }), [2]);
                                    case 1:
                                        if (i.sent()) return this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                        i.label = 2;
                                    case 2:
                                        a = Object(M.a)(), o = f.b.get(We, D.a.Off), i.label = 3;
                                    case 3:
                                        return i.trys.push([3, 5, , 6]), l = {
                                            id: a,
                                            targetID: this.props.channelID,
                                            bits: n.total,
                                            content: this.state.value,
                                            isAutoModEnabled: o === D.a.On
                                        }, o === D.a.On && (l.shouldCheerAnyway = this.props.shouldSendAutoModdedCheer), this.props.clearBitsSendError(), [4, this.props.sendCheer({
                                            variables: {
                                                input: l
                                            }
                                        })];
                                    case 4:
                                        return (c = i.sent()).data.sendCheer && c.data.sendCheer.validationError ? (this.props.onSendCheerError && this.props.onSendCheerError(c.data.sendCheer.validationError), this.setState({
                                            isSendingBits: !1,
                                            showCard: Le.None
                                        }), this.chatInputRef && this.chatInputRef.focus(), [2]) : [3, 6];
                                    case 5:
                                        return i.sent(), this.props.onSendCheerError && this.props.onSendCheerError({
                                            code: h.P.UNKNOWN
                                        }), this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef && this.chatInputRef.focus(), [2];
                                    case 6:
                                        return this.props.onSendCheerSuccess(), this.setState({
                                            isSendingBits: !1,
                                            showCard: Le.None,
                                            value: ""
                                        }), this.chatInputRef && this.chatInputRef.focus(), this.autocompleteInputRef && this.autocompleteInputRef.setValue(""), [2]
                                }
                            })
                        })
                    }, n.handleAuthContextBalloonClose = function() {
                        n.setState({
                            showAuthContextBalloon: !1
                        }), Object(x.n)({
                            page: x.e.Bubble,
                            source: T.a.Chat,
                            target: x.d.Exit,
                            action: x.c.Click
                        })
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            return e.messageCheers.length ? e : {
                                showCard: e.showCard === Le.Emotes ? Le.None : Le.Emotes
                            }
                        })
                    }, n.onClickOut = function() {
                        n.setState(function(e) {
                            return e.showCard === Le.Emotes ? {
                                showCard: Le.None
                            } : e
                        })
                    }, n.onBitsIconClick = function() {
                        n.state.showCard === Le.Bits ? n.trackBitsCardInteraction(Y.a.CloseCard) : n.trackBitsCardInteraction(Y.a.OpenCard), n.setState({
                            showCard: n.state.showCard === Le.Bits ? Le.None : Le.Bits
                        })
                    }, n.onShowViewersList = function() {
                        n.state.showCard !== Le.None && n.setState({
                            showCard: Le.None
                        }), n.props.showViewersList()
                    }, n.onBitsClose = function() {
                        n.state.showCard === Le.Bits && n.setState({
                            showCard: Le.None
                        }), n.trackBitsCardInteraction(Y.a.CloseCard)
                    }, n.onChatRestrictionBalloonClose = function() {
                        n.state.showCard === Le.ChatRestriction && n.setState({
                            showCard: Le.None
                        })
                    }, n.onChatRestrictionBalloonOpen = function() {
                        n.setState({
                            showCard: Le.ChatRestriction
                        })
                    }, n.onClickEmote = function(e) {
                        var t = n.state.value;
                        n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef && n.autocompleteInputRef.setValue(t)
                    }, n.onEmotePickerDataLoaded = function(e) {
                        e && n.setState({
                            showEmotePickerButton: !0
                        })
                    }, n.trackBitsCardInteraction = function(e, t) {
                        var i = {
                            actionName: e,
                            emoteType: t && t.emoteType,
                            emoteLevel: t && t.emoteLevel,
                            location: t && t.location,
                            displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                        };
                        Object(Y.h)(i)
                    }, n.resetAndUpdateRenderSentChatMessageEvent = function() {
                        n.props.latencyTracking.resetCustomEvents(L.a.Chat);
                        var e = n.props.latencyTracking.registerCustomEvent({
                            benchmark: 400,
                            group: L.a.Chat,
                            key: L.b.ChatRenderSent,
                            label: L.c.RenderSent,
                            start: L.d.Registration
                        });
                        n.props.updateRenderSentChatMessageEvent(e)
                    }, n.refetchUserRestrictions = function() {
                        n.forceUpdate()
                    }, n.isCurrentUserBanned = function() {
                        if (n.props.data && !n.props.data.loading && !n.props.data.error && n.props.data.channel) {
                            var e = n.props.data.channel.self;
                            if (e && e.banStatus && e.banStatus.isPermanent) return !0
                        }
                        return !1
                    }, n.chatRestrictedReason = function() {
                        var e;
                        if (!n.props.data || !n.props.data.channel) return null;
                        var t = ((e = {})[h.l.SUBSCRIBERS_ONLY] = n.props.subsOnlyMode, e[h.l.VERIFIED_ONLY] = !(!n.props.data.channel.chatSettings || !n.props.data.channel.chatSettings.requireVerifiedAccount), e[h.l.FOLLOWERS_ONLY] = n.props.followerMode, e[h.l.SLOW_MODE] = !1, e);
                        n.verifiedOnlyRestrictionsEnabled() || (t[h.l.VERIFIED_ONLY] = !1), n.followersOnlyRestrictionsEnabled() || (t[h.l.FOLLOWERS_ONLY] = !1);
                        var i = null;
                        if (n.props.data.channel.self && n.props.data.channel.self.chatRestrictedReasons)
                            for (var r = 0, a = n.props.data.channel.self.chatRestrictedReasons; r < a.length; r++) {
                                var o = a[r];
                                if (t[o]) {
                                    if (o === h.l.FOLLOWERS_ONLY)
                                        if (n.props.data.channel.self.follower && n.props.data.channel.self.follower.followedAt)
                                            if (ne(Object(w.c)(n.props.data.channel.self.follower.followedAt), 60 * n.props.followerDuration) <= 0) continue;
                                    i = o;
                                    break
                                }
                            }
                        return i
                    }, n.isTypingCommand = function() {
                        return "/" === n.state.value.substr(0, 1) && "/me" !== n.state.value.substr(0, 3)
                    }, n.isTypingCheer = function() {
                        return n.state.messageCheers.length > 0
                    }, n.verifiedOnlyRestrictionsEnabled = function() {
                        return De(n.props.isStaff)
                    }, n.followersOnlyRestrictionsEnabled = function() {
                        return Ie(n.props.isStaff)
                    }, n.state = {
                        hasInteractedOrPageload: t.firstPageLoaded,
                        hasSeenAndRejectedEmbedPrompt: !1,
                        isSendingBits: !1,
                        messageCheers: [],
                        showAuthContextBalloon: !1,
                        showBuyBits: !1,
                        showCard: Le.None,
                        showEmotePickerButton: !!t.authToken,
                        showAutomodSettingsTooltip: !1,
                        value: ""
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillUpdate = function(e, t) {
                    if (t.value !== this.state.value && this.props.bitsConfig) {
                        var n = [];
                        Object(H.f)(t.value, this.props.bitsConfig, !1).forEach(function(e) {
                            e.type === Oe.a.Emote && n.push(e.content)
                        }), n.length && t.showCard === Le.Emotes && this.setState({
                            showCard: Le.None
                        }), this.setState({
                            messageCheers: Object(H.b)(n, this.props.bitsConfig)
                        })
                    }
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    !this.props.firstPageLoaded && e.firstPageLoaded && (this.setState({
                        hasInteractedOrPageload: !0
                    }), this.props.isCurrentUserModerator && s.m.get("automodChatCogTooltipSeenNumTimes", 0) < 3 && this.setState({
                        showAutomodSettingsTooltip: !0
                    }, function() {
                        setTimeout(t.incrementAndHideAutomodTooltipCounter, 15e3)
                    })), this.props.data && !this.props.data.loading && (e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch(), e.pubsub.messages.userProperties && e.pubsub.messages.userProperties !== this.props.pubsub.messages.userProperties && void 0 !== e.pubsub.messages.userProperties.changed.email_verified && setTimeout(this.props.data.refetch, 2e3), e.pubsub.messages.follows && e.pubsub.messages.follows !== this.props.pubsub.messages.follows && this.props.data.refetch(), e.pubsub.messages.moderatorActions && e.pubsub.messages.moderatorActions !== this.props.pubsub.messages.moderatorActions && this.props.data.refetch())
                }, t.prototype.componentDidUpdate = function() {
                    this.props.shouldSendAutoModdedCheer && this.onMessageSend()
                }, t.prototype.render = function() {
                    if (this.isCurrentUserBanned()) return r.createElement(b.Ya, {
                        padding: {
                            bottom: 2,
                            x: 2
                        }
                    }, r.createElement(b.Fb, {
                        padding: {
                            bottom: 1,
                            x: 2
                        },
                        borderTop: !0
                    }), r.createElement(b.Ya, {
                        textAlign: b.Sb.Center
                    }, r.createElement(b.W, {
                        color: b.O.Alt,
                        "data-test-selector": "current-user-banned-text",
                        bold: !0
                    }, Object(s.d)("You are currently banned from this channel.", "ChatInput"))), this.renderButtonContainer(!0));
                    if (this.state.hasSeenAndRejectedEmbedPrompt) return r.createElement(b.Ya, {
                        className: "chat-input",
                        display: this.props.hidden ? b.X.Hide : b.X.Block,
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, r.createElement(b.W, {
                        "data-test-selector": "chat-embed-denied-text"
                    }, Object(s.d)("You rejected the prompt to send messages in this embedded version of Twitch Chat. If this was done in error, please refresh the page.", "ChatInput")), this.renderButtonContainer(!0));
                    var e = [];
                    this.props.bitsConfig && e.push(r.createElement(b.A, {
                        key: "bits",
                        icon: b.ub.Bits,
                        ariaLabel: Object(s.d)("Bits", "ChatInput"),
                        type: b.C.Secondary,
                        onClick: this.onBitsIconClick,
                        "data-a-target": "bits-button"
                    })), this.state.showEmotePickerButton && e.push(r.createElement(Ae.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle,
                        isActive: this.state.showCard === Le.Emotes
                    }));
                    var t = null;
                    this.state.hasInteractedOrPageload && (t = r.createElement(Ae.c, {
                        channelOwnerID: this.props.channelID,
                        emotePickerSource: Ue.a.Chat,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === Le.Emotes
                    }));
                    var n = null;
                    this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = r.createElement(U.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentCheers: this.state.messageCheers,
                        isSending: this.state.isSendingBits,
                        isStaff: this.props.isStaff,
                        onCancelSend: this.cancelDelayedSend,
                        onClickCheermote: this.onClickEmote,
                        onConfirmSend: this.confirmDelayedSend,
                        onUserClose: this.onBitsClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        visible: this.state.showCard === Le.Bits,
                        cheerMessageAutoModded: this.props.isTextInputDisabled,
                        bitsSendErrorCode: this.props.bitsSendErrorCode,
                        bitsSendHasError: this.props.bitsSendHasError,
                        chatMessage: this.state.value
                    }));
                    var i = null;
                    this.props.data && this.props.data.channel && this.props.data.channel.cheer && this.props.data.channel.cheer.hashtags && this.state.messageCheers.length > 0 && (i = r.createElement(V, {
                        hashTags: this.props.data.channel.cheer.hashtags
                    }));
                    var a = null;
                    this.props.moderatedMessageParts && this.props.moderatedMessageParts.length > 0 && (a = r.createElement(he, {
                        moderatedMessageParts: this.props.moderatedMessageParts
                    }));
                    var o = this.chatRestrictedReason(),
                        l = !(this.isTypingCommand() || this.isTypingCheer()) && null !== o,
                        c = null;
                    if (this.props.data && !this.props.data.loading && null !== o) {
                        var d = null;
                        o === h.l.FOLLOWERS_ONLY && this.props.data.channel && this.props.data.channel.self && this.props.data.channel.self.follower && this.props.data.channel.self.follower.followedAt && (d = Object(w.c)(this.props.data.channel.self.follower.followedAt)), c = r.createElement(ue, {
                            channelDisplayName: this.props.channelDisplayName,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            closeBalloon: this.onChatRestrictionBalloonClose,
                            openBalloon: this.onChatRestrictionBalloonOpen,
                            reason: o,
                            showBalloon: this.state.showCard === Le.ChatRestriction,
                            followedTime: d,
                            requiredFollowDurationSeconds: 60 * this.props.followerDuration,
                            recheckRestrictions: this.refetchUserRestrictions
                        })
                    }
                    var u = null;
                    return this.state.showAuthContextBalloon && (u = r.createElement(b.u, {
                        show: this.state.showAuthContextBalloon,
                        direction: b.v.TopLeft,
                        size: b.w.Medium
                    }, r.createElement(N.a, {
                        onClickOut: this.handleAuthContextBalloonClose
                    }, r.createElement(j.a, {
                        source: T.a.Chat,
                        targetUserDisplayName: this.props.channelDisplayName,
                        onClose: this.handleAuthContextBalloonClose
                    })))), r.createElement(b.Ya, {
                        className: "chat-input",
                        display: this.props.hidden ? b.X.Hide : b.X.Block,
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, a, c, r.createElement(N.a, {
                        onClickOut: this.onClickOut
                    }, r.createElement(b.Ra, {
                        display: this.props.moderatedMessageParts ? b.X.Hide : b.X.Block,
                        position: b.kb.Relative,
                        zIndex: b.jc.Default
                    }, r.createElement("div", {
                        onMouseEnter: this.onMouseEnterInput
                    }, t, n, u, r.createElement(A.b, {
                        componentType: A.a.TextArea,
                        suggestionSource: A.c.Chat,
                        onValueUpdate: this.onMessageValueUpdate,
                        onFocus: this.onInputFocus,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setChatInputRef,
                        refDelegate: this.setAutocompleteInputRef,
                        paddingRight: 30 * e.length,
                        placeholder: Object(s.d)("Send a message", "ChatInput"),
                        noResize: !0,
                        "data-a-target": "chat-input",
                        "data-test-selector": "chat-input",
                        disabled: this.state.isSendingBits || this.props.isTextInputDisabled,
                        containerElement: this.props.containerElement
                    }, r.createElement(A.d, {
                        emotes: this.props.emotes
                    }), r.createElement(Z, null), i), r.createElement(b.Ya, {
                        position: b.kb.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e)))), this.renderButtonContainer(l))
                }, t.prototype.renderButtonContainer = function(e) {
                    return void 0 === e && (e = !1), r.createElement(b.Ya, {
                        className: "chat-input__buttons-container",
                        display: b.X.Flex,
                        justifyContent: b.Xa.Between,
                        margin: {
                            top: 1
                        }
                    }, r.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Row
                    }, r.createElement(b.Ya, {
                        position: b.kb.Relative
                    }, r.createElement(q.a, {
                        onToggle: this.onChatSettingsToggle,
                        onShowChatRules: this.props.onShowChatRules,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        authToken: this.props.authToken,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onChatCommand: this.onChatCommand,
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        channelID: this.props.channelID,
                        containerElement: this.props.containerElement
                    }), this.renderChatCogTooltips()), r.createElement(b.A, {
                        ariaLabel: Object(s.d)("Users in Chat", "ChatInput"),
                        "data-a-target": "chat-viewer-list",
                        "data-test-selector": "chat-viewer-list",
                        icon: b.ub.ViewerList,
                        onClick: this.onShowViewersList
                    })), this.renderSendButton(e))
                }, t.prototype.renderSendButton = function(e) {
                    var t;
                    return void 0 === e && (e = !1), t = this.state.value && null !== Object(we.p)(this.state.value) ? Object(s.d)("Whisper", "ChatInput") : Object(s.d)("Chat", "ChatInput"), r.createElement(b.z, {
                        onClick: this.onMessageSend,
                        "data-a-target": "chat-send-button",
                        "data-test-selector": "chat-send-button",
                        disabled: this.state.isSendingBits || this.props.isTextInputDisabled || e
                    }, t)
                }, t.prototype.renderChatCogTooltips = function() {
                    return this.state.showAutomodSettingsTooltip ? r.createElement(pe, null) : null
                }, t.prototype.sendRegularMessage = function() {
                    var e = this;
                    if (this.props.onSendMessage) {
                        var t = Object(we.m)(this.state.value);
                        if (t && function() {
                                var e = "test" === s.p.experiments.getAssignment(ve.b.RaidUpsell),
                                    t = s.m.get(be, !1);
                                return e && !t
                            }()) return this.setState({
                            showCard: Le.None
                        }, function() {
                            e.trackChatEvent(e.props.emotePickerSessionID), e.autocompleteInputRef && e.autocompleteInputRef.setValue(""), e.props.openRaidUpsellFromHost(t.recipientLogin)
                        });
                        this.props.onSendMessage(this.state.value) && (this.trackChatEvent(this.props.emotePickerSessionID), this.trackMentions(), this.autocompleteInputRef && this.autocompleteInputRef.setValue(""), this.setState({
                            showCard: Le.None
                        }))
                    }
                }, t.prototype.handleLogin = function() {
                    var e = Object(z.b)();
                    e !== z.a.Balloon ? e === z.a.TwoStep ? this.props.login({
                        modalType: x.e.TwoStep,
                        targetChannel: this.props.channelDisplayName
                    }) : e === z.a.Split ? this.props.login({
                        modalType: x.e.Combined,
                        targetChannel: this.props.channelDisplayName
                    }) : this.props.login() : this.state.showAuthContextBalloon || (this.setState({
                        showAuthContextBalloon: !0
                    }), Object(x.o)({
                        page: x.e.Bubble,
                        source: T.a.Chat
                    }))
                }, t.prototype.trackChatEvent = function(e) {
                    Object(Fe.a)({
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotePickerSessionID: e,
                        isHostMode: this.props.isHostMode,
                        player: this.props.isPopout ? _e.a.Embed : _e.a.Web,
                        subOnlyMode: this.props.subsOnlyMode
                    })
                }, t.prototype.trackMentions = function() {
                    if (this.state.value && this.props.sessionUser)
                        for (var e = 0, t = Object(I.a)(this.state.value, {
                                mentions: {
                                    senderLogin: this.props.sessionUser.login,
                                    sessionUser: this.props.sessionUser
                                }
                            }); e < t.length; e++) {
                            var n = t[e];
                            n.type === Oe.a.Mention && n.content.currentUserMentionRelation !== Ne.a.Recipient && Object(je.a)({
                                channelLogin: this.props.channelLogin,
                                isHostMode: this.props.isHostMode,
                                mentionedUserDisplayName: n.content.recipient,
                                userLogin: this.props.sessionUser.login
                            })
                        } else s.k.warn("[ChatInput] trackMentions was called in a nonsensical state.")
                }, t
            }(r.Component);

            function Ye(e) {
                return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
            }
            var ze = Object(S.compose)(Object(c.a)(Ve, {
                    name: "sendCheer"
                }), Object(c.a)(Be, {
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(O.a)([{
                    topic: function(e) {
                        return Object(m.I)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: Ye
                }, {
                    topic: function(e) {
                        return Object(m.H)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: (Te = {}, Te[u.PubsubMessageType.UserPropertiesUpdate] = "userProperties", Te),
                    skip: Ye
                }, {
                    topic: function(e) {
                        return Object(m.l)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: (Me = {}, Me[u.PubsubMessageType.UserFollowedEvent] = "follows", Me[u.PubsubMessageType.UserUnfollowedEvent] = "follows", Me),
                    skip: Ye,
                    skipMessage: function(e, t) {
                        return ! function(e) {
                            return e.type === u.PubsubMessageType.UserFollowedEvent
                        }(e) && ! function(e) {
                            return e.type === u.PubsubMessageType.UserUnfollowedEvent
                        }(e) || e.target_user_id !== t.channelID
                    }
                }, {
                    topic: function(e) {
                        return Object(m.p)(e.data.currentUser && e.data.currentUser.id || "", e.channelID)
                    },
                    mapMessageTypesToProps: (Re = {}, Re[u.PubsubMessageType.ModeratorAdded] = "moderatorActions", Re[u.PubsubMessageType.ModeratorRemoved] = "moderatorActions", Re),
                    skip: Ye,
                    skipMessage: function(e, t) {
                        var n = e;
                        return !t.data.currentUser || n.data.target_user_id !== t.data.currentUser.id
                    }
                }]), Object(oe.b)("ChatInput", {
                    autoReportInteractive: !0
                }), Object(E.connect)(function(e) {
                    return {
                        followerDuration: e.chat.followerDuration,
                        followerMode: e.chat.followerMode,
                        slowMode: e.chat.slowMode,
                        slowModeDuration: e.chat.slowModeDuration,
                        subsOnlyMode: e.chat.subsOnlyMode,
                        emotePickerSessionID: e.chat.emotePickerSessionID,
                        sessionUser: Object(F.e)(e)
                    }
                }, function(e) {
                    return Object(o.bindActionCreators)({
                        login: function(e) {
                            return Object(R.e)(T.a.Chat, e)
                        },
                        updateRenderSentChatMessageEvent: X.R
                    }, e)
                }))(Ge),
                qe = n("r2XO"),
                Xe = (n("9Rmp"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickConfirm = function() {
                            t.markRoomSeen(), t.props.onCloseChatRules()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(b.Ya, {
                            className: "chat-rules",
                            position: b.kb.Relative
                        }, r.createElement(b.Fb, {
                            border: !0,
                            background: b.r.Base,
                            margin: {
                                bottom: 1
                            }
                        }, r.createElement(b.Ya, {
                            padding: 1
                        }, r.createElement(b.Ya, {
                            margin: {
                                bottom: 1
                            }
                        }, r.createElement(b.W, {
                            type: b.Wb.H6
                        }, Object(s.d)("Chat Rules:", "ChatRules"))), r.createElement(b.Ya, null, r.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                            return r.createElement("li", {
                                key: t
                            }, e)
                        }))), r.createElement(b.Ya, {
                            margin: {
                                top: 1
                            },
                            display: b.X.Flex,
                            justifyContent: b.Xa.Center
                        }, r.createElement(b.z, {
                            size: b.D.Small,
                            onClick: this.onClickConfirm
                        }, Object(s.d)("Ok, got it!", "ChatRules"))))))
                    }, t.prototype.markRoomSeen = function() {
                        var e = s.m.get("chat_rules_shown", {});
                        e[this.props.channelLogin] = !0, s.m.set("chat_rules_shown", e)
                    }, t
                }(r.Component)),
                Qe = n("8in3"),
                Ke = n("Y3y8"),
                $e = (n("7NxT"), n("VS9Q")),
                Je = n("j+2s");
            n("kPCN");
            n.d(t, "a", function() {
                return Ze
            }), n.d(t, "b", function() {
                return at
            });
            var Ze = "chat-room-header-label",
                et = "chat_rules_shown",
                tt = s.k.withCategory("chat-room"),
                nt = l.a.wrap(function() {
                    return n.e(202).then(n.bind(null, "A39y"))
                }, "ChatViewers"),
                it = l.a.wrap(function() {
                    return Promise.all([n.e(0), n.e(201)]).then(n.bind(null, "Y9qK"))
                }, "NewChatterRitual", {
                    failSilently: !0,
                    placeholder: null
                }),
                rt = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        n.hasAcceptedModerationConfirmation = !1, n.closeViewersList = function() {
                            n.setState({
                                showViewersList: !1
                            })
                        }, n.showViewersList = function() {
                            n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                                showViewersList: !0
                            })
                        }, n.confirmModerationAction = function() {
                            return !(n.props.isEmbedded && !n.hasAcceptedModerationConfirmation) || (n.hasAcceptedModerationConfirmation = window.confirm(Object(s.d)("Do you want to enable the ability to timeout and ban on embedded version of Twitch Chat? This setting will persist until you refresh the page.", "ChatRoom")), n.hasAcceptedModerationConfirmation)
                        }, n.onChatInputFocus = function() {
                            var e = s.m.get(et, {});
                            n.props.chatRules && n.props.chatRules.length > 0 && !e[n.props.channelLogin] && n.onShowChatRules()
                        }, n.onShowChatRules = function() {
                            n.props.authToken && n.props.onShowChatRules()
                        }, n.setChatListElement = function(e) {
                            n.setState({
                                chatListElement: e
                            })
                        }, n.shouldHideChatInput = function() {
                            return n.state.showViewersList
                        }, n.openRaidUpsellFromHost = function(e) {
                            return n.closeRaidUpsell(function() {
                                n.setState({
                                    raidUpsellTarget: e
                                })
                            })
                        }, n.closeRaidUpsell = function(e) {
                            return n.setState({
                                raidUpsellTarget: null
                            }, function() {
                                e && e()
                            })
                        }, n.onSendCheerError = function(e) {
                            e.code !== h.P.AUTO_MOD_MESSAGE ? n.setState({
                                bitsSendErrorCode: e.code,
                                bitsSendHasError: !0
                            }) : n.setState({
                                showCheerAutoModPrompt: !0,
                                shouldSendAutoModdedCheer: !1,
                                moderatedMessageParts: Object($e.e)(e.messageContent.fragments)
                            })
                        }, n.clearBitsSendError = function() {
                            n.setState({
                                bitsSendErrorCode: h.P.UNKNOWN,
                                bitsSendHasError: !1
                            })
                        }, n.clearCheerAutoModPrompt = function() {
                            n.setState({
                                showCheerAutoModPrompt: !1,
                                shouldSendAutoModdedCheer: !1,
                                moderatedMessageParts: null
                            })
                        }, n.onCheerAnyway = function() {
                            n.setState({
                                showCheerAutoModPrompt: !1,
                                shouldSendAutoModdedCheer: !0
                            })
                        };
                        var i = new g.c([], [], n.props.channelLogin);
                        return n.state = {
                            showViewersList: !1,
                            raidUpsellTarget: null,
                            badgeSets: i,
                            showCheerAutoModPrompt: !1,
                            shouldSendAutoModdedCheer: !1,
                            bitsSendErrorCode: h.P.UNKNOWN,
                            bitsSendHasError: !1,
                            moderatedMessageParts: null
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.componentDidUpdate = function(e) {
                        this.props.channelLogin !== e.channelLogin && this.props.onCloseChatRules()
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.onCloseChatRules()
                    }, t.prototype.render = function() {
                        if (this.props.isBackground) return null;
                        if (this.props.isHidden && !this.props.isPopout) return r.createElement(b.Fb, {
                            alignItems: b.f.Center,
                            borderLeft: !0,
                            display: b.X.Flex,
                            flexDirection: b.Aa.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: b.Xa.Center,
                            color: b.O.Base,
                            position: b.kb.Relative
                        }, r.createElement(b.Ya, {
                            margin: {
                                bottom: 1
                            }
                        }, r.createElement(b.W, {
                            fontSize: b.Ca.Size5
                        }, Object(s.d)("Chat is hidden.", "ChatRoom"))), r.createElement(b.z, {
                            onClick: this.props.onChatUnhide,
                            "data-a-target": "show-chat-button",
                            "data-test-selector": "show-chat-button"
                        }, Object(s.d)("Show Chat", "ChatRoom")));
                        var e = this.props.bitsConfig && this.props.firstPageLoaded && r.createElement(y.a, {
                                bitsConfig: this.props.bitsConfig,
                                blockLinks: this.props.blockLinks,
                                channelID: this.props.channelID,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                userID: this.props.userID
                            }),
                            t = this.state.showViewersList && r.createElement(b.Fb, {
                                attachBottom: !0,
                                attachLeft: !0,
                                attachRight: !0,
                                attachTop: !0,
                                background: b.r.Alt2,
                                position: b.kb.Absolute,
                                zIndex: b.jc.Default
                            }, r.createElement(b.Ya, {
                                padding: {
                                    y: 1
                                }
                            }, r.createElement(b.Ya, {
                                position: b.kb.Absolute,
                                attachLeft: !0,
                                margin: {
                                    left: 1
                                }
                            }, r.createElement(b.A, {
                                icon: b.ub.Close,
                                ariaLabel: Object(s.d)("Close", "ChatRoom"),
                                onClick: this.closeViewersList,
                                "data-test-selector": "close-viewer-list"
                            }))), r.createElement(nt, {
                                channelLogin: this.props.channelLogin,
                                closeViewersList: this.closeViewersList,
                                isCurrentUserBanned: this.props.currentUserBannedStatusData && this.props.currentUserBannedStatusData.channel && this.props.currentUserBannedStatusData.channel.self && this.props.currentUserBannedStatusData.channel.self.banStatus && this.props.currentUserBannedStatusData.channel.self.banStatus.isPermanent || !1,
                                "data-test-selector": "chat-viewers"
                            })),
                            n = !!this.props.authToken && !this.props.isEmbedded,
                            i = null;
                        return this.props.isChatRulesOpen && this.props.chatRules && this.props.chatRules.length && (i = r.createElement(b.Ya, {
                            padding: {
                                x: 2
                            }
                        }, r.createElement(Xe, {
                            chatRules: this.props.chatRules,
                            channelLogin: this.props.channelLogin,
                            onCloseChatRules: this.props.onCloseChatRules
                        }))), r.createElement(b.Qa, {
                            "data-test-selector": "chat-room-component-layout",
                            "data-a-target": this.props.theme === p.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                            flexShrink: 1,
                            flexGrow: 1,
                            display: b.X.Flex,
                            flexDirection: b.Aa.Column,
                            fullWidth: !0
                        }, r.createElement("section", {
                            className: "chat-room",
                            role: "complementary",
                            "aria-labelledby": Ze
                        }, r.createElement(b.Fb, {
                            borderLeft: !this.props.isEmbedded,
                            display: b.X.Flex,
                            flexDirection: b.Aa.Column,
                            flexWrap: b.Ba.NoWrap,
                            position: b.kb.Relative,
                            flexGrow: 1,
                            fullHeight: !0,
                            color: b.O.Base,
                            className: "chat-room__content"
                        }, this.props.chatRoomHeader, e, r.createElement(qe.a, {
                            badgeSets: this.state.badgeSets,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isEmbedded: this.props.isEmbedded,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isCurrentUserStaff: this.props.isStaff,
                            onPushMessage: this.props.onPushMessage,
                            containerRef: this.setChatListElement,
                            confirmModerationAction: this.confirmModerationAction,
                            theme: this.props.theme
                        }), r.createElement(b.Ya, {
                            className: "chat-room__notifications",
                            position: b.kb.Absolute,
                            zIndex: b.jc.Default,
                            fullWidth: !0
                        }, this.props.children), i, t, this.state.raidUpsellTarget && r.createElement(Ee, {
                            send: this.props.onSendMessage,
                            targetChannelLogin: this.state.raidUpsellTarget,
                            sourceChannelLogin: this.props.channelLogin,
                            closeRaidUpsell: this.closeRaidUpsell
                        }), this.props.firstPageLoaded && r.createElement(it, {
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            isEmbedded: this.props.isEmbedded,
                            isHostMode: this.props.isHostMode,
                            isPopout: this.props.isPopout,
                            onPushMessage: this.props.onPushMessage,
                            onSendMessage: this.props.onSendMessage
                        }), this.state.showCheerAutoModPrompt && r.createElement(k, {
                            badgeSets: this.state.badgeSets,
                            onEditCheer: this.clearCheerAutoModPrompt,
                            onCheerAnyway: this.onCheerAnyway
                        }), r.createElement(ze, {
                            authToken: this.props.authToken,
                            bitsConfig: n ? this.props.bitsConfig : void 0,
                            channelDisplayName: this.props.channelDisplayName,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            emotes: this.props.emotes,
                            emoteMap: this.props.emoteMap,
                            firstPageLoaded: this.props.firstPageLoaded,
                            hidden: this.shouldHideChatInput(),
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isEmbedded: this.props.isEmbedded,
                            isHostMode: this.props.isHostMode,
                            isPopout: this.props.isPopout,
                            isStaff: this.props.isStaff,
                            onChatCommand: this.props.onSendMessage,
                            onShowChatRules: this.props.authToken && this.props.chatRules && this.props.chatRules.length ? this.onShowChatRules : void 0,
                            userBadges: this.props.userBadges,
                            showViewersList: this.showViewersList,
                            onSendMessage: this.props.onSendMessage,
                            onInputFocus: this.onChatInputFocus,
                            containerElement: this.state.chatListElement,
                            openRaidUpsellFromHost: this.openRaidUpsellFromHost,
                            onSendCheerError: this.onSendCheerError,
                            onSendCheerSuccess: this.clearCheerAutoModPrompt,
                            isTextInputDisabled: this.state.showCheerAutoModPrompt,
                            shouldSendAutoModdedCheer: this.state.shouldSendAutoModdedCheer,
                            moderatedMessageParts: this.state.moderatedMessageParts,
                            bitsSendErrorCode: this.state.bitsSendErrorCode,
                            bitsSendHasError: this.state.bitsSendHasError,
                            clearBitsSendError: this.clearBitsSendError
                        }), r.createElement(b.Ya, {
                            className: "chat-room__viewer-card",
                            fullHeight: !0,
                            fullWidth: !0,
                            position: b.kb.Absolute,
                            "data-a-target": "chat-user-card"
                        }, r.createElement(Qe.a, {
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            confirmModerationAction: this.confirmModerationAction,
                            onSendMessage: this.props.onSendMessage,
                            channelID: this.props.channelID
                        })))))
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        if (e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && this.setState({
                                badgeSets: new g.c(e.data.badges, e.data.user.broadcastBadges, e.channelLogin)
                            }), e.data && e.data.user && e.data.user.self && e.data.user.self.displayBadges) {
                            var t = {};
                            e.data.user.self.displayBadges.forEach(function(e) {
                                t[e.setID] = e.version
                            }), s.p.tmi.client.updateChannelBadges(e.channelLogin, t)
                        }
                    }, t
                }(r.Component),
                at = Object(o.compose)(Object(c.a)(Je, {
                    skip: function(e) {
                        return !e.firstPageLoaded
                    },
                    options: function(e) {
                        return {
                            name: "data",
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(Ke.a)(), Object(d.a)(function(e) {
                    return {
                        query: Je,
                        variables: {
                            channelLogin: e.channelLogin
                        },
                        topic: Object(m.E)(e.userID),
                        type: u.PubsubMessageType.UserBitsBadgeUpdate,
                        skip: !e.firstPageLoaded || !e.userID,
                        mutator: function(t, n) {
                            if (tt.debug("Received bits-user-update-v1 pubsub update", {
                                    data: n,
                                    event: t
                                }), !n.badges || t.message_type === C.b.Balance || null === t.data.newest_version || t.data.channel_id !== e.channelID) return n;
                            var i = n.badges.find(function(e) {
                                return e.setID === t.data.set_id && e.version === t.data.newest_version
                            });
                            return void 0 !== i && n.user.self && n.user.self.displayBadges && (n.user.self.displayBadges = n.user.self.displayBadges.map(function(e) {
                                return e.setID === i.setID && e.version !== i.version ? i : e
                            }), (!n.user.self.selectedBadge || i.setID === C.a.Bits && n.user.self.selectedBadge.setID === C.a.Bits) && (n.user.self.selectedBadge = i), n.user.self.selectedBadge && (i.setID !== C.a.Leaderboard || n.user.self.selectedBadge.setID !== C.a.Bits && n.user.self.selectedBadge.setID !== C.a.Leaderboard) || (n.user.self.selectedBadge = i)), n
                        }
                    }
                }), a.a)(rt)
        },
        BKFw: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            });
            var i = "BROADCAST_TYPE_ALL",
                r = "broadcaster_id",
                a = "BROADCAST_LENGTH_ANY"
        },
        BOil: function(e, t, n) {},
        "BQs+": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "c", function() {
                return d
            }), n.d(t, "b", function() {
                return u
            });
            var i, r = n("mrSG"),
                a = n("/7QA"),
                o = n("2xye"),
                s = n("I6K6"),
                l = n("bTcf"),
                c = n("L7EG");

            function d(e, t, n) {
                return r.__awaiter(this, void 0, void 0, function() {
                    var i, l, u, p;
                    return r.__generator(this, function(r) {
                        switch (r.label) {
                            case 0:
                                return r.trys.push([0, 2, , 3]), [4, n.query({
                                    query: c,
                                    variables: {
                                        videoID: e.id
                                    }
                                })];
                            case 1:
                                return i = r.sent().data, l = function(e, t) {
                                    return {
                                        id: e.id,
                                        owner: t.owner,
                                        broadcastType: t.broadcastType,
                                        game: t.game
                                    }
                                }(e, i.video), u = {
                                    channel: l.owner ? l.owner.login : null,
                                    channel_id: Number(e.owner.id),
                                    game: l.game ? l.game.name : null,
                                    partner: !!l.owner && l.owner.roles.isPartner,
                                    location: t.location,
                                    share_context: t.collectionID ? o.ShareItemContext.Collection : null,
                                    share_platform: t.platform,
                                    shared_item_id: t.collectionID ? t.collectionID : l.id,
                                    shared_item_type: t.collectionID ? o.ShareItemType.Collection : Object(s.a)(l.broadcastType),
                                    shared_item_url: t.shareURL,
                                    source_item_id: l.id,
                                    source_item_type: Object(s.a)(l.broadcastType)
                                }, a.p.tracking.track(o.SpadeEventType.ShareItem, u), [3, 3];
                            case 2:
                                return p = r.sent(), a.k.error(p.toString(), d.name), [3, 3];
                            case 3:
                                return [2]
                        }
                    })
                })
            }

            function u(e, t, n) {
                return r.__awaiter(this, void 0, void 0, function() {
                    var i, s, c;
                    return r.__generator(this, function(r) {
                        switch (r.label) {
                            case 0:
                                return r.trys.push([0, 2, , 3]), [4, n.query({
                                    query: l,
                                    variables: {
                                        creatorID: e.owner.id
                                    }
                                })];
                            case 1:
                                return i = r.sent().data, s = {
                                    channel: i.user ? i.user.login : null,
                                    channel_id: Number(e.owner.id),
                                    game: null,
                                    partner: !!i.user && i.user.roles.isPartner,
                                    location: t.location,
                                    share_context: null,
                                    share_platform: t.platform,
                                    shared_item_id: e.id,
                                    shared_item_type: o.ShareItemType.Collection,
                                    shared_item_url: t.shareURL,
                                    source_item_id: e.id,
                                    source_item_type: o.SourceItemType.Collection
                                }, a.p.tracking.track(o.SpadeEventType.ShareItem, s), [3, 3];
                            case 2:
                                return c = r.sent(), a.k.error(c.toString(), u.name), [3, 3];
                            case 3:
                                return [2]
                        }
                    })
                })
            }! function(e) {
                e.Copy = "link", e.Embed = "option_embed", e.Facebook = "fb", e.Link = "option_link", e.Reddit = "reddit", e.Twitter = "twitter", e.Unknown = "", e.VKontakte = "vk", e.Download = "download"
            }(i || (i = {}))
        },
        BRlh: function(e, t, n) {},
        BZOq: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            });
            var i = n("H/lO"),
                r = n("BKFw");

            function a(e) {
                return e.map(function(e) {
                    return {
                        title: e.title || "",
                        thumbnail: e.thumbnail || "",
                        thumbnailAltText: e.thumbnailAltText || "",
                        linkTo: e.linkTo || "",
                        login: e.login || "",
                        name: e.name || "",
                        createdAt: e.createdAt || 0,
                        length: e.length || 0,
                        id: e.id || ""
                    }
                })
            }

            function o(e) {
                var t = {},
                    n = [];
                return "broadcastType" in e && e.broadcastType !== r.c && void 0 !== e.broadcastType && n.push(e.broadcastType), "broadcasterId" in e && n.push(r.a + ":" + e.broadcasterId), t.facetFilters = function(e) {
                    return e.join(",")
                }(n), "broadcastLength" in e && e.broadcastLength !== r.b && void 0 !== e.broadcastLength && (t.numericFilters = [e.broadcastLength]), {
                    typeID: i.a.Videos,
                    params: t
                }
            }
        },
        BbLt: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "channel"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcastSettings"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "language"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "campaignProperties"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "domains"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "stream"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "viewersCount"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "settings"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channelFeedEnabled"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "lastBroadcast"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "self"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "follower"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionBenefit"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "FragmentSpread",
                            name: {
                                kind: "Name",
                                value: "hostingChannel"
                            },
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 399
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/channel/queries/hosting-channel.gql"\nfragment channel on User {\nid\nbroadcastSettings {\nid\nlanguage\ngame {\nid\nname\n}\ntitle\n}\ncampaignProperties {\ndomains\n}\ndisplayName\nlogin\nstream {\nid\ngame {\nid\nname\n}\ntype\nviewersCount\n}\nsettings {\nchannelFeedEnabled\n}\nlastBroadcast {\nid\ngame {\nid\nname\n}\n}\nself {\nfollower {\nnode {\nid\n}\n}\nsubscriptionBenefit {\nid\n}\n}\n...hostingChannel\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("GvwK").definitions)), e.exports = i
        },
        BhFH: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("8jSG"),
                o = n("cMjZ"),
                s = n("kSkr");

            function l() {
                var e = this;
                return Object(r.a)(s, {
                    props: function(t) {
                        return {
                            blockUserMutation: function(n, r, s, l) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            sourceContext: s,
                                                            reason: r
                                                        }
                                                    },
                                                    optimisticResponse: {
                                                        blockUser: {
                                                            __typename: "BlockUserPayload",
                                                            targetUser: {
                                                                __typename: "User",
                                                                id: n
                                                            }
                                                        }
                                                    },
                                                    update: function(e) {
                                                        var t = e.readFragment({
                                                            id: Object(o.a)(l),
                                                            fragment: a
                                                        });
                                                        t && (t.blockedUsers.push({
                                                            id: n,
                                                            __typename: "User"
                                                        }), e.writeFragment({
                                                            id: Object(o.a)(l),
                                                            fragment: a,
                                                            data: t
                                                        }))
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return e.sent(), [3, 3];
                                            case 2:
                                                throw new Error("blockUserMutation is not ready");
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        Bw4G: function(e, t, n) {},
        CA5B: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VIPs"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "vips"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "login"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 82
                }
            };
            n.loc.source = {
                body: "query VIPs($id: ID!) {\nuser(id: $id) {\nid\nvips {\nedges {\nnode {\nid\nlogin\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        CCjQ: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("2xye"),
                s = n("Ue10"),
                l = (n("je0y"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(s.Ya, {
                            "data-test-selector": "private-video-banner-layout"
                        }, this.renderHeader())
                    }, t.prototype.renderHeader = function() {
                        var e = this;
                        return r.createElement(s.i, {
                            type: s.n.SlideInBottom,
                            delay: s.j.Medium,
                            duration: s.k.Medium,
                            enabled: !0
                        }, r.createElement(s.Fb, {
                            className: "private-video-banner__header",
                            display: s.X.Flex,
                            background: s.r.AccentAlt2,
                            color: s.O.Overlay,
                            alignItems: s.f.Center,
                            padding: {
                                x: 1,
                                y: .5
                            },
                            fontSize: s.Ca.Size6,
                            "data-test-selector": "private-video-banner-header"
                        }, r.createElement(s.Ya, {
                            display: s.X.Flex,
                            alignItems: s.f.Center,
                            justifyContent: s.Xa.Center
                        }, r.createElement(s.tb, {
                            asset: s.ub.Lock,
                            width: 20,
                            height: 20
                        })), r.createElement(s.W, null, Object(a.d)("This video is private. To Premiere or edit your video, visit your <x:link>video manager</x:link>", {
                            "x:link": function(t) {
                                return r.createElement(s.U, {
                                    "data-test-selector": "private-video-banner-header-link",
                                    to: {
                                        pathname: "/" + e.props.ownerLogin + "/manager",
                                        state: {
                                            medium: o.PageviewMedium.VideoWatchPage,
                                            content: o.PageviewContent.Video
                                        }
                                    }
                                }, r.createElement(s.W, {
                                    type: s.Wb.Span,
                                    color: s.O.OverlayAlt
                                }, t))
                            }
                        }, "PrivateVideoBanner"))))
                    }, t
                }(r.Component))
        },
        "CFw/": function(e, t, n) {
            e.exports = n.p + "assets/notification_upsell_arrow-c9d4ff7c87444b45d813.png"
        },
        CJLt: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoChat_TrackingContext_VideoAndCurrentUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "owner"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "roles"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPartner"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 197
                }
            };
            n.loc.source = {
                body: "query VideoChat_TrackingContext_VideoAndCurrentUser($videoID: ID) {\nvideo(id: $videoID) {\nid\nbroadcastType\ntitle\ngame {\nid\nname\n}\nowner {\nid\nlogin\nroles {\nisPartner\n}\n}\n}\ncurrentUser {\nid\nlogin\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        CK1f: function(e, t, n) {},
        CYfc: function(e, t, n) {
            "use strict";
            var i = n("vhpE");
            n.d(t, "a", function() {
                return i.a
            }), n.d(t, "b", function() {
                return i.b
            })
        },
        CiVV: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("q1tI"),
                r = function() {
                    return i.createElement("figure", {
                        className: "tw-svg tw-svg__asset--inherit"
                    }, i.createElement("svg", {
                        xmlns: "http://www.w3.org/2000/svg",
                        width: "20",
                        height: "20"
                    }, i.createElement("path", {
                        d: "M17 17.357c-.466.4-1.08.643-1.754.643-.672 0-1.507-.414-1.753-.636a1.29 1.29 0 0 0-.898-.333c-.295 0-.546.077-.753.231-.5.477-1.167.741-1.858.738a2.683 2.683 0 0 1-1.75-.64 1.317 1.317 0 0 0-.9-.33c-.296 0-.547.078-.754.232-.5.476-1.166.74-1.857.738A2.684 2.684 0 0 1 3 17.383V8.096C3.336 4.676 6.335 2 9.984 2 13.86 2 17 5.016 17 8.737l-.001.12.001 8.5zM7.5 11a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm5 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"
                    })))
                }
        },
        "CpU+": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("JiJH");

            function o() {
                var e = this;
                return Object(r.a)(a, {
                    props: function(t) {
                        return {
                            unVIPUserMutation: function(n) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t.ownProps.channelID,
                                                            revokeeLogin: n
                                                        }
                                                    }
                                                })] : [2];
                                            case 1:
                                                return [2, e.sent().data]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        D91L: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/MKj"),
                s = n("/7QA"),
                l = n("gcd7"),
                c = n("BhFH"),
                d = n("iS14"),
                u = n("DMoW"),
                p = n("TvOw"),
                m = n("kRBY"),
                h = n("NNSq"),
                g = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.getInvalidUserMessage = function() {
                            return Object(s.d)("No user matching that login.", "IgnoreCommandHandler")
                        }, t.blockUser = function(e) {
                            return e ? e === t.props.currentUserLogin ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("You cannot ignore yourself.", "IgnoreCommandHandler")
                                })
                            } : {
                                deferred: Object(h.a)(e).then(function(e) {
                                    if (!e) return {
                                        notice: t.getInvalidUserMessage()
                                    };
                                    try {
                                        t.props.blockUserMutation(e, p.a.Other, u.e.CHAT, t.props.user)
                                    } catch (e) {
                                        return {
                                            notice: Object(s.d)("Unable to ignore user", "IgnoreCommandHandler")
                                        }
                                    }
                                    return {
                                        notice: Object(s.d)("User successfully ignored", "IgnoreCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("Please specify a user to ignore", "IgnoreCommandHandler")
                                })
                            }
                        }, t.unblockUser = function(e) {
                            return e ? e === t.props.currentUserLogin ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("You cannot unignore yourself.", "IgnoreCommandHandler")
                                })
                            } : {
                                deferred: Object(h.a)(e).then(function(e) {
                                    if (!e) return {
                                        notice: t.getInvalidUserMessage()
                                    };
                                    try {
                                        t.props.unblockUserMutation(e, t.props.user)
                                    } catch (e) {
                                        return {
                                            notice: Object(s.d)("Unable to unignore user", "IgnoreCommandHandler")
                                        }
                                    }
                                    return {
                                        notice: Object(s.d)("User successfully unignored", "IgnoreCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("Please specify a user to unignore", "IgnoreCommandHandler")
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("span", {
                            style: {
                                display: "none"
                            }
                        }, r.createElement(l.a, {
                            command: "ignore",
                            handler: this.blockUser
                        }), r.createElement(l.a, {
                            command: "unignore",
                            handler: this.unblockUser
                        }))
                    }, t
                }(r.Component);
            var f = Object(a.compose)(Object(o.connect)(function(e) {
                return {
                    user: Object(m.e)(e)
                }
            }), Object(d.a)(), Object(c.a)())(g);
            n.d(t, "a", function() {
                return f
            })
        },
        "DB+C": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelOwnerID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelOwnerID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "campaignProperties"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "domains"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "28"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "tier"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "price"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emoteSetID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "platform"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 313
                }
            };
            n.loc.source = {
                body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\nuser(id: $channelOwnerID) {\nid\nlogin\ncampaignProperties {\ndomains\n}\ndisplayName\nprofileImageURL(width: 28)\nsubscriptionProducts {\nid\nname\ntier\nurl\nemotes {\nid\ntoken\n}\nprice\nemoteSetID\n}\nself {\nsubscriptionBenefit {\nid\nplatform\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        DJtx: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Clips_ModalDelete"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slug"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcaster"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "curator"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "thumbnailURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "createdAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "viewCount"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 143
                }
            };
            n.loc.source = {
                body: "query Clips_ModalDelete($slug: ID!) {\nclip(slug: $slug) {\nid\nbroadcaster {\nid\n}\ncurator {\nid\nlogin\n}\nthumbnailURL\ncreatedAt\nviewCount\ntitle\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        DLhE: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return d
            }), n.d(t, "a", function() {
                return u
            });
            var i = n("mrSG"),
                r = n("G1cX"),
                a = n("/7QA"),
                o = n("f00E"),
                s = n("+pBb"),
                l = n("W/3w"),
                c = n("F6GT");

            function d(e) {
                return e.chat.renderSent
            }

            function u(e) {
                var t = [];
                if (e.chat && e.chat.commandHandlers)
                    for (var n in e.chat.commandHandlers) e.chat.commandHandlers[n] && t.push(n);
                return t.sort()
            }
            a.p.store.registerReducer("chat", function(e, t) {
                var n;
                switch (void 0 === e && (e = function() {
                    var e = Object(c.a)();
                    return i.__assign({}, e, {
                        commandHandlers: {},
                        emoteSets: [],
                        emotePickerSessionID: null,
                        followerDuration: l.a,
                        followerMode: !1,
                        isChatRulesOpen: !1,
                        isHidden: !1,
                        renderSent: null,
                        slowMode: !1,
                        slowModeDuration: 120,
                        subsOnlyMode: !1,
                        unhideIgnoredUsers: []
                    })
                }()), t.type) {
                    case s.d:
                        return i.__assign({}, e, {
                            isHidden: !0
                        });
                    case s.e:
                        return i.__assign({}, e, {
                            isHidden: !1
                        });
                    case s.f:
                        return i.__assign({}, e, {
                            isChatRulesOpen: !1
                        });
                    case s.i:
                        return i.__assign({}, e, {
                            emoteSets: t.emoteSets
                        });
                    case s.g:
                        return i.__assign({}, e, {
                            emotePickerSessionID: null
                        });
                    case s.h:
                        return i.__assign({}, e, {
                            emotePickerSessionID: Object(o.b)()
                        });
                    case s.j:
                        return i.__assign({}, e, {
                            lastUsedFollowerDurations: i.__assign({}, e.lastUsedFollowerDurations, (n = {}, n[t.channelLogin] = t.duration, n))
                        });
                    case s.r:
                        return i.__assign({}, e, {
                            isChatRulesOpen: !0
                        });
                    case s.q:
                        var a = i.__assign({}, e);
                        return void 0 !== t.roomState.followersOnly && (a.followerMode = t.roomState.followersOnly), void 0 !== t.roomState.followersOnlyRequirement && (a.followerDuration = t.roomState.followersOnlyRequirement), void 0 !== t.roomState.slowMode && (a.slowMode = t.roomState.slowMode), void 0 !== t.roomState.slowModeDuration && (a.slowModeDuration = t.roomState.slowModeDuration), void 0 !== t.roomState.subsOnly && (a.subsOnlyMode = t.roomState.subsOnly), a;
                    case s.b:
                        return i.__assign({}, e, {
                            showAutoModActions: !1
                        });
                    case s.c:
                        return i.__assign({}, e, {
                            showAutoModActions: !0
                        });
                    case s.k:
                        return i.__assign({}, e, {
                            showModerationActions: !1
                        });
                    case s.l:
                        return i.__assign({}, e, {
                            showModerationActions: !0
                        });
                    case s.m:
                        return i.__assign({}, e, {
                            showModIcons: !1
                        });
                    case s.n:
                        return i.__assign({}, e, {
                            showModIcons: !0
                        });
                    case s.s:
                        return i.__assign({}, e, {
                            showTimestamps: !1
                        });
                    case s.t:
                        return i.__assign({}, e, {
                            showTimestamps: !0
                        });
                    case s.v:
                        return i.__assign({}, e, {
                            useHighContrastColors: !1
                        });
                    case s.w:
                        return i.__assign({}, e, {
                            useHighContrastColors: !0
                        });
                    case s.a:
                        return r(e, function(e) {
                            return e.commandHandlers
                        }, function(e) {
                            return t.command in e ? e[t.command].push(t.handler) : e[t.command] = [t.handler], e
                        });
                    case s.o:
                        return r(e, function(e) {
                            return e.commandHandlers
                        }, function(e) {
                            if (!(t.command in e)) return e;
                            var n = e[t.command].indexOf(t.handler);
                            return e[t.command].splice(n, 1), 0 === e[t.command].length && delete e[t.command], e
                        });
                    case s.p:
                        return i.__assign({}, e, {
                            renderSent: t.customEvent
                        });
                    case s.u:
                        return i.__assign({}, e, {
                            unhideIgnoredUsers: e.unhideIgnoredUsers.concat([t.userID])
                        });
                    default:
                        return e
                }
            })
        },
        DOvc: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage__ChannelViewersCount"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "viewersCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 113
                }
            };
            n.loc.source = {
                body: "query ChannelPage__ChannelViewersCount($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\nviewersCount\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        DnH4: function(e, t, n) {},
        DnOo: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/7QA"),
                s = n("UUve"),
                l = n("GnwI"),
                c = n("br9A"),
                d = n("Ue10"),
                u = "subscribe-button__subscribe-tier-button",
                p = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleClick = function() {
                            t.openCheckout(), t.props.handleSubAction({
                                action: c.a.ClickCheckout,
                                checkoutButtonTier: t.props.tierPrice
                            })
                        }, t.openCheckout = function() {
                            t.props.isMobileCheckout || o.n.set(s.c, t.props.productName)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        if (this.props.isSubbedToTier) {
                            var e = Object(o.d)("Subscribed", "SubTierButton");
                            return r.createElement(d.z, {
                                ariaLabel: e,
                                "data-test-selector": u,
                                disabled: !0,
                                icon: d.ub.Star
                            }, e)
                        }
                        var t;
                        return t = this.props.isEsportChannel ? Object(o.d)("Get the All-Access Pass", "SubTierButton") : this.props.customSubscribeNowMessage ? this.props.customSubscribeNowMessage : Object(o.d)("Subscribe Now", "SubTierButton"), r.createElement(d.z, i.__assign({
                            ariaLabel: t + " " + this.props.tierPrice,
                            "data-test-selector": u,
                            linkTo: this.props.isMobileCheckout ? this.props.url : void 0,
                            onClick: this.handleClick,
                            purchase: this.props.tierPrice
                        }, Object(d.kc)(this.props), {
                            fullWidth: this.props.fullWidth
                        }), t)
                    }, t
                }(r.Component),
                m = Object(a.compose)(Object(l.b)("SubTierButton", {
                    autoReportInteractive: !0
                }))(p);
            n.d(t, !1, function() {
                return u
            }), n.d(t, "a", function() {
                return m
            })
        },
        DpwM: function(e, t, n) {
            "use strict";
            n.d(t, "e", function() {
                return i
            }), n.d(t, "c", function() {
                return r
            }), n.d(t, "d", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            }), n.d(t, "f", function() {
                return l
            }), n.d(t, "g", function() {
                return c
            }), n.d(t, "h", function() {
                return d
            });
            var i = "video",
                r = "published",
                a = "unpublished",
                o = "pending_review",
                s = "pending_review_spam",
                l = "current",
                c = "",
                d = function(e) {
                    return "" !== e.parentId
                }
        },
        E78O: function(e, t, n) {},
        ECxT: function(e, t, n) {},
        EE1E: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return k
            });
            var i = n("EN5X"),
                r = n("G7cy"),
                a = n("m7BI"),
                o = n("E8D/"),
                s = n("DtRd"),
                l = n("R4sh"),
                c = n("/0dD"),
                d = n("76Lv"),
                u = 4.5,
                p = [250, 249, 250],
                m = [15, 14, 17],
                h = .1,
                g = 50,
                f = "7A7A7A",
                v = 36,
                b = {};

            function k(e, t) {
                var n = s(e),
                    k = y(r(n));
                if (void 0 === t && (t = Object(d.d)()), k in b[t]) return b[t][k];
                if (t === c.a.Dark && n.every(function(e) {
                        return e < v
                    })) return f;
                var C = t === c.a.Light ? p : m,
                    S = Object(l.a)(n, C);
                if (S > u) return k;
                for (var E = [n[0], n[1], n[2]], N = g; N >= 0 && S < u; N--) {
                    var O = a(E);
                    t === c.a.Light ? O[0] -= O[0] * h : O[0] += O[0] * h, E = o(i(O)), S = Object(l.a)(E, C)
                }
                var _ = y(r(E));
                return b[t][k] = _, _
            }

            function y(e) {
                return "#" === e[0] ? e.substr(1) : e
            }
            b[c.a.Dark] = {}, b[c.a.Light] = {}
        },
        EOIh: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatInput"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "isEmbedded"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPartner"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isEmbedded"
                                                }
                                            }
                                        }]
                                    }]
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "banStatus"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPermanent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "chatRestrictedReasons"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "follower"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "followedAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "chatSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "requireVerifiedAccount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "hashtags"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "edges"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "cursor"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "node"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "emoteMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cheerMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "event"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 431
                }
            };
            n.loc.source = {
                body: "query ChatInput($channelLogin: String! $isEmbedded: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nisPartner @include(if: $isEmbedded)\n}\nchannel: user(login: $channelLogin) {\nid\nself {\nbanStatus {\nisPermanent\n}\nsubscriptionBenefit {\nid\n}\nchatRestrictedReasons\nfollower {\nfollowedAt\n}\n}\nchatSettings {\nrequireVerifiedAccount\n}\ncheer {\nid\nhashtags {\nedges {\ncursor\nnode {\nid\n}\n}\n}\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ESOY: function(e, t, n) {},
        EdhP: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return l
            }), n.d(t, "a", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("cr+I"),
                a = n("/7QA"),
                o = n("vRsq"),
                s = {
                    height: 378,
                    width: 620,
                    allowScrolling: !0,
                    allowFullscreen: !0
                };

            function l(e, t) {
                return c(function(e) {
                    e.video && (e.video = Object(o.p)(e.video));
                    var t = r.stringify(e);
                    return a.p.config.playerBaseURL + "/?" + t
                }(e), t)
            }

            function c(e, t) {
                void 0 === t && (t = s);
                var n = i.__assign({}, s, t),
                    r = '<iframe src="' + e + '" frameborder="0" ' + (n.allowFullscreen ? 'allowfullscreen="true" ' : "") + (n.allowScrolling ? "" : 'scrolling="no" ') + 'height="' + n.height + '" width="' + n.width + '"></iframe>';
                return n.textLink && (r += function(e, t) {
                    return '<a href="' + e + '" style="padding:2px 0px 4px; display:block; width:345px; font-weight:normal; font-size:10px; text-decoration:underline;">' + t + "</a>"
                }(n.textLink.url, n.textLink.text)), r
            }
        },
        EihZ: function(e, t, n) {},
        Epr8: function(e, t, n) {},
        EsbA: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage_FuelBar"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "settings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isCommerceRevShareEnabled"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "28"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "lastBroadcast"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "fuelGame"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "requestInfo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "countryCode"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hasPrime"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 309
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/fuel/models/fuel-game.gql"\nquery ChannelPage_FuelBar($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nlogin\nsettings {\nisCommerceRevShareEnabled\n}\nprofileImageURL(width: 28)\nlastBroadcast {\nid\ngame {\n...fuelGame\n}\n}\n}\nrequestInfo {\ncountryCode\n}\ncurrentUser {\nid\nhasPrime\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("wiBv").definitions)), e.exports = i
        },
        EuPq: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("Ue10"),
                o = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleClickHandler = function(e) {
                            t.props.onClick && t.props.onClick(), e.currentTarget.select()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(a.Sa, {
                            readOnly: !0,
                            type: a.Ua.Text,
                            value: this.props.value,
                            onClick: this.handleClickHandler
                        })
                    }, t
                }(r.Component);
            n.d(t, "a", function() {
                return o
            })
        },
        EyXs: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                skipHtml: !0,
                softBreak: "br",
                allowedTypes: ["Emph", "Strong", "Paragraph", "Heading", "Item", "List", "Text", "Link", "Softbreak", "Hardbreak"]
            }
        },
        F6GT: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("/7QA"),
                a = "control";
            n.d(t, "a", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            });
            var o = "chatSettings";

            function s() {
                var e = r.m.get(o, {});
                return i.__assign({
                    lastUsedFollowerDurations: {},
                    showAutoModActions: !0,
                    showMessageFlags: !0,
                    showModerationActions: !0,
                    showModIcons: !1,
                    showTimestamps: !1,
                    useHighContrastColors: !1,
                    zachModeStatus: a
                }, e)
            }

            function l(e, t) {
                var n = s();
                n[e] = t, r.m.set(o, n)
            }

            function c(e, t) {
                var n = s();
                n.lastUsedFollowerDurations[e] = t, r.m.set(o, n)
            }
        },
        FAYk: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnmodUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnmodUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unmodUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "target"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 119
                }
            };
            n.loc.source = {
                body: "mutation UnmodUser($input: UnmodUserInput!){\nunmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        FC3M: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("kRBY"),
                a = n("XDQu"),
                o = n("mrSG"),
                s = n("q1tI"),
                l = n("oJmH"),
                c = n("yR8l"),
                d = n("TSYQ"),
                u = n("6x+I"),
                p = n("/7QA"),
                m = n("geRD"),
                h = n("2xye"),
                g = 560,
                f = 170;
            var v = n("ugLo"),
                b = n("Ue10"),
                k = (n("bTT7"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hovering: !1
                        }, t.hoverTimeout = 0, t.renderBalloonContent = function(e, n) {
                            var i = "/directory/game/" + t.props.game + "/details?br_name=" + t.props.channelLogin,
                                r = {
                                    info: e.info,
                                    crates: e.info.crateASINs,
                                    countryCode: t.props.countryCode,
                                    userHasPrime: t.props.userHasPrime,
                                    isInGameContent: !0
                                },
                                a = e.info.imageURL ? s.createElement(b.Ya, {
                                    display: b.X.Flex,
                                    flexShrink: 0
                                }, s.createElement("img", {
                                    alt: Object(p.d)("In Game Content Display", "FuelBar-Content"),
                                    src: e.info.imageURL,
                                    className: "fuel-in-game-content__image"
                                })) : null;
                            return s.createElement(b.Qa, {
                                className: "fuel-in-game-content__balloon",
                                padding: 1,
                                flexDirection: b.Aa.Row,
                                display: b.X.Flex,
                                flexWrap: b.Ba.NoWrap,
                                "data-target": "fuel-in-game-content-balloon"
                            }, s.createElement("div", {
                                style: {
                                    width: n
                                }
                            }, a, s.createElement(b.Ya, {
                                padding: {
                                    x: 1
                                },
                                display: b.X.Flex,
                                flexShrink: 1,
                                flexDirection: b.Aa.Column,
                                className: "fuel-in-game-content__details"
                            }, s.createElement(b.W, {
                                fontSize: b.Ca.Size4
                            }, e.info.title), s.createElement(b.W, null, s.createElement("a", {
                                href: i,
                                target: "_blank"
                            }, t.props.game)), s.createElement(b.W, {
                                color: b.O.Alt2
                            }, e.tags.join(" ")), s.createElement(u, {
                                source: e.description
                            }), s.createElement(b.Ya, {
                                margin: {
                                    top: 1
                                },
                                flexDirection: b.Aa.Row,
                                display: b.X.Flex,
                                breakpointExtraSmall: {
                                    flexWrap: b.Ba.NoWrap
                                }
                            }, s.createElement(b.Ya, {
                                flexShrink: 0,
                                alignItems: b.f.Center
                            }, s.createElement(v.a, {
                                options: r,
                                onClickBuyNow: t.onBuyNowClick
                            })), s.createElement(b.Ya, {
                                padding: {
                                    left: 1
                                },
                                flexShrink: 1,
                                alignItems: b.f.Center,
                                flexDirection: b.Aa.Row,
                                display: b.X.Flex
                            }, s.createElement("a", {
                                href: i,
                                target: "_blank"
                            }, Object(p.d)("See all in-game content", "FuelBar-Content")))))))
                        }, t.onMouseEnter = function() {
                            t.clearTimeoutAndSetHovering(!0)
                        }, t.onMouseLeave = function() {
                            t.clearTimeoutAndSetHovering(!1)
                        }, t.clearTimeoutAndSetHovering = function(e) {
                            t.hoverTimeout && (clearTimeout(t.hoverTimeout), t.hoverTimeout = 0), t.hoverTimeout = setTimeout(function() {
                                t.setState({
                                    hovering: e
                                }), t.hoverTimeout = 0
                            }, 50)
                        }, t.onBuyNowClick = function() {
                            t.props.onBuyNow(t.props.content)
                        }, t.setContentRefDelegate = function(e) {
                            return t.contentRef = e
                        }, t.getPosition = function() {
                            var e = t.props.getParentRect();
                            return t.contentRef && e ? function(e, t) {
                                var n = Math.min(g, e.width),
                                    i = t.left + t.width / 2,
                                    r = f,
                                    a = i - r;
                                return a < e.left ? r = i - e.left : a + n > e.right && (r -= e.right - (a + n)), {
                                    xOffset: r,
                                    width: n
                                }
                            }(e, t.contentRef.getBoundingClientRect()) : null
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillUnmount = function() {
                        clearTimeout(this.hoverTimeout)
                    }, t.prototype.render = function() {
                        var e = this.getPosition(),
                            t = g / 2 - f,
                            n = f,
                            i = g;
                        e && (t = (i = e.width) / 2 - e.xOffset, n = e.xOffset);
                        var r = this.props.content.info.imageURL ? s.createElement("img", {
                            alt: Object(p.d)("In Game Content", "FuelBar-Content"),
                            src: this.props.content.info.imageURL,
                            className: "fuel-in-game-content__preview"
                        }) : null;
                        return s.createElement(b.Qa, {
                            position: b.kb.Relative,
                            "data-target": "fuel-in-game-content"
                        }, s.createElement("div", {
                            onMouseEnter: this.onMouseEnter,
                            onMouseLeave: this.onMouseLeave,
                            ref: this.setContentRefDelegate
                        }, s.createElement(b.u, {
                            show: this.state.hovering,
                            direction: b.v.TopCenter,
                            offsetX: t + "px",
                            tailOffset: n
                        }, this.renderBalloonContent(this.props.content, i)), r))
                    }, t
                }(s.Component)),
                y = n("y2lK"),
                C = n("s/8O"),
                S = n("U697"),
                E = n("xm8T"),
                N = (n("wsgK"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderSeparator = function(e) {
                            return s.createElement(b.Fb, {
                                borderRight: !0,
                                padding: {
                                    left: .5
                                },
                                margin: {
                                    right: 1
                                },
                                className: "fuel-bar__separator",
                                key: e
                            })
                        }, t.onBuyNowClick = function() {
                            var e = t.props.user,
                                n = t.props.game.product;
                            n && Object(y.a)(n.info, e, e && e.lastBroadcast && e.lastBroadcast.game, h.PageviewLocation.Channel, t.onPopupClose)
                        }, t.onBuyInGameContentNow = function(e) {
                            var n = t.props.user;
                            Object(y.a)(e.info, n, n && n.lastBroadcast && n.lastBroadcast.game, h.PageviewLocation.Channel, t.onPopupClose)
                        }, t.onClaimPrimeOffer = function(e) {
                            t.props.claimPrimeOffer && t.props.claimPrimeOffer(Object(m.a)({
                                offerID: e
                            })).then(function(e) {
                                t.props.refetchData && t.props.refetchData()
                            })
                        }, t.onPopupClose = function() {
                            t.props.refetchData && t.props.refetchData()
                        }, t.setRefDelegate = function(e) {
                            return t.ref = e
                        }, t.getRect = function() {
                            return t.ref ? t.ref.getBoundingClientRect() : null
                        }, t.renderNewWindowLink = function(e) {
                            return s.createElement("a", {
                                href: e.href,
                                target: "_blank"
                            }, e.children)
                        }, t.renderRevenueShareLink = function(e) {
                            return s.createElement("a", {
                                href: "https://help.twitch.tv/customer/portal/articles/2771293-how-to-buy-games-on-twitch#partners",
                                "data-test-selector": "fuel-shared-revenue-link",
                                target: "_blank"
                            }, e)
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this,
                            t = this.props.game,
                            n = t && t.product;
                        n && (Object(C.c)(this.trackers.product), n.inGameContent.forEach(function(t) {
                            if (t) {
                                var n = e.trackers.igc[t.id];
                                Object(C.c)(n)
                            }
                        }))
                    }, t.prototype.render = function() {
                        var e = this,
                            t = this.props.user,
                            n = this.props.game,
                            i = n && n.product,
                            r = this.props.currentUser && this.props.currentUser.hasPrime || !1,
                            a = this.props.requestInfo && this.props.requestInfo.countryCode;
                        if (!t || !i || !n) return null;
                        var o = i.inGameContent.slice().sort(S.a);
                        this.trackers || (this.trackers = Object(C.a)(i, n, t));
                        var l = o.map(function(t) {
                                return s.createElement(b.Ya, {
                                    margin: {
                                        right: .5
                                    },
                                    key: "InGameContent:" + t.id
                                }, s.createElement(k, {
                                    content: t,
                                    game: n.name,
                                    gameID: n.id,
                                    channelLogin: e.props.channelLogin,
                                    onBuyNow: e.onBuyInGameContentNow,
                                    userHasPrime: r,
                                    countryCode: a,
                                    getParentRect: e.getRect
                                }))
                            }),
                            c = i.supportedPlatforms.map(function(e) {
                                return s.createElement("img", {
                                    alt: e.name,
                                    src: e.iconURL,
                                    key: "platform:" + e.name
                                })
                            }),
                            m = null;
                        if (t.settings && t.settings.isCommerceRevShareEnabled) {
                            var h = Object(p.d)("Purchase revenue <x:link>will be shared</x:link> with {channel}", {
                                channel: s.createElement(b.W, {
                                    key: "fuel-bar-bold",
                                    bold: !0,
                                    type: b.Wb.Span
                                }, t.displayName),
                                "x:link": this.renderRevenueShareLink
                            }, "FuelBar");
                            m = s.createElement(b.W, {
                                "data-test-selector": "fuel-shared-revenue",
                                key: "fuel-shared-revenue"
                            }, h)
                        }
                        var g = {
                                info: i.info,
                                crates: i.info.crateASINs,
                                externalAcquisition: i.acquisition,
                                countryCode: a,
                                userHasPrime: r
                            },
                            f = i.esrbRating ? s.createElement("img", {
                                alt: Object(p.d)("Maturity Rating", "FuelBar"),
                                src: i.esrbRating.iconURL,
                                className: "fuel-bar__rating"
                            }) : null,
                            y = i.launchPlatform ? s.createElement(u, {
                                source: i.launchPlatform.description,
                                renderers: {
                                    Link: this.renderNewWindowLink
                                }
                            }) : null,
                            E = d("fuel-bar", this.props.className);
                        return s.createElement(b.Fb, {
                            className: E,
                            border: !0,
                            borderRadius: b.x.Large,
                            padding: 1,
                            flexDirection: b.Aa.Row,
                            display: b.X.Flex,
                            justifyContent: b.Xa.Between,
                            alignItems: b.f.Center,
                            refDelegate: this.setRefDelegate
                        }, s.createElement(b.Ya, {
                            display: b.X.Flex,
                            flexDirection: b.Aa.Row,
                            alignItems: b.f.Center
                        }, s.createElement(v.a, {
                            onClickBuyNow: this.onBuyNowClick,
                            onClickClaimPrimeOffer: this.onClaimPrimeOffer,
                            options: g
                        }), this.renderSeparator("seperator:1"), l, l.length > 0 && this.renderSeparator("seperator:2"), f, c, y), m)
                    }, t
                }(s.Component)),
                O = Object(c.a)(E, {
                    name: "claimPrimeOffer"
                })(N),
                _ = n("EsbA"),
                w = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.refetchData = function() {
                            t.props.data && t.props.data.refetch && t.props.data.refetch()
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        if (!this.props.data || this.props.data.loading || this.props.data.error) return null;
                        var e = this.props.data.user;
                        if (!e) return null;
                        var t = e.lastBroadcast && e.lastBroadcast.game,
                            n = t && t.product;
                        return t && n ? s.createElement(O, {
                            user: e,
                            game: t,
                            currentUser: this.props.data.currentUser,
                            requestInfo: this.props.data.requestInfo,
                            channelLogin: this.props.channelLogin,
                            refetchData: this.refetchData,
                            className: this.props.className
                        }) : null
                    }, t
                }(s.Component),
                D = Object(l.compose)(Object(c.a)(_, {
                    skip: function(e) {
                        return !e.firstPageLoaded
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    }
                }))(w);
            var I = Object(i.connect)(function(e) {
                return {
                    firstPageLoaded: !!e.session.firstPageLoaded,
                    currentUser: Object(r.e)(e),
                    theme: Object(a.a)(e)
                }
            })(D);
            n.d(t, "a", function() {
                return I
            })
        },
        FS60: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ChatInput_SendCheer"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SendCheerInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "sendCheer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "currentUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bitsBalance"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "validationError"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "message"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "messageContent"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "text"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "fragments"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "text"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "AutoMod"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "topics"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [{
                                                                                    kind: "Field",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "type"
                                                                                    },
                                                                                    arguments: [],
                                                                                    directives: []
                                                                                }, {
                                                                                    kind: "Field",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "weight"
                                                                                    },
                                                                                    arguments: [],
                                                                                    directives: []
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "CheermoteToken"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "bitsAmount"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "prefix"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "tier"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "Emote"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: {
                                                                                kind: "Name",
                                                                                value: "emoteID"
                                                                            },
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "setID"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "token"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "User"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "login"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "displayName"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 377
                }
            };
            n.loc.source = {
                body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\nsendCheer(input: $input) {\nid\ncurrentUser {\nid\nbitsBalance\n}\nvalidationError {\ncode\nmessage\nmessageContent {\ntext\nfragments {\ntext\ncontent {\n... on AutoMod {\ntopics {\ntype\nweight\n}\n}\n... on CheermoteToken {\nbitsAmount\nprefix\ntier\n}\n... on Emote {\nemoteID: id\nsetID\ntoken\n}\n... on User {\nid\nlogin\ndisplayName\n}\n}\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        Fj9y: function(e, t, n) {},
        GCGb: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "b", function() {
                return d
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("cZKs"),
                s = n("Ue10"),
                l = (n("gPTj"), "confirm-button"),
                c = "deny-button",
                d = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(s.Fb, {
                            className: "twp-modal",
                            background: s.r.Base,
                            color: s.O.Alt,
                            padding: 3
                        }, r.createElement("h3", null, this.props.title), r.createElement(s.Ya, {
                            className: "twp-modal__message",
                            margin: {
                                bottom: 2
                            }
                        }, this.props.children), r.createElement(s.Ya, {
                            display: s.X.Flex,
                            justifyContent: s.Xa.End
                        }, r.createElement(s.Ya, {
                            margin: {
                                right: 1
                            }
                        }, r.createElement(s.z, {
                            onClick: this.props.onDenyClick,
                            type: s.F.Hollow,
                            "data-test-selector": c
                        }, Object(a.d)("Cancel", "ConfirmationModal"))), r.createElement(s.z, {
                            onClick: this.props.onConfirmClick,
                            type: s.F.Alert,
                            disabled: this.props.isConfirmDisabled,
                            "data-test-selector": l
                        }, Object(a.d)("Ok", "ConfirmationModal"))), r.createElement(o.a, {
                            closeOnBackdropClick: !0
                        }))
                    }, t
                }(r.Component)
        },
        GEnX: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("XXm5"),
                s = n("Ue10"),
                l = n("fCiU"),
                c = (n("sPFP"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onReplyClickHandler = function() {
                            t.props.replyCommentContext ? t.props.onReplyClick(Object(l.b)(t.props.replyCommentContext.author)) : t.props.onReplyClick()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = Object(a.d)("Reply", "DashboardModerationReplyButton");
                        return this.props.context === o.c ? r.createElement("button", {
                            className: "video-chat-reply-button",
                            onClick: this.onReplyClickHandler,
                            "data-test-selector": "parent-reply-button"
                        }, r.createElement(s.Ya, {
                            display: s.X.Flex
                        }, r.createElement(s.Ya, {
                            className: "video-chat-reply-button__icon",
                            display: s.X.Flex,
                            padding: {
                                right: .5
                            }
                        }, r.createElement(s.tb, {
                            width: 13,
                            height: 13,
                            asset: s.ub.Conversations,
                            type: s.vb.Inherit
                        })), r.createElement(s.W, {
                            align: s.gc.Middle,
                            type: s.Wb.Span
                        }, e))) : this.props.context === o.a ? r.createElement(s.A, {
                            ariaLabel: e,
                            type: s.C.Hollow,
                            icon: s.ub.Conversations,
                            onClick: this.onReplyClickHandler,
                            "data-test-selector": "moderation-reply-button",
                            "data-a-selector": "qa-vod-chat-reply-button"
                        }) : r.createElement(s.Fb, {
                            color: s.O.Link,
                            display: s.X.Inline,
                            margin: {
                                left: 1
                            }
                        }, r.createElement("button", {
                            onClick: this.onReplyClickHandler,
                            "data-test-selector": "reply-reply-button"
                        }, r.createElement(s.W, {
                            type: s.Wb.Span
                        }, e)))
                    }, t
                }(r.Component))
        },
        GFmA: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("5zf8"),
                s = n("Ue10"),
                l = (n("Fj9y"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onBalloonItemClick = function() {
                            t.props.onBalloonItemClick && t.props.onBalloonItemClick(t.props.videoID, t.props.index)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = {
                            src: this.props.gameChange.thumbnailUrl,
                            alt: this.props.gameChange.label
                        };
                        return r.createElement(s.Ya, {
                            className: "preview-card-game-balloon-row",
                            display: s.X.Flex,
                            flexWrap: s.Ba.NoWrap
                        }, r.createElement(s.Va, {
                            linkTo: this.props.gameChange.linkTo,
                            onClick: this.onBalloonItemClick
                        }, r.createElement(s.Ya, {
                            display: s.X.Flex,
                            flexDirection: s.Aa.Row,
                            padding: .5
                        }, r.createElement(s.Fb, {
                            className: "preview-card-game-balloon-row__image-wrapper",
                            flexGrow: 0,
                            flexShrink: 0,
                            borderRadius: s.x.Small,
                            overflow: s.db.Hidden,
                            position: s.kb.Relative
                        }, r.createElement(s.o, {
                            align: s.d.Center,
                            ratio: s.p.BoxArt
                        }, r.createElement(s.S, i.__assign({}, e))), r.createElement(s.Fb, {
                            className: "preview-card-game-balloon-row__image-play-overlay",
                            alignItems: s.f.Center,
                            background: s.r.Overlay,
                            color: s.O.Overlay,
                            display: s.X.Flex,
                            justifyContent: s.Xa.Center,
                            position: s.kb.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, r.createElement(s.tb, {
                            asset: s.ub.Play,
                            type: s.vb.Inherit
                        }))), r.createElement(s.Ya, {
                            display: s.X.Flex,
                            flexDirection: s.Aa.Column,
                            flexGrow: 1,
                            flexShrink: 1,
                            padding: {
                                left: 1,
                                top: 1
                            }
                        }, r.createElement(s.Ya, {
                            className: "preview-card-game-balloon-row__info-label"
                        }, r.createElement(s.W, null, this.props.gameChange.label)), r.createElement(s.Ya, {
                            className: "preview-card-game-balloon-row__info-duration"
                        }, r.createElement(s.W, null, Object(o.b)(this.props.gameChange.duration)))))))
                    }, t
                }(r.Component)),
                c = n("0INk"),
                d = n("8/mp"),
                u = n("eJ65"),
                p = (n("vDRX"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onBalloonToggle = function(e) {
                            t.props.onBalloonClick && !e && t.props.onBalloonClick(t.props.videoID)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        if (this.props.videoGameChanges.length > 0) {
                            var e = this.props.videoGameChanges.map(function(e) {
                                return e.label
                            });
                            Object(c.a)(e)
                        }
                    }, t.prototype.render = function() {
                        return r.createElement(s.Ya, {
                            className: "preview-card-game-balloon",
                            display: s.X.InlineBlock,
                            position: s.kb.Relative,
                            margin: {
                                top: .5
                            }
                        }, r.createElement(u.a, {
                            key: "game-balloon",
                            display: s.X.Inline,
                            onToggle: this.onBalloonToggle
                        }, r.createElement(s.z, {
                            type: s.F.Hollow,
                            icon: s.ub.ViewerList
                        }, r.createElement(s.Ya, {
                            display: s.X.Flex,
                            flexDirection: s.Aa.Row
                        }, r.createElement(s.W, null, Object(a.d)("Chapters", "PreviewCardGameBalloon")), r.createElement(s.Ya, {
                            margin: {
                                left: 1
                            }
                        }, r.createElement(s.hb, {
                            label: this.props.videoGameChanges.length.toString()
                        })))), r.createElement(s.u, {
                            direction: s.v.TopLeft,
                            size: s.w.Medium
                        }, r.createElement(s.Ya, {
                            overflow: s.db.Hidden,
                            display: s.X.Flex,
                            flexDirection: s.Aa.Column,
                            flexWrap: s.Ba.NoWrap
                        }, r.createElement(s.Ya, {
                            padding: .5,
                            flexShrink: 0,
                            flexGrow: 0
                        }, r.createElement(s.W, {
                            color: s.O.Alt2
                        }, Object(a.d)("Chapter Select", "PreviewCardGameBalloon"))), r.createElement(s.Ya, {
                            className: "preview-card-game-balloon__content",
                            display: s.X.Flex,
                            flexDirection: s.Aa.Column,
                            flexGrow: 1,
                            flexShrink: 1,
                            flexWrap: s.Ba.NoWrap
                        }, r.createElement(d.b, null, r.createElement(s.Ya, {
                            display: s.X.Flex,
                            flexDirection: s.Aa.Column,
                            flexWrap: s.Ba.NoWrap,
                            fullHeight: !0
                        }, this.renderAdditionalGameList(this.props.videoGameChanges))))))))
                    }, t.prototype.renderAdditionalGameList = function(e) {
                        var t = this;
                        return e.map(function(e, n) {
                            return r.createElement(l, {
                                index: n,
                                gameChange: e,
                                key: t.props.videoID + "-" + e.offset,
                                videoID: t.props.videoID,
                                onBalloonItemClick: t.props.onBalloonItemClick
                            })
                        })
                    }, t
                }(r.Component)),
                m = n("kduP"),
                h = n("2xye"),
                g = function(e) {
                    return r.createElement(s.Ya, null, r.createElement(s.W, {
                        color: s.O.Alt,
                        ellipsis: !0
                    }, e.videoGameChanges.map(function(t, n, i) {
                        return r.createElement(s.Qa, {
                            key: n
                        }, r.createElement(s.U, {
                            to: {
                                pathname: Object(m.c)(t.label),
                                state: {
                                    content: h.PageviewContent.TextLink,
                                    medium: e.trackingContext && e.trackingContext.medium
                                }
                            },
                            type: s.V.Inherit
                        }, t.label, f(n, i.length - 1) ? null : ", "))
                    })))
                },
                f = function(e, t) {
                    return e === t
                },
                v = n("N0BP"),
                b = (n("XA5B"), function(e) {
                    var t = r.createElement(s.Fb, {
                        className: "preview-card-iconic-image__wrapper",
                        borderRadius: s.x.Small,
                        overflow: s.db.Hidden
                    }, r.createElement(s.o, {
                        ratio: e.aspect || s.p.BoxArt,
                        align: s.d.Center
                    }, r.createElement(s.S, i.__assign({}, e.imageProps))));
                    return e.linkTo && (t = r.createElement(s.U, i.__assign({}, Object(v.a)(e), {
                        to: e.linkTo,
                        onClick: e.onClick
                    }), t)), t
                });
            b.displayName = "PreviewCardIconicImage";
            var k, y = n("TSYQ"),
                C = (n("cRsL"), function(e) {
                    var t = y("preview-card-top-bar", {
                        "preview-card-top-bar--gray": !e.selected,
                        "preview-card-top-bar--green": e.selected
                    });
                    return r.createElement(s.Ya, {
                        display: s.X.Flex,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        justifyContent: s.Xa.Between,
                        alignItems: s.f.Center,
                        className: t
                    }, r.createElement(s.Ya, {
                        display: s.X.InlineFlex
                    }, r.createElement(s.W, {
                        "data-test-selector": "top-bar-title-selector",
                        color: s.O.Overlay,
                        bold: !0,
                        transform: s.Vb.Uppercase
                    }, e.title)), e.subTitle && r.createElement(s.Ya, {
                        display: s.X.InlineFlex
                    }, r.createElement(s.W, {
                        "data-test-selector": "top-bar-sub-title-selector",
                        color: s.O.Overlay
                    }, e.subTitle)))
                }),
                S = (n("m493"), function(e) {
                    var t = .5,
                        n = null;
                    "number" == typeof e.progressBarPercent && e.progressBarPercent > 0 && (n = r.createElement(s.Ya, {
                        position: s.kb.Absolute,
                        attachBottom: !0,
                        fullWidth: !0
                    }, r.createElement(s.nb, {
                        borderRadius: s.x.None,
                        size: s.pb.Small,
                        value: e.progressBarPercent,
                        mask: !0
                    })), t = 1);
                    var a = 1,
                        o = null;
                    return e.topBar && (o = r.createElement(s.Ya, {
                        position: s.kb.Absolute,
                        attachTop: !0,
                        fullWidth: !0
                    }, r.createElement(C, i.__assign({}, e.topBar))), a = 3), r.createElement(s.Ya, {
                        position: s.kb.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        fullWidth: !0,
                        fullHeight: !0,
                        className: "preview-card-overlay"
                    }, o, n, r.createElement(s.Ya, {
                        position: s.kb.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        margin: e.topBar ? {
                            x: 1,
                            y: a
                        } : 1,
                        "data-test-selector": "top-left-selector"
                    }, e.topLeft), r.createElement(s.Ya, {
                        position: s.kb.Absolute,
                        attachTop: !0,
                        attachRight: !0,
                        margin: e.topBar ? {
                            x: 1,
                            y: a
                        } : 1,
                        "data-test-selector": "top-right-selector"
                    }, e.topRight), r.createElement(s.Ya, {
                        position: s.kb.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        margin: {
                            x: .5,
                            y: t
                        },
                        "data-test-selector": "bottom-left-selector"
                    }, e.bottomLeft), r.createElement(s.Ya, {
                        position: s.kb.Absolute,
                        attachBottom: !0,
                        attachRight: !0,
                        margin: {
                            x: .5,
                            y: t
                        },
                        "data-test-selector": "bottom-right-selector"
                    }, e.bottomRight))
                }),
                E = (n("kF1+"), function(e) {
                    var t = e.icon && r.createElement(s.Ya, {
                        display: s.X.Flex,
                        margin: {
                            right: .5
                        }
                    }, r.createElement(s.tb, {
                        asset: e.icon,
                        width: 10,
                        height: 10
                    }));
                    return e.withBackground ? r.createElement(s.Fb, {
                        alignItems: s.f.Center,
                        background: s.r.Overlay,
                        borderRadius: s.x.Small,
                        className: "preview-card-stat",
                        color: s.O.Overlay,
                        display: s.X.Flex,
                        fontSize: s.Ca.Size6,
                        justifyContent: s.Xa.Center
                    }, t, r.createElement(s.W, null, e.value)) : r.createElement(s.Fb, {
                        className: "preview-card-stat",
                        color: s.O.Overlay,
                        display: s.X.Flex,
                        padding: {
                            x: .5
                        }
                    }, t, r.createElement(s.W, null, e.value))
                }),
                N = n("GnwI"),
                O = (n("B3R5"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            didAnimatedPreviewLoad: !1,
                            didAnimatedPreviewFailToLoad: !1,
                            isHovered: !1
                        }, t.onImageError = function() {
                            t.props.latencyTracking.reportInteractive()
                        }, t.onImageLoad = function() {
                            t.props.latencyTracking.reportInteractive()
                        }, t.onAnimatedImageLoad = function(e) {
                            void 0 !== t.props.animatedImageProps && e.currentTarget.src === t.props.animatedImageProps.src && t.setState({
                                didAnimatedPreviewLoad: !0
                            })
                        }, t.onAnimatedImageLoadError = function(e) {
                            void 0 !== t.props.animatedImageProps && e.currentTarget.src === t.props.animatedImageProps.src && t.setState({
                                didAnimatedPreviewFailToLoad: !0
                            })
                        }, t.handleFocus = function() {
                            t.setState({
                                isHovered: !0
                            })
                        }, t.handleBlur = function() {
                            t.setState({
                                isHovered: !1
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.trackImageLatency || this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = {};
                        return this.props.animatedImageProps && (e = {
                            onMouseEnter: this.handleFocus,
                            onMouseLeave: this.handleBlur,
                            onFocus: this.handleFocus,
                            onBlur: this.handleBlur
                        }), r.createElement("div", i.__assign({}, e, {
                            onClick: this.props.onClick
                        }), r.createElement(s.Fb, {
                            background: s.r.Alt2,
                            overflow: s.db.Hidden
                        }, r.createElement(s.o, {
                            ratio: this.props.aspectRatio
                        }, this.renderImage())))
                    }, t.prototype.renderImage = function() {
                        var e, t = !(!this.props.animatedImageProps || !this.state.isHovered || this.state.didAnimatedPreviewFailToLoad),
                            n = y("preview-card-thumbnail__image", ((e = {})["preview-card-thumbnail__image--animated"] = this.state.isHovered && this.state.didAnimatedPreviewLoad, e));
                        return t && void 0 !== this.props.animatedImageProps ? r.createElement("div", {
                            className: n
                        }, r.createElement(s.S, i.__assign({}, this.props.animatedImageProps, {
                            onLoad: this.onAnimatedImageLoad,
                            onError: this.onAnimatedImageLoadError,
                            "data-test-selector": "preview-card-thumbnail__image-selector"
                        }))) : r.createElement("div", {
                            className: n
                        }, r.createElement(s.S, i.__assign({}, this.props.staticImageProps, {
                            onLoad: this.onImageLoad,
                            onError: this.onImageError,
                            "data-test-selector": "preview-card-thumbnail__image-selector"
                        })))
                    }, t
                }(r.Component)),
                _ = Object(N.b)("PreviewCardThumbnail")(O),
                w = (n("80G/"), function(e) {
                    var t = null;
                    return e.subtitles && e.subtitles.length > 0 && (t = e.subtitles.map(function(e, t) {
                        return r.createElement(s.Ya, {
                            key: t,
                            "data-test-selector": "preview-card-titles__subtitle"
                        }, r.createElement(s.W, {
                            color: s.O.Alt,
                            ellipsis: !0
                        }, "string" == typeof e ? e : r.createElement(s.U, {
                            "data-a-target": e.automationSelector,
                            to: e.linkTo,
                            onClick: e.onClick,
                            type: s.V.Inherit
                        }, e.text)))
                    })), r.createElement("div", null, r.createElement(s.U, i.__assign({}, Object(v.a)(e), {
                        to: e.linkTo,
                        onClick: e.onClick,
                        type: s.V.Inherit,
                        "data-test-selector": "preview-card-titles__primary-link"
                    }), r.createElement(s.W, {
                        type: s.Wb.H3,
                        fontSize: s.Ca.Size5,
                        lines: 1,
                        bold: !0,
                        ellipsis: !0
                    }, e.title)), r.createElement(s.Ya, {
                        className: "preview-card-titles__subtitle-wrapper"
                    }, t))
                }),
                D = n("H1ft"),
                I = n("ZbA5"),
                T = n("QVaV"),
                M = n("hyVY"),
                R = n("MXoD"),
                L = n("0LAi");
            ! function(e) {
                e.LockSelector = "video-lock", e.UpsellSelector = "upsell"
            }(k || (k = {}));
            var F, j, x = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.restriction || !this.props.restriction.productName || !this.props.restriction.title) return null;
                    var e = Object(a.d)("Get It Now", "VideoPreviewCardRestriction"),
                        t = this.props.restriction.canViewRestricted,
                        n = t ? Object(a.d)("unlocked", "VideoPreviewCardRestriction") : Object(a.d)("locked", "VideoPreviewCardRestriction"),
                        i = t ? s.ub.Unlock : s.ub.Lock;
                    return r.createElement(s.Ya, null, !t && r.createElement(s.Fb, {
                        background: s.r.Overlay,
                        className: "video-preview-card-restriction",
                        color: s.O.Overlay,
                        display: s.X.Flex,
                        position: s.kb.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        zIndex: s.jc.Default,
                        padding: {
                            x: 5
                        },
                        textAlign: s.Sb.Center,
                        fullWidth: !0,
                        fullHeight: !0,
                        alignItems: s.f.Center,
                        alignContent: s.e.Center,
                        flexDirection: s.Aa.Column,
                        flexWrap: s.Ba.Wrap,
                        justifyContent: s.Xa.Center,
                        "data-test-selector": k.LockSelector
                    }, r.createElement(s.Qa, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(s.W, {
                        color: s.O.Overlay,
                        fontSize: s.Ca.Size5,
                        "data-test-selector": k.UpsellSelector
                    }, Object(a.d)("View with {title}", {
                        title: this.props.restriction.title
                    }, "VideoPreviewCardRestriction"))), r.createElement(s.Ya, null, r.createElement(s.z, {
                        type: s.F.Hollow,
                        ariaLabel: e,
                        targetBlank: !0,
                        disabled: "" === this.props.restriction.upsellLinkTo,
                        linkTo: this.props.restriction.upsellLinkTo,
                        overlay: !0
                    }, e))), r.createElement(s.Fb, {
                        display: s.X.InlineFlex,
                        position: s.kb.Absolute,
                        attachTop: this.props.attachTop,
                        attachBottom: !this.props.attachTop,
                        attachRight: !0,
                        margin: .5,
                        zIndex: s.jc.Default,
                        fontSize: s.Ca.Size6,
                        background: s.r.Overlay,
                        borderRadius: s.x.Medium,
                        color: s.O.Overlay
                    }, r.createElement(s.Zb, {
                        direction: this.props.attachTop ? s.bc.Bottom : s.bc.Top,
                        align: s.ac.Right,
                        label: n
                    }, r.createElement(s.tb, {
                        asset: i,
                        height: 20,
                        width: 20
                    }))))
                }, t
            }(r.PureComponent);
            n("5NSO");

            function A(e) {
                return void 0 !== e.watchedProgressPercent
            }

            function U(e) {
                return void 0 !== e.clipCreatedByChannelLogin
            }! function(e) {
                e.Avatar = "preview-card-avatar", e.BoxArt = "preview-card-box-art"
            }(F || (F = {})),
            function(e) {
                e[e.SingleGameList = 1] = "SingleGameList", e[e.SingleChannelList = 2] = "SingleChannelList", e[e.MixedGameAndChannelList = 3] = "MixedGameAndChannelList"
            }(j || (j = {}));
            var P = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.getTrackingContext = function(e) {
                            var n = t.props.trackingContext;
                            return {
                                content: n && n.content ? n.content : e,
                                medium: n && n.medium
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("div", i.__assign({
                            className: "preview-card"
                        }, Object(v.a)(this.props)), r.createElement(s.Fb, {
                            position: s.kb.Relative,
                            borderRadius: s.x.Medium,
                            overflow: s.db.Hidden
                        }, this.renderVODRestrictionOverlay(), r.createElement(s.U, {
                            to: Object(R.a)(this.getTrackingContext(h.PageviewContent.VideoThumbnail), this.props.linkTo),
                            onClick: this.props.onThumbnailClick || this.props.onClick,
                            "data-a-target": "preview-card-image-link"
                        }, this.props.thumbnailImageProps && r.createElement(_, {
                            staticImageProps: this.props.thumbnailImageProps,
                            animatedImageProps: A(this.props) && this.props.animatedImageProps || void 0,
                            trackImageLatency: this.props.trackImageLatency
                        }), this.renderOverlay())), r.createElement(s.Ya, {
                            display: s.X.Flex,
                            flexWrap: s.Ba.NoWrap,
                            margin: {
                                top: 1
                            }
                        }, r.createElement(s.Ya, {
                            flexGrow: 0,
                            flexShrink: 0
                        }, this.renderIconicImage()), r.createElement(s.Ya, {
                            className: "preview-card__titles-wrapper",
                            flexGrow: 1,
                            flexShrink: 1,
                            fullWidth: !0
                        }, this.renderTitles(), this.renderTags()), this.props.contextualCardActionProps && r.createElement(s.Ya, {
                            flexGrow: 0,
                            flexShrink: 0
                        }, r.createElement(this.props.contextualCardActionProps.component, i.__assign({}, this.props.contextualCardActionProps.props)))))
                    }, t.prototype.renderOverlay = function() {
                        return function(e) {
                            return void 0 !== e.streamType
                        }(this.props) ? r.createElement(S, {
                            topLeft: r.createElement(I.a, {
                                type: this.props.streamType,
                                hosting: !!this.props.hostedByChannelLogin
                            }),
                            topRight: void 0,
                            bottomLeft: r.createElement(E, {
                                value: Object(a.d)("{viewerCount, plural, one {# viewer} other {# viewers}}", {
                                    viewerCount: this.props.currentViewerCount
                                }, "VideoPreviewCard")
                            }),
                            bottomRight: void 0
                        }) : A(this.props) ? r.createElement(S, {
                            topLeft: void 0 !== this.props.durationInSeconds && r.createElement(E, {
                                value: Object(M.b)(this.props.durationInSeconds),
                                icon: s.ub.Play,
                                withBackground: !0
                            }),
                            topRight: this.props.listPosition && r.createElement(E, {
                                withBackground: !0,
                                value: this.getListPositionLabel()
                            }),
                            bottomLeft: r.createElement(E, {
                                value: this.getViewCountLabel()
                            }),
                            bottomRight: this.props.datePublished ? r.createElement(E, {
                                value: Object(a.c)(new Date(this.props.datePublished), "medium")
                            }) : null,
                            progressBarPercent: this.props.watchedProgressPercent,
                            topBar: this.props.topBar
                        }) : U(this.props) ? r.createElement(S, {
                            topLeft: r.createElement(E, {
                                value: Object(M.b)(this.props.durationInSeconds),
                                icon: s.ub.Clip,
                                withBackground: !0
                            }),
                            topRight: void 0,
                            bottomLeft: r.createElement(E, {
                                value: this.getViewCountLabel()
                            }),
                            bottomRight: this.props.datePublished ? r.createElement(E, {
                                value: Object(a.c)(new Date(this.props.datePublished), "medium")
                            }) : null
                        }) : void 0
                    }, t.prototype.getListPositionLabel = function() {
                        return A(this.props) && this.props.listPosition ? Object(a.d)("{totalVideos, plural, one {{position} / # video} other {{position} / # videos}}", {
                            position: this.props.listPosition.position,
                            totalVideos: this.props.listPosition.totalVideos
                        }, "VideoPreviewCard") : ""
                    }, t.prototype.getViewCountLabel = function() {
                        return A(this.props) || U(this.props) ? Object(a.d)("{viewerCount, plural, one {# view} other {# views}}", {
                            viewerCount: this.props.viewCount
                        }, "VideoPreviewCard") : ""
                    }, t.prototype.renderIconicImage = function() {
                        return this.props.context === j.SingleChannelList && this.props.gameBoxArtImageProps && this.props.gameBoxArtImageProps.src && this.props.gameTitleLinkTo ? r.createElement(s.Ya, {
                            margin: {
                                right: 1
                            }
                        }, r.createElement(b, {
                            imageProps: this.props.gameBoxArtImageProps,
                            linkTo: Object(R.a)(this.getTrackingContext(h.PageviewContent.GameBoxart), this.props.gameTitleLinkTo),
                            onClick: this.props.onGameTitleClick,
                            aspect: s.p.BoxArt,
                            "data-test-selector": F.BoxArt,
                            "data-a-target": "preview-card-boxart-link"
                        })) : (this.props.context === j.SingleGameList || this.props.context === j.MixedGameAndChannelList) && this.props.channelImageProps && this.props.channelImageProps.src ? r.createElement(s.Ya, {
                            margin: {
                                right: 1
                            }
                        }, r.createElement(b, {
                            imageProps: this.props.channelImageProps,
                            linkTo: Object(R.a)(this.getTrackingContext(h.PageviewContent.UserThumbnail), this.props.channelLinkTo),
                            onClick: this.props.onChannelImageClick || this.props.onChannelLoginClick,
                            aspect: s.p.Aspect1x1,
                            "data-test-selector": F.Avatar
                        })) : void 0
                    }, t.prototype.renderTitles = function() {
                        var e = null,
                            t = [];
                        return this.shouldShowGameBalloon(this.props) || t.push({
                            text: Object(T.a)(this.props.channelLogin, this.props.channelDisplayName, !0),
                            linkTo: Object(R.a)(this.getTrackingContext(h.PageviewContent.ChannelMetadata), this.props.channelLinkTo),
                            onClick: this.props.onChannelLoginClick,
                            automationSelector: "preview-card-channel-link"
                        }), U(this.props) && this.props.clipCreatedByChannelLoginLinkTo ? t.push({
                            text: Object(a.d)("Clipped by {userName}", {
                                userName: this.props.clipCreatedByChannelLogin || ""
                            }, "VideoPreviewCard"),
                            linkTo: this.props.clipCreatedByChannelLoginLinkTo,
                            onClick: this.props.onClipCreatedByChannelLoginClick,
                            automationSelector: "preview-card-clip-curator-link"
                        }) : A(this.props) && this.props.multipleVideoGameMarkersType && this.props.videoGameChanges && this.props.videoGameChanges.length > 0 ? e = this.renderPreviewCardGameInfo(this.props.multipleVideoGameMarkersType, this.props.videoGameChanges, this.props.onVideoGameBalloonClick, this.props.onVideoGameBalloonItemClick) : this.props.context !== j.SingleGameList && this.props.gameTitle && this.props.gameTitleLinkTo && t.push({
                            text: this.props.gameTitle,
                            linkTo: Object(R.a)(this.getTrackingContext(h.PageviewContent.GameMetadata), this.props.gameTitleLinkTo),
                            onClick: this.props.onGameTitleClick,
                            automationSelector: "preview-card-game-link"
                        }), r.createElement(r.Fragment, null, r.createElement(w, {
                            title: this.props.title,
                            onClick: this.props.onVideoTitleClick || this.props.onClick,
                            linkTo: Object(R.a)(this.getTrackingContext(h.PageviewContent.VideoTitle), this.props.linkTo),
                            subtitles: t,
                            "data-a-target": "preview-card-title-link"
                        }), e)
                    }, t.prototype.renderTags = function() {
                        return this.props.tagListProps && 0 !== this.props.tagListProps.tags.length ? r.createElement(s.Ya, {
                            margin: {
                                top: .5
                            }
                        }, r.createElement(L.a, i.__assign({}, this.props.tagListProps, {
                            tagNumberLimit: 3
                        }))) : null
                    }, t.prototype.renderVODRestrictionOverlay = function() {
                        return A(this.props) && this.props.restriction && this.props.restriction.productName && this.props.restriction.title ? r.createElement(x, {
                            restriction: this.props.restriction,
                            attachTop: !0
                        }) : null
                    }, t.prototype.shouldShowGameBalloon = function(e) {
                        return !!A(e) && (!!(e.videoGameChanges && e.videoGameChanges.length > 0) && e.multipleVideoGameMarkersType === D.a.Balloon)
                    }, t.prototype.renderPreviewCardGameInfo = function(e, t, n, i) {
                        switch (e) {
                            case D.a.Balloon:
                                return r.createElement(p, {
                                    videoGameChanges: t,
                                    videoID: t[0].videoID,
                                    onBalloonClick: n,
                                    onBalloonItemClick: i
                                });
                            case D.a.Inline:
                                return r.createElement(g, {
                                    videoGameChanges: t,
                                    trackingContext: this.props.trackingContext
                                });
                            case D.a.None:
                                return null;
                            default:
                                return e
                        }
                    }, t
                }(r.Component),
                B = Object(N.b)("PreviewCard", {
                    autoReportInteractive: !0
                })(P);
            n.d(t, !1, function() {
                return F
            }), n.d(t, "b", function() {
                return j
            }), n.d(t, !1, function() {
                return P
            }), n.d(t, "a", function() {
                return B
            })
        },
        GLn2: function(e, t, n) {},
        GOKC: function(e, t, n) {},
        Gcqi: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsCard_Bits"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "isActiveFirstCheerExperiment"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsUserState"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isActiveFirstCheerExperiment"
                                                }
                                            }
                                        }]
                                    }]
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsUserSettings"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isActiveFirstCheerExperiment"
                                                }
                                            }
                                        }]
                                    }],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "bitsUserSettings"
                                            },
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 316
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/bits/models/bits-user-settings-fragment.gql"\nquery BitsCard_Bits($isActiveFirstCheerExperiment: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nlogin\nbitsUserState @include(if: $isActiveFirstCheerExperiment)\nbitsUserSettings @include(if: $isActiveFirstCheerExperiment) {\n...bitsUserSettings\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("5Czc").definitions)), e.exports = i
        },
        GvwK: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "hostingChannel"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "hosting"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "70"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "language"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 160
                }
            };
            n.loc.source = {
                body: "fragment hostingChannel on User {\nhosting {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\nbroadcastSettings {\nid\nlanguage\n}\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        GxR5: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "e", function() {
                return l
            });
            var i = n("/7QA"),
                r = "https://passport.twitch.tv/forgot_username/new",
                a = "https://help.twitch.tv/customer/portal/emails/new",
                o = "https://help.twitch.tv/customer/portal/articles/1727973-about-site-suspensions-channel-bans-and-dmca",
                s = "https://www.twitch.tv/p/legal/terms-of-service/";

            function l() {
                return "https://passport.twitch.tv/password_resets/new?client_id=" + i.a.authSettings.clientID
            }
        },
        GzyO: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            }), n.d(t, "b", function() {
                return d
            }), n.d(t, "c", function() {
                return u
            }), n.d(t, "d", function() {
                return p
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("OpME"),
                o = "twilight.emote_picker_history",
                s = 24,
                l = [{
                    id: "64138",
                    token: "SeemsGood"
                }, {
                    id: "41",
                    token: "Kreygasm"
                }, {
                    id: "245",
                    token: "ResidentSleeper"
                }, {
                    id: "28087",
                    token: "WutFace"
                }, {
                    id: "86",
                    token: "BibleThump"
                }, {
                    id: "9",
                    token: "<3"
                }, {
                    id: "58765",
                    token: "NotLikeThis"
                }, {
                    id: "81274",
                    token: "VoHiYo"
                }, {
                    id: "88",
                    token: "PogChamp"
                }, {
                    id: "425618",
                    token: "LUL"
                }, {
                    id: "25",
                    token: "Kappa"
                }, {
                    id: "30259",
                    token: "HeyGuys"
                }];

            function c(e) {
                var t = r.m.get(o, {}),
                    n = t[e.id];
                n ? (n.uses++, n.lastUpdatedAt = Date.now()) : t[e.id] = {
                    emote: e,
                    lastUpdatedAt: Date.now(),
                    uses: 1
                }, r.m.set(o, t)
            }

            function d() {
                var e = r.m.get(o, {});
                if (!(Object.keys(e).length >= s)) {
                    for (var t = {}, n = 0; n < l.length; n++) {
                        var a = l[n];
                        e[a.id] || (t[a.id] = {
                            emote: a,
                            lastUpdatedAt: n,
                            uses: 0
                        })
                    }
                    var c = i.__assign({}, t, e);
                    r.m.set(o, c)
                }
            }

            function u(e) {
                var t = r.m.get(o, {}) || {},
                    n = [];
                return Object.keys(t).forEach(function(i) {
                    var r = t[i];
                    void 0 !== r && void 0 !== e[r.emote.token] && n.push(r)
                }), n.sort(function(e, t) {
                    return e.uses > t.uses ? -1 : t.uses > e.uses ? 1 : e.lastUpdatedAt > t.lastUpdatedAt ? -1 : t.lastUpdatedAt > e.lastUpdatedAt ? 1 : 0
                }), Object(a.b)(n.slice(0, 24).map(function(e) {
                    return e.emote
                }))
            }

            function p() {
                var e = r.m.get(o, {}) || {},
                    t = {};
                return Object.keys(e).forEach(function(n) {
                    void 0 !== e[n] && (t[e[n].emote.token] = {
                        count: e[n].uses
                    })
                }), t
            }
        },
        H0r1: function(e, t, n) {},
        H1ft: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return o
            });
            var i, r = n("/7QA"),
                a = n("D7An");
            ! function(e) {
                e.None = "None", e.Inline = "Inline", e.Balloon = "Balloon"
            }(i || (i = {}));
            var o = function() {
                switch (r.p.experiments.getAssignment(a.b.Archer)) {
                    case "balloon":
                        return i.Balloon;
                    case "inline":
                        return i.Inline;
                    case "control":
                    default:
                        return i.None
                }
            }
        },
        H31v: function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return r
                }),
                function(e) {
                    e.Bits = "bits", e.Leaderboard = "bits-leader"
                }(i || (i = {})),
                function(e) {
                    e.Badge = "badge_update", e.Balance = "balance_update", e.FirstPurchase = "first_bits_purchase"
                }(r || (r = {}))
        },
        "H4/V": function(e, t, n) {},
        HGFl: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            });
            var i = n("NAv5"),
                r = {
                    RFC3399: "YYYY-MM-DDTHH:mm:ssZ",
                    timeString: "h:mma"
                };

            function a(e, t) {
                return Object(i.format)(e, t)
            }

            function o(e) {
                return Object(i.parse)(e)
            }

            function s(e, t) {
                var n = e.split(":");
                if (2 !== n.length) throw new Error("invalid time string: " + e);
                var i = parseInt(n[0], 10),
                    r = parseInt(n[1].substring(0, 2), 10),
                    a = n[1].substring(n[1].length - 2);
                if (12 === i && "am" === a && (i = 0), "pm" === a && i < 12 && (i += 12), isNaN(i) || i < 0 || i > 23 || isNaN(r) || r < 0 || r > 59) throw new Error("invalid time string: " + e);
                var o = t || new Date;
                return o.setHours(i, r), o
            }
        },
        HSqT: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "b", function() {
                return s
            });
            var i = n("/7QA"),
                r = [{
                    code: "ar",
                    label: "العربية"
                }, {
                    code: "bg",
                    label: "Български"
                }, {
                    code: "cs",
                    label: "Čeština"
                }, {
                    code: "da",
                    label: "Dansk"
                }, {
                    code: "de",
                    label: "Deutsch"
                }, {
                    code: "el",
                    label: "Ελληνικά"
                }, {
                    code: "en",
                    label: "English"
                }, {
                    code: "es",
                    label: "Español"
                }, {
                    code: "fi",
                    label: "Suomi"
                }, {
                    code: "fr",
                    label: "Français"
                }, {
                    code: "hu",
                    label: "Magyar"
                }, {
                    code: "it",
                    label: "Italiano"
                }, {
                    code: "ja",
                    label: "日本語"
                }, {
                    code: "ko",
                    label: "한국어"
                }, {
                    code: "nl",
                    label: "Nederlands"
                }, {
                    code: "no",
                    label: "Norsk"
                }, {
                    code: "pl",
                    label: "Polski"
                }, {
                    code: "pt",
                    label: "Português"
                }, {
                    code: "ro",
                    label: "Română"
                }, {
                    code: "ru",
                    label: "Русский"
                }, {
                    code: "sk",
                    label: "Slovenčina"
                }, {
                    code: "sv",
                    label: "Svenska"
                }, {
                    code: "th",
                    label: "ภาษาไทย"
                }, {
                    code: "tr",
                    label: "Türkçe"
                }, {
                    code: "vi",
                    label: "Tiếng Việt"
                }, {
                    code: "zh-hk",
                    label: "中文(粵語)"
                }, {
                    code: "zh",
                    label: "中文"
                }];

            function a(e) {
                return void 0 === e && (e = !1), [{
                    code: "asl",
                    label: "American Sign Language"
                }, {
                    code: "other",
                    label: e ? Object(i.d)("Other", "broadcaster-languages") : "Other"
                }]
            }
            var o = new Set(r.concat(a()).map(function(e) {
                return e.code
            }));

            function s() {
                var e = i.p.intl.getLanguageCode(),
                    t = function(t) {
                        return "en" === t.code ? 0 : e && e.startsWith(t.code) ? 1 : 2
                    };
                return r.slice().sort(function(e, n) {
                    var i = t(e),
                        r = t(n);
                    return i !== r ? i - r : i + ":" + e.label < r + ":" + n.label ? -1 : 1
                }).concat(a(!0))
            }
        },
        HXcb: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage_ChannelHeader"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "70"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPartner"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "videos"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "totalCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "followers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "totalCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "follows"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "totalCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "followButtonFragment"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSiteAdmin"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 375
                }
            };
            i.loc.source = {
                body: '#import "twilight/common/queries/follow-button-fragment.gql"\nquery ChannelPage_ChannelHeader($login: String!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\nroles {\nisPartner\n}\nstream {\nid\n}\nvideos {\ntotalCount\n}\nfollowers {\ntotalCount\n}\nfollows {\ntotalCount\n}\ncheer {\nid\n}\n...followButtonFragment\n}\ncurrentUser {\nid\nroles {\nisStaff\nisSiteAdmin\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("V94A").definitions)), e.exports = i
        },
        HjUq: function(e, t, n) {},
        HjbF: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "e", function() {
                return a
            }), n.d(t, "f", function() {
                return o
            }), n.d(t, "c", function() {
                return s
            }), n.d(t, "d", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("DpwM");

            function r(e, t, n, i) {
                return e in t ? {
                    bitsConfig: i,
                    commentID: e,
                    cursor: t[e]
                } : {
                    bitsConfig: i,
                    commentID: e,
                    videoID: n
                }
            }

            function a(e) {
                var t = e.currentVideoTime < e.offsetRange.beginSec,
                    n = e.currentVideoTime > e.offsetRange.endSec;
                return t && l(e.cursor) || n && s(e.cursor)
            }

            function o(e) {
                return s(e.cursor) && function(e) {
                    var t = e.offsetEndTime - e.offsetThreshold;
                    return e.currentVideoTime >= t && e.currentVideoTime <= e.offsetEndTime
                }({
                    currentVideoTime: e.currentVideoTime,
                    offsetEndTime: e.offsetEndTime,
                    offsetThreshold: e.offsetThreshold
                })
            }

            function s(e) {
                return e.future !== i.g
            }

            function l(e) {
                return e.past !== i.g
            }

            function c(e, t) {
                var n = e.id === t.id,
                    i = e.roles.isGlobalMod || e.roles.isSiteAdmin || e.roles.isStaff;
                return !!t.self && t.self.isModerator || i || n
            }
        },
        HzXE: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatRoomBanStatus"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "targetUserID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "chatRoomBanStatus"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "targetUserID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPermanent"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 142
                }
            };
            n.loc.source = {
                body: "query ChatRoomBanStatus($targetUserID: ID! $channelID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $targetUserID) {\nisPermanent\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        IIop: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                r = Object(i.a)("ChatConnection"),
                a = r.withChatServiceProvider,
                o = (0, r.withContext)(function(e) {
                    return {
                        chatConnectionAPI: e.serviceAPI,
                        setChatConnectionAPI: e.setServiceAPI
                    }
                })
        },
        IItH: function(e, t) {},
        IKE4: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "badge"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Badge"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "setID"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "version"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "image1x"
                            },
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "NORMAL"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "image2x"
                            },
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "DOUBLE"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "image4x"
                            },
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "QUADRUPLE"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clickAction"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clickURL"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 170
                }
            };
            n.loc.source = {
                body: "fragment badge on Badge {\nid\nsetID\nversion\ntitle\nimage1x: imageURL(size: NORMAL)\nimage2x: imageURL(size: DOUBLE)\nimage4x: imageURL(size: QUADRUPLE)\nclickAction\nclickURL\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        IRJ5: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/MKj"),
                s = n("/7QA"),
                l = n("gcd7"),
                c = n("yR8l"),
                d = n("5zf8"),
                u = n("DMoW"),
                p = n("2xye"),
                m = n("eAdp"),
                h = n("gMwc"),
                g = n("5Siz"),
                f = n("Y5lD");

            function v() {
                return Object(s.d)("An unexpected error occurred. Try again.", "BookmarkCommandHandler")
            }

            function b() {
                return Object(s.d)("You can only add stream markers during live streams. Try again when the channel is live streaming.", "BookmarkCommandHandler")
            }
            var k = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.bookmark = function(e) {
                        if (void 0 === e && (e = ""), t.props.markersData) return {
                            deferred: t.props.markersData.refetch().then(function() {
                                var n = t.props.markersData,
                                    i = n.user && n.user.stream && n.user.stream.id,
                                    r = n.user && n.user.stream && n.user.stream.createdAt;
                                return i ? t.createBookmarkHelper(i, e, r) : Promise.resolve({
                                    notice: b()
                                })
                            })
                        }
                    }, t.createBookmarkHelper = function(e, n, i) {
                        var r = n.substring(0, g.a).trim();
                        return t.props.createVideoBookmark({
                            variables: {
                                input: {
                                    broadcastID: e,
                                    description: r,
                                    medium: t.props.isPopout ? "popout_chat" : "chat",
                                    platform: p.SpadePlatform.Web
                                }
                            }
                        }).then(function(e) {
                            var t = e.data && e.data.createVideoBookmark;
                            if (t && t.error && t.error.code) switch (t.error.code) {
                                case u.s.ARCHIVES_DISABLED:
                                    return {
                                        notice: Object(s.d)("Past Broadcast storage must be enabled in order to add stream markers. Enable via Channel Settings and try again.", "BookmarkCommandHandler")
                                    };
                                case u.s.BROADCAST_FORMAT_INVALID_PREMIERE:
                                case u.s.BROADCAST_FORMAT_INVALID_RERUN:
                                    return {
                                        notice: Object(s.d)("You can only add stream markers during live streams. Try again when the channel is live streaming and not running a Premiere or Rerun.", "BookmarkCommandHandler")
                                    };
                                case u.s.BROADCASTER_NOT_LIVE:
                                    return {
                                        notice: b()
                                    };
                                case u.s.USER_UNAUTHORIZED:
                                    return {
                                        notice: Object(s.d)("You don't have permission to create stream markers for this channel.", "BookmarkCommandHandler")
                                    };
                                case u.s.INTERNAL_SERVER_ERROR:
                                case u.s.VOD_NOT_READY:
                                default:
                                    return {
                                        notice: v()
                                    }
                            }
                            var n = null === i ? null : Object(d.b)(Object(f.a)(i), d.a.ClockHMS),
                                a = "" !== r;
                            return {
                                notice: n && a ? Object(s.d)('Successfully added a stream marker at {time}: "{description}"', {
                                    description: r,
                                    time: n
                                }, "BookmarkCommandHandler") : n ? Object(s.d)("Successfully added a stream marker at {time}", {
                                    time: n
                                }, "BookmarkCommandHandler") : a ? Object(s.d)('Successfully added a stream marker: "{description}"', {
                                    description: r
                                }, "BookmarkCommandHandler") : Object(s.d)("Successfully added a stream marker", "BookmarkCommandHandler")
                            }
                        }).catch(function() {
                            return {
                                notice: v()
                            }
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.markersData ? r.createElement(l.a, {
                        command: "marker",
                        handler: this.bookmark
                    }) : null
                }, t
            }(r.Component);
            var y = Object(a.compose)(Object(o.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }), Object(c.a)(m, {
                name: "createVideoBookmark"
            }), Object(c.a)(h, {
                name: "markersData",
                skip: function(e) {
                    return !e.firstPageLoaded
                }
            }))(k);
            n.d(t, "a", function() {
                return y
            })
        },
        J6gT: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage_StreamType_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 126
                }
            };
            n.loc.source = {
                body: "query ChannelPage_StreamType_User($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\ndisplayName\nstream {\nid\ntype\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        JGCS: function(e, t, n) {},
        JiJH: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnVIPUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "RevokeVIPInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "revokeVIP"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "revokee"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 126
                }
            };
            n.loc.source = {
                body: "mutation UnVIPUser($input: RevokeVIPInput!){\nrevokeVIP(input: $input) {\nchannel {\nid\n}\nrevokee {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        JoTo: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("f00E"),
                s = n("/IfK"),
                l = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.renderPortal = function(e) {
                            s.b ? s.b.provideContent(e, n.contentID) : a.k.warn("SideNavPageInfoSection must be defined on the SideNav component to manipulate its content.")
                        }, n.removePortal = function() {
                            s.b ? s.b.removeContent() : a.k.warn("SideNavPageInfoSection must be defined on the SideNav component to manipulate its content.")
                        }, n.contentID = Object(o.a)(), n
                    }
                    return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.children ? this.renderPortal(e.children) : this.removePortal()
                    }, t.prototype.componentDidMount = function() {
                        s.b || a.k.warn("SideNavPageInfoSection must be defined on the SideNav component to manipulate its content."), this.props.children && this.renderPortal(this.props.children)
                    }, t.prototype.componentWillUnmount = function() {
                        this.removePortal()
                    }, t.prototype.render = function() {
                        return null
                    }, t
                }(r.Component);
            n.d(t, "a", function() {
                return l
            })
        },
        "Jxh/": function(e, t, n) {
            "use strict";

            function i(e) {
                var t = document.createElement("textarea");
                t.style.position = "fixed", t.style.top = "0", t.style.left = "0", t.style.fontSize = "12pt", t.style.width = "2em", t.style.height = "2em", t.style.padding = "0", t.style.border = "none", t.style.outline = "none", t.style.boxShadow = "none", t.style.background = "transparent", t.value = e, document.body.appendChild(t), t.select();
                var n = !0;
                try {
                    n = document.execCommand("copy")
                } catch (e) {
                    n = !1
                }
                return document.body.removeChild(t), n
            }
            n.d(t, "a", function() {
                return i
            })
        },
        JzSO: function(e, t, n) {},
        KD05: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            });
            var i = function(e) {
                    return "v" + e
                },
                r = function(e) {
                    return e + "s"
                }
        },
        KGti: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "j", function() {
                return u
            }), n.d(t, "c", function() {
                return p
            }), n.d(t, "i", function() {
                return m
            }), n.d(t, "e", function() {
                return h
            }), n.d(t, "g", function() {
                return g
            }), n.d(t, "h", function() {
                return f
            }), n.d(t, "f", function() {
                return v
            }), n.d(t, "b", function() {
                return b
            }), n.d(t, "d", function() {
                return k
            }), n.d(t, "k", function() {
                return y
            }), n.d(t, "l", function() {
                return C
            });
            var i, r = n("mrSG"),
                a = n("XmgI"),
                o = n("p52R"),
                s = n("ZtEv"),
                l = n("a1OF"),
                c = n("aF6k");

            function d(e) {
                return e + "-automod-rejected"
            }

            function u(e, t, n, i) {
                var c = {
                        badges: null,
                        bits: 0,
                        color: "",
                        displayName: "",
                        id: "",
                        userID: n,
                        username: n,
                        userType: o.a.User,
                        emotes: {}
                    },
                    u = Object(l.a)(t, c, a.a, !1);
                return {
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageRejectedPrompt,
                    id: d(e),
                    category: i,
                    rejectedMessage: r.__assign({}, u, {
                        type: s.b.Message,
                        messageType: s.c.Post,
                        id: e
                    })
                }
            }

            function p(e, t, n, i, c) {
                var u = {
                        badges: null,
                        bits: 0,
                        color: "",
                        displayName: "",
                        id: "",
                        userID: n,
                        username: n,
                        userType: o.a.User,
                        emotes: {}
                    },
                    p = Object(l.a)(t, u, a.a, !1);
                return {
                    type: s.b.AutoMod,
                    autoModType: s.a.CheerMessageRejectedPrompt,
                    id: d(e),
                    messageID: e,
                    category: i,
                    targetUserID: c,
                    originalMessage: t,
                    rejectedMessage: r.__assign({}, p, {
                        type: s.b.Message,
                        messageType: s.c.Post,
                        id: e
                    })
                }
            }

            function m() {
                return {
                    id: Object(c.a)("automod-message-rejected"),
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageRejected
                }
            }

            function h() {
                return {
                    id: Object(c.a)("automod-message-allowed"),
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageAllowed
                }
            }

            function g(e) {
                return {
                    id: Object(c.a)("automod-message-denied"),
                    msg_id: e.data.msg_id,
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageModApproved
                }
            }

            function f(e) {
                return {
                    id: Object(c.a)("automod-message-denied"),
                    msg_id: e.data.msg_id,
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageModDenied
                }
            }

            function v() {
                return {
                    id: Object(c.a)("automod-message-denied"),
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageDenied
                }
            }

            function b() {
                return {
                    id: Object(c.a)("automod-cheer-message-denied"),
                    type: s.b.AutoMod,
                    autoModType: s.a.CheerMessageDenied
                }
            }

            function k() {
                return {
                    id: Object(c.a)("automod-cheer-message-timeout"),
                    type: s.b.AutoMod,
                    autoModType: s.a.CheerMessageTimeout
                }
            }

            function y(e, t, n, r) {
                return {
                    id: Object(c.a)("channel-moderation-action"),
                    type: s.b.ModerationAction,
                    moderationActionType: e,
                    level: i.Channel,
                    createdByLogin: t,
                    createdByUserID: n,
                    args: r
                }
            }

            function C(e, t, n, r, a, o, l, d, u) {
                return {
                    id: Object(c.a)("channel-moderation-action"),
                    type: s.b.ModerationAction,
                    moderationActionType: e,
                    level: i.User,
                    createdByLogin: t,
                    createdByUserID: n,
                    targetUserID: r,
                    targetUserLogin: a,
                    duration: o,
                    reason: l,
                    messageBody: d,
                    messageID: u
                }
            }! function(e) {
                e[e.Channel = 0] = "Channel", e[e.User = 1] = "User"
            }(i || (i = {}))
        },
        KYAw: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "b", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("cr+I"),
                a = n("Addw");

            function o(e, t) {
                var n = new URL("https://www.twitch.tv/collections/" + e);
                return t && (n.search = r.stringify(t)), n.toString()
            }

            function s(e, t) {
                var n = new URL("https://www.twitch.tv/videos/" + e);
                return t && (n.search = r.stringify(i.__assign({}, t, {
                    t: "number" == typeof t.t ? Object(a.a)(t.t) : void 0
                }))), n.toString()
            }
        },
        KriR: function(e, t, n) {
            "use strict";
            n.d(t, "g", function() {
                return a
            }), n.d(t, "d", function() {
                return u
            }), n.d(t, "f", function() {
                return o
            }), n.d(t, "e", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "c", function() {
                return d
            });
            var i = n("/7QA"),
                r = n("2xye");

            function a(e) {
                var t = {
                    channel: e.channelLogin,
                    channel_id: e.channelId,
                    payment_type: e.paymentType,
                    payment_flow: e.paymentFlow,
                    quantity: e.quantity,
                    action: e.action,
                    action_detail: e.actionDetail,
                    product_id: e.productId,
                    ticket_price: e.ticketPrice,
                    currency: e.currency,
                    saved_payment: e.savedPayment,
                    is_anonymous: e.isAnonymous,
                    checkout_source: e.trackingContext.source
                };
                e.trackingContext.detail && (t.checkout_source_detail = e.trackingContext.detail), i.o.track(r.SpadeEventType.PaymentFormInteraction, t)
            }
            var o, s, l, c, d, u = function() {
                function e(e) {
                    this.store = {
                        savedPaymentAvailable: null,
                        savedPaymentDisplayed: null
                    }, this.counter = 0, this.config = {
                        allowDuplicateEvents: !(!e || !e.allowDuplicateEvents)
                    }
                }
                return e.prototype.get = function(e) {
                    return this.store[e]
                }, e.prototype.set = function(e) {
                    this.store = Object.assign(this.store, e)
                }, e.prototype.reportEvent = function() {
                    (0 === this.counter || this.config.allowDuplicateEvents) && (this.counter++, function(e) {
                        var t = {
                            saved_payment_available: e.savedPaymentAvailable,
                            saved_payment_displayed: e.savedPaymentDisplayed
                        };
                        i.o.track(r.SpadeEventType.PaymentFormDisplay, t)
                    }(this.store))
                }, e
            }();
            ! function(e) {
                e.Failed = "failed", e.Pending = "pending", e.Success = "success"
            }(o || (o = {})),
            function(e) {
                e.MysteryGifting = "mystery_gifting", e.Gifting = "gifting", e.Personal = "personal"
            }(s || (s = {})),
            function(e) {
                e.RecurlyCreditCard = "recurly_credit_card", e.RecurlyPaypal = "recurly_paypal", e.RecurlyPayWithAmazon = "recurly_pay_with_amazon", e.ZuoraCreditCard = "zuora_credit_card", e.Xsolla = "xsolla"
            }(l || (l = {})),
            function(e) {
                e.VendorLoginClick = "vendor_login_click", e.CompletePurchaseClick = "complete_purchase_click", e.PaypalTokenError = "paypal_token_error", e.RadioButtonClick = "radio_button_click", e.TokenError = "token_error", e.PriceChangeAlert = "price_change_alert", e.UnsupportedCountryAlert = "unsupported_country_alert"
            }(c || (c = {})),
            function(e) {
                e.ChannelSubscribeButton = "channel_subscribe_button_click", e.Direct = "direct_url_link", e.EmotePicker = "emote_picker_click", e.Extension = "extension_click", e.TurboSubscribeButton = "turbo_subscribe_button_click", e.ViewerCard = "viewer_card_click"
            }(d || (d = {}))
        },
        KwB3: function(e, t, n) {
            "use strict";
            n("7NxT");
            var i = n("oJmH"),
                r = n("/MKj"),
                a = n("yR8l"),
                o = n("kRBY"),
                s = n("vSeP"),
                l = n("IIop"),
                c = n("nInp"),
                d = n("2EzP"),
                u = n("GnwI"),
                p = n("26nv"),
                m = n("mrSG"),
                h = n("q1tI"),
                g = n("fvjX"),
                f = n("ZS2+"),
                v = n("/0dD"),
                b = n("Mj6i"),
                k = n("jZLd"),
                y = n("XDQu"),
                C = n("/i69"),
                S = n("IRJ5"),
                E = n("bhOa"),
                N = n("D91L"),
                O = n("PtXu"),
                _ = n("gcd7"),
                w = n("+pBb"),
                D = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.showChatRules = function() {
                            t.props.showChatRules()
                        }, t
                    }
                    return m.__extends(t, e), t.prototype.render = function() {
                        return h.createElement(_.a, {
                            command: "rules",
                            handler: this.showChatRules
                        })
                    }, t
                }(h.Component);
            var I, T, M = Object(r.connect)(null, function(e) {
                    return Object(g.bindActionCreators)({
                        showChatRules: function() {
                            return w.P()
                        }
                    }, e)
                })(D),
                R = n("/7QA"),
                L = n("CpU+"),
                F = n("fKMw"),
                j = n("DMoW"),
                x = n("Ue10"),
                A = n("CA5B");
            ! function(e) {
                e.QUERY_ERROR = "QUERY_ERROR"
            }(I || (I = {})),
            function(e) {
                e.UnVIP = "vip-command-handler_unvip", e.VIP = "vip-command-handler_vip", e.VIPs = "vip-command-handler_vips"
            }(T || (T = {}));
            var U = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.vips = function() {
                            return {
                                deferred: R.p.apollo.client.query({
                                    query: A,
                                    fetchPolicy: "network-only",
                                    variables: {
                                        id: t.props.channelID
                                    }
                                }).then(function(e) {
                                    var n = e.data;
                                    if (!n || !n.user || !n.user.vips) return {
                                        notice: t.getVIPsErrorMessage()
                                    };
                                    if (0 === n.user.vips.edges.length) return {
                                        notice: Object(R.d)("This channel does not have any VIPs.", "VIPCommandHandler")
                                    };
                                    var i = n.user.vips.edges.reduce(function(e, t) {
                                        var n = t.node && t.node.login;
                                        return n && e.push(n), e
                                    }, []).join(", ");
                                    return {
                                        notice: Object(R.d)("VIPs for this channel are: {vips}.", {
                                            vips: i
                                        }, "VIPCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: t.getVIPsErrorMessage()
                                    }
                                })
                            }
                        }, t.unVIPUser = function(e) {
                            var n = e.trim().split(/\s+/),
                                i = t.getLogin(e);
                            return 1 === n.length && i && 0 !== i.length ? {
                                deferred: t.props.unVIPUserMutation(i).then(function(e) {
                                    var n = e.revokeVIP;
                                    if (!n || !n.revokee || !n.revokee.login) return {
                                        notice: t.getUnVIPErrorMessage(I.QUERY_ERROR)
                                    };
                                    var r = n.error,
                                        a = r && r.code;
                                    return a ? {
                                        notice: t.getUnVIPErrorMessage(a, i)
                                    } : {
                                        notice: Object(R.d)("You have removed {login} as a VIP of this channel.", {
                                            login: i
                                        }, "VIPCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: t.getUnVIPErrorMessage(I.QUERY_ERROR)
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(R.d)('Usage: "/unvip [login]" - Revoke VIP status to a user. Use "vips" to list the VIPs of this channel.', "VIPCommandHandler")
                                })
                            }
                        }, t.vipUser = function(e) {
                            var n = t.getLogin(e);
                            return 1 === e.trim().split(/\s+/).length && n && 0 !== n.length ? {
                                deferred: t.props.vipUserMutation(n).then(function(e) {
                                    var i = e.grantVIP;
                                    if (!i || !i.grantee || !i.grantee.login) return {
                                        notice: t.getVIPErrorMessage(I.QUERY_ERROR)
                                    };
                                    var r = i.error,
                                        a = r && r.code;
                                    return a ? {
                                        notice: t.getVIPErrorMessage(a, n)
                                    } : {
                                        notice: Object(R.d)("You have added {login} as a VIP of this channel.", {
                                            login: n
                                        }, "VIPCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: t.getVIPErrorMessage(I.QUERY_ERROR)
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(R.d)('Usage: "/vip [login]" - Grant VIP status to a user. Use "vips" to list the VIPs of this channel.', "VIPCommandHandler")
                                })
                            }
                        }, t
                    }
                    return m.__extends(t, e), t.prototype.render = function() {
                        return h.createElement(x.Ya, {
                            display: x.X.Hide
                        }, h.createElement(_.a, {
                            "data-test-selector": T.UnVIP,
                            command: "unvip",
                            handler: this.unVIPUser
                        }), h.createElement(_.a, {
                            "data-test-selector": T.VIP,
                            command: "vip",
                            handler: this.vipUser
                        }), h.createElement(_.a, {
                            "data-test-selector": T.VIPs,
                            command: "vips",
                            handler: this.vips
                        }))
                    }, t.prototype.getLogin = function(e) {
                        var t = this.props.activeChattersAPI;
                        return t && t.getActiveChatterLoginFromDisplayName(e) || e
                    }, t.prototype.getCommonErrorMessage = function(e, t) {
                        switch (e) {
                            default: return "";
                            case j.B.GRANTEE_NOT_FOUND:
                                    case j.O.REVOKEE_NOT_FOUND:
                                    return Object(R.d)("Invalid username: {login}.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case j.B.FORBIDDEN:
                                    case j.O.FORBIDDEN:
                                    return Object(R.d)("You don't have permission to perform that action.", "VIPCommandHandler")
                        }
                    }, t.prototype.getVIPErrorMessage = function(e, t) {
                        switch (void 0 === t && (t = ""), e) {
                            case j.B.FORBIDDEN:
                            case j.B.GRANTEE_NOT_FOUND:
                                return this.getCommonErrorMessage(e, t);
                            case j.B.GRANTEE_ALREADY_VIP:
                                return Object(R.d)("{login} is already a VIP of this channel.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case j.B.GRANTEE_CHAT_BANNED:
                                return Object(R.d)("{login} is banned in this channel. You must unban this user before granting VIP status.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case j.B.MAX_VIPS_REACHED:
                                return Object(R.d)("Unable to add VIP. Visit the Achievements page on your dashboard to learn how to unlock additional VIP slots.", "VIPCommandHandler");
                            case j.B.VIP_ACHIEVEMENT_INCOMPLETE:
                                return Object(R.d)("Unable to add VIP. Visit the Achievements page on your dashboard to learn how to unlock this feature.", "VIPCommandHandler");
                            case I.QUERY_ERROR:
                            case j.B.CHANNEL_NOT_FOUND:
                            default:
                                return Object(R.d)("Unable to add VIP.", "VIPCommandHandler")
                        }
                    }, t.prototype.getUnVIPErrorMessage = function(e, t) {
                        switch (void 0 === t && (t = ""), e) {
                            case j.O.FORBIDDEN:
                            case j.O.REVOKEE_NOT_FOUND:
                                return this.getCommonErrorMessage(e, t);
                            case j.O.REVOKEE_NOT_VIP:
                                return Object(R.d)("{login} is not a VIP of this channel.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case I.QUERY_ERROR:
                            case j.O.CHANNEL_NOT_FOUND:
                            default:
                                return Object(R.d)("Unable to remove VIP.", "VIPCommandHandler")
                        }
                    }, t.prototype.getVIPsErrorMessage = function() {
                        return Object(R.d)("There was a problem fetching the list of VIPs. Please try again.", "VIPCommandHandler")
                    }, t
                }(h.Component),
                P = Object(g.compose)(Object(L.a)(), Object(F.a)(), s.a)(U),
                B = n("vKai"),
                V = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            show: !0
                        }, t.dismiss = function() {
                            t.setState({
                                show: !1
                            })
                        }, t
                    }
                    return m.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                            show: !0
                        })
                    }, t.prototype.render = function() {
                        return this.state.show ? h.createElement(x.Fb, {
                            attachTop: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            background: x.r.AccentAlt2,
                            color: x.O.Overlay,
                            position: x.kb.Absolute,
                            className: "hosting-notification",
                            padding: {
                                y: .5,
                                left: .5
                            },
                            "data-a-target": "hosting-notification-container"
                        }, h.createElement(x.Ya, {
                            display: x.X.Flex,
                            padding: 1,
                            justifyContent: x.Xa.Between,
                            alignItems: x.f.Center,
                            flexWrap: x.Ba.NoWrap
                        }, h.createElement(x.Ya, {
                            display: x.X.Flex,
                            flexWrap: x.Ba.NoWrap
                        }, h.createElement(x.Ya, {
                            margin: {
                                right: .5
                            },
                            flexShrink: 0
                        }, h.createElement(x.W, null, Object(R.d)("Hosting", "ChatHostingNotification"))), h.createElement(x.Ya, {
                            ellipsis: !0,
                            flexShrink: 1,
                            margin: {
                                right: .5
                            }
                        }, h.createElement(x.W, {
                            type: x.Wb.Strong,
                            "data-test-selector": "hosting-notification__text",
                            "data-a-target": "hosting-notification-channel-name"
                        }, "" + this.props.hostedChannelDisplayName))), h.createElement(x.Ya, {
                            display: x.X.Flex,
                            flexWrap: x.Ba.NoWrap,
                            flexShrink: 0
                        }, h.createElement(x.Ya, {
                            display: x.X.Inline,
                            padding: {
                                right: .5
                            }
                        }, h.createElement(x.z, {
                            linkTo: {
                                pathname: "/" + this.props.hostedChannelLogin,
                                state: {
                                    content: "host_channel",
                                    medium: "chat_bar_notification"
                                }
                            },
                            size: x.D.Small,
                            "data-a-target": "hosting-notification-gotochannel-button"
                        }, Object(R.d)("Go to Channel", "ChatHostingNotification"))), h.createElement(x.A, {
                            onClick: this.dismiss,
                            ariaLabel: Object(R.d)("Close", "HostingNotification"),
                            size: x.B.Small,
                            overlay: !0,
                            icon: x.ub.Close,
                            "data-a-target": "hosting-notification-close-button"
                        })))) : null
                    }, t
                }(h.Component),
                W = n("ZtEv"),
                H = n("aF6k");
            var G = n("lZdE"),
                Y = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.getActiveChatters = function(e, t) {
                            if (void 0 === e && (e = ""), void 0 === t && (t = 1 / 0), n.isDirty && n.sortChatters(), !e) return n.sortedChatters.slice(0, t);
                            var i = new RegExp("^" + Object(G.a)(e), "i");
                            return n.sortedChatters.filter(function(e) {
                                return i.test(e.login) || e.displayName && i.test(e.displayName)
                            }).slice(0, t)
                        }, n.handleMessage = function(e) {
                            n.getUsersFromEvent(e).forEach(function(e) {
                                n.handleActiveChatter(e)
                            })
                        }, n.getActiveChatterLoginFromDisplayName = function(e) {
                            return Object.keys(n.activeChatters).find(function(t) {
                                return n.activeChatters[t] && n.activeChatters[t].displayName === e
                            }) || null
                        }, n.reset(), n
                    }
                    return m.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.setActiveChattersAPI({
                            getActiveChatters: this.getActiveChatters,
                            getActiveChatterLoginFromDisplayName: this.getActiveChatterLoginFromDisplayName
                        }), this.props.messageHandlerAPI && this.props.messageHandlerAPI.addMessageHandler(this.handleMessage)
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setActiveChattersAPI(), this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage)
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.channelLogin !== this.props.channelLogin && this.reset(), e.currentUserLogin && e.currentUserLogin !== this.props.currentUserLogin && this.activeChatterLogins.has(e.currentUserLogin) && (this.isDirty = !0, this.removeActiveChatter(e.currentUserLogin)), this.props.messageHandlerAPI !== e.messageHandlerAPI && (this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage), e.messageHandlerAPI && e.messageHandlerAPI.addMessageHandler(this.handleMessage))
                    }, t.prototype.reset = function() {
                        this.activeChatterLogins = new Set, this.activeChatters = {}, this.isDirty = !0, this.sortedChatters = []
                    }, t.prototype.getUsersFromEvent = function(e) {
                        switch (e.type) {
                            case W.b.Message:
                                return [{
                                    login: e.user.userLogin,
                                    displayName: e.user.userDisplayName
                                }];
                            case W.b.Ritual:
                                return [{
                                    login: e.message.user.userLogin,
                                    displayName: e.message.user.userDisplayName
                                }];
                            case W.b.Raid:
                                return [{
                                    login: e.params.login,
                                    displayName: e.params.displayName
                                }];
                            case W.b.Resubscription:
                            case W.b.Subscription:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }];
                            case W.b.SubGift:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }, {
                                    displayName: e.recipientDisplayName,
                                    login: e.recipientLogin
                                }];
                            default:
                                return []
                        }
                    }, t.prototype.handleActiveChatter = function(e) {
                        e.login !== this.props.channelLogin && e.login !== this.props.currentUserLogin && (this.activeChatterLogins.has(e.login) ? (this.activeChatterLogins.delete(e.login), this.addActiveChatter(e)) : (this.addActiveChatter(e), this.trimActiveChatters(), this.isDirty = !0))
                    }, t.prototype.addActiveChatter = function(e) {
                        this.activeChatterLogins.add(e.login), this.activeChatters[e.login] = e
                    }, t.prototype.removeActiveChatter = function(e) {
                        this.activeChatterLogins.delete(e), delete this.activeChatters[e]
                    }, t.prototype.trimActiveChatters = function() {
                        if (!(this.activeChatterLogins.size <= 300))
                            for (var e = this.activeChatterLogins.size - 300, t = this.activeChatterLogins.values(), n = 0; n < e; n++) {
                                var i = t.next().value;
                                this.removeActiveChatter(i)
                            }
                    }, t.prototype.sortChatters = function() {
                        var e = this,
                            t = [{
                                displayName: this.props.channelDisplayName,
                                login: this.props.channelLogin
                            }],
                            n = Object.keys(this.activeChatters).map(function(t) {
                                return e.activeChatters[t]
                            });
                        n.sort(function(e, t) {
                            return e.login < t.login ? -1 : e.login > t.login ? 1 : 0
                        }), this.sortedChatters = t.concat(n), this.isDirty = !1
                    }, t
                }(h.Component);
            var z = Object(g.compose)(Object(r.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        currentUserLogin: t && t.login
                    }
                }), s.a, d.a)(Y),
                q = n("kz7j"),
                X = n("XmgI");
            var Q = n("p52R");
            var K = n("TApp");
            var $ = n("a1OF");

            function J(e, t, n, i, r, a, o) {
                return void 0 === a && (a = !1), void 0 === o && (o = !1), m.__assign({}, Object($.a)(t, n, i, r, a, o), {
                    type: W.b.Message,
                    messageType: e,
                    id: n.id || Object(H.a)(n.username)
                })
            }
            var Z = n("sblI");
            var ee = n("oK83");
            var te = n("WytW"),
                ne = n("oi4T"),
                ie = n("OpME"),
                re = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.hasConnected = !1, n.sendMessage = function(e) {
                            var t = Object(te.i)(e, n.props.channelLogin);
                            return t.handled ? t.result && t.result.deferred && t.result.deferred.then(function(e) {
                                var t = e.notice;
                                t && n.addMessage(Object(K.a)(t))
                            }) : n.client.sendCommand(n.props.channelLogin, e).catch(function(e) {
                                R.k.warn("Failed to send message, or message timeout", e)
                            }), t.result
                        }, n.onJoinedEvent = function(e) {
                            n.logger.debug("Connected", n.props.channelLogin), n.props.latencyTracking.reportInteractive(), n.hasConnected || (Object(ne.b)({
                                channelLogin: n.props.channelLogin,
                                isHostMode: n.props.isHostMode
                            }), n.hasConnected = !0), n.chatConnected && n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.postMessageToCurrentChannel(e, {
                                type: W.b.Connected,
                                id: Object(H.a)("connected")
                            })
                        }, n.onDisconnectedEvent = function(e) {
                            n.props.latencyTracking.reportInteractive(), n.addMessage(function(e) {
                                return {
                                    type: W.b.Disconnected,
                                    id: Object(H.a)("disconnected"),
                                    reason: e
                                }
                            }(e.reason))
                        }, n.onReconnectingEvent = function(e) {
                            return n.addMessage({
                                type: W.b.Reconnect,
                                id: Object(H.a)("reconnect")
                            })
                        }, n.onHostedEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: W.b.Hosted,
                                    id: Object(H.a)("hosted-" + e),
                                    hostingChannel: e,
                                    isAutohost: t,
                                    viewerCount: n
                                }
                            }(e.from, e.isAuto, e.viewers))
                        }, n.onHostingEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.Hosting,
                                    id: Object(H.a)("hosting"),
                                    hostedChannel: e
                                }
                            }(e.target))
                        }, n.onUnhostEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.Unhost,
                                    id: Object(H.a)("unhost-" + e)
                                }
                            }(e.channel))
                        }, n.onChatMessageEvent = function(e) {
                            n.postMessageToCurrentChannel(e, n.convertMessage(e))
                        }, n.onChatActionEvent = function(e) {
                            var t = n.props.bitsConfig || X.a,
                                i = J(W.c.Action, e.action, e.message.user, t, n.shouldBlockLinks(e.message.user));
                            n.postMessageToCurrentChannel(e, i)
                        }, n.onChatNoticeEvent = function(e) {
                            if ("msg_rejected" !== e.msgid) {
                                var t = function(e, t, n) {
                                    return {
                                        type: W.b.Notice,
                                        id: Object(H.a)("notice"),
                                        channel: e,
                                        msgid: t,
                                        message: n
                                    }
                                }(e.channel, e.msgid, e.body);
                                n.postMessageToCurrentChannel(e, t)
                            }
                        }, n.onTimeoutEvent = function(e) {
                            n.onModerationEvent(W.e.Timeout, e)
                        }, n.onBanEvent = function(e) {
                            n.onModerationEvent(W.e.Ban, e)
                        }, n.onClearMsgEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: W.b.Moderation,
                                    moderationType: W.e.Delete,
                                    id: Object(H.a)(e + "-mod"),
                                    userLogin: e,
                                    targetMessageID: t,
                                    body: n
                                }
                            }(e.userLogin, e.targetMessageID, e.body))
                        }, n.onModerationEvent = function(e, t) {
                            n.postMessageToCurrentChannel(t, Object(Z.a)(e, t.userLogin, t.reason, t.duration))
                        }, n.onSubscriptionEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.Subscription,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    methods: e.methods
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                methods: e.methods
                            }))
                        }, n.onSubscriptionGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.SubGift,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    methods: e.methods,
                                    recipientDisplayName: e.recipientDisplayName,
                                    recipientID: e.recipientID,
                                    recipientLogin: e.recipientLogin,
                                    senderCount: e.senderCount
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                methods: e.methods,
                                recipientDisplayName: e.recipientName,
                                recipientID: e.recipientID,
                                recipientLogin: e.recipientLogin,
                                senderCount: e.senderCount
                            }))
                        }, n.onAnonSubscriptionGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.AnonSubGift,
                                    id: Object(H.a)(e.recipientDisplayName + "-sub"),
                                    channel: e.channel.slice(1),
                                    methods: e.methods,
                                    recipientDisplayName: e.recipientDisplayName,
                                    recipientID: e.recipientID,
                                    recipientLogin: e.recipientLogin
                                }
                            }({
                                channel: e.channel,
                                methods: e.methods,
                                recipientDisplayName: e.recipientName,
                                recipientID: e.recipientID,
                                recipientLogin: e.recipientLogin
                            }))
                        }, n.onSubscriptionMysteryGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.SubMysteryGift,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    plan: e.plan,
                                    massGiftCount: e.massGiftCount,
                                    senderCount: e.senderCount
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                plan: e.plan,
                                massGiftCount: e.massGiftCount,
                                senderCount: e.senderCount
                            }))
                        }, n.onAnonSubscriptionMysteryGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.AnonSubMysteryGift,
                                    id: Object(H.a)(e.massGiftCount + "-sub"),
                                    channel: e.channel.slice(1),
                                    plan: e.plan,
                                    massGiftCount: e.massGiftCount
                                }
                            }({
                                channel: e.channel,
                                plan: e.plan,
                                massGiftCount: e.massGiftCount
                            }))
                        }, n.onBitsCharityEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t, n, i, r, a) {
                                return {
                                    type: W.b.BitsCharity,
                                    id: Object(H.a)("charity"),
                                    total: e,
                                    charityName: t,
                                    daysLeft: n,
                                    hoursLeft: i,
                                    hashtag: r,
                                    learnMore: a
                                }
                            }(e.total, e.charityName, e.daysLeft, e.hoursLeft, e.hashtag, e.learnMore))
                        }, n.onResubscriptionEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                var t = void 0;
                                return e.messageBody && (t = J(W.c.Post, e.messageBody, e.user, X.a, !1)), {
                                    type: W.b.Resubscription,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    methods: e.methods,
                                    message: t,
                                    months: e.months
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                methods: e.methods,
                                months: e.months,
                                messageBody: e.body
                            }))
                        }, n.onGiftPaidUpgradeEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.GiftPaidUpgrade,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    promoGiftTotal: e.promoGiftTotal,
                                    promoName: e.promoName,
                                    senderLogin: e.senderLogin,
                                    senderName: e.senderName,
                                    user: e.user
                                }
                            }({
                                channel: e.channel,
                                promoGiftTotal: e.promoGiftTotal,
                                promoName: e.promoName,
                                senderLogin: e.senderLogin,
                                senderName: e.senderName,
                                user: e.user
                            }))
                        }, n.onAnonGiftPaidUpgradeEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.AnonGiftPaidUpgrade,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    promoGiftTotal: e.promoGiftTotal,
                                    promoName: e.promoName,
                                    user: e.user
                                }
                            }({
                                channel: e.channel,
                                promoGiftTotal: e.promoGiftTotal,
                                promoName: e.promoName,
                                user: e.user
                            }))
                        }, n.onRoomModsEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.RoomMods,
                                    id: Object(H.a)("roommods"),
                                    moderatorLogins: e
                                }
                            }(e.usernames))
                        }, n.onRoomStateEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.RoomState,
                                    id: Object(H.a)("roomstate"),
                                    state: e
                                }
                            }(e.state))
                        }, n.onEmoteOnlyModeEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.EmoteOnlyMode,
                                    id: Object(H.a)("emoteonlymode"),
                                    enabled: e
                                }
                            }(e.enabled))
                        }, n.onSubscriberOnlyModeEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.SubscriberOnlyMode,
                                    id: Object(H.a)("subscriber-only"),
                                    enabled: e
                                }
                            }(e.enabled))
                        }, n.onR9KModeEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.R9KMode,
                                    id: Object(H.a)("r9kmode"),
                                    enabled: e
                                }
                            }(e.enabled))
                        }, n.onClearChatEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, {
                                type: W.b.Clear,
                                id: Object(H.a)("clear")
                            })
                        }, n.onRaidEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: W.b.Raid,
                                    id: Object(H.a)("raid"),
                                    channel: e,
                                    userLogin: t,
                                    params: n
                                }
                            }(e.channel, e.userLogin, e.params))
                        }, n.onUnraidEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: W.b.Unraid,
                                    id: Object(H.a)("unraid"),
                                    channel: e,
                                    userLogin: t,
                                    message: n
                                }
                            }(e.channel, e.userLogin, e.message))
                        }, n.onRitualEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t) {
                                return {
                                    type: W.b.Ritual,
                                    id: Object(H.a)(t.user.userLogin + "-" + e + "-ritual"),
                                    ritualType: e,
                                    message: t
                                }
                            }(e.type, n.convertMessage(e)))
                        }, n.onBadgesUpdatedEvent = function(e) {
                            return n.addMessage(function(e, t) {
                                return {
                                    type: W.b.BadgesUpdated,
                                    id: Object(H.a)("updateBadges"),
                                    userName: e,
                                    badges: t
                                }
                            }(e.username, e.badges))
                        }, n.onPurchaseEvent = function(e) {
                            var t = n.props.bitsConfig || X.a;
                            n.postMessageToCurrentChannel(e, function(e, t, n, i) {
                                return {
                                    bitsConfig: i,
                                    message: t,
                                    purchase: e,
                                    timestamp: n,
                                    id: Object(H.a)(t.user.userLogin + "-purchase"),
                                    type: W.b.Purchase
                                }
                            }(e.purchase, n.convertMessage(e), e.timestamp, t))
                        }, n.onCrateEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t) {
                                return {
                                    type: W.b.CrateGift,
                                    id: Object(H.a)("crate"),
                                    message: e,
                                    selectedCount: t
                                }
                            }(n.convertMessage(e), e.selectedCount))
                        }, n.onRewardGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t, n, i, r) {
                                return {
                                    type: W.b.RewardGift,
                                    id: Object(H.a)("rewardGift"),
                                    selectedCount: t,
                                    bitsAmount: n,
                                    minCheerAmount: i,
                                    messageID: e ? e.id : null,
                                    userID: e ? e.userID : null,
                                    userLogin: e ? e.username : null,
                                    displayName: e ? e.displayName : null,
                                    domain: r,
                                    sourceType: ee.a.chat_message
                                }
                            }(e.user, e.selectedCount, e.bitsAmount, e.minCheerAmount, e.domain))
                        }, n.convertMessage = function(e) {
                            var t = n.props.bitsConfig || X.a;
                            return J(W.c.Post, e.message.body, e.message.user, t, n.shouldBlockLinks(e.message.user))
                        }, n.logger = R.k.withCategory("chat-service"), n.logger.debug("Created"), n.service = R.p.tmi, n.client = R.p.tmi.client, n.disabled = R.p.tmi.disabled, n.registerCustomLatencyEvents(), n
                    }
                    return m.__extends(t, e), t.prototype.render = function() {
                        return null
                    }, t.prototype.componentDidMount = function() {
                        this.props.setChatConnectionAPI({
                            sendMessage: this.sendMessage
                        }), this.shouldConnectOnMount() ? this.join(this.props.channelLogin) : this.props.latencyTracking.reportInteractive(), this.props.emoteSets && this.client.updateEmoteMap(Object(ie.c)(this.props.emoteSets))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setChatConnectionAPI(), this.disconnect(this.props.channelLogin)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        (e.emoteSets && e.emoteSets !== this.props.emoteSets && this.client.updateEmoteMap(Object(ie.c)(e.emoteSets)), !e.shouldConnect && this.props.shouldConnect) ? this.disconnect(this.props.channelLogin): (e.authToken !== this.props.authToken || e.channelLogin !== this.props.channelLogin || e.currentUserLogin !== this.props.currentUserLogin || e.shouldConnect && !this.props.shouldConnect) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.join(e.channelLogin))
                    }, t.prototype.join = function(e) {
                        this.logger.debug("Joining channel and binding all event listeners", this.props.channelLogin), this.hasConnected = !1, this.joinedChannel && this.joinedChannel !== e && this.service.part(this.props.channelLogin), this.joinedChannel = e, this.connectHandlers(), this.service.join(e)
                    }, t.prototype.disconnect = function(e) {
                        this.logger.debug("Parting channel and unbinding all event listeners", e), this.disconnectHandlers(), this.service.part(e)
                    }, t.prototype.connectHandlers = function() {
                        this.disconnectHandlers(), this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosted(this.onHostedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.crate(this.onCrateEvent), this.client.events.rewardgift(this.onRewardGiftEvent), this.client.events.ritual(this.onRitualEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.giftpaidupgrade(this.onGiftPaidUpgradeEvent), this.client.events.anongiftpaidupgrade(this.onAnonGiftPaidUpgradeEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.anonsubgift(this.onAnonSubscriptionGiftEvent), this.client.events.submysterygift(this.onSubscriptionMysteryGiftEvent), this.client.events.anonsubmysterygift(this.onAnonSubscriptionMysteryGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.clearmsg(this.onClearMsgEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent), this.client.events.emoteonlymode(this.onEmoteOnlyModeEvent), this.client.events.r9kmode(this.onR9KModeEvent), this.client.events.charity(this.onBitsCharityEvent)
                    }, t.prototype.disconnectHandlers = function() {
                        this.client.events.remove("joined", this.onJoinedEvent), this.client.events.remove("disconnected", this.onDisconnectedEvent), this.client.events.remove("reconnecting", this.onReconnectingEvent), this.client.events.remove("chat", this.onChatMessageEvent), this.client.events.remove("usernotice", this.onChatMessageEvent), this.client.events.remove("notice", this.onChatNoticeEvent), this.client.events.remove("action", this.onChatActionEvent), this.client.events.remove("badgesupdated", this.onBadgesUpdatedEvent), this.client.events.remove("hosted", this.onHostedEvent), this.client.events.remove("hosting", this.onHostingEvent), this.client.events.remove("unhost", this.onUnhostEvent), this.client.events.remove("purchase", this.onPurchaseEvent), this.client.events.remove("crate", this.onCrateEvent), this.client.events.remove("rewardgift", this.onRewardGiftEvent), this.client.events.remove("ritual", this.onRitualEvent), this.client.events.remove("subscription", this.onSubscriptionEvent), this.client.events.remove("resub", this.onResubscriptionEvent), this.client.events.remove("subgift", this.onSubscriptionGiftEvent), this.client.events.remove("submysterygift", this.onSubscriptionMysteryGiftEvent), this.client.events.remove("timeout", this.onTimeoutEvent), this.client.events.remove("ban", this.onBanEvent), this.client.events.remove("clearchat", this.onClearChatEvent), this.client.events.remove("raid", this.onRaidEvent), this.client.events.remove("unraid", this.onUnraidEvent), this.client.events.remove("mods", this.onRoomModsEvent), this.client.events.remove("roomstate", this.onRoomStateEvent), this.client.events.remove("subscribers", this.onSubscriberOnlyModeEvent), this.client.events.remove("emoteonlymode", this.onEmoteOnlyModeEvent), this.client.events.remove("r9kmode", this.onR9KModeEvent), this.client.events.remove("charity", this.onBitsCharityEvent)
                    }, t.prototype.shouldBlockLinks = function(e) {
                        return e.username !== this.props.channelLogin && e.userType !== Q.a.Staff && e.userType !== Q.a.GlobalMod && e.userType !== Q.a.Moderator && this.props.blockLinks
                    }, t.prototype.postMessageToCurrentChannel = function(e, t) {
                        e.channel.toLowerCase().replace("#", "") === this.props.channelLogin.toLowerCase() && this.addMessage(t)
                    }, t.prototype.addMessage = function(e) {
                        this.props.messageHandlerAPI && this.props.messageHandlerAPI.handleMessage(e)
                    }, t.prototype.shouldConnectOnMount = function() {
                        return this.props.shouldConnect && !this.disabled
                    }, t.prototype.registerCustomLatencyEvents = function() {
                        this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents(q.a.Chat), this.chatInitialized = this.registerInitEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized), this.shouldConnectOnMount() && (this.chatConnected = this.registerConnectedEvent())
                    }, t.prototype.registerInitEvent = function() {
                        return this.props.latencyTracking.registerCustomEvent({
                            benchmark: 3e3,
                            group: q.a.Chat,
                            key: q.b.ChatInit,
                            label: q.c.Init
                        })
                    }, t.prototype.registerConnectedEvent = function() {
                        return this.props.latencyTracking.registerCustomEvent({
                            benchmark: 4e3,
                            group: q.a.Chat,
                            key: q.b.ChatConnected,
                            label: q.c.Connected
                        })
                    }, t
                }(h.Component);
            var ae = Object(g.compose)(Object(r.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        authToken: Object(o.a)(e),
                        currentUserLogin: t && t.login
                    }
                }), Object(u.b)("ChatConnectionService"), l.a, d.a)(re),
                oe = n("lw3P"),
                se = n("nkgB"),
                le = n("RcPG"),
                ce = 1e3,
                de = 1e3,
                ue = 200,
                pe = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.delayedMessageBuffer = [], n.updateHandlers = [], n.handleMessage = function(e) {
                            var t = !1;
                            switch (e.type) {
                                case W.b.Message:
                                    if (n.uncountedMessages++, e.user.userID && n.blockedUsers.has(e.user.userID)) {
                                        if (!n.props.shouldSeeBlockedAndDeletedMessages) return;
                                        e.hidden = !n.unhideUsers.has(e.user.userID)
                                    }
                                    var i = e.messageParts[0];
                                    if (i && i.type === le.a.Text && i.content.startsWith(":act ")) return;
                                    t = !n.isOwnMessage(e);
                                    break;
                                case W.b.Resubscription:
                                    t = !!e.message && !n.isOwnMessage(e.message);
                                    break;
                                case W.b.Moderation:
                                    var r = e.moderationType,
                                        a = e.userLogin;
                                    if (n.moderatedUsers.has(a)) return;
                                    var o = [n.buffer, n.delayedMessageBuffer.map(function(e) {
                                        return e.event
                                    })];
                                    if (r === W.e.Delete) {
                                        var s = e.targetMessageID;
                                        o.forEach(function(e) {
                                            e.some(function(e) {
                                                switch (e.type) {
                                                    case W.b.Message:
                                                        if (e.id === s) return e.deleted = !0, !0;
                                                        break;
                                                    case W.b.Resubscription:
                                                    case W.b.Ritual:
                                                        if (e.message && e.id === s) return e.message.deleted = !0, !0
                                                }
                                                return !1
                                            })
                                        })
                                    } else o.forEach(function(e) {
                                        e.forEach(function(e) {
                                            switch (e.type) {
                                                case W.b.Message:
                                                    e.user && a === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0, e.banned = !0);
                                                    break;
                                                case W.b.Resubscription:
                                                case W.b.Ritual:
                                                    e.message && a === e.message.user.userLogin && !e.message.deleted && (e.message.deleted = !0, e.message.banned = !0)
                                            }
                                        })
                                    }), n.moderatedUsers.add(a), setTimeout(n.unmoderateUser(a), ce);
                                    break;
                                case W.b.Disconnected:
                                    return;
                                case W.b.Reconnect:
                                    if (n.buffer.find(function(t) {
                                            return t.id === e.id
                                        }) || n.delayedMessageBuffer.find(function(t) {
                                            return t.event.id === e.id
                                        })) return;
                                    break;
                                case W.b.Clear:
                                    n.clear();
                                    break;
                                case W.b.AutoMod:
                                    switch (e.autoModType) {
                                        case W.a.MessageModApproved:
                                        case W.a.MessageModDenied:
                                            return void[n.buffer, n.delayedMessageBuffer.map(function(e) {
                                                return e.event
                                            })].forEach(function(t) {
                                                t.some(function(t) {
                                                    return !(t.type !== W.b.AutoMod || t.autoModType !== W.a.MessageRejectedPrompt || !t.rejectedMessage || t.rejectedMessage.id !== e.msg_id) && (t.rejectedMessage.deleted = !0, !0)
                                                })
                                            })
                                    }
                            }
                            n.delayedMessageBuffer.push({
                                event: e,
                                time: Date.now(),
                                shouldDelay: t
                            })
                        }, n.getMessages = function() {
                            return n.buffer
                        }, n.unmoderateUser = function(e) {
                            return function() {
                                n.moderatedUsers.delete(e)
                            }
                        }, n.isOwnMessage = function(e) {
                            var t = e.user;
                            return !(!n.props.currentUserLogin || !t || t.userLogin !== n.props.currentUserLogin)
                        }, n.addUpdateHandler = function(e) {
                            -1 === n.updateHandlers.indexOf(e) && (n.updateHandlers = n.updateHandlers.concat(e))
                        }, n.removeUpdateHandler = function(e) {
                            n.updateHandlers = n.updateHandlers.filter(function(t) {
                                return t !== e
                            })
                        }, n.delayedMessageBuffer = [], n.buffer = [], n.moderatedUsers = new Set, n.blockedUsers = new Set(n.props.blockedUsers), n.unhideUsers = new Set, n.flushInterval = setInterval(function() {
                            return n.flushRawMessages()
                        }, ue), n.uncountedMessages = 0, n.chatRateMeasurements = [], n.chatRateMeasurementInterval = setInterval(function() {
                            return n.measureChatRate()
                        }, de), n
                    }
                    return m.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.setMessageBufferAPI({
                            addUpdateHandler: this.addUpdateHandler,
                            removeUpdateHandler: this.removeUpdateHandler,
                            getMessages: this.getMessages
                        }), this.props.messageHandlerAPI && this.props.messageHandlerAPI.addMessageHandler(this.handleMessage)
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setMessageBufferAPI(), this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage), clearInterval(this.flushInterval), clearInterval(this.chatRateMeasurementInterval)
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.messageHandlerAPI !== e.messageHandlerAPI && (this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage), e.messageHandlerAPI && e.messageHandlerAPI.addMessageHandler(this.handleMessage)), e.blockedUsers !== this.props.blockedUsers && (this.blockedUsers = new Set(e.blockedUsers)), e.unhideIgnoredUsers !== this.props.unhideIgnoredUsers && (this.unhideUsers = new Set(e.unhideIgnoredUsers)), this.props.isBackground && !e.isBackground && (this.chatRate > 5 && this.clear(20), this.notifySubscribers())
                    }, t.prototype.clear = function(e) {
                        if (void 0 === e && (e = 0), e <= 0) return this.buffer = [], void(this.delayedMessageBuffer = []);
                        this.buffer = this.buffer.slice(-e)
                    }, t.prototype.isDeletable = function(e) {
                        return void 0 !== e.deleted
                    }, t.prototype.flushRawMessages = function() {
                        var e = this,
                            t = [],
                            n = Date.now(),
                            i = !1;
                        this.delayedMessageBuffer.forEach(function(r) {
                            var a = r.event,
                                o = r.time,
                                s = r.shouldDelay;
                            o <= n - e.delayDuration || !s ? !e.props.shouldSeeBlockedAndDeletedMessages && e.isDeletable(a) && a.deleted || (e.buffer.push(a), i = !0) : t.push({
                                event: a,
                                time: o,
                                shouldDelay: s
                            })
                        }), this.delayedMessageBuffer = t, i && (this.clear(150), this.props.isBackground || this.notifySubscribers())
                    }, t.prototype.measureChatRate = function() {
                        3 === this.chatRateMeasurements.length && this.chatRateMeasurements.shift(), this.chatRateMeasurements.push(this.uncountedMessages), this.uncountedMessages = 0
                    }, Object.defineProperty(t.prototype, "chatRate", {
                        get: function() {
                            return 0 === this.chatRateMeasurements.length ? 0 : this.chatRateMeasurements.reduce(function(e, t) {
                                return e + t
                            }) / this.chatRateMeasurements.length
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "delayDuration", {
                        get: function() {
                            return this.props.isCurrentUserModerator ? 0 : this.props.data.user && this.props.data.user.chatSettings && this.props.data.user.chatSettings.chatDelayMs || 0
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t.prototype.notifySubscribers = function() {
                        this.updateHandlers.forEach(function(e) {
                            return e()
                        })
                    }, t
                }(h.Component);
            var me = Object(g.compose)(Object(r.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        authToken: Object(o.a)(e),
                        currentUserLogin: t && t.login,
                        isLoggedIn: Object(o.f)(e)
                    }
                }), Object(a.a)(se, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(oe.a)(), c.a, d.a)(pe),
                he = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.messageHandlers = [], t.addMessageHandler = function(e) {
                            -1 === t.messageHandlers.indexOf(e) && (t.messageHandlers = t.messageHandlers.concat(e))
                        }, t.removeMessageHandler = function(e) {
                            t.messageHandlers = t.messageHandlers.filter(function(t) {
                                return t !== e
                            })
                        }, t.handleMessage = function(e) {
                            for (var n = t.messageHandlers.length, i = 0; i < n; i++) t.messageHandlers[i](e)
                        }, t
                    }
                    return m.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.setMessageHandlerAPI({
                            addMessageHandler: this.addMessageHandler,
                            removeMessageHandler: this.removeMessageHandler,
                            handleMessage: this.handleMessage
                        })
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setMessageHandlerAPI()
                    }, t
                }(h.Component),
                ge = Object(g.compose)(d.a)(he),
                fe = n("0Log"),
                ve = n("/aPz"),
                be = n("KGti"),
                ke = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.subscribe = function(e) {
                            t.unsubscribe(), e.channelID && e.currentUserID && (t.unsubscriber = R.l.subscribe({
                                topic: Object(ve.p)(e.currentUserID, e.channelID),
                                onMessage: t.handleMessage
                            }))
                        }, t.unsubscribe = function() {
                            t.unsubscriber && (t.unsubscriber(), t.unsubscriber = null)
                        }, t.handleMessage = function(e) {
                            switch (e.data.moderation_action) {
                                case fe.ModerationActions.AutoModRejected:
                                    var n = Object(be.j)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    t.addMessage(n);
                                    break;
                                case fe.ModerationActions.AutoModCheerRejected:
                                    var i = Object(be.c)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2], e.data.target_user_id);
                                    t.addMessage(i);
                                    break;
                                case fe.ModerationActions.ApprovedAutoModMessage:
                                    t.addMessage(Object(be.g)(e));
                                    break;
                                case fe.ModerationActions.DeniedAutoModMessage:
                                    t.addMessage(Object(be.h)(e));
                                    break;
                                case fe.TargetedModerationActions.AutoModMessageRejected:
                                    t.addMessage(Object(be.i)());
                                    break;
                                case fe.TargetedModerationActions.AutoModMessageApproved:
                                    t.addMessage(Object(be.e)());
                                    break;
                                case fe.TargetedModerationActions.AutoModMessageDenied:
                                    t.addMessage(Object(be.f)());
                                    break;
                                case fe.TargetedModerationActions.AutoModCheerDenied:
                                    t.addMessage(Object(be.b)());
                                    break;
                                case fe.TargetedModerationActions.AutoModCheerTimeout:
                                    t.addMessage(Object(be.d)());
                                    break;
                                case fe.ModerationActions.Ban:
                                    t.addMessage(Object(be.l)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], void 0, e.data.args[1]));
                                    break;
                                case fe.ModerationActions.Delete:
                                    t.addMessage(Object(be.l)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], void 0, void 0, e.data.args[1], e.data.args[2]));
                                    break;
                                case fe.ModerationActions.Unban:
                                case fe.ModerationActions.Timeout:
                                case fe.ModerationActions.Untimeout:
                                case fe.ModerationActions.Mod:
                                case fe.ModerationActions.Unmod:
                                    t.addMessage(Object(be.l)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], e.data.args[1], e.data.args[2]));
                                    break;
                                case fe.ModerationActions.AutoModEnabled:
                                case fe.ModerationActions.Clear:
                                case fe.ModerationActions.EmoteOnly:
                                case fe.ModerationActions.EmoteOnlyOff:
                                case fe.ModerationActions.FollowersOnly:
                                case fe.ModerationActions.FollowersOnlyOff:
                                case fe.ModerationActions.Host:
                                case fe.ModerationActions.R9kBeta:
                                case fe.ModerationActions.R9kBetaOff:
                                case fe.ModerationActions.Raid:
                                case fe.ModerationActions.Slow:
                                case fe.ModerationActions.SlowOff:
                                case fe.ModerationActions.SubsBeta:
                                case fe.ModerationActions.SubscribersOnly:
                                case fe.ModerationActions.SubscribersOnlyOff:
                                case fe.ModerationActions.Unhost:
                                case fe.ModerationActions.AddBlockedTerm:
                                case fe.ModerationActions.AddPermittedTerm:
                                case fe.ModerationActions.DeleteBlockedTerm:
                                case fe.ModerationActions.DeletePermittedTerm:
                                case fe.ModerationActions.ModifiedAutoModProperties:
                                case fe.ModerationActions.Unraid:
                                    t.addMessage(Object(be.k)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.args));
                                    break;
                                default:
                                    R.k.warn("Unknown moderation action type", e.data.moderation_action)
                            }
                        }, t
                    }
                    return m.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.subscribe(this.props)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.channelID === this.props.channelID && e.currentUserID === this.props.currentUserID || this.subscribe(e)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.addMessage = function(e) {
                        this.props.messageHandlerAPI ? this.props.messageHandlerAPI.handleMessage(e) : R.k.warn("ModerationActionService received an event before the MessageHandlerAPI was available.")
                    }, t
                }(h.Component);
            var ye = Object(g.compose)(Object(r.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        currentUserID: t && t.id
                    }
                }), d.a)(ke),
                Ce = n("gq0V"),
                Se = n("BJwa"),
                Ee = "(?:\\W|^)",
                Ne = "(?:$|\\W)",
                Oe = "PowerUpL DarkMode PowerUpR",
                _e = {
                    failSilently: !0,
                    placeholder: null
                },
                we = f.a.wrap(function() {
                    return n.e(198).then(n.bind(null, "Gnts"))
                }, "MysteryGiftChatBannerQueue", _e),
                De = f.a.wrap(function() {
                    return n.e(197).then(n.bind(null, "KSjr"))
                }, "NativeBroadcastNotification", _e),
                Ie = f.a.wrap(function() {
                    return n.e(196).then(n.bind(null, "T3fw"))
                }, "Orbis", _e),
                Te = f.a.wrap(function() {
                    return n.e(195).then(n.bind(null, "7htX"))
                }, "RaidNotification", _e),
                Me = f.a.wrap(function() {
                    return n.e(194).then(n.bind(null, "rg60"))
                }, "RitualsOnboardingSticky", _e),
                Re = f.a.wrap(function() {
                    return n.e(193).then(n.bind(null, "miqE"))
                }, "ShareToChat", _e),
                Le = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.state = {
                            hasReceivedInitialRoomState: !1,
                            hostedChannelLogin: null,
                            userBadges: null
                        }, n.sendMessage = function(e) {
                            if (!e || 0 === e.length || !n.props.authToken) return !1;
                            if (!n.props.chatConnectionAPI) return !1;
                            var t = n.props.chatConnectionAPI.sendMessage(e);
                            return (!t || !t.preserveInput) && (n.parseOutgoingMessage(e), !0)
                        }, n.pushMessage = function(e) {
                            n.props.messageHandlerAPI && n.props.messageHandlerAPI.handleMessage(e)
                        }, n.onChatEvent = function(e) {
                            switch (e.type) {
                                case W.b.Hosting:
                                    n.hostingHandler(e.hostedChannel);
                                    break;
                                case W.b.Unhost:
                                    n.hostingHandler(null);
                                    break;
                                case W.b.RoomState:
                                    n.onRoomStateUpdated(e.state);
                                    break;
                                case W.b.BadgesUpdated:
                                    n.onBadgesUpdated(e)
                            }
                        }, n.hostingHandler = function(e) {
                            n.setState({
                                hostedChannelLogin: e
                            }), n.props.onHostingChange && n.props.onHostingChange(e)
                        }, n.createOutgoingTokenMatchers = function(e) {
                            n.outgoingTokenMatchers = e.map(function(e) {
                                return {
                                    token: e,
                                    regex: new RegExp("" + Ee + e + Ne)
                                }
                            })
                        }, n.parseOutgoingMessage = function(e) {
                            n.outgoingTokenMatchers.forEach(function(t) {
                                t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                            })
                        }, n.onOutgoingTokenMatch = function(e, t) {
                            switch (e) {
                                case Oe:
                                    var i = n.props.theme === v.a.Light ? v.a.Dark : v.a.Light;
                                    n.props.onThemeChange(i);
                                    break;
                                default:
                                    return
                            }
                        }, n.onBadgesUpdated = function(e) {
                            n.setState({
                                userBadges: e.badges
                            })
                        }, n.onRoomStateUpdated = function(e) {
                            n.props.onRoomStateUpdate(e), n.setState({
                                hasReceivedInitialRoomState: !0
                            })
                        }, n.createOutgoingTokenMatchers([Oe]), n
                    }
                    return m.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.messageHandlerAPI && this.props.messageHandlerAPI.addMessageHandler(this.onChatEvent)
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.onChatEvent)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.channelLogin !== this.props.channelLogin && this.setState({
                            hostedChannelLogin: null
                        }), this.state.hasReceivedInitialRoomState && (this.props.followerModeDuration === e.followerModeDuration && this.props.followerModeEnabled === e.followerModeEnabled || this.pushMessage(function(e, t) {
                            return {
                                type: W.b.FollowerOnlyMode,
                                id: Object(H.a)("follower-only"),
                                enabled: e,
                                length: t
                            }
                        }(e.followerModeEnabled, e.followerModeDuration)), this.props.slowModeEnabled === e.slowModeEnabled && this.props.slowModeDuration === e.slowModeDuration || this.pushMessage(function(e, t) {
                            return {
                                type: W.b.SlowMode,
                                id: Object(H.a)("slowmode"),
                                enabled: e,
                                length: t
                            }
                        }(e.slowModeEnabled, e.slowModeDuration))), this.props.messageHandlerAPI !== e.messageHandlerAPI && (this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.onChatEvent), e.messageHandlerAPI && e.messageHandlerAPI.addMessageHandler(this.onChatEvent))
                    }, t.prototype.render = function() {
                        var e, t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                            n = this.props.isHidden || !this.props.rightColumnExpanded && !this.props.inlineRightColumnExpanded,
                            i = !(!this.props.isEmbedded && !this.props.isPopout && n && !this.props.shouldConnectChat);
                        return this.props.firstPageLoaded && (e = h.createElement(Ie, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        })), h.createElement(h.Fragment, null, h.createElement(Se.b, {
                            authToken: this.props.authToken,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelDisplayName: this.props.channelDisplayName,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            chatRoomHeader: e,
                            chatRules: this.props.chatRules,
                            closeRoomPicker: this.props.closeRoomPicker,
                            currentUserDisplayName: this.props.userDisplayName,
                            currentUserLogin: this.props.userLogin,
                            emotes: t,
                            emoteMap: this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {},
                            firstPageLoaded: this.props.firstPageLoaded,
                            hostedChannelLogin: this.state.hostedChannelLogin,
                            isBackground: this.props.isBackground,
                            isChatRulesOpen: this.props.isChatRulesOpen,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isEmbedded: this.props.isEmbedded,
                            isHidden: this.props.isHidden,
                            isHostMode: !!this.state.hostedChannelLogin,
                            isOwnChannel: this.isOwnChannel,
                            isPopout: this.props.isPopout,
                            isStaff: this.props.isStaff,
                            onChatUnhide: this.props.onChatUnhide,
                            onCloseChatRules: this.props.onCloseChatRules,
                            onPushMessage: this.pushMessage,
                            onSendMessage: this.sendMessage,
                            onShowChatRules: this.props.onShowChatRules,
                            theme: this.props.theme,
                            userBadges: this.state.userBadges,
                            userID: this.props.userID
                        }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && h.createElement(Re, {
                            authToken: this.props.authToken,
                            channelDisplayName: this.props.channelDisplayName,
                            channelLogin: this.props.channelLogin,
                            bitsConfig: this.props.bitsConfig,
                            "data-test-selector": "share-to-chat"
                        }), this.props.hostedChannelDisplayName && !this.props.isPopout && h.createElement(V, {
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                            hostedChannelLogin: this.state.hostedChannelLogin || ""
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && this.props.channelID && h.createElement(Te, {
                            channelID: this.props.channelID,
                            "data-test-selector": "raid-notification"
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && h.createElement(we, {
                            channelID: this.props.channelID
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && h.createElement(De, {
                            channelLogin: this.props.channelLogin
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && h.createElement(Me, {
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin
                        })), this.renderCommandHandlers(), h.createElement(z, {
                            channelDisplayName: this.props.channelDisplayName,
                            channelLogin: this.props.channelLogin
                        }), h.createElement(ae, {
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelLogin: this.props.channelLogin,
                            emoteSets: this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                            isHostMode: !!this.state.hostedChannelLogin,
                            shouldConnect: i
                        }), h.createElement(me, {
                            channelLogin: this.props.channelLogin,
                            shouldSeeBlockedAndDeletedMessages: this.props.shouldSeeBlockedAndDeletedMessages,
                            isBackground: !!this.props.isBackground,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            unhideIgnoredUsers: this.props.unhideIgnoredUsers
                        }), h.createElement(ge, null), h.createElement(ye, {
                            channelID: this.props.channelID
                        }))
                    }, t.prototype.renderCommandHandlers = function() {
                        if (this.props.passThroughCommands || this.props.isBackground) return null;
                        var e = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {},
                            t = this.props,
                            n = t.channelID,
                            i = t.isPopout,
                            r = t.userLogin;
                        return h.createElement(h.Fragment, null, h.createElement(B.a, {
                            isEmbedded: this.props.isEmbedded,
                            isPopout: i,
                            userLogin: r,
                            userID: this.props.userID,
                            emoteMap: e
                        }), h.createElement(C.a, {
                            channelID: this.props.channelID,
                            suppressLocalSuccessMessage: !0
                        }), h.createElement(S.a, {
                            channelLogin: this.props.channelLogin,
                            isPopout: i
                        }), h.createElement(E.a, null), h.createElement(O.a, {
                            channelID: n
                        }), h.createElement(Ce.a, null, h.createElement(P, {
                            channelID: n
                        })), h.createElement(N.a, {
                            currentUserLogin: r
                        }), this.props.chatRules && !!this.props.chatRules.length && h.createElement(M, null))
                    }, Object.defineProperty(t.prototype, "isOwnChannel", {
                        get: function() {
                            return this.props.userID === this.props.channelID
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(h.Component);
            var Fe = Object(i.compose)(Object(r.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded,
                        isChatRulesOpen: e.chat.isChatRulesOpen,
                        isHidden: e.chat.isHidden,
                        isLoggedIn: Object(o.f)(e),
                        rightColumnExpanded: e.ui.rightColumnExpanded,
                        inlineRightColumnExpanded: e.ui.inlineRightColumnExpanded,
                        theme: Object(y.a)(e),
                        followerModeDuration: e.chat.followerDuration,
                        followerModeEnabled: e.chat.followerMode,
                        slowModeDuration: e.chat.slowModeDuration,
                        slowModeEnabled: e.chat.slowMode,
                        unhideIgnoredUsers: e.chat.unhideIgnoredUsers
                    }
                }, function(e) {
                    return Object(g.bindActionCreators)({
                        onCloseChatRules: function() {
                            return w.z()
                        },
                        onShowChatRules: function() {
                            return w.P()
                        },
                        onChatUnhide: function() {
                            return w.O()
                        },
                        onRoomStateUpdate: function(e) {
                            return w.S(e)
                        },
                        onThemeChange: function(e) {
                            return Object(k.b)(e, k.a.TypedCommand)
                        }
                    }, e)
                }), Object(u.b)("ChatRoom", {
                    autoReportInteractive: !0
                }), Object(b.a)(), l.a, d.a)(Le),
                je = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return m.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.componentDidUpdate = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = this.props.channelData.channel,
                            t = this.props.userData && this.props.userData.user,
                            n = !1,
                            i = !1,
                            r = !1;
                        if (t && e && e.self) {
                            var a = t.login === e.login;
                            n = e.self.isModerator || a || t.roles.isGlobalMod || t.roles.isSiteAdmin, i = t.roles.isStaff, r = e.self.isModerator || a || t.roles.isGlobalMod
                        }
                        var o = void 0;
                        e && e.chatSettings && e.chatSettings.rules && e.chatSettings.rules.filter(function(e) {
                            return e.trim().length
                        }).length && (o = e.chatSettings.rules);
                        var s = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                        return h.createElement(Fe, {
                            key: this.props.channelLogin,
                            authToken: this.props.sessionUser && this.props.sessionUser.authToken,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: s,
                            channelDisplayName: e && e.displayName,
                            channelID: e && e.id,
                            channelLogin: this.props.channelLogin,
                            chatRules: o,
                            clientID: this.props.clientID,
                            isBackground: this.props.isBackground,
                            isCurrentUserModerator: n,
                            isEmbedded: !!this.props.isEmbedded,
                            isPopout: !!this.props.isPopout,
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                            closeRoomPicker: this.props.closeRoomPicker,
                            onHostingChange: this.props.onHostingChange,
                            userDisplayName: this.props.sessionUser && this.props.sessionUser.displayName,
                            userID: this.props.sessionUser && this.props.sessionUser.id.toString(),
                            userLogin: this.props.sessionUser && this.props.sessionUser.login,
                            isStaff: i,
                            shouldSeeBlockedAndDeletedMessages: r,
                            passThroughCommands: this.props.passThroughCommands,
                            shouldConnectChat: this.props.shouldConnectChat
                        })
                    }, t
                }(h.Component),
                xe = n("9P+5");
            var Ae = Object(i.compose)(Object(r.connect)(function(e) {
                    return {
                        sessionUser: Object(o.e)(e)
                    }
                }), Object(a.a)(p, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(a.a)(xe, {
                    name: "userData",
                    skip: function(e) {
                        return !e.sessionUser
                    }
                }), Object(u.b)("Chat"))(je),
                Ue = Object(i.compose)(s.b, l.b, c.b, d.b)(Ae);
            n.d(t, !1, function() {
                return je
            }), n.d(t, "b", function() {
                return Ae
            }), n.d(t, "a", function() {
                return Ue
            })
        },
        KyCc: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("lZCe"),
                s = n("ZS2+"),
                l = n("D7An"),
                c = n("kRBY"),
                d = s.a.wrap(function() {
                    return n.e(151).then(n.bind(null, "jOTV"))
                }, "NewUserSurveyComponent"),
                u = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.firstPageLoadedOnMount = this.props.firstPageLoaded
                    }, t.prototype.render = function() {
                        var e = this,
                            t = {
                                assignments: {
                                    active: function() {
                                        return r.createElement(d, {
                                            loggedIn: e.props.loggedIn,
                                            locale: e.props.locale,
                                            firstPageLoaded: e.firstPageLoadedOnMount
                                        })
                                    },
                                    control: function() {
                                        return null
                                    },
                                    fallback: function() {
                                        return null
                                    }
                                },
                                name: l.b.NewUserSurvey
                            };
                        return r.createElement(o.a, i.__assign({}, t))
                    }, t
                }(r.PureComponent);
            var p = Object(a.connect)(function(e) {
                return {
                    loggedIn: Object(c.f)(e),
                    locale: Object(c.d)(e),
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(u);
            n.d(t, "a", function() {
                return p
            })
        },
        "L1N/": function(e, t, n) {},
        L4bB: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("sLlB"),
                l = n("9C/b"),
                c = n("vSJR"),
                d = n("eJ65"),
                u = n("+GjP"),
                p = n("vRsq"),
                m = n("Ue10");
            ! function(e) {
                e[e.FilterText = 0] = "FilterText"
            }(i || (i = {}));
            var h = p.b.Week,
                g = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.filterOptions = [{
                            label: Object(o.d)("Trending", "TopClipsTimeFilter"),
                            filter: p.b.Trending
                        }, {
                            label: Object(o.d)("24h", "TopClipsTimeFilter"),
                            filter: p.b.Day
                        }, {
                            label: Object(o.d)("7d", "TopClipsTimeFilter"),
                            filter: p.b.Week
                        }, {
                            label: Object(o.d)("30d", "TopClipsTimeFilter"),
                            filter: p.b.Month
                        }, {
                            label: Object(o.d)("all", "TopClipsTimeFilter"),
                            filter: p.b.All
                        }], t.renderFilterText = function(e) {
                            return e.filter === p.b.Trending ? a.createElement("span", {
                                "data-test-selector": i.FilterText
                            }, e.label) : a.createElement(m.Ya, {
                                display: m.X.Flex
                            }, Object(o.d)("Top", "TopClipsTimeFilter"), a.createElement(m.Ya, {
                                margin: {
                                    left: .5
                                }
                            }, a.createElement(m.hb, {
                                "data-test-selector": i.FilterText,
                                type: m.ib.Brand,
                                label: e.label
                            })))
                        }, t.renderBalloonOption = function(e) {
                            var n, i = ((n = {})[p.a] = e.filter, n),
                                r = Object(u.d)(t.props.location, i),
                                o = e.selected ? a.createElement(m.Ya, {
                                    attachRight: !0,
                                    position: m.kb.Absolute,
                                    margin: {
                                        right: 1
                                    }
                                }, a.createElement(m.tb, {
                                    asset: m.ub.Check,
                                    height: 18,
                                    width: 18
                                })) : null;
                            return a.createElement(m.Va, {
                                "data-a-target": "time-filter-option-" + e.filter,
                                key: e.filter,
                                linkTo: r,
                                selected: !t.props.showTagExperimentStyles && e.selected
                            }, a.createElement(m.Ya, {
                                display: m.X.Flex,
                                padding: {
                                    x: 1,
                                    y: .5
                                }
                            }, t.renderFilterText(e), t.props.showTagExperimentStyles && o))
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.ensureFilterPresent()
                    }, t.prototype.componentWillUpdate = function() {
                        this.ensureFilterPresent()
                    }, t.prototype.render = function() {
                        var e = this.filterOptions,
                            t = Object(p.v)(this.props.location.search);
                        t || (t = h), e.forEach(function(e) {
                            e.selected = e.filter === t
                        });
                        var n = e.find(function(e) {
                            return !!e.selected
                        }) || e[0];
                        return this.props.showTagExperimentStyles ? a.createElement(c.a, {
                            buttonLabel: this.renderFilterText(n),
                            hideDropdownOnInsideClick: !0
                        }, e.map(this.renderBalloonOption)) : a.createElement(m.Ya, {
                            className: "top-clips-time-filter"
                        }, a.createElement(d.a, {
                            hideBalloonOnInsideClick: !0
                        }, a.createElement(m.z, {
                            dropdown: !0,
                            type: m.F.Hollow,
                            "data-a-target": "time-filter-selection"
                        }, this.renderFilterText(n)), a.createElement(m.u, {
                            direction: m.v.BottomLeft,
                            noTail: !0
                        }, e.map(this.renderBalloonOption))))
                    }, t.prototype.ensureFilterPresent = function() {
                        var e;
                        if (!Object(p.v)(this.props.location.search)) {
                            var t = ((e = {})[p.a] = h, e),
                                n = Object(u.d)(this.props.location, t);
                            this.props.history.replace(n)
                        }
                    }, t
                }(a.Component),
                f = Object(l.a)(g);
            n.d(t, "a", function() {
                return v
            });
            var v = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(m.Ya, {
                        alignItems: m.f.End,
                        display: m.X.Flex,
                        flexDirection: m.Aa.Row,
                        fullWidth: !0,
                        justifyContent: m.Xa.Between
                    }, a.createElement(m.Ya, {
                        alignItems: m.f.End,
                        display: m.X.Flex,
                        flexDirection: m.Aa.Row
                    }, this.renderLanguageFilter(), a.createElement(f, {
                        showTagExperimentStyles: this.props.showTagExperimentStyles
                    })), a.createElement(m.Ya, {
                        padding: {
                            y: this.props.showTagExperimentStyles ? .5 : 0
                        }
                    }, a.createElement(m.z, {
                        "data-a-target": "manage-clips-button",
                        linkTo: "/manager/clips",
                        size: this.props.showTagExperimentStyles ? m.D.Large : m.D.Default,
                        targetBlank: !0,
                        type: m.F.Hollow
                    }, Object(o.d)("Manage my clips", "TopClips"))))
                }, t.prototype.renderLanguageFilter = function() {
                    return this.props.hideLanguageFilter ? null : a.createElement(m.Ya, {
                        margin: {
                            right: this.props.showTagExperimentStyles ? 0 : 1
                        }
                    }, a.createElement(s.a, null))
                }, t
            }(a.Component)
        },
        L5dg: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("q1tI"),
                r = n("0Rl0"),
                a = function(e) {
                    for (var t = [], n = void 0 === e.placeholderCount ? 20 : e.placeholderCount, a = 0; a < n; a++) t.push(i.createElement(r.a, {
                        key: a
                    }));
                    return i.createElement(i.Fragment, null, t)
                }
        },
        L6L7: function(e, t, n) {},
        L7EG: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoShareBox_TrackingVideoContext"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "owner"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "roles"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPartner"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 156
                }
            };
            n.loc.source = {
                body: "query VideoShareBox_TrackingVideoContext($videoID: ID!) {\nvideo(id: $videoID) {\nid\nbroadcastType\nowner {\nid\nlogin\nroles {\nisPartner\n}\n}\ngame {\nid\nname\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        Lmqf: function(e, t, n) {
            e.exports = n.p + "assets/upsell-center-dark-6c092df86238db84cff1.png"
        },
        M0lL: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "fuelProduct"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "GameProduct"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "acquisition"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "description"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isExternal"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "developer"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "esrbRating"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "details"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "iconURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "featureDetails"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "genres"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "inGameContent"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "inGameContent"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "info"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "productInfo"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "launchPlatform"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "description"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isExternal"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "supportedPlatforms"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "iconURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 410
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/fuel/models/product-info.gql"\n#import "twilight/features/fuel/models/in-game-content.gql"\nfragment fuelProduct on GameProduct {\nid\nacquisition {\nid\ndescription\nisExternal\n}\ndeveloper\nesrbRating {\nid\ndetails\niconURL\n}\nfeatureDetails\ngenres\ninGameContent {\n...inGameContent\n}\ninfo {\n...productInfo\n}\nlaunchPlatform {\nid\ndescription\nisExternal\n}\nsupportedPlatforms {\nid\nname\niconURL\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("3ncn").definitions)), i.definitions = i.definitions.concat(a(n("mM0V").definitions)), e.exports = i
        },
        MAph: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelContext_HostedChannel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "hostedChannelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "hostedChannelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "hostedChannel"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }, {
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "hostedChannel"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "profileImageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "70"
                                }
                            }],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 205
                }
            };
            n.loc.source = {
                body: "query ChannelContext_HostedChannel($hostedChannelLogin: String!) {\nuser(login: $hostedChannelLogin) {\n...hostedChannel\n}\n}\nfragment hostedChannel on User {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        MBj5: function(e, t, n) {},
        MIhh: function(e, t, n) {},
        MJbm: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = (n("efEE"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.logger = a.p.logger.withCategory("resize-detector"), t.onScroll = function() {
                            var e = t.container,
                                n = e.offsetWidth,
                                i = e.offsetHeight,
                                r = e.offsetLeft,
                                a = e.offsetTop;
                            t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && a === t.top && r === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, a, r)), t.reset()
                        }, t.setGrowDivRef = function(e) {
                            return t.growDiv = e
                        }, t.setGrowChildDivRef = function(e) {
                            return t.growChildDiv = e
                        }, t.setShrinkDivRef = function(e) {
                            return t.shrinkDiv = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("div", {
                            className: "resize-detector"
                        }, r.createElement("div", {
                            className: "resize-detector",
                            ref: this.setGrowDivRef
                        }, r.createElement("div", {
                            className: "resize-detector__grow",
                            ref: this.setGrowChildDivRef
                        })), r.createElement("div", {
                            className: "resize-detector",
                            ref: this.setShrinkDivRef
                        }, r.createElement("div", {
                            className: "resize-detector__shrink"
                        })))
                    }, t.prototype.componentDidMount = function() {
                        if (this.growDiv) {
                            this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                            var e = this.container.style.position;
                            if ("relative" !== e && "absolute" !== e && "fixed" !== e) {
                                var t = window.getComputedStyle(this.container);
                                t && "static" === t.getPropertyValue("position") && (this.container.style.position = "relative")
                            }
                            this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                        } else this.logger.warn("growDiv is undefined!")
                    }, t.prototype.componentWillUnmount = function() {
                        this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                    }, t.prototype.reset = function() {
                        var e = this.growDiv,
                            t = this.shrinkDiv,
                            n = this.growChildDiv.style;
                        n.width = "100000px", n.height = "100000px", e.scrollLeft = 1e5, e.scrollTop = 1e5, t.scrollLeft = 1e5, t.scrollTop = 1e5
                    }, t
                }(r.Component));
            n.d(t, "a", function() {
                return o
            })
        },
        MLDe: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return d
            }), n.d(t, "b", function() {
                return u
            }), n.d(t, "c", function() {
                return m
            }), n.d(t, "d", function() {
                return h
            });
            var i, r, a = n("/7QA"),
                o = n("wbMx"),
                s = n("2xye"),
                l = n("BQs+"),
                c = ((i = {})[o.b.Twitter] = "twitter", i[o.b.Reddit] = "reddit", i[o.b.VKontakte] = "vkontakte", i[o.b.Facebook] = "facebook", i[o.b.Copy] = "link", i[o.b.CopyInput] = "option_link", i[o.b.Download] = "download", i),
                d = {
                    MyClips: "MyClips",
                    ClipsOfMyChannel: "ClipsOfMyChannel"
                },
                u = {
                    Game: "TopClipsGame",
                    Channel: "TopClipsChannel"
                },
                p = ((r = {
                    MyClips: s.PageviewLocation.MyClipsManager,
                    ClipsOfMyChannel: s.PageviewLocation.ChannelClipsManager,
                    TopClipsGame: s.PageviewLocation.ClipsGame,
                    TopClipsChannel: s.PageviewLocation.ChannelClips
                })[s.PageviewLocation.ClipsEditing] = s.PageviewLocation.ClipsEditing, r[s.PageviewLocation.ClipsViewing] = s.PageviewLocation.ClipsViewing, r[s.PageviewLocation.ClipsWatchPage] = s.PageviewLocation.ClipsWatchPage, r),
                m = function(e, t, n, i, r) {
                    return function(o) {
                        a.p.tracking.track(s.SpadeEventType.VideoShare, {
                            vod_id: e,
                            vod_type: s.SpadeVideoBroadcastType.Clip,
                            share_platform: c[o],
                            location: p[r],
                            game: t,
                            channel_id: Number(n || 0),
                            channel: i,
                            live: null
                        })
                    }
                },
                h = function(e, t, n, i, r, o) {
                    return function() {
                        a.p.tracking.track(s.SpadeEventType.VideoShare, {
                            vod_id: e,
                            vod_type: s.SpadeVideoBroadcastType.Clip,
                            share_platform: l.a.Link,
                            location: p[r],
                            game: t,
                            channel_id: Number(n || 0),
                            channel: i,
                            live: null,
                            shared_item_url: o
                        })
                    }
                }
        },
        MPK0: function(e, t, n) {},
        MVDO: function(e, t, n) {},
        Madu: function(e, t, n) {},
        McYG: function(e, t, n) {
            "use strict";

            function i(e, t) {
                return "https://www.twitch.tv/" + t + "/clip/" + e
            }
            n.d(t, "a", function() {
                return i
            })
        },
        Mg1H: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("/7QA"),
                r = "esport_insider_pass_secondary_channel",
                a = function(e) {
                    return "esport_insider_pass_toggle_state_" + e.toLowerCase()
                };

            function o(e) {
                return i.m.get(a(e), !1)
            }

            function s(e, t) {
                i.m.set(a(e), t)
            }

            function l(e) {
                i.m.remove(a(e))
            }

            function c(e) {
                return i.b.get(r, "")
            }
        },
        Mj6i: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("yR8l"),
                o = n("0FG4"),
                s = n("D7An"),
                l = n("S4w9");

            function c() {
                return Object(a.a)(l, {
                    options: function(e) {
                        return {
                            variables: {
                                withOwner: "on" === r.p.experiments.getAssignment(s.b.EmotePickerV2)
                            }
                        }
                    },
                    props: function(e) {
                        if (e.data) {
                            var t = e.data.currentUser && e.data.currentUser.emoteSets || [],
                                n = t && Object(o.b)(t);
                            return {
                                emoteSetsData: i.__assign({}, e.data, {
                                    currentUser: e.data.currentUser || null,
                                    emoteMap: n,
                                    emoteSets: t
                                })
                            }
                        }
                        return {}
                    },
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                })
            }
        },
        NJiF: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "channelCurrentUser"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 54
                }
            };
            n.loc.source = {
                body: "fragment channelCurrentUser on User {\nid\ndisplayName\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        NNSq: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("sAMt");

            function o(e) {
                return i.__awaiter(this, void 0, Promise, function() {
                    var t, n;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                t = null, i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, , 4]), [4, r.p.apollo.client.query({
                                    query: a,
                                    variables: {
                                        login: e
                                    }
                                })];
                            case 2:
                                return t = i.sent(), [3, 4];
                            case 3:
                                return n = i.sent(), r.k.warn(n, "Failed to fetch user targeted by chat command.", {
                                    userLogin: e
                                }), [3, 4];
                            case 4:
                                return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                        }
                    })
                })
            }
        },
        NWfm: function(e, t, n) {},
        Nimz: function(e, t, n) {},
        OCTF: function(e, t, n) {},
        OXQr: function(e, t, n) {},
        OhOW: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("+U0Y"),
                o = n("5xw2");

            function s(e) {
                return e.userPreferences.languagePreferences
            }
            r.p.store.registerReducer("userPreferences", function(e, t) {
                switch (void 0 === e && (e = {
                    languagePreferences: Object(o.b)()
                }), t.type) {
                    case a.a:
                        return i.__assign({}, e, {
                            languagePreferences: t.languagePreferences
                        });
                    default:
                        return e
                }
            })
        },
        OpME: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return c
            }), n.d(t, "e", function() {
                return d
            }), n.d(t, "c", function() {
                return p
            }), n.d(t, "a", function() {
                return m
            }), n.d(t, "f", function() {
                return h
            }), n.d(t, "d", function() {
                return g
            });
            var i = n("mrSG"),
                r = n("lZdE"),
                a = n("cpJf"),
                o = {
                    "B-?\\)": "B)",
                    "\\:-?[z|Z|\\|]": ":|",
                    "\\:-?\\)": ":)",
                    "\\:-?\\(": ":(",
                    "\\:-?(p|P)": ":P",
                    "\\;-?(p|P)": ";P",
                    "\\:-?[\\\\/]": ":/",
                    "\\;-?\\)": ";)",
                    "R-?\\)": "R)",
                    ":>": ":>",
                    "\\:\\&gt\\;": ":>",
                    "[oO](_|\\.)[oO]": "O_o",
                    "\\:-?D": ":D",
                    "\\:-?(o|O)": ":O",
                    ">\\\\(": ">(",
                    ":-?(?:7|L)": ":7",
                    "\\:-?(S|s)": ":S",
                    "#-?[\\\\/]": "#/",
                    "<\\]": "<]",
                    "<3": "<3",
                    "\\&lt\\;3": "<3",
                    "\\&lt\\;\\]": "<]",
                    "\\&gt\\;\\(": ">("
                },
                s = ["1.0", "2.0", "3.0"],
                l = new Set([457, 33, 42, 0]);

            function c(e) {
                for (var t = [], n = function(e) {
                        if (!e || !e.id || !e.token) return "continue";
                        var n = o[e.token] || e.token,
                            r = s.reduce(function(t, n) {
                                var i = t;
                                return i && (i = i.concat(", ")), i.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x")
                            }, "");
                        t.push(i.__assign({
                            displayName: n,
                            srcSet: r
                        }, e))
                    }, r = 0, a = e; r < a.length; r++) {
                    n(a[r])
                }
                return t
            }

            function d(e, t) {
                var n = c(e);
                return t && (n = function(e, t) {
                    return e.map(function(e) {
                        return i.__assign({}, e, {
                            setID: t
                        })
                    })
                }(n, t)), n
            }

            function u(e) {
                return e.filter(function(e) {
                    return !!e && !!e.id && !!e.token
                }).sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            }

            function p(e) {
                for (var t = [], n = 0, i = e; n < i.length; n++) {
                    var r = i[n];
                    if (r && r.id && r.emotes) {
                        for (var a = {
                                id: r.id,
                                emotes: []
                            }, o = 0, s = r.emotes; o < s.length; o++) {
                            var l = s[o];
                            l && l.id && l.token && a.emotes.push(l)
                        }
                        t.push(a)
                    }
                }
                return t
            }

            function m(e) {
                for (var t = [], n = [], i = 0, r = e; i < r.length; i++) {
                    var a = r[i];
                    if (a && a.id && a.emotes) {
                        var o = {
                            id: a.id,
                            emotes: d(u(a.emotes), a.id)
                        };
                        a.owner && (o.owner = a.owner), l.has(parseInt(a.id, 10)) ? t.push(o) : n.push(o)
                    }
                }
                return n.concat(t)
            }
            var h = function(e, t, n) {
                    var i = n || a.d,
                        o = [],
                        s = [],
                        l = [],
                        c = new RegExp("^" + Object(r.a)(t), "i");
                    return e.forEach(function(e) {
                        i[e.token] ? l.push(e) : e.token.match(c) ? o.push(e) : s.push(e)
                    }), o.sort(function(e, t) {
                        return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                    }), s.sort(function(e, t) {
                        return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                    }), l.sort(function(e, t) {
                        return i[t.token].count - i[e.token].count
                    }), l.concat(o).concat(s)
                },
                g = function(e) {
                    var t = {};
                    return e.filter(function(e) {
                        return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                    })
                }
        },
        OvAg: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "IncomingRaidLine_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "50"
                                        }
                                    }],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 140
                }
            };
            n.loc.source = {
                body: "query IncomingRaidLine_Channel($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\ndisplayName\nprofileImageURL(width: 50)\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        Oy4H: function(e, t, n) {},
        PrJw: function(e, t, n) {
            "use strict";
            var i = n("vGFN");
            n.d(t, "a", function() {
                return i.b
            }), n.d(t, "b", function() {
                return i.c
            }), n.d(t, "c", function() {
                return i.d
            }), n.d(t, "d", function() {
                return i.e
            }), n.d(t, "e", function() {
                return i.f
            }), n.d(t, "f", function() {
                return i.g
            }), n.d(t, "g", function() {
                return i.h
            }), n.d(t, "h", function() {
                return i.i
            }), n.d(t, "i", function() {
                return i.j
            }), n.d(t, "j", function() {
                return i.k
            }), n.d(t, "k", function() {
                return i.m
            }), n.d(t, "l", function() {
                return i.p
            }), n.d(t, "m", function() {
                return i.q
            })
        },
        PtXu: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/7QA"),
                s = n("gcd7"),
                l = n("AKV8"),
                c = n("yzwe"),
                d = n("3HtZ"),
                u = n("QVaV"),
                p = n("vSeP"),
                m = n("Ue10"),
                h = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.modUser = function(e) {
                            var n = e.trim().split(/\s+/),
                                i = t.userLogin(n[0]);
                            return 1 === n.length && i && 0 !== i.length ? {
                                deferred: t.props.modUserMutation(i).then(function(e) {
                                    if (e.modUser.error) switch (e.modUser.error.code) {
                                        case l.a.Forbidden:
                                            return {
                                                notice: f()
                                            };
                                        case l.a.UserAlreadyModded:
                                            return {
                                                notice: Object(o.d)("{login} is already a moderator of this channel.", {
                                                    login: i
                                                }, "ModCommandHandler")
                                            };
                                        case l.a.UserBanned:
                                            return {
                                                notice: Object(o.d)("{login} is banned in this channel. You must unban this user before granting mod status.", {
                                                    login: i
                                                }, "ModCommandHandler")
                                            };
                                        case l.a.UserNotFound:
                                            return {
                                                notice: g(i)
                                            };
                                        default:
                                            return {
                                                notice: v()
                                            }
                                    }
                                    return {
                                        notice: Object(o.d)("You have added {login} as a moderator of this channel.", {
                                            login: i
                                        }, "ModCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: v()
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)('Usage: "/mod [login]" - Grant mod status to a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                                })
                            }
                        }, t.mods = function(e) {
                            return {
                                deferred: o.p.apollo.client.query({
                                    query: d,
                                    fetchPolicy: "network-only",
                                    variables: {
                                        id: t.props.channelID
                                    }
                                }).then(function(e) {
                                    if (!e.data.user) return {
                                        notice: b()
                                    };
                                    if (0 === e.data.user.mods.edges.length) return {
                                        notice: Object(o.d)("There are no moderators of this channel.", "ModCommandHandler")
                                    };
                                    var t = e.data.user.mods.edges.map(function(e) {
                                        return e.node.login
                                    }).join(", ");
                                    return {
                                        notice: Object(o.d)("The moderators of this channel are: {mods}.", {
                                            mods: t
                                        }, "ModCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: b()
                                    }
                                })
                            }
                        }, t.unmodUser = function(e) {
                            var n = e.trim().split(/\s+/),
                                i = t.userLogin(n[0]);
                            return 1 === n.length && i && 0 !== i.length ? {
                                deferred: t.props.unmodUserMutation(i).then(function(e) {
                                    if (e.unmodUser.error) switch (e.unmodUser.error.code) {
                                        case c.a.Forbidden:
                                            return {
                                                notice: f()
                                            };
                                        case c.a.UserNotFound:
                                            return {
                                                notice: g(i)
                                            };
                                        case c.a.UserNotMod:
                                            return {
                                                notice: Object(o.d)("{login} is currently not a moderator of this channel.", {
                                                    login: i
                                                }, "ModCommandHandler")
                                            };
                                        default:
                                            return {
                                                notice: k()
                                            }
                                    }
                                    return {
                                        notice: Object(o.d)("You have removed {login} as a moderator of this channel.", {
                                            login: i
                                        }, "ModCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: k()
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)('Usage: "/unmod [login]" - Revoke mod status from a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                                })
                            }
                        }, t.userLogin = function(e) {
                            return "@" === e[0] && (e = e.substr(1)), Object(u.b)(e) ? e : t.props.activeChattersAPI ? t.props.activeChattersAPI.getActiveChatterLoginFromDisplayName(e) || e : t.props.displayNameToLogin && t.props.displayNameToLogin(e) || e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(m.Ya, {
                            display: m.X.Hide
                        }, r.createElement(s.a, {
                            command: "mod",
                            handler: this.modUser
                        }), r.createElement(s.a, {
                            command: "mods",
                            handler: this.mods
                        }), r.createElement(s.a, {
                            command: "unmod",
                            handler: this.unmodUser
                        }))
                    }, t
                }(r.Component);

            function g(e) {
                return Object(o.d)("Invalid username: {login}", {
                    login: e
                }, "ModCommandHandler")
            }

            function f() {
                return Object(o.d)("You don't have permission to perform that action.", "ModCommandHandler")
            }

            function v() {
                return Object(o.d)("Unable to add moderator.", "ModCommandHandler")
            }

            function b() {
                return Object(o.d)("There was a problem fetching the list of mods.", "ModCommandHandler")
            }

            function k() {
                return Object(o.d)("Unable to remove moderator.", "ModCommandHandler")
            }
            var y = function(e) {
                    return {
                        channelID: e.channelID
                    }
                },
                C = Object(a.compose)(p.a, Object(c.b)(y), Object(l.b)(y))(h);
            n.d(t, "a", function() {
                return C
            })
        },
        "Pub/": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("HzXE");

            function r(e, t, n) {
                try {
                    return e.readQuery({
                        query: i,
                        variables: {
                            channelID: t,
                            targetUserID: n
                        }
                    })
                } catch (e) {}
            }
        },
        Q34B: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.LIVE = "LIVE", e.VIDEO = "VIDEO", e.COLLECTION = "COLLECTION", e.CLIP = "CLIP", e.NONE = "NONE"
                }(i || (i = {}))
        },
        Q94S: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = (n("cr+I"), n("+GjP")),
                a = n("vRsq"),
                o = n("2xye"),
                s = n("DMoW");

            function l(e, t, n, r) {
                var a = e && e.login;
                return i.__assign({
                    channel: a,
                    login: a,
                    channel_id: e && e.id || null,
                    game: function(e) {
                        return e && e.stream && e.stream.game && e.stream.game.name
                    }(e) || function(e) {
                        return e && e.game && e.game.name
                    }(t) || function(e) {
                        var t = p(e);
                        return t && t.game && t.game.name
                    }(n) || function(e) {
                        return e && e.lastBroadcast && e.lastBroadcast.game && e.lastBroadcast.game.name
                    }(e),
                    hosted_game: function(e) {
                        return e && e.hosting && e.hosting.stream && e.hosting.stream.game && e.hosting.stream.game.name
                    }(e),
                    is_following: !(!e || !e.self || null === e.self.follower || null === e.self.follower.node),
                    is_live: !!(e && e.stream && e.stream.id && e.stream.id.length > 0),
                    language: function(e) {
                        return e && e.hosting && e.hosting.broadcastSettings && e.hosting.broadcastSettings.language
                    }(e) || function(e) {
                        return e && e.broadcastSettings && e.broadcastSettings.language
                    }(e) || function(e) {
                        return e && e.language
                    }(t) || function(e) {
                        var t = p(e);
                        return t && t.language
                    }(n)
                }, function(e, t) {
                    var n = e && e.id,
                        i = t && t.id;
                    if (!n && !i) return null;
                    var r = null,
                        a = null;
                    e ? r = e.broadcastType : i && (a = o.SpadeVideoBroadcastType.Clip);
                    a || (a = r ? function(e) {
                        switch (e) {
                            case s.i.ARCHIVE:
                                return o.SpadeVideoBroadcastType.Archive;
                            case s.i.HIGHLIGHT:
                                return o.SpadeVideoBroadcastType.Highlight;
                            case s.i.UPLOAD:
                                return o.SpadeVideoBroadcastType.Upload;
                            case s.i.PAST_PREMIERE:
                                return o.SpadeVideoBroadcastType.PastPremiere;
                            case s.i.PREMIERE_UPLOAD:
                                return o.SpadeVideoBroadcastType.PremiereUpload;
                            default:
                                return e
                        }
                    }(r) : null);
                    return {
                        vod_type: a,
                        vod_id: n || i
                    }
                }(t, r))
            }

            function c(e) {
                return e.match.params.contentType === a.g.Clip && e.match.params.contentID || null
            }

            function d(e) {
                return e.match.params.videoID || e.match.params.contentType === a.g.Video && e.match.params.contentID || null
            }

            function u(e) {
                return e.match.params.collectionID ? e.match.params.collectionID : e.match.params.contentType === a.g.Collection && e.match.params.contentID ? e.match.params.contentID : Object(r.a)(e.location.search, "collection") || void 0
            }

            function p(e) {
                return e && e.items && e.items.edges && e.items.edges[0] && e.items.edges[0].node && e.items.edges[0].node.id ? e.items.edges[0].node : null
            }
            n.d(t, "d", function() {
                return l
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "e", function() {
                return d
            }), n.d(t, "b", function() {
                return u
            }), n.d(t, "c", function() {
                return p
            })
        },
        QdeI: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("q1tI"),
                r = n("L5dg"),
                a = n("Ue10"),
                o = function() {
                    return i.createElement(i.Fragment, null, i.createElement(a.cc, {
                        gutterSize: a.ec.Small,
                        childWidth: a.dc.Large,
                        placeholderItems: 20
                    }, i.createElement(r.a, null)))
                }
        },
        Qdho: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RoomSelector"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channelRooms"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "topic"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPreviewable"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "minimumAllowedRole"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "self"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isArchived"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isMuted"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isUnread"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "unreadMentionCount"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hosting"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "banStatus"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPermanent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isChannelMember"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isModerator"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 395
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/chat/models/cheer-fragment.gql"\nquery RoomSelector ($login: String!) {\nchannel: user(login: $login) {\nid\ndisplayName\nchannelRooms {\nname\nid\ntopic\nisPreviewable\nminimumAllowedRole\nself {\nisArchived\nisMuted\nisUnread\nunreadMentionCount\n}\n}\n...cheer\nhosting {\nid\n}\nself {\nbanStatus {\nisPermanent\n}\nisChannelMember\nisModerator\nsubscriptionBenefit {\nid\n}\n}\nstream {\nid\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("F9eG").definitions)), e.exports = i
        },
        Qime: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsPinnedCheerV2_Leaderboards"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "leaderboard"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "first"
                                                },
                                                value: {
                                                    kind: "IntValue",
                                                    value: "10"
                                                }
                                            }],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "leaderboardItem"
                                                    },
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "secondsRemaining"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "leaderboard"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isEnabled"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "timePeriodType"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bitsLeaderboardItem"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "rank"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "score"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "entryKey"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 350
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/bits/models/bits-leaderboard-item-fragment.gql"\nquery BitsPinnedCheerV2_Leaderboards($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\nleaderboard (first: 10) {\nid\n...leaderboardItem\nsecondsRemaining\n}\nsettings {\nleaderboard {\nisEnabled\ntimePeriodType\n}\n}\n}\nself {\nbitsLeaderboardItem {\nid\nrank\nscore\nentryKey\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("fhkr").definitions)), e.exports = i
        },
        QjI3: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("fvjX"),
                s = n("ZS2+"),
                l = n("UUve"),
                c = n("1/iK"),
                d = n("aCAx"),
                u = n("kRBY"),
                p = n("GnwI"),
                m = n("oJmH"),
                h = n("/7QA"),
                g = n("2+sX"),
                f = n("u5aL"),
                v = n("eJ65"),
                b = n("yR8l"),
                k = n("x7UT"),
                y = n("3Bft"),
                C = n("tIid"),
                S = n("ht6z"),
                E = n("/aPz"),
                N = n("KriR"),
                O = n("D7An"),
                _ = n("4rCz");
            var w, D = n("br9A"),
                I = n("Ue10"),
                T = (n("a7aT"), n("z+dA"));
            ! function(e) {
                e.SubButton = "subscribe-button__dropdown", e.BalloonLayerButton = "subscribe-button__balloon-layer-btn", e.DefaultButton = "subscribe-button__default-btn", e.SubscribeBalloon = "subscribe-button__subscribe-balloon"
            }(w || (w = {}));
            var M = s.a.wrap(function() {
                    return Promise.all([n.e(0), n.e(200)]).then(n.bind(null, "f+qK"))
                }, "SubscribeBalloon"),
                R = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            inPrimeRegion: !1
                        }, t.modalLevel = "top_page", t.renderBalloonContentForBalloonLayer = function() {
                            return r.createElement(f.a, {
                                onClickOut: t.handleBalloonClickOut
                            }, r.createElement(I.Ya, {
                                "data-a-target": "sub-balloon",
                                refDelegate: t.setBalloonContentRefDelegate
                            }, t.balloonWrapperContent))
                        }, t.handleButtonClick = function() {
                            t.balloonContentRef || (t.props.balloonLayer.show({
                                direction: t.getBalloonDirection(),
                                ref: t.containerRef,
                                content: t.renderBalloonContentForBalloonLayer(),
                                contentHeight: 0,
                                closeOnScroll: !0
                            }), t.handleMenuToggle(!1))
                        }, t.handleBalloonClickOut = function() {
                            t.handleMenuToggle(!0), t.props.balloonLayer.hide({
                                force: !0
                            })
                        }, t.setBalloonWrapperContent = function(e) {
                            t.balloonWrapperContent = e
                        }, t.handleSubMenuAction = function(e) {
                            new Set([D.a.ClickCheckout, D.a.BuyGiftSub, D.a.BuyMysteryGift, D.a.BuyCustomMysteryGift, D.a.BuyGiftToPaidUpgrade, D.a.BuyPaidUpgrade]).has(e.action) && t.checkAndDisplaySubscriptionCheckout();
                            var n = t.props.data,
                                i = n.user,
                                r = !!(i && i.self && i.self.subscriptionBenefit),
                                a = n.requestInfo && Object(S.a)(n.requestInfo.countryCode);
                            Object(D.b)({
                                action: e.action || "",
                                channelLogin: t.props.channelLogin || "",
                                channelID: i && i.id || "",
                                checkoutButtonTier: e.checkoutButtonTier,
                                hasSubCredit: i && i.self && i.self.canPrimeSubscribe,
                                hostChannelID: t.props.hostChannelID,
                                hostChannelLogin: t.props.hostChannelLogin,
                                isMenuOpen: e.action !== D.a.OpenSubMenu,
                                mysteryGiftCount: e.mysteryGiftCount,
                                sub_location: "channel_page",
                                modal: !r,
                                modalLevel: r ? "" : t.modalLevel.slice(),
                                showPrimeContent: a,
                                giftRecipient: e.giftRecipient || null
                            }), !e.modalLevel || e.action !== D.a.ClickMoreSubOptions && e.action !== D.a.ClickBack || (t.modalLevel = e.modalLevel)
                        }, t.handleMenuToggle = function(e) {
                            t.handleSubMenuAction({
                                action: e ? D.a.CloseSubMenu : D.a.OpenSubMenu
                            })
                        }, t.getBalloonDirection = function() {
                            var e = t.props.balloonDirection || I.v.BottomRight;
                            return t.props.hostChannelID && (e = I.v.TopLeft), e
                        }, t.setContainerRefDelegate = function(e) {
                            t.containerRef = e
                        }, t.setBalloonContentRefDelegate = function(e) {
                            t.balloonContentRef = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive(), this.checkAndDisplaySubscriptionCheckout()
                    }, t.prototype.componentDidUpdate = function(e) {
                        this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.props.data && !this.props.data.loading && this.props.reportInteractive(), !this.isUserDataReady(e) && this.isUserDataReady(this.props) && this.checkAndDisplaySubscriptionCheckout()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch()
                    }, t.prototype.componentWillUnmount = function() {
                        Object(l.e)()
                    }, t.prototype.render = function() {
                        var e = this.props.data;
                        if (!e || e.loading || e.error) return null;
                        var t = e.user;
                        if (!t) return null;
                        var n = t.self,
                            i = t.subscriptionProducts;
                        if (!i) return null;
                        var a = i.filter(function(e) {
                            return e
                        });
                        if (0 === a.length) return null;
                        if (this.props.hideEsportsSubscription && Object(C.a)(t.id || "", this.props.sessionUser)) return null;
                        var o = e.requestInfo && Object(S.a)(e.requestInfo.countryCode),
                            s = !(!n || !n.subscriptionBenefit),
                            l = Object(C.a)(t.id || "", this.props.sessionUser),
                            c = 1 === a.length;
                        a.some(function(e) {
                            return !e.emoteSetID
                        }) && (c = !0);
                        var d = null;
                        n && n.subscriptionBenefit && (d = n.subscriptionBenefit.purchasedWithPrime ? y.a.Prime : n.subscriptionBenefit.tier, this.modalLevel = "");
                        var u = function(e) {
                            if (e.isSubscribed) {
                                if (e.hasInsiderPass) return Object(_.d)("All-Access Pass", "SubscribeButton");
                                if (e.isNonStandardSub) return Object(_.d)("Subscribed", "SubscribeButton");
                                if (e.hostedDisplayName) return Object(_.d)("Subscribed to {username}", {
                                    username: e.hostedDisplayName
                                }, "SubscribeButton");
                                if ("control" !== _.q.experiments.getAssignment(O.b.SubsReanimator) && e.benefitIsDNRd && e.benefitEndsAt) {
                                    var t = new Date(e.benefitEndsAt),
                                        n = Math.round((t.getTime() - Date.now()) / 864e5);
                                    if (n <= 15 && n > 7) return Object(_.d)("Continue Sub", "SubscribeButton");
                                    if (n <= 7) return Object(_.d)("Continue Sub - {daysRemaining} Days Remaining", {
                                        daysRemaining: n
                                    }, "SubscribeButton")
                                }
                                return Object(_.d)("Gift A Sub", "SubscribeButton")
                            }
                            return e.hasInsiderPass ? Object(_.d)("Get the All-Access Pass", "SubscribeButton") : e.hostedDisplayName ? Object(_.d)("Subscribe to {username}", {
                                username: e.hostedDisplayName
                            }, "SubscribeButton") : Object(_.d)("Subscribe", "SubscribeButton")
                        }({
                            isSubscribed: s,
                            isNonStandardSub: c,
                            hasInsiderPass: l,
                            benefitIsDNRd: !(!n || !n.subscriptionBenefit) && n.subscriptionBenefit.isDNRd,
                            benefitEndsAt: n && n.subscriptionBenefit && n.subscriptionBenefit.endsAt,
                            hostedDisplayName: this.props.hostChannelID ? t.displayName || "" : void 0
                        });
                        if (s && c && !l) return r.createElement(I.z, {
                            disabled: !0,
                            ariaLabel: u,
                            icon: I.ub.Star
                        }, u);
                        var p = r.createElement(I.z, {
                                ariaLabel: u,
                                "data-a-target": s ? "subscribed-button" : "subscribe-button",
                                "data-test-selector": w.SubButton,
                                dropdown: !this.props.hideDropdownArrow,
                                fullWidth: !0,
                                icon: this.getButtonIcon(s, d),
                                onClick: this.props.renderBalloonInBalloonLayer ? this.handleButtonClick : void 0,
                                type: this.getButtonType(s)
                            }, u),
                            m = a[0];
                        return this.setBalloonWrapperContent(r.createElement(M, {
                            authToken: this.props.authToken,
                            channelLogin: this.props.channelLogin || "",
                            "data-test-selector": w.SubscribeBalloon,
                            handleSubMenuAction: this.handleSubMenuAction,
                            inPrimeRegion: o,
                            isEsportChannel: l,
                            isNonStandardSub: c,
                            isStaff: !(!this.props.sessionUser || !this.props.sessionUser.roles) && this.props.sessionUser.roles.isStaff,
                            isSubscribed: s,
                            productId: m ? m.id : "",
                            subbedTier: d || y.a.Prime,
                            userHasPrime: !1
                        })), this.props.renderBalloonInBalloonLayer ? r.createElement(I.Ya, {
                            "data-test-selector": w.BalloonLayerButton,
                            refDelegate: this.setContainerRefDelegate
                        }, p) : r.createElement(I.Ya, null, r.createElement(v.a, {
                            "data-test-selector": w.DefaultButton,
                            onToggle: this.handleMenuToggle
                        }, p, r.createElement(I.u, {
                            "data-a-target": "sub-balloon",
                            direction: this.getBalloonDirection(),
                            size: I.w.Large
                        }, this.balloonWrapperContent)))
                    }, t.prototype.getButtonType = function(e) {
                        I.F.Default;
                        return e && void 0 !== this.props.subscribedButtonType ? this.props.subscribedButtonType : e ? I.F.Success : this.props.unsubscribedButtonType || I.F.Default
                    }, t.prototype.getButtonIcon = function(e, t) {
                        var n = void 0;
                        return e ? n = t === y.a.Prime ? I.ub.Crown : I.ub.Star : this.props.forceIcon && (n = I.ub.StarHollow), n
                    }, t.prototype.isUserDataReady = function(e) {
                        return e.data && e.data.user && !e.data.loading && !e.data.error
                    }, t.prototype.checkAndDisplaySubscriptionCheckout = function() {
                        var e = h.n.get(l.c, "");
                        if (e) {
                            var t = this.props.data.user;
                            if (t && t.subscriptionProducts) t.subscriptionProducts.filter(function(e) {
                                return e
                            }).map(function(e) {
                                return e.name
                            }).includes(e) ? this.props.sessionUser ? this.props.showSubscriptionCheckoutModal({
                                isAnonymous: h.n.get(l.a, !1),
                                mysteryGiftCount: Number(h.n.get(l.b, "")),
                                productName: e,
                                recipientLogin: h.n.get(l.d, ""),
                                trackingContext: {
                                    source: N.c.ChannelSubscribeButton
                                }
                            }) : this.props.showLoginModal() : Object(l.e)()
                        }
                    }, t
                }(r.Component),
                L = Object(m.compose)(Object(b.a)(T, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(k.a)([{
                    topic: function(e) {
                        return Object(E.I)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }]), Object(g.e)())(R),
                F = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.reportInteractive = function() {
                            t.props.latencyTracking.reportInteractive()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(L, {
                            authToken: this.props.authToken,
                            balloonDirection: this.props.balloonDirection,
                            channelLogin: this.props.channelLogin,
                            forceIcon: this.props.forceIcon,
                            hideEsportsSubscription: this.props.hideEsportsSubscription,
                            hideDropdownArrow: this.props.hideDropdownArrow,
                            hostChannelID: this.props.hostChannelID,
                            hostChannelLogin: this.props.hostChannelLogin,
                            renderBalloonInBalloonLayer: this.props.renderBalloonInBalloonLayer,
                            reportInteractive: this.reportInteractive,
                            sessionUser: this.props.sessionUser,
                            showLoginModal: this.props.showLoginModal,
                            showSubscriptionCheckoutModal: this.props.showSubscriptionCheckoutModal,
                            subscribedButtonType: this.props.subscribedButtonType,
                            unsubscribedButtonType: this.props.unsubscribedButtonType,
                            updateContainerWidth: this.props.updateContainerWidth
                        })
                    }, t = i.__decorate([Object(p.b)("SubscribeButton")], t)
                }(r.Component);
            var j = Object(a.connect)(function(e) {
                return {
                    authToken: Object(u.a)(e),
                    sessionUser: Object(u.e)(e)
                }
            }, function(e) {
                return Object(o.bindActionCreators)({
                    showLoginModal: Object(l.f)(c.a.ChannelSubscriptionButton),
                    showSubscriptionCheckoutModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(d.d)(s.a, {
                            component: "CheckoutModal",
                            loader: function() {
                                return Promise.all([n.e(0), n.e(212)]).then(n.bind(null, "KJv/"))
                            },
                            componentProps: t
                        })
                    }
                }, e)
            })(F);
            n.d(t, !1, function() {
                return F
            }), n.d(t, "a", function() {
                return j
            }), n.d(t, !1, function() {
                return w
            }), n.d(t, !1, function() {
                return R
            }), n.d(t, !1, function() {
                return L
            })
        },
        QlOJ: function(e, t, n) {
            "use strict";
            var i, r = n("/MKj"),
                a = n("kRBY"),
                o = n("mrSG"),
                s = n("q1tI"),
                l = n("fvjX"),
                c = n("/7QA"),
                d = n("x7UT"),
                u = n("0Log"),
                p = n("/aPz"),
                m = n("f00E"),
                h = n("VJHF"),
                g = n("Ue10");
            ! function(e) {
                e.Title = "campaign-notification-card-title-selector", e.Footer = "campaign-notification-card-footer-selector"
            }(i || (i = {}));
            var f, v = function(e) {
                return s.createElement(g.Ya, {
                    fullWidth: !0
                }, s.createElement(g.Fb, {
                    position: g.kb.Relative,
                    background: g.r.Accent,
                    color: g.O.Overlay,
                    padding: 1,
                    fullWidth: !0
                }, e.title && s.createElement(g.Ya, {
                    textAlign: g.Sb.Center
                }, s.createElement(g.W, {
                    fontSize: g.Ca.Size5,
                    "data-test-selector": i.Title
                }, e.title)), s.createElement(g.Ya, {
                    position: g.kb.Absolute,
                    margin: {
                        right: 1
                    },
                    attachTop: !0,
                    attachRight: !0,
                    fullHeight: !0,
                    display: g.X.Flex,
                    alignItems: g.f.Center,
                    justifyContent: g.Xa.Center
                }, s.createElement(g.A, {
                    ariaLabel: Object(c.d)("Close Button", "CampaignNotificationCard"),
                    icon: g.ub.Close,
                    onClick: e.onClose,
                    overlay: !0
                }))), s.createElement(g.Fb, {
                    background: g.r.Alt,
                    padding: e.fullWidthChild ? 0 : 1,
                    fullWidth: !0
                }, e.children), e.footer && s.createElement(g.Fb, {
                    background: g.r.Alt2,
                    padding: 1,
                    "data-test-selector": i.Footer,
                    borderTop: !0,
                    fullWidth: !0
                }, e.footer), s.createElement(g.nb, {
                    animationDirection: g.ob.Down,
                    size: g.pb.Small,
                    animationDuration: 10,
                    onAnimationEnd: e.onProgressBarEnd
                }))
            };
            n("mXgU");
            ! function(e) {
                e.BenefactorMessage = "benefactor-message", e.RecipientMessage = "recipient-message", e.CheerbombReward = "cheerbomb-reward"
            }(f || (f = {}));
            var b, k = function(e) {
                    var t, n, i = [];
                    if (e.receiver === h.a.Benefactor) {
                        i = (a = e.rewardEvent).data.contents, n = y(i);
                        var r = a.data.nextMilestone ? a.data.nextMilestone.amount : 7;
                        t = s.createElement(g.W, {
                            "data-test-selector": f.BenefactorMessage
                        }, Object(c.d)("{numRewards, plural, one {Your cheer unlocked # common loot chest and shared {numShared} with random people in Chat!} other {Your cheer unlocked # common loot chests and shared {numShared} with random people in Chat!}}", {
                            numRewards: n,
                            numShared: r
                        }, "HGCCheerbomNotificationCard"))
                    } else {
                        var a;
                        i = (a = e.rewardEvent).data.contents, n = y(i);
                        var l = s.createElement(g.W, {
                            type: g.Wb.Span,
                            color: g.O.Link,
                            bold: !0
                        }, a.data.benefactor);
                        t = s.createElement(g.W, {
                            "data-test-selector": f.RecipientMessage
                        }, Object(c.d)("{numRewards, plural, one {Thanks to {benefactor}'s Cheer, you got # Heroes of the Storm common loot chest!} other {Thanks to {benefactor}'s Cheer, you got # Heroes of the Storm common loot chests!}}", {
                            benefactor: l,
                            numRewards: n
                        }, "HGCCheerbomNotificationCard"))
                    }
                    var d = Object(c.d)("{numRewards, plural, one {You got # loot chest!} other {You got # loot chests!}}", {
                            numRewards: n
                        }, "HGCCheerbombNotificationCard"),
                        u = [];
                    i.forEach(function(e) {
                        var t, n = e.imageURL || "https://d3aqoihi2n8ty8.cloudfront.net/hgc2018/trigger-rewards/CommonChest.png",
                            i = e.quantity || 1;
                        for (t = 0; t < i; t++) u.push(s.createElement(g.Ra, {
                            key: "HGCCheerbombNotificationCard-" + e.id + "-" + t,
                            margin: {
                                x: 1,
                                y: 2
                            },
                            display: g.X.InlineFlex
                        }, s.createElement(g.S, {
                            src: n,
                            srcSet: {
                                "112w": n
                            },
                            sizes: [{
                                size: "35px"
                            }],
                            alt: e.text,
                            "data-test-selector": f.CheerbombReward
                        })))
                    });
                    var p = s.createElement(g.Ya, {
                            className: "hgc-cheerbomb-notification-card__background",
                            textAlign: g.Sb.Center
                        }, s.createElement(g.Qa, {
                            padding: 1,
                            textAlign: g.Sb.Left
                        }, t), s.createElement(g.Ya, {
                            className: "hgc-cheerbomb-notification-card__loot-background"
                        }, s.createElement(g.Fb, {
                            margin: {
                                y: 1
                            },
                            display: g.X.InlineFlex,
                            justifyContent: g.Xa.Center,
                            flexWrap: g.Ba.Wrap
                        }, u))),
                        m = s.createElement(g.Fb, {
                            display: g.X.InlineFlex
                        }, s.createElement(g.z, {
                            type: g.F.Text,
                            onClick: e.onDontShowAgainClick
                        }, Object(c.d)("Don't show again", "HGCCheerbombNotificationCard")));
                    return s.createElement(v, o.__assign({}, e, {
                        title: d,
                        footer: m,
                        fullWidthChild: !0,
                        className: "hgc-cheerbomb-notification-card"
                    }), p)
                },
                y = function(e) {
                    return e.map(function(e) {
                        return e.quantity || 1
                    }).reduce(function(e, t) {
                        return e + t
                    }, 0)
                };
            n("5a1p");
            ! function(e) {
                e.RegularEmote = "regular-emote", e.LargeEmote = "large-emote", e.SpaceBackground = "space-background"
            }(b || (b = {}));
            var C, S = function(e) {
                var t = 1 === e.emotes.length,
                    n = Object(c.d)("You got an emote set!", "HGCEmoteNotificationCard");
                t && (n = Object(c.d)("You got an emote!", "HGCEmoteNotificationCard"));
                var i = null;
                if (t) i = s.createElement(g.Fb, {
                    display: g.X.Flex,
                    justifyContent: g.Xa.Center,
                    flexWrap: g.Ba.Wrap,
                    padding: {
                        x: 1,
                        y: 2
                    },
                    className: "hgc-emote-notification-card__space-bg",
                    "data-test-selector": b.SpaceBackground
                }, s.createElement("img", {
                    src: e.emotes[0].imageURL,
                    alt: e.emotes[0].text,
                    "data-test-selector": b.LargeEmote
                }));
                else {
                    var r = e.emotes.map(function(e) {
                        return s.createElement(g.Ya, {
                            key: "HGCEmoteNotificationCard-" + e.id,
                            padding: .5
                        }, s.createElement("img", {
                            className: "hgc-emote-notification-card__small-emote",
                            src: e.imageURL,
                            alt: e.text,
                            "data-test-selector": b.RegularEmote
                        }))
                    });
                    i = s.createElement(g.Fb, {
                        border: !0,
                        borderRadius: g.x.Small,
                        display: g.X.Flex,
                        background: g.r.Base,
                        justifyContent: g.Xa.Center,
                        flexWrap: g.Ba.Wrap
                    }, r)
                }
                var a = s.createElement(g.Fb, {
                    display: g.X.InlineFlex
                }, s.createElement(g.z, {
                    onClick: e.onCheerClick
                }, Object(c.d)("Cheer Again", "HGCEmoteNotificationCard")), s.createElement(g.z, {
                    type: g.F.Text,
                    onClick: e.onDontShowAgainClick
                }, Object(c.d)("Don't show again", "HGCEmoteNotificationCard")));
                return s.createElement(v, o.__assign({}, e, {
                    title: n,
                    footer: a,
                    fullWidthChild: t,
                    className: "hgc-emote-notification-card"
                }), i)
            };
            n("Madu");
            (C || (C = {})).RegularEmote = "regular-emote";
            var E = function(e) {
                    var t = Object(c.d)("You got an emote!", "EsportsNotificationCard"),
                        n = e.giftEvent.data.contents[0],
                        i = n.imageURL || "",
                        r = s.createElement(g.Ya, {
                            className: "owl-cheerbomb-recipient-notification-card__background",
                            padding: 1,
                            textAlign: g.Sb.Center
                        }, s.createElement(g.W, null, Object(c.d)("Thanks to {benefactor}'s Cheer, you got an emote!", {
                            benefactor: s.createElement(g.W, {
                                type: g.Wb.Span,
                                color: g.O.Link,
                                bold: !0
                            }, e.giftEvent.data.benefactor)
                        }, "EsportsNotificationCard")), s.createElement(g.Fb, {
                            margin: {
                                y: 1
                            },
                            padding: .5,
                            border: !0,
                            borderRadius: g.x.Medium,
                            background: g.r.Base,
                            display: g.X.InlineFlex
                        }, s.createElement(g.S, {
                            src: i,
                            srcSet: {
                                "112w": i
                            },
                            sizes: [{
                                size: "40px"
                            }],
                            alt: n.text,
                            "data-test-selector": C.RegularEmote
                        })), s.createElement(g.W, null, e.giftEvent.data.contents[0].text)),
                        a = s.createElement(g.Fb, {
                            display: g.X.InlineFlex
                        }, s.createElement(g.z, {
                            type: g.F.Text,
                            onClick: e.onDontShowAgainClick
                        }, Object(c.d)("Don't show again", "OWLCheerbombRecipientNotificationCard")));
                    return s.createElement(v, o.__assign({}, e, {
                        title: t,
                        footer: a,
                        fullWidthChild: !0,
                        className: "owl-cheerbomb-recipient-notification-card"
                    }), r)
                },
                N = {
                    backgroundColor: "#ff8902"
                },
                O = {
                    788301: {
                        backgroundColor: "#004A9C",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/BOS.svg",
                        displayName: "Boston Uprising"
                    },
                    788304: {
                        backgroundColor: "#0072CE",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/DAL.svg",
                        displayName: "Dallas Fuel"
                    },
                    788337: {
                        backgroundColor: "#AF272F",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/FLA.svg",
                        displayName: "Florida Mayhem"
                    },
                    788336: {
                        backgroundColor: "#381460",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/GLA.svg",
                        displayName: "LA Gladiators"
                    },
                    788324: {
                        backgroundColor: "#96CA4F",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/HOU.svg",
                        displayName: "Houston Outlaws"
                    },
                    788299: {
                        backgroundColor: "#59CBE8",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/LDN.svg",
                        displayName: "London Spitfire"
                    },
                    788309: {
                        backgroundColor: "#093692",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/NYE.svg",
                        displayName: "New York Excelsior"
                    },
                    788334: {
                        backgroundColor: "#F99D2A",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/PHI.svg",
                        displayName: "Philidelphia Fusion"
                    },
                    788332: {
                        backgroundColor: "#000000",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/SEO.svg",
                        displayName: "Seoul Dynasty"
                    },
                    788320: {
                        backgroundColor: "#FC4C02",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/SFS.svg",
                        displayName: "San Francisco Shock"
                    },
                    788329: {
                        backgroundColor: "#D22630ß",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/SHD.svg",
                        displayName: "Shanghai Dragons"
                    },
                    788314: {
                        backgroundColor: "#E5D456",
                        backgroundImage: "https://d3aqoihi2n8ty8.cloudfront.net/owl-2017/team-logos/VAL.svg",
                        displayName: "LA Valiant"
                    }
                };
            var _;
            n("DnH4");
            ! function(e) {
                e.SingleEmote = "single-emote", e.MultipleEmote = "multiple-emote"
            }(_ || (_ = {}));
            var w, D, I = function(e) {
                var t = e.rewardEvent.data.contents,
                    n = 1 === t.length,
                    i = Object(c.d)("You got an emote set!", "OWLEmoteNotificationCard");
                n && (i = Object(c.d)("You got an emote!", "OWLEmoteNotificationCard"));
                var r = null;
                if (n) {
                    var a = function(e) {
                        return O[e] ? O[e] : N
                    }(t[0].id);
                    r = s.createElement(s.Fragment, null, s.createElement(g.Qa, {
                        display: g.X.Block
                    }, s.createElement("svg", {
                        viewBox: "0 0 100 100",
                        height: "100",
                        width: "100%",
                        style: {
                            background: a.backgroundColor
                        },
                        "data-test-selector": _.SingleEmote
                    }, s.createElement("circle", {
                        className: "owl-emote-notification-card__circle",
                        cx: "50",
                        cy: "50",
                        r: "60"
                    }), s.createElement("image", {
                        xlinkHref: t[0].imageURL,
                        x: "50",
                        y: "50",
                        transform: "translate(-40 -40)",
                        height: "80",
                        width: "80"
                    }))), s.createElement(g.Qa, {
                        textAlign: g.Sb.Center,
                        padding: 1
                    }, s.createElement(g.W, null, t[0].text)))
                } else {
                    var l = e.rewardEvent.data,
                        d = l.nextMilestone,
                        u = d && d.amount > 0 || !1,
                        p = Object(c.d)("Your Cheer unlocked a Twitch emote set! Cheer 500 Bits to unlock another set and share emotes with Chat!", "OWLEmoteNotificationCard");
                    d && u && (p = l.contents.length > 0 ? Object(c.d)("Your Cheer unlocked a Twitch emote set and shared emotes with Chat!", "OWLEmoteNotificationCard") : Object(c.d)("Your Cheer shared emotes with Chat!", "OWLEmoteNotificationCard"));
                    var m = t.map(function(e) {
                        var t = e.imageURL || "";
                        return s.createElement(g.Qa, {
                            key: "OWLEmoteNotificationCard-" + e.id,
                            padding: .5
                        }, s.createElement(g.S, {
                            src: t,
                            srcSet: {
                                "112w": t
                            },
                            sizes: [{
                                size: "40px"
                            }],
                            alt: e.text,
                            "data-test-selector": _.MultipleEmote
                        }))
                    });
                    r = s.createElement(g.Ya, {
                        className: "owl-emote-notification-card__background",
                        padding: 1
                    }, s.createElement(g.Qa, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(g.W, null, p)), s.createElement(g.Fb, {
                        border: !0,
                        borderRadius: g.x.Small,
                        display: g.X.Flex,
                        background: g.r.Base,
                        justifyContent: g.Xa.Center,
                        flexWrap: g.Ba.Wrap
                    }, m))
                }
                var h = s.createElement(g.Fb, {
                    display: g.X.InlineFlex
                }, s.createElement(g.z, {
                    onClick: e.onCheerClick
                }, Object(c.d)("Cheer Again", "OWLEmoteNotificationCard")), s.createElement(g.z, {
                    type: g.F.Text,
                    onClick: e.onDontShowAgainClick
                }, Object(c.d)("Don't show again", "OWLEmoteNotificationCard")));
                return s.createElement(v, o.__assign({}, e, {
                    title: i,
                    footer: h,
                    fullWidthChild: !0,
                    className: "owl-emote-notification-card"
                }), r)
            };
            n("kXEd");
            (D || (D = {})).Container = "notification-container-selector";
            var T = "disabled-campaign-notifications",
                M = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            cards: [],
                            sessionGiftedEmoteIDs: []
                        }, t.popCard = function() {
                            t.setState(function(e) {
                                return {
                                    cards: e.cards.slice(1).slice()
                                }
                            })
                        }, t.onCardClose = function() {
                            t.popCard()
                        }, t.onCheerClick = function() {
                            t.popCard();
                            var e = document.querySelector('[data-a-target="bits-button"]');
                            e && e.click()
                        }, t.isDomainNotificationTypeDisabled = function(e) {
                            var n = c.m.get(T, []),
                                i = t.getKeyFromPubsubMessage(e);
                            return n.includes(i)
                        }, t.disableDomainNotificationType = function() {
                            var e = t.props.pubsub.messages.userNotificationEvent;
                            if (e) {
                                var n = c.m.get(T, []),
                                    i = t.getKeyFromPubsubMessage(e);
                                n.push(i), c.m.set(T, n)
                            }
                            t.popCard()
                        }, t.getKeyFromPubsubMessage = function(e) {
                            return e.data.domain + "-" + e.type + "-message"
                        }, t.onWorldCupGiftCheerClick = function() {
                            t.popCard();
                            var e = document.querySelector('[data-a-target="bits-button"]');
                            e && e.click()
                        }, t.getHgcCheererNotificationCard = function(e, n) {
                            return t.isHgcCheerbombEvent(e) ? s.createElement(k, {
                                rewardEvent: e,
                                receiver: n,
                                onCheerClick: t.onCheerClick,
                                onDontShowAgainClick: t.disableDomainNotificationType
                            }) : s.createElement(S, {
                                emotes: e.data.contents,
                                onCheerClick: t.onCheerClick,
                                onDontShowAgainClick: t.disableDomainNotificationType
                            })
                        }, t.isHgcCheerbombEvent = function(e) {
                            return e.data.domain === h.c && e.data.nextMilestone
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        var t = this,
                            n = [],
                            i = e.pubsub.messages.userNotificationEvent;
                        if (i && i !== this.props.pubsub.messages.userNotificationEvent && !this.isDomainNotificationTypeDisabled(i)) {
                            if (i.type === u.PubsubMessageType.UserCampaignRewardEvent) {
                                var r = i;
                                r.data.domain === h.c ? n.push(this.getHgcCheererNotificationCard(r, h.a.Benefactor)) : r.data.domain === h.f && n.push(s.createElement(I, {
                                    rewardEvent: r,
                                    onCheerClick: this.onCheerClick,
                                    onDontShowAgainClick: this.disableDomainNotificationType
                                }))
                            }
                            if (i.type === u.PubsubMessageType.UserGiftEvent) {
                                var a = i;
                                a.data.domain === h.f ? n.push(s.createElement(E, {
                                    giftEvent: a,
                                    onCheerClick: this.onCheerClick,
                                    onDontShowAgainClick: this.disableDomainNotificationType
                                })) : a.data.domain === h.c && n.push(s.createElement(k, {
                                    rewardEvent: a,
                                    receiver: h.a.Recipient,
                                    onCheerClick: this.onWorldCupGiftCheerClick,
                                    onDontShowAgainClick: this.disableDomainNotificationType
                                }))
                            }
                            n = n.map(function(e) {
                                return s.cloneElement(e, {
                                    key: Object(m.b)(),
                                    onClose: t.onCardClose,
                                    onProgressBarEnd: t.onCardClose
                                })
                            }), this.setState(function(e) {
                                return {
                                    cards: e.cards.concat(n)
                                }
                            })
                        }
                    }, t.prototype.render = function() {
                        var e = this.state.cards[0];
                        return e ? s.createElement(g.Fb, {
                            className: "campaign-notification",
                            position: g.kb.Absolute,
                            zIndex: g.jc.Above,
                            borderRadius: g.x.Large,
                            elevation: 3,
                            "data-test-selector": D.Container
                        }, e) : null
                    }, t
                }(s.Component),
                R = Object(l.compose)(Object(d.a)([{
                    topic: function(e) {
                        return Object(p.F)(e.user && e.user.id || "")
                    },
                    mapMessageTypesToProps: (w = {}, w[u.PubsubMessageType.UserGiftEvent] = "userNotificationEvent", w[u.PubsubMessageType.UserCampaignRewardEvent] = "userNotificationEvent", w),
                    skip: function(e) {
                        return !e.user || !e.user.id
                    }
                }]))(M);
            var L = Object(r.connect)(function(e) {
                return {
                    user: Object(a.e)(e)
                }
            })(R);
            n.d(t, "a", function() {
                return L
            })
        },
        QlRw: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.NorthAmerica = "us", e.Europe = "eu", e.Korea = "kr", e.Taiwan = "tw", e.China = "cn", e.SouthEastAsia = "sea"
                }(i || (i = {}))
        },
        R2Ti: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_AllowRejectedCheerMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "AllowRejectedCheerInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "allowRejectedCheer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 118
                }
            };
            n.loc.source = {
                body: "mutation Chat_AllowRejectedCheerMessage($input: AllowRejectedCheerInput!) {\nallowRejectedCheer(input: $input) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        R4sh: function(e, t, n) {
            "use strict";

            function i(e) {
                var t = [e[0], e[1], e[2]].map(function(e) {
                    return (e /= 255) <= .03928 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4)
                });
                return .2126 * t[0] + .7152 * t[1] + .0722 * t[2]
            }

            function r(e, t) {
                var n = i(e) + .05,
                    r = i(t) + .05;
                return n > r ? n / r : r / n
            }
            n.d(t, "a", function() {
                return r
            })
        },
        RCUI: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("/MKj"),
                o = n("9C/b"),
                s = n("fvjX"),
                l = n("1/iK"),
                c = n("aCAx"),
                d = n("y5D0"),
                u = n("jsEL"),
                p = n("/HY+"),
                m = n("q1tI"),
                h = n("oJmH"),
                g = n("eJ65"),
                f = n("yR8l"),
                v = n("DMoW"),
                b = n("4rCz"),
                k = n("GnwI"),
                y = n("RQ6e"),
                C = n("aJDl"),
                S = n("Ue10"),
                E = n("y8iI");
            ! function(e) {
                e.ClipOptionsButton = "clip-options-button", e.ClipOptionsContainer = "clip-options-container", e.ReportButton = "report", e.DeleteAllButton = "delete-all", e.DeleteButton = "delete", e.BanUserButton = "ban-user", e.TimeOutButton = "timeout-user"
            }(i || (i = {}));
            var N = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleReportModalClose = function(e) {
                            (e === y.a.MutationError || e === y.a.Success) && t.props.history.push("/")
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return m.createElement(g.a, null, m.createElement(S.A, {
                            "data-test-selector": i.ClipOptionsButton,
                            type: S.C.Hollow,
                            icon: S.ub.More,
                            ariaLabel: Object(b.d)("Clip Options", "ClipOptions"),
                            disabled: !this.props.clip
                        }), this.props.clip ? m.createElement(S.u, {
                            direction: S.v.TopRight
                        }, m.createElement(S.Fb, {
                            padding: {
                                y: 1
                            },
                            color: S.O.Link
                        }, m.createElement("ul", {
                            "data-test-selector": i.ClipOptionsContainer
                        }, this.renderReportOption(this.props.clip), this.renderDeleteOption(this.props.clip), this.renderDeleteAllOption(this.props.clip), this.renderBanUserOption(this.props.clip), this.renderTimeOutUserOption(this.props.clip)))) : m.createElement(S.u, null))
                    }, t.prototype.renderDeleteOption = function(e) {
                        var t = this;
                        if (this.isCurator(e) || this.isBroadcaster(e) || this.isStafforSiteAdmin()) {
                            var n = {
                                onClick: function() {
                                    t.props.onDeleteClipClick({
                                        slug: e.slug,
                                        onClose: t.props.onCloseModal
                                    })
                                },
                                type: S.Wa.Alert
                            };
                            return m.createElement(C.a, {
                                key: "delete-option",
                                interactableProps: n,
                                testSelector: i.DeleteButton
                            }, Object(b.d)("Delete", "ClipOptions"))
                        }
                    }, t.prototype.renderDeleteAllOption = function(e) {
                        var t = this;
                        if (this.isBroadcaster(e) || this.isStafforSiteAdmin()) {
                            var n = {
                                type: S.Wa.Alert,
                                onClick: function() {
                                    t.props.onDeleteAllClipsClick({
                                        slug: e.slug,
                                        onClose: t.props.onCloseModal
                                    })
                                }
                            };
                            return m.createElement(C.a, {
                                key: "delete-all-option",
                                interactableProps: n,
                                testSelector: i.DeleteAllButton
                            }, Object(b.d)("Delete All Clips from Video", "ClipOptions"))
                        }
                    }, t.prototype.renderReportOption = function(e) {
                        var t = this,
                            n = {
                                onClick: function() {
                                    t.props.data.currentUser ? t.props.onReportClick({
                                        onClose: t.handleReportModalClose,
                                        reportContext: {
                                            contentType: v.N.CLIP_REPORT,
                                            contentID: e.slug,
                                            targetUserID: t.getBroadcasterID(e),
                                            additionalTrackingID: t.getcuratorID(e)
                                        },
                                        title: Object(b.d)("Report this Clip", "ClipsOptions")
                                    }) : t.props.onShowLogin()
                                }
                            };
                        return m.createElement(C.a, {
                            key: "report-option",
                            interactableProps: n,
                            testSelector: i.ReportButton
                        }, Object(b.d)("Report", "ClipOptions"))
                    }, t.prototype.renderBanUserOption = function(e) {
                        var t = this;
                        if (this.isBroadcaster(e) || this.isStafforSiteAdmin()) {
                            var n = {
                                login: "",
                                displayName: ""
                            };
                            e.curator && e.curator.login && e.curator.displayName && (n = {
                                login: e.curator.login,
                                displayName: e.curator.displayName
                            });
                            var r = {
                                onClick: function() {
                                    t.props.onBanClick({
                                        targetUser: n,
                                        broadcasterID: t.getBroadcasterID(e),
                                        onClose: t.props.onCloseModal
                                    })
                                },
                                type: S.Wa.Alert
                            };
                            return m.createElement(C.a, {
                                key: "ban-option",
                                interactableProps: r,
                                testSelector: i.BanUserButton
                            }, Object(b.d)("Ban User", "ClipOptions"))
                        }
                    }, t.prototype.renderTimeOutUserOption = function(e) {
                        var t = this;
                        if (this.isBroadcaster(e) || this.isStafforSiteAdmin()) {
                            var n = {
                                login: "",
                                displayName: ""
                            };
                            e.curator && e.curator.login && e.curator.displayName && (n = {
                                login: e.curator.login,
                                displayName: e.curator.displayName
                            });
                            var r = {
                                onClick: function() {
                                    t.props.onTimeOutClick({
                                        targetUser: n,
                                        broadcasterID: t.getBroadcasterID(e),
                                        onClose: t.props.onCloseModal
                                    })
                                },
                                type: S.Wa.Alert
                            };
                            return m.createElement(C.a, {
                                key: "timeout-option",
                                interactableProps: r,
                                testSelector: i.TimeOutButton
                            }, Object(b.d)("Timeout User (24 hr)", "ClipOptions"))
                        }
                    }, t.prototype.isCurator = function(e) {
                        return !(!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.currentUser) && this.props.data.currentUser.id === this.getcuratorID(e)
                    }, t.prototype.isBroadcaster = function(e) {
                        return !(!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.currentUser) && this.props.data.currentUser.id === this.getBroadcasterID(e)
                    }, t.prototype.isStafforSiteAdmin = function() {
                        return !(!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.currentUser || !this.props.data.currentUser.roles) && (this.props.data.currentUser.roles.isStaff || this.props.data.currentUser.roles.isSiteAdmin)
                    }, t.prototype.getBroadcasterID = function(e) {
                        return e.broadcaster && e.broadcaster.id ? e.broadcaster.id : ""
                    }, t.prototype.getcuratorID = function(e) {
                        return e.curator && e.curator.id ? e.curator.id : ""
                    }, t
                }(m.Component),
                O = Object(h.compose)(Object(f.a)(E, {
                    skip: function(e) {
                        return null === e.clip
                    }
                }), Object(k.b)("ClipsOptions", {
                    autoReportInteractive: !0
                }))(N);
            n.d(t, "a", function() {
                return _
            });
            var _ = Object(a.connect)(null, function(e) {
                return Object(s.bindActionCreators)({
                    onShowLogin: function() {
                        return Object(d.e)(l.a.ClipsOptions)
                    },
                    onDeleteClipClick: function(e) {
                        return Object(c.d)(u.d, {
                            slug: e.slug,
                            onClose: e.onClose
                        })
                    },
                    onDeleteAllClipsClick: function(e) {
                        return Object(c.d)(u.e, {
                            slug: e.slug,
                            onClose: e.onClose
                        })
                    },
                    onReportClick: function(e) {
                        var t = r.__rest(e, []);
                        return Object(c.d)(p.a, t)
                    },
                    onBanClick: function(e) {
                        return Object(c.d)(u.b, {
                            targetUser: e.targetUser,
                            broadcasterID: e.broadcasterID,
                            isTemporary: !1,
                            onClose: e.onClose
                        })
                    },
                    onTimeOutClick: function(e) {
                        return Object(c.d)(u.b, {
                            targetUser: e.targetUser,
                            broadcasterID: e.broadcasterID,
                            isTemporary: !0,
                            onClose: e.onClose
                        })
                    },
                    onCloseModal: c.c
                }, e)
            })(Object(o.a)(O))
        },
        RNNG: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return s
            }), n.d(t, "f", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "d", function() {
                return d
            }), n.d(t, "e", function() {
                return u
            }), n.d(t, "a", function() {
                return p
            });
            var i = n("mrSG"),
                r = n("DpwM"),
                a = Number.MAX_VALUE,
                o = Number.MIN_VALUE,
                s = function(e) {
                    return i.__assign({
                        commentCount: 0,
                        maxOffset: o,
                        minOffset: a,
                        parentComments: {},
                        offsets: {},
                        replies: {}
                    }, e)
                },
                l = function(e, t) {
                    var n = h(e);
                    return t.forEach(function(e) {
                        var t, r = e.id,
                            a = e.contentOffset,
                            o = e.parentId;
                        if ("" === o) {
                            n.minOffset = Math.min(n.minOffset, a), n.maxOffset = Math.max(n.maxOffset, a), n.parentComments = i.__assign({}, n.parentComments, ((t = {})[r] = e, t));
                            var s = n.offsets[a];
                            Array.isArray(s) ? s.includes(r) || (n.offsets[a] = s.concat(r), n.commentCount++) : (n.offsets[a] = [r], n.commentCount++)
                        } else {
                            var l = n.replies[o];
                            if (Array.isArray(l)) {
                                var c = l.findIndex(function(t) {
                                    return t.id === e.id
                                }); - 1 !== c ? l[c] = e : (n.replies[o] = l.concat(e), n.commentCount++)
                            } else n.replies[o] = [e], n.commentCount++
                        }
                    }), n
                },
                c = function(e, t) {
                    if (t in e.parentComments) return e.parentComments[t]
                },
                d = function(e, t) {
                    var n = h(e);
                    return Object(r.h)(t) ? v(n, t.parentId, t.id) : f(n, t.id)
                },
                u = function(e, t) {
                    if (e.commentCount < t || m(e)) return e;
                    for (var n = e; n.commentCount > t && !m(e);) n = b(n, n.minOffset);
                    return n
                },
                p = function(e, t) {
                    var n = h(e);
                    return Object.keys(e.parentComments).forEach(function(i) {
                        var r = e.parentComments[i];
                        t(r) || (n = f(n, r.id))
                    }), Object.keys(e.replies).forEach(function(i) {
                        e.replies[i].forEach(function(e) {
                            t(e) || (n = v(n, e.id, e.parentId))
                        })
                    }), n
                },
                m = function(e) {
                    return e.minOffset === e.maxOffset
                },
                h = function(e) {
                    return {
                        commentCount: e.commentCount,
                        maxOffset: e.maxOffset,
                        minOffset: e.minOffset,
                        offsets: g(e.offsets),
                        parentComments: i.__assign({}, e.parentComments),
                        replies: i.__assign({}, e.replies)
                    }
                },
                g = function(e) {
                    return Object.keys(e).reduce(function(t, n) {
                        return t[Number(n)] = e[Number(n)].slice(), t
                    }, {})
                },
                f = function(e, t) {
                    if (!(t in e.parentComments)) return e;
                    var n = e.parentComments[t].contentOffset,
                        i = e.offsets[n],
                        r = [];
                    if (i && (r = i.filter(function(e) {
                            return e !== t
                        })), e.offsets[n] = r, delete e.parentComments[t], e.commentCount--, t in e.replies) {
                        var a = e.replies[t].length;
                        delete e.replies[t], e.commentCount -= a
                    }
                    return e
                },
                v = function(e, t, n) {
                    if (!(t in e.replies)) return e;
                    var i = e.replies[t].length,
                        r = e.replies[t].filter(function(e) {
                            if (e.id !== n) return e
                        });
                    e.replies[t] = r, 0 === r.length && delete e.replies[t];
                    var a = i - r.length;
                    return e.commentCount -= a, e
                },
                b = function(e, t) {
                    return t >= e.minOffset && t <= e.maxOffset && !m(e) ? (t in e.offsets && e.offsets[t].forEach(function(t) {
                        e = f(e, t)
                    }), delete e.offsets[t], e.maxOffset === t ? e.maxOffset-- : e.minOffset === t && e.minOffset++, e) : e
                }
        },
        RQ6e: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("TSYQ"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("fvjX"),
                l = n("yR8l"),
                c = n("GnwI");
            var d = n("Ue10"),
                u = n("gIsd"),
                p = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleChange = function(e) {
                            t.props.onChange && t.props.onChange(e.target.value)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                        this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = null,
                            t = Object(o.d)("Select One...", "ReportUserModal");
                        this.props.data.loading ? e = [a.createElement("option", {
                            key: "Loading"
                        }, Object(o.d)("Loading...", "ReportReasonsSelect"))] : e = (this.props.data.reportReasons || [{
                            id: "other",
                            text: Object(o.d)("Other Terms of Service Violation", "ReportUserModal")
                        }]).map(function(e) {
                            return a.createElement("option", {
                                key: e.id,
                                value: e.id
                            }, e.text)
                        });
                        return a.createElement(d.Ya, {
                            margin: {
                                bottom: 2
                            }
                        }, a.createElement(d.Ea, {
                            id: "reporting-modal__select",
                            label: Object(o.d)("Select Reason (required)", "ReportUserModal")
                        }, a.createElement(d.Ab, {
                            id: "reporting-modal__select",
                            "data-test-selector": "reporting-modal.select",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.handleChange,
                            defaultValue: t
                        }, a.createElement("option", {
                            disabled: !0,
                            key: "default"
                        }, t), e)))
                    }, t
                }(a.Component),
                m = Object(s.compose)(Object(l.a)(u, {
                    options: function(e) {
                        return {
                            variables: {
                                content: e.reportContentType
                            }
                        }
                    }
                }), Object(c.b)("ReportReasonSelect"))(p);
            n("y4Ne");
            n.d(t, "a", function() {
                return h
            }), n.d(t, "b", function() {
                return g
            });
            var h;
            ! function(e) {
                e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError", e[e.UserError = 4] = "UserError"
            }(h || (h = {}));
            var g = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        description: "",
                        reason: null
                    }, t.headerMessage = Object(o.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: a.createElement("br", null),
                        tosLink: a.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(o.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.handleSubmit = function(e) {
                        e.preventDefault(), t.state.reason && t.state.description.length > 0 ? t.props.onSubmit(t.state.reason || "", t.state.description) : t.props.onError(h.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        t.setState({
                            reason: e
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(d.Ya, {
                        display: d.X.Flex,
                        flexDirection: d.Aa.Column,
                        alignItems: d.f.Center,
                        justifyContent: d.Xa.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === h.Success ? a.createElement("div", null, a.createElement(d.z, {
                        onClick: this.props.onClose
                    }, a.createElement(d.Ya, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Close", "ReportUser")))) : a.createElement("div", null, a.createElement(d.Ya, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        },
                        "data-a-target": "reporting-channel-name"
                    }, a.createElement(d.W, {
                        type: d.Wb.H4
                    }, this.props.title), a.createElement(d.Fb, {
                        color: d.O.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), a.createElement("form", null, a.createElement(d.Fb, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, a.createElement(m, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), a.createElement(d.Ea, {
                        id: "reporting__text-area",
                        label: Object(o.d)("Description (required)", "ReportUser")
                    }, a.createElement(d.Tb, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), a.createElement(d.Fb, {
                        display: d.X.Flex,
                        justifyContent: d.Xa.Center
                    }, a.createElement(d.z, {
                        onClick: this.handleSubmit
                    }, a.createElement(d.Ya, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Send", "ReportUser"))))))
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case h.FormError:
                            e = Object(o.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case h.MutationError:
                            e = Object(o.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case h.Success:
                            e = Object(o.d)("Thank you for your report.", "ReportUser");
                            break;
                        case h.UserError:
                            e = Object(o.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = r({
                        "reporting__error-container": this.props.submitStatus !== h.Success,
                        "reporting__success-container": this.props.submitStatus === h.Success
                    });
                    return a.createElement(d.Fb, {
                        className: t,
                        fullWidth: this.props.submitStatus !== h.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(a.Component)
        },
        RTtf: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "channelVideo"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Video"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcastType"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "description"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "lengthSeconds"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "publishedAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "viewCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "scope"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "previewThumbnailURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "126"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "71"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "boxArtURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "138"
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "190"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "owner"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "language"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 291
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/channel/queries/channel.gql"\nfragment channelVideo on Video {\nid\nbroadcastType\ntitle\ndescription\nlengthSeconds\npublishedAt\nviewCount\nscope\npreviewThumbnailURL(width: 126 height: 71)\ngame {\nid\nboxArtURL(width: 138 height: 190)\nname\n}\nowner {\n...channel\n}\nlanguage\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("BbLt").definitions)), e.exports = i
        },
        RXle: function(e, t, n) {
            "use strict";
            var i = n("86FS");
            n.d(t, "VideoPreviewCard", function() {
                return i.a
            });
            n("0T/G");
            var r = n("0Rl0");
            n.d(t, "VideoPreviewCardPlaceholder", function() {
                return r.a
            })
        },
        RsJ2: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("VwyG"),
                o = n("Ue10"),
                s = function(e) {
                    return i.createElement(a.a, {
                        ownerLogin: e.channelLogin,
                        permittedRoles: {
                            owner: !0,
                            editor: !0,
                            staff: !0
                        }
                    }, function(t) {
                        return t.permitted ? i.createElement(o.z, {
                            type: o.F.Hollow,
                            linkTo: "/" + e.channelLogin + "/manager/collections"
                        }, Object(r.d)("Manage your collections", "collection-page")) : null
                    })
                }
        },
        RuiO: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Core_Services_Spade_SubEvent_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withVideo"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "canPrimeSubscribe"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tier"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "purchasedWithPrime"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "withVideo"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 266
                }
            };
            n.loc.source = {
                body: "query Core_Services_Spade_SubEvent_User($channelID: ID! $withVideo: Boolean! $videoID: ID) {\nuser(id: $channelID) {\nid\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\ntier\npurchasedWithPrime\n}\n}\n}\nvideo(id: $videoID) @include(if: $withVideo) {\nid\nbroadcastType\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        S4w9: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "UserEmotes"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withOwner"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emoteSets"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "owner"
                                            },
                                            arguments: [],
                                            directives: [{
                                                kind: "Directive",
                                                name: {
                                                    kind: "Name",
                                                    value: "include"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "if"
                                                    },
                                                    value: {
                                                        kind: "Variable",
                                                        name: {
                                                            kind: "Name",
                                                            value: "withOwner"
                                                        }
                                                    }
                                                }]
                                            }],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "profileImageURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "28"
                                                        }
                                                    }],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 182
                }
            };
            n.loc.source = {
                body: "query UserEmotes ($withOwner: Boolean!) {\ncurrentUser {\nid\nemoteSets {\nid\nemotes {\nid\ntoken\n}\nowner @include(if: $withOwner) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 28)\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        S58p: function(e, t, n) {},
        SWMh: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("mrSG"),
                r = n("b6Yk"),
                a = function(e, t, n) {
                    return i.__awaiter(void 0, void 0, Promise, function() {
                        var a, o;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    a = null, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, r.a.get("/v5/videos/" + e + "/markers")];
                                case 2:
                                    return (o = i.sent()).body && o.body.markers.game_changes && (a = o.body.markers.game_changes.sort(function(e, t) {
                                        return e.time - t.time
                                    }).map(function(e, n, i) {
                                        var r = i[n + 1];
                                        return {
                                            duration: r ? r.time - e.time : t - e.time,
                                            offset: e.time,
                                            label: e.label,
                                            thumbnailUrl: e.thumbnail.sheet_url,
                                            videoID: o.body.vod_id
                                        }
                                    }), n && n.boxArtURL && a.unshift({
                                        duration: a[0].offset,
                                        videoID: e,
                                        offset: 0,
                                        label: n.name,
                                        thumbnailUrl: n.boxArtURL
                                    })), [3, 4];
                                case 3:
                                    return i.sent(), [3, 4];
                                case 4:
                                    return [2, a || []]
                            }
                        })
                    })
                }
        },
        SceP: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ClipsChatCard_Clip"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slug"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "thumbnailURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "url"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "curator"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcaster"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 151
                }
            };
            n.loc.source = {
                body: "query ClipsChatCard_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nthumbnailURL\ntitle\nslug\nurl\ncurator {\nid\ndisplayName\n}\nbroadcaster {\nid\ndisplayName\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        Sfdh: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("4rCz");

            function r() {
                return {
                    messageCreatedTooQuickError: Object(i.d)("Your message was not sent because you are sending messages too quickly.", "format-error-messages"),
                    chatReplayFilterError: Object(i.d)("Your message has been posted. However, other messages posted after the live stream are hidden.", "format-error-messages")
                }
            }
        },
        T7Bf: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Drops_ChannelDrops_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "isLoggedIn"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "self"
                                                    },
                                                    arguments: [],
                                                    directives: [{
                                                        kind: "Directive",
                                                        name: {
                                                            kind: "Name",
                                                            value: "include"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "if"
                                                            },
                                                            value: {
                                                                kind: "Variable",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isLoggedIn"
                                                                }
                                                            }
                                                        }]
                                                    }],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isDropsLinked"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "activeDropCampaigns"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "connectionURL"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "applicableChannels"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStreamDropsEnabled"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 281
                }
            };
            n.loc.source = {
                body: "query Drops_ChannelDrops_User($login: String! $isLoggedIn: Boolean!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nstream {\nid\ngame {\nid\nself @include(if: $isLoggedIn) {\nisDropsLinked\n}\nactiveDropCampaigns{\nconnectionURL\napplicableChannels {\nid\n}\n}\n}\nisStreamDropsEnabled\ntype\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        TApp: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("ZtEv"),
                r = n("aF6k");

            function a(e) {
                return {
                    type: i.b.Info,
                    id: Object(r.a)("info"),
                    message: e
                }
            }
        },
        TOso: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("cMjZ"),
                o = n("geRD"),
                s = n("f00E"),
                l = n("DMoW"),
                c = n("U1yz"),
                d = n("xXlL"),
                u = n("a1OF");
            var p, m = n("3YIm"),
                h = n("NMMG"),
                g = n("Vl9+");

            function f(e) {
                var t = e.currentUserID,
                    n = e.emotes,
                    p = e.message,
                    f = e.recipientUserID;
                if ("" === t || "" === p || "" === f) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
                var v = Object(s.b)(),
                    b = i.__assign({
                        mutation: m
                    }, Object(o.a)({
                        message: p,
                        nonce: v,
                        recipientUserID: f
                    })),
                    k = Object(h.a)(t, f),
                    y = Object(c.a)(r.p.apollo.client.cache, k, !0);
                if (y) {
                    var C = function(e, t) {
                        for (var n = [], i = /\S+/g, r = i.exec(e); r;) {
                            var a = r[0],
                                o = t[a];
                            if (o) {
                                var s = Object(u.c)(e.slice(0, r.index)),
                                    l = s ? s.length : r.index;
                                n.push({
                                    id: o.id,
                                    start: l,
                                    end: l + a.length - 1
                                })
                            }
                            r = i.exec(e)
                        }
                        return n
                    }(p, n).map(d.a);
                    b.optimisticResponse = {
                        sendWhisper: {
                            __typename: "SendWhisperPayload",
                            message: {
                                content: {
                                    content: p,
                                    emotes: C,
                                    __typename: "MessageBody"
                                },
                                from: {
                                    id: t,
                                    __typename: "User"
                                },
                                id: v,
                                nonce: v,
                                sentAt: (new Date).toISOString(),
                                deletedAt: null,
                                editedAt: null,
                                thread: {
                                    id: k,
                                    __typename: "WhisperThread",
                                    participants: [{
                                        id: t,
                                        __typename: "User",
                                        self: {
                                            __typename: "UserSelfConnection",
                                            whisperPermissions: {
                                                receive: l.Da.NOT_PERMITTED,
                                                __typename: "WhisperPermissions"
                                            }
                                        }
                                    }, {
                                        id: f,
                                        __typename: "User",
                                        self: {
                                            __typename: "UserSelfConnection",
                                            whisperPermissions: {
                                                receive: l.Da.PERMITTED,
                                                __typename: "WhisperPermissions"
                                            }
                                        }
                                    }]
                                },
                                __typename: "WhisperMessage"
                            },
                            error: null
                        }
                    }, b.update = function(e, t) {
                        if (t.data) {
                            var n = t.data;
                            if (n.sendWhisper.message && !n.sendWhisper.error) {
                                var r = n.sendWhisper.message,
                                    o = Object(c.a)(e, k);
                                if (o) {
                                    var s = o.messages.edges.findIndex(function(e) {
                                        return e.node.id === v || e.node.nonce === v || e.node.id === r.id
                                    });
                                    if (s < 0) {
                                        var l = {
                                            cursor: (1 + y.messages.edges.reduce(function(e, t) {
                                                return Math.max(parseInt(t.cursor, 10), e)
                                            }, 0)).toString(),
                                            node: r,
                                            __typename: "WhisperMessageEdge"
                                        };
                                        o.messages.edges.unshift(l)
                                    } else o.messages.edges[s].node = r;
                                    o.userLastMessageRead && (o.userLastMessageRead.sentAt = r.sentAt), o.unreadMessagesCount = 0, e.writeFragment({
                                        id: Object(a.a)(o),
                                        fragment: g,
                                        data: i.__assign({}, o)
                                    })
                                }
                            }
                        }
                    }
                }
                return r.p.apollo.client.mutate(b)
            }
            n.d(t, "a", function() {
                    return p
                }), n.d(t, "b", function() {
                    return f
                }),
                function(e) {
                    e.TargetBanned = "TARGET_BANNED", e.BodyEmpty = "BODY_EMPTY", e.RestrictedRecipient = "TARGET_RESTRICTED", e.NotDelivered = "NOT_DELIVERED"
                }(p || (p = {}))
        },
        TTKc: function(e, t, n) {},
        Tqc9: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "c", function() {
                return a
            }), n.d(t, "d", function() {
                return o
            });
            var i = "@",
                r = "Enter",
                a = "Escape",
                o = " "
        },
        TvOw: function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "b", function() {
                    return i
                }), n.d(t, "a", function() {
                    return r
                }),
                function(e) {
                    e.Spam = "Spam", e.Harassment = "Harassment"
                }(i || (i = {})),
                function(e) {
                    e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
                }(r || (r = {}))
        },
        U1yz: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("2Dht");

            function r(e, t, n) {
                try {
                    var r = e.readQuery({
                        query: i,
                        variables: {
                            id: t
                        }
                    }, n);
                    return r ? r.whisperThread : null
                } catch (e) {
                    return null
                }
            }
        },
        U697: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = /^\$[\d]+.[\d]{2}$/;

            function r(e, t) {
                var n = i.test(e.info.price),
                    r = i.test(t.info.price);
                if (n && r) {
                    var a = +e.info.price.replace("$", "") - +t.info.price.replace("$", "");
                    return 0 !== a ? a : e.info.title.localeCompare(t.info.title)
                }
                return n && !r ? -1 : r ? 1 : e.info.price.localeCompare(t.info.price)
            }
        },
        U80U: function(e, t, n) {},
        UJc8: function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "b", function() {
                    return r
                }), n.d(t, "a", function() {
                    return a
                }),
                function(e) {
                    e.Everyone = "EVERYONE", e.Moderator = "MODERATOR", e.Subscriber = "SUBSCRIBER"
                }(r || (r = {}));
            var a = ((i = {})[r.Everyone] = "Everyone", i[r.Moderator] = "Mods", i[r.Subscriber] = "Subs", i)
        },
        UUve: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return a
            }), n.d(t, "d", function() {
                return o
            }), n.d(t, "b", function() {
                return s
            }), n.d(t, "a", function() {
                return l
            }), n.d(t, "e", function() {
                return d
            }), n.d(t, "f", function() {
                return u
            });
            var i = n("/7QA"),
                r = n("y5D0"),
                a = "SUB_CHECKOUT__PRODUCT",
                o = "SUB_CHECKOUT__RECIPIENT",
                s = "SUB_CHECKOUT__MYSTERY_GIFT_COUNT",
                l = "SUB_CHECKOUT__GIFTING_ANONYMOUSLY",
                c = [a, o, s, l];

            function d() {
                c.forEach(function(e) {
                    return i.n.remove(e)
                })
            }

            function u(e) {
                return function() {
                    return Object(r.e)(e, {
                        onClose: d
                    })
                }
            }
        },
        UWbL: function(e, t, n) {
            "use strict";

            function i(e) {
                var t = /^((\d+)[Hh])?((\d+)[Mm])?((\d+)[Ss])?$/.exec(e || "");
                return t ? 3600 * (parseInt(t[2], 10) || 0) + 60 * (parseInt(t[4], 10) || 0) + (parseInt(t[6], 10) || 0) : 0
            }
            n.d(t, "a", function() {
                return i
            })
        },
        UZgS: function(e, t, n) {},
        UajW: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsCard_MainCard"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "name"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withCheerBombEventEnabled"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "emoteMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cheerMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "event"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isCheerBombEventEnabled"
                                                    },
                                                    arguments: [],
                                                    directives: [{
                                                        kind: "Directive",
                                                        name: {
                                                            kind: "Name",
                                                            value: "include"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "if"
                                                            },
                                                            value: {
                                                                kind: "Variable",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "withCheerBombEventEnabled"
                                                                }
                                                            }
                                                        }]
                                                    }]
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bitsBadge"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "totalBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "nextBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "progress"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "current"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "FragmentSpread",
                                                            name: {
                                                                kind: "Name",
                                                                value: "badge"
                                                            },
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "next"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "FragmentSpread",
                                                            name: {
                                                                kind: "Name",
                                                                value: "badge"
                                                            },
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "tournament"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "teams"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 469
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery BitsCard_MainCard($name: ID! $withCheerBombEventEnabled: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\nuser(id: $name) {\nid\ndisplayName\ncheer {\nid\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\nisCheerBombEventEnabled @include(if: $withCheerBombEventEnabled)\n}\n}\nself {\nbitsBadge {\nid\ntotalBits\nnextBits\nprogress\ncurrent {\n...badge\n}\nnext {\n...badge\n}\n}\n}\ntournament {\nid\nteams {\nid\nname\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("IKE4").definitions)), e.exports = i
        },
        "Uk/b": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return h
            });
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("EuPq"),
                l = n("eJ65"),
                c = n("2xye"),
                d = n("CYfc"),
                u = n("MLDe"),
                p = n("McYG"),
                m = n("Ue10");
            ! function(e) {
                e.ClipLink = "clip-link"
            }(i || (i = {}));
            var h = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    return this.props.clip && (e = this.shareBalloonContent(this.props.clip)), a.createElement(l.a, null, a.createElement(m.z, {
                        disabled: !this.props.clip,
                        icon: m.ub.Share,
                        type: this.props.buttonType
                    }, Object(o.d)("Share", "ClipShareBox")), a.createElement(m.u, {
                        direction: this.props.balloonDirection,
                        size: m.w.Small
                    }, e))
                }, t.prototype.shareBalloonContent = function(e) {
                    var t = e.game ? r.__assign({}, e.game, {
                            __typename: "Game"
                        }) : null,
                        n = e.curator ? {
                            id: e.curator.id,
                            displayName: e.curator.displayName,
                            login: e.curator.login,
                            __typename: "User"
                        } : null,
                        i = e.broadcaster ? {
                            id: e.broadcaster.id,
                            displayName: e.broadcaster.displayName,
                            login: e.broadcaster.login,
                            profileImageURL: null,
                            __typename: "User"
                        } : null,
                        o = {
                            id: e.id,
                            slug: e.slug,
                            url: e.url,
                            embedURL: "",
                            title: e.title,
                            viewCount: e.viewCount,
                            language: e.language,
                            curator: n,
                            game: t,
                            broadcaster: i,
                            thumbnailURL: "",
                            createdAt: e.createdAt,
                            durationSeconds: e.durationSeconds,
                            champBadge: null,
                            __typename: "Clip"
                        };
                    return a.createElement(m.Ya, {
                        padding: 1
                    }, a.createElement(d.a, {
                        clip: o,
                        pageType: c.PageviewLocation.ClipsWatchPage,
                        asBalloon: !0
                    }), this.renderClipShareInput(e))
                }, t.prototype.renderClipShareInput = function(e) {
                    var t = e.broadcaster && e.broadcaster.login ? e.broadcaster.login : "";
                    return a.createElement(m.Ya, {
                        "data-test-selector": i.ClipLink,
                        padding: {
                            top: 1
                        }
                    }, a.createElement(m.W, null, Object(o.d)("Clip Link", "ClipShareBox")), a.createElement(s.a, {
                        onClick: Object(u.d)(e.id, e.game && e.game.name, e.broadcaster ? e.broadcaster.id : "", t, c.PageviewLocation.ClipsWatchPage, Object(p.a)(e.slug, t)),
                        value: Object(p.a)(e.slug, t)
                    }))
                }, t
            }(a.Component)
        },
        V3Pk: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return r
            }), n.d(t, "h", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            }), n.d(t, "g", function() {
                return s
            }), n.d(t, "e", function() {
                return l
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "f", function() {
                return d
            }), n.d(t, "d", function() {
                return u
            }), n.d(t, "i", function() {
                return p
            });
            var i = n("mrSG"),
                r = "vodChat.channel-moderation-comments.RESULTS_RECEIVED",
                a = function(e, t) {
                    return i.__assign({
                        type: r
                    }, e, {
                        bitsConfig: t
                    })
                },
                o = "vodChat.channel-moderation-comments.RESULTS_FAILED",
                s = function(e) {
                    return {
                        type: o,
                        error: e
                    }
                },
                l = function(e) {
                    return {
                        type: "vodChat.channel-moderation-comments.BAN_FAILED",
                        error: e
                    }
                },
                c = "vodChat.channel-moderation-comments.BAN_SUCCESS",
                d = function(e) {
                    return {
                        type: c,
                        user: e
                    }
                },
                u = "vodChat.channel-moderation-comments.SEARCH_SUCCESS",
                p = function(e) {
                    return {
                        type: u,
                        hits: e
                    }
                }
        },
        VAW9: function(e, t, n) {
            "use strict";
            var i = n("oJmH"),
                r = n("/MKj"),
                a = n("fvjX"),
                o = n("yR8l"),
                s = n("eDVu"),
                l = n("0Log"),
                c = n("/aPz"),
                d = n("kRBY"),
                u = n("5zXJ");

            function p(e) {
                var t = {
                        prefix: e.prefix,
                        type: function(e) {
                            var t = u.j;
                            switch (e) {
                                case "channel_custom":
                                    t = u.e;
                                    break;
                                case "global_first_party":
                                    t = u.g;
                                    break;
                                case "global_third_party":
                                    t = u.h;
                                    break;
                                case "sponsored":
                                    t = u.i;
                                    break;
                                default:
                                    t = u.j
                            }
                            return t
                        }(e.type),
                        tiers: []
                    },
                    n = e.tiers.map(function(e) {
                        var t = [];
                        return m(e.images).forEach(function(e, n) {
                            m(e).forEach(function(e, i) {
                                m(e).forEach(function(e, r) {
                                    t.push({
                                        url: e,
                                        theme: n.toUpperCase(),
                                        dpiScale: parseFloat(r),
                                        isAnimated: "animated" === i
                                    })
                                })
                            })
                        }), {
                            id: e.id,
                            bits: e.min_bits,
                            canCheer: e.can_cheer,
                            canShowInBitsCard: e.show_in_bits_card,
                            color: e.color,
                            images: t
                        }
                    });
                return t.tiers = n, e.campaign && (t.campaign = function(e) {
                    var t = {
                        id: e.id,
                        brandName: e.brand_name,
                        brandImageURL: e.brand_image_url,
                        minimumBitsAmount: e.min_bits_to_be_sponsored,
                        bitsTotal: e.total_bits,
                        bitsUsed: e.used_bits,
                        bitsPercentageRemaining: e.used_bits / e.total_bits,
                        userLimit: e.user_limit,
                        thresholds: []
                    };
                    return m(e.sponsored_amount_thresholds).forEach(function(e, n) {
                        t.thresholds.push({
                            minimumBits: n,
                            matchedPercent: e
                        })
                    }), t
                }(e.campaign)), t
            }
            var m = function(e) {
                    return Object.keys(e).reduce(function(t, n) {
                        return t.set(n, e[n])
                    }, new Map)
                },
                h = n("0Lz3"),
                g = n("+pBb"),
                f = n("Y3y8"),
                v = n("GnwI");
            var b, k = n("mrSG"),
                y = n("q1tI"),
                C = n("/7QA"),
                S = n("w0yC"),
                E = n("ZS2+"),
                N = n("KwB3"),
                O = n("BJwa"),
                _ = n("a1OF");
            ! function(e) {
                e.MentionPill = "mentionPill", e.ViewRooms = "viewRooms"
            }(b || (b = {}));
            var w = function(e) {
                    return C.m.get("hasSeenRoomsOnboarding", {})[e] || !1
                },
                D = function(e) {
                    var t;
                    C.m.set("hasSeenRoomsOnboarding", k.__assign({}, C.m.get("hasSeenRoomsOnboarding", {}), ((t = {})[e] = !0, t)))
                },
                I = n("Ue10"),
                T = (n("zWFo"), "Stream Chat"),
                M = E.a.wrap(function() {
                    return n.e(207).then(n.bind(null, "+k6+"))
                }, "ActiveRoomButton"),
                R = E.a.wrap(function() {
                    return n.e(206).then(n.bind(null, "Xf1I"))
                }, "Room"),
                L = E.a.wrap(function() {
                    return n.e(205).then(n.bind(null, "cs/o"))
                }, "RoomPicker"),
                F = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            activeRoomID: T,
                            activeRoomName: T,
                            hasSeenGeneralOnboarding: w(b.ViewRooms),
                            isActiveRoomDeleted: !1,
                            shouldAutoOpenRoomPicker: !0,
                            showRoomPicker: !1
                        }, t.renderOnboardingBalloon = function() {
                            var e = t.props.data;
                            if (t.state.showRoomPicker || t.state.hasSeenGeneralOnboarding) return null;
                            if (!e || !e.channel) return null;
                            var n = t.props.sessionUser && t.props.sessionUser.id === e.channel.id;
                            return e.channel.channelRooms && 0 === e.channel.channelRooms.length && !n ? null : y.createElement(I.u, {
                                direction: I.v.BottomRight,
                                offsetX: "1rem",
                                show: !0,
                                size: I.w.Small
                            }, y.createElement(S.a, {
                                onClickOut: t.dismissGeneralOnboarding
                            }, y.createElement(I.Ya, {
                                padding: 3,
                                textAlign: I.Sb.Center
                            }, y.createElement("img", {
                                src: Object(_.d)("508650", 3),
                                width: "28"
                            }), y.createElement(I.Ya, {
                                margin: {
                                    y: 1
                                }
                            }, y.createElement(I.W, {
                                color: I.O.Alt2
                            }, Object(C.d)("Rooms help you keep the conversation going", "RoomSelector"))), y.createElement(I.z, {
                                onClick: t.headerClick
                            }, Object(C.d)("View rooms", "RoomSelector")))))
                        }, t.isChannelLive = function(e) {
                            return !(e.error || !e.channel) && !!(e.channel.stream && e.channel.stream.id || e.channel.hosting && e.channel.hosting.id)
                        }, t.checkRoomPickerAutoOpen = function(e) {
                            if (t.state.shouldAutoOpenRoomPicker && e.firstPageLoaded && e.data && e.data.channel && e.data.channel.channelRooms) {
                                var n = t.isChannelLive(e.data),
                                    i = 0 !== e.data.channel.channelRooms.length,
                                    r = !n && i && !e.isEmbedded;
                                t.setState({
                                    shouldAutoOpenRoomPicker: !1,
                                    showRoomPicker: r
                                }), r && t.dismissGeneralOnboarding()
                            }
                        }, t.headerClick = function() {
                            t.dismissGeneralOnboarding(), t.setState(function(e) {
                                return {
                                    shouldAutoOpenRoomPicker: !1,
                                    showRoomPicker: !e.showRoomPicker
                                }
                            })
                        }, t.handleRoomSelect = function(e, n) {
                            t.setState({
                                activeRoomID: e,
                                activeRoomName: n,
                                isActiveRoomDeleted: !1,
                                showRoomPicker: !1
                            })
                        }, t.onActiveRoomDelete = function() {
                            t.state.activeRoomID !== T && t.setState({
                                isActiveRoomDeleted: !0
                            })
                        }, t.goToStreamChat = function() {
                            t.handleRoomSelect(T, T)
                        }, t.dismissGeneralOnboarding = function() {
                            t.setState({
                                hasSeenGeneralOnboarding: !0
                            }), D(b.ViewRooms)
                        }, t.closeRoomPicker = function() {
                            t.setState({
                                showRoomPicker: !1
                            })
                        }, t
                    }
                    return k.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.checkRoomPickerAutoOpen(this.props), this.state.showRoomPicker && this.dismissGeneralOnboarding()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = this;
                        if (e.channelLogin !== this.props.channelLogin && this.setState({
                                shouldAutoOpenRoomPicker: !0
                            }), this.checkRoomPickerAutoOpen(e), this.props.data && e.data && this.props.data.channel && e.data.channel && this.props.data.channel.self && e.data.channel.self && !e.data.channel.self.isChannelMember && this.props.data.channel.self.isChannelMember !== e.data.channel.self.isChannelMember && this.goToStreamChat(), e.data && e.data.channel && e.data.channel.self) {
                            var n = e.data.channel.self;
                            (!n.isChannelMember || n.banStatus && n.banStatus.isPermanent) && this.state.activeRoomID !== T && this.goToStreamChat()
                        }
                        if (this.props.sessionUser && this.props.routedRoomName && this.props.data && this.props.data.loading && !this.props.data.channel && e.data && !e.data.loading && e.data.channel && e.data.channel.channelRooms && e.data.channel.self.isChannelMember) {
                            var i = e.data.channel.channelRooms.find(function(e) {
                                return e.name === t.props.routedRoomName
                            });
                            i && this.setState({
                                activeRoomID: i.id,
                                activeRoomName: i.name
                            })
                        } else this.props.channelLogin !== e.channelLogin && this.state.activeRoomID !== T && this.goToStreamChat()
                    }, t.prototype.render = function() {
                        return y.createElement(I.Ya, {
                            fullWidth: !0,
                            fullHeight: !0,
                            display: I.X.Flex,
                            flexDirection: I.Aa.Column,
                            flexGrow: 1,
                            flexWrap: I.Ba.NoWrap,
                            position: I.kb.Relative
                        }, this.renderHeader(), this.renderRoomPicker(), this.renderHiddenState(), this.renderChat(), this.renderCurrentRoom())
                    }, t.prototype.renderChat = function() {
                        if (this.props.isHidden && !this.props.isPopout) return null;
                        var e = this.props.isBackground || this.state.activeRoomID !== T,
                            t = this.props.bitsConfig && this.props.bitsConfig.orderedActions.length > 0;
                        return y.createElement(N.a, {
                            bitsConfig: t ? this.props.bitsConfig : void 0,
                            channelLogin: this.props.channelLogin,
                            clientID: C.a.authSettings.clientID,
                            isBackground: e,
                            isEmbedded: this.props.isEmbedded,
                            isPopout: this.props.isPopout,
                            closeRoomPicker: this.closeRoomPicker,
                            onHostingChange: this.props.onHostingChange,
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                            passThroughCommands: this.props.passThroughCommands,
                            shouldConnectChat: this.props.shouldConnectChat
                        })
                    }, t.prototype.renderCurrentRoom = function() {
                        return this.props.isHidden && !this.props.isPopout || !this.props.data || !this.props.data.channel || this.state.activeRoomID === T ? null : y.createElement(R, {
                            bitsConfig: this.props.bitsConfig,
                            isDeleted: this.state.isActiveRoomDeleted,
                            isPopout: this.props.isPopout,
                            channelLogin: this.props.channelLogin,
                            channelID: this.props.data.channel.id,
                            roomID: this.state.activeRoomID,
                            closeRoomPicker: this.closeRoomPicker,
                            handleStreamChatClick: this.goToStreamChat,
                            onDelete: this.onActiveRoomDelete,
                            isHostMode: !!this.props.hostedChannelDisplayName,
                            passThroughCommands: this.props.passThroughCommands
                        })
                    }, t.prototype.renderHeader = function() {
                        var e = y.createElement(I.Ya, {
                            display: I.X.Flex,
                            alignItems: I.f.Center
                        }, !this.state.showRoomPicker && Object(C.d)("Rooms", "RoomSelector"), y.createElement(I.Ya, {
                            display: I.X.Flex,
                            alignItems: I.f.Center
                        }, this.renderTotalUnreadMentionCount(), !this.state.showRoomPicker && y.createElement(I.Ya, {
                            padding: {
                                left: .5
                            },
                            display: I.X.Flex
                        }, y.createElement(I.tb, {
                            asset: I.ub.RoomList
                        })), this.state.showRoomPicker && y.createElement(I.A, {
                            ariaLabel: "RoomListOpen",
                            icon: I.ub.RoomListOpen,
                            "data-test-selector": "close-room-picker-button",
                            onClick: this.headerClick,
                            blurAfterClick: !0
                        })));
                        this.state.showRoomPicker || (e = y.createElement(I.Ya, {
                            position: I.kb.Relative
                        }, y.createElement(I.z, {
                            "data-a-target": "room-selector-button",
                            "data-test-selector": "open-room-picker-button",
                            onClick: this.headerClick,
                            type: I.F.Text
                        }, e), this.renderOnboardingBalloon())), this.props.isEmbedded && (e = y.createElement(I.Ya, null));
                        var t = y.createElement(I.Fb, {
                            className: "room-selector__header",
                            background: I.r.Alt,
                            borderLeft: !this.props.isEmbedded,
                            borderRight: !this.props.isEmbedded,
                            borderBottom: !0,
                            display: I.X.Flex,
                            fullWidth: !0,
                            justifyContent: I.Xa.Between,
                            alignItems: I.f.Center,
                            flexShrink: 0,
                            padding: {
                                left: 2,
                                right: 1
                            }
                        }, y.createElement("div", {
                            id: O.a
                        }, this.renderActiveRoomName()), e);
                        return this.state.showRoomPicker && (t = y.createElement(I.Ya, {
                            className: "room-selector__open-header-wrapper"
                        }, t)), t
                    }, t.prototype.renderRoomPicker = function() {
                        if (this.state.showRoomPicker && this.props.data && this.props.data.channel) return y.createElement(S.a, {
                            onClickOut: this.closeRoomPicker
                        }, y.createElement(I.Fb, {
                            attachLeft: !0,
                            attachRight: !0,
                            background: I.r.Alt,
                            borderBottom: !0,
                            borderLeft: !0,
                            borderRight: !0,
                            elevation: 2,
                            position: I.kb.Absolute,
                            zIndex: I.jc.Above
                        }, y.createElement(L, {
                            channelID: this.props.data.channel.id,
                            handleRoomSelect: this.handleRoomSelect,
                            isChannelLive: this.isChannelLive(this.props.data),
                            renderChannelName: this.props.renderChannelName,
                            activeRoomID: this.state.activeRoomID,
                            "data-test-selector": "room-picker"
                        })))
                    }, t.prototype.renderActiveRoomName = function() {
                        return this.state.showRoomPicker ? y.createElement(I.W, {
                            color: I.O.Alt,
                            "data-test-selector": O.a
                        }, Object(C.d)("Rooms", "RoomSelectorOpened")) : this.state.activeRoomName === T ? this.props.renderChannelName && this.props.data && this.props.data.channel ? y.createElement(I.W, {
                            color: I.O.Alt,
                            "data-test-selector": O.a
                        }, Object(C.d)("<x:bold>{displayName}</x:bold>'s Chat", {
                            displayName: this.props.data.channel.displayName,
                            "x:bold": function(e) {
                                return y.createElement(I.W, {
                                    type: I.Wb.Span,
                                    bold: !0
                                }, e)
                            }
                        }, "RoomSelectorOpened")) : y.createElement(I.W, {
                            color: I.O.Alt,
                            "data-test-selector": O.a
                        }, Object(C.d)("Stream Chat", "RoomSelectorOpened")) : this.state.isActiveRoomDeleted ? y.createElement(I.W, {
                            color: I.O.Alt,
                            "data-test-selector": O.a
                        }, this.state.activeRoomName) : y.createElement(M, {
                            roomID: this.state.activeRoomID,
                            roomName: this.state.activeRoomName
                        })
                    }, t.prototype.renderTotalUnreadMentionCount = function() {
                        var e = this,
                            t = this.props.data;
                        if (!t || t.error || !t.channel || !t.channel.self || !t.channel.self.isChannelMember || !t.channel.channelRooms) return null;
                        var n = t.channel.channelRooms.reduce(function(t, n) {
                            return n.self.isMuted || n.id === e.state.activeRoomID ? t : t + n.self.unreadMentionCount
                        }, 0);
                        return n > 0 ? y.createElement(I.Ya, {
                            display: I.X.InlineBlock,
                            padding: {
                                left: .5
                            },
                            position: I.kb.Relative
                        }, y.createElement(I.hb, {
                            label: n.toString(),
                            type: I.ib.Alert
                        })) : void 0
                    }, t.prototype.renderHiddenState = function() {
                        return !this.props.isHidden || this.props.isPopout ? null : y.createElement(I.Fb, {
                            alignItems: I.f.Center,
                            borderLeft: !0,
                            "data-test-selector": "room-selector-hidden-state",
                            display: I.X.Flex,
                            flexDirection: I.Aa.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: I.Xa.Center,
                            color: I.O.Base,
                            position: I.kb.Relative
                        }, y.createElement(I.Ya, {
                            margin: {
                                bottom: 1
                            }
                        }, y.createElement(I.W, {
                            fontSize: I.Ca.Size5
                        }, Object(C.d)("Chat is hidden.", "RoomSelector"))), y.createElement(I.z, {
                            onClick: this.props.onChatUnhide,
                            "data-a-target": "show-chat-button"
                        }, Object(C.d)("Show Chat", "RoomSelector")))
                    }, t
                }(y.Component),
                j = n("Qdho");
            var x = Object(i.compose)(Object(r.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isHidden: e.chat.isHidden,
                    sessionUser: Object(d.e)(e)
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    onChatUnhide: function() {
                        return g.O()
                    }
                }, e)
            }), Object(o.a)(j, {
                skip: function(e) {
                    return !e.firstPageLoaded
                },
                props: function(e) {
                    return {
                        data: e.data,
                        bitsConfig: Object(h.a)(e.data && e.data.channel && e.data.channel.cheer && e.data.channel.cheer.emotes || []),
                        channelID: e.data && e.data.channel && e.data.channel.id
                    }
                },
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: j,
                    skip: !e.firstPageLoaded || !e.data || !e.data.channel,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(c.i)("" + (e.data && e.data.channel && e.data.channel.id)),
                    types: [l.PubsubMessageType.ChatRoomCreated, l.PubsubMessageType.ChatRoomDeleted],
                    mutator: function(e, t) {
                        if (e.type === l.PubsubMessageType.ChatRoomDeleted && t.channel && t.channel.channelRooms) return t.channel.channelRooms = t.channel.channelRooms.filter(function(t) {
                            return t.id !== e.data.room.room_id
                        }), t;
                        if (e.type === l.PubsubMessageType.ChatRoomCreated && t.channel && t.channel.channelRooms) {
                            var n = function(e) {
                                return {
                                    id: e.data.room.room_id,
                                    minimumAllowedRole: e.data.room.minimum_allowed_role,
                                    name: e.data.room.name,
                                    topic: e.data.room.topic,
                                    isPreviewable: e.data.room.is_previewable,
                                    self: {
                                        isArchived: !1,
                                        isMuted: !1,
                                        isUnread: !1,
                                        unreadMentionCount: 0,
                                        __typename: "RoomView"
                                    },
                                    __typename: "Room"
                                }
                            }(e);
                            return t.channel.channelRooms.push(n), t
                        }
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: j,
                    skip: !(e.firstPageLoaded && e.sessionUser && e.data && e.data.channel),
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(c.j)("" + (e.sessionUser && e.sessionUser.id)),
                    types: [l.PubsubMessageType.UserMention, l.PubsubMessageType.ChatRoomsRoomViewUpdated],
                    mutator: function(e, t) {
                        switch (e.type) {
                            case l.PubsubMessageType.UserMention:
                                if (e = e, !t.channel || !t.channel.channelRooms || t.channel.id !== e.data.channel_id) break;
                                var n = e.data.room_id;
                                t.channel.channelRooms = t.channel.channelRooms.map(function(e) {
                                    return e.id === n && (e.self.unreadMentionCount += 1), e
                                });
                                break;
                            case l.PubsubMessageType.ChatRoomsRoomViewUpdated:
                                if (e = e, !t.channel || t.channel.id !== e.data.room_view.room.owner_id) break;
                                t.channel.self.isModerator = e.data.room_view.permissions.moderate
                        }
                        return t
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: j,
                    skip: !(e.firstPageLoaded && e.sessionUser && e.data && e.data.channel),
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(c.b)(),
                    types: [l.PubsubMessageType.BitsCampaignTotalUpdate, l.PubsubMessageType.BitsCampaignComplete],
                    mutator: function(e, t) {
                        if (t.channel && t.channel.cheer && t.channel.cheer.emotes)
                            if (e.type === l.PubsubMessageType.BitsCampaignTotalUpdate) {
                                var n = e;
                                t.channel.cheer.emotes = t.channel.cheer.emotes.map(function(e) {
                                    return e.campaign ? (e.campaign && e.campaign.id === n.campaign_id && (e.campaign.bitsUsed = n.used_amount), e) : e
                                })
                            } else if (e.type === l.PubsubMessageType.BitsCampaignComplete) {
                            var i = e;
                            t.channel.cheer.emotes = t.channel.cheer.emotes.filter(function(e) {
                                return !e.campaign || e.campaign.id !== i.campaign_id
                            })
                        }
                        return t
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: j,
                    skip: !(e.firstPageLoaded && e.sessionUser && e.data && e.data.channel),
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(c.a)("" + (e.data && e.data.channel && e.data.channel.id)),
                    types: [l.PubsubMessageType.BitsCampaignAddCheermoteEvent, l.PubsubMessageType.BitsCampaignRemoveCheermoteEvent],
                    mutator: function(e, t) {
                        if (t.channel && t.channel.cheer && t.channel.cheer.emotes)
                            if (e.type === l.PubsubMessageType.BitsCampaignAddCheermoteEvent) {
                                var n = p(e.action);
                                t.channel.cheer.emotes.unshift(n)
                            } else if (e.type === l.PubsubMessageType.BitsCampaignRemoveCheermoteEvent) {
                            var i = e;
                            t.channel.cheer.emotes = t.channel.cheer.emotes.filter(function(e) {
                                return !e.campaign || e.campaign.id !== i.campaign_id
                            })
                        }
                        return t
                    }
                }
            }), Object(f.b)(), Object(v.b)("RoomSelector", {
                autoReportInteractive: !0
            }))(F);
            n.d(t, "a", function() {
                return x
            })
        },
        VJHF: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "c", function() {
                return a
            }), n.d(t, "f", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "e", function() {
                return l
            }), n.d(t, "a", function() {
                return i
            });
            var i, r = "esports-campaign-ftue-displayed",
                a = "hgc2018",
                o = "owl2018",
                s = "hearthstone2018",
                l = "hearthstone2018-test";
            ! function(e) {
                e.Benefactor = "benefactor", e.Recipient = "recipient"
            }(i || (i = {}))
        },
        VN3V: function(e, t, n) {},
        VS9Q: function(e, t, n) {
            "use strict";
            var i = n("i6WW"),
                r = n("6j5V"),
                a = n("XmgI"),
                o = n("gTu3"),
                s = n("RcPG"),
                l = n("a1OF"),
                c = {
                    AUTOMOD: "AutoMod",
                    EMOTE: "Emote",
                    MENTION: "User",
                    CHEERMOTE: "CheermoteToken"
                };
            n.d(t, "a", function() {
                return d
            }), n.d(t, "f", function() {
                return u
            }), n.d(t, "g", function() {
                return p
            }), n.d(t, "e", function() {
                return m
            }), n.d(t, "d", function() {
                return g
            }), n.d(t, "c", function() {
                return f
            }), n.d(t, "b", function() {
                return v
            });
            var d = "/me ";

            function u(e, t, n) {
                var i = e.content.text.startsWith(d);
                return h(e.content.fragments, i, n, t, e.sender.login)
            }

            function p(e, t) {
                return h(e.content.fragments, !1, t)
            }

            function m(e) {
                return e.reduce(function(e, t) {
                    var n = t.content,
                        i = t.text;
                    return n && n.__typename === c.AUTOMOD ? e.concat({
                        type: s.a.ModeratedText,
                        content: i
                    }) : e.concat(Object(r.a)(i))
                }, [])
            }

            function h(e, t, n, u, p) {
                var m = [];
                return e.forEach(function(e, h) {
                    var g = e.content;
                    if (g && g.__typename === c.EMOTE) {
                        var f = g;
                        m.push({
                            type: s.a.Emote,
                            content: {
                                alt: e.text,
                                images: {
                                    themed: !1,
                                    sources: {
                                        "1x": Object(l.d)(f.emoteID, 1),
                                        "2x": Object(l.d)(f.emoteID, 2),
                                        "4x": Object(l.d)(f.emoteID, 4)
                                    }
                                }
                            }
                        })
                    } else if (g && g.__typename === c.CHEERMOTE) {
                        if (!u) return;
                        var v = g,
                            b = v.prefix,
                            k = v.bitsAmount,
                            y = v.tier,
                            C = u.indexedActions[b],
                            S = C && C.indexedTiers.get(y);
                        S ? m.push({
                            type: s.a.Emote,
                            content: {
                                alt: b,
                                images: Object(a.d)(S),
                                cheerAmount: k,
                                cheerColor: S.color
                            }
                        }) : m.push(Object(r.a)(e.text))
                    } else if (g && g.__typename === c.MENTION) {
                        var E = g,
                            N = o.a.Default;
                        n && E.login === n ? N = o.a.Recipient : n && p && p === n && (N = o.a.Sender), m.push({
                            type: s.a.Mention,
                            content: {
                                recipient: e.text.slice(1),
                                currentUserMentionRelation: N
                            }
                        })
                    } else {
                        var O = Object(i.a)(e.text, {
                            blockLinks: !1,
                            parseClips: !0,
                            parseVods: !0
                        });
                        if (O) m.push(O);
                        else {
                            var _ = e.text;
                            t && 0 === h && _.startsWith(d) && (_ = _.substr(3)), m.push(Object(r.a)(_))
                        }
                    }
                }), m
            }

            function g(e) {
                var t = e.data,
                    n = t.message,
                    i = t.cursor,
                    r = f(n.content.fragments),
                    a = v(n.sender.badges);
                return {
                    cursor: "" + i,
                    node: {
                        id: n.id,
                        deletedAt: null,
                        sentAt: n.sent_at,
                        content: {
                            text: n.content.text,
                            fragments: r,
                            __typename: "RoomMessageContent"
                        },
                        sender: {
                            id: n.sender.user_id,
                            login: n.sender.login,
                            chatColor: n.sender.chat_color,
                            displayName: n.sender.display_name,
                            displayBadges: a,
                            __typename: "User"
                        },
                        __typename: "RoomMessage"
                    },
                    __typename: "RoomMessageEdge"
                }
            }

            function f(e) {
                return e.map(function(e) {
                    var t = {
                            text: e.text,
                            content: null,
                            __typename: "RoomMessageFragment"
                        },
                        n = e.cheermote,
                        i = e.emoticon,
                        r = e.mention,
                        a = e.text;
                    return n ? t.content = {
                        bitsAmount: n.bits_amount,
                        prefix: n.prefix,
                        tier: n.tier,
                        __typename: "CheermoteToken"
                    } : i ? t.content = {
                        emoteID: i.id,
                        setID: i.set_id,
                        token: a,
                        __typename: "Emote"
                    } : r && (t.content = {
                        id: r.user_id,
                        login: r.login,
                        displayName: r.display_name,
                        __typename: "User"
                    }), t
                })
            }

            function v(e) {
                return e.map(function(e) {
                    return {
                        setID: e.id,
                        version: e.version,
                        __typename: "Badge"
                    }
                })
            }
        },
        Ve5Q: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "UpsellCenter_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "70"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 162
                }
            };
            n.loc.source = {
                body: "query UpsellCenter_Channel($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nprofileImageURL(width: 70)\nbroadcastSettings {\nid\ngame {\nid\ndisplayName\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        VhbA: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("fvjX"),
                o = n("/7QA"),
                s = n("yR8l"),
                l = n("eDVu"),
                c = n("0Log"),
                d = n("/aPz"),
                u = n("2xye"),
                p = n("GnwI"),
                m = n("Ue10");
            var h = n("fOWB"),
                g = (n("boOy"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.componentDidUpdate = function() {
                        this.props.triggerPlayerReposition()
                    }, t.prototype.render = function() {
                        var e = this.props.data && this.props.data.user && this.props.data.user.liveEvent;
                        if (!e) return null;
                        var t = e.id;
                        if (!t) return null;
                        var n = e.title;
                        return e.parent && e.parent.title && (n = e.parent.title), n ? r.createElement(m.i, {
                            type: m.n.SlideInBottom,
                            delay: m.j.Medium,
                            duration: m.k.Medium,
                            enabled: !0
                        }, r.createElement(m.Fb, {
                            className: "live-event-banner-ui__header",
                            display: m.X.Flex,
                            background: m.r.AccentAlt2,
                            alignItems: m.f.Center,
                            flexWrap: m.Ba.NoWrap,
                            padding: {
                                x: 1
                            }
                        }, r.createElement(m.Fb, {
                            display: m.X.Flex,
                            flexShrink: 0,
                            margin: {
                                right: 1
                            },
                            color: m.O.Overlay
                        }, r.createElement(m.tb, {
                            asset: m.ub.Events
                        })), r.createElement(m.U, {
                            to: {
                                pathname: "/events/" + t,
                                state: {
                                    medium: u.PageviewMedium.Channel,
                                    content: u.PageviewContent.EventLive,
                                    noRedirect: !0
                                }
                            }
                        }, r.createElement(m.W, {
                            type: m.Wb.Span,
                            color: m.O.Overlay,
                            fontSize: m.Ca.Size5,
                            lines: 1
                        }, Object(o.d)("Event: ", "LiveEventBannerComponent"), n)))) : null
                    }, t
                }(r.Component)),
                f = Object(a.compose)(Object(s.a)(h, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelName
                            }
                        }
                    }
                }), Object(l.a)(function(e) {
                    return {
                        query: h,
                        variables: {
                            login: e.channelName
                        },
                        topic: Object(d.f)(e.channelID),
                        type: c.PubsubMessageType.LiveEvent,
                        mutator: function(e, t) {
                            return t.user && (t.user.liveEvent = function(e) {
                                if (!e || !e.current_event) return null;
                                var t = e.current_event,
                                    n = null;
                                t.parent && (n = {
                                    __typename: "EventCollection",
                                    id: t.parent.event_id,
                                    title: t.parent.title
                                });
                                return {
                                    __typename: "EventLeaf",
                                    id: t.event_id,
                                    title: t.title,
                                    parent: n
                                }
                            }(e)), t
                        }
                    }
                }), Object(p.b)("LiveEventBanner", {
                    autoReportInteractive: !0
                }))(g);
            n.d(t, !1, function() {
                return g
            }), n.d(t, "a", function() {
                return f
            })
        },
        "Vl9+": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "thread"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "WhisperThread"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "messages"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "20"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "nonce"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "content"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "emotes"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "emoteID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "setID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "from"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "to"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "deletedAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "editedAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "sentAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "from"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unreadMessagesCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "userLastMessageRead"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "sentAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 240
                }
            };
            n.loc.source = {
                body: "fragment thread on WhisperThread {\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\nnonce\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\ndeletedAt\neditedAt\nsentAt\nfrom {\nid\n}\n}\n}\n}\nunreadMessagesCount\nuserLastMessageRead {\nsentAt\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        VrOd: function(e, t, n) {},
        Vsf8: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ClipsModalDeleteAll_Clip"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slug"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "video"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcast"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 101
                }
            };
            n.loc.source = {
                body: "query ClipsModalDeleteAll_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nvideo {\nid\n}\nbroadcast {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        VtCy: function(e, t, n) {
            "use strict";
            var i = n("y6KF");
            n.d(t, "DownloadStatus", function() {
                return i.a
            }), n.d(t, "ExportDestination", function() {
                return i.b
            }), n.d(t, "ExtraFilterType", function() {
                return i.c
            }), n.d(t, "RestrictionType", function() {
                return i.d
            }), n.d(t, "THUMBNAIL_TYPE_CUSTOM", function() {
                return i.e
            }), n.d(t, "VIDEO_STATUS_FAILED", function() {
                return i.j
            }), n.d(t, "VIDEO_STATUS_PENDING_TRANSCODE", function() {
                return i.k
            }), n.d(t, "VIDEO_STATUS_RECORDED", function() {
                return i.l
            }), n.d(t, "VIDEO_STATUS_RECORDING", function() {
                return i.m
            }), n.d(t, "VIDEO_STATUS_TRANSCODING", function() {
                return i.n
            }), n.d(t, "VIDEO_STATUS_UPLOADING", function() {
                return i.p
            }), n.d(t, "VideoPremiereStatus", function() {
                return i.q
            }), n.d(t, "VideoScope", function() {
                return i.r
            }), n.d(t, "availableVideoStatuses", function() {
                return i.s
            }), n.d(t, "pendingVideoStatuses", function() {
                return i.t
            });
            n("1G35");
            var r = n("IItH");
            n.o(r, "DropdownMenuNavDirection") && n.d(t, "DropdownMenuNavDirection", function() {
                return r.DropdownMenuNavDirection
            }), n.o(r, "EditModalErrorOrigin") && n.d(t, "EditModalErrorOrigin", function() {
                return r.EditModalErrorOrigin
            }), n.o(r, "KEY_ADD_TO") && n.d(t, "KEY_ADD_TO", function() {
                return r.KEY_ADD_TO
            }), n.o(r, "KEY_COLLECTIONS") && n.d(t, "KEY_COLLECTIONS", function() {
                return r.KEY_COLLECTIONS
            }), n.o(r, "KEY_ROOT") && n.d(t, "KEY_ROOT", function() {
                return r.KEY_ROOT
            }), n.o(r, "NotificationType") && n.d(t, "NotificationType", function() {
                return r.NotificationType
            });
            var a = n("jQ+3");
            n.d(t, "NotificationType", function() {
                return a.a
            });
            var o = n("uNjw");
            n.o(o, "DropdownMenuNavDirection") && n.d(t, "DropdownMenuNavDirection", function() {
                return o.DropdownMenuNavDirection
            }), n.o(o, "EditModalErrorOrigin") && n.d(t, "EditModalErrorOrigin", function() {
                return o.EditModalErrorOrigin
            }), n.o(o, "KEY_ADD_TO") && n.d(t, "KEY_ADD_TO", function() {
                return o.KEY_ADD_TO
            }), n.o(o, "KEY_COLLECTIONS") && n.d(t, "KEY_COLLECTIONS", function() {
                return o.KEY_COLLECTIONS
            }), n.o(o, "KEY_ROOT") && n.d(t, "KEY_ROOT", function() {
                return o.KEY_ROOT
            });
            var s = n("gh9h");
            n.d(t, "EditModalErrorOrigin", function() {
                return s.a
            });
            var l = n("z1lk");
            n.d(t, "DropdownMenuNavDirection", function() {
                return l.a
            }), n.d(t, "KEY_ADD_TO", function() {
                return l.b
            }), n.d(t, "KEY_COLLECTIONS", function() {
                return l.c
            }), n.d(t, "KEY_ROOT", function() {
                return l.d
            })
        },
        VwyG: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("kRBY"),
                a = n("mrSG"),
                o = n("q1tI"),
                s = n("oJmH"),
                l = n("/7QA"),
                c = n("yR8l"),
                d = n("GnwI"),
                u = n("nt5g"),
                p = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.logger = l.k.withCategory("role-restricted"), n.state = {
                            loading: t.isLoggedIn,
                            permitted: !1,
                            roles: {
                                staff: !1,
                                editor: !1,
                                owner: !1
                            },
                            error: null
                        }, n
                    }
                    return a.__extends(t, e), t.prototype.componentDidUpdate = function(e) {
                        var t = e.data && e.data.loading,
                            n = this.props.data && this.props.data.loading;
                        (!this.props.isLoggedIn || t && !n) && this.props.latencyTracking.reportInteractive()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.maybeSetRoleState(e)
                    }, t.prototype.componentDidMount = function() {
                        this.maybeSetRoleState(this.props)
                    }, t.prototype.render = function() {
                        return this.props.children(this.state)
                    }, t.prototype.maybeSetRoleState = function(e) {
                        if (e.isLoggedIn && e.data) {
                            var t = function(e) {
                                    var t = e.data,
                                        n = {
                                            staff: !1,
                                            editor: !1,
                                            owner: !1
                                        };
                                    t && !t.error && !t.loading && t.user && t.currentUser && (n.staff = !(!t.currentUser.roles || !t.currentUser.roles.isStaff), n.editor = !(!t.user.self || !t.user.self.isEditor), n.owner = t.user.id === t.currentUser.id);
                                    return n
                                }(e),
                                n = {
                                    loading: e.data.loading,
                                    permitted: function(e, t) {
                                        if (e.owner) return !0;
                                        if (e.staff && t.staff) return !0;
                                        if (e.editor && t.editor) return !0;
                                        return !1
                                    }(t, e.permittedRoles),
                                    roles: t,
                                    error: null
                                };
                            e.data.error ? (n.error = new Error(e.data.error.toString()), this.logger.warn("Unable to retrieve data from GraphQL.", {
                                err: n.error
                            })) : e.data.loading || e.data.user && e.data.currentUser || (n.error = new Error("Failed to fetch user information"), this.logger.warn("Failed to fetch user information.", {
                                err: n.error
                            })), this.setState(n)
                        }
                    }, t
                }(o.Component);
            var m = Object(s.compose)(Object(c.a)(u, {
                options: function(e) {
                    return {
                        variables: {
                            contentOwnerLogin: e.ownerLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.isLoggedIn
                }
            }), Object(d.b)("RoleRestricted"))(p);
            var h = Object(i.connect)(function(e) {
                return {
                    isLoggedIn: Object(r.f)(e)
                }
            })(m);
            n.d(t, "a", function() {
                return h
            })
        },
        "W/3w": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            });
            var i = n("/7QA"),
                r = 30,
                a = [0, 10, 30, 60, 1440, 10080, 43200, 129600];

            function o(e) {
                switch (e) {
                    case 0:
                        return Object(i.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                    case 10:
                        return Object(i.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                    case 30:
                        return Object(i.d)("30 minutes", "FollowersOnlyLabel");
                    case 60:
                        return Object(i.d)("1 hour", "FollowersOnlyLabel");
                    case 1440:
                        return Object(i.d)("1 day", "FollowersOnlyLabel");
                    case 10080:
                        return Object(i.d)("1 week", "FollowersOnlyLabel");
                    case 43200:
                        return Object(i.d)("1 month", "FollowersOnlyLabel");
                    case 129600:
                        return Object(i.d)("3 months", "FollowersOnlyLabel");
                    default:
                        return i.k.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
                }
            }

            function s(e) {
                switch (e) {
                    case 0:
                        return Object(i.d)("0 min", "FollowersOnlyShorthand");
                    case 10:
                        return Object(i.d)("10 min", "FollowersOnlyShorthand");
                    case 30:
                        return Object(i.d)("30 min", "FollowersOnlyShorthand");
                    case 60:
                        return Object(i.d)("1 hr", "FollowersOnlyShorthand");
                    case 1440:
                        return Object(i.d)("1 day", "FollowersOnlyShorthand");
                    case 10080:
                        return Object(i.d)("1 wk", "FollowersOnlyShorthand");
                    case 43200:
                        return Object(i.d)("1 mo", "FollowersOnlyShorthand");
                    case 129600:
                        return Object(i.d)("3 mo", "FollowersOnlyShorthand");
                    default:
                        return Object(i.d)("custom", "FollowersOnlyShorthand")
                }
            }
        },
        W8Fi: function(e, t, n) {
            "use strict";

            function i(e) {
                return e.some(function(e) {
                    return !!e.self && !!e.self.promotion
                })
            }

            function r(e) {
                return e.some(function(e) {
                    return !!e.giftPromotion
                })
            }

            function a(e) {
                return e.some(function(e) {
                    return !!e.self && !!e.self.paidUpgradePromotion
                })
            }

            function o(e, t) {
                var n;
                return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.newPrice : e.price
            }

            function s(e, t) {
                var n;
                return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? parseInt(n.discountValue, 10) : 0
            }

            function l(e) {
                return e.self && e.self.paidUpgradePromotion ? e.self.paidUpgradePromotion.newPrice : e.price
            }

            function c(e) {
                return e.find(function(e) {
                    return !!e.self && !!e.self.paidUpgradePromotion
                }) || null
            }
            n.d(t, "g", function() {
                return i
            }), n.d(t, "e", function() {
                return r
            }), n.d(t, "f", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            })
        },
        WK0g: function(e, t, n) {
            "use strict";
            var i = n("cr+I"),
                r = n("b6Yk"),
                a = n("ahza"),
                o = n("mrSG"),
                s = n("pU2t"),
                l = n("XeJ1"),
                c = function(e, t) {
                    var n = Object(s.d)(e, t),
                        i = e.comments.reduce(function(e, t) {
                            return void 0 === t.video ? e : e.concat([d(t.video)])
                        }, []);
                    return Array.isArray(e.parents) && e.parents.forEach(function(e) {
                        n.comments.push(s.a.normalizeRecord(e, t)), n.users.push(l.a.normalizeRecord(e.commenter))
                    }), o.__assign({}, n, {
                        videos: i
                    })
                },
                d = function(e) {
                    return {
                        id: e._id,
                        title: e.title,
                        preview: e.preview
                    }
                };
            n.d(t, "b", function() {
                return g
            }), n.d(t, "a", function() {
                return f
            });
            var u = "channel_id",
                p = "limit",
                m = "video_id",
                h = 50;

            function g(e) {
                var t;
                return t = function(e) {
                    return "userId" in e
                }(e) ? function(e) {
                    var t = {};
                    return t[p] = h.toString(), t[u] = e.userId, void 0 !== e.cursor && (t[a.a] = e.cursor), "/v5/videos/comments?" + i.stringify(t)
                }(e) : function(e) {
                    var t = {};
                    return t[p] = h.toString(), t[m] = e.videoId, void 0 !== e.cursor && (t[a.a] = e.cursor), "/v5/videos/comments?" + i.stringify(t)
                }(e), r.a.getOrThrow(t).then(function(t) {
                    return c(t.body, e.bitsConfig)
                })
            }

            function f(e) {
                var t = function(e) {
                        return "/v5/videos/channels/" + e.targetChannel + "/bans"
                    }(e),
                    n = {
                        body: {
                            commenter_id: e.bannedUser
                        }
                    };
                return r.a.postOrThrow(t, n)
            }
        },
        WOQ1: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("fvjX"),
                a = n("d0ua"),
                o = n("mrSG"),
                s = n("TSYQ"),
                l = n("imBb"),
                c = n("q1tI"),
                d = n("Ue10"),
                u = (n("EihZ"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.toggleTheatreMode = function() {
                            t.props.theatreModeEnabled ? t.props.onTheatreModeDisabled() : t.props.onTheatreModeEnabled()
                        }, t.disableTheatreMode = function() {
                            t.props.theatreModeEnabled && t.props.onTheatreModeDisabled()
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentDidMount = function() {
                        l.bind("alt+t", this.toggleTheatreMode), l.bind("esc", this.disableTheatreMode)
                    }, t.prototype.componentWillUnmount = function() {
                        l.unbind("alt+t"), l.unbind("esc")
                    }, t.prototype.render = function() {
                        var e = s("channel-page__video-player", {
                            "channel-page__video-player--theatre-mode": this.props.theatreModeEnabled || !1,
                            "channel-page__video-player--theatre-mode-right-column-collapsed": this.props.theatreModeEnabled && !this.props.rightColumnExpanded
                        });
                        return c.createElement(d.Ya, {
                            className: e,
                            flexWrap: d.Ba.NoWrap,
                            fullHeight: this.props.theatreModeEnabled,
                            fullWidth: !this.props.rightColumnExpanded,
                            position: this.props.theatreModeEnabled ? d.kb.Fixed : d.kb.Relative
                        }, c.createElement(d.o, null, this.props.children))
                    }, t
                }(c.Component));
            n.d(t, "a", function() {
                return p
            });
            var p = Object(i.connect)(function(e) {
                return {
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    rightColumnExpanded: e.ui.rightColumnExpanded
                }
            }, function(e) {
                return Object(r.bindActionCreators)({
                    onTheatreModeDisabled: a.C,
                    onTheatreModeEnabled: a.F
                }, e)
            })(u)
        },
        WytW: function(e, t, n) {
            "use strict";
            n.d(t, "g", function() {
                return a
            }), n.d(t, "h", function() {
                return o
            }), n.d(t, "j", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "d", function() {
                return d
            }), n.d(t, "e", function() {
                return u
            }), n.d(t, "f", function() {
                return p
            }), n.d(t, "a", function() {
                return m
            }), n.d(t, "p", function() {
                return g
            }), n.d(t, "m", function() {
                return v
            }), n.d(t, "q", function() {
                return k
            }), n.d(t, "k", function() {
                return C
            }), n.d(t, "o", function() {
                return E
            }), n.d(t, "n", function() {
                return O
            }), n.d(t, "l", function() {
                return D
            }), n.d(t, "i", function() {
                return T
            });
            var i = n("/7QA"),
                r = i.p.logger.withCategory("chat-commands");

            function a(e) {
                return "/mod " + e
            }

            function o(e) {
                return "/unmod " + e
            }

            function s(e) {
                return /^[\/]/.test(e)
            }

            function l() {
                return "/clear"
            }

            function c() {
                return "/followersoff"
            }

            function d() {
                return "/slowoff"
            }

            function u(e) {
                return "/followers " + e
            }

            function p() {
                return "/slow"
            }

            function m(e) {
                return "/color " + e
            }
            var h = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i;

            function g(e) {
                var t = e.trim().match(h);
                return t ? {
                    recipientLogin: t[1] || null,
                    body: t[2] || null
                } : null
            }
            var f = /^\/host(?:$|\s+)(\S+)/i;

            function v(e) {
                var t = e.trim().match(f);
                return t ? {
                    recipientLogin: t[1]
                } : null
            }
            var b = /^(\S+)?\s+(.+)?$/;

            function k(e) {
                var t = e.trim().match(b);
                return t ? {
                    recipientLogin: t[1] || null,
                    body: t[2] || null
                } : {
                    recipientLogin: null,
                    body: null
                }
            }
            var y = /^\/ban\s+@?(\S+)(?:\s+(.+))?$/;

            function C(e) {
                var t = e.trim().match(y);
                return t ? {
                    banTarget: t[1],
                    reason: t[2] || null
                } : null
            }
            var S = /^\/timeout\s+@?(\S+)(?:\s+(\d+))?(?:\s+(.+))?$/;

            function E(e) {
                var t = e.trim().match(S);
                return t ? {
                    banTarget: t[1],
                    duration: t[2] && Number(t[2]) || null,
                    reason: t[3] || null
                } : null
            }
            var N = /^\/slow(?:\s+(\d+)?)?$/;

            function O(e) {
                var t = e.trim().match(N);
                return t ? {
                    duration: t[1] && Number(t[1]) || null
                } : null
            }
            var _ = ["blue", "blueviolet", "cadetblue", "chocolate", "coral", "dodgerblue", "firebrick", "goldenrod", "green", "hotpink", "orangered", "red", "seagreen", "springgreen", "yellowgreen"],
                w = /^\/color\s+(#[A-Fa-f0-9]{6}|[A-Za-z]+)$/;

            function D(e) {
                var t = e.trim().match(w);
                if (!t) return null;
                var n = t[1];
                return n.startsWith("#") || -1 !== _.indexOf(n.toLowerCase()) ? {
                    color: n
                } : null
            }
            var I = /^[/.]([a-z0-9]+)(.+)?$/i;

            function T(e, t) {
                var n = e.match(I);
                if (!n) return {
                    handled: !1
                };
                var a = n[1],
                    o = i.p.store.getState().chat.commandHandlers[a.toLowerCase()];
                if (!o) return {
                    command: a,
                    handled: !1
                };
                if (1 !== o.length) return r.error(new Error("Failed to run comand " + a), "Multiple command handlers defined for '" + a + "'", {
                    command: a
                }), {
                    command: a,
                    handled: !1
                };
                var s = (n[2] || "").trim(),
                    l = {
                        channelLogin: t
                    },
                    c = o[0];
                try {
                    return {
                        command: a,
                        handled: !0,
                        result: c(s, l)
                    }
                } catch (e) {
                    return r.warn("Exception thrown from chat command handler", {
                        command: a,
                        err: e
                    }), {
                        handled: !1
                    }
                }
            }
        },
        X7Ac: function(e, t, n) {
            "use strict";
            var i = n("wbMx");
            n.d(t, "a", function() {
                return i.a
            }), n.d(t, "b", function() {
                return i.b
            })
        },
        XA5B: function(e, t, n) {},
        XEwr: function(e, t, n) {
            "use strict";

            function i(e) {
                if (!e || 0 === e.edges.length) return [];
                var t = [];
                return e.edges.forEach(function(e) {
                    e.node.id && t.push(e.node)
                }), t
            }

            function r(e) {
                return "slug" in e
            }
            n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            })
        },
        XIZb: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("4rCz"),
                o = n("1rIY");

            function s(e) {
                var t = Object(o.a)(e, {
                        setServiceAPI: function() {
                            a.l.warn("The " + e + " chat service attempted to register its API without a provider.")
                        }
                    }),
                    n = t.InnerProvider,
                    s = t.withContext;
                return {
                    InnerProvider: n,
                    withChatServiceProvider: function(e) {
                        return function(t) {
                            function a() {
                                var e = null !== t && t.apply(this, arguments) || this;
                                return e.state = {}, e.setServiceAPI = function(t) {
                                    e.setState({
                                        serviceAPI: t
                                    })
                                }, e
                            }
                            return i.__extends(a, t), a.prototype.render = function() {
                                return r.createElement(n, {
                                    value: {
                                        serviceAPI: this.state.serviceAPI,
                                        setServiceAPI: this.setServiceAPI
                                    }
                                }, r.createElement(e, i.__assign({}, this.props)))
                            }, a
                        }(r.Component)
                    },
                    withContext: s
                }
            }
        },
        XMq5: function(e, t, n) {},
        XQnt: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "EmotePicker_SubUpsell_PriceInfo"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "tier"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "price"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "priceInfo"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "currency"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "exponent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "total"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "description"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "price"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isTaxInclusive"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tax"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emoteSetID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "self"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "promotion"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "newPrice"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "oldPrice"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "discountType"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "discountValue"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "paidUpgradePromotion"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "newPrice"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "oldPrice"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "discountType"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "discountValue"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 393
                }
            };
            n.loc.source = {
                body: "query EmotePicker_SubUpsell_PriceInfo($channelID: ID!) {\nuser(id: $channelID) {\nid\nsubscriptionProducts {\nid\ndisplayName\nname\ntier\nurl\nemotes {\nid\ntoken\n}\nprice\npriceInfo {\ncurrency\nexponent\ntotal\ndescription\nprice\nisTaxInclusive\nid\ntax\n}\nemoteSetID\nself {\npromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\npaidUpgradePromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        XXm5: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            });
            var i = "vod-message",
                r = "mod-dashboard",
                a = "mod-comment"
        },
        XeJ1: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("nxZp"),
                r = n("ehEd"),
                a = {
                    normalizeRecord: function(e) {
                        return new i.a({
                            id: e._id,
                            name: e.name,
                            logo: new URL(e.logo || r.a),
                            bio: e.bio,
                            createdAt: new Date(e.created_at),
                            displayName: e.display_name,
                            type: e.type,
                            updatedAt: new Date(e.updated_at)
                        })
                    },
                    serializeRecord: function(e) {
                        return {
                            _id: e.id,
                            name: e.name,
                            logo: e.logo.toString(),
                            bio: e.bio,
                            created_at: e.createdAt.toISOString(),
                            display_name: e.displayName,
                            type: e.type,
                            updated_at: e.updatedAt.toISOString()
                        }
                    }
                }
        },
        Y3y8: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("yR8l"),
                r = n("eDVu"),
                a = n("0Log"),
                o = n("/aPz"),
                s = n("/gva");

            function l() {
                return Object(i.a)(s, {
                    name: "currentUserBannedStatusData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin || !e.firstPageLoaded
                    }
                })
            }

            function c() {
                return Object(r.a)(function(e) {
                    return {
                        variables: {
                            channelLogin: e.channelLogin
                        },
                        query: s,
                        skip: !e.sessionUser || !e.channelID || !e.firstPageLoaded,
                        topic: e.sessionUser && e.channelID ? Object(o.j)("" + (e.sessionUser && e.sessionUser.id)) : "",
                        type: a.PubsubMessageType.ChatRoomsUserModAction,
                        mutator: function(t, n) {
                            return e.sessionUser && e.channelID && n.channel && n.channel.self && t.data.target_id === e.sessionUser.id && t.data.channel_id === e.channelID && ("ban" === t.data.action ? n.channel.self.banStatus = {
                                isPermanent: !0,
                                __typename: "ChatRoomBanStatus"
                            } : "unban" === t.data.action && (n.channel.self.banStatus = {
                                isPermanent: !1,
                                __typename: "ChatRoomBanStatus"
                            })), n
                        }
                    }
                })
            }
        },
        Y5lD: function(e, t, n) {
            "use strict";

            function i(e) {
                return Math.floor((Date.now() - new Date(e).getTime()) / 1e3)
            }
            n.d(t, "a", function() {
                return i
            })
        },
        YXxK: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                Embed: "embed",
                Web: "web"
            }
        },
        Yr1V: function(e, t, n) {},
        YwGE: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            });
            var i = {
                    Created: "created",
                    Downloading: "downloading",
                    Transmuxing: "transmuxing",
                    Failed: "failed",
                    Complete: "complete"
                },
                r = "public"
        },
        ZEQw: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return i
            }), n.d(t, "d", function() {
                return r
            }), n.d(t, "e", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            });
            var i = "subscribe_to_channel",
                r = "turbo",
                a = "visit_url",
                o = "none",
                s = "broadcaster"
        },
        ZLqn: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("EuPq"),
                o = n("X7Ac"),
                s = n("eJ65"),
                l = n("EdhP"),
                c = n("+GjP"),
                d = n("Ue10"),
                u = function(e) {
                    var t = Object(c.e)("https://www.twitch.tv/" + e.login, {
                            tt_medium: "live_embed",
                            tt_content: "text_link"
                        }),
                        n = Object(r.d)("Watch live video from {displayName} on www.twitch.tv", {
                            displayName: e.displayName || e.login
                        }, "ChannelShareButton"),
                        u = Object(l.b)({
                            channel: e.login
                        }, {
                            textLink: {
                                url: t,
                                text: n
                            },
                            allowScrolling: !1,
                            allowFullscreen: !0
                        }),
                        p = "https://www.twitch.tv/embed/" + e.login + "/chat",
                        m = Object(l.a)(p, {
                            height: 500,
                            width: 350,
                            allowFullscreen: !1,
                            allowScrolling: !1
                        });
                    return i.createElement(s.a, null, i.createElement(d.z, {
                        type: d.F.Hollow,
                        "data-a-target": "share-button",
                        icon: d.ub.Share
                    }, Object(r.d)("Share", "ChannelShareButton")), i.createElement(d.u, {
                        direction: d.v.TopRight,
                        size: d.w.Small,
                        "data-a-target": "share-balloon"
                    }, i.createElement(d.Ya, {
                        padding: 1
                    }, i.createElement(d.Ya, {
                        padding: {
                            top: 1,
                            bottom: 1
                        },
                        display: d.X.Flex,
                        justifyContent: d.Xa.Between
                    }, i.createElement(o.a, {
                        type: o.b.Twitter,
                        text: e.title,
                        "data-a-target": "twitter-share-button"
                    }), i.createElement(o.a, {
                        type: o.b.Facebook,
                        "data-a-target": "facebook-share-button"
                    }), i.createElement(o.a, {
                        type: o.b.VKontakte,
                        "data-a-target": "vkontakte-share-button"
                    }), i.createElement(o.a, {
                        type: o.b.Reddit,
                        text: e.title,
                        "data-a-target": "reddit-share-button"
                    }), i.createElement(o.a, {
                        type: o.b.Copy,
                        "data-a-target": "copy-link-share-button"
                    })), i.createElement(d.Ya, null, i.createElement(d.Ya, {
                        padding: {
                            top: 1
                        }
                    }, i.createElement(d.W, null, Object(r.d)("Embed Channel", "ChannelShareButton")), i.createElement(a.a, {
                        value: u
                    })), i.createElement(d.Ya, {
                        padding: {
                            top: 1
                        }
                    }, i.createElement(d.W, null, Object(r.d)("Embed Chat", "ChannelShareButton")), i.createElement(a.a, {
                        value: m
                    }))))))
                };
            n.d(t, "a", function() {
                return u
            })
        },
        ZUUl: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            });
            var i = n("4rCz");

            function r(e, t) {
                return function(n, r) {
                    e({
                        dispatch: n,
                        getState: r
                    }, t, i.q.apollo.client)
                }
            }

            function a(e, t) {
                return function(n, r) {
                    e({
                        dispatch: n,
                        getState: r
                    }, t, i.q.apollo.client, i.p)
                }
            }
        },
        ZVTe: function(e, t, n) {
            "use strict";
            var i = n("TSYQ"),
                r = n("q1tI"),
                a = n("EE1E"),
                o = (n("2e6W"), function(e) {
                    var t, n = e.userData.color;
                    e.highContrastUsernameColor && n && (n = "#" + Object(a.a)(n, e.theme));
                    var o = [r.createElement("span", {
                        key: "username-display",
                        className: "chat-author__display-name",
                        "data-a-target": "chat-message-username",
                        "data-a-user": e.userData.userLogin,
                        "data-test-selector": "message-username",
                        style: {
                            color: n
                        }
                    }, e.userData.userDisplayName)];
                    if (e.userData.isIntl) {
                        var s = i(((t = {})["chat-author__intl-login"] = !e.highlighted, t["chat-author__intl-login--highlighted"] = e.highlighted, t));
                        o.push(r.createElement("span", {
                            key: "username-login",
                            style: {
                                color: n
                            },
                            className: s,
                            "data-test-selector": "message-username-canonical"
                        }, " (" + e.userData.userLogin + ")"))
                    }
                    return r.createElement("span", {
                        key: e.userData.userID + "-authorlabel"
                    }, o)
                });
            n.d(t, !1, function() {
                return "message-username"
            }), n.d(t, !1, function() {
                return "message-username-canonical"
            }), n.d(t, !1, function() {
                return "chat-author__display-name"
            }), n.d(t, !1, function() {
                return "chat-author__intl-login"
            }), n.d(t, !1, function() {
                return "chat-author__intl-login--highlighted"
            }), n.d(t, "a", function() {
                return o
            })
        },
        ZaHG: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoOptions_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "contentOwnerID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "contentOwnerID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isEditor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 100
                }
            };
            n.loc.source = {
                body: "query VideoOptions_User($contentOwnerID: ID!) {\nuser(id: $contentOwnerID) {\nid\nself {\nisEditor\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ZbA5: function(e, t, n) {
            "use strict";
            var i, r, a, o, s = n("mrSG"),
                l = n("TSYQ"),
                c = n("q1tI"),
                d = n("/7QA"),
                u = n("oB8h"),
                p = n("Ue10");
            n("kVMo");
            ! function(e) {
                e.HostingDot = "stream-type-indicator__hosting-dot"
            }(o || (o = {}));
            var m = ((i = {})[u.a.Live] = "stream-type-indicator--live", i[u.a.Premiere] = "stream-type-indicator--premiere", i[u.a.Rerun] = "stream-type-indicator--rerun", i[u.a.WatchParty] = "stream-type-indicator--rerun", i),
                h = ((r = {})[u.a.Premiere] = p.ub.VideoPremiere, r[u.a.Rerun] = p.ub.VideoRerun, r[u.a.WatchParty] = p.ub.VideoRerun, r),
                g = ((a = {})[u.a.Premiere] = p.vb.Live, a[u.a.Rerun] = p.vb.Inherit, a[u.a.WatchParty] = p.vb.Inherit, a),
                f = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return s.__extends(t, e), t.prototype.render = function() {
                        return c.createElement(p.Fb, {
                            className: this.getClassNames(),
                            color: p.O.Overlay,
                            background: p.r.Overlay,
                            padding: {
                                x: .5
                            },
                            borderRadius: p.x.Small,
                            display: p.X.Flex
                        }, c.createElement(p.Ya, {
                            display: p.X.Flex,
                            alignItems: p.f.Center,
                            margin: {
                                right: .5
                            }
                        }, this.getIcon()), c.createElement(p.W, {
                            type: p.Wb.Span
                        }, this.getLabel()))
                    }, t.prototype.getClassNames = function() {
                        var e = {
                            "stream-type-indicator": !0
                        };
                        return e[m[this.props.type]] = !0, l(e)
                    }, t.prototype.getIcon = function() {
                        return this.props.hosting ? c.createElement(p.Fb, {
                            borderRadius: p.x.Rounded,
                            className: "stream-type-indicator__hosting-dot",
                            "data-test-selector": o.HostingDot
                        }) : this.props.type === u.a.Live ? c.createElement(p.Ya, {
                            className: "stream-type-indicator__live-wrapper",
                            display: p.X.Flex,
                            alignItems: p.f.Center
                        }, c.createElement(p.K, {
                            status: p.M.Live,
                            size: p.L.Small
                        })) : c.createElement(p.tb, {
                            asset: h[this.props.type],
                            type: g[this.props.type],
                            width: 14,
                            height: 14
                        })
                    }, t.prototype.getLabel = function() {
                        if (this.props.hosting) return Object(d.d)("Hosting", "StreamTypeIndicator");
                        switch (this.props.type) {
                            case u.a.Live:
                                return Object(d.d)("LIVE", "StreamTypeIndicator");
                            case u.a.Premiere:
                                return Object(d.d)("Premiere", "StreamTypeIndicator");
                            case u.a.Rerun:
                            case u.a.WatchParty:
                                return Object(d.d)("Rerun", "StreamTypeIndicator");
                            default:
                                return ""
                        }
                    }, t
                }(c.Component);
            n.d(t, !1, function() {
                return o
            }), n.d(t, "a", function() {
                return f
            })
        },
        Zkco: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("q1tI"),
                r = n("cys1"),
                a = {
                    disableLinks: !0,
                    forceClipsNetworkRequest: !0
                },
                o = function(e) {
                    var t = e.message;
                    return i.createElement("span", {
                        key: t.id,
                        style: {
                            color: e.allowActionTextColors && t.isAction ? t.userColor : ""
                        }
                    }, Object(r.f)(t.tokens, a))
                }
        },
        ZtEv: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "c", function() {
                return r
            }), n.d(t, "e", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i, r, a, o, s = n("0Log");
            n.d(t, "d", function() {
                    return s.ModerationActions
                }),
                function(e) {
                    e[e.Message = 0] = "Message", e[e.ExtensionMessage = 1] = "ExtensionMessage", e[e.Moderation = 2] = "Moderation", e[e.ModerationAction = 3] = "ModerationAction", e[e.TargetedModerationAction = 4] = "TargetedModerationAction", e[e.AutoMod = 5] = "AutoMod", e[e.SubscriberOnlyMode = 6] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 7] = "FollowerOnlyMode", e[e.SlowMode = 8] = "SlowMode", e[e.EmoteOnlyMode = 9] = "EmoteOnlyMode", e[e.R9KMode = 10] = "R9KMode", e[e.Connected = 11] = "Connected", e[e.Disconnected = 12] = "Disconnected", e[e.Reconnect = 13] = "Reconnect", e[e.Hosting = 14] = "Hosting", e[e.Unhost = 15] = "Unhost", e[e.Hosted = 16] = "Hosted", e[e.Subscription = 17] = "Subscription", e[e.Resubscription = 18] = "Resubscription", e[e.GiftPaidUpgrade = 19] = "GiftPaidUpgrade", e[e.AnonGiftPaidUpgrade = 20] = "AnonGiftPaidUpgrade", e[e.SubGift = 21] = "SubGift", e[e.AnonSubGift = 22] = "AnonSubGift", e[e.Clear = 23] = "Clear", e[e.RoomMods = 24] = "RoomMods", e[e.RoomState = 25] = "RoomState", e[e.Raid = 26] = "Raid", e[e.Unraid = 27] = "Unraid", e[e.Ritual = 28] = "Ritual", e[e.Notice = 29] = "Notice", e[e.Info = 30] = "Info", e[e.BadgesUpdated = 31] = "BadgesUpdated", e[e.Purchase = 32] = "Purchase", e[e.BitsCharity = 33] = "BitsCharity", e[e.CrateGift = 34] = "CrateGift", e[e.RewardGift = 35] = "RewardGift", e[e.SubMysteryGift = 36] = "SubMysteryGift", e[e.AnonSubMysteryGift = 37] = "AnonSubMysteryGift"
                }(i || (i = {})),
                function(e) {
                    e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention"
                }(r || (r = {})),
                function(e) {
                    e[e.Ban = 0] = "Ban", e[e.Timeout = 1] = "Timeout", e[e.Delete = 2] = "Delete"
                }(a || (a = {})),
                function(e) {
                    e[e.MessageRejectedPrompt = 0] = "MessageRejectedPrompt", e[e.CheerMessageRejectedPrompt = 1] = "CheerMessageRejectedPrompt", e[e.MessageRejected = 2] = "MessageRejected", e[e.MessageAllowed = 3] = "MessageAllowed", e[e.MessageDenied = 4] = "MessageDenied", e[e.CheerMessageDenied = 5] = "CheerMessageDenied", e[e.CheerMessageTimeout = 6] = "CheerMessageTimeout", e[e.MessageModApproved = 7] = "MessageModApproved", e[e.MessageModDenied = 8] = "MessageModDenied"
                }(o || (o = {}))
        },
        ZuCe: function(e, t, n) {},
        ZuiC: function(e, t, n) {
            "use strict";
            n.d(t, "n", function() {
                return a
            }), n.d(t, "t", function() {
                return o
            }), n.d(t, "l", function() {
                return s
            }), n.d(t, "s", function() {
                return l
            }), n.d(t, "m", function() {
                return c
            }), n.d(t, "r", function() {
                return d
            }), n.d(t, "o", function() {
                return u
            }), n.d(t, "u", function() {
                return p
            }), n.d(t, "p", function() {
                return m
            }), n.d(t, "v", function() {
                return h
            }), n.d(t, "d", function() {
                return g
            }), n.d(t, "z", function() {
                return f
            }), n.d(t, "e", function() {
                return v
            }), n.d(t, "A", function() {
                return b
            }), n.d(t, "f", function() {
                return k
            }), n.d(t, "B", function() {
                return y
            }), n.d(t, "c", function() {
                return C
            }), n.d(t, "y", function() {
                return S
            }), n.d(t, "k", function() {
                return E
            }), n.d(t, "q", function() {
                return N
            }), n.d(t, "i", function() {
                return O
            }), n.d(t, "E", function() {
                return _
            }), n.d(t, "h", function() {
                return w
            }), n.d(t, "D", function() {
                return D
            }), n.d(t, "g", function() {
                return I
            }), n.d(t, "C", function() {
                return T
            }), n.d(t, "a", function() {
                return M
            }), n.d(t, "w", function() {
                return R
            }), n.d(t, "j", function() {
                return L
            }), n.d(t, "F", function() {
                return F
            }), n.d(t, "b", function() {
                return j
            }), n.d(t, "x", function() {
                return x
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = "vodChat.comments.DELETED_SUCCESS",
                o = function(e) {
                    return i.__assign({
                        type: a
                    }, e)
                },
                s = "vodChat.comments.CREATED_SUCCESS",
                l = function(e) {
                    return i.__assign({
                        type: s
                    }, e)
                },
                c = "vodChat.comments.CREATE_FAILED",
                d = function(e) {
                    return {
                        type: c,
                        createError: e
                    }
                },
                u = "vodChat.comments.DISPLAY_ERROR",
                p = function(e) {
                    return {
                        type: u,
                        errorMessage: e
                    }
                },
                m = "vodChat.comments.UPDATED_SUCCESS",
                h = function(e) {
                    return i.__assign({
                        type: m
                    }, e)
                },
                g = "vodChat.comments.CURSOR_RECEIVED",
                f = function(e) {
                    return i.__assign({
                        type: g
                    }, e)
                },
                v = "vodChat.comments.OFFSET_RECEIVED",
                b = function(e) {
                    return i.__assign({
                        type: v
                    }, e)
                },
                k = "vodChat.comments.QUERY_FAILED",
                y = function() {
                    return {
                        type: k
                    }
                },
                C = "vodChat.comments.CLEARED",
                S = function() {
                    return {
                        type: C
                    }
                },
                E = "vodChat.comments.COOLDOWN_ENDED",
                N = function() {
                    return {
                        type: E
                    }
                },
                O = "vodChat.comments.SYNC_ENABLED",
                _ = function() {
                    return {
                        type: O
                    }
                },
                w = "vodChat.comments.SYNC_DISABLED",
                D = function() {
                    return {
                        type: w
                    }
                },
                I = "vodChat.comments.REPLAY_FILTER_CHANGED",
                T = function(e) {
                    return r.m.set("videoChat.is_replay_mode", e), {
                        type: I,
                        isReplayFilterOn: e
                    }
                },
                M = "vodChat.comments.CHAT_REPLAY_ERROR_HIDE",
                R = function() {
                    return {
                        type: M
                    }
                },
                L = "vodChat.comments.TIMESTAMP_MODE_CHANGED",
                F = function(e) {
                    return r.m.set("videoChat.hide_timestamps", e), {
                        type: L,
                        hideTimestamps: e
                    }
                },
                j = "vodChat.comments.REQUEST_CHAT_SETTINGS",
                x = function() {
                    return {
                        type: j,
                        isReplayFilterOn: r.m.get("videoChat.is_replay_mode", !1),
                        hideTimestamps: r.m.get("videoChat.hide_timestamps", !1)
                    }
                }
        },
        a1OF: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return u
            }), n.d(t, "b", function() {
                return p
            }), n.d(t, "e", function() {
                return m
            }), n.d(t, "c", function() {
                return h
            }), n.d(t, "d", function() {
                return g
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("oe5X"),
                o = n("0FG4"),
                s = n("kRBY"),
                l = n("60o1"),
                c = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
                d = {};

            function u(e, t, n, r, a, o, s) {
                void 0 === a && (a = !1), void 0 === o && (o = !1), void 0 === s && (s = !1);
                var c = Object(l.a)(t.displayName, t.username);
                return {
                    badges: t.badges || {},
                    bits: t.bits,
                    user: i.__assign({}, c, {
                        userLogin: t.username,
                        userID: t.userID,
                        userType: t.userType,
                        color: t.color || p(t.userID)
                    }),
                    messageParts: m(e, t.emotes || {}, t.bits, n, r, t.username),
                    deleted: a,
                    banned: s,
                    hidden: o,
                    timestamp: Date.now()
                }
            }

            function p(e, t) {
                return void 0 === t && (t = 15), "number" != typeof d[e] && (d[e] = Math.floor(Math.random() * t)), c[d[e]]
            }

            function m(e, t, n, i, l, c) {
                var d = Object(s.e)(r.p.store.getState()),
                    u = {
                        cheers: n ? i : void 0,
                        emotes: {
                            type: o.a.Position,
                            map: t
                        },
                        links: {
                            blockLinks: l,
                            parseClips: !0,
                            parseVods: !0
                        },
                        mentions: {
                            senderLogin: c,
                            sessionUser: d
                        }
                    };
                return Object(a.a)(e, u)
            }

            function h(e) {
                return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g)
            }

            function g(e, t) {
                return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
            }
        },
        a2UF: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("Pub/"),
                o = n("HzXE"),
                s = n("1Rv/");

            function l(e) {
                var t = this;
                return Object(r.a)(s, {
                    props: function(n) {
                        return {
                            unbanUserMutation: function(r) {
                                return i.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(s) {
                                        switch (s.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                s.label = 1;
                                            case 1:
                                                return s.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: r
                                                        }
                                                    },
                                                    update: function(e, n) {
                                                        return function(e, t, n) {
                                                            if (t && t.data && t.data.unbanUserFromChatRoom && t.data.unbanUserFromChatRoom.ban && t.data.unbanUserFromChatRoom.ban.bannedUser && t.data.unbanUserFromChatRoom.ban.bannedUser.id) {
                                                                var r = Object(a.a)(e, n, t.data.unbanUserFromChatRoom.ban.bannedUser.id);
                                                                if (!r) return;
                                                                e.writeQuery({
                                                                    query: o,
                                                                    variables: {
                                                                        targetUserID: t.data.unbanUserFromChatRoom.ban.bannedUser.id,
                                                                        channelID: n
                                                                    },
                                                                    data: i.__assign({}, r, {
                                                                        chatRoomBanStatus: null
                                                                    })
                                                                })
                                                            }
                                                        }(e, n, t)
                                                    }
                                                })];
                                            case 2:
                                                return [2, s.sent().data];
                                            case 3:
                                                throw s.sent(), new Error("Unable to unban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Unban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        a5fV: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return a
            });
            var i = n("/7QA");

            function r(e, t) {
                return e / Math.pow(10, t)
            }

            function a(e, t) {
                return Object(i.f)(e, {
                    style: "currency",
                    currency: t
                })
            }
        },
        a7aT: function(e, t, n) {},
        a9YZ: function(e, t, n) {
            "use strict";
            n.d(t, "d", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            }), n.d(t, "c", function() {
                return l
            });
            var i = n("q1tI"),
                r = n("Ue10");

            function a(e) {
                return e ? e.split(/ {2}\n|\n(?!\d+\.)(?!\*|- )|^\n/gm) : []
            }

            function o(e) {
                return i.createElement(r.Qa, {
                    ellipsis: !0
                }, i.createElement("li", null, e.children))
            }

            function s(e) {
                switch (e.level) {
                    case 4:
                        return i.createElement(r.W, {
                            type: r.Wb.H4,
                            ellipsis: !0
                        }, e.children);
                    case 5:
                        return i.createElement(r.W, {
                            type: r.Wb.H5,
                            ellipsis: !0
                        }, e.children);
                    case 6:
                        return i.createElement(r.W, {
                            type: r.Wb.H6,
                            ellipsis: !0
                        }, e.children);
                    default:
                        return i.createElement(r.W, {
                            type: r.Wb.H3,
                            ellipsis: !0
                        }, e.children)
                }
            }

            function l(e) {
                return i.createElement(r.W, {
                    type: r.Wb.P,
                    ellipsis: !0
                }, e.children)
            }
        },
        aF6k: function(e, t, n) {
            "use strict";

            function i(e) {
                var t = Math.random().toString(36).substring(2, 6);
                return e + "-" + Date.now() + "-" + t
            }
            n.d(t, "a", function() {
                return i
            })
        },
        aJDl: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("GnwI"),
                o = n("Ue10"),
                s = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("li", null, r.createElement(o.Va, i.__assign({
                            "data-test-selector": this.props.testSelector
                        }, this.props.interactableProps), r.createElement(o.Ya, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, this.props.children)))
                    }, t = i.__decorate([Object(a.b)("InteractableOption", {
                        autoReportInteractive: !0
                    })], t)
                }(r.Component);
            n.d(t, "a", function() {
                return s
            })
        },
        ahza: function(e, t, n) {
            "use strict";
            var i = n("cr+I"),
                r = n("b6Yk");
            var a = n("pU2t");
            n.d(t, "a", function() {
                return s
            }), n.d(t, "b", function() {
                return p
            }), n.d(t, "g", function() {
                return m
            }), n.d(t, "h", function() {
                return h
            }), n.d(t, "c", function() {
                return g
            }), n.d(t, "e", function() {
                return f
            }), n.d(t, "d", function() {
                return v
            }), n.d(t, "f", function() {
                return b
            });
            var o = "content_offset_seconds",
                s = "cursor",
                l = "comment_id";

            function c(e) {
                return function(e) {
                    return "/v5/videos/" + e
                }(e) + "/comments"
            }

            function d(e) {
                return u(e).toString() + "/replies"
            }

            function u(e) {
                return "/v5/videos/comments/" + e
            }

            function p(e) {
                var t;
                t = f(e) ? d(e.parentId) : c(e.contentId);
                var n = {
                    body: Object(a.g)(e)
                };
                return r.a.post(t, n)
            }

            function m(e) {
                try {
                    if (function(e) {
                            return "commentID" in e
                        }(e)) return function(e) {
                        var t = {};
                        void 0 !== e.cursor && (t[s] = e.cursor);
                        var n = d(e.commentID) + "?" + i.stringify(t);
                        return r.a.getOrThrow(n).then(function(e) {
                            return Object(a.e)(e.body)
                        })
                    }(e);
                    var t = {};
                    v(e) ? t[s] = e.cursor : b(e) && (t[o] = "" + e.offset, void 0 !== e.highlightedMessageID && (t[l] = e.highlightedMessageID));
                    var n = c(e.videoID) + "?" + i.stringify(t);
                    return r.a.getOrThrow(n).then(function(t) {
                        return Object(a.d)(t.body, e.bitsConfig)
                    })
                } catch (e) {
                    return Promise.reject(e)
                }
            }

            function h(e) {
                var t = u(e.comment.id),
                    n = {
                        body: {
                            state: e.state
                        }
                    };
                return r.a.putOrThrow(t, n).then(function(t) {
                    return Object(a.f)(t.body, e.comment)
                })
            }

            function g(e) {
                var t = u(e.id);
                return r.a.delete(t)
            }

            function f(e) {
                return "parentId" in e
            }

            function v(e) {
                return "cursor" in e
            }

            function b(e) {
                return "offset" in e
            }
        },
        axcf: function(e, t, n) {},
        b5C3: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("q1tI"),
                r = n("vHGB"),
                a = function(e) {
                    var t = e.badgesToRender,
                        n = e.badgeSets;
                    if (!t) return null;
                    var a = [];
                    ! function(e) {
                        return Array.isArray(e)
                    }(t) ? function(e) {
                        return !Array.isArray(e)
                    }(t) && (a = Object.keys(t).map(function(e) {
                        var a = t[e],
                            o = n.getBadge(e, a);
                        return null === o ? null : i.createElement(r.a, {
                            key: o.setID + "/" + o.version,
                            badge: o
                        })
                    })) : a = t.map(function(e) {
                        var t = n.getBadge(e.setID, e.version);
                        return null === t ? null : i.createElement(r.a, {
                            key: t.setID + "/" + t.version,
                            badge: t
                        })
                    });
                    var o = a.filter(function(e) {
                        return null !== e
                    });
                    return i.createElement("span", null, o)
                };
            a.displayName = "BadgeList"
        },
        b6Yk: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("kRBY"),
                o = function() {
                    function e() {}
                    return e.get = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.request(e, i.__assign({}, t, {
                                            method: "GET"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.getOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                            method: "GET"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.put = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.request(e, i.__assign({}, t, {
                                            method: "PUT"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.putOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                            method: "PUT"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.post = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.request(e, i.__assign({}, t, {
                                            method: "POST"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.postOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                            method: "POST"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.delete = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.request(e, i.__assign({}, t, {
                                            method: "DELETE"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.deleteOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                            method: "DELETE"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.request = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            var r, a, o, s;
                            return i.__generator(this, function(l) {
                                switch (l.label) {
                                    case 0:
                                        return t = this.constructOptions(t, n), r = t.headers ? t.headers["Content-Type"] : void 0, a = this.serialize(t.body, r), o = i.__assign({}, t, {
                                            body: a
                                        }), [4, this._fetch(e, o)];
                                    case 1:
                                        return s = l.sent(), [4, this.constructLegacyAPIResponse(s)];
                                    case 2:
                                        return [2, l.sent()]
                                }
                            })
                        })
                    }, e.requestOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            var r;
                            return i.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return a.trys.push([0, 2, , 3]), [4, this.request(e, t, n)];
                                    case 1:
                                        if ((r = a.sent()).requestError) throw r.requestError;
                                        if (r.error) throw new Error("Error while sending legacy-api request: " + r.error.status + " - " + r.error.message);
                                        return [2, i.__assign({}, r, {
                                            body: r.body
                                        })];
                                    case 2:
                                        throw a.sent();
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, e.getAPIURL = function(e) {
                        return new URL(e, r.p.config.apiBaseURL)
                    }, e.constructLegacyAPIResponse = function(e) {
                        return i.__awaiter(this, void 0, Promise, function() {
                            var t, n, r, a;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        t = {
                                            status: e.status
                                        }, i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, e.json()];
                                    case 2:
                                        return n = i.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                    case 3:
                                        return r = i.sent(), e.headers && e.headers.get && (a = e.headers.get("Content-Type")) && -1 !== a.indexOf("application/json") && (t.requestError = r), [3, 4];
                                    case 4:
                                        return [2, t]
                                }
                            })
                        })
                    }, e._fetch = function(e, t) {
                        return void 0 === t && (t = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return [4, fetch(this.getAPIURL(e).toString(), t)];
                                    case 1:
                                        return [2, n.sent()]
                                }
                            })
                        })
                    }, e.constructOptions = function(e, t) {
                        return e = Object.assign({}, e, {
                            headers: i.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                        })
                    }, e.serialize = function(e, t) {
                        return "application/json; charset=UTF-8" === t ? JSON.stringify(e) : "string" == typeof e ? e : e && FormData.prototype.isPrototypeOf(e) ? e : e ? (this.logger.error(new Error("Could not serialize this request body for the content-type provided."), "attempting to serialize object with a non-JSON content-type", {
                            contentType: t
                        }), null) : null
                    }, e.getDefaultHeaders = function(e, t) {
                        var n = r.p.store.getState(),
                            i = {
                                Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                                "Accept-Language": "en-us",
                                "Client-ID": r.p.config.legacyClientID,
                                "X-Requested-With": "XMLHttpRequest"
                            };
                        e.body && FormData.prototype.isPrototypeOf(e.body) || (i["Content-Type"] = "application/json; charset=UTF-8");
                        var o = Object(a.e)(n);
                        return o && (i.Authorization = "OAuth " + o.authToken, o.legacyCSRFToken && (i["Twitch-Api-Token"] = o.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                            i[e] && delete i[e]
                        }), i
                    }, e.logger = r.p.logger.withCategory("legacy-api"), e
                }()
        },
        b7X6: function(e, t, n) {},
        bO5A: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return g
            });
            var i, r = n("mrSG"),
                a = n("cr+I"),
                o = n("q1tI"),
                s = n("9C/b"),
                l = n("/7QA"),
                c = n("eJ65"),
                d = n("+GjP"),
                u = n("vRsq"),
                p = n("Ue10");

            function m(e) {
                var t = a.parse(e)[u.d];
                if ("string" != typeof t) return null;
                switch (t.toUpperCase()) {
                    case u.f.Newest.toUpperCase():
                        return u.f.Newest;
                    case u.f.Popular.toUpperCase():
                        return u.f.Popular;
                    default:
                        return null
                }
            }! function(e) {
                e.ButtonText = "button-text", e.SortText = "sort-text"
            }(i || (i = {}));
            var h = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderSort = function(e) {
                            return o.createElement(p.Va, {
                                "data-test-selector": function(e) {
                                    return "sort-interactable-" + e.searchValue
                                }(e),
                                onClick: function() {
                                    t.handleSortClick(e)
                                },
                                key: e.label,
                                selected: !!e.selected
                            }, o.createElement(p.Ya, {
                                padding: {
                                    x: 1,
                                    y: .5
                                },
                                "data-test-selector": i.SortText
                            }, e.label))
                        }, t.handleSortClick = function(e) {
                            t.props.history.push(t.generateLocationWithSort(t.props.location, e.searchValue))
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.checkSortValue(this.props.location)
                    }, t.prototype.render = function() {
                        var e = this.getSorts(),
                            t = e.find(function(e) {
                                return !!e.selected
                            });
                        return o.createElement("div", null, o.createElement(p.Ya, {
                            padding: {
                                bottom: .5
                            }
                        }, o.createElement(p.W, {
                            bold: !0
                        }, Object(l.d)("Sorted by", "VideoSort"))), o.createElement(c.a, {
                            hideBalloonOnInsideClick: !0
                        }, o.createElement(p.z, {
                            type: p.F.Hollow,
                            dropdown: !0,
                            "data-test-selector": i.ButtonText
                        }, t ? t.label : e[0].label), o.createElement(p.u, {
                            noTail: !0
                        }, e.map(this.renderSort))))
                    }, t.prototype.getSorts = function() {
                        var e = [{
                                label: Object(l.d)("Date", "VideoSort"),
                                searchValue: u.f.Newest
                            }, {
                                label: Object(l.d)("Popular", "VideoSort"),
                                searchValue: u.f.Popular
                            }],
                            t = m(this.props.location.search),
                            n = e.find(function(e) {
                                return null !== t && e.searchValue === t
                            });
                        return n && (n.selected = !0), e
                    }, t.prototype.checkSortValue = function(e) {
                        m(e.search) || this.props.history.replace(this.generateLocationWithSort(e, u.f.Newest))
                    }, t.prototype.generateLocationWithSort = function(e, t) {
                        var n;
                        return Object(d.d)(e, ((n = {})[u.d] = t, n))
                    }, t
                }(o.Component),
                g = Object(s.a)(h)
        },
        bRMw: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            });
            var i = n("/7QA"),
                r = n("kRBY"),
                a = "cc_v2_whitelist";

            function o(e, t) {
                var n = i.b.get(e, []),
                    a = i.p.store.getState();
                return n.includes(t) || n.includes(t + "-staff") && Object(r.g)(a)
            }
        },
        bTT7: function(e, t, n) {},
        bTcf: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoShareBox_CollectionTrackingMeta"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "creatorID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "creatorID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPartner"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 117
                }
            };
            n.loc.source = {
                body: "query VideoShareBox_CollectionTrackingMeta($creatorID: ID!) {\nuser(id: $creatorID) {\nid\nlogin\nroles {\nisPartner\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        bbjt: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "esportsProgressCampaign"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hasPrime"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blizzardAccount"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "battleTag"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "region"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 182
                }
            };
            n.loc.source = {
                body: "query esportsProgressCampaign($channelID: ID!) {\nuser(id: $channelID) {\nid\nself {\nsubscriptionBenefit {\nid\n}\n}\n}\ncurrentUser {\nid\nhasPrime\nblizzardAccount {\nid\nbattleTag\nregion\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        bdHe: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("Ue10"),
                a = function() {
                    return i.createElement(r.G, null, i.createElement(r.o, {
                        ratio: r.p.Aspect16x9
                    }, i.createElement(r.jb, null)), i.createElement(r.Ya, {
                        alignItems: r.f.Center,
                        justifyContent: r.Xa.Center,
                        display: r.X.Flex,
                        flexDirection: r.Aa.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        position: r.kb.Absolute
                    }, i.createElement(r.H, null, i.createElement(r.Ya, {
                        alignItems: r.f.Center,
                        justifyContent: r.Xa.Center,
                        display: r.X.Flex,
                        flexDirection: r.Aa.Column
                    }, i.createElement(r.Ya, {
                        display: r.X.InlineBlock,
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(r.jb, {
                        height: 50,
                        width: 50,
                        overlay: !0
                    })), i.createElement(r.W, null, i.createElement(r.jb, {
                        lineCount: 1,
                        width: 75,
                        overlay: !0
                    })), i.createElement(r.W, null, i.createElement(r.jb, {
                        lineCount: 1,
                        width: 150,
                        overlay: !0
                    }))))))
                };
            n.d(t, "a", function() {
                return o
            });
            var o = function() {
                for (var e = [], t = 0; t < 20; t++) e.push(i.createElement(r.Ya, {
                    margin: {
                        bottom: 2
                    },
                    key: t
                }, i.createElement(a, null)));
                return i.createElement(r.Ya, {
                    display: r.X.Flex,
                    flexGrow: 1,
                    fullHeight: !0
                }, i.createElement(r.cc, {
                    placeholderItems: 10,
                    center: !0,
                    gutterSize: r.ec.Small,
                    childWidth: r.dc.Large
                }, e))
            }
        },
        bdIb: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("GFmA"),
                s = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickHandler = function() {
                            t.props.onClick && t.props.onClick(t.props.tracking.content_index)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(o.a, {
                            context: this.props.context,
                            title: this.props.clip.title,
                            linkTo: {
                                pathname: this.props.clip.broadcaster ? "/" + this.props.clip.broadcaster.login + "/clip/" + this.props.clip.slug : "",
                                state: this.getLinkState()
                            },
                            onClick: this.onClickHandler,
                            thumbnailImageProps: {
                                src: this.props.clip.thumbnailURL || a.p.config.defaultStreamPreviewURL,
                                alt: this.props.clip.title
                            },
                            channelDisplayName: this.props.clip.broadcaster && this.props.clip.broadcaster.displayName || "",
                            channelLogin: this.props.clip.broadcaster && this.props.clip.broadcaster.login || "",
                            channelLinkTo: {
                                pathname: this.props.clip.broadcaster ? "/" + this.props.clip.broadcaster.login : "",
                                state: this.getLinkState()
                            },
                            channelImageProps: {
                                src: this.props.clip.broadcaster && this.props.clip.broadcaster.profileImageURL || "",
                                alt: this.props.clip.broadcaster && this.props.clip.broadcaster.login || ""
                            },
                            gameTitle: this.props.clip.game && this.props.clip.game.name || void 0,
                            gameTitleLinkTo: this.props.clip.game ? {
                                pathname: "/directory/game/" + encodeURI(this.props.clip.game.name),
                                state: this.getLinkState()
                            } : void 0,
                            gameBoxArtImageProps: this.props.clip.game ? {
                                src: this.props.clip.game.boxArtURL || a.a.defaultBoxArtURL,
                                alt: this.props.clip.game.name
                            } : void 0,
                            datePublished: this.props.clip.createdAt,
                            viewCount: this.props.clip.viewCount,
                            durationInSeconds: this.props.clip.durationSeconds,
                            clipCreatedByChannelLogin: this.props.clip.curator && this.props.clip.curator.login || "",
                            clipCreatedByChannelLoginLinkTo: this.props.clip.curator ? "/" + this.props.clip.curator.login : ""
                        })
                    }, t.prototype.getLinkState = function() {
                        return {
                            content: this.props.tracking.content,
                            content_index: this.props.tracking.content_index,
                            medium: this.props.tracking.medium
                        }
                    }, t
                }(r.Component)
        },
        bhOa: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("gcd7"),
                s = n("ygQa"),
                l = n("WytW"),
                c = n("Ue10"),
                d = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.updateChatColor = function(e) {
                            var n = Object(l.l)("/color " + e);
                            if (n && n.color) {
                                var i = n.color;
                                return {
                                    deferred: t.props.updateChatColorMutation(i).then(function() {
                                        return {
                                            notice: Object(a.d)("Your color has been changed.", "ColorCommandHandler")
                                        }
                                    }).catch(function() {
                                        return {
                                            notice: Object(a.d)("Unable to change your color.", "ColorCommandHandler")
                                        }
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(a.d)('Usage: "/color [color]" - Change your username color. Color must be in hex (#000000) or one of the following: Blue, BlueViolet, CadetBlue, Chocolate, Coral, DodgerBlue, Firebrick, GoldenRod, Green, HotPink, OrangeRed, Red, SeaGreen, SpringGreen, YellowGreen.', "ColorCommandHandler")
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(c.Ya, {
                            display: c.X.Hide
                        }, r.createElement(o.a, {
                            command: "color",
                            handler: this.updateChatColor
                        }))
                    }, t
                }(r.Component),
                u = Object(s.a)()(d);
            n.d(t, "a", function() {
                return u
            })
        },
        boOy: function(e, t, n) {},
        br9A: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("I6K6"),
                s = n("RuiO"),
                l = {
                    BuyCustomMysteryGift: "buy_custom_mystery_gift",
                    BuyGiftSub: "buy_gift_sub",
                    BuyGiftToPaidUpgrade: "buy_gift_to_paid_upgrade",
                    BuyMysteryGift: "buy_mystery_gift",
                    BuyPaidUpgrade: "buy_paid_upgrade",
                    ChangeTier: "change_tier",
                    ClickCheckout: "click_checkout_button",
                    ClickMoreSubOptions: "more_options_click",
                    ClickGiftSubOptions: "gift_options_click",
                    ClickPrimeFAQ: "click_prime_faq",
                    ClickSignupForPrime: "click_signup_for_prime",
                    ClickBack: "back_top_level",
                    CloseSubMenu: "close_subscribe_menu",
                    GiftASub: "gift_a_sub",
                    OpenSubMenu: "open_subscribe_menu",
                    SubWithPrime: "samus_spend_credit"
                };

            function c(e) {
                return i.__awaiter(this, void 0, void 0, function() {
                    var t, n, l, c, d, u, p, m, h, g, f, v, b;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                t = r.o.getVideoPlayerTrackingData().vodID, n = !!t, l = {
                                    channelID: e.channelID,
                                    withVideo: !1
                                }, n && (l.withVideo = !0, l.videoID = t), c = null, i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, , 4]), [4, r.p.apollo.client.query({
                                    query: s,
                                    variables: l
                                })];
                            case 2:
                                return c = i.sent(), [3, 4];
                            case 3:
                                return d = i.sent(), r.k.error(d, "Failed to make query for channel info in FollowEvent reporting.", {
                                    channelID: e.channelID
                                }), [3, 4];
                            case 4:
                                return u = c && c.data && c.data.user || null, c && !u && r.k.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                    channelID: e.channelID
                                }), p = null, c && n && ((m = c && c.data && c.data.video) ? p = Object(o.a)(m.broadcastType) : r.k.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                    currentVideoID: t
                                })), h = u && u.self, g = h ? !!h.subscriptionBenefit : null, f = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, v = h ? h.canPrimeSubscribe : null, b = {
                                    action: e.action,
                                    can_subscribe: v,
                                    channel: e.channelLogin,
                                    channel_id: e.channelID,
                                    checkout_button_tier: e.checkoutButtonTier,
                                    has_sub_credit: e.hasSubCredit,
                                    host_channel: e.hostChannelLogin,
                                    host_channel_id: e.hostChannelID,
                                    is_menu_open: e.isMenuOpen,
                                    is_subscribed: g,
                                    is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                    mystery_gift_count: e.mysteryGiftCount || null,
                                    sub_location: e.sub_location,
                                    sub_recipient: e.giftRecipient,
                                    modal: e.modal,
                                    modal_level: e.modalLevel || "",
                                    show_prime_content: e.showPrimeContent,
                                    show_resub: u ? v && f : null,
                                    vod_id: t,
                                    vod_type: p,
                                    viewport_height: window.innerHeight,
                                    viewport_width: window.innerWidth
                                }, r.o.track(a.SpadeEventType.Subscription, b), [2]
                        }
                    })
                })
            }
        },
        "c+1r": function(e, t, n) {},
        cBWO: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("TSYQ"),
                a = n("17x9"),
                o = n("q1tI"),
                s = n("oJmH"),
                l = n("/7QA"),
                c = n("ZS2+"),
                d = n("LA8z"),
                u = n("ua1/"),
                p = n("daa2"),
                m = n("yI+y"),
                h = n("DMoW"),
                g = n("2xye"),
                f = n("zxEZ"),
                v = n("tiJ6"),
                b = n("Q34B"),
                k = n("VhbA"),
                y = n("0bws"),
                C = n("FC3M"),
                S = n("GnwI"),
                E = n("7c8l"),
                N = n("KyCc"),
                O = n("8ssJ"),
                _ = n("QlOJ"),
                w = n("+Jjl"),
                D = n("VAW9"),
                I = n("Bh3T"),
                T = n("JoTo"),
                M = n("cnlr"),
                R = n("sSlw"),
                L = n("2bi+"),
                F = n("ngVu"),
                j = n("eFQ3"),
                x = n("1k85");
            var A = Object(v.b)(function(e) {
                    var t = e.hostedChannel;
                    return {
                        hostChannelID: e.channel && e.channel.id || "",
                        hostedChannelDisplayName: t ? t.displayName : null,
                        hostedChannelLogin: t ? t.login : null,
                        hostedChannelProfileImageURL: t ? t.profileImageURL : null
                    }
                })(x.a),
                U = n("ePQz"),
                P = n("f3GI"),
                B = n("50oY"),
                V = n("WOQ1"),
                W = n("4p7I"),
                H = n("mLw1"),
                G = n("yoKv"),
                Y = n("9C/b"),
                z = n("vRsq"),
                q = n("/MKj"),
                X = n("fvjX"),
                Q = n("V+GM"),
                K = n("NvVO"),
                $ = n("4rCz"),
                J = n("4hz/"),
                Z = n("Ue10"),
                ee = function() {
                    return o.createElement(o.Fragment, null, o.createElement(Z.Ya, {
                        display: Z.X.Flex,
                        justifyContent: Z.Xa.Start
                    }, o.createElement(Z.Ya, null, o.createElement(Z.jb, {
                        height: 32,
                        width: 96
                    })), o.createElement(Z.Ya, null, o.createElement(Z.jb, {
                        height: 32,
                        width: 84,
                        overlay: !0
                    }))), o.createElement(J.a, null))
                },
                te = c.a.wrap(function() {
                    return n.e(116).then(n.bind(null, "r93r"))
                }, "ChannelEventsContent", {
                    placeholder: o.createElement(ee, null)
                }),
                ne = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onEventToggle = function(e) {
                            t.props.history.replace(i.__assign({}, t.props.location, {
                                search: e
                            }))
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(te, {
                            channelLogin: this.props.channelLogin,
                            searchQuery: this.props.location.search,
                            onEventToggle: this.onEventToggle
                        })
                    }, t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(1), this.setPageTitle()
                    }, t.prototype.componentDidUpdate = function() {
                        this.setPageTitle()
                    }, t.prototype.setPageTitle = function() {
                        $.q.setPageTitle(Object(l.d)("{channelName}'s Events", {
                            channelName: this.props.channelLogin
                        }, "ChannelRootEventsPage"))
                    }, t
                }(o.Component),
                ie = Object(X.compose)(Object(S.b)("EventCollectionsPage", {
                    destination: K.a.ChannelEvents
                }), Object(Q.a)({
                    location: g.PageviewLocation.ChannelEvents,
                    properties: function(e) {
                        return e.pageviewProps
                    },
                    skip: function(e) {
                        return e.loading || !!e.error
                    }
                }))(ne);
            var re = Object(s.compose)(Object(q.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }))(ie),
                ae = n("bdHe"),
                oe = c.a.wrap(function() {
                    return n.e(117).then(n.bind(null, "EJeP"))
                }, "ChannelFollowersContent", {
                    placeholder: o.createElement(ae.a, null)
                }),
                se = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(oe, {
                            channelLogin: this.props.channelLogin
                        })
                    }, t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(1), this.setPageTitle()
                    }, t.prototype.componentDidUpdate = function(e) {
                        this.props.channelLogin !== e.channelLogin && this.setPageTitle()
                    }, t.prototype.setPageTitle = function() {
                        $.q.setPageTitle(Object(l.d)("{channelLogin}'s Followers", {
                            channelLogin: this.props.channelLogin
                        }, "ChannelRootFollowersPage"))
                    }, t
                }(o.Component),
                le = Object(X.compose)(Object(S.b)("ChannelFollowersPage", {
                    destination: K.a.ChannelFollowers
                }), Object(Q.a)({
                    location: g.PageviewLocation.Followers,
                    properties: function(e) {
                        return e.pageviewProps
                    },
                    skip: function(e) {
                        return e.loading || !!e.error
                    }
                }))(se);
            var ce = Object(s.compose)(Object(q.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }))(le),
                de = c.a.wrap(function() {
                    return n.e(118).then(n.bind(null, "bpxw"))
                }, "ChannelFollowingContent", {
                    placeholder: o.createElement(ae.a, null)
                }),
                ue = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(de, {
                            channelLogin: this.props.channelLogin
                        })
                    }, t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(1), this.setPageTitle()
                    }, t.prototype.componentDidUpdate = function(e) {
                        this.props.channelLogin !== e.channelLogin && this.setPageTitle()
                    }, t.prototype.setPageTitle = function() {
                        $.q.setPageTitle(Object(l.d)("{channelLogin}'s Follows", {
                            channelLogin: this.props.channelLogin
                        }, "ChannelRootFollowingPage"))
                    }, t
                }(o.Component),
                pe = Object(X.compose)(Object(S.b)("ChannelFollowingPage", {
                    destination: K.a.ChannelFollows
                }), Object(Q.a)({
                    location: g.PageviewLocation.Follows,
                    properties: function(e) {
                        return e.pageviewProps
                    },
                    skip: function(e) {
                        return e.loading || !!e.error
                    }
                }))(ue);
            var me = Object(s.compose)(Object(q.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }))(pe),
                he = n("7JxC"),
                ge = (n("4IKE"), c.a.wrap(function() {
                    return Promise.all([n.e(0), n.e(119)]).then(n.bind(null, "EuHz"))
                }, "ChannelPanels", {
                    placeholder: o.createElement(he.a, null)
                })),
                fe = "panel-container",
                ve = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(Z.Ya, {
                            display: Z.X.Flex,
                            flexDirection: Z.Aa.ColumnReverse,
                            breakpointMedium: {
                                flexDirection: Z.Aa.Row
                            },
                            flexWrap: Z.Ba.NoWrap,
                            margin: {
                                x: "auto"
                            },
                            padding: {
                                bottom: 3
                            },
                            flexShrink: 1
                        }, o.createElement(Z.Ya, {
                            className: "channel-page__panel-container",
                            "data-test-selector": fe,
                            flexGrow: 1,
                            flexShrink: 1
                        }, this.props.firstPageLoaded && this.props.channel && this.props.channel.id && o.createElement(ge, {
                            channelName: this.props.channelLogin,
                            channelID: this.props.channel.id
                        })))
                    }, t
                }(o.Component),
                be = Object(X.compose)(Object(S.b)("ChannelPage", {
                    autoReportInteractive: !0,
                    destination: K.a.ChannelIndex
                }), Object(Q.a)({
                    location: g.PageviewLocation.Channel,
                    properties: function(e) {
                        return e.pageviewProps
                    },
                    skip: function(e) {
                        return e.loading || !!e.error
                    }
                }))(ve);
            var ke, ye = Object(s.compose)(Object(q.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }))(be),
                Ce = n("QzU5"),
                Se = n("L4bB"),
                Ee = n("XKWF"),
                Ne = n("RsJ2"),
                Oe = n("QdeI"),
                _e = n("cERj"),
                we = n("bO5A"),
                De = c.a.wrap(function() {
                    return n.e(126).then(n.bind(null, "gcyA"))
                }, "ChannelVideosOverviewContent", {
                    placeholder: o.createElement(Oe.a, null)
                }),
                Ie = c.a.wrap(function() {
                    return n.e(125).then(n.bind(null, "6mes"))
                }, "ChannelClipsContent", {
                    placeholder: o.createElement(Oe.a, null)
                }),
                Te = c.a.wrap(function() {
                    return n.e(124).then(n.bind(null, "WfYB"))
                }, "ChannelCollectionsContent", {
                    placeholder: o.createElement(Oe.a, null)
                }),
                Me = c.a.wrap(function() {
                    return n.e(123).then(n.bind(null, "TCEa"))
                }, "FilterableVideoTower", {
                    placeholder: o.createElement(Oe.a, null)
                });
            ! function(e) {
                e.Content = "content", e.Sort = "sort"
            }(ke || (ke = {}));
            var Re = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = Object(z.x)(this.props.location.search),
                            t = this.getComponentsForFilter(e);
                        return o.createElement("div", null, e && this.renderVideoOptions(t.sort), o.createElement("div", {
                            "data-test-selector": ke.Content
                        }, t.content))
                    }, t.prototype.componentDidMount = function() {
                        var e = this.props.critical ? 1 : 0;
                        this.props.latencyTracking.reportInteractive(e)
                    }, t.prototype.renderVideoOptions = function(e) {
                        return o.createElement(Z.Ya, {
                            "data-test-selector": ke.Sort,
                            display: Z.X.Flex,
                            flexDirection: Z.Aa.Row,
                            padding: {
                                bottom: 1
                            }
                        }, o.createElement(Z.Ya, {
                            padding: {
                                right: 1
                            }
                        }, o.createElement(_e.a, {
                            channelLogin: this.props.channelLogin
                        })), e)
                    }, t.prototype.getComponentsForFilter = function(e) {
                        var t = this.props.channelLogin,
                            n = Object(z.n)(this.props);
                        if (!e) return {
                            content: o.createElement(De, {
                                channelLogin: t,
                                collectionID: n
                            })
                        };
                        switch (e) {
                            case z.e.Highlights:
                            case z.e.PastPremieres:
                            case z.e.PastBroadcasts:
                            case z.e.Uploads:
                                return {
                                    content: this.getFilterableVideoTower(e),
                                    sort: o.createElement(we.a, null)
                                };
                            case z.e.Clips:
                                return {
                                    content: o.createElement(Ie, {
                                        channelName: t
                                    }),
                                    sort: o.createElement(Se.a, {
                                        hideLanguageFilter: !0
                                    })
                                };
                            case z.e.Collections:
                                return {
                                    content: o.createElement(Te, {
                                        channelLogin: t
                                    }),
                                    sort: o.createElement(Z.Ya, {
                                        alignItems: Z.f.End,
                                        display: Z.X.Flex,
                                        fullWidth: !0,
                                        justifyContent: Z.Xa.End
                                    }, o.createElement(Z.Ya, {
                                        flexGrow: 0
                                    }, o.createElement(Ne.a, {
                                        channelLogin: t
                                    })))
                                };
                            case z.e.All:
                                return {
                                    content: this.getFilterableVideoTower(e),
                                    sort: o.createElement(we.a, null)
                                };
                            default:
                                return e
                        }
                    }, t.prototype.getFilterableVideoTower = function(e) {
                        var t = void 0;
                        switch (e) {
                            case z.e.Highlights:
                                t = Ce.a.Highlight;
                                break;
                            case z.e.PastBroadcasts:
                                t = Ce.a.Archive;
                                break;
                            case z.e.PastPremieres:
                                t = Ce.a.PastPremiere;
                                break;
                            case z.e.Uploads:
                                t = Ce.a.Upload;
                                break;
                            case z.e.All:
                                break;
                            default:
                                return e
                        }
                        var n = Object(z.y)(this.props.location.search) || z.f.Newest;
                        return o.createElement(Me, {
                            channelLogin: this.props.channelLogin,
                            filter: t,
                            sort: Object(Ee.c)(n)
                        })
                    }, t
                }(o.Component),
                Le = Object(s.compose)(Y.a, Object(S.b)("ChannelVideosContent"))(Re),
                Fe = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.setPageTitle()
                    }, t.prototype.componentDidUpdate = function() {
                        this.setPageTitle()
                    }, t.prototype.render = function() {
                        return o.createElement(Le, {
                            channelLogin: this.props.channelLogin,
                            channelID: this.props.channelID,
                            pageviewProps: this.props.pageviewProps,
                            loading: this.props.loading,
                            error: this.props.error,
                            critical: !0
                        })
                    }, t.prototype.setPageTitle = function() {
                        l.p.setPageTitle(Object(l.d)("{channelName}'s Videos", {
                            channelName: this.props.channelLogin
                        }, "ChannelRootVideosPage"))
                    }, t
                }(o.Component),
                je = Object(s.compose)(Object(S.b)("ChannelVideosPage", {
                    destination: K.a.VideosPage,
                    autoReportInteractive: !0
                }), Object(Q.a)({
                    location: g.PageviewLocation.ChannelVideos,
                    properties: function(e) {
                        return e.pageviewProps
                    },
                    skip: function(e) {
                        return e.loading || !!e.error
                    }
                }))(Fe),
                xe = n("yR8l"),
                Ae = n("0lTu"),
                Ue = c.a.wrap(function() {
                    return n.e(120).then(n.bind(null, "n7kk"))
                }, "CampaignsRewardsTab"),
                Pe = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        if (!this.props.firstPageLoaded) return null;
                        var e = this.props.data.currentUser && this.props.data.currentUser.blizzardAccount || void 0,
                            t = !(!this.props.data.currentUser || !this.props.data.currentUser.hasPrime);
                        return o.createElement(Ue, {
                            channelID: this.props.channelID,
                            blizzardAccount: e,
                            userHasPrime: t
                        })
                    }, t
                }(o.Component),
                Be = Object(X.compose)(Object(xe.a)(Ae, {
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(S.b)("EsportsLootPage", {
                    destination: K.a.ChannelEsportsLoot,
                    autoReportInteractive: !0
                }), Object(Q.a)({
                    location: g.PageviewLocation.ChannelEsportsLoot,
                    properties: function(e) {
                        return e.pageviewProps
                    },
                    skip: function(e) {
                        return e.loading || !!e.error
                    }
                }))(Pe);
            var Ve = Object(s.compose)(Object(q.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }))(Be),
                We = n("QlRw"),
                He = n("8AB4"),
                Ge = c.a.wrap(function() {
                    return n.e(121).then(n.bind(null, "GIGq"))
                }, "CampaignsInsiderPassTab"),
                Ye = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        if (!this.props.firstPageLoaded || !this.props.data.user) return null;
                        var e = !!(this.props.data.currentUser && this.props.data.currentUser.blizzardAccount && this.props.data.currentUser && this.props.data.currentUser.blizzardAccount && this.props.data.currentUser.blizzardAccount.region !== We.a.China),
                            t = !(!this.props.data.user.self || !this.props.data.user.self.subscriptionBenefit) || !1,
                            n = !(!this.props.data.currentUser || !this.props.data.currentUser.hasPrime),
                            i = this.props.data.user.subscriptionProducts ? this.props.data.user.subscriptionProducts.reduce(function(e, t) {
                                return null !== t && e.push(t), e
                            }, []) : [];
                        return o.createElement(Ge, {
                            channelID: this.props.channelID,
                            blizzardRewardsAvailable: e,
                            userHasPrime: n,
                            subscriptionProducts: i,
                            hasInsiderPass: t
                        })
                    }, t
                }(o.Component),
                ze = Object(X.compose)(Object(xe.a)(He, {
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(S.b)("EsportsPassPage", {
                    destination: K.a.ChannelEsportsPass,
                    autoReportInteractive: !0
                }), Object(Q.a)({
                    location: g.PageviewLocation.ChannelEsportsLoot,
                    properties: function(e) {
                        return e.pageviewProps
                    },
                    skip: function(e) {
                        return e.loading || !!e.error
                    }
                }))(Ye);
            var qe = Object(s.compose)(Object(q.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }))(ze),
                Xe = n("bbjt"),
                Qe = c.a.wrap(function() {
                    return n.e(122).then(n.bind(null, "Y6wA"))
                }, "CampaignsProgressTab"),
                Ke = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        if (!this.props.firstPageLoaded) return null;
                        var e = !!(this.props.data.user && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit) || !1,
                            t = this.props.data.currentUser && this.props.data.currentUser.blizzardAccount || void 0;
                        return o.createElement(Qe, {
                            channelID: this.props.channelID,
                            blizzardAccount: t,
                            channelLogin: this.props.channelLogin,
                            hasInsiderPass: e
                        })
                    }, t
                }(o.Component),
                $e = Object(X.compose)(Object(xe.a)(Xe, {
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(S.b)("EsportsProgressPage", {
                    destination: K.a.ChannelEsportsProgress,
                    autoReportInteractive: !0
                }), Object(Q.a)({
                    location: g.PageviewLocation.ChannelEsportsProgress,
                    properties: function(e) {
                        return e.pageviewProps
                    },
                    skip: function(e) {
                        return e.loading || !!e.error
                    }
                }))(Ke);
            var Je = Object(s.compose)(Object(q.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }))($e),
                Ze = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(o.Fragment, null, this.props.firstPageLoaded && this.props.channel && this.props.channel.id && o.createElement(Le, {
                            channelLogin: this.props.channelLogin,
                            channelID: this.props.channel.id,
                            pageviewProps: this.props.pageviewProps,
                            loading: this.props.loading,
                            error: this.props.error
                        }))
                    }, t
                }(o.Component);
            var et, tt = Object(s.compose)(Object(S.b)("VideoWatchPage", {
                    autoReportInteractive: !0,
                    destination: K.a.VideoWatchPage
                }), Object(Q.a)({
                    location: g.PageviewLocation.VideoWatchPage,
                    properties: function(e) {
                        return e.pageviewProps
                    },
                    skip: function(e) {
                        return e.loading || !!e.error
                    }
                }), Object(q.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }))(Ze),
                nt = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderPanelArea = function() {
                            return o.createElement(ye, {
                                channelLogin: t.props.channelLogin,
                                channel: t.props.channel,
                                pageviewProps: t.props.pageviewProps,
                                loading: t.props.loading,
                                error: t.props.error
                            })
                        }, t.renderVideosArea = function() {
                            return o.createElement(tt, {
                                channelLogin: t.props.channelLogin,
                                channel: t.props.channel,
                                pageviewProps: t.props.pageviewProps,
                                loading: t.props.loading,
                                error: t.props.error
                            })
                        }, t.renderEsportsProgress = function() {
                            return t.props.channel && t.props.channel.id ? t.props.showEsportsRoute ? o.createElement(Je, {
                                channelLogin: t.props.channelLogin,
                                channelID: t.props.channel.id,
                                pageviewProps: t.props.pageviewProps,
                                loading: t.props.loading,
                                error: t.props.error
                            }) : void 0 : null
                        }, t.renderEsportsLoot = function() {
                            return t.props.channel && t.props.channel.id ? t.props.showEsportsRoute ? o.createElement(Ve, {
                                channelLogin: t.props.channelLogin,
                                channelID: t.props.channel.id,
                                pageviewProps: t.props.pageviewProps,
                                loading: t.props.loading,
                                error: t.props.error
                            }) : void 0 : null
                        }, t.renderEsportsPass = function() {
                            return t.props.channel && t.props.channel.id ? t.props.showEsportsRoute ? o.createElement(qe, {
                                channelLogin: t.props.channelLogin,
                                channelID: t.props.channel.id,
                                pageviewProps: t.props.pageviewProps,
                                loading: t.props.loading,
                                error: t.props.error
                            }) : void 0 : null
                        }, t.renderEventsPage = function() {
                            return t.props.channel && t.props.channel.id ? o.createElement(re, {
                                channelLogin: t.props.channelLogin,
                                channelID: t.props.channel.id,
                                pageviewProps: t.props.pageviewProps,
                                loading: t.props.loading,
                                error: t.props.error
                            }) : null
                        }, t.renderFollowersPage = function() {
                            return t.props.channel && t.props.channel.id ? o.createElement(ce, {
                                channelLogin: t.props.channelLogin,
                                channelID: t.props.channel.id,
                                pageviewProps: t.props.pageviewProps,
                                loading: t.props.loading,
                                error: t.props.error
                            }) : null
                        }, t.renderFollowingPage = function() {
                            return t.props.channel && t.props.channel.id ? o.createElement(me, {
                                channelLogin: t.props.channelLogin,
                                channelID: t.props.channel.id,
                                pageviewProps: t.props.pageviewProps,
                                loading: t.props.loading,
                                error: t.props.error
                            }) : null
                        }, t.renderVideosPage = function() {
                            return t.props.channel && t.props.channel.id ? o.createElement(je, {
                                channelLogin: t.props.channelLogin,
                                channelID: t.props.channel.id,
                                pageviewProps: t.props.pageviewProps,
                                loading: t.props.loading,
                                error: t.props.error
                            }) : null
                        }, t.redirectLegacyChannelClips = function() {
                            var e = Object(z.k)(t.props.match.params.channelLogin, {
                                filter: z.e.Clips
                            });
                            return o.createElement(H.a, {
                                to: e
                            })
                        }, t.redirectLegacyChannelCollections = function() {
                            var e = Object(z.k)(t.props.match.params.channelLogin, {
                                filter: z.e.Collections
                            });
                            return o.createElement(H.a, {
                                to: e
                            })
                        }, t.redirectLegacyVideoFilters = function(e) {
                            var n, i = t.props.match.params.channelLogin,
                                r = Object(z.t)(e),
                                a = Object(z.y)(e.location.search) || void 0;
                            return n = r ? Object(z.k)(i, {
                                filter: Object(z.B)(r) || void 0,
                                sort: a
                            }) : Object(z.k)(i), o.createElement(H.a, {
                                to: n
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(G.a, null, o.createElement(W.a, {
                            path: "/collections/:collectionID",
                            render: this.renderVideosArea
                        }), o.createElement(W.a, {
                            path: "/videos/:videoID",
                            render: this.renderVideosArea
                        }), o.createElement(W.a, {
                            path: "/videos/v:videoID",
                            render: this.renderVideosArea
                        }), o.createElement(W.a, {
                            path: "/:channelLogin",
                            exact: !0,
                            render: this.renderPanelArea
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/about",
                            render: this.renderPanelArea
                        }), this.props.showEsportsRoute ? o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/esports-loot",
                            render: this.renderEsportsLoot
                        }) : o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/esports-loot",
                            render: this.renderPanelArea
                        }), this.props.showEsportsRoute ? o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/esports-pass",
                            render: this.renderEsportsPass
                        }) : o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/esports-pass",
                            render: this.renderPanelArea
                        }), this.props.showEsportsRoute ? o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/esports-progress",
                            render: this.renderEsportsProgress
                        }) : o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/esports-progress",
                            render: this.renderPanelArea
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/events",
                            render: this.renderEventsPage
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/followers",
                            render: this.renderFollowersPage
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/following",
                            render: this.renderFollowingPage
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/p/:entityID",
                            render: this.renderPanelArea
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/rooms/:roomName",
                            render: this.renderPanelArea
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/videos",
                            exact: !0,
                            render: this.renderVideosPage
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?/videos/:filter(all|archive|upload|highlight|past_premiere)",
                            render: this.redirectLegacyVideoFilters
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/clips",
                            render: this.redirectLegacyChannelClips
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/collections",
                            render: this.redirectLegacyChannelCollections
                        }), o.createElement(W.a, {
                            path: "/:channelLogin/:contentType(video|clip|collection)?/:contentID?",
                            render: this.renderVideosArea
                        }))
                    }, t
                }(o.Component),
                it = Object(Y.a)(nt),
                rt = n("kduP");
            ! function(e) {
                e.Title = "title", e.Date = "date"
            }(et || (et = {}));
            var at, ot = /\S/,
                st = function(e) {
                    var t = e.clip,
                        n = "";
                    return t.title && "" !== t.title && ot.test(t.title) && t.title && (n = t.title), o.createElement(Z.Fb, null, o.createElement(Z.Ya, {
                        display: Z.X.Flex
                    }, o.createElement(Z.W, {
                        ellipsis: !0,
                        bold: !0,
                        title: n,
                        fontSize: Z.Ca.Size5,
                        type: Z.Wb.Span,
                        "data-test-selector": et.Title
                    }, n), o.createElement(Z.W, {
                        bold: !0,
                        fontSize: Z.Ca.Size5,
                        type: Z.Wb.Span,
                        color: Z.O.Alt2,
                        "data-test-selector": et.Date
                    }, " • ", Object(l.c)(new Date(t.createdAt), "medium"))))
                };
            ! function(e) {
                e.InfoPlaceholder = "info-placeholder", e.SubText = "sub-text", e.SubTextGame = "sub-text-game", e.SubTextCurator = "sub-text-curator", e.SubTextViews = "sub-text-views"
            }(at || (at = {}));
            var lt, ct = Object(S.b)("ClipInfo", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t, n = e.clip,
                        i = n && n.broadcaster && o.createElement(Z.U, {
                            to: "/" + n.broadcaster.login
                        }, n.broadcaster.login);
                    t = n && n.game && i ? Object(l.d)("{broadcaster} playing {game}", {
                        broadcaster: i,
                        game: o.createElement(Z.U, {
                            to: "" + Object(rt.c)(n.game.name)
                        }, n.game.name)
                    }, "ClipInfo") : i;
                    var r, a = n && n.game ? o.createElement("span", {
                            "data-test-selector": at.SubTextGame
                        }, t) : null,
                        s = n && n.curator ? o.createElement("span", {
                            "data-test-selector": at.SubTextCurator
                        }, n && n.game && !!n.curator && o.createElement("span", null, " • "), n && n.curator && Object(l.d)("Clipped by {curator}", {
                            curator: o.createElement(Z.U, {
                                to: "/" + n.curator.login
                            }, n.curator.login)
                        }, "ClipInfo")) : null,
                        c = o.createElement("span", {
                            "data-test-selector": at.SubTextViews
                        }, n && n.curator && o.createElement("span", null, " • "), n && Object(l.d)("{viewCount, plural, one {# view} other {# views}}", {
                            viewCount: n.viewCount || 0
                        }, "ClipInfo"));
                    return r = null === n ? o.createElement(Z.Ya, {
                        "data-test-selector": at.InfoPlaceholder,
                        display: Z.X.Flex,
                        flexDirection: Z.Aa.Column
                    }, o.createElement(Z.jb, {
                        lineCount: 1,
                        width: 320
                    }), o.createElement(Z.jb, {
                        lineCount: 1,
                        width: 240
                    })) : o.createElement("div", null, o.createElement(st, {
                        clip: n
                    }), o.createElement(Z.Fb, {
                        "data-test-selector": at.SubText,
                        color: Z.O.Alt2
                    }, a, s, c)), o.createElement(Z.G, {
                        row: !0
                    }, o.createElement(Z.H, {
                        overflow: Z.db.Hidden
                    }, r))
                }),
                dt = n("vrNp"),
                ut = n("RCUI"),
                pt = n("Uk/b"),
                mt = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(Z.Fb, {
                            background: Z.r.Base,
                            elevation: 1
                        }, o.createElement(Z.Fb, {
                            alignItems: Z.f.Center,
                            breakpointMedium: {
                                flexDirection: Z.Aa.Row
                            },
                            display: Z.X.Flex,
                            flexWrap: Z.Ba.NoWrap,
                            flexDirection: Z.Aa.Column,
                            justifyContent: Z.Xa.Start
                        }, o.createElement(Z.Fb, {
                            flexGrow: 1,
                            fullWidth: !0,
                            fullHeight: !0,
                            overflow: Z.db.Hidden,
                            padding: {
                                x: 2,
                                y: 1
                            }
                        }, o.createElement(ct, {
                            clip: this.props.clip
                        })), o.createElement(Z.Fb, {
                            alignItems: Z.f.Center,
                            className: "video-info-bar__action-container",
                            display: Z.X.Flex,
                            flexDirection: Z.Aa.Row,
                            flexShrink: 0,
                            fullHeight: !0,
                            padding: 1
                        }, o.createElement(Z.Ya, {
                            display: Z.X.Flex,
                            flexGrow: 0
                        }, this.props.clip && o.createElement(Z.Ya, {
                            display: Z.X.Flex,
                            padding: {
                                x: 1
                            }
                        }, o.createElement(dt.a, {
                            login: this.props.clip && this.props.clip.broadcaster && this.props.clip.broadcaster.login
                        }), o.createElement(pt.a, {
                            clip: this.props.clip,
                            balloonDirection: Z.v.TopRight,
                            buttonType: Z.F.Hollow
                        })), o.createElement(ut.a, {
                            clip: this.props.clip
                        })))))
                    }, t
                }(o.Component),
                ht = Object(S.b)("ClipDescription", {
                    autoReportInteractive: !0
                })(mt),
                gt = n("5Ijs"),
                ft = n("6x+I"),
                vt = n("EyXs"),
                bt = n("a9YZ");
            ! function(e) {
                e.MoreInfoBox = "more-info-box", e.ToggleExpandButton = "toggle-expand-button", e.DescriptionContainer = "description-container"
            }(lt || (lt = {}));
            var kt, yt = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isExpanded: !1
                        }, t.renderDescription = function() {
                            if (t.props.description && t.state.isExpanded) {
                                var e = Object(bt.d)(t.props.description).map(function(e, t) {
                                    return 0 === e.length ? o.createElement("br", {
                                        key: "desc-line" + t
                                    }) : o.createElement(Z.Ya, {
                                        padding: {
                                            x: 2
                                        },
                                        key: "desc-line" + t
                                    }, o.createElement(ft, i.__assign({
                                        source: e
                                    }, vt.a)))
                                });
                                return o.createElement(Z.fc, {
                                    "data-test-selector": lt.DescriptionContainer
                                }, e)
                            }
                        }, t.toggleExpand = function() {
                            t.setState(function(e) {
                                return {
                                    isExpanded: !e.isExpanded
                                }
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return this.props.description ? o.createElement(Z.Fb, {
                            background: Z.r.Base,
                            "data-test-selector": lt.MoreInfoBox
                        }, this.renderDescription(), o.createElement(Z.Fb, {
                            display: Z.X.Flex,
                            padding: {
                                x: 2,
                                bottom: 1
                            }
                        }, o.createElement(Z.U, {
                            "data-test-selector": lt.ToggleExpandButton,
                            type: Z.V.Default,
                            onClick: this.toggleExpand
                        }, this.state.isExpanded ? Object($.d)("Show Less", "ChannelRootMoreInfoBox") : Object($.d)("Show More", "ChannelRootMoreInfoBox")))) : null
                    }, t
                }(o.Component),
                Ct = Object(X.compose)(Object(S.b)("MoreInfoBox", {
                    autoReportInteractive: !0
                }))(yt),
                St = n("z36O");

            function Et(e) {
                return "curator" in e
            }! function(e) {
                e[e.ClipCurator = 0] = "ClipCurator", e[e.ClipCuratorDot = 1] = "ClipCuratorDot", e[e.ClipCuratorName = 2] = "ClipCuratorName"
            }(kt || (kt = {}));
            var Nt, Ot = function(e) {
                var t = e.login,
                    n = e.includesSeparator,
                    i = Object(l.d)("Clipped by {curator}", {
                        curator: o.createElement(Z.U, {
                            to: {
                                pathname: "/" + t,
                                state: {
                                    medium: g.PageviewMedium.ClipsWatchPage,
                                    content: g.PageviewContent.ClipCuratorName
                                }
                            }
                        }, t)
                    }, "ChannelVideoClipCurator"),
                    r = null;
                if (n) {
                    r = o.createElement(Z.Ya, {
                        "data-test-selector": kt.ClipCuratorDot,
                        margin: {
                            right: 1
                        }
                    }, o.createElement(Z.W, {
                        fontSize: Z.Ca.Size5,
                        type: Z.Wb.Span
                    }, "·"))
                }
                return o.createElement(Z.Ya, {
                    display: Z.X.Flex
                }, r, o.createElement(Z.W, {
                    fontSize: Z.Ca.Size5,
                    type: Z.Wb.Span,
                    "data-test-selector": kt.ClipCurator
                }, i))
            };
            ! function(e) {
                e[e.GameImagePlaceholder = 0] = "GameImagePlaceholder"
            }(Nt || (Nt = {}));
            var _t, wt = function(e) {
                var t = e.boxArtURL,
                    n = e.name;
                return n ? o.createElement(Z.U, {
                    to: Object(rt.c)(n),
                    "data-a-target": "video-info-game-boxart-link"
                }, o.createElement(Z.I, {
                    src: t || l.a.defaultBoxArtURL,
                    alt: n,
                    aspect: Z.p.BoxArt,
                    size: Z.J.Size4
                })) : o.createElement(Z.jb, {
                    "data-test-selector": Nt.GameImagePlaceholder,
                    height: 55,
                    width: 40
                })
            };
            (_t || (_t = {})).Title = "title";
            var Dt, It = /\S/,
                Tt = function(e) {
                    var t = e.title,
                        n = e.dateString,
                        i = t && "" !== t && It.test(t),
                        r = i && t ? t : "",
                        a = "";
                    return n && (a = Object(l.i)(new Date(n))), a && (r = i ? r + " · " + a : a), o.createElement(Z.Fb, {
                        margin: {
                            bottom: .5
                        }
                    }, o.createElement(Z.W, {
                        ellipsis: !0,
                        title: r,
                        fontSize: Z.Ca.Size4,
                        "data-test-selector": _t.Title
                    }, r))
                };
            ! function(e) {
                e[e.InfoPlaceholder = 0] = "InfoPlaceholder"
            }(Dt || (Dt = {}));
            var Mt, Rt = Object(S.b)("VideoInfo", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t = e.video;
                    if (null === t) return o.createElement(Z.G, {
                        row: !0
                    }, o.createElement(Z.H, {
                        overflow: Z.db.Hidden
                    }, o.createElement(Z.Ya, {
                        "data-test-selector": Dt.InfoPlaceholder,
                        display: Z.X.Flex,
                        flexDirection: Z.Aa.Column
                    }, o.createElement(Z.jb, {
                        lineCount: 1,
                        width: 320
                    }), o.createElement(Z.jb, {
                        lineCount: 1,
                        width: 240
                    }))));
                    var n = null,
                        i = null;
                    if (t.game && (n = o.createElement(Z.Ya, {
                            flexShrink: 0,
                            margin: {
                                right: 1
                            }
                        }, o.createElement(wt, {
                            boxArtURL: t.game.boxArtURL,
                            name: t.game.name
                        })), i = o.createElement(St.a, {
                            linkTo: {
                                pathname: Object(rt.c)(t.game.name),
                                state: {
                                    content: g.PageviewContent.Game,
                                    medium: g.PageviewMedium.VideoWatchPage
                                }
                            },
                            tooltip: Object(l.d)("Game", "ChannelVideoInfo"),
                            svgAsset: Z.ub.NavGames,
                            title: t.game.name,
                            "data-a-target": "video-info-game-link"
                        })), !Et(t)) {
                        var r = null;
                        return t.scope === h.Ba.PRIVATE && (r = o.createElement(Z.Fb, {
                            fontSize: Z.Ca.Size4
                        }, o.createElement(Z.hb, {
                            label: Object(l.d)("Private", "ChannelVideoInfo")
                        }))), o.createElement(Z.G, {
                            row: !0
                        }, n, o.createElement(Z.H, {
                            overflow: Z.db.Hidden
                        }, r, o.createElement(Tt, {
                            dateString: t.publishedAt,
                            title: t.title
                        }), o.createElement(Z.Ya, {
                            display: Z.X.InlineFlex
                        }, i)))
                    }
                    if (Et(t)) {
                        var a = t.curator ? t.curator.login : "",
                            s = null;
                        if (a) {
                            var c = !(!t || !t.game);
                            s = o.createElement(Ot, {
                                login: a,
                                includesSeparator: c
                            })
                        }
                        return o.createElement(Z.G, {
                            row: !0
                        }, n, o.createElement(Z.H, {
                            overflow: Z.db.Hidden
                        }, o.createElement(Tt, {
                            dateString: t.createdAt,
                            title: t.title
                        }), o.createElement(Z.Ya, {
                            display: Z.X.InlineFlex
                        }, i, s)))
                    }
                    return null
                }),
                Lt = n("oVvm");
            ! function(e) {
                e[e.VideoDescription = 0] = "VideoDescription", e[e.TotalViews = 1] = "TotalViews"
            }(Mt || (Mt = {}));
            var Ft = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = null,
                            t = null;
                        if (this.props.video) {
                            var n = this.props.video,
                                i = n.description,
                                r = n.viewCount;
                            i && (e = o.createElement(Z.Fb, {
                                "data-test-selector": Mt.VideoDescription
                            }, o.createElement(Ct, {
                                description: i
                            }))), t = o.createElement(Z.Fb, {
                                alignItems: Z.f.Center,
                                "data-test-selector": Mt.TotalViews,
                                display: Z.X.Flex,
                                color: Z.O.Alt2,
                                flexGrow: 1,
                                fontSize: Z.Ca.Size5
                            }, o.createElement(Z.Eb, {
                                value: Object(l.f)(r || 0),
                                label: Object(l.d)("Total Views", "VideoDescription"),
                                icon: Z.ub.GlyphViews
                            }))
                        }
                        return o.createElement(Z.Fb, {
                            background: Z.r.Base,
                            elevation: 1
                        }, o.createElement(Z.Fb, {
                            alignItems: Z.f.Center,
                            breakpointMedium: {
                                flexDirection: Z.Aa.Row
                            },
                            display: Z.X.Flex,
                            flexWrap: Z.Ba.NoWrap,
                            flexDirection: Z.Aa.Column,
                            justifyContent: Z.Xa.Start
                        }, o.createElement(Z.Fb, {
                            flexGrow: 1,
                            fullWidth: !0,
                            fullHeight: !0,
                            overflow: Z.db.Hidden,
                            padding: {
                                x: 1,
                                y: 1
                            }
                        }, o.createElement(Rt, {
                            video: this.props.video
                        })), o.createElement(Z.Fb, {
                            alignItems: Z.f.Center,
                            className: "video-info-bar__action-container",
                            display: Z.X.Flex,
                            flexDirection: Z.Aa.Row,
                            flexShrink: 0,
                            fullHeight: !0,
                            padding: 1
                        }, o.createElement(Z.Ya, {
                            display: Z.X.Flex,
                            flexGrow: 0
                        }, t, o.createElement(Z.Ya, {
                            display: Z.X.Flex,
                            padding: {
                                x: 1
                            }
                        }, o.createElement(dt.a, {
                            login: this.props.video && this.props.video.owner && this.props.video.owner.login
                        }), o.createElement(gt.a, {
                            balloonDirection: Z.v.TopRight,
                            buttonType: Z.F.Hollow,
                            content: {
                                collectionID: this.props.collectionID || void 0,
                                videoID: this.props.video ? this.props.video.id : void 0
                            },
                            getCurrentVideoTime: this.props.getLastVideoOffset,
                            tracking: {
                                location: g.PageviewLocation.VideoWatchPage
                            }
                        })), o.createElement(Lt.a, {
                            currentUser: this.props.currentUser,
                            video: this.props.video,
                            getCurrentVideoTime: this.props.getLastVideoOffset
                        })))), e)
                    }, t
                }(o.Component),
                jt = Object(S.b)("ClipDescription", {
                    autoReportInteractive: !0
                })(Ft),
                xt = n("gUUB"),
                At = n("cu2Y"),
                Ut = n("sTgJ"),
                Pt = n("zQgx"),
                Bt = n("Q94S"),
                Vt = n("uleC"),
                Wt = n("bRMw"),
                Ht = n("CCjQ");
            n("Bw4G");
            n.d(t, "b", function() {
                return qt
            }), n.d(t, "a", function() {
                return Kt
            });
            var Gt, Yt = c.a.wrap(function() {
                    return n.e(128).then(n.bind(null, "KGyh"))
                }, "SquadStreamBanner"),
                zt = c.a.wrap(function() {
                    return n.e(127).then(n.bind(null, "5k+0"))
                }, "MultiviewBanner");
            ! function(e) {
                e.SquadStreamBanner = "channel_root_squad_stream_banner", e.MultiviewBanner = "channel_page_multiview_banner"
            }(Gt || (Gt = {}));
            var qt = 0,
                Xt = 1,
                Qt = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.currentWatchingActivity = {
                            userID: null,
                            isWatching: !1
                        }, n.lastVideoOffset = Pt.a, n.onCompanionAdBuffered = function(e) {
                            n.setState({
                                bufferedCompanion: e
                            })
                        }, n.onCompanionAdConsumed = function() {
                            n.setState({
                                bufferedCompanion: void 0
                            })
                        }, n.onChatHostingChange = function(e) {
                            l.o.track(g.SpadeEventType.HostModeDebug, {
                                log_type: "chat_msg",
                                channel: n.props.channelLogin,
                                data_target_channel_login: e
                            })
                        }, n.onPlayerNavigationEvent = function(e) {
                            var t = n.props.video,
                                i = t ? t.id : "",
                                r = n.props.collection && n.props.collection.id || void 0;
                            Object(j.c)(e, n.props.history, {
                                currentCollectionID: r,
                                currentVideoID: i
                            })
                        }, n.triggerPlayerReposition = function() {
                            n.repositionPlayer && n.repositionPlayer()
                        }, n.onVideoTimeChange = function(e) {
                            var t = Math.floor(e);
                            if (t !== n.lastVideoOffset)
                                if (n.lastVideoOffset = t, n.props.clip) {
                                    var i = t + n.getSourceVideoClipStartOffset() - Xt;
                                    n.props.onVideoTimeChange(i)
                                } else n.props.onVideoTimeChange(t);
                            else n.state.requestedVideoOffset === t && n.setState({
                                requestedVideoOffset: Pt.a
                            })
                        }, n.onPlayerSeekRequest = function(e) {
                            n.setState({
                                requestedVideoOffset: e
                            })
                        }, n.getMiniPlayerTitle = function() {
                            if (n.props.contentType === b.a.VIDEO || n.props.contentType === b.a.COLLECTION) return n.props.video && n.props.video.title || Object(l.d)("Watching video", "ChannelRoot");
                            if (n.props.contentType === b.a.CLIP) return n.props.clip && n.props.clip.title || Object(l.d)("Watching clip", "ChannelRoot");
                            var e;
                            if (n.props.hostedChannel) return e = n.props.hostedChannel.displayName || n.props.hostedChannel.login, Object(l.d)("Hosting {channel}", {
                                channel: e
                            }, "ChannelRoot");
                            var t = n.props.channel;
                            return e = t && t.displayName || n.props.channelLogin, Object(l.d)("Watching {channelName}", {
                                channelName: e
                            }, "ChannelRoot")
                        }, n.setRepositionPlayer = function(e) {
                            n.repositionPlayer = e
                        }, n.getLastVideoOffset = function() {
                            return n.lastVideoOffset
                        }, n.state = {
                            requestedVideoOffset: Object(Pt.g)(t),
                            theatreFullscreenGroup: Object(m.a)()
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.onRender(), this.updateWatchingActivity(this.props)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = this.props.channelLogin,
                            n = e.channel && e.channel.login;
                        Object(Pt.g)(this.props) !== Object(Pt.g)(e) && this.setState({
                            requestedVideoOffset: Object(Pt.g)(e)
                        }), t === n && this.props.videoID === e.videoID && this.props.collectionID === e.collectionID && this.props.clipSlug === e.clipSlug || this.context.scrollToTop(), this.updateWatchingActivity(e)
                    }, t.prototype.componentDidUpdate = function() {
                        this.onRender()
                    }, t.prototype.componentWillUnmount = function() {
                        clearTimeout(this.refetchTimer), this.props.clearData(), Object(p.a)()
                    }, t.prototype.render = function() {
                        var e, t = this.props.channelLogin,
                            n = this.props.channel,
                            i = this.props.video,
                            a = n && n.stream && n.stream.game ? n.stream.game.name : void 0,
                            s = this.props.contentType === b.a.LIVE;
                        if (!this.props.loading && !this.props.error && (this.props.contentType === b.a.LIVE && (!n || n && !n.id) || this.props.contentType === b.a.CLIP && Object(Pt.e)(t, this.props.clip) || this.props.contentType === b.a.VIDEO && Object(Pt.l)(t, this.props.video))) return o.createElement(d.a, null);
                        if (!this.props.loading && this.props.error && (this.props.contentType === b.a.VIDEO || this.props.contentType === b.a.CLIP)) return o.createElement(d.a, null);
                        var l = r(((e = {})[P.b] = this.props.theatreModeEnabled, e)),
                            c = r({
                                "channel-root": !0,
                                "channel-root--persistent-player": this.props.persistentPlayerIsPersisting
                            });
                        return o.createElement(Z.Fb, {
                            className: c,
                            fullHeight: !0
                        }, o.createElement(I.b, {
                            className: l,
                            suppressScrollToTop: !0,
                            suppressScrollX: !0
                        }), o.createElement(R.a, null, o.createElement(f.a, {
                            currentPage: this.getCurrentPage(this.props),
                            channelLogin: t,
                            channelIsHosting: this.channelIsHosting()
                        })), this.renderVideoPlayer(), o.createElement(T.a, null, o.createElement(M.a, {
                            channelLogin: t
                        })), o.createElement(w.b, null, o.createElement(Z.Fb, {
                            className: "channel-root__right-column",
                            display: Z.X.Flex,
                            flexDirection: Z.Aa.Column,
                            flexGrow: 0,
                            flexShrink: 0,
                            flexWrap: Z.Ba.NoWrap,
                            fullHeight: !0
                        }, this.renderChat(s, i)), this.props.isLoggedIn && n && n.id && o.createElement(_.a, {
                            channelID: n.id
                        })), o.createElement(y.a, {
                            game: a,
                            hostingInfo: this.getHostingContext()
                        }), o.createElement(E.a, null), o.createElement(it, {
                            channelLogin: this.props.channelLogin,
                            channel: this.props.channel,
                            pageviewProps: Object(Bt.d)(this.props.channel, this.props.video, this.props.collection, this.props.clip),
                            showEsportsRoute: Object(Pt.k)(this.props.channel),
                            loading: this.props.loading,
                            error: !!this.props.error
                        }), s && o.createElement(N.a, null))
                    }, t.prototype.renderVideoPlayer = function() {
                        if (this.props.contentType === b.a.LIVE && this.props.page !== B.c.About || this.props.contentType === b.a.VIDEO && this.props.page !== B.c.Videos || this.props.contentType === b.a.CLIP && this.props.page !== B.c.Videos || this.props.contentType === b.a.COLLECTION && this.props.page !== B.c.Videos) return null;
                        var e = this.props.channelLogin,
                            t = this.props.channel,
                            n = this.props.collectionID,
                            r = this.props.clipSlug,
                            a = this.props.videoID,
                            s = !a && !n && !r,
                            l = this.props.video;
                        if (s && Object(Vt.a)(e) && !this.props.isLoggedIn) {
                            var c = void 0;
                            if (t && t.login === this.props.channelLogin && (c = t.broadcastSettings && t.broadcastSettings.game ? t.broadcastSettings.game.id : null), void 0 === c) return o.createElement(V.a, null);
                            if (Object(Vt.b)(c)) return o.createElement(Ut.a, {
                                channelLogin: e,
                                live: this.props.live,
                                title: Object(Pt.f)(this.props.channel)
                            })
                        }
                        var d = {};
                        s ? (d.channelLogin = this.props.videoPlayerSource, d.hostChannel = this.channelIsHosting() ? this.props.match.params.channelLogin : void 0, d.showChannelInfoOnHover = !1) : (this.state.requestedVideoOffset !== Pt.a && (d.nextVideoOffset = this.state.requestedVideoOffset), n && (d.collectionID = n), a && (d.vodID = a), r && (d.clipSlug = r, d.playerTypeOverride = j.a.ClipsWatchPage));
                        var u = !this.props.live && !this.channelIsHosting() && !l || !!r,
                            p = null;
                        s && this.props.firstPageLoaded && !this.channelIsHosting() && t && t.id && (p = o.createElement(Yt, {
                            channelID: t.id,
                            channelLogin: e,
                            channelDisplayName: t.displayName,
                            triggerPlayerReposition: this.triggerPlayerReposition,
                            "data-test-selector": Gt.SquadStreamBanner
                        }));
                        var g = null;
                        Object(Wt.b)(Wt.a, e) && s && this.props.firstPageLoaded && !this.channelIsHosting() && t && t.stream && t.stream.id && (g = o.createElement(zt, {
                            channelLogin: e,
                            triggerPlayerReposition: this.triggerPlayerReposition,
                            "data-test-selector": Gt.MultiviewBanner
                        }));
                        var f = null;
                        s && !this.channelIsHosting() && this.props.firstPageLoaded && t && t.id && (f = o.createElement(k.a, {
                            channelName: e,
                            channelID: t.id,
                            triggerPlayerReposition: this.triggerPlayerReposition
                        }));
                        var v = null;
                        return l && l.scope === h.Ba.PRIVATE && l.owner && l.owner.login && (v = o.createElement(Ht.a, {
                            ownerLogin: e
                        })), o.createElement(o.Fragment, null, o.createElement(Z.Ya, {
                            className: "channel-root__player-container",
                            padding: {
                                bottom: 2
                            }
                        }, f, p, g, v, s && !this.channelIsHosting() && o.createElement(xt.a, {
                            channelLogin: e
                        }), o.createElement(A, {
                            triggerPlayerReposition: this.triggerPlayerReposition
                        }, o.createElement(V.a, null, o.createElement(O.a, {
                            repositionPlayerRef: this.setRepositionPlayer,
                            playerProps: i.__assign({
                                onCompanionAdBuffered: this.onCompanionAdBuffered,
                                onNavigationRequest: this.onPlayerNavigationEvent,
                                attachToWindow: !0,
                                fullscreenRef: Object(m.c)(this.state.theatreFullscreenGroup),
                                onFullscreenChange: m.b,
                                videoMarkers: this.props.videoMarkers || void 0,
                                onSeek: this.onVideoTimeChange,
                                onVideoTimeChange: this.onVideoTimeChange
                            }, d),
                            miniPlayerTitle: this.getMiniPlayerTitle(),
                            miniPlayerContentRoute: this.props.contentCanonicalUrl,
                            disablePersistenceOnUnmount: u,
                            disablePersistenceOnScroll: u
                        }))), this.renderDescription()), !this.props.hostedChannel && o.createElement(Z.Qa, {
                            margin: {
                                top: .5
                            }
                        }, o.createElement(C.a, {
                            channelLogin: e
                        })))
                    }, t.prototype.getCurrentPage = function(e) {
                        switch (e.page) {
                            case B.c.About:
                                return f.b.Channel;
                            case B.c.Collections:
                            case B.c.Videos:
                            case B.c.Clips:
                                return f.b.Videos;
                            case B.c.Events:
                                return f.b.Events;
                            case B.c.Followers:
                                return f.b.Followers;
                            case B.c.Following:
                                return f.b.Following;
                            case B.c.EsportsLoot:
                            case B.c.EsportsProgress:
                            case B.c.EsportsPass:
                            default:
                                return f.b.Channel
                        }
                    }, t.prototype.renderDescription = function() {
                        var e = this.props,
                            t = e.contentType;
                        switch (t) {
                            case b.a.LIVE:
                                return o.createElement(U.a, {
                                    channelLogin: e.channelLogin,
                                    channelIsHosting: !!e.hostedChannel
                                });
                            case b.a.COLLECTION:
                            case b.a.VIDEO:
                                return o.createElement(jt, {
                                    collectionID: e.collection && e.collection.id,
                                    currentUser: e.currentUser,
                                    video: e.video,
                                    getLastVideoOffset: this.getLastVideoOffset
                                });
                            case b.a.CLIP:
                                return o.createElement(ht, {
                                    clip: e.clip
                                });
                            case b.a.NONE:
                                return null;
                            default:
                                return t
                        }
                    }, t.prototype.renderChat = function(e, t) {
                        var n = null,
                            r = this.props.channelLogin,
                            a = this.props.collectionID,
                            s = this.props.hostedChannel,
                            l = !this.props.loading && a && this.props.collection && 0 === this.props.collection.items.totalCount;
                        return e ? n = o.createElement(o.Fragment, null, o.createElement(At.a, {
                            bufferedCompanion: this.state.bufferedCompanion,
                            onCompanionAdConsumed: this.onCompanionAdConsumed
                        }), o.createElement(D.a, {
                            channelLogin: r,
                            hostedChannelDisplayName: s && s.displayName ? s.displayName : void 0,
                            routedRoomName: this.props.match.params.roomName,
                            onHostingChange: this.onChatHostingChange
                        })) : this.props.clip ? n = o.createElement(Z.Ya, {
                            flexGrow: 1,
                            fullHeight: !0
                        }, o.createElement(F.a, {
                            clip: this.props.clip,
                            onPlayerSeekRequestHandler: this.onPlayerSeekRequest,
                            onShowLogin: this.props.videoChatLogin
                        })) : l || (n = o.createElement(Z.Ya, {
                            flexGrow: 1,
                            fullHeight: !0
                        }, o.createElement(L.l, i.__assign({
                            onPlayerSeekRequest: this.onPlayerSeekRequest,
                            onShowLogin: this.props.videoChatLogin,
                            videoID: Object(Bt.e)(this.props) || t && t.id || ""
                        }, Object(Pt.i)(this.props))))), n
                    }, t.prototype.updateWatchingActivity = function(e) {
                        if (e.match.params.channelLogin && !e.loading && !e.error && e.channel && e.firstPageLoaded && e.initialUserAvailabilityIsSet) {
                            var t = e.channel.id,
                                n = !!Object(Pt.d)(e.channel) || Object(Pt.b)(e.channel);
                            this.currentWatchingActivity.userID === t && this.currentWatchingActivity.isWatching === n || (this.currentWatchingActivity = {
                                userID: t,
                                isWatching: n
                            }, n ? Object(p.f)({
                                type: u.a.Watching,
                                userID: t,
                                gameID: null
                            }) : Object(p.a)())
                        }
                    }, t.prototype.channelIsHosting = function() {
                        return !!this.props.hostedChannel
                    }, t.prototype.getHostingContext = function() {
                        if (this.props.hostedChannel && this.props.channel && this.props.channel.id) return {
                            hostingChannelId: this.props.channel.id,
                            hostedChannelId: this.props.hostedChannel.id
                        }
                    }, t.prototype.onRender = function() {
                        this.props.loading || (this.props.latencyTracking.reportInteractive(), Object(Pt.j)(this.props.channel, this.props.video, this.props.clip))
                    }, t.prototype.getSourceVideoClipStartOffset = function() {
                        return this.props.clip && this.props.clip.videoOffsetSeconds ? this.props.clip.videoOffsetSeconds : qt
                    }, t.contextTypes = {
                        scrollToTop: a.func
                    }, t
                }(o.PureComponent);
            var Kt = Object(s.compose)(Object(v.b)(function(e) {
                return {
                    contentType: e.contentType,
                    channelLogin: e.channelLogin,
                    videoID: e.videoID,
                    collectionID: e.collectionID,
                    clipSlug: e.clipSlug,
                    loading: e.loading,
                    error: e.error,
                    channel: e.channel,
                    video: e.video,
                    collection: e.collection,
                    clip: e.clip,
                    contentCanonicalUrl: e.contentCanonicalUrl,
                    live: e.live,
                    videoPlayerSource: e.videoPlayerSource,
                    currentUser: e.currentUser,
                    page: e.page,
                    hostedChannel: e.hostedChannel,
                    videoMarkers: e.videoMarkers,
                    clearData: e.clearData
                }
            }), Object(S.b)("ChannelRoot"))(Qt)
        },
        cERj: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return h
            });
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("9C/b"),
                s = n("/7QA"),
                l = n("eJ65"),
                c = n("+GjP"),
                d = n("vRsq"),
                u = n("tuvy"),
                p = n("Ue10");
            ! function(e) {
                e.ButtonText = "button-text", e.FilterText = "filter-text"
            }(i || (i = {}));
            var m = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this.getFilters(),
                            t = e.find(function(e) {
                                return !!e.selected
                            });
                        return a.createElement(p.Ya, {
                            padding: {
                                right: 1
                            }
                        }, a.createElement(p.Ya, {
                            padding: {
                                bottom: .5
                            }
                        }, a.createElement(p.W, {
                            bold: !0
                        }, Object(s.d)("Showing", "VideoFilter"))), a.createElement(l.a, {
                            hideBalloonOnInsideClick: !0
                        }, a.createElement(p.z, {
                            dropdown: !0,
                            type: p.F.Hollow,
                            "data-test-selector": i.ButtonText
                        }, t ? t.label : e[0].label), a.createElement(p.u, {
                            noTail: !0,
                            direction: p.v.Bottom
                        }, this.renderFilterList())))
                    }, t.prototype.renderFilterList = function() {
                        return this.getFilters().map(this.renderFilter.bind(this))
                    }, t.prototype.renderFilter = function(e) {
                        var t = !!e.selected;
                        return a.createElement(p.Va, {
                            key: e.label,
                            linkTo: t ? this.props.location : this.filterLink(e.filter),
                            selected: t
                        }, a.createElement(p.Ya, {
                            padding: {
                                x: 1,
                                y: .5
                            },
                            "data-test-selector": i.FilterText
                        }, e.label))
                    }, t.prototype.getFilters = function() {
                        var e = [{
                                label: Object(s.d)("All Videos", "VideoFilter2"),
                                filter: d.e.All
                            }, {
                                label: Object(s.d)("Past Broadcasts", "VideoFilter2"),
                                filter: d.e.PastBroadcasts
                            }, {
                                label: Object(s.d)("Clips", "VideoFilter2"),
                                filter: d.e.Clips
                            }, {
                                label: Object(s.d)("Collections", "VideoFilter2"),
                                filter: d.e.Collections
                            }, {
                                label: Object(s.d)("Highlights", "VideoFilter2"),
                                filter: d.e.Highlights
                            }],
                            t = null;
                        if (Object(u.a)()) t = Object(d.x)(this.props.location.search);
                        else {
                            var n = Object(d.w)(this.props.location.pathname);
                            t = n ? Object(d.A)(n) : null
                        }
                        return e.forEach(function(e) {
                            t || e.filter !== d.e.All ? t && t === e.filter && (e.selected = !0) : e.selected = !0
                        }), e
                    }, t.prototype.filterLink = function(e) {
                        var t;
                        return Object(u.a)() ? e ? Object(c.d)(this.props.location, ((t = {})[d.c] = e, t)) : Object(c.b)(this.props.location, d.c) : e ? Object(c.c)(this.props.location, "/" + this.props.channelLogin + "/" + Object(d.z)(e)) : Object(c.c)(this.props.location, "/" + this.props.channelLogin + "/" + Object(d.o)())
                    }, t
                }(a.Component),
                h = Object(o.a)(m)
        },
        cMjZ: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("o4DC");

            function r(e) {
                return e && Object(i.c)(e) || ""
            }
        },
        cRsL: function(e, t, n) {},
        cnlr: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("/MKj"),
                s = n("fvjX"),
                l = n("/7QA"),
                c = n("Lmqf"),
                d = n.n(c),
                u = n("yR8l"),
                p = n("1/iK"),
                m = n("y5D0"),
                h = n("ugtu"),
                g = n("D7An");
            ! function(e) {
                e.Learn = "learn", e.Support = "support", e.LiveUp = "liveup", e.Recommendation = "rec", e.Bullet = "bullet"
            }(i || (i = {}));
            var f, v, b = n("Ue10"),
                k = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            upsellCenterChannelsAssignment: t.props.showDefault ? null : function() {
                                var e = l.p.experiments.getAssignment(g.b.WebSideNavUpsellCenterChannels);
                                return e === i.Learn || e === i.Support || e === i.LiveUp || e === i.Recommendation || e === i.Bullet ? e : null
                            }()
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(b.Ya, {
                            margin: {
                                y: 1
                            }
                        }, this.renderText())
                    }, t.prototype.renderText = function() {
                        if (!this.props.data || this.props.showDefault || !this.state.upsellCenterChannelsAssignment) return this.renderDefault();
                        switch (this.state.upsellCenterChannelsAssignment) {
                            case i.Learn:
                                return this.renderTextContent(Object(l.d)("Want to master <x:bold>{game}</x:bold>?", {
                                    game: this.props.data.game,
                                    "x:bold": h.j
                                }, "UpsellCenterText"), Object(l.d)("Sign up to learn from the best.", "UpsellCenterText"));
                            case i.Support:
                                return this.renderTextContent(Object(l.d)("Sign up and follow to support <x:bold>{name}</x:bold> and all your favorite streamers!", {
                                    name: this.props.data.channelDisplayName,
                                    "x:bold": h.j
                                }, "UpsellCenterText"));
                            case i.LiveUp:
                                return this.renderTextContent(Object(l.d)("Late to the show?", "UpsellCenterText"), Object(l.d)("Sign up and get notifications next time <x:bold>{name}</x:bold> goes live.", {
                                    name: this.props.data.channelDisplayName,
                                    "x:bold": h.j
                                }, "UpsellCenterText"));
                            case i.Recommendation:
                                return this.renderTextContent(Object(l.d)("Discover more streamers like <x:bold>{name}</x:bold>!", {
                                    name: this.props.data.channelDisplayName,
                                    "x:bold": h.j
                                }, "UpsellCenterText"), Object(l.d)("Sign up to see which channels we've picked just for you.", "UpsellCenterText"));
                            case i.Bullet:
                                return this.renderBulletPoints(Object(l.d)("Sign up to experience the best of <x:bold>{name}</x:bold>:", {
                                    name: this.props.data.channelDisplayName,
                                    "x:bold": h.j
                                }, "UpsellCenterText"), [Object(l.d)("Chat with other fans", "UpsellCenterText"), Object(l.d)("Capture your favorite moments", "UpsellCenterText"), Object(l.d)("Watch in Dark Mode!", "UpsellCenterText")]);
                            default:
                                return this.renderDefault()
                        }
                    }, t.prototype.renderDefault = function() {
                        return this.renderTextContent(Object(l.d)("Join the Twitch community!", "UpsellCenterText"), Object(l.d)("Discover the best live streams anywhere.", "UpsellCenterText"))
                    }, t.prototype.renderTextContent = function(e, t) {
                        return a.createElement(a.Fragment, null, a.createElement(b.W, {
                            color: b.O.Base,
                            fontSize: b.Ca.Size4
                        }, e), a.createElement(b.W, {
                            color: b.O.Alt2,
                            fontSize: b.Ca.Size5
                        }, t))
                    }, t.prototype.renderBulletPoints = function(e, t) {
                        var n = t.map(function(e, t) {
                            return a.createElement(b.Ya, {
                                key: "upsell-center-text-" + t,
                                display: b.X.Flex,
                                flexDirection: b.Aa.Row,
                                alignItems: b.f.Start
                            }, a.createElement(b.tb, {
                                type: b.vb.Alt2,
                                asset: b.ub.Check
                            }), a.createElement(b.Ya, {
                                margin: {
                                    left: 1
                                },
                                textAlign: b.Sb.Left
                            }, a.createElement(b.W, {
                                color: b.O.Alt2,
                                fontSize: b.Ca.Size6
                            }, e)))
                        });
                        return a.createElement(a.Fragment, null, a.createElement(b.W, {
                            color: b.O.Base,
                            fontSize: b.Ca.Size4
                        }, e), a.createElement(b.Ya, {
                            margin: {
                                top: 1
                            }
                        }, n))
                    }, t
                }(a.Component),
                y = n("2xye");
            ! function(e) {
                e.SideNav = "sidenav"
            }(f || (f = {})),
            function(e) {
                e.Upsell = "upsell"
            }(v || (v = {}));
            var C = n("Ve5Q"),
                S = (n("wqI2"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.impressionEventFired = !1, t.signup = function() {
                            ! function(e) {
                                var t = r.__assign({
                                    section: f.SideNav,
                                    click_subsection: v.Upsell
                                }, e);
                                l.o.track(y.SpadeEventType.ItemClick, t)
                            }(), t.props.signup()
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.trackImpression()
                    }, t.prototype.componentDidUpdate = function() {
                        this.trackImpression()
                    }, t.prototype.render = function() {
                        return a.createElement(b.Fb, {
                            background: b.r.AccentAlt2,
                            display: b.X.Flex,
                            flexDirection: b.Aa.Column,
                            padding: {
                                y: 2,
                                x: 1
                            },
                            margin: 1
                        }, this.renderImage(), a.createElement(b.Ya, {
                            textAlign: b.Sb.Center
                        }, this.renderText(), a.createElement(b.z, {
                            onClick: this.signup,
                            size: b.D.Large
                        }, a.createElement(b.Ya, {
                            padding: {
                                x: 1
                            }
                        }, a.createElement(b.W, {
                            color: b.O.Base
                        }, Object(l.d)("Sign up", "UpsellCenter"))))))
                    }, t.prototype.renderText = function() {
                        if (!this.props.channelLogin) return a.createElement(k, {
                            showDefault: !0
                        });
                        if (this.props.data && this.props.data.user) {
                            var e = {
                                game: this.props.data.user.broadcastSettings && this.props.data.user.broadcastSettings.game && this.props.data.user.broadcastSettings.game.displayName || "",
                                channelDisplayName: this.props.data.user.displayName || ""
                            };
                            return a.createElement(k, {
                                data: e
                            })
                        }
                    }, t.prototype.renderImage = function() {
                        var e = a.createElement(b.S, {
                            alt: Object(l.d)("Upsell Center", "UpsellCenter"),
                            src: d.a
                        });
                        return this.props.channelLogin && this.props.data && this.props.data.user && this.props.data.user.profileImageURL ? a.createElement(b.Ya, {
                            position: b.kb.Relative
                        }, a.createElement(b.Ya, {
                            className: "upsell-center__avatar",
                            position: b.kb.Absolute,
                            zIndex: b.jc.Above
                        }, a.createElement(b.q, {
                            src: this.props.data.user.profileImageURL,
                            alt: Object(l.d)("{displayName}'s Profile Image", {
                                displayName: this.props.data.user.displayName || ""
                            }, "UpsellCenter"),
                            borderRadius: b.x.Large,
                            size: 40
                        })), e) : e
                    }, t.prototype.trackImpression = function() {
                        this.impressionEventFired || (! function(e) {
                            var t = r.__assign({
                                section: f.SideNav
                            }, e);
                            l.o.track(y.SpadeEventType.ItemDisplay, t)
                        }(), this.impressionEventFired = !0)
                    }, t
                }(a.PureComponent));
            var E = Object(s.compose)(Object(u.a)(C, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin || ""
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(o.connect)(null, function(e) {
                    return Object(s.bindActionCreators)({
                        signup: function() {
                            return Object(m.g)(p.a.SideNavUpsellCenter)
                        }
                    }, e)
                }))(S),
                N = n("kRBY"),
                O = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return this.props.isLoggedIn || this.props.collapsed ? null : a.createElement(E, r.__assign({}, this.props))
                    }, t
                }(a.PureComponent);
            var _ = Object(o.connect)(function(e) {
                return {
                    collapsed: !e.ui.sideNavExpanded,
                    isLoggedIn: Object(N.f)(e)
                }
            })(O);
            n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {
                return S
            }), n.d(t, !1, function() {
                return O
            }), n.d(t, "a", function() {
                return _
            })
        },
        cpJf: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "d", function() {
                    return a
                }), n.d(t, "c", function() {
                    return o
                }), n.d(t, "b", function() {
                    return r
                }),
                function(e) {
                    e.Chat = "stream_chat", e.Feeds = "feeds", e.Room = "chatroom", e.Whisper = "whisper", e.VodChat = "vod-chat"
                }(i || (i = {}));
            var r, a = {
                    TriHard: {
                        count: 196568036
                    },
                    Kappa: {
                        count: 192158118
                    },
                    "4Head": {
                        count: 155758710
                    },
                    PogChamp: {
                        count: 151485090
                    },
                    cmonBruh: {
                        count: 146352878
                    },
                    BibleThump: {
                        count: 56472964
                    },
                    WutFace: {
                        count: 45069031
                    },
                    Kreygasm: {
                        count: 41387580
                    },
                    DansGame: {
                        count: 38097659
                    },
                    hi5F: {
                        count: 34986404
                    },
                    SMOrc: {
                        count: 34734484
                    },
                    KappaPride: {
                        count: 34262839
                    },
                    VoHiYo: {
                        count: 27886434
                    },
                    SwiftRage: {
                        count: 24561900
                    },
                    ResidentSleeper: {
                        count: 24438298
                    },
                    EleGiggle: {
                        count: 19891526
                    },
                    FailFish: {
                        count: 19118343
                    },
                    NotLikeThis: {
                        count: 18802905
                    },
                    Keepo: {
                        count: 18351415
                    },
                    BabyRage: {
                        count: 18220906
                    },
                    MingLee: {
                        count: 18026207
                    },
                    pbfSSH: {
                        count: 16911241
                    },
                    forsenE: {
                        count: 14960299
                    },
                    HeyGuys: {
                        count: 14851569
                    },
                    ANELE: {
                        count: 14648986
                    },
                    PJSalt: {
                        count: 14438861
                    }
                },
                o = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"];
            ! function(e) {
                e.Web = "WEB", e.IOS = "IOS", e.Android = "ANDROID"
            }(r || (r = {}))
        },
        cr2a: function(e, t, n) {},
        csJo: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelRoot_Collection"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "collectionID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channelCurrentUser"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "collection"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "collectionID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channelCollection"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 283
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/channel/queries/channel-current-user.gql"\n#import "twilight/features/channel/queries/channel-collection.gql"\nquery ChannelRoot_Collection(\n$collectionID: ID!\n) {\ncurrentUser {\n...channelCurrentUser\n}\ncollection(id: $collectionID) {\n...channelCollection\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("NJiF").definitions)), i.definitions = i.definitions.concat(a(n("vtET").definitions)), e.exports = i
        },
        cu2Y: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("Ue10"),
                s = (n("H4/V"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isRendered: !1,
                            isClosed: !1
                        }, t.onClickClose = function() {
                            t.setState({
                                isClosed: !0
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.checkForCompanion(this.props)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.checkForCompanion(e)
                    }, t.prototype.renderIframe = function() {
                        return this.state.bufferedCompanion ? r.createElement("iframe", {
                            className: "companion-ad-div",
                            srcDoc: this.state.bufferedCompanion.content,
                            height: this.state.bufferedCompanion.height,
                            width: this.state.bufferedCompanion.width,
                            sandbox: "allow-forms allow-same-origin allow-scripts allow-popups",
                            allowTransparency: !0,
                            scrolling: "no",
                            marginWidth: 0,
                            marginHeight: 0,
                            frameBorder: 0
                        }) : null
                    }, t.prototype.render = function() {
                        return r.createElement(o.Ya, {
                            flexGrow: 0,
                            flexShrink: 0,
                            alignItems: o.f.Center,
                            className: "companion-ad",
                            display: this.state.isClosed || !this.state.isRendered ? o.X.Hide : o.X.Flex,
                            flexWrap: o.Ba.Wrap,
                            fullWidth: !0,
                            justifyContent: o.Xa.Center,
                            padding: {
                                top: 2,
                                bottom: 1
                            },
                            "data-test-selector": "companion-ad"
                        }, this.renderIframe(), r.createElement(o.Ya, {
                            padding: {
                                top: 1,
                                left: 2
                            },
                            fullWidth: !0
                        }, r.createElement("button", {
                            onClick: this.onClickClose,
                            className: "companion-ad__close",
                            "data-test-selector": "companion-ad-close"
                        }, r.createElement(o.Ya, {
                            display: o.X.Flex,
                            flexDirection: o.Aa.Row,
                            alignItems: o.f.Center
                        }, r.createElement(o.Ya, {
                            margin: {
                                right: .5
                            },
                            display: o.X.Flex
                        }, r.createElement(o.tb, {
                            asset: o.ub.Close
                        })), r.createElement(o.W, {
                            transform: o.Vb.Uppercase
                        }, Object(a.d)("Close Ad", "CompanionAd"))))))
                    }, t.prototype.checkForCompanion = function(e) {
                        var t = e.bufferedCompanion,
                            n = e.onCompanionAdConsumed;
                        if (t && n) {
                            var i = !t.isEmpty,
                                r = !!t.isEmpty;
                            this.setState({
                                isRendered: i,
                                isClosed: r,
                                bufferedCompanion: t
                            }), n()
                        }
                    }, t
                }(r.Component));
            n.d(t, "a", function() {
                return s
            })
        },
        cys1: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("gvGA"),
                o = n("5zf8"),
                s = n("4rCz"),
                l = n("x0+1"),
                c = n("j0ar"),
                d = function(e) {
                    var t, n = e.emote,
                        r = n.alt || "";
                    return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = i.createElement("strong", {
                        className: "chat-line__message--cheer-amount",
                        style: {
                            color: n.cheerColor
                        }
                    }, n.cheerAmount)), i.createElement(c.a, {
                        alt: r,
                        cheerText: t,
                        className: "chat-line__message--emote",
                        srcKey: "1x",
                        srcSet: n.images
                    })
                };
            d.displayName = "Emote";
            var u, p = function(e) {
                    var t = e.displayText,
                        n = e.url;
                    return i.createElement("a", {
                        className: "link-fragment",
                        href: n,
                        target: "_blank",
                        rel: "noreferrer noopener"
                    }, t)
                },
                m = n("TSYQ"),
                h = n("RcPG"),
                g = (n("VN3V"), function(e) {
                    var t, n = e.content,
                        r = e.highlightType,
                        a = m("text-fragment", ((t = {})["text-fragment--moderated-highlight"] = r === h.a.ModeratedText, t));
                    return i.createElement("span", {
                        className: a,
                        "data-a-target": "chat-message-text"
                    }, n)
                }),
                f = n("mrSG"),
                v = n("yR8l"),
                b = n("+GjP"),
                k = n("2xye"),
                y = n("Ue10"),
                C = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hasImageLoadingError: !1
                        }, t.handleImageError = function() {
                            t.setState({
                                hasImageLoadingError: !0
                            })
                        }, t
                    }
                    return f.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                        this.setState({
                            hasImageLoadingError: !1
                        })
                    }, t.prototype.render = function() {
                        var e = r.a.defaultStreamPreviewURL;
                        return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), i.createElement(y.I, {
                            aspect: y.p.Aspect16x9,
                            alt: this.props.altText,
                            src: e,
                            onError: this.handleImageError
                        })
                    }, t
                }(i.Component),
                S = (n("Epr8"), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
                E = {
                    ERROR: "chat-card-error",
                    TITLE: "chat-card-title",
                    DESCRIPTION: "chat-card-description"
                },
                N = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderErrorCard = function() {
                            var e = i.createElement("img", {
                                "data-test-selector": E.ERROR,
                                src: S,
                                className: "chat-card__error-img"
                            });
                            return t.renderCardContent(e, t.props.error)
                        }, t.renderCardContent = function(e, t) {
                            var n, r;
                            return t ? (n = i.createElement(y.W, {
                                type: y.Wb.Span,
                                fontSize: y.Ca.Size5,
                                "data-test-selector": E.TITLE,
                                title: t.title
                            }, t.title), r = i.createElement(y.W, {
                                type: y.Wb.Span,
                                fontSize: y.Ca.Size6,
                                color: y.O.Alt2,
                                "data-test-selector": E.DESCRIPTION
                            }, t.description)) : (e = i.createElement(y.jb, {
                                overlay: !0
                            }), n = i.createElement(y.jb, {
                                width: 180
                            }), r = i.createElement(y.jb, {
                                width: 120
                            })), i.createElement(y.Fb, {
                                background: y.r.Base,
                                display: y.X.Flex,
                                flexWrap: y.Ba.NoWrap,
                                padding: .5
                            }, i.createElement(y.Fb, {
                                className: "chat-card__preview-img",
                                background: y.r.Alt2,
                                display: y.X.Flex,
                                alignItems: y.f.Center,
                                justifyContent: y.Xa.Center,
                                flexShrink: 0
                            }, e), i.createElement(y.Ya, {
                                display: y.X.Flex,
                                alignItems: y.f.Center,
                                overflow: y.db.Hidden
                            }, i.createElement(y.Ya, {
                                padding: {
                                    left: 1
                                },
                                fullWidth: !0
                            }, i.createElement(y.Ya, {
                                className: "chat-card__title",
                                ellipsis: !0
                            }, n), i.createElement(y.Ya, {
                                ellipsis: !0
                            }, r))))
                        }, t
                    }
                    return f.__extends(t, e), t.prototype.render = function() {
                        var e;
                        if (this.props.error) e = this.renderErrorCard();
                        else if (this.props.data) {
                            var t = Object(b.e)(this.props.data.contentURL, {
                                    tt_medium: k.PageviewMedium.Chat,
                                    tt_content: k.PageviewContent.ChatCard
                                }),
                                n = i.createElement(C, {
                                    altText: this.props.data.title,
                                    imageURL: this.props.data.previewImageURL
                                });
                            e = i.createElement(y.U, {
                                className: "chat-card__link",
                                to: t,
                                targetBlank: !0
                            }, this.renderCardContent(n, {
                                title: this.props.data.title,
                                description: this.props.data.description
                            }))
                        } else e = this.renderCardContent();
                        return i.createElement(y.Fb, {
                            elevation: 1,
                            margin: {
                                top: .5
                            }
                        }, e)
                    }, t
                }(i.Component),
                O = n("SceP"),
                _ = {
                    isTimedOut: !1
                },
                w = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = _, t.timeoutID = null, t
                    }
                    return f.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this;
                        this.props.data.clip || (this.timeoutID = setTimeout(function() {
                            e.setState({
                                isTimedOut: !0
                            })
                        }, 5e3))
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                            isTimedOut: !1
                        }))
                    }, t.prototype.render = function() {
                        var e = this.props.data,
                            t = e.clip,
                            n = e.error,
                            a = e.loading;
                        return n || this.state.isTimedOut ? i.createElement(N, {
                            error: {
                                title: Object(r.d)("Something went wrong", "ClipsChatCard"),
                                description: Object(r.d)("We couldn't find that Clip", "ClipsChatCard")
                            }
                        }) : a || !t ? i.createElement(N, null) : i.createElement(N, {
                            data: {
                                title: t.title || (t.broadcaster && t.broadcaster.displayName ? Object(r.d)("Clip of {broadcaster}", {
                                    broadcaster: t.broadcaster.displayName
                                }, "ClipsChatCard") : ""),
                                description: t.curator && t.curator.displayName ? Object(r.d)("Clipped by {curator}", {
                                    curator: t.curator.displayName
                                }, "ClipsChatCard") : "",
                                previewImageURL: t.thumbnailURL,
                                contentURL: t.url
                            }
                        })
                    }, t
                }(i.Component),
                D = Object(v.a)(O, {
                    options: function(e) {
                        return {
                            variables: {
                                slug: e.slug
                            },
                            notifyOnNetworkStatusChange: !0,
                            fetchPolicy: e.forceNetworkRequest ? "cache-first" : "cache-only"
                        }
                    }
                })(w),
                I = n("gTu3"),
                T = (n("lpj/"), (u = {})[I.a.Default] = "", u[I.a.Recipient] = "mention-fragment--recipient", u[I.a.Sender] = "mention-fragment--sender", u),
                M = function(e) {
                    var t = e.isAtMention ? "@" : "",
                        n = m("mention-fragment", T[e.currentUserMentionRelation]);
                    return i.createElement("span", {
                        className: n,
                        "data-a-target": "chat-message-mention"
                    }, "" + t + e.recipient)
                };
            M.displayName = "MentionFragment";
            var R = n("QVaV"),
                L = n("sU0Q"),
                F = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return f.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.data,
                            t = e.video,
                            n = e.error,
                            a = e.loading;
                        if (n || t && !t.owner) return i.createElement(N, {
                            error: {
                                title: Object(r.d)("Something went wrong", "VideoChatCard"),
                                description: Object(r.d)("We couldn't find that video", "VideoChatCard")
                            }
                        });
                        if (a || !t) return i.createElement(N, null);
                        var o = i.createElement(y.W, null, Object(r.c)(new Date(t.publishedAt), "medium"), i.createElement("span", null, " · "), Object(R.a)(t.owner.login, t.owner.displayName));
                        return i.createElement(N, {
                            data: {
                                title: t.title,
                                description: o,
                                previewImageURL: t.previewThumbnailURL,
                                contentURL: this.props.url
                            }
                        })
                    }, t
                }(i.Component),
                j = Object(v.a)(L, {
                    options: function(e) {
                        return {
                            variables: {
                                videoID: e.id
                            },
                            notifyOnNetworkStatusChange: !0,
                            fetchPolicy: "cache-first"
                        }
                    }
                })(F),
                x = n("ZtEv");

            function A(e, t, n) {
                void 0 === n && (n = !1);
                var r = t.content,
                    a = r.displayText,
                    o = r.url;
                return n ? i.createElement(g, {
                    key: "message-span-" + e,
                    content: a
                }) : i.createElement(p, {
                    key: e,
                    displayText: a,
                    url: o
                })
            }

            function U(e, t) {
                void 0 === t && (t = {});
                var n = null,
                    r = e.reduce(function(r, o, s) {
                        var l = [];
                        switch (s > 0 && e[s - 1].type !== h.a.Text && o.type !== h.a.Text && l.push(" "), o.type) {
                            case h.a.Text:
                            case h.a.ModeratedText:
                                var c = o.content,
                                    u = o.type;
                                l.push(i.createElement(g, {
                                    key: s,
                                    content: c,
                                    highlightType: u
                                }));
                                break;
                            case h.a.CurrentUserHighlight:
                                l.push(i.createElement(M, {
                                    isAtMention: !1,
                                    currentUserMentionRelation: I.a.Recipient,
                                    recipient: o.content,
                                    key: s
                                }));
                                break;
                            case h.a.Mention:
                                l.push(i.createElement(M, {
                                    isAtMention: !0,
                                    currentUserMentionRelation: o.content.currentUserMentionRelation,
                                    recipient: o.content.recipient,
                                    key: s
                                }));
                                break;
                            case h.a.Emote:
                                l.push(i.createElement(d, {
                                    key: s,
                                    emote: o.content
                                }));
                                break;
                            case h.a.Link:
                                l.push(A(s, o, t.disableLinks));
                                break;
                            case h.a.ClipLink:
                                n || (n = i.createElement(a.a, {
                                    key: s
                                }, i.createElement(D, {
                                    slug: o.content.slug,
                                    forceNetworkRequest: t.forceClipsNetworkRequest
                                }))), l.push(A(s, o, t.disableLinks));
                                break;
                            case h.a.VideoLink:
                                n || (n = i.createElement(j, {
                                    key: s,
                                    id: o.content.id,
                                    url: o.content.url
                                })), l.push(A(s, o, t.disableLinks))
                        }
                        return r.concat(l)
                    }, []);
                return n && (r = r.concat(n)), r
            }

            function P(e) {
                if (e.moderationType === x.e.Delete) {
                    var t = e,
                        n = t.userLogin,
                        a = t.body;
                    return i.createElement(l.a, {
                        targetLogin: n,
                        messageBody: a
                    })
                }
                if ((e = e).moderationType === x.e.Ban) return e.reason ? i.createElement("span", {
                    className: "chat-line__moderation--ban-with-reason"
                }, Object(r.d)("{userLogin} has been banned. Reason: {reason}", {
                    userLogin: e.userLogin,
                    reason: e.reason
                }, "ChatLine")) : i.createElement("span", {
                    className: "chat-line__moderation--ban"
                }, Object(r.d)("{userLogin} is now banned from this channel.", {
                    userLogin: e.userLogin
                }, "ChatLine"));
                if (e.reason && e.duration) {
                    var o = Object(r.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                        duration: e.duration,
                        reason: e.reason,
                        userLogin: e.userLogin
                    }, "ChatLine");
                    return i.createElement("span", {
                        className: "chat-line__moderation--timeout-with-reason"
                    }, o)
                }
                return e.duration ? i.createElement("span", {
                    className: "chat-line__moderation--timeout"
                }, Object(r.d)("{userLogin} has been timed out for {duration} seconds.", {
                    userLogin: e.userLogin,
                    duration: e.duration
                }, "ChatLine")) : void 0
            }

            function B(e) {
                var t = e.daysLeft;
                0 === t && (t = e.hoursLeft);
                var n = {
                    bitsTotal: i.createElement("strong", null, Object(s.f)(e.total, {
                        style: "currency",
                        currency: "USD"
                    })),
                    charityName: i.createElement("strong", null, e.charityName),
                    learnMoreURL: i.createElement("a", {
                        href: e.learnMore,
                        target: "_blank"
                    }, e.learnMore),
                    hashtag: i.createElement("strong", null, e.hashtag),
                    timeRemaining: Object(s.f)(t)
                };
                return i.createElement("span", null, 0 === e.daysLeft ? function(e) {
                    return Object(r.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more hours to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                        bitsTotal: e.bitsTotal,
                        charityName: e.charityName,
                        timeRemaining: e.timeRemaining,
                        hashtag: e.hashtag,
                        learnMoreURL: e.learnMoreURL
                    }, "ChatLine")
                }(n) : function(e) {
                    return Object(r.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more days to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                        bitsTotal: e.bitsTotal,
                        charityName: e.charityName,
                        timeRemaining: e.timeRemaining,
                        hashtag: e.hashtag,
                        learnMoreURL: e.learnMoreURL
                    }, "ChatLine")
                }(n))
            }

            function V(e) {
                var t = e.enabled ? Object(r.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                    length: e.length
                }, "ChatLine") : Object(r.d)("This room is no longer in slow mode.", "ChatLine");
                return i.createElement("span", null, t)
            }

            function W(e) {
                var t;
                if (e.length > 0) {
                    var n = e.join(", ");
                    t = Object(r.d)("The moderators of this channel are: {moderatorList}", {
                        moderatorList: n
                    }, "ChatLine")
                } else t = Object(r.d)("There are no moderators of this channel.", "ChatLine");
                return i.createElement("span", null, t)
            }

            function H(e) {
                if (e.enabled) {
                    var t = 0 === e.length ? Object(r.d)("This room is in followers-only mode.", "ChatLine") : Object(r.d)("This room is now in {length} followers-only mode.", {
                        length: Object(o.b)(60 * e.length)
                    }, "ChatLine");
                    return i.createElement("span", null, t)
                }
                return i.createElement("span", null, Object(r.d)("This room is no longer in followers-only mode.", "ChatLine"))
            }

            function G(e) {
                return e.enabled ? i.createElement("span", null, Object(r.d)("This room is now in emote-only mode.", "ChatLine")) : i.createElement("span", null, Object(r.d)("This room is no longer in emote-only mode.", "ChatLine"))
            }

            function Y(e) {
                var t = e.enabled ? Object(r.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(r.d)("This room is no longer in subscriber-only mode.", "ChatLine");
                return i.createElement("span", null, t)
            }

            function z(e) {
                return e.enabled ? i.createElement("span", null, Object(r.d)("r9k mode has been enabled for this room.", "ChatLine")) : i.createElement("span", null, Object(r.d)("r9k mode has been disabled for this room.", "ChatLine"))
            }

            function q(e) {
                return e.isAutohost ? Object(r.d)("{host} is now auto hosting you for up to {viewerCount, number} viewers.", {
                    host: e.hostingChannel,
                    viewerCount: e.viewerCount
                }, "ChatLine") : e.viewerCount <= 2 ? Object(r.d)("{host} is now hosting you.", {
                    host: e.hostingChannel
                }, "ChatLine") : Object(r.d)("{host} is now hosting you for up to {viewerCount, number} viewers.", {
                    host: e.hostingChannel,
                    viewerCount: e.viewerCount
                }, "ChatLine")
            }

            function X(e) {
                var t = e.getHours() % 12;
                0 === t && (t = 12);
                var n = e.getMinutes(),
                    i = n.toString();
                return n < 10 && (i = "0" + i), t + ":" + i
            }

            function Q(e) {
                return i.createElement("span", {
                    key: "timestamp",
                    className: "chat-line__timestamp",
                    "data-a-target": "chat-timestamp",
                    "data-test-selector": "chat-timestamp"
                }, X(new Date(e)))
            }

            function K(e) {
                return i.createElement("span", {
                    key: "timestamp",
                    className: "chat-line__timestamp",
                    "data-a-target": "chat-timestamp",
                    "data-test-selector": "chat-timestamp"
                }, function(e, t) {
                    void 0 === t && (t = {});
                    var n = r.p.intl.getLanguageCode() || "en";
                    return Intl.DateTimeFormat(n, t).format(e)
                }(new Date(e), {
                    hour: "numeric",
                    minute: "numeric"
                }))
            }
            n.d(t, "f", function() {
                return U
            }), n.d(t, "g", function() {
                return P
            }), n.d(t, "b", function() {
                return B
            }), n.d(t, "j", function() {
                return V
            }), n.d(t, "i", function() {
                return W
            }), n.d(t, "d", function() {
                return H
            }), n.d(t, "c", function() {
                return G
            }), n.d(t, "k", function() {
                return Y
            }), n.d(t, "h", function() {
                return z
            }), n.d(t, "e", function() {
                return q
            }), n.d(t, "a", function() {
                return X
            }), n.d(t, "l", function() {
                return Q
            }), n.d(t, "m", function() {
                return K
            })
        },
        dAHa: function(e, t, n) {
            "use strict";
            var i, r, a = n("mrSG"),
                o = n("q1tI"),
                s = n("/MKj"),
                l = n("fvjX"),
                c = n("/7QA"),
                d = n("yR8l"),
                u = n("BhFH"),
                p = n("iS14"),
                m = n("geRD"),
                h = n("f00E"),
                g = n("D7An"),
                f = n("DMoW"),
                v = n("2xye"),
                b = n("GnwI"),
                k = n("QVaV"),
                y = n("Ue10"),
                C = (n("MPK0"), "report-wizard-block"),
                S = "report-wizard-unblock",
                E = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            userBlocked: t.props.userBlocked || !1
                        }, t.renderBlock = function() {
                            return o.createElement(y.U, {
                                hoverUnderlineNone: !0,
                                onClick: t.handleBlock,
                                "data-test-selector": C
                            }, o.createElement(y.Ya, {
                                display: y.X.Flex,
                                alignItems: y.f.Center
                            }, o.createElement(y.tb, {
                                type: y.vb.Brand,
                                asset: y.ub.Ban
                            }), o.createElement(y.Ya, {
                                margin: {
                                    left: .5
                                }
                            }, Object(c.d)("Block {user}", {
                                user: t.displayName()
                            }, "ReportWizardBlockActions"))))
                        }, t.renderUnblock = function() {
                            return o.createElement(y.Ya, {
                                className: "reporting-wizard__block-actions",
                                display: y.X.Flex,
                                alignItems: y.f.Center
                            }, o.createElement(y.tb, {
                                type: y.vb.Success,
                                asset: y.ub.FollowCheck
                            }), o.createElement(y.Ya, {
                                margin: {
                                    right: 1
                                }
                            }, o.createElement(y.W, {
                                className: "block-user__success",
                                type: y.Wb.Span
                            }, Object(c.d)("{user} blocked", {
                                user: t.displayName()
                            }, "ReportWizardBlockActions"))), o.createElement(y.U, {
                                hoverUnderlineNone: !0,
                                onClick: t.handleUnblock,
                                "data-test-selector": S
                            }, o.createElement(y.Ya, {
                                margin: {
                                    left: .5
                                }
                            }, Object(c.d)("Unblock", "ReportWizardBlockActions"))))
                        }, t.handleBlock = function() {
                            return a.__awaiter(t, void 0, void 0, function() {
                                return a.__generator(this, function(e) {
                                    return this.props.onBlock(), this.setState({
                                        userBlocked: !0
                                    }), [2]
                                })
                            })
                        }, t.handleUnblock = function() {
                            t.props.onUnblock(), t.setState({
                                userBlocked: !1
                            })
                        }, t.displayName = function() {
                            var e = t.props.targetUser.displayName,
                                n = t.props.targetUser.login;
                            return e || (n || "")
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this.state.userBlocked ? this.renderUnblock() : this.renderBlock(),
                            t = Object(k.a)(this.props.targetUser.login, this.props.targetUser.displayName, !0);
                        return o.createElement(y.Fb, {
                            borderTop: !0,
                            padding: {
                                y: 1
                            },
                            margin: {
                                top: 1
                            }
                        }, o.createElement(y.Ya, null, Object(c.d)("Would you like to block {user}?", {
                            user: t
                        }, "ReportWizardBlockActions")), o.createElement(y.Fb, {
                            color: y.O.Alt2,
                            margin: {
                                y: 1
                            }
                        }, o.createElement(y.fc, {
                            baseFontSize: y.Ca.Size6
                        }, o.createElement("p", null, Object(c.d)("Blocking {user} will:", {
                            user: t
                        }, "ReportWizardBlockActions")), o.createElement("ul", null, o.createElement("li", null, Object(c.d)("Prevent them from sending you whispers", "ReportWizardBlockActions")), o.createElement("li", null, Object(c.d)("Prevent them from hosting you", "ReportWizardBlockActions")), o.createElement("li", null, Object(c.d)("Prevent them from adding you as a friend", "ReportWizardBlockActions")), o.createElement("li", null, Object(c.d)("Filter their messages out of chats you don’t moderate", "ReportWizardBlockActions"))))), o.createElement(y.Ya, {
                            margin: {
                                top: 1
                            }
                        }, e))
                    }, t
                }(o.Component);
            ! function(e) {
                e.BitsViolation = "bits_violation", e.ChatBanEvasion = "chat_ban_evasion", e.Cheating = "cheating", e.Gore = "gore", e.Harassment = "harassment", e.Harm = "harm", e.HatefulConduct = "hateful_conduct", e.Impersonation = "impersonation", e.Miscategorized = "miscategorized", e.OffensiveUsername = "offensive_username", e.Other = "other", e.Porn = "porn", e.Prohibited = "prohibited", e.SelfHarm = "selfharm", e.SexualContent = "sexual_content", e.SexualViolence = "sexual_violence", e.Spam = "spam", e.TosBanEvasion = "tos_ban_evasion", e.Underaged = "underaged"
            }(i || (i = {})),
            function(e) {
                e.Link = "link", e.MultipleChoice = "multiple choice", e.Text = "text", e.Textarea = "textarea"
            }(r || (r = {}));
            var N, O = {
                    generalFilter: function() {
                        return Object(c.d)("I don't think their content or behavior is allowed on Twitch", "ReportModalWizard")
                    },
                    me: function() {
                        return Object(c.d)("Me", "ReportModalWizard")
                    },
                    someoneElse: function() {
                        return Object(c.d)("Someone else", "ReportModalWizard")
                    },
                    sexuallyCoercive: function() {
                        return Object(c.d)("acting in a sexually coercive or inappropriate way", "ReportModalWizard")
                    },
                    abusiveViolence: function() {
                        return Object(c.d)("They're threatening violence or physical harm", "ReportModalWizard")
                    },
                    commitingViolence: function() {
                        return Object(c.d)("They're committing acts of violence or physical harm", "ReportModalWizard")
                    },
                    threatening: function() {
                        return Object(c.d)("threatening, harming, or endangering someone", "ReportModalWizard")
                    },
                    abusive: function() {
                        return Object(c.d)("being hateful, harassing, or abusive", "ReportModalWizard")
                    }
                },
                _ = {
                    input_description: {
                        getTitle: function() {
                            return Object(c.d)("Could you provide more detail about this issue? You may include links to videos, clips, and content outside Twitch.", "ReportModalWizard")
                        },
                        value: "description",
                        type: r.Textarea,
                        required: !0
                    },
                    input_link: {
                        getTitle: function() {
                            return Object(c.d)("If possible, please provide a link to show us where the issue occurred. Links that do not lead to the original source of the content may not be usable as evidence.", "ReportModalWizard")
                        },
                        rows: 2,
                        value: "external links",
                        type: r.Textarea
                    },
                    input_usernames: {
                        getTitle: function() {
                            return Object(c.d)("If you know the usernames of any other Twitch accounts that may be owned by this person, please list them in this space.", "ReportModalWizard")
                        },
                        value: "other usernames",
                        rows: 2,
                        type: r.Textarea
                    },
                    input_connection: {
                        getTitle: function() {
                            return Object(c.d)("Please describe how you connected the offsite content to this Twitch account.", "ReportModalWizard")
                        },
                        value: "offsite content connection",
                        type: r.Textarea
                    },
                    input_comments: {
                        getTitle: function() {
                            return Object(c.d)("If you have any other comments you would like to add, please do so here.", "ReportModalWizard")
                        },
                        value: "comments",
                        type: r.Textarea
                    },
                    input_identifyOwner: {
                        getTitle: function() {
                            return Object(c.d)("Please describe how you identified this person as the owner of this Twitch account.", "ReportModalWizard")
                        },
                        rows: 2,
                        value: "connect account owner",
                        type: r.Textarea
                    },
                    endBlurb_socialmedia: {
                        getTitle: function() {
                            return Object(c.d)("Please submit a report to the site or service where the incident occurred as well if you have not already done so.", "ReportModalWizard")
                        },
                        type: r.Text
                    },
                    endBlurb_threat: {
                        getTitle: function() {
                            return Object(c.d)("If you feel you are in immediate danger, please contact your local law enforcement.", "ReportModalWizard")
                        },
                        type: r.Text
                    },
                    endLink_selfharm: {
                        getTitle: function() {
                            return Object(c.d)("Learn more about mental health support", "ReportModalWizard")
                        },
                        value: "https://help.twitch.tv/customer/en/portal/articles/2904486-twitch-cares-mental-health-support-information",
                        type: r.Link
                    },
                    endLink_DMCA: {
                        getTitle: function() {
                            return Object(c.d)("View our DMCA Notification Guidelines", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/dmca-guidelines/",
                        type: r.Link
                    },
                    endLink_trademark: {
                        getTitle: function() {
                            return Object(c.d)("View our Trademark Policy", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/trademark-policy/",
                        type: r.Link
                    },
                    endLink_devAgreement: {
                        getTitle: function() {
                            return Object(c.d)("View our Developer Agreement", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/developer-agreement/",
                        type: r.Link
                    },
                    endLink_eventCoC: {
                        getTitle: function() {
                            return Object(c.d)("View our Events Code of Conduct", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/events-code-of-conduct",
                        type: r.Link
                    },
                    messaging_general: {
                        getTitle: O.generalFilter,
                        value: "general_messaging",
                        omitFromDescription: !0
                    },
                    profile_general: {
                        getTitle: O.generalFilter,
                        value: "general_profile",
                        omitFromDescription: !0
                    },
                    maliciousRaid: {
                        getTitle: function() {
                            return Object(c.d)("They're participating in a malicious raid", "ReportModalWizard")
                        },
                        value: "malicious raid",
                        reportReason: i.Harassment
                    },
                    violence: {
                        getTitle: function() {
                            return Object(c.d)("It contains threats, harm, or endangerment of someone", "ReportModalWizard")
                        },
                        value: "violence/threats",
                        reportReason: i.Harm
                    },
                    report_username: {
                        getTitle: function() {
                            return Object(c.d)("They're using an inappropriate or offensive username", "ReportModalWizard")
                        },
                        value: "inappropriate username",
                        reportReason: i.OffensiveUsername
                    },
                    report_emotes: {
                        getTitle: function() {
                            return Object(c.d)("The emotes are inappropriate or offensive", "ReportModalWizard")
                        },
                        value: "inappropriate emotes",
                        reportReason: i.Other
                    },
                    abusive: {
                        getTitle: function() {
                            return Object(c.d)("It's hateful, harassing, or abusive", "ReportModalWizard")
                        },
                        value: "abusive"
                    },
                    scam: {
                        getTitle: function() {
                            return Object(c.d)("It contains attempts to scam other community members", "ReportModalWizard")
                        },
                        value: "scam",
                        reportReason: i.Spam
                    },
                    emptyStream: {
                        getTitle: function() {
                            return Object(c.d)("There's nobody on the stream", "ReportModalWizard")
                        },
                        value: "empty stream"
                    },
                    impersonation: {
                        getTitle: function() {
                            return Object(c.d)("They're impersonating someone", "ReportModalWizard")
                        },
                        value: "impersonation",
                        reportReason: i.Impersonation
                    },
                    underage: {
                        getTitle: function() {
                            return Object(c.d)("They're underage (12 or younger)", "ReportModalWizard")
                        },
                        value: "underage",
                        reportReason: i.Underaged
                    },
                    report_ip: {
                        getTitle: function() {
                            return Object(c.d)("I think they're using copyrighted content, trademarks, or other intellectual property that's not theirs", "ReportModalWizard")
                        },
                        value: "intellectual property"
                    },
                    inappropriateContent: {
                        getTitle: function() {
                            return Object(c.d)("It's inappropriate or obscene", "ReportModalWizard")
                        },
                        value: "inappropriate content"
                    },
                    violateDevAgreement: {
                        getTitle: function() {
                            return Object(c.d)("I think they're violating Twitch's Developer Agreement", "ReportModalWizard")
                        },
                        value: "violating developer agreement"
                    },
                    revealPersonalInfo: {
                        getTitle: function() {
                            return Object(c.d)("They might have revealed someone's personal information", "ReportModalWizard")
                        },
                        value: "revealing personal info",
                        reportReason: i.Other
                    },
                    inappropriateBadge: {
                        getTitle: function() {
                            return Object(c.d)("Their emote or subscriber badge violates Twitch's Guidelines", "ReportModalWizard")
                        },
                        value: "emote/subscriber badge",
                        reportReason: i.Other
                    },
                    noModeration: {
                        getTitle: function() {
                            return Object(c.d)("They're not moderating their chat appropriately", "ReportModalWizard")
                        },
                        value: "not moderating chat",
                        reportReason: i.Other
                    },
                    inappropriateExtension: {
                        getTitle: function() {
                            return Object(c.d)("Their extension contains malicious or inappropriate content", "ReportModalWizard")
                        },
                        value: "inappropriate extension",
                        reportReason: i.Other
                    },
                    cheating: {
                        getTitle: function() {
                            return Object(c.d)("They're cheating in an online game", "ReportModalWizard")
                        },
                        value: "cheating",
                        reportReason: i.Cheating
                    },
                    bitsViolation: {
                        getTitle: function() {
                            return Object(c.d)("Their use of Bits goes against Twitch's Policy", "ReportModalWizard")
                        },
                        value: "bits violation",
                        reportReason: i.BitsViolation
                    },
                    video_labeling: {
                        getTitle: function() {
                            return Object(c.d)("Their content is labeled incorrectly", "ReportModalWizard")
                        },
                        value: "incorrect label",
                        reportReason: i.Miscategorized
                    },
                    video_inactive: {
                        getTitle: function() {
                            return Object(c.d)("The stream is inactive (sleeping/AFK)", "ReportModalWizard")
                        },
                        value: "inactive stream",
                        reportReason: i.Miscategorized
                    },
                    video_general: {
                        getTitle: O.generalFilter,
                        value: "general_video",
                        omitFromDescription: !0
                    },
                    hateSpeech: {
                        getTitle: function() {
                            return Object(c.d)("They're using hate speech, hateful symbols, or hateful media", "ReportModalWizard")
                        },
                        value: "hate speech",
                        reportReason: i.HatefulConduct
                    },
                    harassment: {
                        getTitle: function() {
                            return Object(c.d)("They're harassing or bullying someone", "ReportModalWizard")
                        },
                        value: "harassment",
                        reportReason: i.Harassment
                    },
                    abusiveViolence: {
                        getTitle: O.abusiveViolence,
                        value: "threatening violence",
                        reportReason: i.Harm
                    },
                    commitingViolence: {
                        getTitle: O.commitingViolence,
                        value: "committing violence",
                        reportReason: i.Harm
                    },
                    swatting: {
                        getTitle: function() {
                            return Object(c.d)("They're inciting or committing swatting or a DDOS attack", "ReportModalWizard")
                        },
                        value: "swatting/ddosing",
                        reportReason: i.Harassment
                    },
                    personalInfo: {
                        getTitle: function() {
                            return Object(c.d)("They're purposely revealing personal information", "ReportModalWizard")
                        },
                        value: "revealing personal info",
                        reportReason: i.Harassment
                    },
                    threat_me: {
                        getTitle: function() {
                            return Object(c.d)("At me", "ReportModalWizard")
                        },
                        value: "against me",
                        reportReason: i.Harm
                    },
                    threat_person: {
                        getTitle: function() {
                            return Object(c.d)("At someone else", "ReportModalWizard")
                        },
                        value: "against another person",
                        reportReason: i.Harm
                    },
                    threat_group: {
                        getTitle: function() {
                            return Object(c.d)("At a group of people", "ReportModalWizard")
                        },
                        value: "against group of people",
                        reportReason: i.Harm
                    },
                    threat_selfharm: {
                        getTitle: function() {
                            return Object(c.d)("They're threatening self-harm", "ReportModalWizard")
                        },
                        value: "selfharm"
                    },
                    inappropriate_game: {
                        getTitle: function() {
                            return Object(c.d)("The game isn't allowed on Twitch", "ReportModalWizard")
                        },
                        value: "prohibited game",
                        reportReason: i.Prohibited
                    },
                    sexuallyViolent: {
                        getTitle: function() {
                            return Object(c.d)("Violent sexual conduct", "ReportModalWizard")
                        },
                        value: "sexually violent",
                        reportReason: i.SexualViolence
                    },
                    childAnimal: {
                        getTitle: function() {
                            return Object(c.d)("Sexual conduct involving a child or animal", "ReportModalWizard")
                        },
                        value: "sexual conduct; child or animal",
                        reportReason: i.SexualViolence
                    },
                    pornographic: {
                        getTitle: function() {
                            return Object(c.d)("Sexually explicit or pornographic content", "ReportModalWizard")
                        },
                        value: "pornographic",
                        reportReason: i.SexualContent
                    },
                    gory: {
                        getTitle: function() {
                            return Object(c.d)("Extreme violence or gore", "ReportModalWizard")
                        },
                        value: "gory",
                        reportReason: i.Gore
                    },
                    suggestive: {
                        getTitle: function() {
                            return Object(c.d)("Sexually suggestive content", "ReportModalWizard")
                        },
                        value: "sexually suggestive",
                        reportReason: i.SexualContent
                    },
                    nudity: {
                        getTitle: function() {
                            return Object(c.d)("Full or partial nudity", "ReportModalWizard")
                        },
                        value: "nudity",
                        reportReason: i.SexualContent
                    },
                    other: {
                        getTitle: function() {
                            return Object(c.d)("There's something else wrong with it...", "ReportModalWizard")
                        },
                        value: "other",
                        reportReason: i.Other
                    },
                    evasion: {
                        getTitle: function() {
                            return Object(c.d)("They were banned or suspended and are trying to get around it (ban evasion)", "ReportModalWizard")
                        },
                        value: "ban evasion"
                    },
                    evasion_sitewide: {
                        getTitle: function() {
                            return Object(c.d)("A sitewide ban from Twitch", "ReportModalWizard")
                        },
                        value: "sitewide ban",
                        reportReason: i.TosBanEvasion
                    },
                    evasion_chat: {
                        getTitle: function() {
                            return Object(c.d)("A chat ban from one or more channels", "ReportModalWizard")
                        },
                        value: "chat ban",
                        reportReason: i.ChatBanEvasion
                    },
                    evasion_messaging: {
                        getTitle: function() {
                            return Object(c.d)("A block from messaging me", "ReportModalWizard")
                        },
                        value: "messaging block",
                        reportReason: i.ChatBanEvasion
                    },
                    impersonation_me: {
                        getTitle: O.me,
                        value: "impersonating me",
                        reportReason: i.Impersonation
                    },
                    impersonation_brand: {
                        getTitle: function() {
                            return Object(c.d)("Someone I represent, or a brand/company I work for", "ReportModalWizard")
                        },
                        value: "impersonating brand",
                        reportReason: i.Impersonation
                    },
                    impersonation_other: {
                        getTitle: O.someoneElse,
                        value: "impersonating someone else",
                        reportReason: i.Impersonation
                    },
                    selfharm: {
                        getTitle: function() {
                            return Object(c.d)("I'm concerned for their wellbeing", "ReportModalWizard")
                        },
                        value: "selfharm",
                        reportReason: i.SelfHarm
                    },
                    chat: {
                        getTitle: function() {
                            return Object(c.d)("In a stream chat message", "ReportModalWizard")
                        },
                        value: "chat"
                    },
                    profile: {
                        getTitle: function() {
                            return Object(c.d)("In the profile content, extensions, or emotes", "ReportModalWizard")
                        },
                        value: "profile"
                    },
                    video: {
                        getTitle: function() {
                            return Object(c.d)("In a live stream, video, or clip", "ReportModalWizard")
                        },
                        value: "video"
                    },
                    room: {
                        getTitle: function(e) {
                            return Object(c.d)("In one of {username}'s rooms", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        value: "room"
                    },
                    whisper: {
                        getTitle: function() {
                            return Object(c.d)("In a whisper (private message)", "ReportModalWizard")
                        },
                        value: "whisper",
                        reportContext: f.N.WHISPER_REPORT
                    },
                    username: {
                        getTitle: function() {
                            return Object(c.d)("In the username", "ReportModalWizard")
                        },
                        value: "username",
                        reportReason: i.OffensiveUsername
                    },
                    report_other: {
                        getTitle: function() {
                            return Object(c.d)("Somewhere else...", "ReportModalWizard")
                        },
                        value: "somewhere else",
                        omitFromDescription: !0
                    },
                    video_streamer: {
                        getTitle: function() {
                            return Object(c.d)("The streamer or channel owner", "ReportModalWizard")
                        },
                        value: "streamer"
                    },
                    video_someoneElse: {
                        getTitle: function() {
                            return Object(c.d)("Someone else in the video", "ReportModalWizard")
                        },
                        value: "someone else in video"
                    },
                    video_chatSomeone: {
                        getTitle: function() {
                            return Object(c.d)("Someone in chat", "ReportModalWizard")
                        },
                        value: "someone in chat",
                        differentTarget: !0
                    },
                    report_channelOwner: {
                        getTitle: function() {
                            return Object(c.d)("The channel owner", "ReportModalWizard")
                        },
                        value: "channel owner"
                    },
                    report_member: {
                        getTitle: function() {
                            return Object(c.d)("Another community member", "ReportModalWizard")
                        },
                        value: "community member",
                        differentTarget: !0
                    },
                    location_onTwitch: {
                        getTitle: function() {
                            return Object(c.d)("On Twitch", "ReportModalWizard")
                        },
                        value: "on twitch"
                    },
                    location_anotherSite: {
                        getTitle: function() {
                            return Object(c.d)("On another site or service", "RpoertModalWizard")
                        },
                        value: "another site"
                    },
                    location_TwitchEvent: {
                        getTitle: function() {
                            return Object(c.d)("In person, at a Twitch event", "ReportModalWizard")
                        },
                        value: "twitch event"
                    },
                    external_incitingRaids: {
                        getTitle: function() {
                            return Object(c.d)("inciting brigading or malicious raids", "ReportModalWizard")
                        },
                        reportReason: i.Harassment,
                        value: "brigading/raids"
                    },
                    external_threatening: {
                        getTitle: O.threatening,
                        value: "threatening"
                    },
                    external_harassment: {
                        getTitle: O.abusive,
                        value: "hateful/harassing"
                    },
                    external_abusiveViolence: {
                        getTitle: O.abusiveViolence,
                        value: "external site; threatening violence",
                        reportReason: i.Harm
                    },
                    external_commitingViolence: {
                        getTitle: O.commitingViolence,
                        value: "external site; committing violence",
                        reportReason: i.Harm
                    },
                    conduct_impersonation: {
                        getTitle: function() {
                            return Object(c.d)("impersonating someone", "ReportModalWizard")
                        },
                        value: "impersonation",
                        reportReason: i.Impersonation
                    },
                    spam: {
                        getTitle: function() {
                            return Object(c.d)("They're spamming or spreading malicious links", "ReportModalWizard")
                        },
                        value: "spam",
                        reportReason: i.Spam
                    },
                    spam_bot: {
                        getTitle: function() {
                            return Object(c.d)("I think this is a bot account", "ReportModalWizard")
                        },
                        value: "bot"
                    },
                    spam_scam: {
                        getTitle: function() {
                            return Object(c.d)("They're trying to scam other community members or sending malicious links", "ReportModalWizard")
                        },
                        value: "scam or malicious links"
                    },
                    spam_repeated: {
                        getTitle: function() {
                            return Object(c.d)("They're sending repeated messages (spam)", "ReportModalWizard")
                        },
                        value: "repeat messages"
                    }
                },
                w = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onChange = function(e) {
                            var n = e.target,
                                i = n.name,
                                r = n.value;
                            t.props.onChangeText(i, r)
                        }, t.onSelect = function(e) {
                            if (t.props.currentCard.items && e.currentTarget.parentElement) {
                                var n = Number(e.currentTarget.parentElement.getAttribute("data-a-index")),
                                    i = t.props.currentCard.items[n];
                                t.props.onChangeRadio(i)
                            }
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.currentCard.getDescription ? o.createElement(y.Ya, {
                            padding: {
                                bottom: 1
                            }
                        }, this.props.currentCard.getDescription()) : null;
                        return o.createElement(y.Ya, {
                            className: "reporting-wizard-card"
                        }, e, o.createElement(y.Ea, {
                            label: this.props.currentCard.getLabel ? this.props.currentCard.getLabel() : ""
                        }, this.renderCardItems()))
                    }, t.prototype.renderCardItems = function() {
                        var e = this,
                            t = this.props.currentCard,
                            n = [];
                        return t.items && t.type && (n = t.items.filter(function(e) {
                            return !!e
                        }).map(function(t, n) {
                            switch (t.type) {
                                case r.Text:
                                    return o.createElement(y.Ya, {
                                        key: n,
                                        padding: {
                                            bottom: 1
                                        }
                                    }, t.getTitle());
                                case r.Link:
                                    return o.createElement(y.Ya, {
                                        key: n,
                                        padding: {
                                            bottom: 1
                                        }
                                    }, o.createElement(y.U, {
                                        to: t.value,
                                        targetBlank: !0
                                    }, o.createElement(y.Ya, {
                                        display: y.X.Flex
                                    }, o.createElement(y.Ya, {
                                        display: y.X.Inline,
                                        padding: {
                                            right: .5
                                        }
                                    }, o.createElement(y.tb, {
                                        asset: y.ub.Document
                                    })), t.getTitle())));
                                case r.Textarea:
                                    var i = t.value ? e.props.userTextInputs[t.value] : void 0,
                                        a = t.required && (!i || !!i && 0 === i.trim().length);
                                    return o.createElement(y.Ya, {
                                        key: n,
                                        padding: {
                                            bottom: 1
                                        }
                                    }, o.createElement(y.Ea, {
                                        label: t.getTitle(),
                                        labelOptional: t.required ? "" : Object(c.d)("Optional", "ReportModalWizardCard")
                                    }, o.createElement(y.Tb, {
                                        onChange: e.onChange,
                                        rows: t.rows || 3,
                                        name: t.value,
                                        error: e.props.error && a,
                                        value: i,
                                        "data-test-selector": "report-wizard-textarea"
                                    })));
                                case r.MultipleChoice:
                                default:
                                    return o.createElement(y.Ya, {
                                        key: n,
                                        padding: {
                                            y: .5
                                        }
                                    }, o.createElement(y.qb, {
                                        checked: !!e.props.currentSelection && e.props.currentSelection.value === t.value,
                                        onChange: e.onSelect,
                                        label: t.getTitle(e.props.targetUser.displayName),
                                        "data-a-index": n,
                                        name: "card",
                                        value: t.value
                                    }))
                            }
                        })), n
                    }, t
                }(o.Component),
                D = n("RQ6e");
            ! function(e) {
                e.Confirm = "Confirm", e.MultipleChoice = "MultipleChoice", e.Info = "End Card"
            }(N || (N = {}));
            var I, T, M, R = {
                    contentGeneral: function() {
                        return Object(c.d)("What would you like to report?", "ReportModalWizard")
                    },
                    content: function() {
                        return Object(c.d)("What's wrong with this content?", "ReportModalWizard")
                    },
                    identifyUser: function() {
                        return Object(c.d)("Who do you want to report?", "ReportModalWizard")
                    },
                    thisPersonIs: function() {
                        return Object(c.d)("This person is...", "ReportModalWizard")
                    },
                    relevantStatements: function() {
                        return Object(c.d)("What would you like to report? (Please choose the most relevant statement that applies.)", "ReportModalWizard")
                    }
                },
                L = {
                    report: function(e) {
                        return Object(c.d)("Report {username}", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportVideo: function(e) {
                        return Object(c.d)("Report {username}'s Video", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportMessage: function(e) {
                        return Object(c.d)("Report {username}'s Message", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportProfile: function(e) {
                        return Object(c.d)("Report {username}'s Profile Or Other Content", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportAbusive: function(e) {
                        return Object(c.d)("Report {username} for Abusive Conduct", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    tellUsMore: function() {
                        return Object(c.d)("Tell Us More", "ReportModalWizard")
                    },
                    thanks: function() {
                        return Object(c.d)("Thanks for letting us know", "ReportModalWizard")
                    },
                    thanksConcern: function() {
                        return Object(c.d)("Thank you for your concern", "ReportModalWizard")
                    }
                },
                F = {
                    getDescription: function() {
                        return Object(c.d)("Reports are reviewed by Twitch Staff 24 hours a day. We will issue penalties, such as account suspension and/or content removal, once we verify that a violation of our policies has occurred.", "ReportModalWizard")
                    },
                    blockPrompt: !0,
                    getTitle: L.thanks,
                    type: N.Info,
                    value: "end card"
                },
                j = {
                    socialMedia: a.__assign({}, F, {
                        items: [_.endBlurb_socialmedia]
                    }),
                    violence: a.__assign({}, F, {
                        items: [_.endBlurb_threat]
                    }),
                    legal: {
                        getTitle: L.thanksConcern,
                        getDescription: function() {
                            return Object(c.d)("To submit a claim or report a violation of this type, you will need to follow the steps listed on the relevant page below.", "ReportModalWizard")
                        },
                        items: [_.endLink_DMCA, _.endLink_trademark, _.endLink_devAgreement],
                        type: N.Info,
                        value: "ip end"
                    },
                    selfharm: {
                        getTitle: L.thanksConcern,
                        getDescription: function() {
                            return Object(c.d)("If you know the user personally, and you believe them to be in danger, please contact their local authorities immediately. The link below contains some general information that may be of use.", "ReportModalWizard")
                        },
                        items: [_.endLink_selfharm],
                        type: N.Info,
                        value: "selfharm end"
                    },
                    twitchEvent: {
                        getTitle: L.thanksConcern,
                        getDescription: function() {
                            return Object(c.d)("Please bring this concern to the attention of staff or security at the event if you have not already done so. More information is available at the link below.", "ReportModalWizard")
                        },
                        items: [_.endLink_eventCoC],
                        value: "twitch event end",
                        type: N.Info
                    }
                },
                x = {
                    getTitle: L.report,
                    getLabel: function() {
                        return Object(c.d)("Where is the problem?", "ReportModalWizard")
                    },
                    items: [_.video, _.whisper, _.chat, _.room, _.profile, _.username, _.report_other],
                    type: N.MultipleChoice,
                    value: "content type"
                },
                A = {
                    identifyUser: {
                        getTitle: L.reportVideo,
                        getLabel: R.identifyUser,
                        items: [_.video_streamer, _.video_someoneElse, _.video_chatSomeone],
                        type: N.MultipleChoice,
                        value: "video identify user"
                    },
                    content: {
                        getTitle: L.reportVideo,
                        getLabel: R.contentGeneral,
                        items: [_.revealPersonalInfo, _.video_labeling, _.video_inactive, _.video_general, _.report_ip, _.violateDevAgreement, _.selfharm],
                        type: N.MultipleChoice,
                        value: "video report reason"
                    },
                    general: {
                        getTitle: L.reportVideo,
                        getLabel: R.content,
                        items: [_.report_username, _.violence, _.abusive, _.cheating, _.scam, _.inappropriateContent, _.evasion, _.impersonation, _.underage, _.bitsViolation],
                        type: N.MultipleChoice,
                        value: "video general report reason"
                    }
                },
                U = {
                    content: {
                        getTitle: L.reportMessage,
                        getLabel: R.contentGeneral,
                        items: [_.revealPersonalInfo, _.evasion, _.spam, _.maliciousRaid, _.report_username, _.messaging_general, _.selfharm],
                        type: N.MultipleChoice,
                        value: "message report reason"
                    },
                    general: {
                        getTitle: L.reportMessage,
                        getLabel: R.content,
                        items: [_.report_emotes, _.violence, _.abusive, _.inappropriateContent, _.impersonation, _.underage, _.bitsViolation],
                        type: N.MultipleChoice,
                        value: "message general report reason"
                    }
                },
                P = a.__assign({}, U.content, {
                    getDescription: function() {
                        return Object(c.d)("Please note that we may review additional messages in this conversation to determine the context of your report.", "ReportModalWizard")
                    }
                }),
                B = {
                    content: {
                        getTitle: L.reportProfile,
                        getLabel: R.contentGeneral,
                        items: [_.revealPersonalInfo, _.inappropriateBadge, _.inappropriateExtension, _.noModeration, _.profile_general, _.report_ip, _.violateDevAgreement, _.selfharm],
                        type: N.MultipleChoice,
                        value: "profile report reason"
                    },
                    general: {
                        getTitle: L.reportProfile,
                        getLabel: R.content,
                        items: [_.report_username, _.violence, _.abusive, _.scam, _.inappropriateContent, _.evasion, _.impersonation, _.underage, _.bitsViolation],
                        type: N.MultipleChoice,
                        value: "profile general report reason"
                    }
                },
                V = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username}'s Room", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.identifyUser,
                    items: [_.report_channelOwner, _.report_member],
                    value: "room report user",
                    type: N.MultipleChoice
                },
                W = {
                    getTitle: L.tellUsMore,
                    items: [_.input_description],
                    type: N.Confirm,
                    value: "tell us more"
                },
                H = {
                    banEvasion: a.__assign({}, W, {
                        items: [_.input_usernames, _.input_description],
                        value: "ban evasion tell us more"
                    }),
                    socialMedia: a.__assign({}, W, {
                        items: [_.input_link, _.input_connection, _.input_description],
                        nextCard: j.socialMedia,
                        value: "social media tell us more"
                    })
                },
                G = {
                    content: {
                        getTitle: L.reportAbusive,
                        getLabel: R.relevantStatements,
                        items: [_.hateSpeech, _.harassment, _.abusiveViolence, _.commitingViolence, _.swatting, _.personalInfo],
                        type: N.MultipleChoice,
                        value: "abuse type"
                    },
                    violence: {
                        getTitle: function(e) {
                            return Object(c.d)("Report {username} for Violence or Threats", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        getLabel: function() {
                            return Object(c.d)("Are the threats or actions directed at you or someone else?", "ReportModalWizard")
                        },
                        items: [_.threat_me, _.threat_person, _.threat_group, _.threat_selfharm],
                        type: N.MultipleChoice,
                        value: "violence type"
                    }
                },
                Y = {
                    identifyLocation: {
                        getTitle: function(e) {
                            return Object(c.d)("Report {username} for something else...", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        getLabel: function() {
                            return Object(c.d)("Where did the problem happen?", "ReportModalWizard")
                        },
                        items: [_.location_onTwitch, _.location_anotherSite, _.location_TwitchEvent],
                        type: N.MultipleChoice,
                        value: "off-site conduct location"
                    },
                    externalSite: {
                        getTitle: function(e) {
                            return Object(c.d)("Report {username}'s Conduct on Another Site or Service", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        getLabel: R.thisPersonIs,
                        getDescription: function() {
                            return Object(c.d)("Please note that incidents reported through this form must involve Twitch community members. If possible, please submit a report to the site or service where the incident occurred as well.", "ReportModalWizard")
                        },
                        items: [_.external_incitingRaids, _.external_threatening, _.external_harassment],
                        type: N.MultipleChoice,
                        nextCard: H.socialMedia,
                        value: "external site conduct"
                    },
                    external_violence: a.__assign({}, G.violence, {
                        items: [_.threat_me, _.threat_person, _.threat_group],
                        nextCard: H.socialMedia
                    }),
                    external_abusive: a.__assign({}, G.content, {
                        items: [_.hateSpeech, _.harassment, _.external_abusiveViolence, _.external_commitingViolence, _.swatting, _.personalInfo],
                        nextCard: H.socialMedia
                    })
                },
                z = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username}'s Spam or Malicious Links", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.contentGeneral,
                    items: [_.spam_bot, _.spam_scam, _.spam_repeated],
                    type: N.MultipleChoice,
                    value: "spam type"
                },
                q = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username} for Inappropriate Content", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.relevantStatements,
                    items: [_.inappropriate_game, _.gory, _.sexuallyViolent, _.childAnimal, _.pornographic, _.suggestive, _.nudity, _.other],
                    type: N.MultipleChoice,
                    value: "inappropriate content type"
                },
                X = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username} for Evading a Ban", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(c.d)("What kind of ban are they evading?", "ReportModalWizard")
                    },
                    value: "ban type",
                    items: [_.evasion_chat, _.evasion_sitewide, _.evasion_messaging],
                    type: N.MultipleChoice,
                    nextCard: H.banEvasion
                },
                Q = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username} for Impersonation", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(c.d)("Who is being impersonated?", "ReportModalWizard")
                    },
                    getDescription: function() {
                        return Object(c.d)("Parody, cosplay, and other portrayals without the intent to deceive or defraud are allowed under Twitch's Community Guidelines. If you would still like to submit a report, please continue.", "ReportModalWizard")
                    },
                    items: [_.impersonation_me, _.impersonation_brand, _.impersonation_other],
                    type: N.MultipleChoice,
                    value: "impersonation type"
                },
                K = x,
                $ = W,
                J = F,
                Z = {
                    video: A.identifyUser,
                    whisper: P,
                    chat: U.content,
                    profile: B.content,
                    room: V,
                    "somewhere else": Y.identifyLocation,
                    streamer: A.content,
                    "someone else in video": A.content,
                    "someone in chat": U.content,
                    general_video: A.general,
                    general_messaging: U.general,
                    general_profile: B.general,
                    "channel owner": B.content,
                    "community member": U.content,
                    "on twitch": B.content,
                    "another site": Y.externalSite,
                    "twitch event": j.twitchEvent,
                    "brigading/raids": H.socialMedia,
                    threatening: Y.external_violence,
                    "hateful/harassing": Y.external_abusive,
                    "external site; threatening violence": Y.external_violence,
                    "external site; committing violence": Y.external_violence,
                    "external site; scam": H.socialMedia,
                    "ban evasion": X,
                    spam: z,
                    hateful: G.content,
                    impersonation: Q,
                    "violence/threats": G.violence,
                    "threatening violence": G.violence,
                    "committing violence": G.violence,
                    abusive: G.content,
                    "inappropriate content": q,
                    "intellectual property": j.legal,
                    "violating developer agreement": j.legal
                },
                ee = {
                    selfharm: j.selfharm,
                    harm: j.violence,
                    other: J
                },
                te = {
                    CHANNEL_FEED_POST_REPORT: B.content,
                    COMMUNITY_REPORT: B.content,
                    CHAT_REPORT: U.content,
                    CLIP_REPORT: A.content,
                    EVENT_REPORT: B.content,
                    EXTENSION_REPORT: B.content,
                    LIVE_UP_REPORT: B.content,
                    ROOM_REPORT: V,
                    WHISPER_REPORT: P,
                    VOD_COMMENT_REPORT: U.content
                },
                ne = "report-wizard-back",
                ie = "report-wizard-close",
                re = "report-wizard-next",
                ae = "report-wizard-submit",
                oe = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            currentCard: t.props.currentCard || te[t.props.reportContentType] || K,
                            prevCards: [],
                            currentSelection: null,
                            prevSelections: [],
                            displacedSelections: [],
                            userTextInput: {},
                            error: "",
                            reportReason: t.props.reportReason || "",
                            modalCloseTracked: !1,
                            targetUnknown: !1,
                            reportContext: t.props.reportContentType
                        }, t.renderPrimer = function() {
                            return o.createElement(y.Ya, {
                                margin: {
                                    top: 1
                                }
                            }, o.createElement(y.W, null, Object(c.d)("We are going to ask you a few questions to help us investigate your report quickly and accurately.", "ReportModalWizard")))
                        }, t.renderButtons = function() {
                            var e = Object(c.d)("Close", "ReportModalWizard"),
                                n = t.handleClose,
                                i = ie,
                                r = !1,
                                a = t.state.prevCards.length ? t.renderBack() : null;
                            switch (t.state.currentCard.type) {
                                case N.MultipleChoice:
                                    e = Object(c.d)("Next", "ReportModalWizard"), n = t.handleNext, i = re, r = !t.state.currentSelection;
                                    break;
                                case N.Confirm:
                                    e = Object(c.d)("Submit Report", "ReportModalWizard"), n = t.handleSubmit, r = !t.state.userTextInput, i = ae
                            }
                            return o.createElement(y.Ya, null, a, o.createElement(y.z, {
                                onClick: n,
                                disabled: r,
                                "data-test-selector": i
                            }, o.createElement(y.Ya, {
                                padding: {
                                    x: 1
                                }
                            }, e)))
                        }, t.renderBack = function() {
                            return o.createElement(y.Ya, {
                                margin: {
                                    right: 1
                                },
                                display: y.X.InlineBlock
                            }, o.createElement(y.z, {
                                type: y.F.Hollow,
                                onClick: t.handleBack,
                                "data-test-selector": ne
                            }, o.createElement(y.Ya, {
                                padding: {
                                    x: 1
                                }
                            }, Object(c.d)("Back", "ReportModalWizard"))))
                        }, t.getTitle = function() {
                            return t.state.currentCard.getTitle && t.props.targetUser.displayName && t.props.targetUser.id ? t.state.targetUnknown ? t.state.currentCard.getTitle(Object(c.d)("Another User", "ReportModalWizard")) : t.state.currentCard.getTitle(t.props.targetUser.displayName) : t.state.targetUnknown ? Object(c.d)("Report User", "ReportModalWizard") : t.props.title
                        }, t.handleClose = function() {
                            t.setState({
                                modalCloseTracked: !0
                            }, function() {
                                return t.props.trackClose(M.Finish, t.state.currentCard.value)
                            }), t.props.onClose()
                        }, t.handleNext = function() {
                            if (t.state.currentSelection && t.state.currentSelection.value) {
                                var e = t.state.currentCard,
                                    n = t.state.prevCards.concat(e),
                                    i = t.state.prevSelections.concat(t.state.currentSelection),
                                    r = t.state.displacedSelections[t.state.displacedSelections.length - 1],
                                    a = t.state.currentSelection.differentTarget || t.state.targetUnknown,
                                    o = t.state.currentSelection.reportContext || t.state.reportContext,
                                    s = e.nextCard || $;
                                Z[t.state.currentSelection.value] && (s = Z[t.state.currentSelection.value]);
                                var l = t.state.currentSelection.reportReason || t.state.reportReason,
                                    c = s.type === N.Info;
                                t.setState({
                                    currentCard: s,
                                    reportReason: l,
                                    prevCards: c ? [] : n,
                                    prevSelections: i,
                                    targetUnknown: a,
                                    currentSelection: r || null,
                                    displacedSelections: t.state.displacedSelections.slice(0, -1),
                                    reportContext: o
                                }, function() {
                                    return t.trackNavigation(T.Next, e.value)
                                })
                            }
                        }, t.createReportDescription = function() {
                            return "" + (t.state.reportContext !== t.props.reportContentType ? "report context: " + t.props.reportContentType + "\n\n" : "") + t.state.prevSelections.map(function(e) {
                                if (!e.omitFromDescription) return e.value
                            }).filter(function(e) {
                                return !!e
                            }).join(" > ") + "\n\n" + Object.keys(t.state.userTextInput).map(function(e) {
                                return e + ": " + t.state.userTextInput[e]
                            }).join("\n")
                        }, t.requiredInputsNonEmpty = function() {
                            if (t.state.currentCard.items) return 0 === t.state.currentCard.items.filter(function(e) {
                                if (e.type !== r.Textarea || !e.required) return !1;
                                var n = t.state.userTextInput[e.value],
                                    i = n && 0 === n.trim().length;
                                return !n || i
                            }).length
                        }, t.handleSubmit = function() {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var e, t, n, i, r = this;
                                return a.__generator(this, function(a) {
                                    switch (a.label) {
                                        case 0:
                                            return e = Object(c.d)("Additional information is required.", "ReportModalWizard"), this.requiredInputsNonEmpty() ? (t = this.state.reportReason || "other", n = this.createReportDescription(), [4, this.props.onSubmit(t, n, this.state.reportContext)]) : [3, 2];
                                        case 1:
                                            switch (a.sent(), this.props.submitStatus) {
                                                case D.a.FormError:
                                                    this.setState({
                                                        error: e
                                                    });
                                                    break;
                                                case D.a.Success:
                                                    i = J, ee[t] && (i = ee[t]), this.state.currentCard.nextCard && (i = this.state.currentCard.nextCard), this.setState({
                                                        currentCard: i,
                                                        prevCards: [],
                                                        prevSelections: [],
                                                        currentSelection: null,
                                                        displacedSelections: [],
                                                        userTextInput: {},
                                                        error: ""
                                                    }, function() {
                                                        return r.trackNavigation(T.Submit)
                                                    });
                                                    break;
                                                case D.a.UserError:
                                                    this.setState({
                                                        error: Object(c.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportModalWizard")
                                                    });
                                                    break;
                                                case D.a.MutationError:
                                                default:
                                                    this.setState({
                                                        error: Object(c.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportModalWizard")
                                                    })
                                            }
                                            return [3, 3];
                                        case 2:
                                            this.props.onError(D.a.FormError), this.setState({
                                                error: e
                                            }), a.label = 3;
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }, t.handleBack = function() {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var e, t, n, i, r, o = this;
                                return a.__generator(this, function(a) {
                                    return e = this.state.currentCard, t = this.state.prevCards[this.state.prevCards.length - 1], n = this.state.prevSelections[this.state.prevSelections.length - 1], i = !n.differentTarget && this.state.targetUnknown, r = this.state.displacedSelections, this.state.currentSelection && (r = r.concat(this.state.currentSelection)), t && n && this.setState({
                                        currentCard: t,
                                        currentSelection: n,
                                        displacedSelections: r,
                                        prevCards: this.state.prevCards.slice(0, -1),
                                        prevSelections: this.state.prevSelections.slice(0, -1),
                                        error: "",
                                        targetUnknown: i
                                    }, function() {
                                        return o.trackNavigation(T.Back, e.value)
                                    }), [2]
                                })
                            })
                        }, t.handleTextInput = function(e, n) {
                            var i = t.state.userTextInput;
                            i[e] = n, t.setState({
                                userTextInput: i
                            })
                        }, t.handleSelection = function(e) {
                            if (t.state.currentCard.items && e !== t.state.currentSelection) {
                                var n = t.state.targetUnknown;
                                if (n) n = 0 === t.state.displacedSelections.filter(function(e) {
                                    return e.differentTarget
                                }).length;
                                var i = t.state.reportContext;
                                (t.state.displacedSelections.filter(function(e) {
                                    return e.reportContext
                                }).length || t.state.currentSelection && t.state.currentSelection.reportContext) && (i = t.props.reportContentType), t.setState({
                                    currentSelection: e,
                                    displacedSelections: [],
                                    userTextInput: {},
                                    targetUnknown: n,
                                    reportContext: i
                                })
                            }
                        }, t.trackNavigation = function(e, n) {
                            t.props.trackAction(e, n, t.state.currentCard.value)
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentWillUnmount = function() {
                        this.state.modalCloseTracked || this.props.trackClose(M.Close, this.state.currentCard.value)
                    }, t.prototype.render = function() {
                        var e = this.state.currentCard.type === N.Info && this.state.currentCard.blockPrompt ? o.createElement(E, {
                                targetUser: this.props.targetUser,
                                onBlock: this.props.onBlock,
                                onUnblock: this.props.onUnblock,
                                userBlocked: this.props.userBlocked
                            }) : null,
                            t = this.state.error ? o.createElement(y.Fb, {
                                fullWidth: !0,
                                margin: {
                                    bottom: 1
                                },
                                padding: 1,
                                className: "reporting__error-container"
                            }, this.state.error) : null,
                            n = this.state.prevCards.length || this.state.currentCard.type === N.Info ? null : this.renderPrimer();
                        return o.createElement(y.Fb, {
                            className: "reporting-wizard",
                            display: y.X.Flex,
                            margin: {
                                x: 1
                            },
                            flexDirection: y.Aa.Column,
                            fullHeight: !0,
                            "data-test-card-value": this.state.currentCard.value
                        }, t, o.createElement(y.W, {
                            bold: !0,
                            fontSize: y.Ca.Size4
                        }, this.getTitle()), n, o.createElement(y.Ya, {
                            margin: {
                                y: 1
                            }
                        }, o.createElement(w, {
                            currentCard: this.state.currentCard,
                            currentSelection: this.state.currentSelection,
                            targetUser: this.props.targetUser,
                            targetUserID: this.props.targetUser.id,
                            onChangeRadio: this.handleSelection,
                            onChangeText: this.handleTextInput,
                            userTextInputs: this.state.userTextInput,
                            error: this.props.submitStatus === D.a.FormError && !!this.state.error
                        }), e), this.renderButtons())
                    }, t
                }(o.Component),
                se = n("s8Ou"),
                le = n("0hI/");
            n.d(t, "c", function() {
                    return T
                }), n.d(t, "a", function() {
                    return M
                }), n.d(t, "b", function() {
                    return de
                }),
                function(e) {
                    e.Close = "close", e.Open = "open", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
                }(I || (I = {})),
                function(e) {
                    e.Back = "back", e.Close = "close", e.Open = "open", e.Next = "next", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
                }(T || (T = {})),
                function(e) {
                    e.Close = "close", e.Finish = "finish"
                }(M || (M = {}));
            var ce = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.handleSubmit = function(e, t, i) {
                        return a.__awaiter(n, void 0, void 0, function() {
                            var n, r, o, s, l = this;
                            return a.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (n = i === f.N.WHISPER_REPORT ? i : this.props.reportContext.contentType, r = f.N[n], null === (o = {
                                                description: t,
                                                reason: e,
                                                content: r,
                                                contentID: this.props.reportContext.contentID,
                                                extra: this.props.reportContext.extra,
                                                targetID: this.props.data.targetUser.id
                                            }).targetID) return this.setState({
                                            submitStatus: D.a.UserError
                                        }), [2];
                                        a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.props.reportUser(Object(m.a)(o))];
                                    case 2:
                                        return a.sent(), this.setState({
                                            submitStatus: D.a.Success
                                        }, function() {
                                            l.state.showWizard || l.trackAction(I.Submit)
                                        }), [3, 4];
                                    case 3:
                                        return s = a.sent(), c.k.error(s, "ReportUser Mutation failed."), this.setState({
                                            submitStatus: D.a.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, n.handleChildError = function(e) {
                        return n.setState({
                            submitStatus: e
                        })
                    }, n.handleClose = function() {
                        n.props.onClose && n.props.onClose(n.state.submitStatus, n.state.userBlocked)
                    }, n.onBlock = function() {
                        n.props.blockUserMutation(n.props.data.targetUser.id, void 0, void 0, a.__assign({}, n.props.sessionUser, {
                            __typename: "User"
                        })), n.setState({
                            userBlocked: !0
                        })
                    }, n.onUnblock = function() {
                        n.props.unblockUserMutation(n.props.data.targetUser.id, a.__assign({}, n.props.sessionUser, {
                            __typename: "User"
                        })), n.setState({
                            userBlocked: !1
                        })
                    }, n.trackOpen = function(e) {
                        n.state.openEventSent || (n.state.showWizard ? n.trackWizardAction(T.Open, void 0, e) : n.trackAction(I.Open), n.setState({
                            openEventSent: !0
                        }))
                    }, n.trackClose = function(e, t) {
                        n.state.closeEventSent || (n.state.showWizard ? n.trackWizardAction(T.Close, t, void 0, e) : n.trackAction(I.Close), n.setState({
                            closeEventSent: !0
                        }))
                    }, n.trackWizardAction = function(e, t, i, r) {
                        c.p.tracking.track(v.SpadeEventType.ReportWizardFlowAction, {
                            ui_context: n.props.reportContext.contentType,
                            target_user_id: n.props.reportContext.targetUserID,
                            report_sent: n.state.submitStatus === D.a.Success,
                            modal_type: "wizard_v1",
                            extra_user_id: n.props.reportContext.additionalTrackingID,
                            action: e,
                            close_type: r,
                            report_session_id: n.reportID,
                            current_step: t,
                            navigated_to: i
                        })
                    }, n.trackAction = function(e) {
                        c.p.tracking.track(v.SpadeEventType.ReportFlowAction, {
                            ui_context: n.props.reportContext.contentType,
                            target_user_id: n.props.reportContext.targetUserID,
                            report_sent: n.state.submitStatus === D.a.Success,
                            extra_user_id: n.props.reportContext.additionalTrackingID,
                            action: e,
                            report_session_id: n.reportID
                        })
                    }, n.reportID = Object(h.a)();
                    var i = c.p.experiments.getAssignment(g.b.NewReportingWizard);
                    return n.state = {
                        submitStatus: D.a.Unsubmitted,
                        showWizard: "yes" === i,
                        openEventSent: !1,
                        closeEventSent: !1,
                        userBlocked: !1
                    }, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.trackOpen()
                }, t.prototype.componentWillUnmount = function() {
                    this.handleClose(), this.state.showWizard || this.trackClose()
                }, t.prototype.render = function() {
                    if (this.props.data.error) return o.createElement(y.Ya, {
                        margin: {
                            bottom: 1
                        }
                    }, o.createElement(y.W, {
                        fontSize: y.Ca.Size5
                    }, Object(c.d)("There was an unexpected error. Please refresh the page and try again", "ReportUser")));
                    if (this.props.data.loading) return o.createElement(y.jb, {
                        lineCount: 3
                    });
                    if (this.props.data.targetUser) {
                        var e = {
                            onClose: this.handleClose,
                            onError: this.handleChildError,
                            onSubmit: this.handleSubmit,
                            reportContentType: this.props.reportContext.contentType,
                            submitStatus: this.state.submitStatus,
                            title: this.props.title,
                            defaultDescription: this.props.defaultDescription
                        };
                        return this.state.showWizard ? this.props.data.loading ? o.createElement(y.ab, null) : o.createElement(oe, a.__assign({}, e, {
                            user: this.props.sessionUser,
                            onBlock: this.onBlock,
                            onUnblock: this.onUnblock,
                            targetUser: this.props.data.targetUser,
                            trackAction: this.trackWizardAction,
                            trackClose: this.trackClose,
                            userBlocked: this.userBlocked
                        })) : o.createElement(D.b, a.__assign({}, e, {
                            targetUser: this.props.data.targetUser
                        }))
                    }
                    return o.createElement(y.Ya, {
                        margin: {
                            bottom: 1
                        }
                    }, o.createElement(y.W, {
                        fontSize: y.Ca.Size5
                    }, Object(c.d)("The user you are trying to report does not exist", "ReportUser")))
                }, Object.defineProperty(t.prototype, "userBlocked", {
                    get: function() {
                        var e = this;
                        return !!(this.props.data.currentUser && this.props.data.currentUser.blockedUsers && this.props.data.currentUser.blockedUsers.find(function(t) {
                            return !!t && t.id === e.props.reportContext.targetUserID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(o.Component);
            var de = Object(l.compose)(Object(d.a)(se, {
                name: "reportUser"
            }), Object(d.a)(le, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: e.reportContext.targetUserID
                        }
                    }
                }
            }), Object(b.b)("ReportUser", {
                autoReportInteractive: !0
            }), Object(u.a)(), Object(p.a)(), Object(s.connect)(function(e) {
                return {
                    sessionUser: e.session.user
                }
            }, null))(ce)
        },
        djOf: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage_ChannelInfoBar_EditButton"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isGlobalMod"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSiteAdmin"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 114
                }
            };
            n.loc.source = {
                body: "query ChannelPage_ChannelInfoBar_EditButton {\ncurrentUser {\nid\nlogin\nroles {\nisStaff\nisGlobalMod\nisSiteAdmin\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        dlEs: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = n("/MKj"),
                r = n("fvjX"),
                a = n("1/iK"),
                o = n("y5D0"),
                s = n("2bi+"),
                l = n("mrSG"),
                c = n("TSYQ"),
                d = n("q1tI"),
                u = n("/7QA"),
                p = n("ZDlU"),
                m = n("yR8l"),
                h = n("V+GM"),
                g = n("/0dD"),
                f = n("76Lv"),
                v = n("DMoW"),
                b = n("NvVO"),
                k = n("2xye"),
                y = n("zxEZ"),
                C = n("tuvy"),
                S = n("GnwI"),
                E = n("+Jjl"),
                N = n("ngVu"),
                O = n("f3GI"),
                _ = n("WOQ1"),
                w = n("oJmH"),
                D = n("vRsq"),
                I = n("0OKo"),
                T = n("pfAL"),
                M = n("Ue10"),
                R = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return l.__extends(t, e), t.prototype.render = function() {
                        return this.props.firstPageLoaded ? d.createElement(M.Ya, {
                            padding: {
                                y: 2
                            }
                        }, d.createElement(T.a, {
                            channelLogin: this.props.channelLogin,
                            currentlyWatchingClipSlug: this.props.currentClipSlug,
                            tracking: {
                                location: this.props.tracking.location,
                                medium: this.props.tracking.medium
                            },
                            criteria: {
                                limit: 30,
                                range: D.b.Month
                            }
                        })) : null
                    }, t
                }(d.Component),
                L = Object(w.compose)(Object(I.a)("BelowFoldRecommendations", {
                    autoReportInteractive: !0
                }))(R);
            var F, j = Object(i.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                })(L),
                x = n("RCUI"),
                A = n("Uk/b"),
                U = n("h92S");
            n("vz3z");
            ! function(e) {
                e.TotalViews = "total-views"
            }(F || (F = {}));
            var P = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return l.__extends(t, e), t.prototype.render = function() {
                        return d.createElement(M.Fb, {
                            background: M.r.Base,
                            border: !0
                        }, d.createElement(M.Fb, {
                            alignItems: M.f.Center,
                            breakpointMedium: {
                                flexDirection: M.Aa.Row
                            },
                            display: M.X.Flex,
                            flexWrap: M.Ba.NoWrap,
                            flexDirection: M.Aa.Column,
                            justifyContent: M.Xa.Start
                        }, d.createElement(M.Fb, {
                            flexGrow: 1,
                            fullWidth: !0,
                            fullHeight: !0,
                            overflow: M.db.Hidden,
                            padding: 1
                        }, d.createElement(U.a, {
                            video: this.props.clip
                        })), d.createElement(M.Fb, {
                            alignItems: M.f.Center,
                            className: "clip-info-bar__action-container",
                            display: M.X.Flex,
                            flexDirection: M.Aa.Row,
                            flexShrink: 0,
                            fullHeight: !0,
                            padding: 1
                        }, this.props.clip && d.createElement(M.Fb, {
                            alignItems: M.f.Center,
                            "data-test-selector": F.TotalViews,
                            display: M.X.Flex,
                            color: M.O.Alt2,
                            flexGrow: 1,
                            fontSize: M.Ca.Size5
                        }, d.createElement(M.Eb, {
                            value: Object(u.f)(this.props.clip.viewCount),
                            label: Object(u.d)("Total Views", "ClipInfoBar"),
                            icon: M.ub.GlyphViews
                        })), d.createElement(M.Ya, {
                            display: M.X.Flex,
                            flexGrow: 0
                        }, this.props.clip && d.createElement(M.Ya, {
                            padding: {
                                x: 1
                            }
                        }, d.createElement(A.a, {
                            clip: this.props.clip,
                            balloonDirection: M.v.TopRight,
                            buttonType: M.F.Hollow
                        })), d.createElement(x.a, {
                            clip: this.props.clip
                        })))))
                    }, t
                }(d.Component),
                B = Object(S.b)("ClipInfoBar", {
                    autoReportInteractive: !0
                })(P),
                V = n("aCAx"),
                W = n("yI+y"),
                H = n("jsEL"),
                G = n("8ssJ"),
                Y = n("/HY+"),
                z = n("oKCn"),
                q = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.getMiniPlayerTitle = function() {
                            return n.props.clip && n.props.clip.title || Object(u.d)("Watching clip", "ClipsWatchPagePlayerPresentation")
                        }, n.getMiniPlayerURL = function() {
                            return n.props.broadcasterLogin + "/clip/" + n.props.slug
                        }, n.onClipsModerationOpen = function(e) {
                            if (e === z.d.ReportUser) {
                                var t = n.props.clip && n.props.clip.broadcaster ? n.props.clip.broadcaster.id : "",
                                    i = n.props.clip && n.props.clip.curator ? n.props.clip.curator.id : "";
                                n.props.showModal(Y.a, {
                                    title: Object(u.d)("Report this Clip", "ClipsWatchPagePlayerPresentation"),
                                    reportContext: {
                                        contentType: v.N.CLIP_REPORT,
                                        contentID: n.props.slug,
                                        targetUserID: t,
                                        additionalTrackingID: i
                                    },
                                    onClose: n.props.closeModal
                                })
                            }
                            e === z.d.Delete && n.props.showModal(H.d, {
                                slug: n.props.slug,
                                onClose: n.props.closeModal
                            }), e === z.d.DeleteAll && n.props.showModal(H.e, {
                                slug: n.props.slug,
                                onClose: n.props.closeModal
                            })
                        }, n.state = {
                            theatreFullscreenGroup: "control"
                        }, n
                    }
                    return l.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.setTheatreFullscreenGroup()
                    }, t.prototype.render = function() {
                        return d.createElement(G.a, {
                            playerProps: l.__assign({
                                playerTypeOverride: z.f.ClipsWatchPage,
                                onClipsModerationOpen: this.onClipsModerationOpen,
                                fullscreenRef: Object(W.c)(this.state.theatreFullscreenGroup),
                                onFullscreenChange: W.b
                            }, this.props.playerProps),
                            disablePersistenceOnUnmount: !0,
                            miniPlayerTitle: this.getMiniPlayerTitle(),
                            miniPlayerContentRoute: this.getMiniPlayerURL()
                        })
                    }, t.prototype.setTheatreFullscreenGroup = function() {
                        return l.__awaiter(this, void 0, void 0, function() {
                            var e;
                            return l.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, Object(W.a)()];
                                    case 1:
                                        return e = t.sent(), this.setState({
                                            theatreFullscreenGroup: e
                                        }), [2]
                                }
                            })
                        })
                    }, t
                }(d.Component);
            var X = Object(i.connect)(null, function(e) {
                    return Object(r.bindActionCreators)({
                        showModal: V.d,
                        closeModal: V.c
                    }, e)
                })(q),
                Q = n("zFR8"),
                K = (n("L1N/"), -1),
                $ = 1,
                J = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.onVideoTimeChange = function(e) {
                            var t = Math.floor(e);
                            if (t !== n.state.lastVideoOffset) {
                                var i = n.getSourceVideoClipStartOffset();
                                n.setState({
                                    lastVideoOffset: t
                                }, function() {
                                    var e = t + i - $;
                                    n.props.onVideoTimeChange(e)
                                })
                            } else n.state.requestedVideoOffset === t && n.setState({
                                requestedVideoOffset: K
                            })
                        }, n.onPlayerSeekRequest = function(e) {
                            n.setState({
                                requestedVideoOffset: e
                            })
                        }, n.state = {
                            requestedVideoOffset: K,
                            lastVideoOffset: K
                        }, n
                    }
                    return l.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.reportInteractive(), this.setPageTitle()
                    }, t.prototype.componentDidUpdate = function() {
                        this.reportInteractive(), this.setPageTitle()
                    }, t.prototype.render = function() {
                        var e, t = this.getClip();
                        if (this.props.data.error || !this.props.data.loading && (!this.clipIsCreated() || this.clipBroadcasterDoesntMatchRoute())) return d.createElement(p.a, {
                            message: Object(u.d)("Whoops, Something went wrong. We could not find that clip.", "ClipsWatchPage")
                        });
                        var n = c("clips-watch-page__right-column", ((e = {})[Object(f.b)(g.a.Dark)] = this.props.theatreModeEnabled, e)),
                            i = {};
                        return this.state.requestedVideoOffset !== K && (i.nextVideoOffset = this.state.requestedVideoOffset), d.createElement(M.Ya, {
                            fullHeight: !0
                        }, d.createElement(O.a, {
                            currentPage: Object(C.b)() ? y.b.Videos : y.b.Clips,
                            ownerLogin: this.props.match.params.channelLogin,
                            theatreMode: this.props.theatreModeEnabled
                        }, d.createElement(_.a, null, d.createElement(X, {
                            broadcasterLogin: this.props.match.params.channelLogin,
                            slug: this.props.match.params.slugID,
                            clip: t,
                            playerProps: l.__assign({
                                clipSlug: this.props.match.params.slugID,
                                onSeek: this.onVideoTimeChange,
                                onVideoTimeChange: this.onVideoTimeChange
                            }, i)
                        })), d.createElement(B, {
                            clip: t
                        }), d.createElement(j, {
                            channelLogin: this.props.match.params.channelLogin,
                            currentClipSlug: this.props.match.params.slugID,
                            tracking: {
                                location: k.PageviewLocation.ClipsWatchPage,
                                medium: k.PageviewMedium.ClipsWatchPage
                            }
                        })), d.createElement(E.b, null, d.createElement(M.Fb, {
                            className: n,
                            background: M.r.Alt2,
                            display: M.X.Flex,
                            flexGrow: 0,
                            flexShrink: 0,
                            flexWrap: M.Ba.NoWrap,
                            overflow: M.db.Hidden,
                            fullHeight: !0
                        }, d.createElement(N.a, {
                            clip: t,
                            onPlayerSeekRequestHandler: this.onPlayerSeekRequest,
                            onShowLogin: this.props.onLoginClick
                        }))))
                    }, t.prototype.clipBroadcasterDoesntMatchRoute = function() {
                        return this.props.data.clip && this.props.data.clip.broadcaster && this.props.data.clip.broadcaster.login && this.props.data.clip.broadcaster.login.toLowerCase() !== this.props.match.params.channelLogin.toLowerCase()
                    }, t.prototype.getSourceVideoClipStartOffset = function() {
                        var e = this.getClip();
                        return e ? e.videoOffsetSeconds : 0
                    }, t.prototype.reportInteractive = function() {
                        this.props.data && !this.props.data.loading && this.props.latencyTracking.reportInteractive()
                    }, t.prototype.clipIsCreated = function() {
                        return this.props.data.clip && "" !== this.props.data.clip.id && this.props.data.clip.creationState && this.props.data.clip.creationState === v.n.CREATED
                    }, t.prototype.setPageTitle = function() {
                        this.props.data && this.props.data.clip && this.props.data.clip.broadcaster && u.p.setPageTitle(this.props.data.clip.broadcaster.displayName + " - " + this.props.data.clip.title)
                    }, t.prototype.getClip = function() {
                        if (!this.props.data.clip || "" === this.props.data.clip.id || !this.props.data.clip.broadcaster || !this.props.data.clip.curator) return null;
                        if (!this.props.data.clip.broadcaster.displayName || !this.props.data.clip.broadcaster.login || !this.props.data.clip.broadcaster.id) return null;
                        var e = {
                            displayName: this.props.data.clip.broadcaster.displayName,
                            login: this.props.data.clip.broadcaster.login,
                            id: this.props.data.clip.broadcaster.id
                        };
                        if (!this.props.data.clip.curator.displayName || !this.props.data.clip.curator.login || !this.props.data.clip.curator.id) return null;
                        var t = {
                                displayName: this.props.data.clip.curator.displayName,
                                login: this.props.data.clip.curator.login,
                                id: this.props.data.clip.curator.id
                            },
                            n = null;
                        return this.props.data.clip.game && (n = {
                            id: this.props.data.clip.game.id,
                            name: this.props.data.clip.game.name,
                            boxArtURL: this.props.data.clip.game.boxArtURL ? this.props.data.clip.game.boxArtURL : u.a.defaultBoxArtURL
                        }), {
                            id: this.props.data.clip.id,
                            title: this.props.data.clip.title,
                            game: n,
                            language: this.props.data.clip.language,
                            broadcaster: e,
                            slug: this.props.data.clip.slug,
                            viewCount: this.props.data.clip.viewCount,
                            curator: t,
                            createdAt: this.props.data.clip.createdAt,
                            url: this.props.data.clip.url,
                            videoOffsetSeconds: this.props.data.clip.videoOffsetSeconds ? this.props.data.clip.videoOffsetSeconds : 0,
                            video: this.props.data.clip.video ? {
                                id: this.props.data.clip.video.id
                            } : null,
                            durationSeconds: this.props.data.clip.durationSeconds
                        }
                    }, t
                }(d.Component),
                Z = Object(r.compose)(Object(m.a)(Q, {
                    options: function(e) {
                        return {
                            variables: {
                                slugID: e.match.params.slugID
                            }
                        }
                    }
                }), Object(S.b)("ClipsWatchPage", {
                    destination: b.a.ClipsWatchPage
                }), Object(h.a)({
                    location: k.PageviewLocation.ClipsWatchPage,
                    properties: function(e) {
                        var t = null,
                            n = null,
                            i = null,
                            r = null,
                            a = null;
                        return e.data.clip && e.data.clip.broadcaster && (t = e.data.clip.game ? e.data.clip.game.name : null, n = e.data.clip.language, i = e.data.clip.broadcaster.login, r = Number(e.data.clip.broadcaster.id), a = e.data.clip.id), {
                            channel: i,
                            channel_id: r,
                            vod_type: k.SpadeVideoBroadcastType.Clip,
                            vod_id: a,
                            game: t,
                            language: n
                        }
                    },
                    skip: function(e) {
                        return e.data.loading
                    }
                }))(J);
            var ee = Object(i.connect)(function(e) {
                return {
                    theatreModeEnabled: e.ui.theatreModeEnabled
                }
            }, function(e) {
                return Object(r.bindActionCreators)({
                    onLoginClick: function() {
                        return Object(o.e)(a.a.VODComment)
                    },
                    onVideoTimeChange: s.q
                }, e)
            })(Z);
            n.d(t, "ClipsWatchPage", function() {
                return ee
            })
        },
        e7rh: function(e, t, n) {},
        eAAt: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("kduP"),
                a = n("Ue10"),
                o = function(e) {
                    return i.createElement(a.Qa, {
                        margin: {
                            right: 1
                        },
                        overflow: a.db.Hidden,
                        flexShrink: 0
                    }, i.createElement(a.U, {
                        to: {
                            pathname: Object(r.c)(e.name),
                            state: {
                                content: "current_game",
                                medium: "twitch_channel"
                            }
                        },
                        "data-a-target": "stream-box-art-link"
                    }, i.createElement(a.I, {
                        src: e.boxArtURL,
                        alt: e.name,
                        aspect: a.p.Aspect3x4,
                        size: e.size
                    })))
                };
            n.d(t, "a", function() {
                return o
            })
        },
        eAdp: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "CreateVideoBookmark"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "CreateVideoBookmarkInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createVideoBookmark"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "videoBookmark"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 140
                }
            };
            n.loc.source = {
                body: "mutation CreateVideoBookmark($input: CreateVideoBookmarkInput!) {\ncreateVideoBookmark(input: $input){\nvideoBookmark{\nid\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ePQz: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("/MKj"),
                a = n("fvjX"),
                o = n("ZS2+"),
                s = n("1/iK"),
                l = n("aCAx"),
                c = n("y5D0"),
                d = n("kRBY"),
                u = n("wxwP"),
                p = n("/HY+"),
                m = n("q1tI"),
                h = n("oJmH"),
                g = n("wIs1"),
                f = n("/7QA"),
                v = n("eJ65"),
                b = n("yR8l"),
                k = n("eDVu"),
                y = n("0Log"),
                C = n("/aPz"),
                S = n("D7An"),
                E = n("DMoW"),
                N = n("gOYK"),
                O = n("d2C5"),
                _ = n("jSzL"),
                w = n("Ahlu"),
                D = n("mSxK"),
                I = n("ZLqn"),
                T = n("ybym"),
                M = n("eAAt"),
                R = n("0EKw"),
                L = n("5goO"),
                F = n("i4un"),
                j = n("T7Bf");
            var x = n("GnwI"),
                A = n("Ue10"),
                U = (n("uYye"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleLoginClick = function() {
                            t.props.login()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.renderCampaignMessage();
                        return e ? m.createElement(A.W, {
                            "data-test-selector": "drops-campaign-details"
                        }, e) : null
                    }, t.prototype.renderCampaignMessage = function() {
                        var e = this,
                            t = function(e) {
                                if (e && e.user && e.user.id) {
                                    var t = e.user.id,
                                        n = e.user.stream;
                                    if (!n || "live" !== n.type || !n.game || !n.game.activeDropCampaigns) return null;
                                    var i = !!n.isStreamDropsEnabled,
                                        r = !!n.game.self && !!n.game.self.isDropsLinked,
                                        a = "",
                                        o = n.game.activeDropCampaigns;
                                    return o.some(function(e) {
                                        return a = e.connectionURL, !!e.applicableChannels && 0 === e.applicableChannels.length
                                    }) ? {
                                        isGlobal: !0,
                                        campaignURL: a,
                                        isChannelLinked: i,
                                        isUserLinked: r
                                    } : o.some(function(e) {
                                        return !!e.applicableChannels && e.applicableChannels.some(function(e) {
                                            return e.id === t
                                        })
                                    }) ? {
                                        isGlobal: !1,
                                        campaignURL: a,
                                        isChannelLinked: i,
                                        isUserLinked: r
                                    } : null
                                }
                            }(this.props.dropsData);
                        return t ? t.isChannelLinked ? this.props.isLoggedIn ? t.isUserLinked ? Object(f.d)("<x:green>Drops enabled!</x:green> Watch for a chance to earn loot.", {
                            "x:green": function(e) {
                                return m.createElement(A.W, {
                                    type: A.Wb.Span,
                                    bold: !0,
                                    className: "drops-campaign-details__drops-success"
                                }, e)
                            }
                        }, "DropsCampaignDetails") : Object(f.d)("Enable in-game Drops with <x:link>Account Link.</x:link>", {
                            "x:link": function(e) {
                                return m.createElement(A.U, {
                                    to: t.campaignURL,
                                    targetBlank: !0
                                }, e)
                            }
                        }, "DropsCampaignDetails") : Object(f.d)("Enable in-game Drops with <x:link>Twitch Account.</x:link>", {
                            "x:link": function(t) {
                                return m.createElement(A.U, {
                                    onClick: e.handleLoginClick
                                }, t)
                            }
                        }, "DropsCampaignDetails") : Object(f.d)("Broadcaster has not enabled in-game Drops. <x:link>Learn More</x:link>", {
                            "x:link": function(e) {
                                return m.createElement(A.U, {
                                    to: "https://help.twitch.tv/customer/en/portal/articles/2754380-how-to-earn-drops",
                                    targetBlank: !0
                                }, e)
                            }
                        }, "DropsCampaignDetails") : null
                    }, t
                }(m.Component)),
                P = Object(a.compose)(Object(b.a)(j, {
                    name: "dropsData",
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                }), Object(x.b)("DropsCampaignDetails", {
                    autoReportInteractive: !0
                }))(U);
            var B, V = Object(r.connect)(function(e) {
                    return {
                        isLoggedIn: Object(d.f)(e)
                    }
                }, function(e) {
                    return Object(a.bindActionCreators)({
                        login: function() {
                            return Object(c.e)(s.a.DropsLoginButton)
                        }
                    }, e)
                })(P),
                W = n("dIU+"),
                H = n("RQ6e"),
                G = n("QjI3"),
                Y = n("0LAi"),
                z = n("4HIT"),
                q = n("kmde"),
                X = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.reportInteractive = function() {
                            t.props.data.user && t.props.latencyTracking.reportInteractive()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.reportInteractive()
                    }, t.prototype.componentDidUpdate = function(e) {
                        e.gameID && e.gameID !== this.props.gameID && this.props.data.refetch(), this.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = this.props.data.user;
                        if (!e || !e.stream || !e.stream.id) return null;
                        var t = null,
                            n = null;
                        return e.stream.tags && (t = e.stream.tags), e.stream && e.stream.game && e.stream.game.gameTags && (n = e.stream.game.gameTags), m.createElement(m.Fragment, null, t && m.createElement(Y.a, {
                            tags: t,
                            linkPath: z.a.PopularTag
                        }), n && m.createElement(Y.a, {
                            tags: n,
                            linkPath: z.a.DirectoryTag
                        }))
                    }, t
                }(m.Component),
                Q = Object(a.compose)(Object(x.b)("RealtimeStreamTagList"), Object(b.a)(q, {
                    options: function(e) {
                        return {
                            pollInterval: 6e5,
                            fetchPolicy: "cache-and-network",
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }))(X),
                K = n("djOf");
            ! function(e) {
                e.EditButton = "channel-info-bar-edit-button"
            }(B || (B = {}));
            var $, J = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        if (!(this.props.isLoggedIn && this.props.firstPageLoaded && this.props.channelLogin && this.props.data && this.props.data.currentUser)) return null;
                        var e = this.props.data.currentUser;
                        return e.login === this.props.channelLogin || e.roles && (e.roles.isStaff || e.roles.isSiteAdmin || e.roles.isGlobalMod) ? m.createElement(A.Ya, {
                            margin: {
                                left: 1
                            }
                        }, m.createElement(A.z, {
                            type: A.F.Text,
                            icon: A.ub.Edit,
                            onClick: this.props.onClick,
                            "data-test-selector": B.EditButton
                        }, Object(f.d)("Edit", "ChannelInfoBar"))) : null
                    }, t
                }(m.Component),
                Z = Object(b.a)(K, {
                    skip: function(e) {
                        return !e.firstPageLoaded || !e.isLoggedIn
                    }
                })(J),
                ee = (n("rhXE"), n("5in9"));
            ! function(e) {
                e.ReportButton = "channel-info-bar-report-button", e.MoreButton = "channel-info-bar-more-button", e.MoreBalloon = "channel-info-bar-more-balloon", e.TeamName = "channel-info-bar-team-name", e.TitleText = "channel-info-bar-title-text", e.ChannelInfoBarWrapper = "channel-info-bar-wrapper"
            }($ || ($ = {}));
            var te = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.getGame = function() {
                            var e = t.props.userData.user;
                            if (e) return e.stream && e.stream.id ? e.stream.game || void 0 : e.lastBroadcast && e.lastBroadcast.game && e.lastBroadcast.game.id ? e.lastBroadcast.game : void 0
                        }, t.getTitle = function() {
                            var e = t.props.userData.user;
                            return e && e.stream && e.stream.title ? e.stream.title : e && e.lastBroadcast && e.lastBroadcast.title ? e.lastBroadcast.title : ""
                        }, t.renderGame = function() {
                            var e = t.getGame();
                            return e && e.name ? m.createElement(R.a, {
                                name: e.name
                            }) : null
                        }, t.renderGameBoxArt = function() {
                            var e = t.getGame(),
                                n = e && e.name ? e.name : "",
                                i = e && e.boxArtURL ? e.boxArtURL : "";
                            return e && n && i ? m.createElement(M.a, {
                                name: n,
                                boxArtURL: i,
                                size: A.J.Size6
                            }) : null
                        }, t.renderTeam = function() {
                            var e = t.props.userData.user;
                            return e && e.primaryTeam ? m.createElement(L.a, {
                                "data-test-selector": $.TeamName,
                                name: e.primaryTeam.name,
                                displayName: e.primaryTeam.displayName
                            }) : null
                        }, t.handleReportChannelClick = function() {
                            if (t.props.isLoggedIn) {
                                if (!t.props.userData || !t.props.userData.user || !t.props.userData.user.id) return;
                                t.props.showReportUserModal({
                                    onClose: t.handleReportModalClose,
                                    reportContext: {
                                        contentType: E.N.USER_REPORT,
                                        targetUserID: t.props.userData.user.id
                                    },
                                    title: Object(f.d)("Report {channelLogin}", {
                                        channelLogin: t.props.channelLogin
                                    }, "ReportUserModal")
                                })
                            } else t.props.login()
                        }, t.handleEditButtonClicked = function() {
                            t.props.showEditBroadcastModal({
                                channelLogin: t.props.channelLogin
                            })
                        }, t.handleReportModalClose = function(e) {
                            (e === H.a.MutationError || e === H.a.Success) && t.props.history.push("/")
                        }, t.maybeShowBrowserNotificationsUpsell = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return !f.m.get(D.b, !1) && Object(O.a)() && Object(_.c)() && f.p.experiments.getAssignment(S.b.BrowserNotificationsUpsell) === D.a ? [4, N.a.hasPushSubscription()] : [3, 3];
                                        case 1:
                                            return e.sent() ? [3, 3] : (f.m.set(D.b, !0), this.props.showBrowserNotificationsUpsellModal(), [4, N.a.userSubscribe(w.a.Channel)]);
                                        case 2:
                                            e.sent(), this.props.closeBrowserNotificationsUpsellModal(), e.label = 3;
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                        this.props.userData.error || this.props.userData.loading || this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        if (this.props.channelIsHosting) return null;
                        var e = this.getTitle(),
                            t = this.props.userData.user,
                            n = t && t.profileViewCount ? t.profileViewCount : 0,
                            i = Object(F.d)(),
                            r = null;
                        i && (r = m.createElement(A.Ya, {
                            display: A.X.Flex,
                            flexWrap: A.Ba.NoWrap,
                            justifyContent: A.Xa.Between
                        }, m.createElement(A.Ya, null, m.createElement(W.a, {
                            channelLogin: this.props.channelLogin,
                            onFollow: this.maybeShowBrowserNotificationsUpsell,
                            followUIType: W.b.IconAndText,
                            unfollowUIType: W.b.IconOnly,
                            balloonDirection: A.v.TopRight,
                            useContextualModals: !0
                        })), m.createElement(A.Ya, {
                            className: "channel-info-bar__sub-button-wrapper"
                        }, m.createElement(G.a, {
                            channelLogin: this.props.channelLogin,
                            balloonDirection: A.v.TopRight
                        }))));
                        var a = this.getGame();
                        return m.createElement(A.Fb, {
                            className: "channel-info-bar",
                            "data-test-selector": $.ChannelInfoBarWrapper,
                            display: A.X.Flex,
                            flexWrap: A.Ba.Wrap,
                            flexDirection: i ? A.Aa.Column : void 0,
                            justifyContent: A.Xa.Between,
                            padding: 1,
                            border: !0,
                            borderRadius: {
                                bottomLeft: A.x.Large,
                                bottomRight: A.x.Large
                            },
                            breakpointLarge: {
                                padding: {
                                    x: 1,
                                    top: 1,
                                    bottom: 0
                                }
                            }
                        }, m.createElement(A.Ya, {
                            className: "channel-info-bar__content-container",
                            display: A.X.Flex,
                            justifyContent: A.Xa.Between,
                            margin: {
                                bottom: 1
                            }
                        }, m.createElement(A.Ya, {
                            overflow: A.db.Hidden
                        }, m.createElement(A.G, {
                            row: !0
                        }, this.renderGameBoxArt(), m.createElement(A.H, {
                            overflow: A.db.Hidden
                        }, m.createElement(A.Ya, {
                            margin: {
                                bottom: .5,
                                right: 2
                            },
                            ellipsis: !0
                        }, m.createElement(A.W, {
                            type: A.Wb.Span,
                            fontSize: A.Ca.Size4,
                            "data-a-target": "stream-title",
                            "data-test-selector": $.TitleText,
                            title: e
                        }, e)), m.createElement(A.Ya, {
                            display: A.X.Flex,
                            flexWrap: A.Ba.Wrap
                        }, this.renderGame(), this.renderTeam()), m.createElement(A.Ya, {
                            margin: {
                                top: .5
                            }
                        }, m.createElement(Q, {
                            channelLogin: this.props.channelLogin,
                            gameID: a && a.id
                        })), this.props.firstPageLoaded && m.createElement(V, {
                            channelLogin: this.props.channelLogin
                        })))), r), m.createElement(A.Fb, {
                            className: "channel-info-bar__action-container",
                            color: A.O.Alt2,
                            fontSize: A.Ca.Size5,
                            margin: {
                                top: 1
                            },
                            padding: {
                                top: 1
                            },
                            breakpointLarge: {
                                margin: {
                                    top: 0,
                                    bottom: 1
                                },
                                padding: {
                                    top: 0
                                }
                            }
                        }, m.createElement(A.Ya, {
                            display: A.X.Flex,
                            alignItems: A.f.Center,
                            justifyContent: A.Xa.Between,
                            fullWidth: !0,
                            breakpointLarge: i ? void 0 : {
                                justifyContent: A.Xa.End
                            }
                        }, m.createElement(A.Ya, {
                            display: A.X.Flex
                        }, m.createElement(A.Fb, {
                            className: "channel-info-bar__viewers-wrapper",
                            color: A.O.Live,
                            display: A.X.InlineFlex
                        }, m.createElement(T.a, {
                            login: this.props.channelLogin
                        })), m.createElement(A.Fb, {
                            fontSize: A.Ca.Size5,
                            display: A.X.InlineFlex,
                            alignItems: A.f.Center
                        }, m.createElement(A.Eb, {
                            value: Object(f.d)("{count, number}", {
                                count: n
                            }, "ChannelInfoBar"),
                            label: Object(f.d)("Total Views", "ChannelInfoBar"),
                            icon: A.ub.GlyphViews,
                            "data-a-target": "total-views-count"
                        }))), m.createElement(A.Ya, {
                            display: A.X.Flex
                        }, this.props.firstPageLoaded && m.createElement(Z, {
                            channelLogin: this.props.channelLogin,
                            isLoggedIn: this.props.isLoggedIn,
                            firstPageLoaded: this.props.firstPageLoaded,
                            onClick: this.handleEditButtonClicked
                        }), m.createElement(A.Ya, {
                            margin: {
                                x: 1
                            }
                        }, this.renderChannelShareButton()), m.createElement(v.a, null, m.createElement(A.A, {
                            type: A.C.Hollow,
                            ariaLabel: Object(f.d)("More options", "ChannelInfoBar"),
                            icon: A.ub.More,
                            "data-a-target": $.MoreButton
                        }), m.createElement(A.u, {
                            direction: A.v.TopRight,
                            "data-a-target": $.MoreBalloon
                        }, m.createElement(A.Ya, {
                            padding: {
                                y: 1
                            }
                        }, m.createElement(A.Va, {
                            onClick: this.handleReportChannelClick,
                            "data-a-target": $.ReportButton
                        }, m.createElement(A.Ya, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, Object(f.d)("Report {channelLogin}", {
                            channelLogin: this.props.channelLogin
                        }, "ChannelInfoBar"))))))))))
                    }, t.prototype.renderChannelShareButton = function() {
                        return this.props.userData.user && this.props.userData.user.login ? m.createElement(I.a, {
                            login: this.props.userData.user.login,
                            displayName: this.props.userData.user.displayName || this.props.userData.user.login,
                            title: this.getTitle()
                        }) : null
                    }, t
                }(m.Component),
                ne = Object(h.compose)(g.a, Object(b.a)(ee, {
                    name: "userData",
                    options: function(e) {
                        return {
                            fetchPolicy: "cache-and-network",
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    }
                }), Object(k.a)(function(e) {
                    return {
                        query: ee,
                        name: "userData",
                        topic: e.userData.user && e.userData.user.id ? Object(C.e)(e.userData.user.id) : "",
                        skip: !(!e.userData.loading && !e.userData.error && e.userData.user),
                        variables: {
                            login: e.channelLogin
                        },
                        type: y.PubsubMessageType.BroadcastSettingsUpdate,
                        mutator: function(e, t) {
                            return t.user && t.user.stream && t.user.stream.id ? t.user.stream.title = e.status || e.old_status : t.user && t.user.lastBroadcast && (t.user.lastBroadcast.title = e.status || e.old_status), t
                        }
                    }
                }), Object(x.b)("ChannelInfoBar"))(te),
                ie = o.a.wrap(function() {
                    return n.e(115).then(n.bind(null, "bDGO"))
                }, "EditBroadcastModal");
            var re = Object(r.connect)(function(e) {
                return {
                    isLoggedIn: Object(d.f)(e),
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    login: function() {
                        return Object(c.e)(s.a.ReportChannel)
                    },
                    showEditBroadcastModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(l.d)(ie, t)
                    },
                    showBrowserNotificationsUpsellModal: function() {
                        return Object(l.d)(u.a, {})
                    },
                    closeBrowserNotificationsUpsellModal: l.c,
                    showReportUserModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(l.d)(p.a, t)
                    }
                }, e)
            })(ne);
            n.d(t, "a", function() {
                return re
            }), n.d(t, !1, function() {
                return $
            }), n.d(t, !1, function() {
                return te
            }), n.d(t, !1, function() {
                return ne
            })
        },
        ecb7: function(e, t, n) {},
        efEE: function(e, t, n) {},
        ehEd: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "c", function() {
                return a
            });
            var i = "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_150x150.png",
                r = function(e) {
                    return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/1.0"
                },
                a = function(e) {
                    return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/2.0 2x"
                }
        },
        eqgM: function(e, t, n) {
            "use strict";
            var i, r, a = n("/MKj"),
                o = n("mrSG"),
                s = n("q1tI"),
                l = n("/7QA"),
                c = n("GnwI"),
                d = n("TSYQ"),
                u = n("17x9"),
                p = n("Ue10");
            n("A7Y/");
            var m = "carousel-content",
                h = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            currentElementIndex: 0,
                            hasBeenVisible: !1
                        }, t.moveCarouselToCardIndex = function(e) {
                            if (t.props.children && !(t.props.children.length <= 1)) {
                                var n = t.getNumberOfVisibleElements();
                                t.props.children.length < n || (e < t.props.children.length && e > t.props.children.length - n ? t.setState({
                                    currentElementIndex: t.props.children.length - n
                                }) : t.setState({
                                    currentElementIndex: e
                                }))
                            }
                        }, t.moveCarouselForward = function() {
                            if (!t.isForwardButtonDisabled() && t.props.children) {
                                var e = t.getNumberOfVisibleElements();
                                t.state.currentElementIndex + 2 * e > t.props.children.length ? t.setState({
                                    currentElementIndex: t.props.children.length - e
                                }) : t.setState({
                                    currentElementIndex: t.state.currentElementIndex + e
                                })
                            }
                        }, t.moveCarouselBackward = function() {
                            if (!t.isBackButtonDisabled()) {
                                var e = t.getNumberOfVisibleElements();
                                t.setState({
                                    currentElementIndex: Math.max(t.state.currentElementIndex - e, 0)
                                })
                            }
                        }, t.isForwardButtonDisabled = function() {
                            if (!t.carouselContainerRef) return !1;
                            if (t.props.children) {
                                var e = 0,
                                    n = t.carouselContainerRef.querySelector("[data-js-selector=" + m + "]");
                                return n && (e = n.childElementCount), t.getLastVisibleIndex() >= e
                            }
                            return !0
                        }, t.isBackButtonDisabled = function() {
                            return 0 === t.state.currentElementIndex
                        }, t.getLastVisibleIndex = function() {
                            return t.state.currentElementIndex + t.getNumberOfVisibleElements()
                        }, t.getNumberOfVisibleElements = function() {
                            var e = t.carouselContainerRef.getBoundingClientRect(),
                                n = e.left,
                                i = e.right - n,
                                r = t.getVideoCardEndPadding();
                            return Math.floor((i + r) / t.getChildWidth())
                        }, t.refHandler = function(e) {
                            return t.carouselContainerRef = e
                        }, t.getChildWidth = function() {
                            if (!t.carouselContainerRef) return 0;
                            var e = t.carouselContainerRef.querySelector("[data-js-selector=" + m + "]");
                            return e && e.children.length ? e.children[0].getBoundingClientRect().width : 0
                        }, t.getVideoCardEndPadding = function() {
                            var e = t.carouselContainerRef.querySelector("[data-js-selector=" + m + "]");
                            if (!e || 0 === e.children.length) return 0;
                            var n = window.getComputedStyle(e.children[0]).paddingRight || "";
                            return 2 * parseInt(n, 10) || 0
                        }, t.pixelOffset = function() {
                            return t.getChildWidth() * t.state.currentElementIndex * -1
                        }, t.transformString = function() {
                            return "translate3d(" + t.pixelOffset() + "px, 0px, 0px)"
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this.context.registerReceiver;
                        e && (this.unregisterScrollHandler = e(this)), null !== this.props.children && this.checkVisible()
                    }, t.prototype.componentDidUpdate = function(e) {
                        null === e.children && null !== this.props.children && this.checkVisible(), (!e.options && this.props.options || e.options && this.props.options && this.props.options.videoIndex !== e.options.videoIndex) && this.moveCarouselToCardIndex(this.props.options.videoIndex)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregisterScrollHandler && this.unregisterScrollHandler()
                    }, t.prototype.render = function() {
                        return s.createElement(p.Qa, {
                            margin: {
                                y: 1
                            },
                            position: p.kb.Relative
                        }, s.createElement("div", {
                            className: "preview-card-carousel",
                            ref: this.refHandler
                        }, s.createElement(p.Ya, {
                            className: "preview-card-carousel__child-container",
                            overflow: p.db.Hidden,
                            position: p.kb.Relative,
                            fullWidth: !0,
                            "data-test-selector": "child-container"
                        }, s.createElement(p.Qa, {
                            margin: {
                                bottom: 1
                            }
                        }, s.createElement("div", {
                            className: "preview-card-carousel__body",
                            style: {
                                transform: this.transformString()
                            },
                            "data-test-selector": "carousel-body"
                        }, s.createElement(p.cc, {
                            noWrap: !0,
                            noGrow: !0,
                            childWidth: this.props.cardWidth || p.dc.Large,
                            gutterSize: p.ec.Small,
                            "data-js-selector": m
                        }, this.props.children)))), s.createElement(b, {
                            direction: g.DirectionPrevious,
                            disabled: !this.props.children || this.isBackButtonDisabled(),
                            onClickHandler: this.moveCarouselBackward
                        }), s.createElement(b, {
                            direction: g.DirectionNext,
                            disabled: !this.props.children || this.isForwardButtonDisabled(),
                            onClickHandler: this.moveCarouselForward
                        })))
                    }, t.prototype.checkVisible = function(e) {
                        this.props.children && this.props.children.length > 0 && !this.state.hasBeenVisible && function(e) {
                            if (!e) return !1;
                            var t = e.getBoundingClientRect(),
                                n = window.innerWidth,
                                i = window.innerHeight;
                            return !(t.right < 0 || t.bottom < 0 || t.left > n || t.top > i)
                        }(this.carouselContainerRef) && this.props.onFirstVisible()
                    }, t.contextTypes = {
                        registerReceiver: u.func
                    }, t
                }(s.Component),
                g = {
                    DirectionPrevious: "previous",
                    DirectionNext: "next"
                },
                f = ((i = {})[g.DirectionPrevious] = "previous", i[g.DirectionNext] = "next", i),
                v = ((r = {})[g.DirectionPrevious] = p.ub.AngleLeft, r[g.DirectionNext] = p.ub.AngleRight, r),
                b = function(e) {
                    var t, n = f[e.direction],
                        i = ((t = {})[g.DirectionPrevious] = Object(l.d)("previous", "CarouselNavButton"), t[g.DirectionNext] = Object(l.d)("next", "CarouselNavButton"), t),
                        r = d("preview-card-carousel__button", "preview-card-carousel__button--" + n, {
                            "preview-card-carousel__button--disabled": e.disabled
                        });
                    return s.createElement(p.Ya, {
                        className: "preview-card-carousel__nav",
                        display: p.X.Flex,
                        alignItems: p.f.Center,
                        position: p.kb.Absolute,
                        attachTop: !0,
                        attachLeft: e.direction && "previous" === e.direction,
                        attachRight: e.direction && "next" === e.direction,
                        fullHeight: !0
                    }, s.createElement(p.Fb, {
                        className: r,
                        position: p.kb.Relative,
                        display: p.X.Flex,
                        borderRadius: p.x.Medium,
                        background: e.disabled ? p.r.Base : void 0
                    }, s.createElement(p.Va, {
                        ariaLabel: i[e.direction],
                        blurAfterClick: !0,
                        "data-test-selector": n + "-button",
                        disabled: e.disabled,
                        onClick: e.onClickHandler,
                        type: p.Wa.Base,
                        borderRadius: p.x.Medium
                    }, s.createElement(p.Fb, {
                        color: p.O.Link,
                        display: p.X.InlineFlex,
                        padding: {
                            x: .5,
                            y: 2
                        }
                    }, s.createElement(p.La, {
                        asset: v[e.direction]
                    })))))
                },
                k = n("bdIb"),
                y = n("XEwr"),
                C = n("RXle"),
                S = 10,
                E = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hasTrackedItemSectionLoad: !1
                        }, t.handleFirstVisible = function() {
                            if (!t.state.hasTrackedItemSectionLoad) {
                                for (var e = t.props.videos ? t.props.videos : [], n = [], i = [], r = 0, a = e; r < a.length; r++) {
                                    var s = a[r];
                                    n.push(s.id), i.push(s.viewCount || 0)
                                }
                                l.o.trackItemSectionLoad(o.__assign({
                                    carousel_content: t.props.tracking.content,
                                    location: t.props.tracking.location,
                                    rendered_item_count: e.length,
                                    rendered_item_list: n,
                                    rendered_item_types: [t.props.tracking.itemType],
                                    rendered_items_viewcounts: i
                                }, t.props.tracking.source)), t.setState({
                                    hasTrackedItemSectionLoad: !0
                                })
                            }
                        }, t.onPreviewCardClick = function(e) {
                            if (t.props.videos) {
                                var n = t.props.videos[e];
                                l.o.trackItemSectionClick(o.__assign({
                                    carousel_content: t.props.tracking.content,
                                    item_id: n.id,
                                    item_index: e,
                                    item_type: t.props.tracking.itemType,
                                    item_viewcount: n.viewCount,
                                    location: t.props.tracking.location
                                }, t.props.tracking.source)), t.props.scrollToCurrentlyWatching && t.props.videos.length > 0 && t.setCarouselOptions({
                                    videoIndex: e
                                })
                            }
                        }, t.setCarouselOptions = function(e) {
                            t.props.videos && t.props.videos.length > 0 && t.setState({
                                scrollToOptions: e
                            })
                        }, t.getCurrentlyWatchingVideoIndex = function() {
                            var e = 0;
                            if (t.props.videos && t.props.videos.length > 0)
                                for (var n = 0; n < t.props.videos.length; n++) {
                                    if (t.props.videos[n].id === t.props.currentlyWatchingVideoID) {
                                        e = n;
                                        break
                                    }
                                }
                            return e
                        }, t.getVideoCards = function() {
                            var e = t.props.videos;
                            if (null === e) {
                                for (var n = [], i = 0; i < S; i++) n.push(s.createElement(C.VideoPreviewCardPlaceholder, {
                                    key: "carousel-placeholder-" + i
                                }));
                                return n
                            }
                            var r = [];
                            if (t.props.spotlight) {
                                var a = s.createElement(C.VideoPreviewCard, {
                                    key: "spotlight",
                                    collectionID: t.props.collectionID,
                                    topBar: {
                                        title: t.props.spotlight.title,
                                        subTitle: t.props.spotlight.subTitle
                                    },
                                    context: t.props.listContext,
                                    tracking: {
                                        content: t.props.tracking.content,
                                        content_index: r.length,
                                        medium: t.props.tracking.medium
                                    },
                                    video: t.props.spotlight.card,
                                    hideTags: t.props.hideTags
                                });
                                r.push(a)
                            }
                            var o = r.length;
                            if (t.props.currentlyWatchingVideoID && t.props.renderCurrentlyWatchingCard && t.props.scrollToCurrentlyWatching)
                                for (var l = t.getCurrentlyWatchingVideoIndex(), c = 0; c < e.length; c++) {
                                    var d = e[c];
                                    t.props.firstPageLoaded || !(c < l || c > l + S) ? Object(y.a)(d) || r.push(s.createElement(C.VideoPreviewCard, {
                                        context: t.props.listContext,
                                        collectionID: t.props.collectionID,
                                        onClick: t.onPreviewCardClick,
                                        key: "video-" + c,
                                        tracking: {
                                            content: t.props.tracking.content,
                                            content_index: c,
                                            medium: t.props.tracking.medium
                                        },
                                        video: d,
                                        multipleVideoGameMarkersType: t.props.multipleVideoGameMarkersType,
                                        listPosition: t.getPositionLabel(c),
                                        topBar: t.getPositionBanner(c),
                                        hideDuration: t.willRenderPositionBanner(c),
                                        hideTags: t.props.hideTags
                                    })) : r.push(s.createElement(C.VideoPreviewCardPlaceholder, {
                                        key: "carousel-placeholder-" + c
                                    }))
                                } else
                                    for (c = 0; c < e.length; c++)
                                        if (c + o < S || t.props.firstPageLoaded) {
                                            d = e[c];
                                            if (Object(y.a)(d)) {
                                                if (d.slug === t.props.currentlyWatchingVideoID) continue;
                                                r.push(s.createElement(k.a, {
                                                    context: t.props.listContext,
                                                    onClick: t.onPreviewCardClick,
                                                    key: "video-" + c,
                                                    tracking: {
                                                        content: t.props.tracking.content,
                                                        content_index: o + c,
                                                        medium: t.props.tracking.medium
                                                    },
                                                    clip: d
                                                }))
                                            } else {
                                                if (d.id === t.props.currentlyWatchingVideoID && !t.props.renderCurrentlyWatchingCard) continue;
                                                r.push(s.createElement(C.VideoPreviewCard, {
                                                    context: t.props.listContext,
                                                    collectionID: t.props.collectionID,
                                                    onClick: t.onPreviewCardClick,
                                                    key: "video-" + c,
                                                    tracking: {
                                                        content: t.props.tracking.content,
                                                        content_index: o + c,
                                                        medium: t.props.tracking.medium
                                                    },
                                                    video: d,
                                                    multipleVideoGameMarkersType: t.props.multipleVideoGameMarkersType,
                                                    listPosition: t.getPositionLabel(c),
                                                    topBar: t.getPositionBanner(c),
                                                    hideDuration: t.willRenderPositionBanner(c),
                                                    hideTags: t.props.hideTags
                                                }))
                                            }
                                        } else r.push(s.createElement(C.VideoPreviewCardPlaceholder, {
                                            key: "carousel-placeholder-" + c
                                        }));
                            return r
                        }, t.getPositionBanner = function(e) {
                            if (t.props.renderPositionBanner && t.props.renderCurrentlyWatchingCard && t.props.videos) {
                                var n = t.getCurrentlyWatchingVideoIndex(),
                                    i = e === n,
                                    r = e === n + 1,
                                    a = Object(l.d)("{totalVideos, plural, one {{position} / # video} other {{position} / # videos}}", {
                                        position: e + 1,
                                        totalVideos: t.props.videos.length
                                    }, "VideoCarousel");
                                return i ? {
                                    title: Object(l.d)("Now playing", "VideoCarousel"),
                                    subTitle: a,
                                    selected: !0
                                } : r ? {
                                    title: Object(l.d)("Up next", "VideoCarousel"),
                                    subTitle: a
                                } : void 0
                            }
                        }, t.willRenderPositionBanner = function(e) {
                            if (!t.props.renderPositionBanner || !t.props.videos) return !1;
                            var n = t.getCurrentlyWatchingVideoIndex();
                            return e === n || e === n + 1
                        }, t.getPositionLabel = function(e) {
                            if (t.props.renderPositionLabel && !t.willRenderPositionBanner(e) && t.props.videos) return {
                                position: e + 1,
                                totalVideos: t.props.videos.length
                            }
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.videos && this.props.scrollToCurrentlyWatching && this.props.currentlyWatchingVideoID && !this.state.scrollToOptions && this.setCarouselOptions({
                            videoIndex: this.getCurrentlyWatchingVideoIndex()
                        })
                    }, t.prototype.componentDidUpdate = function(e) {
                        null === e.videos && null !== this.props.videos && this.props.scrollToCurrentlyWatching && this.props.currentlyWatchingVideoID ? this.setCarouselOptions({
                            videoIndex: this.getCurrentlyWatchingVideoIndex()
                        }) : this.props.videos && this.props.scrollToCurrentlyWatching && this.props.currentlyWatchingVideoID !== e.currentlyWatchingVideoID && this.setCarouselOptions({
                            videoIndex: this.getCurrentlyWatchingVideoIndex()
                        })
                    }, t.prototype.render = function() {
                        return s.createElement(h, {
                            options: this.state.scrollToOptions,
                            cardWidth: this.props.videoCardSize,
                            onFirstVisible: this.handleFirstVisible
                        }, this.getVideoCards())
                    }, t
                }(s.Component),
                N = Object(c.b)("VideoCarousel", {
                    autoReportInteractive: !0
                })(E);
            n.d(t, "a", function() {
                return O
            });
            var O = Object(a.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(N)
        },
        f3GI: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return g
            }), n.d(t, "a", function() {
                return v
            });
            var i = n("mrSG"),
                r = n("TSYQ"),
                a = n("17x9"),
                o = n("q1tI"),
                s = n("wIs1"),
                l = n("N0BP"),
                c = n("zxEZ"),
                d = n("Bh3T"),
                u = n("JoTo"),
                p = n("cnlr"),
                m = n("sSlw"),
                h = n("Ue10"),
                g = (n("b7X6"), "channel-page-layout__scroll-area--theatre-mode"),
                f = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e, t = r(((e = {})[g] = !!this.props.theatreMode, e));
                        return o.createElement(h.Ya, i.__assign({
                            className: "channel-page-layout",
                            display: h.X.Flex,
                            flexDirection: h.Aa.Column,
                            flexWrap: h.Ba.NoWrap,
                            fullHeight: !0
                        }, Object(l.a)(this.props)), o.createElement(d.b, {
                            className: t,
                            suppressScrollX: !0,
                            addPaddingWhenPlayerIsPersisting: !0
                        }), o.createElement(u.a, null, o.createElement(p.a, {
                            channelLogin: this.props.ownerLogin
                        })), o.createElement(m.a, null, o.createElement(c.a, {
                            currentPage: this.props.currentPage,
                            channelLogin: this.props.ownerLogin,
                            channelIsHosting: this.props.channelIsHosting
                        })), o.createElement(h.Ya, {
                            padding: {
                                top: 2,
                                x: 3
                            }
                        }, this.props.children))
                    }, t.contextTypes = {
                        scrollToTop: a.func
                    }, t
                }(o.Component),
                v = Object(s.a)(f)
        },
        fCiU: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            });
            var i = n("p52R"),
                r = /^[\x00-\x7F]*$/,
                a = function(e) {
                    return !r.test(e)
                },
                o = function(e) {
                    return a(e.displayName) ? e.displayName + " (" + e.name + ")" : e.displayName
                },
                s = function(e, t) {
                    return {
                        userID: e.id,
                        userDisplayName: e.displayName,
                        userType: i.a.User,
                        isIntl: a(e.displayName),
                        userLogin: e.name,
                        color: t
                    }
                }
        },
        fI4C: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return m
            }), n.d(t, "d", function() {
                return h
            }), n.d(t, "b", function() {
                return g
            }), n.d(t, "a", function() {
                return f
            }), n.d(t, "m", function() {
                return v
            }), n.d(t, "l", function() {
                return b
            }), n.d(t, "f", function() {
                return k
            }), n.d(t, "g", function() {
                return y
            }), n.d(t, "e", function() {
                return C
            }), n.d(t, "i", function() {
                return S
            }), n.d(t, "h", function() {
                return E
            }), n.d(t, "j", function() {
                return N
            }), n.d(t, "k", function() {
                return O
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("vRsq"),
                o = n("2xye"),
                s = n("L9xt"),
                l = n("I6K6"),
                c = n("ahza"),
                d = n("DpwM"),
                u = n("BQs+"),
                p = n("CJLt"),
                m = "replay_mode",
                h = "timestamp_mode",
                g = "on",
                f = "off",
                v = function(e) {
                    r.o.track(s.SpadeEventType.VideoChatSettingChanged, e)
                },
                b = function(e, t) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var n, c, d, m;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, r.p.apollo.client.query({
                                        query: p,
                                        variables: {
                                            videoCreatorID: e.channelId,
                                            videoID: e.contentId
                                        }
                                    })];
                                case 1:
                                    return n = i.sent().data, c = {
                                        channel: n.video.owner.login,
                                        channel_id: Number(e.channelId),
                                        game: n.video.game ? n.video.game.name : null,
                                        location: o.PageviewLocation.VideoWatchPage,
                                        share_platform: u.a.Link,
                                        share_context: o.ShareItemContext.Chomment,
                                        shared_item_id: Object(a.p)(e.contentId),
                                        shared_item_type: Object(l.a)(n.video.broadcastType),
                                        shared_item_url: t.toString(),
                                        partner: n.video.owner.roles.isPartner,
                                        source_item_id: e.id,
                                        source_item_type: o.SourceItemType.Chomment
                                    }, d = _(e, n, u.a.Link), r.o.track(s.SpadeEventType.ChommentUIAction, d), r.o.track(s.SpadeEventType.ShareItem, c), [3, 3];
                                case 2:
                                    return m = i.sent(), r.k.error(m.toString(), b.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                k = function(e, t) {
                    var n = e.users[0],
                        i = e.comments[0];
                    return {
                        channel: t.user.login,
                        channel_id: Number(i.channelId),
                        comment_id: i.id,
                        comment_state: i.state,
                        event_source: "frontend",
                        game: t.video.game ? t.video.game.name : null,
                        login: n.name,
                        play_session_id: r.o.getVideoPlayerTrackingData().playSessionID,
                        reply_to_comment_id: Object(d.h)(i) ? i.parentId : null,
                        user_id: Number(n.id),
                        vod_id: Number(i.contentId),
                        vod_title: t.video.title,
                        vod_ts: i.contentOffset,
                        vod_type: Object(l.a)(t.video.broadcastType)
                    }
                },
                y = function(e, t, n) {
                    return {
                        author_id: Number(e.comment.commenter),
                        author_login: n.users[1].login,
                        channel: n.users[0].login,
                        channel_id: Number(e.comment.channelId),
                        comment_id: e.comment.id,
                        event_source: "frontend",
                        game: n.video.game ? n.video.game.name : null,
                        login: t.session.user.login,
                        user_id: Number(t.session.user.id),
                        vod_id: Number(e.comment.contentId),
                        vod_title: n.video.title,
                        vod_type: Object(l.a)(n.video.broadcastType),
                        vod_ts: e.comment.contentOffset
                    }
                },
                C = function(e, t, n) {
                    return {
                        action: "ban_user",
                        author_id: Number(e.bannedUser),
                        channel_id: Number(e.targetChannel),
                        event_source: "frontend",
                        game: n.video.game ? n.video.game.name : null,
                        login: t.session.user.login,
                        target_user_id: Number(e.bannedUser),
                        user_id: Number(t.session.user.id),
                        vod_id: Number(n.video.id),
                        vod_title: n.video.title,
                        vod_type: Object(l.a)(n.video.broadcastType),
                        vod_ts: e.comment.contentOffset
                    }
                },
                S = function(e, t, n) {
                    return {
                        action: "delete",
                        author_id: Number(e.commenter),
                        author_login: n.users[1].login,
                        channel: n.users[0].login,
                        channel_id: Number(e.channelId),
                        comment_id: e.id,
                        event_source: "frontend",
                        game: n.video.game ? n.video.game.name : null,
                        login: t.session.user.login,
                        reply_to_comment_id: e.parentId ? e.parentId : null,
                        user_id: Number(t.session.user.id),
                        vod_id: Number(e.contentId),
                        vod_title: n.video.title,
                        vod_type: Object(l.a)(n.video.broadcastType),
                        vod_ts: e.contentOffset
                    }
                },
                E = function(e, t, n) {
                    var i = null,
                        r = Object.keys(t.vodChat.comments.comments.parentComments);
                    if (r.length > 0) {
                        var a = r[0];
                        i = t.vodChat.comments.comments.parentComments[a].channelId
                    }
                    return {
                        action: "create",
                        channel_id: i ? Number(i) : null,
                        comment_body: e.message,
                        event_source: "frontend",
                        game: n.video.game ? n.video.game.name : null,
                        login: t.session.user ? t.session.user.login : null,
                        reply_to_comment_id: Object(c.e)(e) ? e.parentId : null,
                        user_id: t.session.user ? Number(t.session.user.id) : null,
                        vod_id: Number(n.video.id),
                        vod_title: n.video.title,
                        vod_ts: Object(c.e)(e) ? null : Number(e.contentOffsetSeconds),
                        vod_type: Object(l.a)(n.video.broadcastType)
                    }
                },
                N = function(e, t, n) {
                    var i = e.comment.id,
                        r = e.comment.channelId;
                    return {
                        action: e.state === d.c ? "publish" : "unpublish",
                        channel_id: Number(r),
                        comment_id: i,
                        event_source: "frontend",
                        game: n.video.game ? n.video.game.name : null,
                        login: t.session.user.login,
                        user_id: Number(t.session.user.id),
                        vod_id: Number(n.video.id),
                        vod_title: n.video.title,
                        vod_ts: e.comment.contentOffset,
                        vod_type: Object(l.a)(n.video.broadcastType)
                    }
                },
                O = function(e, t, n) {
                    return {
                        action: "sync_vod_to_time",
                        author_id: Number(e.commenter),
                        channel: n.user.login,
                        channel_id: Number(e.channelId),
                        comment_id: e.id,
                        event_source: "frontend",
                        game: n.video.game ? n.video.game.name : null,
                        login: t.session.user ? t.session.user.login : null,
                        user_id: t.session.user ? Number(t.session.user.id) : null,
                        vod_id: Number(e.contentId),
                        vod_title: n.video.title,
                        vod_ts: e.contentOffset,
                        vod_type: Object(l.a)(n.video.broadcastType)
                    }
                },
                _ = function(e, t, n) {
                    return {
                        action: "share",
                        author_id: Number(e.commenter),
                        channel: t.video.owner.login,
                        channel_id: Number(e.channelId),
                        comment_id: e.id,
                        event_source: "frontend",
                        game: t.video.game ? t.video.game.name : null,
                        login: t.currentUser ? t.currentUser.login : null,
                        user_id: t.currentUser ? Number(t.currentUser.id) : null,
                        vod_id: Number(e.contentId),
                        vod_title: t.video.title,
                        vod_ts: e.contentOffset,
                        vod_type: Object(l.a)(t.video.broadcastType),
                        share_platform: n
                    }
                }
        },
        fIj0: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoChatChannelAndVideoTrackingContext"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoCreatorID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoCreatorID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 186
                }
            };
            n.loc.source = {
                body: "query VideoChatChannelAndVideoTrackingContext($videoCreatorID: ID $videoID: ID) {\nvideo(id: $videoID) {\nid\nbroadcastType\ntitle\ngame {\nid\nname\n}\n}\nuser(id: $videoCreatorID) {\nid\nlogin\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        fKMw: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("sMoq");

            function o() {
                var e = this;
                return Object(r.a)(a, {
                    props: function(t) {
                        return {
                            vipUserMutation: function(n) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t.ownProps.channelID,
                                                            granteeLogin: n
                                                        }
                                                    }
                                                })] : [2];
                                            case 1:
                                                return [2, e.sent().data]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        fOWB: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "LiveEventBanner_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "liveEvent"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "LiveEventBanner_EventLeaf"
                                            },
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "LiveEventBanner_EventLeaf"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "EventLeaf"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "parent"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 198
                }
            };
            n.loc.source = {
                body: "query LiveEventBanner_User($login: String!) {\nuser(login: $login) {\nid\nliveEvent {\n...LiveEventBanner_EventLeaf\n}\n}\n}\nfragment LiveEventBanner_EventLeaf on EventLeaf {\nid\ntitle\nparent {\nid\ntitle\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        fQWD: function(e, t, n) {
            "use strict";
            var i = n("vHGB");
            n.d(t, "a", function() {
                return i.a
            })
        },
        fhkr: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "leaderboardItem"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "BitsLeaderboard"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "items"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "entryKey"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "rank"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "score"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 106
                }
            };
            n.loc.source = {
                body: "fragment leaderboardItem on BitsLeaderboard {\nitems {\nedges {\ncursor\nnode {\nid\nentryKey\nrank\nscore\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        frkH: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_DenyRejectedChatMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DenyRejectedChatMessageInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "denyRejectedChatMessage"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 138
                }
            };
            n.loc.source = {
                body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\ndenyRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        g17B: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Chat_ChannelCheermotes"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "prefix"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tiers"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "bits"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "color"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "images"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "url"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "theme"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isAnimated"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "dpiScale"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "canCheer"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "canShowInBitsCard"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 207
                }
            };
            n.loc.source = {
                body: "query Chat_ChannelCheermotes($channelID: ID) {\nuser(id: $channelID) {\nid\ncheer {\nid\nemotes {\nprefix\ntiers {\nid\nbits\ncolor\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\ncanCheer\ncanShowInBitsCard\n}\ntype\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        g807: function(e, t, n) {
            "use strict";
            var i = n("RNNG"),
                r = function() {
                    function e(e) {
                        this.videoComments = e, this.currentOffset = e.minOffset
                    }
                    return e.prototype[Symbol.iterator] = function() {
                        var e = this;
                        return {
                            next: function() {
                                var t = e.videoComments.offsets[e.currentOffset] || [],
                                    n = {
                                        done: e.currentOffset > e.videoComments.maxOffset,
                                        value: {
                                            offset: e.currentOffset,
                                            comments: t
                                        }
                                    };
                                return e.currentOffset++, n
                            }
                        }
                    }, e
                }();
            n.d(t, "b", function() {
                return i.b
            }), n.d(t, "c", function() {
                return i.c
            }), n.d(t, !1, function() {
                return i.d
            }), n.d(t, !1, function() {
                return i.e
            }), n.d(t, "d", function() {
                return i.f
            }), n.d(t, !1, function() {}), n.d(t, "a", function() {
                return r
            })
        },
        gAd6: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoPreviewCardGameID"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "name"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 73
                }
            };
            n.loc.source = {
                body: "query VideoPreviewCardGameID($name: String!) {\ngame(name: $name) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gDzh: function(e, t, n) {},
        gFHd: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ShareVideo_Content"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "collectionID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "hasVideo"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "hasCollection"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "options"
                                },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [{
                                        kind: "ObjectField",
                                        name: {
                                            kind: "Name",
                                            value: "includePrivate"
                                        },
                                        value: {
                                            kind: "BooleanValue",
                                            value: !0
                                        }
                                    }]
                                }
                            }],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "hasVideo"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "owner"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "collection"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "collectionID"
                                    }
                                }
                            }],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "hasCollection"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "owner"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 451
                }
            };
            n.loc.source = {
                body: "query ShareVideo_Content($videoID: ID! $collectionID: ID! $hasVideo: Boolean! $hasCollection: Boolean!) {\n# If the page specifies a video ID query it directly.\nvideo(id: $videoID options: { includePrivate: true }) @include(if: $hasVideo) {\nid\nowner {\nid\ndisplayName\n}\ntitle\n}\n# If the page is a collection page grab the first video from the collection.\ncollection(id: $collectionID) @include(if: $hasCollection) {\nid\nowner {\nid\ndisplayName\n}\ntitle\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gIsd: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportReasons"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "content"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ReportContentType"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reportReasons"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "content"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "text"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 114
                }
            };
            n.loc.source = {
                body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\nreportReasons(content: $content) {\nid\ntext\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gMwc: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoMarkersChatCommand"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "createdAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 115
                }
            };
            n.loc.source = {
                body: "query VideoMarkersChatCommand($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nstream {\nid\ncreatedAt\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gO1k: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_DeleteChatMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DeleteChatMessageInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "deleteChatMessage"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "responseCode"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sender"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "content"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "text"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 182
                }
            };
            n.loc.source = {
                body: "mutation Chat_DeleteChatMessage($input: DeleteChatMessageInput!) {\ndeleteChatMessage(input: $input) {\nresponseCode\nmessage {\nid\nsender {\nid\nlogin\ndisplayName\n}\ncontent {\ntext\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gPTj: function(e, t, n) {},
        gTu3: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Default = 0] = "Default", e[e.Recipient = 1] = "Recipient", e[e.Sender = 2] = "Sender"
                }(i || (i = {}))
        },
        gUUB: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("yR8l"),
                l = n("x7UT"),
                c = n("0Log"),
                d = n("oB8h"),
                u = n("/aPz"),
                p = n("2xye"),
                m = n("GnwI"),
                h = n("Ue10"),
                g = n("J6gT"),
                f = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.checkIfVodcast = function(e) {
                            switch (e) {
                                case d.a.WatchParty:
                                case d.a.Premiere:
                                case d.a.Rerun:
                                    return !0;
                                default:
                                    return !1
                            }
                        }, t.getVODPath = function(e) {
                            return "videos/" + encodeURIComponent(e)
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidUpdate = function() {
                        this.props.data.user && this.props.latencyTracking.reportInteractive()
                    }, t.prototype.componentDidMount = function() {
                        this.props.data.user && this.props.latencyTracking.reportInteractive()
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        if (void 0 === this.props.data || void 0 === this.props.data.user) return null;
                        var e = this.props.data.user;
                        if (!e || !e.stream || null === e.stream.type) return null;
                        if (!this.checkIfVodcast(e.stream.type)) return null;
                        var t = null,
                            n = null,
                            i = "",
                            r = "";
                        this.props.pubsub && this.props.pubsub.messages && this.props.pubsub.messages.vodcast && (i = this.props.pubsub.messages.vodcast.vod.vod_id, r = this.props.pubsub.messages.vodcast.vod.title);
                        var s = e.displayName;
                        return e.stream.type === d.a.Rerun ? (t = a.createElement(h.tb, {
                            asset: h.ub.VideoRerun,
                            height: 16,
                            width: 16
                        }), n = i && r ? Object(o.d)("Rerun of video from {channelName}: {videoLink}", {
                            channelName: s,
                            videoLink: a.createElement(h.U, {
                                to: {
                                    pathname: this.getVODPath(i),
                                    state: {
                                        location: p.PageviewLocation.Channel,
                                        medium: p.PageviewMedium.Channel
                                    }
                                }
                            }, a.createElement(h.W, {
                                type: h.Wb.Span,
                                color: h.O.OverlayAlt
                            }, r))
                        }, "ChannelVodcastTopbar") : Object(o.d)("Rerun of video from {channelName}", {
                            channelName: s
                        }, "ChannelVodcastTopbar")) : e.stream.type === d.a.Premiere && (t = a.createElement(h.tb, {
                            asset: h.ub.VideoPremiere,
                            type: h.vb.Live,
                            height: 16,
                            width: 16
                        }), n = Object(o.d)("Premiere of video from {channelName}", {
                            channelName: s
                        }, "ChannelVodcastTopbar")), a.createElement(h.Fb, {
                            background: h.r.AccentAlt2,
                            color: h.O.Overlay,
                            padding: 1,
                            alignItems: h.f.Center,
                            display: h.X.Flex,
                            flexWrap: h.Ba.NoWrap,
                            overflow: h.db.Hidden
                        }, t, a.createElement(h.Ya, {
                            display: h.X.Inline,
                            padding: {
                                left: .5
                            },
                            ellipsis: !0
                        }, a.createElement(h.W, {
                            fontSize: h.Ca.Size5,
                            ellipsis: !0,
                            "data-test-selector": "channel-vodcast-topbar",
                            title: r
                        }, n)))
                    }, t = r.__decorate([Object(s.a)(g, {
                        options: function(e) {
                            return {
                                pollInterval: 12e4,
                                fetchPolicy: "network",
                                variables: {
                                    channelLogin: e.channelLogin
                                }
                            }
                        }
                    }), Object(l.a)([{
                        skip: function(e) {
                            return e.data.loading || !e.data.user || !e.data.user.id
                        },
                        topic: function(e) {
                            return e.data.user ? Object(u.J)(e.data.user.id) : ""
                        },
                        mapMessageTypesToProps: (i = {}, i[c.PubsubMessageType.Vodcast] = "vodcast", i)
                    }]), Object(m.b)("ChannelVodcastTopbar")], t)
                }(a.Component);
            n.d(t, !1, function() {
                return "channel-vodcast-topbar"
            }), n.d(t, "a", function() {
                return f
            })
        },
        gcd7: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("fvjX"),
                a = n("+pBb"),
                o = n("mrSG"),
                s = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.props.addCommand(this.props.command, this.props.handler)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.command === e.command && this.props.handler === e.handler || (this.props.removeCommand(this.props.command, this.props.handler), this.props.addCommand(e.command, e.handler))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.removeCommand(this.props.command, this.props.handler)
                    }, t.prototype.render = function() {
                        return null
                    }, t
                }(n("q1tI").PureComponent);
            var l = Object(i.connect)(null, function(e) {
                return Object(r.bindActionCreators)({
                    addCommand: a.x,
                    removeCommand: a.N
                }, e)
            })(s);
            n.d(t, "a", function() {
                return l
            })
        },
        gh9h: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Save = 0] = "Save", e[e.Thumbnail = 1] = "Thumbnail", e[e.Initialize = 2] = "Initialize"
                }(i || (i = {}))
        },
        gq0V: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            });
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("5g1g"),
                o = n("wUQP"),
                s = function(e) {
                    var t = e.children;
                    return i.createElement(a.a, {
                        name: "vip_badge_gate"
                    }, t)
                },
                l = function() {
                    return o.a.On === r.b.get("vip_badge_gate", o.a.Off)
                }
        },
        h92S: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("z36O"),
                o = n("kduP"),
                s = n("2xye"),
                l = n("GnwI"),
                c = n("VtCy");

            function d(e) {
                return "slug" in e
            }
            var u, p = n("Ue10"),
                m = /\S/,
                h = function(e) {
                    var t = e.video,
                        n = "";
                    if (d(t)) n = t.title + " · " + Object(r.i)(new Date(t.createdAt));
                    else {
                        var a = "",
                            o = t.title && "" !== t.title && m.test(t.title),
                            s = !!t.publishedAt;
                        s && (a = Object(r.i)(new Date(t.publishedAt))), o && s ? n = t.title + " · " + a : t.title && o && !s ? n = t.title : !o && s && (n = a)
                    }
                    return i.createElement(p.Fb, {
                        margin: {
                            bottom: .5
                        }
                    }, i.createElement(p.W, {
                        ellipsis: !0,
                        title: t.title,
                        fontSize: p.Ca.Size4
                    }, n))
                };
            ! function(e) {
                e[e.InfoPlaceholder = 0] = "InfoPlaceholder", e[e.GameImagePlaceholder = 1] = "GameImagePlaceholder", e[e.ClipCurator = 2] = "ClipCurator", e[e.ClipCuratorDot = 3] = "ClipCuratorDot"
            }(u || (u = {}));
            var g = function(e) {
                    var t = e.video,
                        n = null;
                    t && !d(t) && t.scope === c.VideoScope.Private && (n = i.createElement(p.Fb, {
                        fontSize: p.Ca.Size4
                    }, i.createElement(p.hb, {
                        label: Object(r.d)("Private", "VideoTitle")
                    })));
                    var l = null;
                    if (t && d(t) && t.curator) {
                        var m = Object(r.d)("Clipped by {curator}", {
                                curator: i.createElement(p.U, {
                                    to: {
                                        pathname: "/" + t.curator.login,
                                        state: {
                                            medium: s.PageviewMedium.ClipsWatchPage,
                                            content: s.PageviewContent.ClipCuratorName
                                        }
                                    }
                                }, t.curator.login)
                            }, "VideoInfo"),
                            g = null;
                        t.game && (g = i.createElement(p.Ya, {
                            "data-test-selector": u.ClipCuratorDot,
                            margin: {
                                right: 1
                            }
                        }, i.createElement(p.W, {
                            fontSize: p.Ca.Size5,
                            type: p.Wb.Span
                        }, "·"))), l = i.createElement(p.Ya, {
                            display: p.X.Flex
                        }, g, i.createElement(p.W, {
                            fontSize: p.Ca.Size5,
                            type: p.Wb.Span,
                            "data-test-selector": u.ClipCurator
                        }, m))
                    }
                    if (t && null === t.game) return i.createElement("div", null, n, i.createElement(h, {
                        video: t
                    }), l);
                    var f = null;
                    null === t ? f = i.createElement(p.jb, {
                        "data-test-selector": u.GameImagePlaceholder,
                        height: 55,
                        width: 40
                    }) : null !== t.game && (f = i.createElement(p.U, {
                        to: Object(o.c)(t.game.name),
                        "data-a-target": "video-info-game-boxart-link"
                    }, i.createElement(p.I, {
                        src: t.game.boxArtURL,
                        alt: t.game.name,
                        aspect: p.p.BoxArt,
                        size: p.J.Size4
                    })));
                    var v = null;
                    return null === t ? v = i.createElement(p.Ya, {
                        "data-test-selector": u.InfoPlaceholder,
                        display: p.X.Flex,
                        flexDirection: p.Aa.Column
                    }, i.createElement(p.jb, {
                        lineCount: 1,
                        width: 320
                    }), i.createElement(p.jb, {
                        lineCount: 1,
                        width: 240
                    })) : null !== t.game && (v = i.createElement("div", null, n, i.createElement(h, {
                        video: t
                    }), i.createElement(p.Ya, {
                        display: p.X.InlineFlex
                    }, i.createElement(a.a, {
                        linkTo: {
                            pathname: Object(o.c)(t.game.name),
                            state: {
                                content: s.PageviewContent.Game,
                                medium: s.PageviewMedium.VideoWatchPage
                            }
                        },
                        tooltip: Object(r.d)("Game", "VideoInfo"),
                        svgAsset: p.ub.NavGames,
                        title: t.game.name,
                        "data-a-target": "video-info-game-link"
                    }), l))), i.createElement(p.G, {
                        row: !0
                    }, i.createElement(p.Ya, {
                        flexShrink: 0,
                        margin: {
                            right: 1
                        }
                    }, f), i.createElement(p.H, {
                        overflow: p.db.Hidden
                    }, v))
                },
                f = Object(l.b)("VideoInfo", {
                    autoReportInteractive: !0
                })(g);
            n.d(t, !1, function() {
                return u
            }), n.d(t, !1, function() {
                return g
            }), n.d(t, "a", function() {
                return f
            })
        },
        i6WW: function(e, t, n) {
            "use strict";
            var i = n("/7QA"),
                r = n("RcPG"),
                a = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?"),
                o = new RegExp("(?:^|\\s)(?:https?:\\/\\/)?(?:www\\.)?twitch\\.tv\\/(\\w+)\\/clip\\/(\\w+)(?:$|\\s)?");
            var s = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?");
            n.d(t, "a", function() {
                return c
            });
            var l = /^(?:(https?:\/\/)?((?:[\w#%\-+=:~]+\.)+[a-z]{2,8}(?:\/[\w./#%&()\-+=:?~]*)?))$/;

            function c(e, t) {
                var n = e.match(l);
                if (!n) return null;
                if (t.blockLinks) return {
                    type: r.a.Text,
                    content: " <" + Object(i.d)("deleted link", "CreateMessageData") + "> "
                };
                var c = n[1],
                    d = n[2],
                    u = "" + (c || "https://") + d;
                if (t.parseClips && function(e) {
                        void 0 === e && (e = "");
                        var t = a.test(e) && !e.includes("clips.twitch.tv/2017/"),
                            n = o.test(e);
                        return t || n
                    }(u)) {
                    var p = function(e) {
                        void 0 === e && (e = "");
                        var t = e.match(a);
                        if (t && t.length > 0 && void 0 !== t.index) return t[1];
                        var n = e.match(o);
                        return n && n.length > 0 && void 0 !== n.index ? n[2] : ""
                    }(u);
                    return {
                        type: r.a.ClipLink,
                        content: {
                            slug: p,
                            url: u,
                            displayText: e
                        }
                    }
                }
                if (t.parseVods && function(e) {
                        return void 0 === e && (e = ""), s.test(e)
                    }(u)) {
                    var m = function(e) {
                        void 0 === e && (e = "");
                        var t = e.match(s);
                        return null === t ? "" : t && t.length > 0 && void 0 !== t.index ? t[1] : ""
                    }(u);
                    return {
                        type: r.a.VideoLink,
                        content: {
                            id: m,
                            url: u,
                            displayText: e
                        }
                    }
                }
                return {
                    type: r.a.Link,
                    content: {
                        displayText: e,
                        url: u
                    }
                }
            }
        },
        iS14: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("8jSG"),
                o = n("cMjZ"),
                s = n("zixI");

            function l() {
                var e = this;
                return Object(r.a)(s, {
                    props: function(t) {
                        return {
                            unblockUserMutation: function(n, r) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n
                                                        }
                                                    },
                                                    optimisticResponse: {
                                                        unblockUser: {
                                                            __typename: "UnblockUserPayload",
                                                            targetUser: {
                                                                __typename: "User",
                                                                id: n
                                                            }
                                                        }
                                                    },
                                                    update: function(e) {
                                                        var t = e.readFragment({
                                                            id: Object(o.a)(r),
                                                            fragment: a
                                                        });
                                                        t && (t.blockedUsers = t.blockedUsers.filter(function(e) {
                                                            return null !== e && e.id !== n
                                                        }), e.writeFragment({
                                                            id: Object(o.a)(r),
                                                            fragment: a,
                                                            data: t
                                                        }))
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return e.sent(), [3, 3];
                                            case 2:
                                                throw new Error("unblockUserMutation is not ready");
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        ifPV: function(e, t, n) {},
        ilCE: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RaidUpsell_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "targetChannelLogin"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "sourceChannelLogin"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "targetChannel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "targetChannelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "sourceChannel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "sourceChannelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "viewersCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 240
                }
            };
            n.loc.source = {
                body: "query RaidUpsell_Channel($targetChannelLogin: String $sourceChannelLogin: String) {\ntargetChannel: user(login: $targetChannelLogin) {\nid\nlogin\ndisplayName\n}\nsourceChannel: user(login: $sourceChannelLogin) {\nid\nstream {\nid\nviewersCount\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        iyGE: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("Pub/"),
                o = n("HzXE"),
                s = 60,
                l = 60 * s,
                c = 24 * l,
                d = 7 * c,
                u = 4 * d;
            var p = n("4w0E");

            function m(e) {
                var t = this;
                return Object(r.a)(p, {
                    props: function(n) {
                        return {
                            banUserMutation: function(r, p, m) {
                                return void 0 === p && (p = null), void 0 === m && (m = null), i.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(h) {
                                        switch (h.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                h.label = 1;
                                            case 1:
                                                return h.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: r,
                                                            expiresIn: p && function(e) {
                                                                if (!e) return "0s";
                                                                var t = e,
                                                                    n = "";
                                                                if (t > u) {
                                                                    var i = Math.floor(t / u);
                                                                    t -= i * u, n += i + "mo"
                                                                }
                                                                if (t > d) {
                                                                    var r = Math.floor(t / d);
                                                                    t -= r * d, n += r + "w"
                                                                }
                                                                if (t > c) {
                                                                    var a = Math.floor(t / c);
                                                                    t -= a * c, n += a + "d"
                                                                }
                                                                if (t > l) {
                                                                    var o = Math.floor(t / l);
                                                                    t -= o * l, n += o + "h"
                                                                }
                                                                if (t > s) {
                                                                    var p = Math.floor(t / s);
                                                                    t -= p * s, n += p + "m"
                                                                }
                                                                return t > 0 && (n += t + "s"), n
                                                            }(p),
                                                            reason: m
                                                        }
                                                    },
                                                    update: function(e, n) {
                                                        return function(e, t, n) {
                                                            if (t && t.data && t.data.banUserFromChatRoom && t.data.banUserFromChatRoom.ban && t.data.banUserFromChatRoom.ban.bannedUser && t.data.banUserFromChatRoom.ban.bannedUser.id) {
                                                                var r = Object(a.a)(e, n, t.data.banUserFromChatRoom.ban.bannedUser.id);
                                                                if (!r) return;
                                                                e.writeQuery({
                                                                    query: o,
                                                                    variables: {
                                                                        targetUserID: t.data.banUserFromChatRoom.ban.bannedUser.id,
                                                                        channelID: n
                                                                    },
                                                                    data: i.__assign({}, r, {
                                                                        chatRoomBanStatus: {
                                                                            isPermanent: t.data.banUserFromChatRoom.ban.isPermanent,
                                                                            __typename: "ChatRoomBanStatus"
                                                                        }
                                                                    })
                                                                })
                                                            }
                                                        }(e, n, t)
                                                    }
                                                })];
                                            case 2:
                                                return [2, h.sent().data];
                                            case 3:
                                                throw h.sent(), new Error("Unable to ban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Ban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
            n.d(t, "a", function() {
                return m
            })
        },
        "j+2s": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatList_Badges"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "badges"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "badge"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastBadges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "badge"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedBadge"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "badge"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayBadges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "badge"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 256
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatList_Badges($channelLogin: String!) {\nbadges {\n...badge\n}\nuser(login: $channelLogin) {\nid\nbroadcastBadges {\n...badge\n}\nself {\nselectedBadge {\n...badge\n}\ndisplayBadges {\n...badge\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("IKE4").definitions)), e.exports = i
        },
        j0ar: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("TSYQ"),
                a = n("q1tI"),
                o = n("x1M1"),
                s = n("Ue10"),
                l = (n("9KaG"), function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.onImageLoad = function() {
                            n.setState({
                                imageLoaded: !0
                            })
                        }, n.onMouseOver = function() {
                            n.setState({
                                isHovering: !0
                            })
                        }, n.onMouseOut = function() {
                            n.setState({
                                isHovering: !1
                            })
                        }, n.renderImage = function() {
                            var e = null,
                                t = r("chat-image", {
                                    "chat-image__animated": !!n.props.cheerText && n.state.imageLoaded
                                }, n.props.className);
                            if (n.props.srcSet.themed) e = a.createElement(s.Qa, {
                                display: n.state.imageLoaded ? s.X.InlineBlock : s.X.Hide
                            }, a.createElement(o.a, {
                                alt: n.props.alt,
                                className: t,
                                defaultRes: n.props.srcKey,
                                onLoad: n.onImageLoad,
                                onMouseOver: n.onMouseOver,
                                onMouseOut: n.onMouseOut,
                                sources: n.props.srcSet
                            }));
                            else {
                                for (var i = [], l = 0, c = Object.keys(n.props.srcSet.sources); l < c.length; l++) {
                                    var d = c[l];
                                    i.push(n.props.srcSet.sources[d] + " " + d)
                                }
                                e = a.createElement(s.Qa, {
                                    display: n.state.imageLoaded ? s.X.InlineBlock : s.X.Hide
                                }, a.createElement("img", {
                                    className: t,
                                    onLoad: n.onImageLoad,
                                    onMouseOver: n.onMouseOver,
                                    onMouseOut: n.onMouseOut,
                                    src: n.props.srcSet.sources[n.props.srcKey],
                                    srcSet: i.join(","),
                                    alt: n.props.alt
                                }))
                            }
                            return e
                        }, n.renderPlaceholder = function() {
                            return n.state.imageLoaded ? null : a.createElement(s.Qa, {
                                display: s.X.InlineBlock
                            }, a.createElement(s.W, {
                                type: s.Wb.Span,
                                className: "chat-image__placeholder",
                                align: s.gc.Top
                            }, a.createElement(s.jb, {
                                height: 28,
                                width: 28
                            })))
                        }, n.state = {
                            imageLoaded: !1,
                            isHovering: !1
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e;
                        return e = this.state.isHovering && this.state.imageLoaded ? a.createElement(s.Zb, {
                            direction: this.props.tooltipDirection || s.bc.Top,
                            label: this.props.alt,
                            display: s.X.Inline,
                            offsetY: "0.9rem",
                            "data-a-target": "emote-name"
                        }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText) : a.createElement("span", {
                            "data-a-target": "emote-name"
                        }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText), this.props.cheerText ? a.createElement(s.W, {
                            type: s.Wb.Span,
                            noWrap: !0
                        }, e) : e
                    }, t
                }(a.Component));
            n.d(t, "a", function() {
                return l
            })
        },
        jPLR: function(e, t, n) {},
        "jQ+3": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                PageError: "page-error",
                Error: "error",
                Success: "success",
                Info: "info"
            }
        },
        je0y: function(e, t, n) {},
        jeZI: function(e, t, n) {},
        jsEL: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("u5aL"),
                s = n("Ue10"),
                l = (n("wC0O"), {
                    TITLE: "clips-modal-title",
                    MAIN_BODY: "clips-modal-main-body",
                    SUCCESS_BODY: "clips-modal-success-body",
                    ERROR_BODY: "clips-modal-error-body",
                    SUBMIT_BUTTON: "clips-modal-submit-button",
                    CANCEL_BUTTON: "clips-modal-cancel-button"
                }),
                c = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderSuccess = function() {
                            return t.props.successContent ? r.createElement(s.Fb, {
                                "data-test-selector": l.SUCCESS_BODY,
                                padding: {
                                    x: 2,
                                    y: 1
                                },
                                margin: {
                                    bottom: 1
                                },
                                borderMarked: !0,
                                background: s.r.Alt,
                                fullWidth: !0
                            }, r.createElement(s.W, {
                                type: s.Wb.Strong
                            }, t.props.successContent)) : null
                        }, t.renderError = function() {
                            return t.props.errorContent ? r.createElement(s.Fb, {
                                "data-test-selector": l.ERROR_BODY,
                                padding: {
                                    x: 1,
                                    y: .5
                                },
                                margin: {
                                    bottom: 1
                                },
                                borderMarked: !0,
                                background: s.r.Alt,
                                fullWidth: !0
                            }, r.createElement(s.W, {
                                type: s.Wb.Strong,
                                color: s.O.Error
                            }, t.props.errorContent)) : null
                        }, t.onSubmit = function() {
                            t.props.onSubmit()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return this.props.successContent ? r.createElement(o.a, {
                            onClickOut: this.props.onClose
                        }, r.createElement(s.Fb, {
                            padding: 2,
                            background: s.r.Base,
                            className: "clip-modal"
                        }, this.renderSuccess(), r.createElement(s.Ya, {
                            display: s.X.Flex,
                            justifyContent: s.Xa.Center
                        }, r.createElement(s.Ya, {
                            margin: {
                                x: 1
                            }
                        }, r.createElement(s.z, {
                            "data-test-selector": l.CANCEL_BUTTON,
                            onClick: this.props.onClose
                        }, Object(a.d)("Close", "ClipsModal")))))) : r.createElement(o.a, {
                            onClickOut: this.props.onClose
                        }, r.createElement(s.Fb, {
                            padding: 2,
                            background: s.r.Base,
                            className: "clip-modal"
                        }, r.createElement(s.Fb, {
                            "data-test-selector": l.TITLE,
                            borderBottom: !0,
                            margin: {
                                bottom: 2
                            },
                            padding: {
                                bottom: 1
                            }
                        }, this.props.title), r.createElement(s.Fb, {
                            "data-test-selector": l.MAIN_BODY,
                            borderBottom: !0,
                            margin: {
                                bottom: 2
                            },
                            padding: {
                                bottom: 2
                            }
                        }, this.renderError(), this.props.body), r.createElement(s.Ya, {
                            display: s.X.Flex,
                            justifyContent: s.Xa.Center
                        }, r.createElement(s.Ya, {
                            margin: {
                                x: 1
                            }
                        }, r.createElement(s.z, {
                            "data-test-selector": l.CANCEL_BUTTON,
                            type: s.F.Text,
                            onClick: this.props.onClose
                        }, Object(a.d)("Cancel", "ClipsModal"))), r.createElement(s.Ya, {
                            margin: {
                                x: 1
                            }
                        }, r.createElement(s.z, {
                            "data-test-selector": l.SUBMIT_BUTTON,
                            type: this.props.buttonType ? this.props.buttonType : s.F.Default,
                            onClick: this.onSubmit,
                            disabled: this.props.submitDisabled
                        }, this.props.buttonContent), this.props.isLoading && r.createElement(s.ab, {
                            delay: 0
                        })))))
                    }, t
                }(r.Component),
                d = n("iyGE"),
                u = n("GnwI"),
                p = 86400,
                m = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isLoading: !1,
                            hasErrored: !1,
                            hasSucceeded: !1
                        }, t.renderTitle = function() {
                            return t.props.isTemporary ? r.createElement(s.W, {
                                type: s.Wb.H5,
                                ellipsis: !0
                            }, Object(a.d)("Timeout this Clip Creator for 24 hours from Your Channel", "ClipsModalBanUser")) : r.createElement(s.W, {
                                type: s.Wb.H5,
                                ellipsis: !0
                            }, Object(a.d)("Ban this Clip Creator from Your Channel", "ClipsModalBanUser"))
                        }, t.renderBodyText = function() {
                            return t.props.isTemporary ? r.createElement(s.W, null, Object(a.d)("{clipCreator} will temporarily be timed out from creating clips and chatting in your channel for 24 hours.", {
                                clipCreator: t.props.targetUser.displayName
                            }, "ClipsModalBanUser")) : r.createElement(s.W, null, Object(a.d)("{clipCreator} will be permanently banned from creating clips and chatting in your channel.", {
                                clipCreator: t.props.targetUser.displayName
                            }, "ClipsModalBanUser"))
                        }, t.renderButtonText = function() {
                            return t.props.isTemporary ? Object(a.d)("Timeout User", "ClipsModalBanUser") : Object(a.d)("Ban User", "ClipsModalBanUser")
                        }, t.renderSuccess = function() {
                            return t.state.hasSucceeded ? Object(a.d)("Success!", "ClipsModalBanUser") : null
                        }, t.renderFailure = function() {
                            return t.state.hasErrored ? t.props.isTemporary ? Object(a.d)("There was a problem timing out this clip creator", "ClipsModalBanUser") : Object(a.d)("There was a problem banning this clip creator", "ClipsModalBanUser") : null
                        }, t.banUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t, n;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            this.setState({
                                                isLoading: !0,
                                                hasSucceeded: !1,
                                                hasErrored: !1
                                            }), e = this.props.targetUser.login, t = this.props.isTemporary ? this.props.banUserMutation(e, p) : this.props.banUserMutation(e), i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), [4, t];
                                        case 2:
                                            return !(n = i.sent().banUserFromChatRoom) || n.error ? this.setState({
                                                hasErrored: !0,
                                                isLoading: !1
                                            }) : this.setState({
                                                hasSucceeded: !0,
                                                isLoading: !1
                                            }), [3, 4];
                                        case 3:
                                            return i.sent(), this.setState({
                                                hasErrored: !0,
                                                isLoading: !1
                                            }), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        return r.createElement(c, {
                            onSubmit: this.banUser,
                            onClose: this.props.onClose,
                            title: this.renderTitle(),
                            body: this.renderBodyText(),
                            buttonContent: this.renderButtonText(),
                            buttonType: s.F.Alert,
                            submitDisabled: this.state.isLoading || this.state.hasSucceeded,
                            successContent: this.renderSuccess(),
                            errorContent: this.renderFailure(),
                            isLoading: this.state.isLoading
                        })
                    }, t
                }(r.Component),
                h = Object(u.b)("ClipsModalBanUser")(Object(d.a)(function(e) {
                    return {
                        channelID: e.broadcasterID
                    }
                })(m)),
                g = n("yR8l"),
                f = n("vUXZ");

            function v(e) {
                return Object(g.a)(f, e)
            }
            var b = n("DJtx"),
                k = (n("n9Ey"), {
                    isLoading: !1,
                    hasErrored: !1,
                    hasSucceeded: !1
                }),
                y = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.onDeleteClick = function() {
                            return i.__awaiter(n, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            this.setState({
                                                isLoading: !0,
                                                hasSucceeded: !1,
                                                hasErrored: !1
                                            }), e.label = 1;
                                        case 1:
                                            return e.trys.push([1, 3, , 4]), this.props.data.clip ? [4, this.props.deleteClip(this.props.slug)] : [2];
                                        case 2:
                                            return e.sent(), this.setState({
                                                isLoading: !1,
                                                hasSucceeded: !0
                                            }), [3, 4];
                                        case 3:
                                            return e.sent(), this.setState({
                                                isLoading: !1,
                                                hasErrored: !0
                                            }), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, n.state = k, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = [r.createElement(s.W, {
                            key: "title",
                            type: s.Wb.H4
                        }, Object(a.d)("Delete This Clip", "ClipsModalDelete")), r.createElement(s.Ya, {
                            key: "message",
                            margin: {
                                top: 1
                            }
                        }, r.createElement(s.W, {
                            type: s.Wb.P,
                            color: s.O.Alt2
                        }, Object(a.d)("This clip will be permanently deleted.", "ClipsModalDelete")))];
                        if (!this.props.data.clip) return null;
                        var t = null;
                        this.props.data.clip.curator && (t = r.createElement("span", null, " • ", Object(a.d)("Clipped by {curator}", {
                            curator: this.props.data.clip.curator.login
                        }, "ClipsModalDelete")));
                        var n = r.createElement(s.Fb, {
                            display: s.X.Flex,
                            flexWrap: s.Ba.NoWrap
                        }, r.createElement(s.Ya, {
                            className: "clips-modal-delete__thumb",
                            margin: {
                                right: 1
                            }
                        }, r.createElement(s.o, {
                            ratio: s.p.Aspect16x9
                        }, r.createElement("img", {
                            src: this.props.data.clip.thumbnailURL
                        }))), r.createElement(s.Ya, null, r.createElement(s.W, {
                            type: s.Wb.H5
                        }, this.props.data.clip.title), r.createElement(s.W, {
                            color: s.O.Alt2
                        }, Object(a.d)("{created, date, medium}", {
                            created: new Date(this.props.data.clip.createdAt)
                        }, "ClipsModalDelete"), t), r.createElement(s.W, {
                            color: s.O.Alt2
                        }, Object(a.d)("{viewCount, number} views", {
                            viewCount: this.props.data.clip.viewCount
                        }, "ClipsModalDelete"))));
                        return r.createElement(c, {
                            onSubmit: this.onDeleteClick,
                            onClose: this.props.onClose,
                            title: e,
                            body: n,
                            buttonContent: Object(a.d)("Delete", "ClipsModalDelete"),
                            buttonType: s.F.Alert,
                            submitDisabled: this.state.hasSucceeded || this.state.isLoading,
                            successContent: this.state.hasSucceeded ? Object(a.d)("Success!", "ClipsModalDelete") : null,
                            errorContent: this.state.hasErrored ? Object(a.d)("There was a problem deleting this clip.", "ClipsModalDelete") : null,
                            isLoading: this.state.isLoading
                        })
                    }, t
                }(r.Component),
                C = Object(g.a)(b)(v({
                    props: function(e) {
                        return {
                            deleteClip: function(t) {
                                return i.__awaiter(void 0, void 0, void 0, function() {
                                    var n;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                return i.trys.push([0, 2, , 3]), [4, e.mutate({
                                                    variables: {
                                                        input: {
                                                            slugs: [t]
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return i.sent(), e.ownProps.onDelete && e.ownProps.onDelete(t), [3, 3];
                                            case 2:
                                                throw n = i.sent(), a.k.error(n, "Failed to delete clip"), n;
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })(y)),
                S = n("oJmH"),
                E = n("Vsf8"),
                N = {
                    isLoading: !1,
                    hasErrored: !1,
                    hasSucceeded: !1
                },
                O = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.deleteAll = function() {
                            return i.__awaiter(n, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            this.setState({
                                                isLoading: !0,
                                                hasSucceeded: !1,
                                                hasErrored: !1
                                            }), e.label = 1;
                                        case 1:
                                            return e.trys.push([1, 3, , 4]), [4, this.props.deleteAllClips(this.props.broadcastID, this.props.videoID)];
                                        case 2:
                                            return e.sent(), this.setState({
                                                isLoading: !1,
                                                hasSucceeded: !0
                                            }), [3, 4];
                                        case 3:
                                            return e.sent(), this.setState({
                                                isLoading: !1,
                                                hasErrored: !0
                                            }), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, n.renderSuccess = function() {
                            return n.state.hasSucceeded ? Object(a.d)("A request has been made to delete the clip. Please wait a few minutes for this to take effect.", "ClipsModalDeleteAll") : null
                        }, n.renderFailure = function() {
                            return n.state.hasErrored ? Object(a.d)("There was a problem deleting this clip.", "ClipsModalDeleteAll") : null
                        }, n.state = N, n
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = r.createElement(s.W, {
                            type: s.Wb.P
                        }, Object(a.d)("This clip and all other clips created from the same video will be permanently deleted.", "ClipsModalDeleteAll"));
                        return r.createElement(c, {
                            onSubmit: this.deleteAll,
                            onClose: this.props.onClose,
                            title: r.createElement(s.W, {
                                type: s.Wb.H4
                            }, Object(a.d)("Delete All Clips from Related Video", "ClipsModalDeleteAll")),
                            body: e,
                            buttonContent: Object(a.d)("Delete", "ClipsModalDeleteAll"),
                            buttonType: s.F.Alert,
                            submitDisabled: this.state.isLoading || this.state.hasSucceeded || "" === this.props.broadcastID,
                            isLoading: this.state.isLoading,
                            successContent: this.renderSuccess(),
                            errorContent: this.renderFailure()
                        })
                    }, t
                }(r.Component),
                _ = Object(S.compose)(Object(u.b)("ClipsModalDeleteAll"), v({
                    props: function(e) {
                        return {
                            deleteAllClips: function(t, n) {
                                return i.__awaiter(void 0, void 0, void 0, function() {
                                    var r, o, s;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                return i.trys.push([0, 6, , 7]), r = void 0, n ? [4, e.mutate({
                                                    variables: {
                                                        input: {
                                                            videoID: n
                                                        }
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return o = i.sent(), r = o.data, [3, 5];
                                            case 2:
                                                return t ? [4, e.mutate({
                                                    variables: {
                                                        input: {
                                                            broadcastID: t
                                                        }
                                                    }
                                                })] : [3, 4];
                                            case 3:
                                                return o = i.sent(), r = o.data, [3, 5];
                                            case 4:
                                                throw new Error("Invalid broadcastID specified for deleteAllClips");
                                            case 5:
                                                return e.ownProps.onDeleteAll && e.ownProps.onDeleteAll(r.deleteClips.clips), [3, 7];
                                            case 6:
                                                throw s = i.sent(), a.k.error(s, "Failed to delete clips from VOD"), s;
                                            case 7:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                }), Object(g.a)(E, {
                    props: function(e) {
                        var t = e.data.clip;
                        return t ? {
                            videoID: t.video ? t.video.id : null,
                            broadcastID: t.broadcast.id
                        } : {
                            videoID: null,
                            broadcastID: ""
                        }
                    },
                    options: function(e) {
                        return {
                            variables: {
                                slug: e.slug
                            }
                        }
                    }
                }))(O),
                w = {
                    isLoading: !1,
                    hasErrored: !1,
                    hasSucceeded: !1
                },
                D = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.renderSuccess = function() {
                            return n.state.hasSucceeded ? Object(a.d)("Clips successfully deleted.", "ClipsModalBatchDelete") : null
                        }, n.renderError = function() {
                            return n.state.hasErrored ? Object(a.d)("There was a problem deleting this clip.", "ClipsModalBatchDelete") : null
                        }, n.onDeleteClick = function() {
                            return i.__awaiter(n, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            this.setState({
                                                isLoading: !0,
                                                hasSucceeded: !1,
                                                hasErrored: !1
                                            }), e.label = 1;
                                        case 1:
                                            return e.trys.push([1, 3, , 4]), [4, this.props.deleteClips()];
                                        case 2:
                                            return e.sent(), this.setState({
                                                hasSucceeded: !0,
                                                isLoading: !1
                                            }), [3, 4];
                                        case 3:
                                            return e.sent(), this.setState({
                                                hasErrored: !0,
                                                isLoading: !1
                                            }), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, n.state = w, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = r.createElement(s.W, {
                                type: s.Wb.H4
                            }, Object(a.d)("Delete these clips?", "ClipsModalBatchDelete")),
                            t = r.createElement(s.W, {
                                type: s.Wb.P
                            }, Object(a.d)("These clips will be permanently deleted. Are you sure?", "ClipsModalBatchDelete"));
                        return r.createElement(c, {
                            onSubmit: this.onDeleteClick,
                            onClose: this.props.onClose,
                            title: e,
                            body: t,
                            buttonContent: Object(a.d)("Delete", "ClipsModalBatchDelete"),
                            buttonType: s.F.Alert,
                            submitDisabled: this.state.hasSucceeded || this.state.isLoading,
                            isLoading: this.state.isLoading,
                            successContent: this.renderSuccess(),
                            errorContent: this.renderError()
                        })
                    }, t
                }(r.Component),
                I = v({
                    props: function(e) {
                        return {
                            deleteClips: function() {
                                return i.__awaiter(void 0, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(n) {
                                        switch (n.label) {
                                            case 0:
                                                return n.trys.push([0, 2, , 3]), [4, e.mutate({
                                                    variables: {
                                                        input: {
                                                            slugs: e.ownProps.clipSlugs
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return n.sent(), e.ownProps.onBatchDelete && e.ownProps.onBatchDelete(), [3, 3];
                                            case 2:
                                                throw t = n.sent(), a.k.error(t, "Failed to delete clips"), t;
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })(D);
            n.d(t, "a", function() {
                return c
            }), n.d(t, "b", function() {
                return h
            }), n.d(t, "d", function() {
                return C
            }), n.d(t, "e", function() {
                return _
            }), n.d(t, "c", function() {
                return I
            })
        },
        "kF1+": function(e, t, n) {},
        kPBf: function(e, t) {},
        kPCN: function(e, t, n) {},
        kSkr: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "BlockUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BlockUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "blockUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 94
                }
            };
            n.loc.source = {
                body: "mutation BlockUser($input: BlockUserInput!) {\nblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        kVMo: function(e, t, n) {},
        kVrx: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return p
            }), n.d(t, "a", function() {
                return m
            }), n.d(t, "c", function() {
                return h
            });
            var i = n("/7QA"),
                r = n("f00E"),
                a = n("4rCz"),
                o = n("BKFw"),
                s = n("NZDK"),
                l = n("9kXc"),
                c = n("BZOq"),
                d = n("V3Pk"),
                u = n("WK0g"),
                p = function(e, t) {
                    return Object(u.b)(t).then(function(n) {
                        e.dispatch(Object(d.h)(n, t.bitsConfig))
                    }, function() {
                        e.dispatch(Object(d.g)(Object(a.d)("Unable to retrieve messages, please try again.", "routines-moderation")))
                    })
                },
                m = function(e, t) {
                    return Object(u.a)(t).then(function() {
                        e.dispatch(Object(d.f)(t.bannedUser))
                    }).catch(function(t) {
                        return e.dispatch(Object(d.e)(t))
                    })
                },
                h = function(e, t) {
                    var n = new s.a({
                            appId: i.a.algoliaApplicationID,
                            apiKey: i.a.algoliaAPIKey,
                            apolloClient: i.p.apollo.client,
                            logger: i.k,
                            config: i.a,
                            stats: i.p.stats
                        }),
                        a = r.a(),
                        u = Object(c.b)({
                            broadcastType: o.c,
                            broadcasterId: t.creatorId
                        }),
                        p = u.typeID,
                        m = u.params;
                    return n.queryForType(p, t.searchTerm, a, m).then(function(t) {
                        var n = Object(l.b)({
                            searchResults: t
                        });
                        n.currentVideoResults && e.dispatch(Object(d.i)(n.currentVideoResults))
                    }).catch(function() {})
                }
        },
        kXEd: function(e, t, n) {},
        km1c: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("TSYQ"),
                a = n("q1tI"),
                o = n("oJmH"),
                s = n("/7QA"),
                l = n("ZS2+"),
                c = n("MJbm"),
                d = n("eJ65"),
                u = n("yR8l"),
                p = n("x7UT"),
                m = n("0Log"),
                h = n("/aPz"),
                g = n("D7An"),
                f = n("gOYK"),
                v = n("d2C5"),
                b = n("jSzL"),
                k = n("Ahlu"),
                y = n("/MKj"),
                C = n("fvjX"),
                S = n("aCAx"),
                E = n("7CzK"),
                N = n("94Uw"),
                O = n("Ue10"),
                _ = (n("/nm5"), n("41XU")),
                w = l.a.wrap(function() {
                    return n.e(144).then(n.bind(null, "7lJP"))
                }, "UserImageUploader"),
                D = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.openModal = function() {
                            var e = t.props.data && t.props.data.user;
                            e && e.id && e.login && t.props.showModal(w, {
                                userID: e.id,
                                login: e.login,
                                displayName: e.displayName || e.login,
                                imageType: N.a.ProfileBanner,
                                showCloser: !0,
                                successCallback: t.imageUploaded
                            })
                        }, t.imageUploaded = function() {
                            t.props.data && t.props.data.refetch()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e, t, n = "channel-banner__image-default",
                            i = "channel-banner__header-type",
                            o = {
                                "channel-banner--open": !this.props.collapsed,
                                "channel-banner--side-nav": this.props.isSideNavBanner
                            },
                            l = {
                                "channel-banner__image--side-nav": this.props.isSideNavBanner
                            },
                            c = {
                                "channel-banner__edit-overlay-button--side-nav": this.props.isSideNavBanner
                            },
                            d = this.props.data;
                        d && !d.loading && this.props.firstPageLoaded && d.user && d.user.bannerImageURL ? (n = "channel-banner__image-loaded", t = {
                            backgroundImage: "url(" + d.user.bannerImageURL + ")"
                        }) : (l["channel-banner__image--default"] = !0, t = {
                            backgroundImage: "url(" + E + ")"
                        }), this.props.isSideNavBanner && (i = "channel-banner__side-nav-type");
                        var u = null;
                        if (this.props.canEdit) {
                            var p = this.props.isSideNavBanner ? a.createElement(O.Ya, {
                                display: O.X.Flex,
                                padding: {
                                    x: 3
                                },
                                justifyContent: O.Xa.Between,
                                fullWidth: !0
                            }, a.createElement(O.tb, {
                                asset: O.ub.Edit
                            }), a.createElement(O.W, null, Object(s.d)("Edit", "ChannelBanner"))) : a.createElement(O.Ya, null, a.createElement(O.Ya, null, a.createElement(O.tb, {
                                asset: O.ub.Edit
                            })), Object(s.d)("Update Profile Banner", "ChannelBanner"));
                            u = a.createElement(O.Fb, {
                                className: r("channel-banner__edit-overlay", c),
                                background: O.r.Overlay,
                                position: O.kb.Absolute,
                                attachTop: !0,
                                attachLeft: !0,
                                fullWidth: !0
                            }, a.createElement("button", {
                                className: "channel-banner__edit-overlay-button",
                                "data-test-selector": "channel-banner__edit-overlay-interactable",
                                onClick: this.openModal
                            }, a.createElement(O.Ya, {
                                display: O.X.Flex,
                                alignItems: O.f.Center,
                                flexDirection: O.Aa.Column,
                                justifyContent: O.Xa.Center
                            }, p)))
                        }
                        return e = a.createElement("div", {
                            className: r("channel-banner__image", l),
                            "data-test-selector": n,
                            style: t
                        }, u), a.createElement("div", {
                            className: r("channel-banner", o),
                            "data-test-selector": i,
                            onTransitionEnd: this.props.onTransitionEnd
                        }, a.createElement(O.Qa, {
                            fullWidth: !0,
                            fullHeight: !0
                        }, e))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.closeModal()
                    }, t
                }(a.Component),
                I = Object(u.a)(_, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin || !e.firstPageLoaded
                    }
                })(D);
            var T, M = Object(y.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }, function(e) {
                    return Object(C.bindActionCreators)({
                        closeModal: S.c,
                        showModal: S.d
                    }, e)
                })(I),
                R = n("tuvy"),
                L = n("i4un"),
                F = n("dIU+"),
                j = n("GnwI"),
                x = n("Ba7Q"),
                A = n("QjI3"),
                U = (n("BOil"), n("HXcb"));
            n.d(t, "a", function() {
                return Y
            }), n.d(t, "b", function() {
                return z
            }), n.d(t, "d", function() {
                return V
            }), n.d(t, "c", function() {
                return X
            });
            var P, B = l.a.wrap(function() {
                return n.e(145).then(n.bind(null, "g9Rq"))
            }, "EditProfileOverlay");
            ! function(e) {
                e.SocialButtonsDefault = "channel-header__social-buttons-default", e.SocialButtonsVariantB = "channel-header__social-buttons-variant-b"
            }(P || (P = {}));
            var V, W = "channel-header__edit-profile-overlay",
                H = "channel-header__verified-badge",
                G = "channel-header__live-indicator",
                Y = "yes",
                z = "browser-notifications-upsell-seen";
            ! function(e) {
                e[e.Channel = 1] = "Channel", e[e.Clips = 2] = "Clips", e[e.Collections = 3] = "Collections", e[e.Events = 4] = "Events", e[e.Success = 5] = "Success", e[e.Followers = 6] = "Followers", e[e.Following = 7] = "Following", e[e.Videos = 8] = "Videos"
            }(V || (V = {}));
            var q = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.verifiedBadgeElement = a.createElement(O.Zb, {
                            label: Object(s.d)("Verified", "ChannelHeader"),
                            direction: O.bc.Right
                        }, a.createElement(O.Ya, {
                            className: "channel-header__verified",
                            "data-target": H,
                            display: O.X.Flex,
                            alignItems: O.f.Center,
                            margin: {
                                left: 1
                            }
                        }, a.createElement(O.tb, {
                            asset: O.ub.Verified
                        }))), n.ChannelStatusIndicatorElement = a.createElement(O.Ya, {
                            margin: {
                                left: 1
                            },
                            "data-target": G
                        }, a.createElement(O.Zb, {
                            label: Object(s.d)("Live Now", "ChannelHeader"),
                            direction: O.bc.Right
                        }, a.createElement(O.K, {
                            status: O.M.Live,
                            pulse: !0
                        }))), n.onResetOffline = function() {
                            n.resetOfflineTimer = void 0, n.setState({
                                live: !1
                            })
                        }, n.renderAvatarEditButton = function() {
                            return n.props.data && n.props.data.user && n.props.data.user.id && n.props.data.user.login && n.isChannelEditor() ? a.createElement(O.Fb, {
                                className: W,
                                background: O.r.Overlay,
                                position: O.kb.Absolute,
                                attachTop: !0,
                                attachLeft: !0,
                                fullHeight: !0,
                                fullWidth: !0,
                                display: O.X.InlineFlex,
                                alignItems: O.f.Center,
                                justifyContent: O.Xa.Center
                            }, a.createElement(B, {
                                userID: n.props.data.user.id,
                                login: n.props.data.user.login,
                                displayName: n.props.data.user.displayName || n.props.data.user.login
                            })) : null
                        }, n.toggleChannelBanner = function() {
                            n.setState(function(e) {
                                var t = !e.bannerSlideIn;
                                return t ? {
                                    bannerHidden: !e.bannerHidden,
                                    bannerSlideIn: t
                                } : {
                                    bannerSlideIn: t
                                }
                            })
                        }, n.completedBannerAnimation = function() {
                            n.setState(function(e) {
                                return e.bannerSlideIn ? e : {
                                    bannerHidden: !0
                                }
                            })
                        }, n.onUpdateDebounce = function() {
                            if (n.resizeAnimationFrame && (clearTimeout(n.resizeAnimationFrame), n.resizeAnimationFrame = null), n.channelHeader) {
                                var e = n.channelHeader.querySelector('[data-target="channel-header-left"]');
                                n.updateWidth(n.getWidth(e).width), n.resizeAnimationFrame = setTimeout(n.handleWindowResize, 0)
                            }
                        }, n.handleWindowResize = function() {
                            n.resizeAnimationFrame = null, n.getChannelHeaderSize()
                        }, n.maybeShowBrowserNotificationsUpsell = function() {
                            return i.__awaiter(n, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return !s.m.get(z, !1) && Object(v.a)() && Object(b.c)() && s.p.experiments.getAssignment(g.b.BrowserNotificationsUpsell) === Y ? [4, f.a.hasPushSubscription()] : [3, 3];
                                        case 1:
                                            return e.sent() ? [3, 3] : (s.m.set(z, !0), this.props.showBrowserNotificationsUpsellModal(), [4, f.a.userSubscribe(k.a.Channel)]);
                                        case 2:
                                            e.sent(), this.props.closeBrowserNotificationsUpsellModal(), e.label = 3;
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }, n.saveChannelHeaderRef = function(e) {
                            return n.channelHeader = e
                        }, n.toggleLiveNotificationsBtnShown = function(e) {
                            n.setState({
                                showLiveNotificationsButton: e
                            })
                        }, n.state = {
                            live: !1,
                            bannerHidden: !0,
                            bannerSlideIn: !1
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.setState({
                            live: this.isLiveGraphQL(this.props)
                        })
                    }, t.prototype.componentDidMount = function() {
                        window.addEventListener("resize", this.onUpdateDebounce), !this.props.data || this.props.data.loading || this.props.data.error || this.getChannelHeaderSize(), this.reportInteractive()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = this.props,
                            n = e.pubsub.messages.viewCount,
                            i = t.pubsub.messages.viewCount;
                        e.channelLogin !== t.channelLogin ? (this.clearResetOfflineTimer(), this.setState({
                            live: this.isLiveGraphQL(e),
                            showLiveNotificationsButton: void 0
                        })) : n && n !== i ? (this.clearResetOfflineTimer(), this.resetOfflineTimer = setTimeout(this.onResetOffline, 6e4), this.setState({
                            live: !0
                        })) : this.isLiveGraphQL(e) !== this.isLiveGraphQL(t) && (this.clearResetOfflineTimer(), this.setState({
                            live: this.isLiveGraphQL(e)
                        })), e.data && !e.data.loading && void 0 === this.state.showLiveNotificationsButton && this.setState({
                            showLiveNotificationsButton: this.getFollowingState(e)
                        })
                    }, t.prototype.componentDidUpdate = function() {
                        this.channelHeader && this.updateWidth(this.getWidth(this.channelHeader.querySelector('[data-target="channel-header-left"]')).width), this.onUpdateDebounce(), this.reportInteractive()
                    }, t.prototype.componentWillUnmount = function() {
                        this.clearResetOfflineTimer(), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.onUpdateDebounce)
                    }, t.prototype.updateWidth = function(e) {
                        var t = e !== this.width || this.width !== this.prevWidth;
                        void 0 !== this.width && (this.prevWidth = this.width), this.width !== e && (this.width = e), t && (this.resizeAnimationFrame && (clearTimeout(this.resizeAnimationFrame), this.resizeAnimationFrame = null), this.onUpdateDebounce())
                    }, t.prototype.render = function() {
                        var e, t, n = 0,
                            i = 0,
                            o = 0,
                            l = s.a.defaultAvatarURL;
                        this.props.data && this.props.data.user && !this.props.data.loading && !this.props.data.error && (n = this.props.data.user.videos && this.props.data.user.videos.totalCount || 0, i = this.props.data.user.followers && this.props.data.user.followers.totalCount || 0, o = this.props.data.user.follows && this.props.data.user.follows.totalCount || 0, l = this.props.data.user.profileImageURL || s.a.defaultAvatarURL, e = this.props.data.user.displayName, t = this.props.data.user.roles && this.props.data.user.roles.isPartner);
                        var u, p = this.state.live && !this.isActiveTab(V.Channel),
                            m = this.createChannelLinks(n, i, o),
                            h = {
                                "channel-header__user": !0,
                                "channel-header__user--selected": this.isActiveTab(V.Channel)
                            },
                            g = a.createElement(O.Ya, {
                                display: O.X.Flex,
                                flexWrap: O.Ba.NoWrap,
                                alignItems: O.f.Center,
                                flexShrink: 0
                            }, a.createElement(O.Ya, {
                                className: "channel-header__user-avatar channel-header__user-avatar--active",
                                margin: {
                                    right: 1
                                },
                                display: O.X.Flex,
                                flexShrink: 0,
                                alignItems: O.f.Stretch
                            }, a.createElement(O.Ya, {
                                position: O.kb.Relative
                            }, a.createElement(O.q, {
                                size: 36,
                                src: l,
                                alt: e || ""
                            }), this.renderAvatarEditButton())), e ? a.createElement(O.W, {
                                type: O.Wb.H5
                            }, e) : a.createElement(O.Ya, {
                                alignItems: O.f.Center
                            }, a.createElement(O.jb, {
                                lineCount: 1,
                                width: 120
                            })), p && this.ChannelStatusIndicatorElement, t && this.verifiedBadgeElement);
                        u = this.isActiveTab(V.Channel) ? a.createElement("div", {
                            className: "channel-header__banner-toggle",
                            onClick: this.toggleChannelBanner,
                            "data-target": "channel-header__channel-link",
                            "data-a-target": "user-channel-header-item"
                        }, g) : this.props.channelLogin ? a.createElement(O.U, {
                            to: "/" + this.props.channelLogin || "#",
                            "data-target": "channel-header__channel-link",
                            "data-a-target": "user-channel-header-item",
                            hoverUnderlineNone: !0
                        }, g) : g;
                        var f = this.state.bannerHidden ? O.X.HideAccessible : O.X.Block,
                            v = null,
                            b = this.renderSocialButtons();
                        return this.isActiveTab(V.Channel) && (v = a.createElement(O.Ya, {
                            display: f
                        }, a.createElement(M, {
                            channelLogin: this.props.channelLogin,
                            canEdit: this.isChannelEditor(),
                            collapsed: !this.state.bannerSlideIn,
                            onTransitionEnd: this.completedBannerAnimation
                        }))), a.createElement(O.Ya, {
                            className: "channel-header",
                            flexShrink: 0
                        }, v, a.createElement(O.Ya, {
                            display: O.X.Flex,
                            justifyContent: O.Xa.Between,
                            flexWrap: O.Ba.NoWrap,
                            fullHeight: !0,
                            refDelegate: this.saveChannelHeaderRef,
                            margin: {
                                x: 3
                            }
                        }, a.createElement(O.Ya, {
                            display: O.X.Flex,
                            alignItems: O.f.Stretch,
                            flexShrink: 0,
                            flexWrap: O.Ba.NoWrap,
                            "data-target": "channel-header-left"
                        }, a.createElement(O.Qa, {
                            className: r(h),
                            padding: {
                                y: .5,
                                right: 2
                            },
                            display: O.X.Flex,
                            flexWrap: O.Ba.NoWrap,
                            alignItems: O.f.Center,
                            flexShrink: 0
                        }, u), this.renderTabs(m), a.createElement(O.Ya, {
                            className: "channel-header__item channel-header__item--no-underline",
                            padding: {
                                x: 1
                            },
                            flexShrink: 0,
                            alignSelf: O.g.Center,
                            "data-target": "channel-header-button"
                        }, a.createElement(d.a, {
                            alwaysMountBalloonContent: !0
                        }, a.createElement(O.A, {
                            icon: O.ub.NavMore,
                            ariaLabel: Object(s.d)("More", "ChannelHeader")
                        }), a.createElement(O.u, {
                            direction: O.v.Bottom,
                            noTail: !0
                        }, a.createElement(O.Ya, {
                            padding: {
                                y: 1
                            }
                        }, this.renderDropdown(m)))))), b), a.createElement(c.a, {
                            onResize: this.onUpdateDebounce
                        }))
                    }, t.prototype.isLiveGraphQL = function(e) {
                        if (e.data && e.data.user) return !!e.data.user.stream && "" !== e.data.user.stream.id
                    }, t.prototype.clearResetOfflineTimer = function() {
                        this.resetOfflineTimer && (clearTimeout(this.resetOfflineTimer), this.resetOfflineTimer = void 0)
                    }, t.prototype.generateUserLink = function(e) {
                        void 0 === e && (e = "");
                        var t = this.props.channelLogin;
                        return t ? "/" + t + "/" + e : "#"
                    }, t.prototype.renderTabs = function(e) {
                        var t = this;
                        return e.map(function(e) {
                            var n = e.count ? a.createElement(O.Ya, {
                                    className: "channel-header__item-count",
                                    display: O.X.Flex,
                                    margin: {
                                        left: .5
                                    }
                                }, a.createElement(O.W, {
                                    type: O.Wb.Span,
                                    fontSize: O.Ca.Size5
                                }, e.count)) : null,
                                i = t.generateUserLink(e.pathSuffix),
                                r = e.label.toLowerCase() + "-channel-header-item";
                            return a.createElement(O.Qa, {
                                key: "channel-header__item--" + e.label,
                                alignItems: O.f.Center,
                                flexShrink: 0
                            }, a.createElement(O.U, {
                                className: "channel-header__item channel-header__item--hide " + (e.isSelected ? "channel-header__item--selected" : ""),
                                to: i,
                                "data-target": "channel-header-item",
                                "data-a-target": r,
                                "data-test-selector": r,
                                hoverUnderlineNone: !0
                            }, a.createElement(O.Ya, {
                                padding: {
                                    x: 2,
                                    y: .5
                                },
                                display: O.X.Flex
                            }, a.createElement(O.W, {
                                type: O.Wb.Span,
                                fontSize: O.Ca.Size5
                            }, e.label), n)))
                        })
                    }, t.prototype.renderDropdown = function(e) {
                        var t = this;
                        return e.map(function(e) {
                            var n = e.count ? a.createElement(O.Ya, {
                                    className: "channel-header__item-count",
                                    display: O.X.Flex,
                                    margin: {
                                        left: .5
                                    }
                                }, a.createElement(O.W, {
                                    type: O.Wb.Span
                                }, e.count)) : null,
                                i = t.generateUserLink(e.pathSuffix);
                            return a.createElement(O.Ya, {
                                key: "channel-header__dropdown-item--" + e.label,
                                "data-target": "channel-header-dropdown-item"
                            }, a.createElement(O.Va, {
                                linkTo: i,
                                disabled: "#" === i
                            }, a.createElement(O.Ya, {
                                className: "channel-header__dropdown-hover-target",
                                padding: {
                                    y: .5,
                                    x: 1
                                },
                                display: O.X.Flex
                            }, a.createElement(O.W, {
                                type: O.Wb.Span
                            }, e.label), n)))
                        })
                    }, t.prototype.createChannelLinks = function(e, t, n) {
                        var i = [{
                            label: Object(s.d)("Videos", "ChannelHeader"),
                            count: Object(s.f)(e),
                            pathSuffix: Object(R.b)() ? "videos" : "videos/all",
                            isSelected: this.isActiveTab(V.Videos)
                        }];
                        return Object(R.b)() || Object(R.a)() || (i = i.concat([{
                            label: Object(s.d)("Clips", "ChannelHeader"),
                            pathSuffix: "clips",
                            isSelected: this.isActiveTab(V.Clips)
                        }, {
                            label: Object(s.d)("Collections", "ChannelHeader"),
                            pathSuffix: "collections",
                            isSelected: this.isActiveTab(V.Collections)
                        }])), i.concat([{
                            label: Object(s.d)("Events", "ChannelHeader"),
                            pathSuffix: "events",
                            isSelected: this.isActiveTab(V.Events)
                        }, {
                            label: Object(s.d)("Followers", "ChannelHeader"),
                            count: Object(s.f)(t),
                            pathSuffix: "followers",
                            isSelected: this.isActiveTab(V.Followers)
                        }, {
                            label: Object(s.d)("Following", "ChannelHeader"),
                            count: Object(s.f)(n),
                            pathSuffix: "following",
                            isSelected: this.isActiveTab(V.Following)
                        }])
                    }, t.prototype.isActiveTab = function(e) {
                        return V[this.props.currentPage] === V[e]
                    }, t.prototype.isChannelEditor = function() {
                        return !!(this.props.data && this.props.data.currentUser && this.props.data.user && this.props.data.currentUser.roles && (this.props.data.currentUser.id === this.props.data.user.id || this.props.data.currentUser.roles.isStaff || this.props.data.currentUser.roles.isSiteAdmin))
                    }, t.prototype.getChannelHeaderSize = function() {
                        if (this.channelHeader) {
                            var e = this.channelHeader.querySelector('[data-target="channel-header-left"]'),
                                t = this.channelHeader.querySelector('[data-target="channel-header-right"]'),
                                n = this.channelHeader.querySelectorAll('[data-target="channel-header-item"]'),
                                i = this.channelHeader.querySelectorAll('[data-target="channel-header-dropdown-item"]');
                            if (n.length) {
                                for (var r = 0; r < n.length; r++) {
                                    var a = n[r];
                                    a.classList.contains("channel-header__item--hide") && (a.classList.remove("channel-header__item--hide"), i[r].classList.add("channel-header__item--hide"))
                                }
                                var o = this.getWidth(this.channelHeader).width,
                                    s = this.getWidth(e).width + this.getWidth(t).width + 20 - o,
                                    l = [];
                                if (s > 0) {
                                    var c = function(e) {
                                            var t = n[e];
                                            if (!t.classList.contains("channel-header__item--hide")) {
                                                var r = d.getWidth(t);
                                                if (l.push(function() {
                                                        t.classList.add("channel-header__item--hide"), i[e].classList.remove("channel-header__item--hide")
                                                    }), (s -= r.width) <= 0) return "break"
                                            }
                                        },
                                        d = this;
                                    for (r = n.length - 1; r >= 0; r--) {
                                        if ("break" === c(r)) break
                                    }
                                }
                                l.forEach(function(e) {
                                    return e()
                                });
                                var u = this.channelHeader.querySelector('[data-target="channel-header-button"]');
                                if (u) {
                                    var p = !this.channelHeader.querySelectorAll('[data-target="channel-header-item"].channel-header__item--hide').length;
                                    u.classList.toggle("channel-header__item--hide", p)
                                }
                            }
                        }
                    }, t.prototype.getWidth = function(e) {
                        return e ? {
                            width: e.clientWidth
                        } : {
                            width: 0
                        }
                    }, t.prototype.reportInteractive = function() {
                        !this.props.data || this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                    }, t.prototype.renderSocialButtons = function() {
                        var e = this.getFollowingState(),
                            t = null,
                            n = P.SocialButtonsDefault;
                        if (Object(L.c)()) {
                            var i = r("channel-header__follow-btn", {
                                    "channel-header__follow-btn--following": !!this.state.showLiveNotificationsButton
                                }),
                                o = r("channel-header__notification-toggle-container", {
                                    "channel-header__notification-toggle-container--visible": !!this.state.showLiveNotificationsButton
                                });
                            n = P.SocialButtonsVariantB, t = a.createElement(a.Fragment, null, a.createElement(O.Ya, {
                                className: "channel-header__follow-btn-container",
                                display: O.X.Flex,
                                overflow: O.db.Hidden,
                                alignItems: O.f.Center,
                                padding: {
                                    x: 1
                                },
                                fullHeight: !0
                            }, a.createElement(O.Ya, {
                                display: O.X.Flex,
                                justifyContent: O.Xa.Center,
                                flexDirection: O.Aa.Column,
                                margin: {
                                    right: 1
                                }
                            }, a.createElement(O.Ya, {
                                display: O.X.InlineFlex,
                                justifyContent: O.Xa.Center
                            }, a.createElement("div", {
                                className: i
                            }, a.createElement(F.a, {
                                updateContainerWidth: this.onUpdateDebounce,
                                channelLogin: this.props.channelLogin,
                                onFollow: this.maybeShowBrowserNotificationsUpsell,
                                followUIType: F.b.IconAndText,
                                unfollowUIType: F.b.IconOnly,
                                onToggleAnimationComplete: this.toggleLiveNotificationsBtnShown,
                                hideDropdownWhenFollowing: !0,
                                fullWidthButton: !0,
                                hollowIcons: !0,
                                animatedButton: !0,
                                useContextualModals: !0
                            })))), a.createElement("div", {
                                className: o
                            }, a.createElement(x.a, {
                                channelLogin: this.props.channelLogin,
                                toggleType: x.b.Button,
                                tabIndex: this.state.showLiveNotificationsButton ? 0 : -1,
                                followData: this.getFollowData(),
                                showTooltips: !0
                            }))), a.createElement(O.Ya, null, a.createElement(A.a, {
                                updateContainerWidth: this.onUpdateDebounce,
                                channelLogin: this.props.channelLogin,
                                hideEsportsSubscription: this.props.hideEsportsSubscription,
                                subscribedButtonType: O.F.Default,
                                unsubscribedButtonType: e ? O.F.Default : O.F.Hollow,
                                forceIcon: !0
                            })))
                        } else(this.props.channelIsHosting || Object(L.e)()) && (n = P.SocialButtonsDefault, t = a.createElement(a.Fragment, null, a.createElement(O.Ya, {
                            display: O.X.Flex,
                            alignItems: O.f.Stretch,
                            margin: {
                                left: 1
                            }
                        }, a.createElement(F.a, {
                            updateContainerWidth: this.onUpdateDebounce,
                            channelLogin: this.props.channelLogin,
                            onFollow: this.maybeShowBrowserNotificationsUpsell,
                            followUIType: F.b.IconAndText,
                            unfollowUIType: F.b.IconOnly,
                            useContextualModals: !0
                        })), a.createElement(O.Ya, {
                            margin: {
                                left: 1
                            }
                        }, a.createElement(A.a, {
                            updateContainerWidth: this.onUpdateDebounce,
                            channelLogin: this.props.channelLogin,
                            hideEsportsSubscription: this.props.hideEsportsSubscription
                        }))));
                        return a.createElement(O.Ya, {
                            display: O.X.Flex,
                            flexWrap: O.Ba.NoWrap,
                            flexShrink: 0,
                            alignItems: O.f.Center,
                            className: "channel-header__right",
                            "data-test-selector": n,
                            "data-target": "channel-header-right"
                        }, t)
                    }, t.prototype.getFollowingState = function(e) {
                        return void 0 === e && (e = this.props), !!(e.data && e.data.user && e.data.user.self && e.data.user.self.follower) && null !== e.data.user.self.follower.disableNotifications
                    }, t.prototype.getFollowData = function() {
                        if (this.props.data && this.props.data.user && this.props.data.user.id) return this.props.data.user
                    }, t
                }(a.Component),
                X = Object(o.compose)(Object(u.a)(U, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(p.a)([{
                    topic: function(e) {
                        return e.channelLogin ? Object(h.K)(e.channelLogin) : ""
                    },
                    skip: function(e) {
                        return !e.channelLogin || !e.firstPageLoaded
                    },
                    mapMessageTypesToProps: (T = {}, T[m.PubsubMessageType.ViewCount] = "viewCount", T)
                }]), Object(j.b)("ChannelHeader"))(q)
        },
        kmJV: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelRoot_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "currentChannelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channelCurrentUser"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "currentChannelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 274
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/channel/queries/channel.gql"\n#import "twilight/features/channel/queries/channel-current-user.gql"\nquery ChannelRoot_Channel(\n$currentChannelLogin: String!\n) {\ncurrentUser {\n...channelCurrentUser\n}\nuser(login: $currentChannelLogin) {\n...channel\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("BbLt").definitions)), i.definitions = i.definitions.concat(a(n("NJiF").definitions)), e.exports = i
        },
        kmde: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RealtimeStreamTagList"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "tags"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tagFragment"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    alias: {
                                                        kind: "Name",
                                                        value: "gameTags"
                                                    },
                                                    name: {
                                                        kind: "Name",
                                                        value: "tags"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "tagType"
                                                        },
                                                        value: {
                                                            kind: "EnumValue",
                                                            value: "CONTENT"
                                                        }
                                                    }],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "FragmentSpread",
                                                            name: {
                                                                kind: "Name",
                                                                value: "tagFragment"
                                                            },
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 248
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/tags/models/tag-fragment.gql"\nquery RealtimeStreamTagList($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nstream {\nid\ntags {\n...tagFragment\n}\ngame {\nid\ngameTags: tags(tagType: CONTENT) {\n...tagFragment\n}\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("iiOx").definitions)), e.exports = i
        },
        "ky+Y": function(e, t, n) {},
        l41m: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return d
            }), n.d(t, "c", function() {
                return p
            }), n.d(t, "d", function() {
                return m
            }), n.d(t, "b", function() {
                return k
            });
            var i = n("mrSG"),
                r = n("QzU5"),
                a = n("DpwM"),
                o = n("g807"),
                s = n("RNNG"),
                l = n("pU2t"),
                c = n("KD05"),
                d = {
                    beginSec: Number.MIN_VALUE,
                    endSec: Number.MAX_VALUE
                },
                u = function(e, t) {
                    return t.commenter in e
                },
                p = function(e, t, n, i) {
                    var r = e.vodChat.comments,
                        a = r.currentVideoTime,
                        c = r.comments;
                    return 0 === c.commentCount ? [] : Array.from(new o.a(c)).reduce(function(r, o) {
                        return o.offset > a ? r : (o.comments.forEach(function(a) {
                            var o = Object(s.b)(c, a);
                            if (void 0 !== o && (n || !u(i, o))) return o.source === l.b && y(e.vodChat.comments.isReplayFilterOn, t) ? r : r.push(f(o, e, n, i, t))
                        }), r)
                    }, []).sort(h)
                },
                m = function(e) {
                    var t = function(e) {
                        return e.vodChat.comments.comments
                    }(e);
                    return Object.keys(t.parentComments).map(function(n) {
                        return b(t.parentComments[n], e)
                    }).filter(function(e) {
                        return void 0 !== e.video
                    }).sort(g)
                },
                h = function(e, t) {
                    return e.comment.contentOffset === t.comment.contentOffset ? e.comment.createdAt.getTime() - t.comment.createdAt.getTime() : e.comment.contentOffset - t.comment.contentOffset
                },
                g = function(e, t) {
                    return e.comment.createdAt.getTime() === t.comment.createdAt.getTime() ? t.comment.contentOffset - e.comment.contentOffset : t.lastUpdated.getTime() - e.lastUpdated.getTime()
                },
                f = function(e, t, n, i, r) {
                    var o = new Array,
                        s = new Array,
                        l = t.vodChat.comments.comments.replies[e.id],
                        c = e.createdAt;
                    return Array.isArray(l) && l.forEach(function(e) {
                        !n && u(i, e) || (e.source === a.f && y(t.vodChat.comments.isReplayFilterOn, r) ? (s.push(f(e, t, n, i)), c = C(c, e.createdAt)) : (o.push(f(e, t, n, i)), c = C(c, e.createdAt)))
                    }), y(t.vodChat.comments.isReplayFilterOn, r) ? {
                        author: t.vodChat.users.users[e.commenter],
                        comment: e,
                        lastUpdated: c,
                        replies: s.sort(h)
                    } : {
                        author: t.vodChat.users.users[e.commenter],
                        comment: e,
                        lastUpdated: c,
                        replies: o.sort(h)
                    }
                },
                v = function(e, t) {
                    var n = new Array,
                        i = t.vodChat.comments.comments.replies[e.id],
                        r = e.createdAt;
                    return Array.isArray(i) && i.forEach(function(e) {
                        n.push(v(e, t)), r = C(r, e.createdAt)
                    }), {
                        author: t.vodChat.users.users[e.commenter],
                        comment: e,
                        lastUpdated: r,
                        replies: n.sort(h)
                    }
                },
                b = function(e, t) {
                    var n = v(e, t);
                    return i.__assign({}, n, {
                        video: t.vodChat.moderation.videos[Object(c.a)(e.contentId)]
                    })
                },
                k = function(e) {
                    return 0 === e.commentCount ? d : {
                        beginSec: e.minOffset,
                        endSec: e.maxOffset
                    }
                },
                y = function(e, t) {
                    return !!t && (e && (t === r.a.Archive || t === r.a.Highlight))
                },
                C = function(e, t) {
                    return e.getTime() > t.getTime() ? e : t
                }
        },
        lNGo: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("04j6"),
                s = n("oi4T"),
                l = function(e) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var t, n, l, c;
                        return i.__generator(this, function(d) {
                            switch (d.label) {
                                case 0:
                                    t = null, d.label = 1;
                                case 1:
                                    return d.trys.push([1, 3, , 4]), [4, r.p.apollo.client.query({
                                        query: o,
                                        variables: {
                                            id: e.channelID
                                        }
                                    })];
                                case 2:
                                    return t = d.sent(), [3, 4];
                                case 3:
                                    return n = d.sent(), r.k.error(n, "ChatEvent query failed."), [3, 4];
                                case 4:
                                    return t && t.data || r.k.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), l = t && t.data && t.data.user || null, c = i.__assign({}, Object(s.a)(e), {
                                        broadcast_id: r.o.getVideoPlayerTrackingData().broadcastID,
                                        channel_id: e.channelID,
                                        emote_picker_sid: e.emotePickerSessionID,
                                        game: l && l.stream && l.stream.game && l.stream.game.name,
                                        live: !!(l && l.stream && l.stream.id.length > 0),
                                        partner: l && l.isPartner || !1,
                                        play_session_id: r.o.getVideoPlayerTrackingData().playSessionID,
                                        player: e.player,
                                        ritual_nca: e.fromNewChatterRitual || !1,
                                        sub_only_mode: e.subOnlyMode
                                    }), r.o.track(a.SpadeEventType.Chat, c), [2]
                            }
                        })
                    })
                }
        },
        lRNp: function(e, t, n) {},
        lZdE: function(e, t, n) {
            "use strict";

            function i(e) {
                return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
            }
            n.d(t, "a", function() {
                return i
            })
        },
        "lpj/": function(e, t, n) {},
        lw3P: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("yR8l"),
                r = n("ru7j");

            function a() {
                return Object(i.a)(r, {
                    props: function(e) {
                        return e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers ? {
                            blockedUsers: e.data.currentUser.blockedUsers.reduce(function(e, t) {
                                return t && t.id && e.push(t.id), e
                            }, [])
                        } : {
                            blockedUsers: []
                        }
                    },
                    skip: function(e) {
                        return !(e.isLoggedIn || e.authToken)
                    }
                })
            }
        },
        m493: function(e, t, n) {},
        mBWp: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Whispers_Tracking_CurrentUser"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hasTurbo"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "availability"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 86
                }
            };
            n.loc.source = {
                body: "query Whispers_Tracking_CurrentUser {\ncurrentUser {\nid\nhasTurbo\navailability\nlogin\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        mGiD: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelRoot_Video"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "collectionID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "includeCollection"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channelCurrentUser"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "options"
                                },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [{
                                        kind: "ObjectField",
                                        name: {
                                            kind: "Name",
                                            value: "includePrivate"
                                        },
                                        value: {
                                            kind: "BooleanValue",
                                            value: !0
                                        }
                                    }]
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channelVideo"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "collection"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "collectionID"
                                    }
                                }
                            }],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "includeCollection"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channelCollection"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 490
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/channel/queries/channel-current-user.gql"\n#import "twilight/features/channel/queries/channel-video.gql"\n#import "twilight/features/channel/queries/channel-collection.gql"\nquery ChannelRoot_Video(\n$videoID: ID!\n$collectionID: ID!\n$includeCollection: Boolean!\n) {\ncurrentUser {\n...channelCurrentUser\n}\nvideo(id: $videoID options: { includePrivate: true }) {\n...channelVideo\n}\ncollection(id: $collectionID) @include(if: $includeCollection) {\n...channelCollection\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("NJiF").definitions)), i.definitions = i.definitions.concat(a(n("RTtf").definitions)), i.definitions = i.definitions.concat(a(n("vtET").definitions)), e.exports = i
        },
        mM0V: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "inGameContent"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "InGameContent"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "description"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "info"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "productInfo"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "tags"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 144
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/fuel/models/product-info.gql"\nfragment inGameContent on InGameContent {\nid\ndescription\ninfo {\n...productInfo\n}\ntags\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("3ncn").definitions)), e.exports = i
        },
        mSxK: function(e, t, n) {
            "use strict";
            var i = n("km1c"),
                r = n("/MKj"),
                a = n("fvjX"),
                o = n("aCAx"),
                s = n("wxwP");
            var l = Object(r.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    showBrowserNotificationsUpsellModal: function() {
                        return Object(o.d)(s.a, {})
                    },
                    closeBrowserNotificationsUpsellModal: o.c
                }, e)
            })(i.c);
            n.d(t, "d", function() {
                return i.d
            }), n.d(t, !1, function() {}), n.d(t, "a", function() {
                return i.a
            }), n.d(t, "b", function() {
                return i.b
            }), n.d(t, "c", function() {
                return l
            })
        },
        mXgU: function(e, t, n) {},
        mmRu: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("mrSG"),
                a = n("q1tI"),
                o = n("u5aL"),
                s = n("/7QA"),
                l = n("Ue10"),
                c = function(e) {
                    return a.createElement(l.A, {
                        icon: l.ub.Emoticons,
                        ariaLabel: Object(s.d)("Emote picker", "EmotePickerButton"),
                        type: e.isActive ? l.C.Default : l.C.Secondary,
                        onClick: e.onClick,
                        "data-a-target": "emote-picker-button"
                    })
                },
                d = n("oJmH"),
                u = n("fvjX"),
                p = n("lZCe"),
                m = n("ZS2+"),
                h = n("yR8l"),
                g = n("x7UT"),
                f = n("Mj6i"),
                v = n("UUve"),
                b = n("1/iK"),
                k = n("aCAx"),
                y = n("D7An"),
                C = n("kRBY"),
                S = n("+pBb"),
                E = n("KriR"),
                N = n("GzyO"),
                O = n("OpME"),
                _ = n("cpJf"),
                w = n("W8Fi"),
                D = n("0WFu"),
                I = function(e, t) {
                    return t.map(function(t) {
                        return t.emotes && t.emoteSetID && !e.has(parseInt(t.emoteSetID, 10)) ? r.__assign({}, t, {
                            emotes: t.emotes.map(function(e) {
                                return r.__assign({}, e, {
                                    isLocked: !0
                                })
                            })
                        }) : t
                    }).map(function(e) {
                        return r.__assign({}, e, {
                            emotes: Object(O.e)(e.emotes, e.emoteSetID)
                        })
                    })
                },
                T = function(e) {
                    return e.tier && !isNaN(parseInt(e.tier, 10)) ? parseInt(e.tier, 10) / 1e3 : 1
                },
                M = n("GnwI"),
                R = n("br9A"),
                L = n("TSYQ"),
                F = n("8/mp"),
                j = n("8Ad5");

            function x(e) {
                return e.charCode === j.a.Enter || e.charCode === j.a.Space
            }
            var A, U = n("2xye"),
                P = n("7SjK"),
                B = n("4rCz"),
                V = (n("/Kya"), function(e) {
                    var t = {
                            "emote-picker__tab": !0
                        },
                        n = null,
                        i = null;
                    if (e.channelTabVisible) {
                        var o = L(r.__assign({}, t, {
                            "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                            "emote-picker__tab--disabled": !e.channelTabEnabled
                        }));
                        n = a.createElement(l.Qa, {
                            padding: {
                                x: 1
                            }
                        }, a.createElement("div", {
                            key: "ChannelTabLink",
                            id: "emote-picker__channel",
                            className: o,
                            onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                            onKeyPress: e.channelTabEnabled ? e.selectChannelTabKeypress : void 0,
                            "data-a-target": "emote-channel-tab",
                            tabIndex: 0
                        }, a.createElement("span", null, Object(B.d)("Channel", "EmotePicker"))))
                    }
                    if (e.allTabVisible) {
                        var s = L(r.__assign({}, t, {
                            "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                        }));
                        i = a.createElement(l.Qa, {
                            padding: {
                                x: 1
                            }
                        }, a.createElement("div", {
                            key: "allTabLink",
                            id: "emote-picker__all",
                            className: s,
                            onClick: e.selectAllTab,
                            onKeyPress: e.selectAllTabKeypress,
                            "data-a-target": "emote-all-tab",
                            tabIndex: 0
                        }, a.createElement("span", null, Object(B.d)("All", "EmotePicker"))))
                    }
                    return a.createElement(l.Fb, {
                        background: l.r.Base,
                        borderTop: !0,
                        className: "emote-picker__tabs-container"
                    }, n, i)
                }),
                W = n("DnOo"),
                H = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = [];
                        if (this.props.subscribeTexts)
                            for (var t = 0; t <= this.props.plan.level; t++) {
                                var n = this.props.subscribeTexts[t];
                                n && (t < this.props.plan.level ? (e.push(a.createElement("span", {
                                    key: "upsell-predicate:" + t
                                }, n)), e.push(a.createElement("span", {
                                    key: "upsell-plus:" + t
                                }, " + "))) : this.props.plan.level > 0 ? e.push(a.createElement("strong", {
                                    key: "upsell-strong-end:" + this.props.plan.level
                                }, n)) : e.push(a.createElement("span", {
                                    key: "upsell-end:" + t
                                }, n)))
                            }
                        if (!this.props.plan.emoteSetID) return null;
                        var i = {
                                id: this.props.plan.emoteSetID,
                                emotes: this.props.plan.emotes || []
                            },
                            r = {};
                        if (this.props.plan.tier) {
                            var o = Object(D.a)(this.props.plan.tier);
                            null === o && (o = 1), r.purchase = Object(s.d)("Tier { tierNum }", {
                                tierNum: o
                            }, "assembleSubscribeTexts")
                        }
                        return a.createElement(l.Ya, {
                            className: "emote-picker-plan-upsell",
                            display: l.X.Flex,
                            flexDirection: l.Aa.Column,
                            alignItems: l.f.Center,
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(P.a, {
                            emotes: i.emotes,
                            locked: !0
                        }), a.createElement(l.Ya, {
                            margin: 1,
                            alignItems: l.f.Center
                        }, e), a.createElement(W.a, {
                            isSubbedToTier: !1,
                            tierPrice: r.purchase || "",
                            handleSubAction: this.props.handleSubAction,
                            productName: this.props.plan.name,
                            url: this.props.plan.url,
                            isEsportChannel: this.props.isEsportChannel
                        }))
                    }, t
                }(a.Component),
                G = (n("JGCS"), function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.channelTabSelectionKeypress = function(e) {
                            x(e) && n.selectChannelTab(e)
                        }, n.allTabSelectionKeypress = function(e) {
                            x(e) && n.selectAllTab(e)
                        }, n.onClickEmote = function(e) {
                            if (n.props.onClickEmote) {
                                n.props.onClickEmote(e.displayName || e.token, e.id);
                                var t = {
                                    channel_id: n.props.channelID,
                                    chatroom_id: n.props.roomID,
                                    emote_picker_sid: n.props.emotePickerSessionID,
                                    emote_id: e.id,
                                    emoticon_set_id: e.setID,
                                    generated_by: n.props.emotePickerSource
                                };
                                s.o.track(U.SpadeEventType.EmotePickerClickthrough, t)
                            }
                        }, n.closeOnEsc = function(e) {
                            e.keyCode === j.a.Esc && n.props.toggleVisibility()
                        }, n.handleFilterChange = function(e) {
                            var t = e.target.value,
                                i = t.toLowerCase(),
                                r = n.filterAvailableUpsells(n.props.availableUpsells, i),
                                a = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                            n.setState({
                                filter: i,
                                filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                                filteredAvailableUpsells: r,
                                filteredOwnedChannelEmoteSets: a,
                                inputValue: t,
                                channelTabEnabled: a.length > 0 || r.length > 0
                            })
                        }, n.state = {
                            filter: "",
                            filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                            filteredAvailableUpsells: t.availableUpsells,
                            filteredAllEmoteSets: t.allEmoteSets,
                            inputValue: "",
                            channelTabSelected: !0,
                            channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                        }, n.selectAllTab = function() {
                            return n.setChannelTabSelected(!1)
                        }, n.selectChannelTab = function() {
                            return n.setChannelTabSelected(!0)
                        }, n
                    }
                    return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        if (e.channelID && e.emotePickerSessionID && !this.props.emotePickerSessionID) {
                            var t = {
                                channel_id: e.channelID,
                                emote_picker_sid: e.emotePickerSessionID,
                                generated_by: e.emotePickerSource,
                                chatroom_id: e.roomID
                            };
                            s.o.track(U.SpadeEventType.ViewedEmotePicker, t)
                        }
                        if (!e.gqlError)
                            if (this.state.filter.length > 0) {
                                var n = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                    i = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                                this.setState({
                                    filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                    filteredAvailableUpsells: n,
                                    filteredOwnedChannelEmoteSets: i,
                                    channelTabEnabled: i.length > 0 || n.length > 0
                                })
                            } else this.setState({
                                filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                                filteredAvailableUpsells: e.availableUpsells,
                                filteredAllEmoteSets: e.allEmoteSets,
                                channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                            })
                    }, t.prototype.render = function() {
                        return a.createElement(l.u, {
                            "data-a-target": "emote-picker",
                            direction: this.props.direction ? this.props.direction : l.v.TopRight,
                            size: this.props.size ? this.props.size : l.w.Medium,
                            noTail: !0,
                            show: !0
                        }, a.createElement(l.Ya, {
                            className: L("emote-picker")
                        }, this.renderTabContent(), a.createElement(l.Ya, {
                            className: "emote-picker__controls-container",
                            position: l.kb.Relative
                        }, a.createElement(l.Fb, {
                            padding: 1,
                            borderTop: !0
                        }, a.createElement(l.Sa, {
                            autoFocus: !0,
                            onChange: this.handleFilterChange,
                            onKeyDown: this.closeOnEsc,
                            placeholder: Object(s.d)("Search for Emotes", "EmotePicker"),
                            type: l.Ua.Text,
                            value: this.state.inputValue
                        })), a.createElement(V, {
                            allTabVisible: this.props.allEmoteSets.length > 0,
                            channelTabEnabled: this.state.channelTabEnabled,
                            channelTabSelected: this.state.channelTabSelected,
                            channelTabVisible: !!this.props.channelTabVisible,
                            selectAllTab: this.selectAllTab,
                            selectAllTabKeypress: this.allTabSelectionKeypress,
                            selectChannelTab: this.selectChannelTab,
                            selectChannelTabKeypress: this.channelTabSelectionKeypress
                        }))))
                    }, t.prototype.renderTabContent = function() {
                        var e = this,
                            t = [];
                        if (this.props.gqlError) t.push(a.createElement(l.Ya, {
                            key: "emotePicker-error"
                        }, a.createElement(l.W, {
                            color: l.O.Error
                        }, Object(s.d)("Unable to load available emotes.", "EmotePicker"))));
                        else if (this.props.loading) t.push(a.createElement(l.Ya, {
                            alignItems: l.f.Center,
                            display: l.X.Flex,
                            key: "loading",
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: l.Xa.Center
                        }, a.createElement(l.ab, {
                            key: "LoadingSpinner"
                        })));
                        else if (this.state.channelTabEnabled && this.state.channelTabSelected) {
                            if (this.state.filteredOwnedChannelEmoteSets.length > 0) {
                                var n = this.state.filteredOwnedChannelEmoteSets[0].emotes.map(function(t) {
                                    return t.setID = e.state.filteredOwnedChannelEmoteSets[0].id, t
                                });
                                t.push(a.createElement(l.Ya, {
                                    className: "emote-picker__content-block",
                                    key: "ownedChannelEmoteSets",
                                    padding: 1,
                                    position: l.kb.Relative
                                }, a.createElement(P.a, {
                                    emotes: n,
                                    onClickEmote: this.onClickEmote
                                })))
                            }
                            t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                                return a.createElement(l.Ya, {
                                    className: "emote-picker__content-block",
                                    key: "planUpsell:" + t.level,
                                    padding: 1,
                                    position: l.kb.Relative
                                }, a.createElement(H, {
                                    plan: t,
                                    isEsportChannel: e.props.isEsportChannel,
                                    subscribeTexts: e.props.subscribeTexts,
                                    handleSubAction: e.props.handleSubAction
                                }))
                            }))
                        } else t = this.state.filteredAllEmoteSets.map(function(t) {
                            var n = [];
                            return t.emotes.forEach(function(e) {
                                e.setID = t.id, n.push(e)
                            }), a.createElement(l.Ya, {
                                key: "emoteGrid" + t.id,
                                position: l.kb.Relative,
                                padding: {
                                    top: 1,
                                    bottom: 2
                                },
                                className: "emote-picker__content-block"
                            }, a.createElement(P.a, {
                                emotes: n,
                                onClickEmote: e.onClickEmote
                            }))
                        });
                        return t.length > 0 ? a.createElement(F.b, {
                            className: "emote-picker__tab-content"
                        }, a.createElement(l.Ya, {
                            padding: 1
                        }, t)) : null
                    }, t.prototype.filterEmoteSet = function(e, t) {
                        return e.filter(function(e) {
                            return !(!e.displayName || !e.displayName.toLowerCase().includes(t)) || e.token.toLowerCase().includes(t)
                        })
                    }, t.prototype.setChannelTabSelected = function(e) {
                        this.setState({
                            channelTabSelected: e
                        })
                    }, t.prototype.filterEmoteSets = function(e, t) {
                        for (var n = [], i = 0, r = e; i < r.length; i++) {
                            var a = r[i],
                                o = this.filterEmoteSet(a.emotes, t);
                            o.length > 0 && n.push({
                                id: a.id,
                                emotes: o
                            })
                        }
                        return n
                    }, t.prototype.filterAvailableUpsells = function(e, t) {
                        for (var n = [], i = 0, a = e; i < a.length; i++) {
                            var o = a[i];
                            if (o.emotes) {
                                var s = this.filterEmoteSet(o.emotes, t);
                                s.length > 0 && n.push(r.__assign({}, o, {
                                    emotes: s
                                }))
                            }
                        }
                        return n
                    }, t = r.__decorate([Object(M.b)("EmotePickerMenu", {
                        autoReportInteractive: !0
                    })], t)
                }(a.Component)),
                Y = (n("zyUW"), function(e) {
                    var t = null;
                    return e.imgSrc && (t = a.createElement(a.Fragment, null, a.createElement(l.S, {
                        className: "emote-grid-section__header-image",
                        src: e.imgSrc,
                        alt: e.label
                    }), a.createElement(l.Ya, {
                        padding: {
                            right: .5
                        }
                    }))), a.createElement(l.Ya, {
                        position: l.kb.Relative,
                        padding: 1,
                        className: "emote-grid-section"
                    }, a.createElement(l.Fb, {
                        alignItems: l.f.Center,
                        display: l.X.Flex,
                        padding: {
                            x: 1,
                            bottom: .5
                        }
                    }, t, a.createElement(l.W, {
                        align: l.gc.Middle,
                        bold: !0,
                        color: l.O.Alt
                    }, e.label)), a.createElement(P.a, {
                        context: e.context,
                        emotes: e.emotes,
                        onClickEmote: e.onClickEmote,
                        spaced: !0
                    }))
                }),
                z = n("17x9"),
                q = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.checkVisible = function(e, n) {
                            t.props.checkVisible(e, n)
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerReceiver(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister && this.unregister()
                    }, t.prototype.render = function() {
                        return a.createElement(a.Fragment, null, this.props.children)
                    }, t.contextTypes = {
                        registerReceiver: z.func
                    }, t
                }(a.Component),
                X = (n("cr2a"), function(e) {
                    return a.createElement(l.Ya, {
                        className: "emote-picker-tab-item " + (e.isActive ? "emote-picker-tab-item--active" : ""),
                        position: l.kb.Relative
                    }, a.createElement(l.Va, {
                        "data-a-target": e.label,
                        onClick: e.onClick
                    }, a.createElement(l.Ya, {
                        padding: 1,
                        display: l.X.InlineFlex
                    }, a.createElement(l.tb, {
                        asset: e.icon
                    }))))
                }),
                Q = n("a5fV"),
                K = (n("GLn2"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.channelSubscriptionProducts.find(function(t) {
                                return !!t.emotes.find(function(t) {
                                    return e.props.subUpsellClickedEmote.id === t.id
                                })
                            }),
                            n = this.props.channelSubscriptionProducts.filter(function(e) {
                                return !e.emotes.find(function(e) {
                                    return !e.isLocked
                                })
                            }).sort(function(e, t) {
                                var n = T(e);
                                return T(t) - n
                            });
                        if (t && this.props.subUpsellClickedEmote.srcSet && this.props.channelDisplayName) {
                            var i = T(t),
                                o = Object(s.d)("Subscribe at Tier {tierNumber}", {
                                    tierNumber: i
                                }, "EmotePickerCard"),
                                c = [],
                                d = [];
                            n.forEach(function(e) {
                                if (T(e) <= i) {
                                    var t = e.emotes.map(function(e) {
                                        return r.__assign({}, e, {
                                            isLocked: !1
                                        })
                                    });
                                    d.push.apply(d, t)
                                } else c.push.apply(c, e.emotes)
                            });
                            var u = c.concat(d),
                                p = t.price.toString() || "";
                            if (t.priceInfo) {
                                var m = t.priceInfo;
                                p = Object(Q.a)(Object(Q.b)(m.total, m.exponent), m.currency)
                            }
                            return a.createElement(l.Ya, {
                                className: "emote-sub-upsell"
                            }, a.createElement(l.Fb, {
                                padding: {
                                    top: .5
                                }
                            }, a.createElement(l.z, {
                                type: l.F.Text,
                                icon: l.ub.AngleLeft,
                                onClick: this.props.onBackClick,
                                size: l.D.Small
                            }, Object(s.d)("Back", "EmotePickerCard"))), a.createElement(l.Fb, {
                                display: l.X.Flex,
                                padding: {
                                    x: 2,
                                    bottom: 1
                                }
                            }, a.createElement(l.Ya, {
                                flexGrow: 0,
                                flexShrink: 0,
                                padding: {
                                    top: .5
                                }
                            }, a.createElement(l.S, {
                                src: this.getBigImageSrc(this.props.subUpsellClickedEmote.srcSet),
                                alt: this.props.subUpsellClickedEmote.displayName || ""
                            })), a.createElement(l.Ya, {
                                flexGrow: 1,
                                flexShrink: 1,
                                padding: {
                                    left: 1
                                }
                            }, a.createElement(l.W, {
                                bold: !0
                            }, this.renderCopyHeader(i.toString())), a.createElement(l.W, null, this.renderCopyBody(i.toString(), d.length)))), a.createElement(l.Ya, {
                                display: l.X.Flex,
                                alignItems: l.f.Center,
                                justifyContent: l.Xa.Center,
                                padding: {
                                    x: 2
                                }
                            }, a.createElement(W.a, {
                                customSubscribeNowMessage: o,
                                isSubbedToTier: !1,
                                fullWidth: !0,
                                tierPrice: p,
                                handleSubAction: this.props.handleSubAction,
                                productName: t.name,
                                url: t.url,
                                isEsportChannel: this.props.isEsportChannel
                            })), a.createElement(l.fc, null, a.createElement("hr", {
                                className: "emote-sub-upsell__divider"
                            })), a.createElement(F.b, {
                                className: "emote-sub-upsell__content"
                            }, a.createElement(l.Ya, null, a.createElement(l.Ya, {
                                padding: {
                                    x: 2
                                }
                            }, a.createElement(l.W, {
                                bold: !0
                            }, Object(s.d)("{numUnlocked} Emotes Included", {
                                numUnlocked: d.length
                            }, "EmotePickerCard"))), a.createElement(l.Ya, {
                                padding: {
                                    x: 1,
                                    top: .5,
                                    bottom: 3
                                }
                            }, a.createElement(P.a, {
                                emotes: u,
                                spaced: !0,
                                onClickEmote: this.props.onClickEmote
                            })))))
                        }
                        return null
                    }, t.prototype.renderCopyHeader = function(e) {
                        return Object(s.d)("{channelDisplayName} - Tier {tierNumber} Subscription", {
                            tierNumber: e,
                            channelDisplayName: this.props.channelDisplayName
                        }, "EmotePickerCard")
                    }, t.prototype.renderCopyBody = function(e, t) {
                        return 1 === t ? Object(s.d)("To unlock 1 emote and more subscriber benefits, subscribe at Tier {tierNumber}", {
                            tierNumber: e
                        }, "EmotePickerCard") : Object(s.d)("To unlock {numEmotes} emotes and more subscriber benefits, subscribe at Tier {tierNumber}.", {
                            tierNumber: e,
                            numEmotes: t
                        }, "EmotePickercard")
                    }, t.prototype.getBigImageSrc = function(e) {
                        var t = e.split(" ");
                        return 6 === t.length ? t[2] : t[0]
                    }, t
                }(a.Component)),
                $ = n("XQnt"),
                J = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        (!this.props.channelID || this.props.data && !this.props.data.loading) && this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        return null === this.props.subUpsellClickedEmote ? null : a.createElement(K, {
                            channelDisplayName: this.props.channelDisplayName,
                            channelSubscriptionProducts: this.subscriptionProducts,
                            handleSubAction: this.props.handleSubAction,
                            isEsportChannel: this.props.isEsportChannel,
                            onBackClick: this.props.onBackClick,
                            onClickEmote: this.props.onClickEmote,
                            subUpsellClickedEmote: this.props.subUpsellClickedEmote
                        })
                    }, Object.defineProperty(t.prototype, "subscriptionProducts", {
                        get: function() {
                            if (this.props.data && this.props.data.user && this.props.data.user.subscriptionProducts) {
                                var e = this.props.data.user.subscriptionProducts.filter(function(e) {
                                    return e
                                });
                                return I(this.props.ownedSetIDs, e)
                            }
                            return this.props.channelSubscriptionProducts
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(a.Component),
                Z = Object(d.compose)(Object(h.a)($, {
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelID
                    }
                }), Object(M.b)("EmoteSubUpsell"))(J);
            ! function(e) {
                e.FrequentlyUsed = "frequently_used", e.CurrentChannel = "current_channel", e.OtherChannel = "other_subbed_channel", e.Unlocked = "unlocked", e.Global = "global"
            }(A || (A = {}));
            var ee;
            ! function(e) {
                e.FrequentlyUsedEmotes = "FREQUENTLY_USED_EMOTES", e.ChannelEmotes = "CHANNEL_EMOTES", e.AllEmotes = "ALL_EMOTES"
            }(ee || (ee = {}));
            var te = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.onTabNavClick = function(e) {
                            if (n.scroll && n.scroll.scrollContent && e.currentTarget.getAttribute("data-a-target")) {
                                var t = e.currentTarget.getAttribute("data-a-target"),
                                    i = ee.FrequentlyUsedEmotes;
                                switch (t) {
                                    case ee.FrequentlyUsedEmotes:
                                        n.frequentlyUsedEmotesRef && (n.frequentlyUsedEmotesRef.scrollIntoView(), i = ee.FrequentlyUsedEmotes);
                                        break;
                                    case ee.ChannelEmotes:
                                        n.channelEmotesRef && (n.channelEmotesRef.scrollIntoView(), i = ee.ChannelEmotes);
                                        break;
                                    case ee.AllEmotes:
                                        n.allEmotesRef && (n.allEmotesRef.scrollIntoView(), i = ee.AllEmotes)
                                }
                                n.setState({
                                    selectedNavTab: i
                                })
                            }
                        }, n.onClickEmote = function(e, t) {
                            if (n.props.onClickEmote && !e.isLocked) {
                                n.props.onClickEmote(e.displayName || e.token, e.id);
                                var i = {
                                    channel_id: n.props.channelID,
                                    chatroom_id: n.props.roomID,
                                    context: t,
                                    emote_picker_sid: n.props.emotePickerSessionID,
                                    emote_id: e.id,
                                    emoticon_set_id: e.setID,
                                    generated_by: n.props.emotePickerSource
                                };
                                s.o.track(U.SpadeEventType.EmotePickerClickthrough, i)
                            } else e.isLocked && n.onClickLockedEmote(e)
                        }, n.saveScrollRef = function(e) {
                            return n.scroll = e
                        }, n.saveAllEmotesRef = function(e) {
                            return n.allEmotesRef = e
                        }, n.saveChannelEmotesRef = function(e) {
                            return n.channelEmotesRef = e
                        }, n.saveFrequentlyUsedEmotesRef = function(e) {
                            return n.frequentlyUsedEmotesRef = e
                        }, n.checkVisible = function(e, t) {
                            if (t) {
                                var i = n.state.selectedNavTab;
                                n.channelEmotesRef ? t.offset > 0 && t.offset < n.channelEmotesRef.offsetTop ? i = ee.FrequentlyUsedEmotes : t.offset > n.channelEmotesRef.offsetTop && t.offset < n.allEmotesRef.offsetTop ? i = ee.ChannelEmotes : t.offset > n.allEmotesRef.offsetTop && (i = ee.AllEmotes) : t.offset > 0 && t.offset < n.allEmotesRef.offsetTop ? i = ee.FrequentlyUsedEmotes : t.offset > n.allEmotesRef.offsetTop && (i = ee.AllEmotes), n.state.selectedNavTab !== i && n.setState({
                                    selectedNavTab: i
                                })
                            }
                        }, n.onClickLockedEmote = function(e) {
                            n.setState({
                                subUpsellClickedEmote: e
                            })
                        }, n.onBackClick = function() {
                            n.setState({
                                subUpsellClickedEmote: null,
                                selectedNavTab: ee.FrequentlyUsedEmotes
                            })
                        }, n.handleFilterChange = function(e) {
                            var t = e.target.value,
                                i = t.toLowerCase();
                            n.setState({
                                filter: i,
                                inputValue: t,
                                filteredEmotes: n.filterEmoteSets(n.props.allEmoteSets, i),
                                selectedNavTab: ee.FrequentlyUsedEmotes
                            })
                        }, n.filterEmoteSets = function(e, t) {
                            var n = [];
                            e.forEach(function(e) {
                                e.emotes.filter(function(e) {
                                    return !(!e.displayName || !e.displayName.toLowerCase().includes(t)) || e.token.toLowerCase().includes(t)
                                }).forEach(function(t) {
                                    t.setID = e.id, n.push(t)
                                })
                            });
                            var i = Object(N.d)(),
                                r = 0 === Object.keys(i).length ? void 0 : i;
                            return Object(O.f)(n, t, r)
                        }, n.updateChannelEmotes = function(e) {
                            var t = e.channelSubscriptionProducts.reduce(function(e, t) {
                                return e.concat(t.emotes)
                            }, []);
                            if (0 === t.length || !e.channelDisplayName) return null;
                            var i = [],
                                r = [];
                            t.forEach(function(e) {
                                e.isLocked ? i.push(e) : r.push(e)
                            });
                            var a = r.concat(i);
                            n.setState({
                                sortedChannelEmotes: a
                            })
                        }, n.state = {
                            filter: "",
                            filteredEmotes: [],
                            inputValue: "",
                            selectedNavTab: ee.FrequentlyUsedEmotes,
                            sortedChannelEmotes: [],
                            subUpsellClickedEmote: null
                        }, n
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        if (this.props.channelID) {
                            var e = {
                                channel_id: this.props.channelID,
                                emote_picker_sid: this.props.emotePickerSessionID,
                                generated_by: this.props.emotePickerSource,
                                chatroom_id: this.props.roomID
                            };
                            s.o.track(U.SpadeEventType.ViewedEmotePicker, e), this.updateChannelEmotes(this.props)
                        }
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.channelID !== e.channelID && this.updateChannelEmotes(e)
                    }, t.prototype.render = function() {
                        return a.createElement(l.u, {
                            "data-a-target": "emote-picker",
                            direction: this.props.direction ? this.props.direction : l.v.TopRight,
                            size: this.props.size ? this.props.size : l.w.Medium,
                            noTail: !0,
                            show: !0
                        }, a.createElement(l.Ya, {
                            className: "emote-picker"
                        }, this.renderView()))
                    }, t.prototype.renderView = function() {
                        var e = null;
                        return null === this.state.subUpsellClickedEmote && (e = a.createElement(a.Fragment, null, a.createElement(l.Fb, {
                            padding: {
                                top: 2,
                                x: 2
                            }
                        }, a.createElement(l.Sa, {
                            autoFocus: !0,
                            onChange: this.handleFilterChange,
                            placeholder: Object(s.d)("Search for Emotes", "EmotePickerCard"),
                            type: l.Ua.Text,
                            value: this.state.inputValue
                        })), this.renderTabContent())), a.createElement(a.Fragment, null, a.createElement(Z, {
                            channelDisplayName: this.props.channelDisplayName,
                            channelID: this.props.channelID,
                            channelSubscriptionProducts: this.props.channelSubscriptionProducts,
                            isEsportChannel: this.props.isEsportChannel || !1,
                            handleSubAction: this.props.handleSubAction,
                            onBackClick: this.onBackClick,
                            onClickEmote: this.onClickLockedEmote,
                            ownedSetIDs: this.props.ownedSetIDs,
                            subUpsellClickedEmote: this.state.subUpsellClickedEmote
                        }), e)
                    }, t.prototype.renderTabContent = function() {
                        return this.props.gqlError ? a.createElement(l.Ya, null, a.createElement(l.W, {
                            "data-test-selector": "emote-picker-menu-error-text",
                            color: l.O.Error
                        }, Object(s.d)("Unable to load available emotes.", "EmotePickerCard"))) : this.props.loading ? a.createElement(l.Ya, {
                            alignItems: l.f.Center,
                            display: l.X.Flex,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: l.Xa.Center,
                            padding: 1
                        }, a.createElement(l.ab, null)) : "" !== this.state.filter ? this.renderSearchContent() : a.createElement(a.Fragment, null, a.createElement(F.b, {
                            scrollRef: this.saveScrollRef,
                            className: "emote-picker__tab-content"
                        }, a.createElement(l.Ya, {
                            padding: {
                                bottom: 2
                            }
                        }, a.createElement(q, {
                            checkVisible: this.checkVisible
                        }, this.getFrequentlyUsedEmoteGrid(), this.getCurrentChannelEmoteGrid(), this.getOtherSubEmoteGrids(), this.getResidualEmoteGrids()))), this.renderTabNav())
                    }, t.prototype.getFrequentlyUsedEmoteGrid = function() {
                        return 0 === this.props.frequentlyUsedEmotes.length ? null : a.createElement(l.Ya, {
                            className: "emote-picker__content-block",
                            refDelegate: this.saveFrequentlyUsedEmotesRef
                        }, a.createElement(Y, {
                            context: A.FrequentlyUsed,
                            emotes: this.props.frequentlyUsedEmotes,
                            label: Object(s.d)("Frequently Used", "EmotePickerCard"),
                            onClickEmote: this.onClickEmote
                        }))
                    }, t.prototype.getCurrentChannelEmoteGrid = function() {
                        return 0 !== this.state.sortedChannelEmotes.length && this.props.channelDisplayName ? a.createElement(l.Ya, {
                            className: "emote-picker__content-block",
                            refDelegate: this.saveChannelEmotesRef
                        }, a.createElement(Y, {
                            context: A.CurrentChannel,
                            emotes: this.state.sortedChannelEmotes,
                            imgSrc: this.props.channelProfileImageURL || void 0,
                            label: this.props.channelDisplayName,
                            onClickEmote: this.onClickEmote
                        })) : null
                    }, t.prototype.getOtherSubEmoteGrids = function() {
                        var e = this,
                            t = [];
                        return this.props.otherChannelEmoteSets.forEach(function(n) {
                            n.owner && n.owner.displayName && t.push(a.createElement(l.Ya, {
                                key: "emote-grid--" + n.id + "-emotes",
                                className: "emote-picker__content-block"
                            }, a.createElement(Y, {
                                context: A.OtherChannel,
                                emotes: n.emotes,
                                imgSrc: n.owner.profileImageURL || void 0,
                                label: n.owner.displayName,
                                onClickEmote: e.onClickEmote
                            })))
                        }), a.createElement(a.Fragment, null, t)
                    }, t.prototype.getResidualEmoteGrids = function() {
                        var e = [];
                        return this.props.unlockedEmotes.length > 0 && e.push(a.createElement(l.Ya, {
                            key: "emote-grid--unlocked-emotes",
                            className: "emote-picker__content-block"
                        }, a.createElement(Y, {
                            context: A.Unlocked,
                            emotes: this.props.unlockedEmotes,
                            label: Object(s.d)("Unlocked", "EmotePickerCard"),
                            onClickEmote: this.onClickEmote
                        }))), this.props.globalEmotes.length > 0 && e.push(a.createElement(l.Ya, {
                            key: "emote-grid--global-emotes"
                        }, a.createElement(Y, {
                            context: A.Global,
                            emotes: this.props.globalEmotes,
                            label: Object(s.d)("Global", "EmotePickerCard"),
                            onClickEmote: this.onClickEmote
                        }))), a.createElement(l.Ya, {
                            refDelegate: this.saveAllEmotesRef
                        }, e)
                    }, t.prototype.renderSearchContent = function() {
                        var e = Object(s.d)('No Search Results for "{inputValue}"', {
                            inputValue: this.state.inputValue
                        }, "EmotePickerCard");
                        return this.state.filteredEmotes.length > 0 && (e = Object(s.d)('Search Results for "{inputValue}"', {
                            inputValue: this.state.inputValue
                        }, "EmotePickerCard")), a.createElement(F.b, {
                            className: "emote-picker__tab-content"
                        }, a.createElement(l.Ya, {
                            position: l.kb.Relative,
                            padding: {
                                x: 1,
                                top: 1,
                                bottom: 3
                            },
                            className: "emote-picker__content-block"
                        }, a.createElement(l.Fb, {
                            padding: {
                                x: 1
                            }
                        }, a.createElement(l.W, {
                            bold: !0
                        }, e)), a.createElement(P.a, {
                            emotes: this.state.filteredEmotes,
                            onClickEmote: this.onClickEmote,
                            spaced: !0
                        })))
                    }, t.prototype.renderTabNav = function() {
                        var e = null;
                        return this.state.sortedChannelEmotes.length > 0 && (e = a.createElement(X, {
                            isActive: this.state.selectedNavTab === ee.ChannelEmotes,
                            label: ee.ChannelEmotes,
                            icon: l.ub.NavChannels,
                            onClick: this.onTabNavClick
                        })), a.createElement(l.Fb, {
                            background: l.r.Alt,
                            display: l.X.Flex,
                            className: "emote-picker__tab-nav-container"
                        }, a.createElement(X, {
                            isActive: this.state.selectedNavTab === ee.FrequentlyUsedEmotes,
                            label: ee.FrequentlyUsedEmotes,
                            icon: l.ub.GlyphLength,
                            onClick: this.onTabNavClick
                        }), e, a.createElement(X, {
                            isActive: this.state.selectedNavTab === ee.AllEmotes,
                            label: ee.AllEmotes,
                            icon: l.ub.EmoticonsAll,
                            onClick: this.onTabNavClick
                        }))
                    }, t
                }(a.Component),
                ne = n("DB+C"),
                ie = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        n.handleSubEvent = function(e) {
                            e.action === R.a.ClickCheckout && n.checkAndDisplaySubscriptionCheckout(), Object(R.b)(r.__assign({}, e, {
                                action: R.a.ClickCheckout,
                                channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                                channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                                isMenuOpen: null,
                                hasSubCredit: null,
                                sub_location: "emote_picker",
                                modal: !1,
                                showPrimeContent: !0,
                                giftRecipient: null
                            }))
                        };
                        var i = {
                            allEmoteSets: [],
                            availableUpsells: [],
                            channelSubscriptionProducts: [],
                            channelDisplayName: void 0,
                            channelTabVisible: !1,
                            frequentlyUsedEmotes: [],
                            globalEmotes: [],
                            gqlError: t.emoteSetsData && !!t.emoteSetsData.error || t.channelData && !!t.channelData.error || !1,
                            gqlLoading: t.emoteSetsData && !!t.emoteSetsData.loading || t.channelData && !!t.channelData.loading || !1,
                            otherChannelEmoteSets: [],
                            ownedChannelEmoteSets: [],
                            ownedSetIDs: new Set([]),
                            subscribeTexts: [],
                            unlockedEmotes: []
                        };
                        return i = n.applyDataPropsToState(t, i), n.state = r.__assign({}, i), n
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        Object(N.b)(), this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        if (e.emoteSetsData && e.emoteSetsData.error || e.channelData && e.channelData.error) this.setState({
                            gqlError: !0
                        });
                        else {
                            var t = this.applyDataPropsToState(e, this.state);
                            this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.emoteSetsData && this.props.emoteSetsData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.setState(r.__assign({}, t, {
                                gqlError: !1
                            }))
                        }
                        if (e.visible && !this.props.visible && e.emoteSetsData && e.emoteSetsData.emoteMap) {
                            var n = Object(N.c)(e.emoteSetsData.emoteMap);
                            this.props.openEmotePicker(), this.setState({
                                frequentlyUsedEmotes: n
                            })
                        } else this.props.visible && !e.visible && this.props.closeEmotePicker()
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.closeEmotePicker()
                    }, t.prototype.render = function() {
                        if (!this.props.visible) return null;
                        var e = this.props.channelData && this.props.channelData.user && this.props.channelData.user.campaignProperties && this.props.channelData.user.campaignProperties.domains && this.props.channelData.user.campaignProperties.domains.length > 0 || !1,
                            t = a.createElement(G, {
                                allEmoteSets: this.state.allEmoteSets,
                                availableUpsells: this.state.availableUpsells,
                                channelTabVisible: this.state.channelTabVisible,
                                channelID: this.props.channelOwnerID,
                                direction: this.props.direction,
                                emotePickerSessionID: this.props.emotePickerSessionID,
                                emotePickerSource: this.props.emotePickerSource,
                                gqlError: this.state.gqlError,
                                handleSubAction: this.handleSubEvent,
                                isEsportChannel: e,
                                loading: this.state.gqlLoading,
                                onClickEmote: this.props.onClickEmote,
                                ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                                roomID: this.props.roomID,
                                size: this.props.size,
                                subscribeTexts: this.state.subscribeTexts,
                                toggleVisibility: this.props.toggleVisibility
                            }),
                            n = a.createElement(te, {
                                allEmoteSets: this.state.allEmoteSets,
                                channelID: this.props.channelOwnerID,
                                channelDisplayName: this.state.channelDisplayName,
                                channelProfileImageURL: this.state.channelProfileImageURL,
                                channelSubscriptionProducts: this.state.channelSubscriptionProducts,
                                direction: this.props.direction,
                                emotePickerSessionID: this.props.emotePickerSessionID,
                                emotePickerSource: this.props.emotePickerSource,
                                frequentlyUsedEmotes: this.state.frequentlyUsedEmotes,
                                globalEmotes: this.state.globalEmotes,
                                gqlError: this.state.gqlError,
                                handleSubAction: this.handleSubEvent,
                                isEsportChannel: e,
                                loading: this.state.gqlLoading,
                                onClickEmote: this.props.onClickEmote,
                                ownedSetIDs: this.state.ownedSetIDs,
                                otherChannelEmoteSets: this.state.otherChannelEmoteSets,
                                roomID: this.props.roomID,
                                size: this.props.size,
                                toggleVisibility: this.props.toggleVisibility,
                                unlockedEmotes: this.state.unlockedEmotes
                            });
                        return a.createElement(p.a, {
                            assignments: {
                                fallback: function() {
                                    return t
                                },
                                off: function() {
                                    return t
                                },
                                on: function() {
                                    return n
                                }
                            },
                            name: y.b.EmotePickerV2
                        })
                    }, t.prototype.checkDataLoaded = function(e) {
                        var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                            n = !e.isLoggedIn || e.emoteSetsData && !e.emoteSetsData.loading;
                        return t && n
                    }, t.prototype.checkForContent = function(e) {
                        var t = e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0 || !1,
                            n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                        return t || n
                    }, t.prototype.applyDataPropsToState = function(e, t) {
                        var n = r.__assign({}, t);
                        if (e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0) {
                            n.ownedSetIDs = new Set;
                            for (var i = 0, a = e.emoteSetsData.emoteSets; i < a.length; i++) {
                                var o = a[i];
                                o && o.id && n.ownedSetIDs.add(parseInt(o.id, 10))
                            }
                            n.allEmoteSets = Object(O.a)(e.emoteSetsData.emoteSets);
                            var l = [],
                                c = [],
                                d = [];
                            n.allEmoteSets.forEach(function(t) {
                                t.owner || "0" !== t.id ? t.owner && "" !== t.owner.id ? e.channelData && e.channelData.user && e.channelData.user.id === t.owner.id || l.push(t) : d.push.apply(d, t.emotes) : c.push.apply(c, t.emotes)
                            }), n.otherChannelEmoteSets = function(e) {
                                var t = {};
                                e.forEach(function(e) {
                                    var n;
                                    e.owner && e.owner.id && (t[e.owner.id] ? (n = t[e.owner.id].emotes).push.apply(n, e.emotes) : t[e.owner.id] = r.__assign({}, e))
                                });
                                var n = [];
                                return Object.keys(t).forEach(function(e) {
                                    n.push(t[e])
                                }), n
                            }(l), n.globalEmotes = c, n.unlockedEmotes = d
                        }
                        if (e.channelData && e.channelData.user) {
                            var u = void 0;
                            e.channelData.user.self && e.channelData.user.self.subscriptionBenefit && (u = e.channelData.user.self.subscriptionBenefit.platform), n.availableUpsells = function(e, t, n) {
                                var i = [];
                                return !n || n !== _.b.IOS && n !== _.b.Android ? (t.forEach(function(n, a) {
                                    var o = n.price;
                                    0 === a && Object(w.g)(t) && (o = Object(w.c)(t[0])), n.emotes && n.emotes.length && n.emoteSetID && !e.has(parseInt(n.emoteSetID, 10)) && i.push(r.__assign({}, n, {
                                        emotes: Object(O.e)(n.emotes, n.emoteSetID),
                                        level: a,
                                        price: o
                                    }))
                                }), i) : i
                            }(n.ownedSetIDs, e.channelData.user.subscriptionProducts, u), n.channelDisplayName = e.channelData.user.displayName, n.channelProfileImageURL = e.channelData.user.profileImageURL, n.channelSubscriptionProducts = I(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.ownedChannelEmoteSets = function(e, t) {
                                for (var n = [{
                                        id: "0",
                                        emotes: []
                                    }], i = 0, r = t; i < r.length; i++) {
                                    var a = r[i];
                                    a.emotes && a.emoteSetID && e.has(parseInt(a.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(O.e)(a.emotes, a.emoteSetID)))
                                }
                                return n[0].emotes.length ? n : []
                            }(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.subscribeTexts = function(e) {
                                for (var t = [], n = 0; n < e.length; n++) {
                                    var i = e[n],
                                        r = Object(D.a)(i.tier);
                                    null === r && (r = 1), 0 === n && i.emotes && i.emotes.length > 1 ? t[n] = Object(s.d)("Unlock {numEmotes, number} Sub Emotes", {
                                        numEmotes: i.emotes.length
                                    }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(s.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes && i.emotes.length > 1 ? t[n] = Object(s.d)("{numEmotes, number} Extra Tier {tier} Sub Emotes", {
                                        numEmotes: i.emotes.length,
                                        tier: r
                                    }, "assembleSubscribeTexts") : i.emotes && i.emotes.length && (t[n] = Object(s.d)("1 Extra Tier {tier} Sub Emote", {
                                        tier: r
                                    }, "assembleSubscribeTexts"))
                                }
                                return t
                            }(e.channelData.user.subscriptionProducts)
                        }
                        return n.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, n
                    }, t.prototype.subscriptionProductHasEmotes = function(e) {
                        return void 0 !== e.emoteSetID && !!e.emotes && e.emotes.length > 0
                    }, t.prototype.checkAndDisplaySubscriptionCheckout = function() {
                        var e = s.n.get(v.c, ""),
                            t = s.n.get(v.d, ""),
                            n = s.n.get(v.b, ""),
                            i = Number(n);
                        e && (this.props.channelData && this.props.channelData.user && this.props.channelData.user.subscriptionProducts.map(function(e) {
                            return e.name
                        }).includes(e) ? this.props.sessionUser ? this.props.showSubscriptionCheckoutModal({
                            recipientLogin: t,
                            productName: e,
                            mysteryGiftCount: i,
                            trackingContext: {
                                source: E.c.EmotePicker
                            }
                        }) : this.props.showLoginModal() : Object(v.e)())
                    }, t
                }(a.Component);
            var re = Object(d.compose)(Object(i.connect)(function(e) {
                    return {
                        currentUserID: e.session.user && e.session.user.id,
                        emotePickerSessionID: e.chat && e.chat.emotePickerSessionID || null,
                        sessionUser: e.session.user,
                        isLoggedIn: Object(C.f)(e)
                    }
                }, function(e) {
                    return Object(u.bindActionCreators)({
                        closeEmotePicker: S.A,
                        openEmotePicker: S.M,
                        showLoginModal: Object(v.f)(b.a.EmotePickerSubscriptionButton),
                        showSubscriptionCheckoutModal: function(e) {
                            var t = r.__rest(e, []);
                            return Object(k.d)(m.a, {
                                component: "CheckoutModal",
                                loader: function() {
                                    return Promise.all([n.e(0), n.e(212)]).then(n.bind(null, "KJv/"))
                                },
                                componentProps: t
                            })
                        }
                    }, e)
                }), Object(h.a)(ne, {
                    name: "channelData",
                    skip: function(e) {
                        return !e.channelOwnerID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                channelOwnerID: e.channelOwnerID
                            }
                        }
                    }
                }), Object(g.a)([{
                    topic: function(e) {
                        return "user-subscribe-events-v1." + e.currentUserID
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !e.currentUserID
                    }
                }]), Object(M.b)("EmotePicker"), Object(f.a)())(ie),
                ae = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hasInteracted: !1,
                            isEmotePickerMenuVisible: !1,
                            isEmotePickerButtonVisible: !1
                        }, t.onClickOut = function() {
                            t.setState({
                                isEmotePickerMenuVisible: !1
                            })
                        }, t.onClickEmote = function(e, n) {
                            t.props.onClickEmote && t.props.onClickEmote(e, n)
                        }, t.toggleEmotePicker = function() {
                            t.setState(function(e) {
                                return {
                                    isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                                }
                            })
                        }, t.onEmotePickerDataLoaded = function(e) {
                            e && t.setState({
                                isEmotePickerButtonVisible: !0
                            })
                        }, t.onInteraction = function() {
                            return t.setState({
                                hasInteracted: !0
                            })
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                    }, t.prototype.render = function() {
                        var e = null;
                        this.state.isEmotePickerButtonVisible && (e = a.createElement(c, {
                            onClick: this.toggleEmotePicker,
                            isActive: this.state.isEmotePickerMenuVisible
                        }));
                        var t = null;
                        this.hasInteractedOrPageload && (t = a.createElement(re, {
                            channelOwnerID: this.props.channelOwnerID,
                            emotePickerSource: this.props.emotePickerSource,
                            onClickEmote: this.onClickEmote,
                            onLoad: this.onEmotePickerDataLoaded,
                            toggleVisibility: this.toggleEmotePicker,
                            visible: this.state.isEmotePickerMenuVisible,
                            direction: this.props.direction
                        }));
                        var n = a.createElement(l.Ya, r.__assign({
                            className: "emote-picker-and-button"
                        }, this.layoutProps), e, t);
                        return this.props.shouldCloseOnClickOut ? a.createElement(o.a, {
                            onClickOut: this.onClickOut
                        }, n) : n
                    }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                        get: function() {
                            return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "layoutProps", {
                        get: function() {
                            var e = {
                                attachTop: !!this.props.attachTop,
                                attachRight: !!this.props.attachRight,
                                attachBottom: !!this.props.attachBottom,
                                attachLeft: !!this.props.attachLeft,
                                padding: this.props.padding
                            };
                            return this.props.position && (e.position = this.props.position), e
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(a.Component),
                oe = Object(M.b)("EmotePicker")(ae);
            var se = Object(i.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(oe);
            n.d(t, "a", function() {
                return se
            }), n.d(t, "c", function() {
                return re
            }), n.d(t, !1, function() {
                return _.a
            }), n.d(t, !1, function() {
                return _.d
            }), n.d(t, !1, function() {
                return _.c
            }), n.d(t, !1, function() {
                return _.b
            }), n.d(t, "b", function() {
                return c
            })
        },
        "n+IG": function(e, t, n) {},
        n9Ey: function(e, t, n) {},
        nIRf: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = function() {
                return function(e) {
                    var t = this;
                    this.timerId = null, this.start = function() {
                        t.timerId && t.stop(), t.timerId = setInterval(t.onInterval, t.intervalMillis)
                    }, this.stop = function() {
                        t.timerId && (clearInterval(t.timerId), t.timerId = null)
                    }, this.restart = function(e) {
                        void 0 === e && (e = 0), t.stop(), t.timerId = setTimeout(function() {
                            t.onInterval(), t.start()
                        }, e)
                    }, this.onInterval = e.onInterval, this.intervalMillis = e.intervalMillis
                }
            }()
        },
        nInp: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                r = Object(i.a)("MessageBuffer"),
                a = r.withChatServiceProvider,
                o = (0, r.withContext)(function(e) {
                    return {
                        messageBufferAPI: e.serviceAPI,
                        setMessageBufferAPI: e.setServiceAPI
                    }
                })
        },
        ngVu: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("znm4"),
                o = n("cBWO"),
                s = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onPlayerSeekRequest = function(e) {
                            t.props.onPlayerSeekRequestHandler(e - t.getSourceVideoClipStartOffset())
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.clip,
                            t = {},
                            n = null;
                        e && (t = {
                            messageWindow: {
                                offset: e.videoOffsetSeconds,
                                duration: e.durationSeconds
                            }
                        }, e.video && e.video.id && (n = e.video.id));
                        var o = this.getSourceVideoClipStartOffset();
                        return r.createElement(a.a, i.__assign({
                            onPlayerSeekRequest: this.onPlayerSeekRequest,
                            onShowLogin: this.props.onShowLogin,
                            videoID: n,
                            startInReplayMode: !0,
                            disableChatForVideo: !n
                        }, t, {
                            highlightTimestamp: o
                        }))
                    }, t.prototype.getSourceVideoClipStartOffset = function() {
                        var e = this.props.clip;
                        return e && e.videoOffsetSeconds ? e.videoOffsetSeconds : o.b
                    }, t
                }(r.Component);
            n.d(t, "a", function() {
                return s
            })
        },
        nkgB: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "MessageBuffer_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "chatSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "chatDelayMs"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 118
                }
            };
            n.loc.source = {
                body: "query MessageBuffer_Channel($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nchatSettings {\nchatDelayMs\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        nt5g: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RoleRestricted"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "contentOwnerLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "contentOwnerLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isEditor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 147
                }
            };
            n.loc.source = {
                body: "query RoleRestricted($contentOwnerLogin: String!) {\ncurrentUser {\nid\nroles {\nisStaff\n}\n}\nuser(login: $contentOwnerLogin) {\nid\nself {\nisEditor\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        nxZp: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = function() {
                return function(e) {
                    this.bio = e.bio, this.createdAt = e.createdAt, this.displayName = e.displayName, this.id = e.id, this.logo = e.logo, this.name = e.name, this.type = e.type, this.updatedAt = e.updatedAt
                }
            }()
        },
        oK83: function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return r
                }),
                function(e) {
                    e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.room_message = 2] = "room_message", e[e.extension_message = 3] = "extension_message", e[e.viewer_list = 4] = "viewer_list", e[e.viewer_list_mod_section = 5] = "viewer_list_mod_section", e[e.member_list = 6] = "member_list", e[e.test = 7] = "test"
                }(i || (i = {})),
                function(e) {
                    e[e.Viewer = 0] = "Viewer", e[e.Extension = 1] = "Extension"
                }(r || (r = {}))
        },
        oVvm: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("/MKj"),
                a = n("9C/b"),
                o = n("fvjX"),
                s = n("1/iK"),
                l = n("aCAx"),
                c = n("y5D0"),
                d = n("/HY+"),
                u = n("kduP"),
                p = n("b6Yk"),
                m = n("4rCz");

            function h(e, t) {
                var n = this;
                return function() {
                    return i.__awaiter(n, void 0, void 0, function() {
                        var n, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return n = "kraken/videos/" + e, [4, p.a.delete(n)];
                                case 1:
                                    if (200 !== (r = i.sent()).status) {
                                        if (r && r.error) throw new Error(JSON.stringify(r.error));
                                        if (r && r.requestError) throw r.requestError;
                                        throw new Error("Could not delete video. Request returned " + r.status)
                                    }
                                    return m.q.history.push(Object(u.d)(t)), [2]
                            }
                        })
                    })
                }
            }
            var g = n("q1tI"),
                f = n("cZKs"),
                v = n("hyVY"),
                b = n("Ue10"),
                k = (n("ESOY"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            requestInProgress: !1,
                            errorMessage: ""
                        }, t.onClickCancel = function() {
                            return t.props.onClose()
                        }, t.onClickDelete = function() {
                            t.setState({
                                errorMessage: "",
                                requestInProgress: !0
                            }, function() {
                                return i.__awaiter(t, void 0, void 0, function() {
                                    var e;
                                    return i.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                if (!this.props.video.owner || !this.props.video.owner.login) return this.setState({
                                                    errorMessage: Object(m.d)("This video is temporarily unable to be deleted.", "VideoDeleteModal"),
                                                    requestInProgress: !1
                                                }), [2];
                                                t.label = 1;
                                            case 1:
                                                return t.trys.push([1, 3, , 4]), [4, this.props.onDeleteRequest(this.props.video.id, this.props.video.owner.login)];
                                            case 2:
                                                return t.sent(), this.props.onClose(), [3, 4];
                                            case 3:
                                                return e = t.sent(), this.setState({
                                                    errorMessage: Object(m.d)("Unexpected error, please try again.", "VideoDeleteModal"),
                                                    requestInProgress: !1
                                                }), m.l.withCategory("video delete modal").error(e, "Attempted to delete video."), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return g.createElement(b.Fb, {
                            background: b.r.Base,
                            "data-test-selector": "qa-video-delete-modal",
                            className: "video-delete-modal",
                            padding: 3
                        }, g.createElement(b.Ya, null, g.createElement(b.Ya, {
                            margin: {
                                bottom: 1
                            }
                        }, g.createElement(b.W, {
                            type: b.Wb.H4
                        }, Object(m.d)("Delete Video", "VideoDeleteModal"))), this.renderErrorMessage(), g.createElement(b.W, {
                            type: b.Wb.P,
                            color: b.O.Alt2
                        }, Object(m.d)("Are you sure you want to delete this video?", "VideoDeleteModal"), g.createElement("br", null), Object(m.d)("This action cannot be undone.", "VideoDeleteModal"))), g.createElement(b.Fb, {
                            padding: {
                                y: 2
                            },
                            margin: {
                                y: 2
                            },
                            borderTop: !0,
                            borderBottom: !0
                        }, g.createElement(b.G, {
                            row: !0
                        }, g.createElement("img", {
                            alt: this.props.video.title || Object(m.d)("Video Thumbnail", "VideoDeleteModal"),
                            src: this.props.video.previewThumbnailURL,
                            className: "video-delete-modal__thumb"
                        }), g.createElement(b.H, {
                            overflow: b.db.Hidden
                        }, g.createElement(b.Ya, {
                            margin: {
                                left: 1
                            }
                        }, g.createElement(b.Ya, {
                            ellipsis: !0
                        }, this.props.video.title), g.createElement(b.Fb, {
                            ellipsis: !0,
                            color: b.O.Alt2
                        }, Object(m.d)("{created, date, medium}", {
                            created: new Date(this.props.video.publishedAt)
                        }, "VideoDeleteModal"), " · ", Object(v.b)(this.props.video.lengthSeconds)), g.createElement(b.Fb, {
                            ellipsis: !0,
                            color: b.O.Alt2
                        }, Object(m.d)("{viewCount, plural, one {# View} other {# Views}}", {
                            viewCount: this.props.video.viewCount
                        }, "VideoDeleteModal")))))), g.createElement(b.Ya, {
                            display: b.X.Flex,
                            justifyContent: b.Xa.Center
                        }, g.createElement(b.Ya, {
                            display: b.X.InlineBlock,
                            margin: {
                                x: 1
                            }
                        }, g.createElement(b.z, {
                            type: b.F.Text,
                            onClick: this.onClickCancel,
                            "data-test-selector": "qa-video-delete-modal-cancel-button"
                        }, Object(m.d)("Cancel", "VideoDeleteModal"))), g.createElement(b.Ya, {
                            display: b.X.InlineBlock,
                            margin: {
                                x: 1
                            }
                        }, g.createElement(b.z, {
                            type: b.F.Alert,
                            onClick: this.onClickDelete,
                            disabled: this.state.requestInProgress,
                            "data-test-selector": "qa-video-delete-modal-delete-button"
                        }, Object(m.d)("Delete", "VideoDeleteModal")))), g.createElement(f.a, {
                            closeOnBackdropClick: !0
                        }))
                    }, t.prototype.renderErrorMessage = function() {
                        return this.state.errorMessage ? g.createElement(b.Fb, {
                            className: "video-delete-modal__error-container",
                            fullWidth: !0,
                            "data-test-selector": "qa-video-delete-modal-error-container",
                            margin: {
                                bottom: 1
                            },
                            padding: 1
                        }, g.createElement(b.W, {
                            color: b.O.Error
                        }, this.state.errorMessage)) : null
                    }, t
                }(g.Component));
            var y = Object(r.connect)(null, function(e) {
                    return Object(o.bindActionCreators)({
                        onClose: l.c,
                        onDeleteRequest: h
                    }, e)
                })(k),
                C = n("oJmH"),
                S = n("eJ65"),
                E = n("yR8l"),
                N = n("QzU5"),
                O = n("vRsq"),
                _ = n("DMoW"),
                w = n("GnwI"),
                D = n("RQ6e"),
                I = n("16Gl"),
                T = n("aJDl"),
                M = n("ZaHG"),
                R = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleReportModalClose = function(e) {
                            (e === D.a.MutationError || e === D.a.Success) && t.props.history.push("/")
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return g.createElement(S.a, null, g.createElement(b.A, {
                            "data-test-selector": "qa-video-options-button",
                            type: b.C.Hollow,
                            icon: b.ub.More,
                            ariaLabel: Object(m.d)("Video Options", "VideoOptions"),
                            disabled: !this.props.video
                        }), this.props.video ? g.createElement(b.u, {
                            direction: b.v.TopRight
                        }, g.createElement(b.Fb, {
                            padding: {
                                y: 1
                            },
                            color: b.O.Link
                        }, g.createElement("ul", {
                            "data-test-selector": "qa-video-options-container"
                        }, this.renderReportOption(this.props.video, this.props.currentUser), this.renderHighlightOption(this.props.video, this.props.currentUser), this.renderDeleteOption(this.props.video, this.props.currentUser)))) : g.createElement(b.u, null))
                    }, t.prototype.renderDeleteOption = function(e, t) {
                        var n = this;
                        if (this.isVODOwner(e, t) || this.isEditor()) {
                            var i = {
                                type: b.Wa.Alert,
                                onClick: function() {
                                    n.props.onShowDeleteVideoModal({
                                        video: e
                                    })
                                }
                            };
                            return g.createElement(T.a, {
                                key: "delete-option",
                                interactableProps: i,
                                testSelector: "qa-video-delete-button"
                            }, Object(m.d)("Delete", "VideoOptions"))
                        }
                    }, t.prototype.renderReportOption = function(e, t) {
                        var n = this;
                        if (!this.isVODOwner(e, t)) {
                            var i = {
                                onClick: function() {
                                    if (t) {
                                        var i = void 0;
                                        i = e.owner && e.owner.displayName ? Object(m.d)("Report {ownerDisplayName}", {
                                            ownerDisplayName: e.owner.displayName
                                        }, "ReportVideoModal") : Object(m.d)("Report this video", "ReportVideoModal"), n.props.onShowReportUserModal({
                                            onClose: n.handleReportModalClose,
                                            reportContext: {
                                                contentType: _.N.VOD_REPORT,
                                                contentID: e.id,
                                                targetUserID: e.owner && e.owner.id ? e.owner.id : "",
                                                extra: n.getVideoReportExtraField()
                                            },
                                            title: i
                                        })
                                    } else n.props.onShowLogin()
                                }
                            };
                            return g.createElement(T.a, {
                                key: "report-option",
                                interactableProps: i,
                                testSelector: "qa-video-report-button"
                            }, Object(m.d)("Report", "VideoOptions"))
                        }
                    }, t.prototype.renderHighlightOption = function(e, t) {
                        if (e.broadcastType === N.a.Archive && (this.isVODOwner(e, t) || this.isEditor()) && e.owner) return g.createElement(T.a, {
                            key: "highlight-option",
                            interactableProps: {
                                linkTo: Object(I.c)(e.owner.login, e.id)
                            },
                            testSelector: "qa-video-highlight-button"
                        }, Object(m.d)("Highlight", "VideoOptions"))
                    }, t.prototype.isVODOwner = function(e, t) {
                        return t && e.owner && t.id === e.owner.id
                    }, t.prototype.isEditor = function() {
                        return !(!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user || !this.props.data.user.self) && this.props.data.user.self.isEditor
                    }, t.prototype.getVideoReportExtraField = function() {
                        var e = Object(O.m)(this.props),
                            t = 0;
                        this.props.getCurrentVideoTime ? t = this.props.getCurrentVideoTime() : this.props.lastVideoOffset && (t = this.props.lastVideoOffset);
                        var n = {
                            timestamp: Object(v.b)(t, {
                                zeroPadAll: !0
                            })
                        };
                        return e && (n.collection = e), JSON.stringify(n)
                    }, t
                }(g.Component),
                L = Object(C.compose)(Object(E.a)(M, {
                    options: function(e) {
                        return {
                            variables: {
                                contentOwnerID: e.video.owner.id
                            }
                        }
                    },
                    skip: function(e) {
                        return null === e.currentUser || null === e.video || null === e.video.owner
                    }
                }), Object(w.b)("VideoOptions", {
                    autoReportInteractive: !0
                }))(R);
            var F = Object(r.connect)(null, function(e) {
                return Object(o.bindActionCreators)({
                    onShowLogin: function() {
                        return Object(c.e)(s.a.VODOptions)
                    },
                    onShowDeleteVideoModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(l.d)(y, t)
                    },
                    onShowReportUserModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(l.d)(d.a, t)
                    }
                }, e)
            })(Object(a.a)(L));
            n.d(t, "a", function() {
                return F
            })
        },
        "oc+d": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "channelClip"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Clip"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcaster"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "boxArtURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "138"
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "190"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "language"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "viewCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "curator"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createdAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "creationState"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "url"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "videoOffsetSeconds"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "durationSeconds"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 298
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/channel/queries/channel.gql"\nfragment channelClip on Clip {\nid\nbroadcaster {\n...channel\n}\ngame {\nid\nboxArtURL(width: 138 height: 190)\nname\n}\nlanguage\ntitle\nslug\nviewCount\ncurator {\n...channel\n}\ncreatedAt\ncreationState\nurl\nvideoOffsetSeconds\nvideo {\nid\n}\ndurationSeconds\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("BbLt").definitions)), e.exports = i
        },
        oe5X: function(e, t, n) {
            "use strict";
            var i = n("XmgI"),
                r = n("RcPG"),
                a = n("0FG4"),
                o = n("i6WW"),
                s = n("gTu3"),
                l = n("6j5V"),
                c = /^(['"*([{</]*)@((?:[^\u0000-\u007F]|[\w-])+)/;

            function d(e, t) {
                if (!t) return !1;
                var n = t.displayName,
                    i = t.login;
                return e === n || e.toLowerCase() === i
            }

            function u(e, t) {
                void 0 === t && (t = {});
                var n = t.cheers,
                    u = t.emotes,
                    g = t.links,
                    f = t.mentions,
                    v = m(e),
                    b = "",
                    k = 0;
                return p(v.reduce(function(e, t, p) {
                    if (h(t)) return b = "", e;
                    if (0 === b.length && (k = p), b += t, p !== v.length - 1 && !h(v[p + 1])) return e;
                    var m = u && Object(a.c)(b, k, u);
                    if (m) return e.concat(m);
                    var y = n && Object(i.e)(b, n);
                    if (y) return e.concat(y);
                    var C = g && Object(o.a)(b, g);
                    if (C) return e.concat(C);
                    var S = f && function(e, t) {
                        var n = e.match(c);
                        if (!n) return d(e, t.sessionUser) ? [{
                            type: r.a.CurrentUserHighlight,
                            content: e
                        }] : null;
                        var i = [],
                            a = n[1],
                            o = n[2],
                            u = e.slice(n[0].length);
                        a.length && i.push(Object(l.a)(a));
                        var p = s.a.Default;
                        return d(o, t.sessionUser) ? p = s.a.Recipient : t.sessionUser && t.sessionUser.login === t.senderLogin && (p = s.a.Sender), i.push({
                            type: r.a.Mention,
                            content: {
                                recipient: o,
                                currentUserMentionRelation: p
                            }
                        }), u.length && i.push(Object(l.a)(u)), i
                    }(b, f);
                    return S ? e.concat([S]) : e.concat(Object(l.a)(b))
                }, []))
            }

            function p(e) {
                return e.reduce(function(e, t, n) {
                    return 0 === n ? [].concat.call(e, t) : [].concat.call(e, Object(l.a)(" "), t)
                }, []).reduce(function(e, t, n) {
                    if (0 === n) return e.concat(t);
                    var i = e[e.length - 1];
                    return t.type === r.a.Text && i.type === r.a.Text ? (i.content = "" + i.content + t.content, e) : e.concat(t)
                }, [])
            }

            function m(e) {
                return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g) || []
            }

            function h(e) {
                return /\s/.test(e)
            }
            n.d(t, "a", function() {
                return u
            }), n.d(t, !1, function() {
                return p
            }), n.d(t, !1, function() {
                return m
            })
        },
        oi4T: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("/7QA"),
                o = n("2xye");
            ! function(e) {
                e.Everyone = "everyone", e.ModsOnly = "mod", e.StreamChat = "twitch_chat", e.SubsOnly = "sub"
            }(i || (i = {}));
            var s = n("UJc8");
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "c", function() {
                return d
            });
            var l = function(e) {
                    var t;
                    switch (e.roomMinimumRole) {
                        case s.b.Everyone:
                            t = i.Everyone;
                            break;
                        case s.b.Moderator:
                            t = i.ModsOnly;
                            break;
                        case s.b.Subscriber:
                            t = i.SubsOnly;
                            break;
                        default:
                            t = i.StreamChat
                    }
                    var n = {
                        channel: e.channelLogin,
                        chatroom_type: t,
                        is_host_mode: e.isHostMode,
                        is_using_web_sockets: !0
                    };
                    return e.roomID && (n.chatroom_id = e.roomID), n
                },
                c = function(e) {
                    a.o.track(o.SpadeEventType.ChatRoomJoined, l(e))
                },
                d = function(e) {
                    a.o.track(o.SpadeEventType.ChatRoomWatched, r.__assign({}, l(e), {
                        channel_id: e.channelID
                    }))
                }
        },
        okS7: function(e, t, n) {
            "use strict";
            n("kPBf");
            var i, r = n("mrSG"),
                a = n("17x9"),
                o = n("q1tI"),
                s = n("8Ad5"),
                l = n("TSYQ"),
                c = n("/7QA"),
                d = n("u5aL"),
                u = n("8/mp"),
                p = n("Ue10"),
                m = (n("JzSO"), "autocomplete-balloon-matches"),
                h = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                            noMatches: Object(c.d)("No matches.", "AutocompleteBalloon")
                        }, t.logger = c.k.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                            return t.props.matches.map(function(e, n) {
                                var i = t.state.selectedMatch,
                                    r = i && i.replacement === e.replacement,
                                    a = l("autocomplete-balloon__item", {
                                        "autocomplete-balloon__item--selected": r
                                    });
                                return o.createElement(p.Ya, {
                                    key: "autocomplete-match-" + n,
                                    refDelegate: r ? t.focusOnOption : void 0,
                                    "data-test-selector": m
                                }, o.createElement(p.Qa, {
                                    display: p.X.Block,
                                    fullWidth: !0
                                }, o.createElement("button", {
                                    onMouseEnter: t.handleMatchMouseEnter,
                                    className: a,
                                    "data-a-target": e.replacement,
                                    "data-click-index": n,
                                    onClick: t.onMatchClick
                                }, o.createElement(p.Ya, {
                                    padding: {
                                        x: .5
                                    },
                                    display: p.X.Flex,
                                    alignItems: p.f.Center
                                }, e.element))))
                            })
                        }, t.handleMatchMouseEnter = function(e) {
                            var n = t.getMatchFromEvent(e);
                            n && t.setState({
                                selectedMatch: n
                            })
                        }, t.onMatchClick = function(e) {
                            var n = t.getMatchFromEvent(e);
                            n && t.props.onMatchSelect(n)
                        }, t.getMatchFromEvent = function(e) {
                            var n = t.props.matches,
                                i = e.currentTarget.getAttribute("data-click-index");
                            return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                        }, t.handleKeydown = function(e) {
                            var n = e.charCode || e.keyCode,
                                i = function() {
                                    e.preventDefault(), e.stopPropagation()
                                };
                            switch (n) {
                                case s.a.Tab:
                                case s.a.Enter:
                                    i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                    break;
                                case s.a.Up:
                                case s.a.Down:
                                    if (!t.state.selectedMatch || !t.props.matches.length) return;
                                    var r = t.props.matches.indexOf(t.state.selectedMatch);
                                    if (-1 === r) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                    i();
                                    var a = n === s.a.Up ? -1 : 1,
                                        o = t.getIndexWithinLength(r + a, t.props.matches.length),
                                        l = t.props.matches[o];
                                    t.setState({
                                        selectedMatch: l
                                    })
                            }
                        }, t.getIndexWithinLength = function(e, t) {
                            var n = e % t;
                            return n < 0 ? n + t : n
                        }, t.onResize = function() {
                            t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                        }, t.setContainerHeight = function() {
                            var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                            t.setState({
                                containerHeight: e
                            }), t.resizeAnimationFrame = 0
                        }, t.focusOnOption = function(e) {
                            if (e && t.autocompleteBalloonElement) {
                                var n = e.getBoundingClientRect(),
                                    i = t.autocompleteBalloonElement.getBoundingClientRect();
                                (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                            }
                        }, t.setAutocompleteBalloonElement = function(e) {
                            t.autocompleteBalloonElement = e
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                            selectedMatch: this.props.matches[0]
                        })
                    }, t.prototype.componentWillUnmount = function() {
                        window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = this,
                            n = e.matches.reduce(function(e, n, i) {
                                return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                            }, 0);
                        this.setState({
                            selectedMatch: e.matches[n]
                        })
                    }, t.prototype.render = function() {
                        var e;
                        return e = 0 === this.props.matches.length ? o.createElement(p.Ya, {
                            padding: {
                                x: .5
                            },
                            "data-test-selector": "autocomplete-balloon-no-matches"
                        }, o.createElement(p.W, {
                            type: p.Wb.Span,
                            color: p.O.Alt2
                        }, this.messages.noMatches)) : this.renderMatches(), o.createElement(p.Ya, {
                            position: p.kb.Relative
                        }, o.createElement(d.a, {
                            onClickOut: this.props.onDismiss
                        }, o.createElement(p.u, {
                            direction: p.v.TopLeft,
                            "data-a-target": "autocomplete-balloon",
                            "data-test-selector": "autocomplete-balloon",
                            show: !0
                        }, o.createElement(p.Qa, {
                            "data-test-selector": "autocomplete-matches-container",
                            className: "autocomplete-balloon",
                            overflow: p.db.Hidden,
                            display: p.X.Flex,
                            flexDirection: p.Aa.Column
                        }, o.createElement("div", {
                            style: {
                                maxHeight: this.state.containerHeight
                            },
                            ref: this.setAutocompleteBalloonElement
                        }, o.createElement(u.b, null, o.createElement(p.Ya, {
                            padding: {
                                y: 1
                            }
                        }, e)))))))
                    }, t
                }(o.Component),
                g = n("uu1w"),
                f = n("2xye"),
                v = {
                    Chat: "chat",
                    Feed: "feed",
                    Whisper: "whisper"
                },
                b = ":",
                k = "#",
                y = "@",
                C = function(e) {
                    switch (e) {
                        case g.a.Emote:
                            return b;
                        case g.a.Hashtag:
                            return k;
                        case g.a.Mention:
                            return y;
                        default:
                            return void c.k.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                    }
                },
                S = function(e) {
                    var t = C(e.autocompleteType);
                    if (t) {
                        var n = {
                            channel: e.channelLogin,
                            completed_text: e.completedText,
                            source: e.source,
                            start_character: t
                        };
                        c.o.track(f.SpadeEventType.ChatSuggestionComplete, n)
                    }
                };
            ! function(e) {
                e.Input = "input", e.TextArea = "textarea"
            }(i || (i = {}));
            var E = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            autocompleteType: g.a.None,
                            matchedCursorPosition: 0,
                            matches: null,
                            value: ""
                        }, t.providers = [], t.onChange = function(e) {
                            t.setState({
                                value: e.target.value
                            }, function() {
                                t.getMatches()
                            }), t.props.onChange && t.props.onChange(e)
                        }, t.onKeyDown = function(e) {
                            var n = function() {
                                    t.props.onKeyDown && t.props.onKeyDown(e)
                                },
                                i = function() {
                                    e.preventDefault(), e.stopPropagation()
                                },
                                r = e.charCode || e.keyCode;
                            if (r !== s.a.Enter) {
                                switch (r) {
                                    case s.a.Tab:
                                        if (!t.state.matches) t.getMatches(!0) && i();
                                        break;
                                    case s.a.Esc:
                                        t.state.matches && (i(), t.resetDisplayState())
                                }
                                n()
                            } else n()
                        }, t.setComponentRefDelegate = function(e) {
                            t.componentRef = e, t.props.componentRefDelegate && t.props.componentRefDelegate(e)
                        }, t.getMatches = function(e) {
                            var n = t.state.value;
                            if (0 === t.providers.length || 0 === n.length) return t.resetDisplayState(), !1;
                            var i = t.getCurrentCursorPosition();
                            if (i > n.length);
                            else
                                for (; i < n.length && !/\s/.test(n.charAt(i));) i++;
                            var r = n.substring(0, i);
                            if (0 === r.length || /\s/.test(r.substring(r.length - 1))) return t.resetDisplayState(), !1;
                            for (var a = r.split(/\s/), o = a[a.length - 1], s = 0, l = t.providers; s < l.length; s++) {
                                var c = l[s];
                                if (!e || c.canBeTriggeredByTab) {
                                    var d = c.getMatches(o, e);
                                    if (d) return t.setState({
                                        autocompleteType: c.autocompleteType,
                                        matchedCursorPosition: i,
                                        matches: d
                                    }), !0
                                }
                            }
                            return t.resetDisplayState(), !1
                        }, t.resetDisplayState = function(e, n) {
                            var i = r.__assign({}, t.state, {
                                autocompleteType: g.a.None,
                                matches: null
                            }, e || {});
                            t.setState(i, n)
                        }, t.insertReplacement = function(e) {
                            var n = t.state.value,
                                i = t.state.matchedCursorPosition,
                                a = n.substring(0, i),
                                o = a.lastIndexOf(e.current);
                            if (-1 === o) a = a.concat(e.replacement + " "), i = a.length;
                            else {
                                var s = a.substring(0, o),
                                    l = n.length > o + e.current.length ? n.substring(o + e.current.length) : "",
                                    c = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                                a = "" + s + c + l, i = s.length + c.length
                            }
                            S(r.__assign({}, t.props.trackingParams || {}, {
                                autocompleteType: t.state.autocompleteType,
                                completedText: e.replacement,
                                source: t.props.suggestionSource
                            })), t.resetDisplayState({
                                value: a
                            }, function() {
                                t.setCursorPosition(i)
                            })
                        }, t.getCurrentCursorPosition = function() {
                            return t.componentRef.selectionStart || 0
                        }, t.setCursorPosition = function(e) {
                            t.componentRef && (t.componentRef.setSelectionRange(e, e), t.componentRef.focus())
                        }, t.registerAutocompleteProvider = function(e) {
                            return t.providers.push(e),
                                function() {
                                    var n = t.providers.indexOf(e);
                                    t.providers.splice(n, 1)
                                }
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.refDelegate && this.props.refDelegate(this)
                    }, t.prototype.getChildContext = function() {
                        return {
                            registerAutocompleteProvider: this.registerAutocompleteProvider
                        }
                    }, t.prototype.componentWillUpdate = function(e, t) {
                        !this.state.matches && t.matches && function(e) {
                            var t = C(e.autocompleteType);
                            if (t) {
                                var n = {
                                    source: e.source,
                                    start_character: t
                                };
                                c.o.track(f.SpadeEventType.ChatSuggestion, n)
                            }
                        }({
                            autocompleteType: t.autocompleteType,
                            source: e.suggestionSource
                        })
                    }, t.prototype.componentDidUpdate = function(e, t) {
                        t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                    }, t.prototype.render = function() {
                        var e = r.__assign({}, this.props, {
                            onChange: this.onChange,
                            onKeyDown: this.onKeyDown,
                            refDelegate: this.setComponentRefDelegate,
                            value: this.state.value
                        });
                        return o.createElement(p.Ya, null, this.state.matches && o.createElement(h, {
                            matches: this.state.matches,
                            onMatchSelect: this.insertReplacement,
                            onDismiss: this.resetDisplayState,
                            containerElement: this.props.containerElement
                        }), this.props.componentType === i.Input ? o.createElement(p.Sa, r.__assign({}, e, {
                            type: e.type || p.Ua.Text
                        })) : o.createElement(p.Tb, r.__assign({}, e)), this.props.children)
                    }, t.prototype.getValue = function() {
                        return this.state.value
                    }, t.prototype.setValue = function(e) {
                        this.resetDisplayState({
                            value: e
                        })
                    }, t.childContextTypes = {
                        registerAutocompleteProvider: a.func
                    }, t
                }(o.Component),
                N = n("lZdE"),
                O = n("OpME"),
                _ = (n("gDzh"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autocompleteType = g.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                            return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                        }, t.getMatchedEmotes = function(e) {
                            var n = t.state.hydratedEmotes;
                            if (!n || 0 === n.length) return null;
                            var i = e.substring(1),
                                r = n.reduce(function(e, n) {
                                    var r = n.emotes.filter(function(e) {
                                        if (e.token) return t.doesEmoteMatchTerm(e, i)
                                    });
                                    return e.concat([r])
                                }, []).filter(function(e) {
                                    return e.length > 0
                                }).reduce(function(e, t) {
                                    return e.concat(t)
                                }, []);
                            return r = Object(O.d)(r), (r = Object(O.f)(r, i)).map(function(e) {
                                return {
                                    current: ":" + i,
                                    replacement: e.token,
                                    element: t.renderEmoteSuggestion(e)
                                }
                            })
                        }, t.doesEmoteMatchTerm = function(e, t) {
                            var n = new RegExp("^" + Object(N.a)(t), "i");
                            if (e.token.match(n)) return !0;
                            var i = new RegExp("" + Object(N.a)(t.charAt(0)).toUpperCase()),
                                r = new RegExp("^" + Object(N.a)(t.slice(1)), "i"),
                                a = e.token.match(i);
                            return !!(a && a.index && e.token.slice(a.index + 1).match(r))
                        }, t.renderEmoteSuggestion = function(e) {
                            return [o.createElement(p.Ya, {
                                padding: {
                                    right: .5
                                },
                                flexShrink: 0,
                                key: "emote-img-" + e.id
                            }, o.createElement("img", {
                                className: "emote-autocomplete-provider__image",
                                srcSet: e.srcSet
                            })), o.createElement(p.W, {
                                type: p.Wb.Span,
                                key: "emote-text-" + e.id,
                                ellipsis: !0
                            }, e.token)]
                        }, t.hydrateEmotes = function(e) {
                            for (var n = [], i = 0, r = e; i < r.length; i++) {
                                var a = r[i];
                                a && a.id && a.emotes && n.push({
                                    id: a.id,
                                    emotes: Object(O.b)(a.emotes)
                                })
                            }
                            t.setState({
                                hydratedEmotes: n
                            })
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.emotes && this.props.emotes !== e.emotes && this.hydrateEmotes(e.emotes)
                    }, t.prototype.componentWillMount = function() {
                        this.hydrateEmotes(this.props.emotes)
                    }, t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerAutocompleteProvider(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.render = function() {
                        return null
                    }, t.contextTypes = {
                        registerAutocompleteProvider: a.func
                    }, t
                }(o.Component));
            n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
                return E
            }), n.d(t, "a", function() {
                return i
            }), n.d(t, !1, function() {}), n.d(t, "d", function() {
                return _
            }), n.d(t, "c", function() {
                return v
            })
        },
        p52R: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
                }(i || (i = {}))
        },
        pU2t: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("XmgI"),
                a = n("ahza"),
                o = n("DpwM"),
                s = n("a1OF"),
                l = function(e, t, n) {
                    var i = e.body,
                        r = function(e) {
                            void 0 === e && (e = []);
                            return e.reduce(function(e, t) {
                                return e[t.begin] = {
                                    id: t._id,
                                    startIndex: t.begin
                                }, e
                            }, {})
                        }(e.emoticons),
                        a = Object(s.e)(i, r, e.bits_spent || 0, n, !1, t);
                    return {
                        id: "1",
                        isAction: e.is_action,
                        tokens: a,
                        userColor: e.user_color ? e.user_color : Object(s.b)(t)
                    }
                };
            var c = n("XeJ1");
            n.d(t, "b", function() {
                return d
            }), n.d(t, "g", function() {
                return u
            }), n.d(t, "c", function() {
                return p
            }), n.d(t, "f", function() {
                return m
            }), n.d(t, "d", function() {
                return h
            }), n.d(t, "e", function() {
                return g
            }), n.d(t, "a", function() {
                return v
            });
            var d = "comment";

            function u(e) {
                return Object(a.e)(e) ? {
                    message: e.message,
                    parent_id: e.parentId
                } : {
                    content_id: e.contentId,
                    content_offset_seconds: e.contentOffsetSeconds,
                    content_type: e.contentType,
                    message: e.message
                }
            }
            var p = function(e) {
                    return {
                        comments: [v.normalizeRecord(e, r.a)],
                        users: [c.a.normalizeRecord(e.commenter)]
                    }
                },
                m = function(e, t) {
                    var n = i.__assign({}, e, {
                        more_replies: t.moreReplies
                    });
                    return {
                        comments: [v.normalizeRecord(n, r.a)],
                        users: [c.a.normalizeRecord(e.commenter)]
                    }
                },
                h = function(e, t) {
                    var n = e.comments.map(function(e) {
                            return c.a.normalizeRecord(e.commenter)
                        }),
                        i = {
                            past: o.g,
                            future: o.g
                        };
                    return void 0 !== e._next && (i.future = e._next), void 0 !== e._prev && (i.past = e._prev), {
                        comments: e.comments.reduce(function(e, i) {
                            return i.replies && i.replies.map(function(e) {
                                n.push(c.a.normalizeRecord(e.commenter))
                            }), e.concat(v.normalizeRecords(i, t))
                        }, []),
                        cursor: i,
                        users: n
                    }
                },
                g = function(e) {
                    var t = e.comments.map(function(e) {
                        return c.a.normalizeRecord(e.commenter)
                    });
                    return {
                        comments: e.comments.map(function(e) {
                            return v.normalizeRecord(e, r.a)
                        }),
                        cursor: {
                            future: e._next || o.g
                        },
                        users: t
                    }
                };

            function f(e) {
                return e.reduce(function(e, t) {
                    return e[t._id] = t.version, e
                }, {})
            }
            var v = {
                    normalizeRecords: function(e, t) {
                        var n = [v.normalizeRecord(e, t)];
                        return Array.isArray(e.replies) && e.replies.forEach(function(e) {
                            n.push(b.normalizeRecord(e, t))
                        }), n
                    },
                    normalizeRecord: function(e, t) {
                        return {
                            channelId: e.channel_id,
                            commenter: e.commenter._id,
                            contentId: e.content_id,
                            contentOffset: Math.floor(e.content_offset_seconds),
                            contentType: e.content_type,
                            createdAt: new Date(e.created_at),
                            id: e._id,
                            message: l(e.message, e.commenter._id, t),
                            moreReplies: e.more_replies || !1,
                            parentId: void 0 !== e.parent_id ? e.parent_id : "",
                            state: e.state,
                            source: e.source,
                            userBadges: f(e.message.user_badges || [])
                        }
                    }
                },
                b = {
                    normalizeRecord: function(e, t) {
                        return {
                            channelId: e.channel_id,
                            commenter: e.commenter._id,
                            contentId: e.content_id,
                            contentOffset: Math.floor(e.content_offset_seconds),
                            contentType: e.content_type,
                            createdAt: new Date(e.created_at),
                            id: e._id,
                            message: l(e.message, e.commenter._id, t),
                            moreReplies: !1,
                            parentId: void 0 !== e.parent_id ? e.parent_id : "",
                            state: e.state,
                            source: e.source,
                            userBadges: f(e.message.user_badges || [])
                        }
                    }
                }
        },
        pfAL: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return f
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("fvjX"),
                o = n("/7QA"),
                s = n("GFmA"),
                l = n("yR8l"),
                c = n("vRsq"),
                d = n("2xye"),
                u = n("GnwI"),
                p = n("6h5w"),
                m = n("eqgM"),
                h = n("9kuA"),
                g = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return !this.props.data || this.props.data.loading ? this.renderCarousel(null) : !this.props.data.user || this.props.data.error ? null : this.renderCarousel(this.props.data.user)
                    }, t.prototype.renderCarousel = function(e) {
                        var t = e ? this.parseClips(e) : null;
                        if (t && 0 === t.length) return null;
                        var n = this.props.channelLogin && this.props.includeExpandTitleLink ? {
                            channelLogin: this.props.channelLogin,
                            options: {
                                filter: c.e.Clips,
                                range: this.props.criteria.range
                            }
                        } : void 0;
                        return r.createElement("div", null, r.createElement(p.a, {
                            expandLink: n,
                            titleMessage: this.getTitle()
                        }), r.createElement(m.a, {
                            currentlyWatchingVideoID: this.props.currentlyWatchingClipSlug,
                            listContext: s.b.SingleChannelList,
                            tracking: {
                                content: d.PageviewContent.ClipsCuratorCarousel,
                                medium: this.props.tracking.medium,
                                location: this.props.tracking.location,
                                source: this.getTrackingSource(),
                                itemType: d.TwitchDataType.Clip
                            },
                            videos: t
                        }))
                    }, t.prototype.getTitle = function() {
                        return this.props.omitCreatorInTitle || !this.props.data ? Object(o.d)("Top Clips", "RecentBroadcasterClipsCarousel") : this.props.data.user && this.props.data.user.displayName ? Object(o.d)("Top Clips from {broadcaster}", {
                            broadcaster: this.props.data.user.displayName
                        }, "RecentBroadcasterClipsCarousel") : null
                    }, t.prototype.getTrackingSource = function() {
                        return this.props.channelLogin ? {
                            source_channel: this.props.channelLogin,
                            source_item_type: d.TwitchDataType.Channel
                        } : {
                            source_channel: "",
                            source_item_type: d.TwitchDataType.Channel
                        }
                    }, t.prototype.parseClips = function(e) {
                        if (!e || !e.clips || !e.clips.edges || 0 === e.clips.edges.length) return [];
                        var t = [];
                        return e.clips.edges.forEach(function(e) {
                            e && e.node && e.node.id && t.push(e.node)
                        }), t
                    }, t
                }(r.Component),
                f = Object(a.compose)(Object(l.a)(h, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                limit: e.criteria.limit,
                                criteria: {
                                    period: Object(c.l)(e.criteria.range)
                                }
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(u.b)("RecentBroadcasterClipsCarousel", {
                    autoReportInteractive: !0
                }))(g)
        },
        "pq/L": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoComments"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "hasVideoID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "badges"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "badge"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSiteAdmin"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isGlobalMod"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blockedUsers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emoteSets"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "options"
                                },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [{
                                        kind: "ObjectField",
                                        name: {
                                            kind: "Name",
                                            value: "includePrivate"
                                        },
                                        value: {
                                            kind: "BooleanValue",
                                            value: !0
                                        }
                                    }]
                                }
                            }],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "hasVideoID"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "owner"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "broadcastBadges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "badge"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "cheer"
                                            },
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "self"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isModerator"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 497
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/badges/models/badge-fragment.gql"\n#import "twilight/features/chat/models/cheer-fragment.gql"\nquery VideoComments($videoID: ID! $hasVideoID: Boolean!) {\nbadges {\n...badge\n}\ncurrentUser {\nid\nroles {\nisStaff\nisSiteAdmin\nisGlobalMod\n}\nblockedUsers {\nid\n}\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\n}\nvideo(id: $videoID options: { includePrivate: true }) @include(if: $hasVideoID) {\nid\nbroadcastType\nowner {\nid\nlogin\nbroadcastBadges {\n...badge\n}\n...cheer\nself {\nisModerator\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("IKE4").definitions)), i.definitions = i.definitions.concat(a(n("F9eG").definitions)), e.exports = i
        },
        pwkZ: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("TSYQ"),
                a = n("q1tI"),
                o = n("QzU5"),
                s = n("4rCz"),
                l = n("uIkQ"),
                c = n("0Lz3"),
                d = n("GnwI"),
                u = n("Sfdh"),
                p = n("Ue10"),
                m = 15e3,
                h = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autoDismissErrorTimeoutId = 0, t.clearDismissTimeout = function() {
                            window.clearTimeout(t.autoDismissErrorTimeoutId)
                        }, t.onManualErrorDismissClickHandler = function() {
                            t.props.onErrorDismissed(!0)
                        }, t.setAutoDismissTimeout = function() {
                            t.autoDismissErrorTimeoutId = window.setTimeout(function() {
                                t.props.onErrorDismissed()
                            }, m)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.setAutoDismissTimeout()
                    }, t.prototype.componentWillUpdate = function(e) {
                        this.props.message !== e.message && (this.clearDismissTimeout(), this.setAutoDismissTimeout())
                    }, t.prototype.componentWillUnmount = function() {
                        this.clearDismissTimeout()
                    }, t.prototype.render = function() {
                        var e = null;
                        return this.props.message === Object(u.a)().chatReplayFilterError && (e = a.createElement(p.W, {
                            type: p.Wb.Span
                        }, " ", a.createElement(p.W, {
                            type: p.Wb.Span,
                            decoration: p.Ub.Underline
                        }, a.createElement("a", {
                            onClick: this.props.onMessageClick
                        }, Object(s.d)("Click here to show all messages.", "CommentError"))))), a.createElement(p.Fb, {
                            alignItems: p.f.Center,
                            background: p.r.Base,
                            className: "anim-swoop",
                            color: p.O.Error,
                            "data-test-selector": "vod-chat-error",
                            display: p.X.Flex,
                            flexWrap: p.Ba.NoWrap,
                            fullWidth: !0,
                            padding: {
                                y: 1,
                                x: 2
                            },
                            position: p.kb.Absolute,
                            zIndex: p.jc.Above
                        }, a.createElement(p.W, {
                            type: p.Wb.Span
                        }, this.props.message, e), a.createElement(p.Ya, {
                            alignSelf: p.g.Start
                        }, a.createElement(p.A, {
                            ariaLabel: Object(s.d)("Close", "CommentErrorComponent"),
                            icon: p.ub.Close,
                            onClick: this.onManualErrorDismissClickHandler
                        })))
                    }, t
                }(a.Component),
                g = n("/7QA"),
                f = n("hyVY"),
                v = n("0FG4"),
                b = n("okS7"),
                k = n("tFCv"),
                y = n("mmRu"),
                C = n("cpJf"),
                S = n("OpME"),
                E = n("/MKj"),
                N = n("ZuiC"),
                O = n("fI4C"),
                _ = (n("UZgS"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.buildModerationDashboardURL = function() {
                            return "/" + t.props.videoOwnerLogin + "/dashboard/moderation"
                        }, t.buildModerationPrefsURL = function() {
                            return "/" + t.props.videoOwnerLogin + "/dashboard/settings/moderation"
                        }, t.onReplayModeChange = function(e) {
                            t.props.onReplayModeChange(e.currentTarget.checked)
                        }, t.onTimestampModeChange = function(e) {
                            t.props.onTimestampModeChange(e.currentTarget.checked)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = null;
                        this.props.isUpload || (e = a.createElement(p.Ya, {
                            display: p.X.Flex,
                            flexWrap: p.Ba.NoWrap,
                            justifyContent: p.Xa.Between,
                            key: "viewerReplayOption",
                            padding: {
                                bottom: 1
                            }
                        }, a.createElement(p.Ya, null, Object(g.d)("Show me only messages posted during the live broadcast", "VideoChatSettings")), a.createElement(p.Ya, {
                            flexShrink: 0
                        }, a.createElement(p.Yb, {
                            checked: this.props.isReplayFilterOn,
                            "data-test-selector": "reply-mode",
                            onChange: this.onReplayModeChange
                        }))));
                        var t = [a.createElement(p.W, {
                            key: "moderationHeader",
                            bold: !0
                        }, Object(g.d)("Mod Tools", "VideoChatSettings"))];
                        return this.props.canSessionEditModerationSettings && t.push(a.createElement(p.Qa, {
                            key: "moderationPrefs",
                            display: p.X.InlineBlock
                        }, a.createElement(p.U, {
                            to: this.buildModerationPrefsURL(),
                            "data-test-selector": "video_chat_settings_mod_prefs"
                        }, Object(g.d)("Change moderation preferences", "VideoChatSettings")))), this.props.canSessionModerateMessages && t.push(a.createElement(p.Qa, {
                            key: "moderationDashboard",
                            display: p.X.InlineBlock
                        }, a.createElement(p.U, {
                            to: this.buildModerationDashboardURL(),
                            "data-test-selector": "video_chat_settings_mod_dashboard"
                        }, Object(g.d)("Moderate messages", "VideoChatSettings")))), a.createElement(p.Ya, {
                            className: "video-chat__settings",
                            padding: {
                                x: 2,
                                y: 2
                            }
                        }, a.createElement(p.W, {
                            bold: !0
                        }, Object(g.d)("Viewer Settings", "VideoChatSettings")), e, a.createElement(p.Ya, {
                            display: p.X.Flex,
                            justifyContent: p.Xa.Between,
                            padding: {
                                bottom: 1
                            }
                        }, a.createElement(p.Ya, null, Object(g.d)("Hide timestamps", "VideoChatSettings")), a.createElement(p.Ya, {
                            flexShrink: 0
                        }, a.createElement(p.Yb, {
                            "data-test-selector": "timestamp-mode",
                            checked: this.props.hideTimestamps,
                            onChange: this.onTimestampModeChange
                        }))), t.length > 1 ? t : null)
                    }, t
                }(a.Component)),
                w = Object(d.b)("ChatSettings")(_);
            var D, I = Object(E.connect)(function(e) {
                    return {
                        isReplayFilterOn: e.vodChat.comments.isReplayFilterOn,
                        hideTimestamps: e.vodChat.comments.hideTimestamps
                    }
                }, function(e) {
                    return {
                        onReplayModeChange: function(t) {
                            Object(O.m)({
                                setting: O.c,
                                value: t ? O.b : O.a
                            }), e(Object(N.C)(t))
                        },
                        onTimestampModeChange: function(t) {
                            Object(O.m)({
                                setting: O.d,
                                value: t ? O.b : O.a
                            }), e(Object(N.F)(t))
                        }
                    }
                })(w),
                T = n("Tqc9");
            ! function(e) {
                e.CurrentTime = "current-time"
            }(D || (D = {}));
            var M = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onKeyDown = function(e) {
                        switch (e.key) {
                            case T.b:
                                e.preventDefault(), n.createComment();
                                break;
                            case T.d:
                                n.maybeUnpauseScrolling();
                                break;
                            case T.a:
                                n.setState({
                                    isMentionPaused: !n.state.isMentionPaused && n.props.isScrollingSynced || n.state.isMentionPaused
                                }), n.props.onScrollPause()
                        }
                    }, n.createComment = function() {
                        if ("" !== n.state.newMessageText) {
                            if (n.props.isPostCooldownActive) return n.setState({
                                showCoolDownState: !0
                            }), void n.props.onError(Object(u.a)().messageCreatedTooQuickError);
                            n.props.onCreateComment(n.state.newMessageText), n.setState({
                                newMessageText: ""
                            }), n.autocompleteInputRef.setValue(""), n.maybeUnpauseScrolling()
                        }
                    }, n.setTextareaRef = function(e) {
                        n.textArea = e
                    }, n.setAutocompleteInputRef = function(e) {
                        n.autocompleteInputRef = e
                    }, n.maybeUnpauseScrolling = function() {
                        n.state.isMentionPaused && (n.setState({
                            isMentionPaused: !1
                        }), n.props.onScrollResume())
                    }, n.onChange = function(e) {
                        n.setState({
                            newMessageText: e
                        })
                    }, n.onEmoticonClick = function(e) {
                        n.autocompleteInputRef.setValue(n.state.newMessageText + " " + e), n.setState({
                            newMessageText: n.state.newMessageText + " " + e
                        }), n.maybeUnpauseScrolling()
                    }, n.getSessionSpecificEmotes = function() {
                        var e = Object(v.b)(n.props.currentUser.emoteSets);
                        return Object.keys(e).map(function(t) {
                            return {
                                id: t,
                                emotes: Object(S.b)([e[t]])
                            }
                        })
                    };
                    var i = null !== n.props.currentUser && (n.props.currentUser.id === n.props.videoOwnerID || !!n.props.currentUser.roles.isStaff),
                        r = null !== n.props.currentUser && (n.props.isModerator || n.props.currentUser.roles.isSiteAdmin || i);
                    return n.state = {
                        isMentionPaused: !1,
                        canSessionModerateMessages: r,
                        canSessionEditModerationSettings: i,
                        newMessageText: "",
                        showCoolDownState: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.isPostCooldownActive || this.setState({
                        showCoolDownState: !1
                    })
                }, t.prototype.render = function() {
                    var e = null;
                    (!this.props.isUpload || this.state.canSessionModerateMessages || this.state.canSessionEditModerationSettings) && (e = a.createElement(k.b, null, a.createElement(I, {
                        canSessionEditModerationSettings: this.state.canSessionEditModerationSettings,
                        canSessionModerateMessages: this.state.canSessionModerateMessages,
                        videoOwnerLogin: this.props.videoOwnerLogin,
                        isUpload: this.props.isUpload
                    })));
                    var t = null;
                    return this.props.currentUser && (t = a.createElement(b.d, {
                        emotes: this.getSessionSpecificEmotes()
                    })), a.createElement("div", null, a.createElement(p.Ya, {
                        position: p.kb.Relative
                    }, a.createElement(b.b, {
                        componentType: b.a.TextArea,
                        suggestionSource: b.c.Chat,
                        onValueUpdate: this.onChange,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setTextareaRef,
                        refDelegate: this.setAutocompleteInputRef,
                        paddingRight: 30,
                        placeholder: Object(g.d)("Post a message", "VideoChatInput"),
                        noResize: !0,
                        "data-a-target": "video-chat-input",
                        disabled: this.state.showCoolDownState
                    }, t), a.createElement(y.a, {
                        channelOwnerID: this.props.videoOwnerID,
                        emotePickerSource: C.a.VodChat,
                        inputRef: this.textArea,
                        onClickEmote: this.onEmoticonClick,
                        attachTop: !0,
                        attachRight: !0,
                        position: p.kb.Absolute
                    })), a.createElement(p.Ya, {
                        margin: {
                            top: 1
                        },
                        justifyContent: p.Xa.Between,
                        display: p.X.Flex
                    }, e, a.createElement("span", null), " ", a.createElement(p.z, {
                        onClick: this.createComment,
                        disabled: this.state.showCoolDownState,
                        "data-a-target": "video-chat-submit-button"
                    }, a.createElement(p.Ya, {
                        display: p.X.Flex
                    }, a.createElement("span", null, Object(g.d)("Post at ", "CommentInput")), a.createElement(p.Ya, {
                        margin: {
                            x: .5
                        },
                        display: p.X.Flex
                    }, a.createElement(p.tb, {
                        asset: p.ub.GlyphLength
                    })), a.createElement("span", {
                        "data-test-selector": D.CurrentTime
                    }, Object(f.b)(this.props.currentVideoTime))))))
                }, t
            }(a.Component);
            var R, L = Object(d.b)("MessageInput", {
                    autoReportInteractive: !0
                })(M),
                F = function(e) {
                    var t = e.offset,
                        n = e.onClick;
                    return a.createElement(p.Ya, {
                        margin: {
                            right: .5
                        }
                    }, a.createElement(p.Zb, {
                        align: p.ac.Left,
                        direction: p.bc.Top,
                        label: Object(g.d)("Jump to video", "TimeStamp")
                    }, a.createElement(p.Va, {
                        onClick: n,
                        blurAfterClick: !0
                    }, a.createElement(p.Ya, {
                        padding: {
                            x: .5
                        }
                    }, a.createElement(p.W, {
                        fontSize: p.Ca.Size7
                    }, Object(f.b)(t))))))
                },
                j = n("ZEQw"),
                x = n("ZVTe"),
                A = n("Zkco"),
                U = n("u5aL"),
                P = n("Jxh/"),
                B = n("GCGb"),
                V = n("fCiU"),
                W = n("cr+I"),
                H = function(e, t) {
                    var n = new URL("https://www.twitch.tv/videos/" + e);
                    if (t) {
                        var i = W.stringify(t);
                        n.search = i
                    }
                    return n
                },
                G = n("Addw"),
                Y = "ban-user",
                z = "delete-comment-button",
                q = "reply-button",
                X = "relative-time-title",
                Q = "share-button",
                K = "share-button-clicked",
                $ = 3e3,
                J = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            confirmationAction: null,
                            isMenuOpen: !1,
                            isLinkCopied: !1
                        }, t.dismissTimeoutID = 0, t.onToggleMenu = function() {
                            t.state.isMenuOpen ? t.closeMenu() : (t.setState({
                                isMenuOpen: !0
                            }), t.props.onOpen())
                        }, t.getContent = function() {
                            if ("function" == typeof t.state.confirmationAction) return a.createElement(p.Ya, {
                                padding: {
                                    y: 1
                                }
                            }, a.createElement(p.Fb, {
                                display: p.X.Flex,
                                margin: {
                                    x: 1
                                },
                                padding: {
                                    bottom: .5
                                }
                            }, a.createElement(p.W, {
                                type: p.Wb.Span
                            }, Object(g.d)("Are you sure you want to perform this action?", "chomments.moderation.confirmAction"))), a.createElement(p.Ya, {
                                display: p.X.Flex,
                                justifyContent: p.Xa.Center,
                                alignItems: p.f.Center
                            }, a.createElement(p.Ya, {
                                display: p.X.Inline,
                                padding: {
                                    right: 1
                                }
                            }, a.createElement(p.z, {
                                type: p.F.Alert,
                                onClick: t.onContinueClickHandler,
                                "data-test-selector": B.a
                            }, Object(g.d)("Yes", "MessageOptionsMenu"))), a.createElement(p.z, {
                                type: p.F.Hollow,
                                onClick: t.onCancelClickHandler,
                                "data-test-selector": B.c
                            }, Object(g.d)("No", "MessageOptionsMenu"))));
                            var e = [];
                            t.props.isExpandedLayout || e.push(a.createElement(p.Fb, {
                                key: t.props.context.comment.id,
                                color: p.O.Alt2,
                                display: p.X.Flex,
                                "data-test-selector": X
                            }, a.createElement(p.Fb, {
                                margin: {
                                    x: 1
                                },
                                padding: {
                                    bottom: .5
                                },
                                fullWidth: !0,
                                borderBottom: !0
                            }, a.createElement(p.W, {
                                type: p.Wb.Span
                            }, Object(g.d)("Posted ", "MessageOptionsMenu"), Object(g.i)(t.props.context.comment.createdAt)))), a.createElement(p.Fb, {
                                key: t.props.context.comment.id + "2",
                                display: p.X.Flex,
                                color: p.O.Link
                            }, a.createElement(p.Va, {
                                onClick: t.onReplyClickHandler,
                                "data-test-selector": q
                            }, a.createElement(p.Ya, {
                                padding: {
                                    y: .5,
                                    x: 1
                                }
                            }, Object(g.d)("Reply to {userName}", {
                                userName: Object(V.b)(t.props.context.author)
                            }, "MessageOptionsMenu")))));
                            var n = [];
                            t.props.isCurrentUserModerator && n.push(a.createElement(p.Ya, {
                                key: t.props.context.comment.id,
                                display: p.X.Flex
                            }, a.createElement(p.Va, {
                                type: p.Wa.Alert,
                                onClick: t.onDeleteButtonClickHandler,
                                "data-test-selector": z
                            }, a.createElement(p.Fb, {
                                margin: {
                                    x: 1
                                },
                                padding: {
                                    y: .5
                                },
                                borderBottom: !0
                            }, Object(g.d)("Delete", "MessageOptionsMenu")))), a.createElement(p.Ya, {
                                key: t.props.context.comment.id + "2",
                                display: p.X.Flex
                            }, a.createElement(p.Va, {
                                type: p.Wa.Alert,
                                onClick: t.onBanUserClickHandler,
                                "data-test-selector": Y
                            }, a.createElement(p.Ya, {
                                padding: {
                                    y: .5,
                                    x: 1
                                }
                            }, Object(g.d)("Ban User", "MessageOptionsMenu")))));
                            var i = a.createElement(p.Va, {
                                onClick: t.onShareClick,
                                "data-test-selector": Q
                            }, a.createElement(p.Ya, {
                                padding: {
                                    y: .5,
                                    x: 1
                                }
                            }, Object(g.d)("Copy Link", "MessageOptionsMenu")));
                            t.state.isLinkCopied && (i = a.createElement(p.z, {
                                fullWidth: !0,
                                icon: p.ub.Check,
                                type: p.F.Success,
                                "data-test-selector": K
                            }, a.createElement(p.Ya, {
                                display: p.X.Flex,
                                alignItems: p.f.Center,
                                justifyContent: p.Xa.Start
                            }, Object(g.d)("Copied to clipboard", "MessageOptionsMenu"))));
                            var r = a.createElement(p.Fb, {
                                display: p.X.Flex,
                                fullWidth: !0,
                                key: t.props.context.comment.id + "-share",
                                color: p.O.Link
                            }, i);
                            return a.createElement(p.Ya, {
                                padding: {
                                    y: 1
                                }
                            }, e, r, n)
                        }, t.closeMenu = function() {
                            t.setState({
                                isMenuOpen: !1,
                                confirmationAction: null,
                                isLinkCopied: !1
                            }), t.props.onClose()
                        }, t.onShareClick = function() {
                            var e = t.props.context.comment,
                                n = e.contentId,
                                i = H(n, {
                                    tt_medium: "video_chat",
                                    tt_content: "message_share_link",
                                    t: Object(G.a)(e.contentOffset),
                                    comment: e.id
                                });
                            return Object(P.a)(i.toString()), t.setState({
                                isLinkCopied: !0
                            }, function() {
                                return t.dismissTimeoutID = setTimeout(function() {
                                    t.setState({
                                        isLinkCopied: !1
                                    })
                                }, $)
                            }), Object(O.l)(e, i)
                        }, t.onReplyClickHandler = function() {
                            t.props.onReplyClick(Object(V.b)(t.props.context.author)), t.closeMenu()
                        }, t.onBanUserClickHandler = function() {
                            t.setState(function(e) {
                                return i.__assign({}, e, {
                                    confirmationAction: t.props.onBanUserClick
                                })
                            })
                        }, t.onDeleteButtonClickHandler = function() {
                            t.setState(function(e) {
                                return i.__assign({}, e, {
                                    confirmationAction: t.props.onDeleteCommentClick
                                })
                            })
                        }, t.onContinueClickHandler = function() {
                            t.state.confirmationAction && t.state.confirmationAction(), t.closeMenu()
                        }, t.onCancelClickHandler = function() {
                            t.setState(function(e) {
                                return i.__assign({}, e, {
                                    confirmationAction: null
                                })
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentWillUnmount = function() {
                        clearTimeout(this.dismissTimeoutID)
                    }, t.prototype.render = function() {
                        return a.createElement(p.Ya, {
                            position: p.kb.Relative
                        }, a.createElement(U.a, {
                            onClickOut: this.closeMenu
                        }, a.createElement(p.A, {
                            ariaLabel: Object(g.d)("Message Actions Menu", "VideoCommentsMenu"),
                            size: p.B.Small,
                            type: p.C.Secondary,
                            "data-test-selector": "menu-button",
                            icon: p.ub.More,
                            onClick: this.onToggleMenu
                        }), a.createElement(p.u, {
                            direction: p.v.BottomRight,
                            show: this.state.isMenuOpen,
                            size: p.w.Small,
                            offsetX: "0.5rem"
                        }, this.getContent())))
                    }, t
                }(a.Component),
                Z = (n("Nimz"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            forceMenuVisibility: !1
                        }, t.onBanUserClickHandler = function() {
                            t.props.onBanUserClick({
                                bannedUser: t.props.context.comment.commenter,
                                targetChannel: t.props.context.comment.channelId,
                                comment: t.props.context.comment
                            })
                        }, t.onDeleteCommentClickHandler = function() {
                            t.props.onDeleteCommentClick(t.props.context.comment)
                        }, t.onMenuOpenHandler = function() {
                            t.props.onDisableSync(), t.setState({
                                forceMenuVisibility: !0
                            })
                        }, t.onMenuCloseHandler = function() {
                            t.setState({
                                forceMenuVisibility: !1
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e, t = this.props,
                            n = t.context,
                            i = t.badgeSets,
                            o = t.currentUser,
                            s = !!o && n.comment.commenter === o.id,
                            c = void 0 !== n.comment.userBadges[j.a],
                            d = r("video-chat__message-menu", {
                                "video-chat__message-menu--force-visible": this.state.forceMenuVisibility
                            }),
                            u = a.createElement(p.Ya, {
                                className: d,
                                "data-test-selector": "menu-options-wrapper",
                                flexShrink: 0
                            }, a.createElement(J, {
                                context: n,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isExpandedLayout: this.props.isExpandedLayout,
                                onBanUserClick: this.onBanUserClickHandler,
                                onClose: this.onMenuCloseHandler,
                                onDeleteCommentClick: this.onDeleteCommentClickHandler,
                                onOpen: this.onMenuOpenHandler,
                                onReplyClick: this.props.onReplyClick
                            })),
                            m = r("video-chat__message-author", ((e = {})["video-chat__message-author--me"] = s, e["video-chat__message-author--creator"] = c, e)),
                            h = s || c ? "" : n.comment.message.userColor,
                            g = a.createElement(p.Qa, {
                                padding: {
                                    right: .5
                                }
                            }, a.createElement("span", null, ":"));
                        return n.comment.message.isAction && (g = a.createElement(p.Qa, {
                            padding: {
                                right: .5
                            }
                        }, a.createElement("span", null))), a.createElement(p.Ya, {
                            alignItems: p.f.Start,
                            display: p.X.Flex,
                            flexWrap: p.Ba.NoWrap
                        }, a.createElement(p.Ya, {
                            flexGrow: 1
                        }, a.createElement(l.b, {
                            badgesToRender: n.comment.userBadges,
                            badgeSets: i
                        }), a.createElement("a", {
                            className: m,
                            "data-test-selector": "comment-author-selector",
                            "data-tt_content": "tab_videos",
                            "data-tt_medium": "video-message-author",
                            href: "/" + n.author.name,
                            rel: "noopener noreferrer",
                            target: "_blank"
                        }, a.createElement(x.a, {
                            userData: Object(V.a)(n.author, h),
                            highlighted: s || c
                        })), a.createElement(p.Ya, {
                            display: p.X.Inline,
                            className: "video-chat__message",
                            "data-test-selector": "comment-message-selector"
                        }, g, a.createElement(A.a, {
                            message: n.comment.message,
                            allowActionTextColors: !0
                        }))), u)
                    }, t
                }(a.Component)),
                ee = n("GEnX"),
                te = n("4OCo"),
                ne = function(e) {
                    return a.createElement(p.Ya, {
                        padding: {
                            y: .5,
                            left: 1
                        }
                    }, a.createElement(p.Ya, {
                        className: "vod-message__content"
                    }, a.createElement(Z, {
                        badgeSets: e.badgeSets,
                        context: e.context,
                        currentUser: e.currentUser,
                        isCurrentUserModerator: e.isCurrentUserModerator,
                        isExpandedLayout: e.isExpandedLayout,
                        onBanUserClick: e.onBanUserClick,
                        onDeleteCommentClick: e.onDeleteCommentClick,
                        onDisableSync: e.onDisableSync,
                        onReplyClick: e.onReplyClick
                    })))
                },
                ie = "vod-message-reply",
                re = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.makeReplyButtonAndRelativeTime = function(e) {
                            return a.createElement(p.Ya, {
                                display: p.X.Flex,
                                alignItems: p.f.Center
                            }, a.createElement(ee.a, {
                                context: ie,
                                onReplyClick: t.props.onReplyClick,
                                replyCommentContext: e
                            }), a.createElement(p.Qa, {
                                margin: {
                                    left: .5
                                }
                            }, a.createElement(p.W, {
                                color: p.O.Alt2,
                                fontSize: p.Ca.Size7,
                                type: p.Wb.Span
                            }, " • " + Object(g.i)(e.comment.createdAt))))
                        }, t.makeReply = function(e) {
                            var n = null;
                            return t.props.isExpandedLayout && (n = t.makeReplyButtonAndRelativeTime(e)), a.createElement("li", {
                                key: e.comment.id
                            }, a.createElement(ne, {
                                badgeSets: t.props.badgeSets,
                                context: e,
                                currentUser: t.props.currentUser,
                                isCurrentUserModerator: t.props.isCurrentUserModerator,
                                isExpandedLayout: t.props.isExpandedLayout,
                                onBanUserClick: t.props.onBanUserClick,
                                onDeleteCommentClick: t.props.onDeleteCommentClick,
                                onDisableSync: t.props.onDisableSync,
                                onReplyClick: t.props.onReplyClick
                            }), n)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.replies.map(this.makeReply.bind(this));
                        return a.createElement("ul", null, e)
                    }, t
                }(a.Component),
                ae = n("82xK"),
                oe = (n("lRNp"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = null;
                        !this.props.parentMessage.comment.moreReplies || this.props.isReplayFilterOn && !this.props.isExpandedLayout || (e = a.createElement(p.Ya, {
                            display: p.X.InlineBlock,
                            className: "vod-message__show-more-replies"
                        }, a.createElement(ae.a, {
                            onClick: this.props.onLoadMoreRepliesClick
                        })));
                        var t = null;
                        this.props.showReplyForm && (t = a.createElement(p.Ya, {
                            margin: {
                                top: .5,
                                bottom: 1,
                                x: 1
                            }
                        }, a.createElement(te.a, {
                            isCreationCoolDownActive: this.props.isCreationCoolDownActive || !1,
                            onError: this.props.onError,
                            onReplyFormClose: this.props.onReplyFormClose,
                            onReplySubmit: this.props.onReplySubmit,
                            replyToUserDisplayName: this.props.replyToUserDisplayName,
                            videoOwnerID: this.props.parentMessage.comment.channelId
                        })));
                        var n = null;
                        return this.props.isExpandedLayout && (n = a.createElement(p.Ya, {
                            alignItems: p.f.Center,
                            display: p.X.Flex
                        }, a.createElement(ee.a, {
                            context: "vod-message",
                            onReplyClick: this.props.onReplyClick,
                            replyCommentContext: this.props.parentMessage
                        }), a.createElement(p.Qa, {
                            margin: {
                                left: .5
                            }
                        }, a.createElement(p.W, {
                            color: p.O.Alt2,
                            fontSize: p.Ca.Size7,
                            type: p.Wb.Span
                        }, " • " + Object(g.i)(this.props.parentMessage.comment.createdAt))))), a.createElement(p.Ya, null, n, a.createElement(p.Ya, {
                            margin: {
                                y: .5,
                                left: .5
                            },
                            className: r("vod-message__reply", "qa-vod-chat-reply")
                        }, e, a.createElement(re, {
                            badgeSets: this.props.badgeSets,
                            currentUser: this.props.currentUser,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isExpandedLayout: this.props.isExpandedLayout,
                            onBanUserClick: this.props.onBanUserClick,
                            onDeleteCommentClick: this.props.onDeleteCommentClick,
                            onDisableSync: this.props.onDisableSync,
                            onReplyClick: this.props.onReplyClick,
                            replies: this.props.parentMessage.replies
                        }), t))
                    }, t
                }(a.Component)),
                se = (n("ya7N"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            showReplyForm: !1,
                            replyToUserDisplayName: ""
                        }, t.onReplyClickHandler = function(e) {
                            t.setState({
                                showReplyForm: !0,
                                replyToUserDisplayName: e
                            }, t.props.onDisableSync)
                        }, t.onReplyFormCloseHandler = function() {
                            t.setState({
                                showReplyForm: !1,
                                replyToUserDisplayName: ""
                            })
                        }, t.onReplySubmitHandler = function(e) {
                            t.props.onCreateReply(e, t.props.messageContext.comment.id), t.setState({
                                showReplyForm: !1,
                                replyToUserDisplayName: ""
                            })
                        }, t.onTimestampClickHandler = function() {
                            t.props.onTimeStampClick(t.props.messageContext.comment.contentOffset, t.props.messageContext.comment)
                        }, t.onLoadMoreRepliesClickHandler = function() {
                            t.props.onLoadMoreRepliesClick(t.props.messageContext.comment.id, t.props.messageContext.comment.contentId)
                        }, t.refHandler = function(e) {
                            t.shouldFocusMessage() && t.props.onFocus(e)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e, t = null;
                        (this.props.isExpandedLayout || this.props.messageContext.replies.length > 0 || this.state.showReplyForm) && (t = a.createElement(oe, {
                            badgeSets: this.props.badgeSets,
                            currentUser: this.props.currentUser,
                            isCreationCoolDownActive: this.props.isCreationCoolDownActive,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isExpandedLayout: this.props.isExpandedLayout,
                            isReplayFilterOn: this.props.isReplayFilterOn,
                            onBanUserClick: this.props.onBanUserClick,
                            onDeleteCommentClick: this.props.onDeleteCommentClick,
                            onDisableSync: this.props.onDisableSync,
                            onError: this.props.onError,
                            onLoadMoreRepliesClick: this.onLoadMoreRepliesClickHandler,
                            onReplyClick: this.onReplyClickHandler,
                            onReplyFormClose: this.onReplyFormCloseHandler,
                            onReplySubmit: this.onReplySubmitHandler,
                            parentMessage: this.props.messageContext,
                            replyToUserDisplayName: this.state.replyToUserDisplayName,
                            showReplyForm: this.state.showReplyForm
                        }));
                        var n = null;
                        this.props.hideTimestamp || (n = a.createElement(p.Ya, {
                            className: "vod-message__header",
                            "data-test-selector": "message-timestamp",
                            display: p.X.Flex,
                            flexShrink: 0,
                            textAlign: p.Sb.Right
                        }, a.createElement(F, {
                            offset: this.props.timeStampOffset,
                            onClick: this.onTimestampClickHandler
                        })));
                        var i = r("vod-message", ((e = {})["vod-message--focused"] = this.shouldFocusMessage(), e)),
                            o = this.props.messageContext.comment.highlight || !1;
                        return a.createElement(p.i, {
                            duration: p.k.Medium,
                            enabled: o,
                            type: p.n.FadeIn
                        }, a.createElement(p.Ya, {
                            alignItems: p.f.Start,
                            className: i,
                            "data-test-selector": "message-layout",
                            display: p.X.Flex,
                            flexWrap: p.Ba.NoWrap,
                            fullWidth: !0,
                            padding: {
                                y: .5,
                                left: this.props.hideTimestamp ? 2 : .5
                            },
                            refDelegate: this.refHandler
                        }, n, a.createElement(p.Ya, {
                            fullWidth: !0
                        }, a.createElement(Z, {
                            badgeSets: this.props.badgeSets,
                            context: this.props.messageContext,
                            currentUser: this.props.currentUser,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isExpandedLayout: this.props.isExpandedLayout,
                            onBanUserClick: this.props.onBanUserClick,
                            onDeleteCommentClick: this.props.onDeleteCommentClick,
                            onDisableSync: this.props.onDisableSync,
                            onReplyClick: this.onReplyClickHandler
                        }), t)))
                    }, t.prototype.shouldComponentUpdate = function(e, t) {
                        return e.focus !== this.props.focus || e.isReplayFilterOn !== this.props.isReplayFilterOn || e.hideTimestamp !== this.props.hideTimestamp || t.showReplyForm !== this.state.showReplyForm || e.messageContext.replies.length !== this.props.messageContext.replies.length || t.replyToUserDisplayName !== this.state.replyToUserDisplayName
                    }, t.prototype.shouldFocusMessage = function() {
                        return this.props.focus
                    }, t
                }(a.Component)),
                le = (n("52dQ"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            firstScroll: !0
                        }, t.componentInitiatedScroll = !1, t.mouseDragging = !1, t.preventScrolling = !1, t.allowScrolling = function() {
                            t.preventScrolling = !1
                        }, t.atBottom = function() {
                            var e = t.commentListRef.scrollTop,
                                n = t.commentListRef.scrollHeight;
                            return e + t.commentListRef.clientHeight === n
                        }, t.bindCommentListRef = function(e) {
                            t.commentListRef = e
                        }, t.onMouseDown = function() {
                            t.preventScrolling = !1, t.mouseDragging = !0
                        }, t.onMouseUp = function() {
                            t.mouseDragging = !1
                        }, t.onScroll = function() {
                            t.shouldFireOnScroll() && (t.componentInitiatedScroll || (t.atBottom() ? t.props.onScrollBottom() : t.props.onScrollOffBottom()), t.componentInitiatedScroll = !1, t.preventScrolling = !0)
                        }, t.syncButtonClick = function() {
                            t.preventScrolling = !1, t.props.onSyncScrollClick()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.onMount()
                    }, t.prototype.componentDidUpdate = function() {
                        this.preventScrolling = !0, this.props.isScrollingSynced && (this.preventScrolling = !1, this.componentInitiatedScroll = !0, this.commentListRef.scrollTop = this.commentListRef.scrollHeight)
                    }, t.prototype.render = function() {
                        var e, t = r("video-chat__message-list-wrapper", ((e = {})["video-chat__message-list-wrapper--unsynced"] = !this.props.isScrollingSynced, e)),
                            n = null;
                        return !1 === this.props.isScrollingSynced && (n = a.createElement(p.Qa, {
                            className: "video-chat__sync-button",
                            padding: {
                                x: 1
                            },
                            position: p.kb.Absolute,
                            attachBottom: !0
                        }, a.createElement("button", {
                            onClick: this.syncButtonClick
                        }, Object(s.d)("Resume auto scroll", "MessageScrollArea")))), a.createElement(p.Fb, {
                            fullHeight: !0,
                            overflow: p.db.Hidden,
                            position: p.kb.Relative
                        }, a.createElement("div", {
                            className: t,
                            onKeyDown: this.allowScrolling,
                            onMouseMove: this.allowScrolling,
                            onMouseDown: this.onMouseDown,
                            onMouseUp: this.onMouseUp,
                            onScroll: this.onScroll,
                            onWheel: this.allowScrolling,
                            ref: this.bindCommentListRef,
                            tabIndex: -1,
                            "data-test-selector": "video-chat-message-list-wrapper"
                        }, this.props.children), n)
                    }, t.prototype.shouldFireOnScroll = function() {
                        return !this.mouseDragging && this.preventScrolling ? (this.componentInitiatedScroll = !1, !1) : !(this.state.firstScroll && !this.props.startSynced) || (this.setState({
                            firstScroll: !1
                        }), !1)
                    }, t
                }(a.Component)),
                ce = n("DpwM"),
                de = n("l41m"),
                ue = n("ehEd"),
                pe = function(e, t) {
                    return !!e && (t >= e.offset && e.offset + e.duration >= t)
                };
            n("n+IG");
            n.d(t, "a", function() {
                    return ge
                }),
                function(e) {
                    e.MessageInputPlaceholder = "message-input-placeholder", e.ChatContentPlaceholder = "message-content-placeholder", e.VideoChatError = "video-chat-error", e.NoCommentCTA = "no-comments-cta"
                }(R || (R = {}));
            var me = 5e3;
            var he = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            commentAlreadyFocused: !1
                        }, t.badgeSets = new l.c([], [], ""), t.createComment = function(e) {
                            if (t.props.videoID) {
                                var n = {
                                    contentId: t.props.videoID,
                                    contentOffsetSeconds: t.props.currentVideoTime,
                                    contentType: ce.e,
                                    message: e
                                };
                                t.onCreate(n)
                            }
                        }, t.createReply = function(e, n) {
                            var i = {
                                message: e,
                                parentId: n
                            };
                            t.onCreate(i)
                        }, t.onErrorDismissedHandler = function(e) {
                            t.props.onError("");
                            var n = t.props.errorMessage === Object(u.a)().chatReplayFilterError;
                            e && t.props.shouldSendReplayFilterError && n && t.props.onErrorDismissClick()
                        }, t.onErrorMessageClickHandler = function() {
                            t.props.onError(""), t.props.onTurnOffReplayFilter()
                        }, t.onMessageScrollAreaMount = function() {
                            t.props.highlightedMessageID && "" !== t.props.highlightedMessageID && t.props.onDisableSync()
                        }, t.onError = function(e) {
                            t.props.onError(e)
                        }, t.onLoadMoreRepliesHandler = function(e, n) {
                            var i = t.props.data.video,
                                r = i && i.owner.cheer && i.owner.cheer.emotes || [];
                            t.props.onLoadMoreReplies(e, t.props.replyCursorMap, n, Object(c.a)(r))
                        }, t.focusedCommentCallback = function(e) {
                            t.setState({
                                commentToFocus: e
                            })
                        }, t.startUnfocusTimeout = function() {
                            t.focusTimer = setTimeout(function() {
                                t.setState({
                                    commentAlreadyFocused: !0
                                })
                            }, me)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.props.onWillMount()
                    }, t.prototype.componentDidMount = function() {
                        this.props.startInReplayMode && this.props.onDidMount(this.props.startInReplayMode)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        void 0 !== e.highlightedMessageID && this.props.highlightedMessageID !== e.highlightedMessageID && (this.props.onPlayerSeekRequest(e.highlightTimestamp), this.props.onDisableSync(), this.setState({
                                commentAlreadyFocused: !1
                            })),
                            function(e, t) {
                                if (!t.data.loading && !t.data.error) {
                                    var n = t.data.video !== e.data.video,
                                        i = t.data.badges !== e.data.badges;
                                    return n || i
                                }
                                return !1
                            }(this.props, e) && (this.badgeSets = new l.c([], [], ""), !e.data.loading && !e.data.error && e.data.video && e.data.video.owner && (this.badgeSets = new l.c(e.data.badges, e.data.video.owner.broadcastBadges, e.data.video.owner.login))), this.props.onUpdateBegan(e, this.props)
                    }, t.prototype.componentDidUpdate = function() {
                        (this.props.data.loading || this.props.data.error || !this.props.hasFetchedComments || this.props.latencyTracking.reportInteractive(), this.props.data.loading || this.props.data.error || !this.props.disableChatForVideo || this.props.latencyTracking.reportInteractive(), this.state.commentToFocus) && ((this.state.commentToFocus.nextElementSibling || this.state.commentToFocus).scrollIntoView(!0), this.setState({
                            commentToFocus: void 0
                        }), this.startUnfocusTimeout())
                    }, t.prototype.componentWillUnmount = function() {
                        clearTimeout(this.focusTimer), this.props.latencyTracking.reportInteractive(), this.props.onUnmount()
                    }, t.prototype.render = function() {
                        var e, t = this,
                            n = this.props,
                            i = n.comments,
                            l = n.highlightedMessageID,
                            c = n.data,
                            d = c.video;
                        if (this.props.disableChatForVideo) e = a.createElement("div", {
                            "data-test-selector": R.ChatContentPlaceholder
                        });
                        else if (!d || c.loading) e = a.createElement(p.ab, {
                            fillContent: !0
                        });
                        else if (c.error) e = a.createElement(p.Ya, {
                            alignItems: p.f.Center,
                            "data-test-selector": R.VideoChatError,
                            fullHeight: !0,
                            justifyContent: p.Xa.Center
                        }, a.createElement(p.W, {
                            italic: !0
                        }, Object(s.d)("Video Chat is currently unavailable.", "VideoChat")));
                        else {
                            var u = void 0;
                            if (this.props.hasFetchedComments && this.props.offsetRange === de.a) u = a.createElement(p.Qa, {
                                display: p.X.Flex,
                                margin: {
                                    x: 1,
                                    top: 2,
                                    bottom: 1
                                },
                                alignItems: p.f.Center
                            }, a.createElement("li", {
                                "data-test-selector": R.NoCommentCTA
                            }, a.createElement(p.Qa, {
                                margin: {
                                    right: 1
                                }
                            }, a.createElement("img", {
                                src: Object(ue.b)(65),
                                srcSet: Object(ue.c)(65)
                            })), Object(s.d)("Join the chat while watching the video!", "VideoChatComponent")));
                            else {
                                u = (this.props.messageWindow ? i.filter(function(e) {
                                    return pe(t.props.messageWindow, e.comment.contentOffset)
                                }) : i).map(function(e, n) {
                                    var i = !t.state.commentAlreadyFocused && e.comment.id === l,
                                        r = n + 1 === t.props.comments.length,
                                        s = !t.props.isScrollingSynced && r,
                                        u = e.comment.contentOffset;
                                    return t.props.messageWindow && pe(t.props.messageWindow, e.comment.contentOffset) && (u = e.comment.contentOffset - t.props.messageWindow.offset), a.createElement(p.Qa, {
                                        padding: s ? {
                                            bottom: 4
                                        } : {},
                                        key: e.comment.id,
                                        fullWidth: !0
                                    }, a.createElement("li", null, a.createElement(se, {
                                        badgeSets: t.badgeSets,
                                        currentUser: c.currentUser,
                                        focus: i,
                                        isCreationCoolDownActive: t.props.isCreationCoolDownActive,
                                        isCurrentUserModerator: t.props.isCurrentUserModerator,
                                        isExpandedLayout: d.broadcastType === o.a.Upload,
                                        isReplayFilterOn: t.props.isReplayFilterOn,
                                        messageContext: e,
                                        onBanUserClick: t.props.onBanUser,
                                        onCreateReply: t.createReply,
                                        onDeleteCommentClick: t.props.onDeleteComment,
                                        onDisableSync: t.props.onDisableSync,
                                        onError: t.onError,
                                        onFocus: t.focusedCommentCallback,
                                        onLoadMoreRepliesClick: t.onLoadMoreRepliesHandler,
                                        onTimeStampClick: t.props.onPlayerSeekRequest,
                                        hideTimestamp: t.props.hideTimestamps,
                                        timeStampOffset: u
                                    })))
                                })
                            }
                            e = a.createElement("ul", {
                                style: {
                                    minHeight: 0
                                }
                            }, u)
                        }
                        var m, g = void 0 === this.props.highlightedMessageID,
                            f = null;
                        if ("" !== this.props.errorMessage && (f = a.createElement(h, {
                                message: this.props.errorMessage,
                                onErrorDismissed: this.onErrorDismissedHandler,
                                onMessageClick: this.onErrorMessageClickHandler
                            })), !d || !d.owner || c.loading || c.error || this.props.disableChatForVideo) m = a.createElement(p.jb, {
                            "data-test-selector": R.MessageInputPlaceholder,
                            height: 90,
                            width: 340
                        });
                        else {
                            var v = this.props.currentVideoTime;
                            this.props.messageWindow && pe(this.props.messageWindow, this.props.currentVideoTime) && (v = this.props.currentVideoTime - this.props.messageWindow.offset), m = a.createElement(L, {
                                currentUser: c.currentUser,
                                currentVideoTime: v,
                                onError: this.onError,
                                isModerator: !!d.owner.self && d.owner.self.isModerator,
                                isReplayMode: this.props.isReplayFilterOn,
                                isScrollingSynced: this.props.isScrollingSynced,
                                isPostCooldownActive: this.props.isCreationCoolDownActive,
                                isUpload: d.broadcastType === o.a.Upload,
                                onCreateComment: this.createComment,
                                onScrollPause: this.props.onDisableSync,
                                onScrollResume: this.props.onEnableSync,
                                videoOwnerID: d.owner.id,
                                videoOwnerLogin: d.owner.login
                            })
                        }
                        return a.createElement(p.Fb, {
                            className: r("video-chat", "qa-vod-chat"),
                            display: p.X.Flex,
                            borderLeft: !0,
                            color: p.O.Alt,
                            flexDirection: p.Aa.Column,
                            flexShrink: 0,
                            flexWrap: p.Ba.NoWrap,
                            fullHeight: !0,
                            fullWidth: !0,
                            position: p.kb.Relative
                        }, a.createElement(p.Fb, {
                            alignItems: p.f.Center,
                            background: p.r.Alt,
                            className: "video-chat__header",
                            display: p.X.Flex,
                            flexShrink: 0,
                            justifyContent: p.Xa.Center
                        }, a.createElement(p.W, {
                            type: p.Wb.Span
                        }, Object(s.d)("Chat on Videos", "VideoChatPresentation"))), f, a.createElement(le, {
                            startSynced: g,
                            isScrollingSynced: this.props.isScrollingSynced,
                            onScrollOffBottom: this.props.onDisableSync,
                            onScrollBottom: this.props.onEnableSync,
                            onMount: this.onMessageScrollAreaMount,
                            onSyncScrollClick: this.props.onEnableSync
                        }, a.createElement(p.Ya, {
                            display: p.X.Flex,
                            flexDirection: p.Aa.Column,
                            fullHeight: !0,
                            justifyContent: p.Xa.End
                        }, a.createElement(p.Qa, {
                            display: p.X.Flex,
                            flexWrap: p.Ba.Wrap,
                            alignItems: p.f.End,
                            fullWidth: !0
                        }, e))), a.createElement(p.Ya, {
                            className: "video-chat__input",
                            padding: {
                                top: 1,
                                bottom: 2,
                                x: 2
                            },
                            flexShrink: 0,
                            fullWidth: !0
                        }, m))
                    }, t.prototype.onCreate = function(e) {
                        this.props.isLoggedIn ? this.props.onCreate(e) : this.props.onShowLogin()
                    }, t
                }(a.Component),
                ge = Object(d.b)("VideoChat")(he)
        },
        qKeE: function(e, t, n) {},
        qnat: function(e, t, n) {
            "use strict";
            var i, r, a = n("mrSG"),
                o = n("q1tI"),
                s = n("fvjX"),
                l = n("yR8l"),
                c = n("eDVu"),
                d = n("0Log"),
                u = n("/aPz"),
                p = n("TSYQ"),
                m = n("/7QA"),
                h = n("8/mp"),
                g = n("Ue10");
            n("CK1f");
            ! function(e) {
                e[e.Gold = 0] = "Gold", e[e.Silver = 1] = "Silver", e[e.Bronze = 2] = "Bronze", e[e.Default = 3] = "Default"
            }(i || (i = {})),
            function(e) {
                e[e.Big = 0] = "Big", e[e.Small = 1] = "Small"
            }(r || (r = {}));
            var f, v = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this.renderMedalSVG(this.props.medal, this.props.size),
                            t = p("bits-leaderboard-medal__profile-image", {
                                "bits-leaderboard-medal__profile-image--big": this.props.size === r.Big
                            }, {
                                "bits-leaderboard-medal__profile-image--small": this.props.size === r.Small
                            }),
                            n = null;
                        return this.props.profileImageUrl && (n = o.createElement(g.Qa, {
                            position: g.kb.Absolute
                        }, o.createElement("img", {
                            className: t,
                            src: this.props.profileImageUrl
                        }))), o.createElement(g.Ya, {
                            className: "bits-leaderboard-medal",
                            display: g.X.Flex,
                            position: g.kb.Relative
                        }, e, n)
                    }, t.prototype.renderMedalSVG = function(e, t) {
                        var n = t === r.Big ? "bits-leaderboard-medal__big" : "bits-leaderboard-medal__small",
                            a = null;
                        switch (e) {
                            case i.Gold:
                                a = o.createElement(y, null);
                                break;
                            case i.Silver:
                                a = o.createElement(C, null);
                                break;
                            case i.Bronze:
                                a = o.createElement(b, null);
                                break;
                            default:
                                a = o.createElement(k, null)
                        }
                        return o.createElement(g.Qa, {
                            className: n
                        }, a)
                    }, t
                }(o.Component),
                b = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("linearGradient", {
                        x1: "14.834%",
                        y1: "10.25%",
                        x2: "82.068%",
                        y2: "89.469%",
                        id: "bits-leaderboard-bronze-linearGradient-1"
                    }, o.createElement("stop", {
                        stopColor: "#DF904C",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#A65611",
                        offset: "100%"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-bronze-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("linearGradient", {
                        x1: "19.142%",
                        y1: "10.021%",
                        x2: "79.509%",
                        y2: "86.458%",
                        id: "bits-leaderboard-bronze-linearGradient-3"
                    }, o.createElement("stop", {
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#494949",
                        offset: "9.355%"
                    }), o.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.419%"
                    }), o.createElement("stop", {
                        stopColor: "#818181",
                        offset: "25.723%"
                    }), o.createElement("stop", {
                        stopColor: "#5D5D5D",
                        offset: "39.965%"
                    }), o.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), o.createElement("stop", {
                        stopColor: "#7A7A7A",
                        offset: "50.012%"
                    }), o.createElement("stop", {
                        stopColor: "#717171",
                        offset: "57.677%"
                    }), o.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "63.526%"
                    }), o.createElement("stop", {
                        stopColor: "#888",
                        offset: "69.88%"
                    }), o.createElement("stop", {
                        stopColor: "#F1F1F1",
                        offset: "75.215%"
                    }), o.createElement("stop", {
                        stopColor: "#B9B9B9",
                        offset: "79.325%"
                    }), o.createElement("stop", {
                        stopColor: "#545454",
                        offset: "92.875%"
                    }), o.createElement("stop", {
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "19.604%",
                        y1: "10.043%",
                        x2: "84.81%",
                        y2: "89.074%",
                        id: "bits-leaderboard-bronze-linearGradient-4"
                    }, o.createElement("stop", {
                        stopColor: "#F2C6A5",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#864223",
                        offset: "100%"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-bronze-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-bronze-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-bronze-Medal-3-bronze-lg"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-bronze-Star-Copy-2B"
                    }, o.createElement("use", {
                        fill: "#DE9572",
                        xlinkHref: "#bits-leaderboard-bronze-path-2"
                    }), o.createElement("path", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-bronze-Star-Copy-3B",
                        fill: "url(#bits-leaderboard-bronze-linearGradient-3)",
                        opacity: ".4",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("g", {
                        id: "bits-leaderboard-bronze-Oval-Copy-B"
                    }, o.createElement("use", {
                        fill: "#A96643",
                        xlinkHref: "#bits-leaderboard-bronze-path-5"
                    }), o.createElement("circle", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    })))))
                },
                k = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 20 20",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("path", {
                        id: "bits-leaderboard-default-path-1",
                        d: "M10 16.88l-1.31676 1.01089-.91717-1.38367-1.57365.52857-.4182-1.6065-1.66001-.01104.12608-1.65525-1.56648-.54944.65672-1.52462-1.3032-1.0283L3.1435 9.43184l-.8987-1.39573 1.45468-.79978-.39681-1.61193 1.63555-.2841.14808-1.65343 1.63918.26234.67692-1.51576 1.46519.78037L10 2l1.13241 1.21383 1.46519-.78037.67692 1.51576 1.63918-.26234.14808 1.65342 1.63555.28411-.3968 1.61193 1.45467.79978-.8987 1.39573 1.11618 1.22878-1.3032 1.02831.6567 1.52462-1.56647.54944.12608 1.65525-1.66.01104-.41821 1.6065-1.57365-.52857-.91717 1.38367z"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-default-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-default-bitbadge/blank"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-default-Star"
                    }, o.createElement("use", {
                        fill: "#D7CCEB",
                        xlinkHref: "#bits-leaderboard-default-path-1"
                    }), o.createElement("path", {
                        stroke: "#D7CCEB",
                        d: "M10 17.51035l-1.4374 1.10351-1.0012-1.51044-1.71783.577-.45652-1.7537-1.8121-.01204.13763-1.8069-1.71-.59979.71688-1.6643-1.4226-1.12253L2.5153 9.3798l-.98104-1.52362 1.58796-.87305-.43317-1.75961 1.7854-.31014.16165-1.80492 1.78937.28638.73894-1.65463 1.59943.85187L10 1.26703l1.23616 1.32505 1.59943-.85187.73894 1.65463 1.78937-.28638.16165 1.80492 1.7854.31014-.43317 1.7596 1.58796.87306-.98104 1.52362 1.21844 1.34136-1.4226 1.12252.71688 1.66431-1.71.59978.13763 1.8069-1.8121.01205-.45652 1.7537-1.71782-.577-1.00121 1.51044L10 17.51036z"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-default-Oval-2",
                        fill: "#EEE9F6",
                        cx: "10",
                        cy: "10",
                        r: "6"
                    }))))
                },
                y = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("linearGradient", {
                        x1: "15.783%",
                        y1: "9.653%",
                        x2: "82.407%",
                        y2: "91.627%",
                        id: "bits-leaderboard-gold-linearGradient-1"
                    }, o.createElement("stop", {
                        stopColor: "#D8B258",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#A4770E",
                        offset: "100%"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-gold-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("linearGradient", {
                        x1: "17.025%",
                        y1: "7.356%",
                        x2: "84.092%",
                        y2: "91.769%",
                        id: "bits-leaderboard-gold-linearGradient-3"
                    }, o.createElement("stop", {
                        stopColor: "#E5B561",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#EEC05F",
                        offset: "12.638%"
                    }), o.createElement("stop", {
                        stopColor: "#FFECB9",
                        offset: "20.419%"
                    }), o.createElement("stop", {
                        stopColor: "#DCB35E",
                        offset: "30.58%"
                    }), o.createElement("stop", {
                        stopColor: "#E0B55B",
                        offset: "45.279%"
                    }), o.createElement("stop", {
                        stopColor: "#CDA148",
                        offset: "62.771%"
                    }), o.createElement("stop", {
                        stopColor: "#E9CC8F",
                        offset: "76.584%"
                    }), o.createElement("stop", {
                        stopColor: "#ECBE5D",
                        offset: "83.038%"
                    }), o.createElement("stop", {
                        stopColor: "#C09A4C",
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "83.2%",
                        y1: "89.733%",
                        x2: "12.813%",
                        y2: "3.179%",
                        id: "bits-leaderboard-gold-linearGradient-4"
                    }, o.createElement("stop", {
                        stopColor: "#9A790A",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#FFEFB9",
                        offset: "87.642%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "100%"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-gold-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-gold-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-gold-Medal-1-gold-lg"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-gold-Star"
                    }, o.createElement("use", {
                        fill: "#D6A94C",
                        xlinkHref: "#bits-leaderboard-gold-path-2"
                    }), o.createElement("path", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-gold-Star",
                        fill: "url(#bits-leaderboard-gold-linearGradient-3)",
                        d: "M16 28.58l-2.469 2.215-1.615-2.897-3.055 1.294-.587-3.265-3.31.232.505-3.279-3.206-.855 1.543-2.937-2.755-1.85 2.413-2.277-2.005-2.643 3.021-1.371-1.037-3.151 3.302-.316.042-3.317 3.226.774 1.117-3.124 2.8 1.78L16 1l2.07 2.592 2.8-1.78 1.117 3.125 3.226-.774.042 3.317 3.302.316-1.037 3.151 3.021 1.37-2.005 2.644 2.413 2.278-2.755 1.849 1.543 2.937-3.206.855.505 3.28-3.31-.233-.587 3.265-3.055-1.294-1.615 2.897z"
                    }), o.createElement("g", {
                        id: "bits-leaderboard-gold-Oval"
                    }, o.createElement("use", {
                        fill: "#BE912A",
                        xlinkHref: "#bits-leaderboard-gold-path-5"
                    }), o.createElement("circle", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    })))))
                },
                C = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("linearGradient", {
                        x1: "18.738%",
                        y1: "20.297%",
                        x2: "79.716%",
                        y2: "88.714%",
                        id: "bits-leaderboard-silver-linearGradient-1"
                    }, o.createElement("stop", {
                        stopColor: "#D0D8DB",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#7E848A",
                        offset: "100%"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-silver-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("linearGradient", {
                        x1: "19.638%",
                        y1: "10.855%",
                        x2: "81.99%",
                        y2: "89.124%",
                        id: "bits-leaderboard-silver-linearGradient-3"
                    }, o.createElement("stop", {
                        stopColor: "#202020",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.779%"
                    }), o.createElement("stop", {
                        stopColor: "#313131",
                        offset: "30.58%"
                    }), o.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), o.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "61.521%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "74.572%"
                    }), o.createElement("stop", {
                        stopColor: "#656565",
                        offset: "87.343%"
                    }), o.createElement("stop", {
                        stopColor: "#C4C4C4",
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "0%",
                        y1: "0%",
                        x2: "99.438%",
                        y2: "96.312%",
                        id: "bits-leaderboard-silver-linearGradient-4"
                    }, o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "3.677%"
                    }), o.createElement("stop", {
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "8.437%",
                        y1: "13.448%",
                        x2: "86.525%",
                        y2: "83.33%",
                        id: "bits-leaderboard-silver-linearGradient-5"
                    }, o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#EAEEF2",
                        offset: "9.632%"
                    }), o.createElement("stop", {
                        stopColor: "#686C71",
                        offset: "100%"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-silver-path-6",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-silver-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-silver-Medal-2-silver-lg"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-silver-Star-Copy-2"
                    }, o.createElement("use", {
                        fill: "#CBC8D0",
                        xlinkHref: "#bits-leaderboard-silver-path-2"
                    }), o.createElement("path", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-3",
                        fill: "url(#bits-leaderboard-silver-linearGradient-3)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-4-grad",
                        fill: "url(#bits-leaderboard-silver-linearGradient-4)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("g", {
                        id: "bits-leaderboard-silver-Oval-Copy"
                    }, o.createElement("use", {
                        fill: "#A3A7AA",
                        xlinkHref: "#bits-leaderboard-silver-path-6"
                    }), o.createElement("circle", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-5)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    })))))
                },
                S = n("3CMh"),
                E = n("6MRn"),
                N = n("4h+t"),
                O = (n("ky+Y"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(g.Ya, {
                            display: g.X.InlineFlex,
                            alignItems: g.f.Center,
                            flexGrow: 1
                        });
                        var e = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            t = null,
                            n = "";
                        if (this.props.data && this.props.data.user) {
                            n = this.props.data.user.displayName || this.props.data.user.login;
                            var i = o.createElement(g.W, {
                                ellipsis: !0
                            }, n);
                            this.props.selfId && this.props.selfId === this.props.id && (i = o.createElement(g.W, {
                                ellipsis: !0,
                                color: g.O.Link,
                                bold: !0
                            }, n)), t = o.createElement(g.Ya, {
                                ellipsis: !0,
                                className: "bits-leaderboard-expanded-leaderboard-entry__username",
                                margin: {
                                    x: 1
                                },
                                display: g.X.InlineBlock
                            }, i)
                        }
                        var r, a = null;
                        a = this.props.selfId && this.props.selfId === this.props.value ? o.createElement(g.hb, {
                            label: this.props.rank.toString(),
                            type: g.ib.Brand
                        }) : o.createElement(g.W, {
                            color: g.O.Link,
                            bold: !0
                        }, this.props.rank);
                        var s = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || m.a.defaultAvatarURL;
                        return r = o.createElement(g.Ya, {
                            overflow: g.db.Hidden,
                            display: g.X.InlineFlex,
                            flexGrow: 1,
                            fullWidth: !0,
                            alignItems: g.f.Center
                        }, o.createElement(g.Ya, {
                            className: "bits-leaderboard-expanded-leaderboard-entry__rank",
                            padding: {
                                right: .5
                            }
                        }, a), o.createElement("img", {
                            src: s,
                            className: "bits-leaderboard-expanded-leaderboard-entry__avatar"
                        }), t, o.createElement(g.Ya, {
                            flexShrink: 0,
                            className: "bits-leaderboard-expanded-leaderboard-entry__score",
                            margin: {
                                left: "auto"
                            },
                            display: g.X.InlineBlock
                        }, o.createElement(S.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: e,
                            size: S.b.ExtremelySmall,
                            display: g.X.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: g.f.Center
                        }))), o.createElement(g.Ya, {
                            className: "bits-leaderboard-expanded-leaderboard-entry",
                            display: g.X.Block,
                            alignItems: g.f.Center
                        }, r)
                    }, t
                }(o.Component)),
                _ = Object(s.compose)(Object(l.a)(E, {
                    name: "data",
                    skip: function(e) {
                        return !e.id
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.value,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(O),
                w = (n("U80U"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(g.Ya, {
                            display: g.X.InlineFlex,
                            alignItems: g.f.Center,
                            flexGrow: 1
                        });
                        var e = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            t = null,
                            n = "";
                        if (this.props.data && this.props.data.user) {
                            n = this.props.data.user.displayName || this.props.data.user.login;
                            var i = o.createElement(g.W, {
                                ellipsis: !0,
                                bold: !0
                            }, n);
                            this.props.selfId && this.props.selfId === this.props.value && (i = o.createElement(g.W, {
                                ellipsis: !0,
                                color: g.O.Link,
                                bold: !0
                            }, n)), t = o.createElement(g.Ya, {
                                ellipsis: !0,
                                className: "bits-leaderboard-expanded-top-three-entry__username",
                                margin: {
                                    x: .5
                                },
                                display: g.X.InlineBlock
                            }, i)
                        }
                        var a, s = null;
                        s = this.props.selfId && this.props.selfId === this.props.value ? o.createElement(g.hb, {
                            label: this.props.rank.toString(),
                            type: g.ib.Brand
                        }) : o.createElement(g.W, {
                            color: g.O.Link,
                            bold: !0
                        }, this.props.rank);
                        var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || m.a.defaultAvatarURL;
                        return a = o.createElement(g.Ya, {
                            overflow: g.db.Hidden,
                            display: g.X.InlineFlex,
                            flexGrow: 1,
                            fullWidth: !0,
                            alignItems: g.f.Center
                        }, o.createElement(g.Ya, {
                            className: "bits-leaderboard-expanded-top-three-entry__rank"
                        }, s), o.createElement(v, {
                            size: r.Big,
                            medal: this.props.medal,
                            profileImageUrl: l
                        }), t, o.createElement(g.Ya, {
                            flexShrink: 0,
                            className: "bits-leaderboard-expanded-top-three-entry__score",
                            margin: {
                                left: "auto"
                            },
                            display: g.X.InlineBlock
                        }, o.createElement(S.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: e,
                            size: S.b.ExtremelySmall,
                            display: g.X.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: g.f.Center
                        }))), o.createElement(g.Ya, {
                            className: "bits-leaderboard-expanded-top-three-entry",
                            display: g.X.Block
                        }, a)
                    }, t
                }(o.Component)),
                D = Object(s.compose)(Object(l.a)(E, {
                    name: "data",
                    skip: function(e) {
                        return !e.id
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.value,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(w);
            ! function(e) {
                e.Weekly = "WEEK", e.AllTime = "ALLTIME", e.Monthly = "MONTH"
            }(f || (f = {}));
            n("2C+f");
            var I = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderExpandArrow = function() {
                        return o.createElement(g.Ya, {
                            position: g.kb.Absolute,
                            attachRight: !0,
                            attachTop: !0,
                            className: "bits-leaderboard-expanded__arrow",
                            display: g.X.Flex,
                            alignItems: g.f.Stretch
                        }, o.createElement(g.z, {
                            size: g.D.Small,
                            fullWidth: !0,
                            type: g.F.Text,
                            onClick: t.props.toggleExpand
                        }, o.createElement(g.tb, {
                            asset: g.ub.AngleUp,
                            height: 20,
                            width: 20
                        })))
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.shouldRenderBottomContent(),
                        t = this.renderTopThreeEntries(),
                        n = this.renderTopTenEntries(),
                        i = this.renderExpandArrow(),
                        r = this.renderTopSection(),
                        a = null,
                        s = null;
                    e && ((a = this.renderUserPlaceEntry()) || (s = this.renderBottomSection()));
                    var l = {
                            "bits-leaderboard-expanded__top-three-break": !!this.props.topEdges && this.props.topEdges.length > 3
                        },
                        c = {
                            "bits-leaderboard-expanded__top-ten-break": !!this.props.topEdges && this.props.topEdges.length > 0
                        };
                    return o.createElement(g.Fb, {
                        background: g.r.Base,
                        padding: {
                            top: 1
                        },
                        position: g.kb.Relative
                    }, r, o.createElement(h.b, {
                        className: "bits-leaderboard-expanded__scrollable",
                        suppressScrollX: !0
                    }, o.createElement(g.Ya, null, o.createElement("ul", null, t, o.createElement(g.Ya, {
                        className: p(l)
                    }), n, o.createElement(g.Ya, {
                        className: p(c)
                    }), a), s)), i)
                }, t.prototype.renderTopThreeEntries = function() {
                    if (!this.props.topEdges) return null;
                    var e = [];
                    return this.props.topEdges[0] && e.push(this.renderTopThreeEntry(this.props.topEdges[0], i.Gold)), this.props.topEdges[1] && e.push(this.renderTopThreeEntry(this.props.topEdges[1], i.Silver)), this.props.topEdges[2] && e.push(this.renderTopThreeEntry(this.props.topEdges[2], i.Bronze)), e
                }, t.prototype.renderTopSection = function() {
                    var e = Object(m.d)("Weekly Top Cheerers", "Bits--PinnedCheerV2"),
                        t = this.props.secondsRemaining ? this.props.secondsRemaining : 0,
                        n = Math.floor(t / 86400),
                        i = o.createElement(g.W, {
                            type: g.Wb.Span
                        }, Object(m.d)("{time, plural, one {Resets in {time} day} other {Resets in {time} days}}", {
                            time: n
                        }, "Bits--PinnedCheerV2"));
                    return n < 1 && (i = o.createElement(g.W, {
                        type: g.Wb.Span
                    }, Object(m.d)("Resets in less than a day", "Bits--PinnedCheerV2"))), this.props.leaderboardMode === f.AllTime ? (e = Object(m.d)("All-time Top Cheerers", "Bits--PinnedCheerV2"), i = null) : this.props.leaderboardMode === f.Monthly && (e = Object(m.d)("Monthly Top Cheerers", "Bits--PinnedCheerV2")), o.createElement(g.Ya, {
                        display: g.X.Flex,
                        alignItems: g.f.Center,
                        flexDirection: g.Aa.Column
                    }, o.createElement(g.W, {
                        type: g.Wb.H5,
                        bold: !0
                    }, e), i, o.createElement(g.Ya, {
                        className: "bits-leaderboard-expanded__section-break",
                        margin: {
                            y: 1
                        }
                    }))
                }, t.prototype.renderBottomSection = function() {
                    var e = !!this.props.topEdges && this.props.topEdges.length > 0;
                    return o.createElement(g.Ya, {
                        padding: {
                            bottom: 1
                        }
                    }, o.createElement(g.Fb, {
                        borderTop: e
                    }, o.createElement(g.Ya, {
                        display: g.X.Flex,
                        flexDirection: g.Aa.Column,
                        alignItems: g.f.Center,
                        margin: {
                            top: 1
                        }
                    }, o.createElement(g.tb, {
                        asset: g.ub.Bits,
                        type: g.vb.Brand
                    }), o.createElement(g.W, {
                        type: g.Wb.Span,
                        bold: !0
                    }, Object(m.d)("Cheer your way to the top!", "Bits--PinnedCheersV2")), o.createElement(g.U, {
                        to: "https://blog.twitch.tv/earn-new-rewards-for-supporting-your-favorite-creators-da6b34a98827",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, o.createElement(g.W, {
                        bold: !0
                    }, Object(m.d)("Learn More", "Bits--PinnedCheersV2"))))))
                }, t.prototype.renderTopThreeEntry = function(e, t) {
                    return o.createElement(g.Ya, {
                        key: e.node.id,
                        padding: {
                            x: 1,
                            top: .5
                        }
                    }, o.createElement(D, {
                        id: e.node.id,
                        value: e.node.entryKey,
                        score: e.node.score,
                        bitsConfig: this.props.bitsConfig,
                        medal: t,
                        selfId: this.props.selfId,
                        rank: e.node.rank
                    }))
                }, t.prototype.renderTopTenEntries = function() {
                    var e = this;
                    return this.props.topEdges ? this.props.topEdges.slice(3, 10).map(function(t) {
                        return e.renderTopTenEntry(t.node)
                    }) : null
                }, t.prototype.renderTopTenEntry = function(e) {
                    return o.createElement(g.Ya, {
                        key: e.id,
                        padding: {
                            x: 1,
                            top: .5
                        }
                    }, o.createElement(_, {
                        id: e.id,
                        value: e.entryKey,
                        score: e.score,
                        bitsConfig: this.props.bitsConfig,
                        selfId: this.props.selfId,
                        rank: e.rank
                    }))
                }, t.prototype.shouldRenderBottomContent = function() {
                    var e = this;
                    if (!this.props.topEdges) return !1;
                    var t = !0;
                    return this.props.topEdges.forEach(function(n) {
                        n.node.entryKey === e.props.selfId && (t = !1)
                    }), t
                }, t.prototype.renderUserPlaceEntry = function() {
                    if (!this.props.userPlaceEdge) return null;
                    var e = this.renderTopTenEntry(this.props.userPlaceEdge);
                    return o.createElement(g.Ya, {
                        padding: {
                            top: .5
                        }
                    }, o.createElement(g.Fb, {
                        borderTop: !0
                    }, o.createElement(g.Ya, {
                        padding: {
                            y: .5
                        }
                    }, e)))
                }, t
            }(o.Component);

            function T(e) {
                switch (e) {
                    case 1:
                        return Object(m.d)("Cheer now to be #1!", "Bits--PinnedCheerV2");
                    case 2:
                        return Object(m.d)("Cheer to take #2!", "Bits--PinnedCheerV2");
                    case 3:
                        return Object(m.d)("Cheer to take #3!", "Bits--PinnedCheerV2");
                    default:
                        return Object(m.d)("...", "Bits--PinnedCheerV2")
                }
            }
            n("986b");
            var M = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(g.Ya, {
                            display: g.X.InlineBlock,
                            alignItems: g.f.Center,
                            flexGrow: 1
                        });
                        var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            n = null,
                            a = "";
                        if (this.props.data && this.props.data.user) {
                            a = this.props.data.user.displayName || this.props.data.user.login;
                            var s = o.createElement(g.W, {
                                ellipsis: !0,
                                bold: !0
                            }, a);
                            this.props.selfId && this.props.selfId === this.props.entryKey && (s = o.createElement(g.hb, {
                                label: a,
                                type: g.ib.Brand
                            })), n = o.createElement(g.Ya, {
                                ellipsis: !0,
                                className: "bits-leaderboard-header-first-entry__username"
                            }, s)
                        }
                        if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                            var l = T(1);
                            e = o.createElement(g.Ya, {
                                className: "bits-leaderboard-header-first-entry__container",
                                overflow: g.db.Hidden,
                                display: g.X.InlineFlex,
                                alignItems: g.f.Center,
                                flexGrow: 1
                            }, o.createElement(g.Ya, {
                                flexShrink: 0
                            }, o.createElement(v, {
                                size: r.Big,
                                medal: i.Default
                            })), o.createElement(g.Ya, {
                                className: "bits-leaderboard-header-first-entry__text",
                                margin: {
                                    left: .5
                                }
                            }, o.createElement(g.W, {
                                color: g.O.Link,
                                bold: !0
                            }, l)))
                        } else {
                            var c = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || m.a.defaultAvatarURL;
                            e = o.createElement(g.Ya, {
                                className: "bits-leaderboard-header-first-entry__container",
                                overflow: g.db.Hidden,
                                display: g.X.InlineFlex,
                                alignItems: g.f.Center,
                                flexGrow: 1
                            }, o.createElement(g.Ya, {
                                flexShrink: 0
                            }, o.createElement(v, {
                                size: r.Big,
                                medal: i.Gold,
                                profileImageUrl: c
                            })), o.createElement(g.Ya, {
                                className: "bits-leaderboard-header-first-entry__text",
                                margin: {
                                    left: .5
                                }
                            }, n, o.createElement(g.Ya, {
                                className: "bits-leaderboard-header-first-entry__score"
                            }, o.createElement(S.a, {
                                animated: !1,
                                showImage: !0,
                                showAmount: !0,
                                prefix: "Cheer",
                                bitsConfig: t,
                                size: S.b.ExtremelySmall,
                                display: g.X.InlineFlex,
                                amount: this.props.score,
                                formattedNumber: !0,
                                alignItems: g.f.Center
                            }))))
                        }
                        this.props.isEmpty || (e = o.createElement(g.Zb, {
                            label: a,
                            direction: g.bc.Bottom
                        }, e));
                        var d = {
                            "bits-leaderboard-header-first-entry": !0,
                            "bits-leaderboard-header-first-entry__empty": this.props.isEmpty
                        };
                        return o.createElement(g.Ya, {
                            className: p(d),
                            flexShrink: 0
                        }, e)
                    }, t
                }(o.Component),
                R = Object(s.compose)(Object(l.a)(E, {
                    name: "data",
                    skip: function(e) {
                        return !e.id || !e.entryKey
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.entryKey,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(M),
                L = (n("ifPV"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(g.Ya, {
                            display: g.X.InlineFlex,
                            alignItems: g.f.Center,
                            flexGrow: 1
                        });
                        var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            n = null,
                            a = "";
                        if (this.props.data && this.props.data.user) {
                            a = this.props.data.user.displayName || this.props.data.user.login;
                            var s = o.createElement(g.W, {
                                ellipsis: !0,
                                bold: !0
                            }, a);
                            this.props.selfId && this.props.selfId === this.props.entryKey && (s = o.createElement(g.hb, {
                                label: a,
                                type: g.ib.Brand
                            })), n = o.createElement(g.Ya, {
                                ellipsis: !0,
                                className: "bits-leaderboard-header-runner-up-entry__username",
                                flexShrink: 1,
                                margin: {
                                    x: .5
                                }
                            }, s)
                        }
                        if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                            var l = T(this.props.rank ? this.props.rank : 0);
                            e = o.createElement(g.Ya, {
                                overflow: g.db.Hidden,
                                display: g.X.Flex,
                                alignItems: g.f.Center,
                                flexGrow: 0,
                                fullWidth: !0
                            }, o.createElement(g.Ya, {
                                flexShrink: 0
                            }, o.createElement(v, {
                                size: r.Small,
                                medal: i.Default
                            })), o.createElement(g.Ya, {
                                ellipsis: !0,
                                className: "bits-leaderboard-header-runner-up-entry__username",
                                flexShrink: 1,
                                margin: {
                                    x: .5
                                }
                            }, o.createElement(g.W, {
                                color: g.O.Link,
                                bold: !0
                            }, l)))
                        } else {
                            var c = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || m.a.defaultAvatarURL;
                            e = o.createElement(g.Ya, {
                                overflow: g.db.Hidden,
                                display: g.X.Flex,
                                alignItems: g.f.Center,
                                flexGrow: 0,
                                fullWidth: !0
                            }, o.createElement(g.Ya, {
                                flexShrink: 0
                            }, o.createElement(v, {
                                size: r.Small,
                                medal: this.props.medal,
                                profileImageUrl: c
                            })), n, o.createElement(g.Ya, {
                                flexShrink: 0,
                                className: "bits-leaderboard-header-runner-up-entry__score",
                                margin: {
                                    left: "auto"
                                }
                            }, o.createElement(S.a, {
                                animated: !1,
                                showImage: !0,
                                showAmount: !0,
                                prefix: "Cheer",
                                bitsConfig: t,
                                size: S.b.ExtremelySmall,
                                display: g.X.InlineFlex,
                                amount: this.props.score,
                                formattedNumber: !0,
                                alignItems: g.f.Center
                            })))
                        }
                        return this.props.isEmpty || (e = o.createElement(g.Zb, {
                            label: a,
                            direction: g.bc.Bottom
                        }, e)), o.createElement(g.Ya, {
                            className: "bits-leaderboard-header-runner-up-entry",
                            display: g.X.Flex,
                            alignItems: g.f.Center
                        }, e)
                    }, t
                }(o.Component)),
                F = Object(s.compose)(Object(l.a)(E, {
                    name: "data",
                    skip: function(e) {
                        return !e.id || !e.entryKey
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.entryKey,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(L),
                j = (n("MBj5"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderFirstPlaceEntry = function() {
                            var e, n = null;
                            return t.props.topEdges && t.props.topEdges[0] && (n = t.props.topEdges[0]), e = n ? o.createElement(R, {
                                selfId: t.props.selfId,
                                id: n.node.id,
                                entryKey: n.node.entryKey,
                                score: n.node.score,
                                bitsConfig: t.props.bitsConfig
                            }) : o.createElement(R, {
                                isEmpty: !0
                            }), o.createElement(g.Qa, {
                                key: 1
                            }, e)
                        }, t.renderExpandArrow = function() {
                            return o.createElement(g.Ya, {
                                className: "pinned-cheer-v2-header--arrow",
                                alignItems: g.f.Stretch,
                                fullHeight: !0,
                                display: g.X.InlineFlex,
                                attachTop: !0,
                                position: g.kb.Absolute
                            }, o.createElement(g.z, {
                                size: g.D.Small,
                                fullWidth: !0,
                                type: g.F.Text,
                                onClick: t.props.toggleExpand
                            }, o.createElement(g.tb, {
                                asset: g.ub.AngleDown,
                                height: 20,
                                width: 20
                            })))
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this.renderFirstPlaceEntry(),
                            t = null,
                            n = null,
                            r = this.renderExpandArrow();
                        if (this.props.topEdges && this.props.topEdges[0]) {
                            t = this.renderRunnerUpEntry(2, i.Silver);
                            var a = this.props.topEdges[1] ? 3 : 0;
                            n = this.renderRunnerUpEntry(a, i.Bronze)
                        }
                        return o.createElement(g.Fb, {
                            className: "pinned-cheer-v2-header",
                            background: g.r.Base,
                            position: g.kb.Relative
                        }, o.createElement(g.Ya, {
                            className: "pinned-cheer-v2-header__users",
                            display: g.X.InlineFlex,
                            flexWrap: g.Ba.NoWrap,
                            justifyContent: g.Xa.Between,
                            fullHeight: !0
                        }, e, o.createElement(g.Ya, {
                            className: "pinned-cheer-v2-header__runner-up-entries",
                            display: g.X.Flex,
                            flexShrink: 1,
                            flexWrap: g.Ba.NoWrap,
                            justifyContent: g.Xa.Between,
                            flexDirection: g.Aa.Column
                        }, t, n)), r)
                    }, t.prototype.renderRunnerUpEntry = function(e, t) {
                        var n, r = null;
                        return e > 0 && this.props.topEdges && this.props.topEdges[e - 1] && (r = this.props.topEdges[e - 1]), n = r ? o.createElement(F, {
                            selfId: this.props.selfId,
                            id: r.node.id,
                            entryKey: r.node.entryKey,
                            score: r.node.score,
                            medal: t,
                            bitsConfig: this.props.bitsConfig
                        }) : o.createElement(F, {
                            isEmpty: !0,
                            medal: i.Default,
                            rank: e
                        }), o.createElement(g.Qa, {
                            key: e
                        }, n)
                    }, t
                }(o.Component)),
                x = n("+LJB"),
                A = n("RiD7"),
                U = n("Qime"),
                P = (n("MIhh"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isExpanded: !1
                        }, t.toggleIsExpanded = function() {
                            t.setState(function(e) {
                                return {
                                    isExpanded: !e.isExpanded
                                }
                            }, function() {
                                t.state.isExpanded && t.onExpandClick()
                            })
                        }, t.onExpandClick = function() {
                            var e = t.props,
                                n = e.channelID,
                                i = e.userID,
                                r = e.data.user;
                            if (r && r.cheer && r.cheer.leaderboard && r.cheer.settings && r.cheer.settings.leaderboard && r.cheer.settings.leaderboard.isEnabled) {
                                var a = r.cheer.settings.leaderboard.timePeriodType,
                                    o = r.cheer.leaderboard.items.edges.slice(0, 10),
                                    s = !1;
                                i && (s = o.findIndex(function(e) {
                                    return e.node.entryKey === i
                                }) >= 0), Object(A.i)({
                                    leaderboardSize: o.length,
                                    leaderboardMode: a || f.AllTime,
                                    userPresentInLeaderboard: s,
                                    userID: i,
                                    channelID: n
                                })
                            }
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e;
                        return e = this.renderLeaderboard(), o.createElement(g.Ya, {
                            zIndex: g.jc.Default
                        }, e)
                    }, t.prototype.renderLeaderboard = function() {
                        if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.leaderboard)) return null;
                        if (!this.props.data.user.cheer.settings || !this.props.data.user.cheer.settings.leaderboard || !this.props.data.user.cheer.settings.leaderboard.isEnabled) return null;
                        var e = this.props.data.user.cheer.leaderboard.items.edges.slice(0, 10),
                            t = null,
                            n = this.props.data.user.cheer.settings.leaderboard.timePeriodType || f.AllTime;
                        this.props.data.user.self && this.props.data.user.self.bitsLeaderboardItem && (t = this.props.data.user.self.bitsLeaderboardItem);
                        var i = null;
                        this.state.isExpanded && (i = o.createElement(I, {
                            topEdges: e,
                            userPlaceEdge: t,
                            toggleExpand: this.toggleIsExpanded,
                            selfId: this.props.userID,
                            bitsConfig: this.props.bitsConfig,
                            leaderboardMode: n,
                            secondsRemaining: this.props.data.user.cheer.leaderboard.secondsRemaining
                        }));
                        var r = null;
                        return this.state.isExpanded || (r = o.createElement(j, {
                            topEdges: e,
                            toggleExpand: this.toggleIsExpanded,
                            selfId: this.props.userID,
                            bitsConfig: this.props.bitsConfig
                        })), o.createElement(g.Ya, {
                            className: "pinned-cheer-v2",
                            zIndex: g.jc.Default
                        }, o.createElement(g.Fb, {
                            borderBottom: !0
                        }, r, i))
                    }, t
                }(o.Component)),
                B = Object(s.compose)(Object(l.a)(U, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }), Object(c.a)(function(e) {
                    return {
                        query: U,
                        variables: {
                            channelID: e.channelID
                        },
                        topic: Object(u.d)(e.channelID),
                        type: d.PubsubMessageType.BitsChannelSettingsEvent,
                        mutator: function(e, t) {
                            if (t) return t && t.user && null !== t.user.cheer && null !== t.user.cheer.leaderboard && null !== t.user.cheer.settings.leaderboard && void 0 !== e.updates.leaderboard_enabled && (t.user.cheer.settings.leaderboard.isEnabled = e.updates.leaderboard_enabled), t
                        }
                    }
                }), Object(c.a)(function(e) {
                    return Object(x.a)(U, e.channelID, e.data.user && e.data.user.cheer && e.data.user.cheer.leaderboard, e.userID)
                }))(P),
                V = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            cheerIsTall: !1,
                            recentCheerID: null,
                            recentCheerExpireTime: null,
                            pcheersV2Enabled: !1
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(B, {
                            channelID: this.props.channelID,
                            userID: this.props.userID,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin
                        })
                    }, t
                }(o.Component),
                W = n("/MKj"),
                H = n("kRBY");
            var G = Object(W.connect)(function(e) {
                var t = Object(H.e)(e);
                return {
                    isStaff: t && t.roles && t.roles.isStaff
                }
            })(V);
            n.d(t, !1, function() {
                return V
            }), n.d(t, "a", function() {
                return G
            })
        },
        r2XO: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("fvjX"),
                s = n("/7QA"),
                l = n("x7UT"),
                c = n("0Log"),
                d = n("/aPz"),
                u = n("SceP"),
                p = n("ZtEv"),
                m = n("VS9Q");
            var h = n("nInp"),
                g = n("DLhE"),
                f = n("MJbm"),
                v = n("8/mp"),
                b = n("TSYQ"),
                k = n("oJmH"),
                y = n("yR8l"),
                C = n("geRD"),
                S = n("b5C3"),
                E = n("XmgI"),
                N = n("0Lz3"),
                O = n("uIkQ"),
                _ = n("+pBb"),
                w = n("tY8L"),
                D = n("ZVTe"),
                I = n("DMoW"),
                T = n("kRBY"),
                M = n("TApp"),
                R = n("KGti"),
                L = n("sblI"),
                F = n("iyGE"),
                j = n("gO1k");
            var x = n("a2UF"),
                A = n("AREq");
            var U = n("Av0x"),
                P = n("5g1g"),
                B = n("Ue10"),
                V = (n("L6L7"), function(e) {
                    var t = e.onBanUser,
                        n = B.ub.Ban,
                        i = Object(s.d)("Ban {login}", {
                            login: e.senderLogin
                        }, "ModerationIcons"),
                        a = "chat-ban-button",
                        o = null;
                    return e.isMessageBanned && (t = e.onUnbanUser, n = B.ub.FollowCheck, i = Object(s.d)("Unban {login}", {
                        login: e.senderLogin
                    }, "ModerationIcons"), a = "chat-unban-button"), !e.isMessageDeleted && e.canDelete && (o = r.createElement(P.a, {
                        name: "single_message_delete"
                    }, r.createElement(B.Fb, {
                        display: B.X.InlineFlex,
                        verticalAlign: B.gc.Bottom
                    }, r.createElement(B.Zb, {
                        align: B.ac.Left,
                        label: Object(s.d)("Delete message", "ModerationIcons")
                    }, r.createElement("button", {
                        className: "mod-icon",
                        onClick: e.onDelete,
                        "data-test-selector": "chat-delete-button"
                    }, r.createElement(B.tb, {
                        width: 16,
                        height: 16,
                        type: B.vb.Inherit,
                        asset: B.ub.Trash
                    })))))), r.createElement(B.Fb, {
                        color: B.O.Alt2,
                        display: B.X.Inline,
                        margin: {
                            right: .5
                        }
                    }, r.createElement(B.Fb, {
                        display: B.X.InlineFlex,
                        verticalAlign: B.gc.Bottom
                    }, r.createElement(B.Zb, {
                        align: B.ac.Left,
                        label: i
                    }, r.createElement("button", {
                        className: "mod-icon",
                        onClick: t,
                        "data-test-selector": a
                    }, r.createElement(B.tb, {
                        width: 16,
                        height: 16,
                        type: B.vb.Inherit,
                        asset: n
                    })))), r.createElement(B.Fb, {
                        display: B.X.InlineFlex,
                        verticalAlign: B.gc.Bottom
                    }, r.createElement(B.Zb, {
                        align: B.ac.Left,
                        label: Object(s.d)("Timeout {login}", {
                            login: e.senderLogin
                        }, "ModerationIcons")
                    }, r.createElement("button", {
                        className: "mod-icon",
                        onClick: e.onTimeoutUser,
                        "data-test-selector": "chat-timeout-button"
                    }, r.createElement(B.tb, {
                        width: 16,
                        height: 16,
                        type: B.vb.Inherit,
                        asset: B.ub.Timeout
                    })))), o)
                }),
                W = 600,
                H = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onBanUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            e = Object(M.a)(Object(s.d)("Unable to ban user.", "ModerationIcons")), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.banUserMutation(this.props.senderLogin)];
                                        case 2:
                                            return (t = n.sent().banUserFromChatRoom) ? t.error ? this.pushMessage(Object(M.a)(Object(A.a)(this.props.senderLogin, t.error.code))) : this.pushMessage(Object(L.a)(p.e.Ban, this.props.senderLogin, null, null)) : this.pushMessage(e), [3, 4];
                                        case 3:
                                            return n.sent(), this.pushMessage(e), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.onTimeoutUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            e = Object(M.a)(Object(s.d)("Unable to timeout user.", "ModerationIcons")), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.banUserMutation(this.props.senderLogin, W)];
                                        case 2:
                                            return (t = n.sent().banUserFromChatRoom) ? t.error ? this.pushMessage(Object(M.a)(Object(A.a)(this.props.senderLogin, t.error.code, !0))) : this.pushMessage(Object(L.a)(p.e.Timeout, this.props.senderLogin, null, W)) : this.pushMessage(e), [3, 4];
                                        case 3:
                                            return n.sent(), this.pushMessage(e), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.onUnbanUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t, n;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            e = Object(M.a)(Object(s.d)("Unable to unban user.", "ModerationIcons")), i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), [4, this.props.unbanUserMutation(this.props.senderLogin)];
                                        case 2:
                                            return (t = i.sent().unbanUserFromChatRoom) ? t.error ? this.pushMessage(Object(M.a)(Object(U.a)(this.props.senderLogin, t.error.code))) : this.props.sessionUser && (n = Object(R.l)(c.ModerationActions.Unban, this.props.sessionUser.login, this.props.sessionUser.id, this.props.targetUserID, this.props.senderLogin, void 0, void 0), this.pushMessage(n)) : this.pushMessage(e), [3, 4];
                                        case 3:
                                            return i.sent(), this.pushMessage(e), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.onDelete = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t, n, r;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), e = {
                                                channelID: this.props.channelID,
                                                messageID: this.props.messageID
                                            }, [4, this.props.deleteChatMessageMutation(Object(C.a)(e))];
                                        case 2:
                                            return (t = i.sent().data.deleteChatMessage) && t.responseCode !== I.u.SUCCESS && (n = t.message && t.message.sender && t.message.sender.displayName || this.props.senderLogin, r = Object(M.a)(function(e, t) {
                                                switch (e) {
                                                    case I.u.FORBIDDEN:
                                                        return Object(s.d)("You don't have permission to delete messages.", "DeleteChatMessageErrorCode");
                                                    case I.u.TARGET_IS_BROADCASTER:
                                                        return Object(s.d)("You cannot delete the broadcaster's messages.", "DeleteChatMessageErrorCode");
                                                    case I.u.TARGET_IS_MODERATOR:
                                                        return Object(s.d)("You cannot delete messages from moderator {senderDisplayName}", {
                                                            senderDisplayName: t
                                                        }, "DeleteChatMessageErrorCode");
                                                    default:
                                                        throw new Error("Unrecognized operation result")
                                                }
                                            }(t.responseCode, n)), this.pushMessage(r)), [3, 4];
                                        case 3:
                                            return i.sent(), r = Object(M.a)(Object(s.d)("Unable to delete message.", "ModerationIcons")), this.pushMessage(r), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.pushMessage = function(e) {
                            t.props.onPushMessage && t.props.onPushMessage(e)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return this.props.sessionUser && this.props.sessionUser.id === this.props.targetUserID ? null : r.createElement(V, {
                            isMessageDeleted: this.props.isMessageDeleted,
                            isMessageBanned: this.props.isMessageBanned,
                            canDelete: !!this.props.messageID,
                            onBanUser: this.onBanUser,
                            onTimeoutUser: this.onTimeoutUser,
                            onUnbanUser: this.onUnbanUser,
                            onDelete: this.onDelete,
                            senderLogin: this.props.senderLogin
                        })
                    }, t
                }(r.Component),
                G = function(e) {
                    return {
                        channelID: e.channelID
                    }
                };
            var Y = Object(k.compose)(Object(F.a)(G), Object(x.a)(G), function() {
                    var e = this;
                    return Object(y.a)(j, {
                        props: function(t) {
                            return {
                                deleteChatMessageMutation: function(n) {
                                    return i.__awaiter(e, void 0, void 0, function() {
                                        return i.__generator(this, function(e) {
                                            switch (e.label) {
                                                case 0:
                                                    if (!t.mutate) return [3, 5];
                                                    e.label = 1;
                                                case 1:
                                                    return e.trys.push([1, 3, , 4]), [4, t.mutate(n)];
                                                case 2:
                                                    return [2, {
                                                        data: e.sent().data
                                                    }];
                                                case 3:
                                                    throw e.sent(), new Error("Unable to delete message");
                                                case 4:
                                                    return [3, 6];
                                                case 5:
                                                    throw new Error("Delete chat message mutation is not ready");
                                                case 6:
                                                    return [2]
                                            }
                                        })
                                    })
                                }
                            }
                        }
                    })
                }(), Object(a.connect)(function(e) {
                    return {
                        sessionUser: Object(T.e)(e)
                    }
                }))(H),
                z = n("cys1"),
                q = n("EE1E"),
                X = n("oK83"),
                Q = (n("uYvD"), "chat-deleted-message-placeholder"),
                K = "chat-hidden-message-placeholder",
                $ = "chat-hidden-username-placeholder",
                J = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            alwaysShowMessage: !1
                        }, t.renderModerationIcons = function() {
                            return t.props.isCurrentUserModerator && t.props.showModerationIcons ? r.createElement(Y, {
                                targetUserID: t.props.message.user.userID,
                                confirmModerationAction: t.props.confirmModerationAction,
                                channelID: t.props.channelID,
                                isMessageDeleted: t.props.message.deleted,
                                isMessageBanned: t.props.message.banned,
                                senderLogin: t.props.message.user.userLogin,
                                messageID: t.props.message.id,
                                onPushMessage: t.props.onPushMessage
                            }) : null
                        }, t.renderMessageBody = function() {
                            if (t.props.isHidden && !t.state.alwaysShowMessage && t.props.isCurrentUserModerator) {
                                var e = Object(s.d)("message hidden from blocked user", "ChatLine");
                                return r.createElement("span", {
                                    key: "hidden_message",
                                    className: "chat-line__message--hidden",
                                    "data-a-target": K
                                }, r.createElement("a", {
                                    href: "",
                                    onClick: t.hiddenMessageClickHandler
                                }, "<" + e + ">"))
                            }
                            if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                                var n = Object(s.d)("message deleted", "ChatLine");
                                return t.props.isCurrentUserModerator || t.props.isCurrentUserStaff ? r.createElement("span", {
                                    key: "deleted",
                                    className: "chat-line__message--deleted",
                                    "data-a-target": Q
                                }, r.createElement("a", {
                                    href: "",
                                    onClick: t.alwaysShowMessage
                                }, "<" + n + ">")) : r.createElement("span", {
                                    key: "deleted",
                                    className: "chat-line__message--deleted",
                                    "data-a-target": Q
                                }, "<" + n + ">")
                            }
                            return Object(z.f)(t.props.message.messageParts)
                        }, t.renderMessageAuthor = function() {
                            var e = t.props,
                                n = e.badgeSets,
                                i = e.message,
                                a = e.theme,
                                o = e.useHighContrastColors;
                            return t.props.isHidden && !t.state.alwaysShowMessage && t.props.isCurrentUserModerator ? r.createElement("span", {
                                key: "hidden_username",
                                className: "chat-line__username--hidden",
                                "data-a-target": $
                            }, r.createElement("a", {
                                href: "",
                                onClick: t.hiddenMessageClickHandler
                            }, Object(s.d)("User Hidden", "ChatLine"))) : r.createElement(r.Fragment, null, t.renderModerationIcons(), r.createElement(O.b, {
                                badgeSets: n,
                                badgesToRender: i.badges
                            }), r.createElement("button", {
                                onClick: t.usernameClickHandler,
                                className: "chat-line__username"
                            }, r.createElement(D.a, {
                                userData: i.user,
                                highContrastUsernameColor: o,
                                theme: a
                            })))
                        }, t.alwaysShowMessage = function(e) {
                            e && e.preventDefault(), t.setState({
                                alwaysShowMessage: !0
                            })
                        }, t.hiddenMessageClickHandler = function(e) {
                            t.alwaysShowMessage(e), t.props.message.user.userID && t.props.onHiddenMessageClick(t.props.message.user.userID)
                        }, t.usernameClickHandler = function(e) {
                            t.props.onUsernameClick(t.props.message.user.userLogin, X.a.chat_message, t.props.message.id, e.currentTarget.getBoundingClientRect().bottom)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.className,
                            n = e.message,
                            i = e.showTimestamps,
                            a = e.theme,
                            o = e.useHighContrastColors,
                            s = {},
                            l = ": ";
                        if (n.messageType === p.c.Action) {
                            var c = n.user.color;
                            o && c && (c = "#" + Object(q.a)(c, a)), s = {
                                color: c
                            }, l = " "
                        }
                        var d = null;
                        return i && (d = Object(z.l)(n.timestamp)), r.createElement("div", {
                            className: b(t, "chat-line__message"),
                            style: s,
                            "data-a-target": "chat-line-message"
                        }, d, this.renderMessageAuthor(), r.createElement("span", {
                            key: "separator",
                            "aria-hidden": "true"
                        }, l), this.renderMessageBody())
                    }, t
                }(r.Component);
            var Z = Object(k.compose)(Object(a.connect)(void 0, function(e) {
                    return Object(o.bindActionCreators)({
                        onUsernameClick: w.e,
                        onHiddenMessageClick: _.Q
                    }, e)
                }))(J),
                ee = n("p52R"),
                te = n("a1OF"),
                ne = n("9yes"),
                ie = n("R2Ti"),
                re = n("g17B"),
                ae = n("frkH"),
                oe = n("4zGI"),
                se = {
                    badges: {
                        twitchbot: "1"
                    },
                    bits: 0,
                    color: "#6441A5",
                    displayName: "AutoMod",
                    id: "automod",
                    userID: "automod",
                    username: "automod",
                    userType: ee.a.GlobalMod,
                    emotes: {}
                };

            function le(e) {
                var t;
                switch (e) {
                    case "aggressive":
                        t = Object(s.d)("aggressive", "AutoModLine");
                        break;
                    case "sexual":
                        t = Object(s.d)("sexual", "AutoModLine");
                        break;
                    case "profanity":
                        t = Object(s.d)("profanity", "AutoModLine");
                        break;
                    case "identity":
                        t = Object(s.d)("identity", "AutoModLine");
                        break;
                    default:
                        return Object(s.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
                }
                return Object(s.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                    category: t
                }, "AutoModLine")
            }
            var ce = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isResolved: !1
                        }, t.getAllowMessageCallback = function(e) {
                            return e !== p.a.CheerMessageRejectedPrompt ? t.allowAutoModRejectedMessage : t.allowAutoModRejectedCheerMessage
                        }, t.getDenyMessageCallback = function(e) {
                            return e !== p.a.CheerMessageRejectedPrompt ? t.denyAutoModRejectedMessage : t.denyAutoModRejectedCheerMessage
                        }, t.allowAutoModRejectedMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props.message;
                            e.autoModType === p.a.MessageRejectedPrompt && t.props.allowRejectedChatMessage && t.props.allowRejectedChatMessage(Object(C.a)({
                                id: e.rejectedMessage.id
                            }))
                        }, t.denyAutoModRejectedMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props.message;
                            e.autoModType === p.a.MessageRejectedPrompt && t.props.denyRejectedChatMessage && t.props.denyRejectedChatMessage(Object(C.a)({
                                id: e.rejectedMessage.id
                            }))
                        }, t.allowAutoModRejectedCheerMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props,
                                n = e.message,
                                i = e.allowRejectedCheer;
                            if (n.autoModType === p.a.CheerMessageRejectedPrompt && i) {
                                var r = {
                                    id: n.rejectedMessage.id,
                                    targetUserID: n.targetUserID
                                };
                                i(Object(C.a)(r))
                            }
                        }, t.denyAutoModRejectedCheerMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props,
                                n = e.message,
                                i = e.denyRejectedCheer;
                            if (n.autoModType === p.a.CheerMessageRejectedPrompt && i) {
                                var r = {
                                    id: n.rejectedMessage.id,
                                    targetUserID: n.targetUserID
                                };
                                i(Object(C.a)(r))
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e, t = this.props.message,
                            n = i.__assign({}, se);
                        switch (t.autoModType) {
                            case p.a.MessageRejectedPrompt:
                                e = le(t.category);
                                break;
                            case p.a.CheerMessageRejectedPrompt:
                                e = le(t.category);
                                var a = {
                                    emotes: []
                                };
                                this.props.data && this.props.data.user && this.props.data.user.cheer && (a = this.props.data.user.cheer);
                                var o = Object(E.f)(t.originalMessage, Object(N.a)(a.emotes || []));
                                t.rejectedMessage = i.__assign({}, t.rejectedMessage, {
                                    messageParts: o
                                });
                                break;
                            case p.a.MessageRejected:
                                e = Object(s.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                                break;
                            case p.a.MessageAllowed:
                                e = Object(s.d)("Mods have allowed your message. Happy chatting!", "AutoModLine");
                                var l = (e += " VoHiYo").match("VoHiYo");
                                l && void 0 !== l.index && (n.emotes["" + l.index] = {
                                    startIndex: l.index,
                                    id: "81274"
                                });
                                break;
                            case p.a.MessageDenied:
                                e = Object(s.d)("Mods have removed your message.", "AutoModLine");
                                break;
                            case p.a.CheerMessageDenied:
                                e = Object(s.d)("Mods have removed your text message. Your Cheermote was sent.", "AutoModLine");
                                break;
                            case p.a.CheerMessageTimeout:
                                e = Object(s.d)("Mods did not approve your message in time.  Your Cheermote was sent without the text.", "AutoModLine");
                                break;
                            case p.a.MessageModApproved:
                            case p.a.MessageModDenied:
                                return null;
                            default:
                                throw new Error("Invalid message type")
                        }
                        var c = Object(te.a)(e, n, E.a, !1);
                        switch (t.autoModType) {
                            case p.a.MessageRejectedPrompt:
                            case p.a.CheerMessageRejectedPrompt:
                                if (!(t.autoModType !== p.a.CheerMessageRejectedPrompt || this.props.data && this.props.data.user && this.props.data.user.cheer)) return null;
                                if (t.rejectedMessage.deleted) return null;
                                if (this.state.isResolved) return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, Object(s.d)("Thank you for your feedback!", "ChatLine"));
                                return r.createElement(B.Ya, {
                                    className: "chat-line__message"
                                }, r.createElement(S.a, {
                                    badgeSets: this.props.badgeSets,
                                    badgesToRender: c.badges
                                }), r.createElement(D.a, {
                                    userData: c.user
                                }), r.createElement("span", {
                                    key: "separator"
                                }, ": "), Object(z.f)(c.messageParts), r.createElement(B.Ya, {
                                    key: "automod-prompt",
                                    className: "chat-line__nested-component--float-right"
                                }, r.createElement(B.z, {
                                    size: B.D.Small,
                                    onClick: this.getAllowMessageCallback(t.autoModType),
                                    type: B.F.Text
                                }, Object(s.d)("Allow", "AutoModLine")), r.createElement(B.W, {
                                    type: B.Wb.Span
                                }, "•"), r.createElement(B.z, {
                                    size: B.D.Small,
                                    onClick: this.getDenyMessageCallback(t.autoModType),
                                    type: B.F.Text
                                }, Object(s.d)("Deny", "AutoModLine"))), r.createElement(Z, i.__assign({}, this.props, {
                                    isCurrentUserStaff: !1,
                                    isDeleted: !1,
                                    isHidden: !1,
                                    showTimestamps: !1,
                                    className: b(["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"]),
                                    message: t.rejectedMessage
                                })));
                            case p.a.MessageRejected:
                            case p.a.MessageAllowed:
                            case p.a.MessageDenied:
                            case p.a.CheerMessageDenied:
                            case p.a.CheerMessageTimeout:
                                return r.createElement(B.Ya, {
                                    className: b(["chat-line__message", "chat-line__message--special", "chat-line__message--alert"])
                                }, r.createElement(S.a, {
                                    badgeSets: this.props.badgeSets,
                                    badgesToRender: c.badges
                                }), r.createElement(D.a, {
                                    userData: c.user
                                }), r.createElement("span", {
                                    key: "separator"
                                }, ": "), Object(z.f)(c.messageParts));
                            default:
                                throw new Error("Invalid message type")
                        }
                    }, t
                }(r.Component),
                de = Object(k.compose)(Object(y.a)(ne, {
                    name: "allowRejectedChatMessage",
                    options: {}
                }), Object(y.a)(ae, {
                    name: "denyRejectedChatMessage",
                    options: {}
                }), Object(y.a)(ie, {
                    name: "allowRejectedCheer"
                }), Object(y.a)(oe, {
                    name: "denyRejectedCheer"
                }), Object(y.a)(re, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }))(ce),
                ue = n("QVaV"),
                pe = n("8SX2"),
                me = n("CiVV"),
                he = function(e) {
                    var t = e.event,
                        n = t.promoGiftTotal,
                        i = t.promoName,
                        a = t.user,
                        o = r.createElement(pe.a, {
                            contentID: a.id,
                            login: a.username,
                            sourceType: X.a.chat_message
                        }, Object(ue.a)(a.username, a.displayName)),
                        l = i && n ? Object(s.d)("{recipientButton} is continuing the Gift Sub they got from an anonymous gifter!        They're one of {promoGiftTotal} gift subs to continue this {promoName}.", {
                            promoGiftTotal: n,
                            promoName: i,
                            recipientButton: o
                        }, "AnonGiftPaidUpgradeNoticeLine") : Object(s.d)("{recipientButton} is continuing the Gift Sub they got from an anonymous gifter!", {
                            recipientButton: o
                        }, "AnonGiftPaidUpgradeNoticeLine");
                    return r.createElement(B.Ya, {
                        alignItems: B.f.Start,
                        display: B.X.Flex
                    }, r.createElement(B.Fb, {
                        color: B.O.Alt2,
                        display: B.X.Flex,
                        flexDirection: B.Aa.Column,
                        flexShrink: 0,
                        margin: {
                            right: .5
                        }
                    }, Object(me.a)()), r.createElement(B.W, {
                        color: B.O.Alt2,
                        type: B.Wb.Span
                    }, l))
                };
            he.displayName = "AnonGiftPaidUpgradeNoticeLine";
            var ge = n("0WFu"),
                fe = "All-Access Pass",
                ve = function(e) {
                    var t = e.event,
                        n = r.createElement(pe.a, {
                            contentID: t.recipientID,
                            login: t.recipientLogin,
                            sourceType: X.a.chat_message
                        }, Object(ue.a)(t.recipientLogin, t.recipientDisplayName));
                    return r.createElement(B.Ya, {
                        alignItems: B.f.Start,
                        display: B.X.Flex
                    }, r.createElement(B.Fb, {
                        color: B.O.Alt2,
                        display: B.X.Flex,
                        flexDirection: B.Aa.Column,
                        flexShrink: 0,
                        margin: {
                            right: .5
                        }
                    }, Object(me.a)()), r.createElement(B.W, {
                        color: B.O.Alt2,
                        type: B.Wb.Span
                    }, function(e, t) {
                        return e.planName === fe ? Object(s.d)("An anonymous gifter gave {recipientButton} an All-Access Pass!", {
                            recipientButton: t
                        }, "AnonSubGiftNoticeLine") : "custom" === e.plan ? Object(s.d)("An anonymous gifter gave {recipientButton} a Sub!", {
                            recipientButton: t
                        }, "AnonSubGiftNoticeLine") : Object(s.d)("An anonymous gifter gave {recipientButton} a Tier {tierNumber} Sub!", {
                            recipientButton: t,
                            tierNumber: Object(ge.a)(e.plan) || 1
                        }, "AnonSubGiftNoticeLine")
                    }(t.methods, n)))
                };
            ve.displayName = "AnonSubGiftNoticeLine";
            var be = function(e) {
                var t = e.event,
                    n = t.channel,
                    i = t.massGiftCount,
                    a = t.plan,
                    o = "custom" === a ? Object(s.d)("{massGiftCount, plural,        one {An anonymous gifter is gifting {massGiftCount} Sub to {channel}'s community!}        other {An anonymous gifter is gifting {massGiftCount} Subs to {channel}'s community!}}", {
                        channel: n,
                        massGiftCount: i
                    }, "AnonSubMysteryGiftNoticeLine") : Object(s.d)("{massGiftCount, plural,        one {An anonymous gifter is gifting {massGiftCount} Tier {tierNumber} Sub to {channel}'s community!}        other {An anonymous gifter is gifting {massGiftCount} Tier {tierNumber} Subs to {channel}'s community!}}", {
                        channel: n,
                        massGiftCount: i,
                        tierNumber: Object(ge.a)(a) || 1
                    }, "AnonSubMysteryGiftNoticeLine");
                return r.createElement(B.Ya, {
                    alignItems: B.f.Start,
                    display: B.X.Flex
                }, r.createElement(B.Fb, {
                    color: B.O.Alt2,
                    display: B.X.Flex,
                    flexDirection: B.Aa.Column,
                    flexShrink: 0,
                    margin: {
                        right: .5
                    }
                }, Object(me.a)()), r.createElement(B.W, {
                    color: B.O.Alt2,
                    type: B.Wb.Span
                }, o))
            };
            be.displayName = "AnonSubMysteryGiftNoticeLine";
            var ke = function(e) {
                var t = e.event,
                    n = r.createElement(pe.a, {
                        contentID: t.user.id,
                        login: t.user.username,
                        sourceType: X.a.chat_message
                    }, Object(ue.a)(t.user.username, t.user.displayName)),
                    i = r.createElement(pe.a, {
                        contentID: t.user.id,
                        login: t.senderLogin,
                        sourceType: X.a.chat_message
                    }, Object(ue.a)(t.senderLogin, t.senderName));
                return r.createElement(B.W, {
                    color: B.O.Alt2,
                    type: B.Wb.Span
                }, t.promoName && t.promoGiftTotal ? Object(s.d)("{recipientButton} is continuing the Gift Sub they got from {gifterButton}!            They're one of {promoGiftTotal} gift subs to continue this {promoName}.", {
                    gifterButton: i,
                    promoGiftTotal: t.promoGiftTotal,
                    promoName: t.promoName,
                    recipientButton: n
                }, "GiftPaidUpgradeNoticeLine") : Object(s.d)("{recipientButton} is continuing the Gift Sub they got from {gifterButton}!", {
                    gifterButton: i,
                    recipientButton: n
                }, "GiftPaidUpgradeNoticeLine"))
            };
            ke.displayName = "GiftPaidUpgradeNoticeLine";
            n("xDdc");
            var ye = function(e) {
                return r.createElement(B.Ya, {
                    className: "user-notice-line",
                    margin: {
                        y: .5
                    },
                    padding: {
                        right: 2,
                        y: .5
                    }
                }, e.children)
            };
            ye.displayName = "UserNoticeLine";
            var Ce = n("OvAg"),
                Se = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.message.params,
                            t = this.props.data,
                            n = t.channel,
                            i = t.loading,
                            a = t.error;
                        if (i || a) return null;
                        var o = Object(s.d)("{displayName} is raiding with a party of {viewerCount}.", {
                            displayName: r.createElement("strong", null, n.displayName),
                            viewerCount: r.createElement("strong", null, e.viewerCount)
                        }, "RaidIncomingMessage");
                        return r.createElement(ye, {
                            "data-test-selector": "incoming-raid"
                        }, r.createElement(B.Ya, {
                            display: B.X.Flex,
                            alignItems: B.f.Center
                        }, r.createElement(B.q, {
                            alt: n.displayName,
                            src: n.profileImageURL,
                            size: 30
                        }), r.createElement(B.Fb, {
                            color: B.O.Base,
                            margin: {
                                left: 1
                            }
                        }, o)))
                    }, t
                }(r.Component),
                Ee = Object(y.a)(Ce, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.message.params.login
                            }
                        }
                    }
                })(Se),
                Ne = n("5zf8"),
                Oe = n("x0+1"),
                _e = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.moderationActionEvent,
                            t = e.createdByLogin,
                            n = null;
                        if (e.moderationActionType === p.d.AutoModEnabled) n = Object(s.d)("AutoMod has been enabled for this channel.", "ModerationActionLine");
                        else if (e.level === R.a.Channel) switch (e.moderationActionType) {
                            case p.d.Clear:
                                n = Object(s.d)("{user} cleared chat for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case p.d.EmoteOnly:
                                n = Object(s.d)("{user} enabled emote-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case p.d.EmoteOnlyOff:
                                n = Object(s.d)("{user} disabled emote-only for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case p.d.FollowersOnly:
                                var i = (e.args || [""]).join(" ").trim(),
                                    a = parseInt(i, 10);
                                n = a ? Object(s.d)("{user} enabled {length} followers-only mode for this room.", {
                                    user: t,
                                    length: Object(Ne.b)(60 * a)
                                }, "ModerationActionLine") : Object(s.d)("{user} enabled followers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case p.d.FollowersOnlyOff:
                                n = Object(s.d)("{user} disabled followers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case p.d.R9kBeta:
                                n = Object(s.d)("{user} enabled r9k mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case p.d.R9kBetaOff:
                                n = Object(s.d)("{user} disabled r9k mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case p.d.Slow:
                                var o = (e.args || ["120"]).join(" ").trim(),
                                    l = parseInt(o, 10);
                                n = Object(s.d)("{user} enabled {slowTime}-second slow mode for this room.", {
                                    user: t,
                                    slowTime: l
                                }, "ModerationActionLine");
                                break;
                            case p.d.SlowOff:
                                n = Object(s.d)("{user} disabled slow mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case p.d.SubscribersOnly:
                                n = Object(s.d)("{user} enabled subscribers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case p.d.SubscribersOnlyOff:
                                n = Object(s.d)("{user} disabled subscribers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            default:
                                var c = e.args && e.args.join(" ").trim(),
                                    d = c && c.length > 0 ? "/" + e.moderationActionType + " " + c : "" + e.moderationActionType;
                                n = Object(s.d)("{user} used: {command}.", {
                                    user: e.createdByLogin,
                                    command: d
                                }, "ModerationActionLine")
                        } else {
                            var u = e.targetUserLogin,
                                m = e.duration,
                                h = e.reason,
                                g = e.messageBody;
                            switch (e.moderationActionType) {
                                case p.d.Timeout:
                                    n = m && h ? Object(s.d)("{user} timed out {target} for {duration} seconds. Reason: {reason}.", {
                                        user: t,
                                        target: u,
                                        duration: m,
                                        reason: h
                                    }, "ModerationActionLine") : m ? Object(s.d)("{user} timed out {target} for {duration} seconds.", {
                                        user: t,
                                        target: u,
                                        duration: m
                                    }, "ModerationActionLine") : Object(s.d)("{user} timed out {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case p.d.Ban:
                                    n = h ? Object(s.d)("{user} banned {target}. Reason: {reason}.", {
                                        user: t,
                                        target: u,
                                        reason: h
                                    }, "ModerationActionLine") : Object(s.d)("{user} banned {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case p.d.Untimeout:
                                    n = Object(s.d)("{user} removed time out on {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case p.d.Unban:
                                    n = Object(s.d)("{user} removed ban on {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case p.d.Mod:
                                    n = Object(s.d)("{user} granted moderator privileges to {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case p.d.Unmod:
                                    n = Object(s.d)("{user} removed moderator privileges for {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case p.d.Delete:
                                    var f = g || "";
                                    n = r.createElement(Oe.a, {
                                        targetLogin: u,
                                        moderatorLogin: t,
                                        messageBody: f
                                    });
                                    break;
                                default:
                                    return null
                            }
                        }
                        return n ? r.createElement(B.Ya, {
                            className: "chat-line__status"
                        }, r.createElement(B.W, {
                            type: B.Wb.Span
                        }, n)) : null
                    }, t
                }(r.Component);

            function we() {
                return {
                    raid_error_self: Object(s.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                    raid_error_forbidden: Object(s.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                    raid_error_already_raiding: Object(s.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                    raid_error_too_many_viewers_to_raid: Object(s.d)("Sorry, raids can only support up to 20,000 viewers right now.", "RaidErrorTooManyViewersMessage"),
                    raid_error_unexpected: Object(s.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                    unraid_error_unexpected: Object(s.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                    unraid_error_no_active_raid: Object(s.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                    raid_notice_restricted_chat: Object(s.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                    raid_notice_mature: Object(s.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                    raid_notice_owner: Object(s.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                        unraidCommand: "/unraid"
                    }, "RaidNoticeOwnerMessage")
                }
            }
            var De = function(e) {
                return r.createElement("span", null, we()[e.message.msgid])
            };
            De.displayName = "RaidNoticeLine";
            var Ie = n("+GjP"),
                Te = function(e) {
                    var t = r.createElement(pe.a, {
                            contentID: e.event.user.id,
                            login: e.event.user.username,
                            sourceType: X.a.chat_message
                        }, Object(ue.a)(e.event.user.username, e.event.user.displayName)),
                        n = null;
                    return n = e.event.methods.prime ? Object(s.d)("{userLogin} just subscribed with {service}!", {
                        userLogin: t,
                        service: function(e) {
                            var t = Object(Ie.e)("https://twitch.amazon.com/prime", {
                                ref: "subscriptionMessage",
                                channel: e
                            });
                            return r.createElement("a", {
                                className: "chat-line__message--link",
                                href: t,
                                target: "_blank",
                                rel: "noopener"
                            }, Object(s.d)("Twitch Prime", "SubNoticeLine"))
                        }(e.event.channel)
                    }, "SubNoticeLine") : Object(s.d)("{userLogin} just subscribed with a Tier {tierNumber} sub!", {
                        userLogin: t,
                        tierNumber: Object(ge.a)(e.event.methods.plan) || 1
                    }, "SubNoticeLine"), r.createElement(B.W, {
                        color: B.O.Alt2,
                        type: B.Wb.Span
                    }, n)
                };
            Te.displayName = "SubNoticeLine";
            var Me = function(e) {
                return r.createElement(B.Fb, {
                    color: B.O.Alt2,
                    display: B.X.Inline
                }, r.createElement(Te, {
                    event: e.event
                }), r.createElement("span", null, " "), Object(s.d)("{userLogin} subscribed for {months} months in a row!", {
                    userLogin: r.createElement(pe.a, {
                        contentID: e.event.user.id,
                        login: e.event.user.username,
                        sourceType: X.a.chat_message
                    }, Object(ue.a)(e.event.user.username, e.event.user.displayName)),
                    months: e.event.months
                }, "ResubNoticeLine"))
            };
            Me.displayName = "ResubNoticeLine";
            var Re = n("yZCp"),
                Le = function(e) {
                    var t = e.event.message,
                        n = t.user.isIntl ? t.user.userDisplayName + " (" + t.user.userLogin + ")" : t.user.userDisplayName,
                        i = Object(s.d)("{user} is new here. Say hello!", {
                            user: r.createElement(pe.a, {
                                contentID: t.id,
                                login: t.user.userLogin,
                                sourceType: X.a.chat_message
                            }, "@", n)
                        }, "NewChatterRitual");
                    return r.createElement(B.Fb, {
                        color: B.O.Alt2
                    }, i)
                };
            Le.displayName = "RitualNoticeLine";
            var Fe = function(e) {
                var t = e.event,
                    n = r.createElement(pe.a, {
                        contentID: t.user.id,
                        login: t.user.username,
                        sourceType: X.a.chat_message
                    }, Object(ue.a)(t.user.username, t.user.displayName)),
                    i = r.createElement(pe.a, {
                        contentID: t.user.id,
                        login: t.recipientLogin,
                        sourceType: X.a.chat_message
                    }, Object(ue.a)(t.recipientLogin, t.recipientDisplayName)),
                    a = null;
                return a = "All-Access Pass" === t.methods.planName ? function(e, t) {
                    return Object(s.d)("{gifterButton} just gifted an All-Access Pass to {recipientButton}!", {
                        gifterButton: e,
                        recipientButton: t
                    }, "SubGiftNoticeLine")
                }(n, i) : "custom" === t.methods.plan ? function(e, t, n) {
                    return 1 === n ? Object(s.d)("{gifterButton} gifted a Sub to {recipientButton}! It's their first Gift Sub in the channel!", {
                        gifterButton: e,
                        recipientButton: t
                    }, "SubGiftNoticeLine") : n > 1 ? Object(s.d)("{gifterButton} gifted a Sub to {recipientButton}! They've given {senderCount} Gift Subs in the channel!", {
                        gifterButton: e,
                        recipientButton: t,
                        senderCount: n
                    }, "SubGiftNoticeLine") : Object(s.d)("{gifterButton} gifted a subscription to {recipientButton}!", {
                        gifterButton: e,
                        recipientButton: t
                    }, "SubGiftNoticeLine")
                }(n, i, t.senderCount) : function(e, t, n, i) {
                    return 1 === n ? Object(s.d)("{gifterButton} gifted a Tier {tierNumber} Sub to {recipientButton}! It's their first Gift Sub in the channel!", {
                        gifterButton: e,
                        recipientButton: t,
                        tierNumber: i
                    }, "SubGiftNoticeLine") : n > 1 ? Object(s.d)("{gifterButton} gifted a Tier {tierNumber} Sub to {recipientButton}! They've given {senderCount} Gift Subs in the channel!", {
                        gifterButton: e,
                        recipientButton: t,
                        senderCount: n,
                        tierNumber: i
                    }, "SubGiftNoticeLine") : Object(s.d)("{gifterButton} gifted a Tier {tierNumber} Sub to {recipientButton}!", {
                        gifterButton: e,
                        recipientButton: t,
                        tierNumber: i
                    }, "SubGiftNoticeLine")
                }(n, i, t.senderCount, Object(ge.a)(t.methods.plan) || 1), r.createElement(B.W, {
                    color: B.O.Alt2,
                    type: B.Wb.Span
                }, a)
            };
            Fe.displayName = "SubGiftNoticeLine";
            var je = function(e) {
                var t = e.event,
                    n = r.createElement(pe.a, {
                        contentID: t.user.id,
                        login: t.user.username,
                        sourceType: X.a.chat_message
                    }, Object(ue.a)(t.user.username, t.user.displayName)),
                    i = null;
                return i = "custom" === t.plan ? function(e, t, n, i) {
                    return 1 === i ? Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Sub to {channel}'s community. It's their first Gift Sub in the channel!} other {{gifterButton} is gifting {massGiftCount} Subs to {channel}'s community. It's their first Gift Sub in the channel!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n
                    }, "SubMysteryGiftNoticeLine") : i > 1 ? Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Sub to {channel}'s community. They've gifted a total of {senderCount} in the channel!} other {{gifterButton} is gifting {massGiftCount} Subs to {channel}'s community. They've gifted a total of {senderCount} in the channel!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n,
                        senderCount: i
                    }, "SubMysteryGiftNoticeLine") : Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Sub to {channel}'s community!} other {{gifterButton} is gifting {massGiftCount} Subs to {channel}'s community!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n
                    }, "SubMysteryGiftNoticeLine")
                }(n, t.channel, t.massGiftCount, t.senderCount) : function(e, t, n, i, r) {
                    return 1 === i ? Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Sub to {channel}'s community. It's their first Gift Sub in the channel!} other {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Subs to {channel}'s community. It's their first Gift Sub in the channel!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n,
                        tierNumber: r
                    }, "SubMysteryGiftNoticeLine") : i > 1 ? Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Sub to {channel}'s community. They've gifted a total of {senderCount} in the channel!} other {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Subs to {channel}'s community. They've gifted a total of {senderCount} in the channel!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n,
                        senderCount: i,
                        tierNumber: r
                    }, "SubMysteryGiftNoticeLine") : Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Sub to {channel}'s community!} other {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Subs to {channel}'s community!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n,
                        tierNumber: r
                    }, "SubMysteryGiftNoticeLine")
                }(n, t.channel, t.massGiftCount, t.senderCount, Object(ge.a)(t.plan) || 1), r.createElement(B.W, {
                    color: B.O.Alt2,
                    type: B.Wb.Span
                }, i)
            };
            je.displayName = "SubMysteryGiftNoticeLine";
            var xe, Ae = n("+kC+"),
                Ue = n("cr+I"),
                Pe = Object(k.compose)(Object(y.a)(Ae, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                }))(function(e) {
                    var t = e.data;
                    if (t.loading) return null;
                    var n = null;
                    if (!t.error && t.user && t.user.subscriptionProducts && t.user.subscriptionProducts.length > 0) {
                        var i = t.user.subscriptionProducts.find(function(e) {
                            return !!e && !!e.url
                        });
                        i && (n = i.url)
                    }
                    if (!n) return r.createElement(B.Ya, null, Object(s.d)("This room is in subscribers only mode.", "SubsOnlyUpsellLine"));
                    var a = r.createElement(B.U, {
                        targetBlank: !0,
                        to: n + "?" + Ue.stringify({
                            ref: "subscriber_only_mode_chat"
                        })
                    }, n);
                    return r.createElement(B.Ya, null, Object(s.d)("This room is in subscribers only mode. To talk, purchase a channel subscription at {productLink}", {
                        productLink: a
                    }, "SubsOnlyUpsellLine"))
                }),
                Be = n("k8pZ");
            ! function(e) {
                e.Timestamp = "extension-message-timestamp", e.ExtensionName = "extension-message-name"
            }(xe || (xe = {}));
            var Ve = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onExtensionNameClick = function(e) {
                        var n = t.props.message;
                        t.props.onExtensionNameClick(n.extension.clientID, n.extension.version, n.id, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.installedExtensions) return null;
                    var e = this.props.message;
                    if (!this.props.installedExtensions.some(function(t) {
                            var n = t.extension;
                            return n.clientId === e.extension.clientID && n.version === e.extension.version
                        })) return null;
                    var t = this.props.message.extension.displayBadges;
                    return r.createElement(B.Ya, {
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, r.createElement("div", {
                        id: this.props.message.id,
                        className: "room-message"
                    }, this.renderTimestamp(), r.createElement(O.b, {
                        badgeSets: this.props.badgeSets,
                        badgesToRender: t
                    }), this.renderMessageAuthor(this.props.message.extension), r.createElement("span", null, ": "), this.renderMessageBody()))
                }, t.prototype.renderTimestamp = function() {
                    return this.props.showTimestamps ? r.createElement("span", {
                        key: "timestamp",
                        className: "room-message__timestamp",
                        "data-test-selector": xe.Timestamp
                    }, Object(z.a)(new Date(this.props.message.sentAt))) : null
                }, t.prototype.renderMessageBody = function() {
                    var e = Object(m.g)(this.props.message);
                    return Object(z.f)(e, {
                        forceClipsNetworkRequest: !0
                    })
                }, t.prototype.renderMessageAuthor = function(e) {
                    return r.createElement("button", {
                        onClick: this.onExtensionNameClick,
                        "data-test-selector": xe.ExtensionName
                    }, r.createElement("span", {
                        key: e.clientID + "-" + e.version + "-messageauthor"
                    }, r.createElement("span", {
                        key: "username-display",
                        style: {
                            color: e.chatColor
                        }
                    }, r.createElement(B.W, {
                        bold: !0
                    }, e.displayName))))
                }, t
            }(r.Component);
            var We, He = Object(a.connect)(function(e, t) {
                    return {
                        installedExtensions: Object(Be.a)(e, t.channelID)
                    }
                }, function(e) {
                    return Object(o.bindActionCreators)({
                        onExtensionNameClick: w.d
                    }, e)
                })(Ve),
                Ge = "https://www.twitch.tv/settings/connections";
            ! function(e) {
                e.Kickback = "msg_blizzard", e.Enabled = "blizzard_connect_on", e.Disabled = "blizzard_connect_off", e.AlreadyEnabled = "already_blizzard_mode_on", e.AlreadyDisabled = "already_blizzard_mode_off"
            }(We || (We = {}));
            var Ye = function(e) {
                var t = null;
                switch (e.type) {
                    case We.Kickback:
                        var n = r.createElement(B.U, {
                            targetBlank: !0,
                            to: Ge
                        }, Ge);
                        t = Object(s.d)("You must connect your Blizzard account to send messages in this room. You can connect your Blizzard account in your Twitch settings at {settingsLink}", {
                            settingsLink: n
                        }, "BlizzardConnectModeNoticeLine");
                        break;
                    case We.Enabled:
                        t = Object(s.d)("This room now requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case We.Disabled:
                        t = Object(s.d)("This room no longer requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case We.AlreadyEnabled:
                        t = Object(s.d)("This room already requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case We.AlreadyDisabled:
                        t = Object(s.d)("This room does not require a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    default:
                        return null
                }
                return r.createElement(B.Ya, null, t)
            };
            Ye.displayName = "BlizzardConnectNoticeLine";
            n("NWfm");
            var ze, qe = "timeout_success",
                Xe = "untimeout_success",
                Qe = "ban_success",
                Ke = "unban_success",
                $e = "delete_message_success",
                Je = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                        if (!e.doesNotUpdate) return !0;
                        if (e.isCurrentUserModerator !== this.props.isCurrentUserModerator) return !0;
                        if (e.showModerationIcons !== this.props.showModerationIcons) return !0;
                        if (e.showTimestamps !== this.props.showTimestamps) return !0;
                        if (e.useHighContrastColors !== this.props.useHighContrastColors) return !0;
                        if (e.theme !== this.props.theme) return !0;
                        switch (e.message.type) {
                            case p.b.Message:
                                if (e.message.deleted) return !0;
                                break;
                            case p.b.Resubscription:
                            case p.b.Ritual:
                                if (e.message.message && e.message.message.deleted) return !0;
                                break;
                            case p.b.AutoMod:
                                if (e.message.autoModType === p.a.MessageRejectedPrompt && (e.showAutoModActions !== this.props.showAutoModActions || e.message.rejectedMessage.deleted)) return !0;
                                break;
                            case p.b.Hosting:
                            case p.b.Unhost:
                            case p.b.SlowMode:
                            case p.b.SubscriberOnlyMode:
                            case p.b.FollowerOnlyMode:
                            case p.b.EmoteOnlyMode:
                            case p.b.R9KMode:
                            case p.b.Clear:
                            case p.b.Unraid:
                            case p.b.Notice:
                            case p.b.Moderation:
                            case p.b.ModerationAction:
                                if (e.showModerationActions !== this.props.showModerationActions) return !0
                        }
                        return !1
                    }, t.prototype.render = function() {
                        var e = this.props.message,
                            t = null;
                        if (this.props.isCurrentUserModerator) {
                            if (this.props.showModerationActions) switch (e.type) {
                                case p.b.Hosting:
                                case p.b.Unhost:
                                case p.b.SlowMode:
                                case p.b.SubscriberOnlyMode:
                                case p.b.FollowerOnlyMode:
                                case p.b.EmoteOnlyMode:
                                case p.b.R9KMode:
                                case p.b.Clear:
                                case p.b.Unraid:
                                    return null
                            }
                            if (this.props.showModerationIcons) switch (e.type) {
                                case p.b.Subscription:
                                case p.b.SubGift:
                                case p.b.SubMysteryGift:
                                case p.b.Resubscription:
                                case p.b.GiftPaidUpgrade:
                                case p.b.AnonGiftPaidUpgrade:
                                    t = r.createElement(Y, {
                                        channelID: this.props.channelID,
                                        onPushMessage: this.props.onPushMessage,
                                        senderLogin: e.user.username,
                                        targetUserID: e.user.userID
                                    })
                            }
                        }
                        switch (e.type) {
                            case p.b.AutoMod:
                                return e.autoModType !== p.a.MessageRejectedPrompt || this.props.isCurrentUserModerator && this.props.showAutoModActions ? r.createElement(de, {
                                    channelID: this.props.channelID,
                                    message: e,
                                    badgeSets: this.props.badgeSets,
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    showModerationIcons: this.props.showModerationIcons,
                                    currentUserLogin: this.props.currentUserLogin,
                                    confirmModerationAction: this.props.confirmModerationAction
                                }) : null;
                            case p.b.ModerationAction:
                                return this.props.isCurrentUserModerator && this.props.showModerationActions ? r.createElement(_e, {
                                    moderationActionEvent: e
                                }) : null;
                            case p.b.Connected:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status",
                                    "data-a-target": "chat-welcome-message"
                                }, r.createElement(B.W, {
                                    type: B.Wb.Span
                                }, Object(s.d)("Welcome to the chat room!", "ChatLine")));
                            case p.b.Disconnected:
                                return e.reason ? r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, r.createElement(B.W, {
                                    type: B.Wb.Span
                                }, Object(s.d)("You have been disconnected from chat for the following reason: {reason}", {
                                    reason: e.reason
                                }, "ChatLine"))) : r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, r.createElement(B.W, {
                                    type: B.Wb.Span
                                }, Object(s.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                            case p.b.Hosted:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, r.createElement(B.W, {
                                    type: B.Wb.Span
                                }, Object(z.e)(e)));
                            case p.b.Hosting:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, r.createElement(B.W, {
                                    type: B.Wb.Span
                                }, Object(s.d)("Now hosting {channel}", {
                                    channel: e.hostedChannel
                                }, "ChatLine")));
                            case p.b.Unhost:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, r.createElement(B.W, {
                                    type: B.Wb.Span
                                }, Object(s.d)("No longer hosting.", "ChatLine")));
                            case p.b.Message:
                                return this.props.onRenderReportChatSent && e.user.userLogin === this.props.currentUserLogin && this.props.onRenderReportChatSent(), r.createElement(Z, {
                                    channelID: this.props.channelID,
                                    badgeSets: this.props.badgeSets,
                                    message: e,
                                    isDeleted: e.deleted,
                                    isHidden: e.hidden,
                                    showModerationIcons: this.props.showModerationIcons,
                                    showTimestamps: this.props.showTimestamps,
                                    useHighContrastColors: !!this.props.useHighContrastColors,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    isCurrentUserStaff: this.props.isCurrentUserStaff,
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    currentUserLogin: this.props.currentUserLogin,
                                    confirmModerationAction: this.props.confirmModerationAction,
                                    onPushMessage: this.props.onPushMessage,
                                    theme: this.props.theme
                                });
                            case p.b.Moderation:
                                return this.props.isCurrentUserModerator && !this.props.showModerationActions ? r.createElement(B.Ya, {
                                    className: "chat-line__moderation"
                                }, Object(z.g)(e)) : null;
                            case p.b.Subscription:
                                return r.createElement(ye, null, t, r.createElement(Te, {
                                    event: e
                                }));
                            case p.b.SubGift:
                                return r.createElement(ye, null, t, r.createElement(Fe, {
                                    event: e
                                }));
                            case p.b.AnonSubGift:
                                return r.createElement(ye, null, r.createElement(ve, {
                                    event: e
                                }));
                            case p.b.SubMysteryGift:
                                return r.createElement(ye, null, t, r.createElement(je, {
                                    event: e
                                }));
                            case p.b.AnonSubMysteryGift:
                                return r.createElement(ye, null, r.createElement(be, {
                                    event: e
                                }));
                            case p.b.RewardGift:
                                return r.createElement(Re.a, {
                                    event: e,
                                    channelID: this.props.channelID
                                });
                            case p.b.BitsCharity:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__bits-charity",
                                    padding: {
                                        right: 2,
                                        y: .5
                                    }
                                }, Object(z.b)(e));
                            case p.b.Resubscription:
                                var n = null;
                                return e.message && (n = r.createElement(Z, {
                                    badgeSets: this.props.badgeSets,
                                    confirmModerationAction: this.props.confirmModerationAction,
                                    channelID: this.props.channelID,
                                    className: "chat-line--inline",
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    currentUserLogin: this.props.currentUserLogin,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    isCurrentUserStaff: this.props.isCurrentUserStaff,
                                    isDeleted: e.message.deleted,
                                    isHidden: e.message.hidden,
                                    message: e.message,
                                    onPushMessage: this.props.onPushMessage,
                                    showModerationIcons: this.props.showModerationIcons,
                                    showTimestamps: this.props.showTimestamps,
                                    useHighContrastColors: !!this.props.useHighContrastColors
                                })), r.createElement(ye, null, !n && t, r.createElement(Me, {
                                    event: e
                                }), r.createElement(B.Ya, null, n));
                            case p.b.GiftPaidUpgrade:
                                return r.createElement(ye, null, t, r.createElement(ke, {
                                    event: e
                                }));
                            case p.b.AnonGiftPaidUpgrade:
                                return r.createElement(ye, null, t, r.createElement(he, {
                                    event: e
                                }));
                            case p.b.RoomMods:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, Object(z.i)(e.moderatorLogins));
                            case p.b.SlowMode:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, Object(z.j)(e));
                            case p.b.SubscriberOnlyMode:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, Object(z.k)(e));
                            case p.b.FollowerOnlyMode:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, Object(z.d)(e));
                            case p.b.EmoteOnlyMode:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, Object(z.c)(e));
                            case p.b.R9KMode:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, Object(z.h)(e));
                            case p.b.Clear:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, Object(s.d)("Chat was cleared by a moderator", "ChatLine"));
                            case p.b.Notice:
                                if (function(e) {
                                        return e.msgid in we()
                                    }(e)) return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, r.createElement(De, {
                                    message: e
                                }));
                                switch (e.msgid) {
                                    case "msg_subsonly":
                                        return r.createElement(B.Ya, {
                                            className: "chat-line__status"
                                        }, r.createElement(Pe, {
                                            channelID: this.props.channelID
                                        }));
                                    case We.Kickback:
                                    case We.Enabled:
                                    case We.Disabled:
                                    case We.AlreadyEnabled:
                                    case We.AlreadyDisabled:
                                        return r.createElement(B.Ya, {
                                            className: "chat-line__status"
                                        }, r.createElement(Ye, {
                                            type: e.msgid
                                        }))
                                }
                                if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                    case $e:
                                    case qe:
                                    case Qe:
                                        return null;
                                    case Xe:
                                    case Ke:
                                        if (this.props.showModerationActions) return null
                                }
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, e.message);
                            case p.b.Info:
                                return r.createElement(B.Ya, {
                                    className: "chat-line__status"
                                }, e.message);
                            case p.b.Raid:
                                return r.createElement(Ee, {
                                    message: e
                                });
                            case p.b.Unraid:
                                return r.createElement(ye, null, r.createElement(B.W, {
                                    color: B.O.Alt2
                                }, Object(s.d)("The raid has been cancelled.", "RaidCancelMessage")));
                            case p.b.Ritual:
                                return r.createElement(ye, null, r.createElement(Le, {
                                    event: e
                                }), r.createElement(Z, {
                                    badgeSets: this.props.badgeSets,
                                    confirmModerationAction: this.props.confirmModerationAction,
                                    channelID: this.props.channelID,
                                    className: "chat-line--inline",
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    currentUserLogin: this.props.currentUserLogin,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    isCurrentUserStaff: this.props.isCurrentUserStaff,
                                    isDeleted: e.message.deleted,
                                    isHidden: e.message.hidden,
                                    message: e.message,
                                    onPushMessage: this.props.onPushMessage,
                                    showModerationIcons: this.props.showModerationIcons,
                                    showTimestamps: this.props.showTimestamps,
                                    useHighContrastColors: !!this.props.useHighContrastColors
                                }));
                            case p.b.ExtensionMessage:
                                return r.createElement(He, {
                                    badgeSets: this.props.badgeSets,
                                    channelID: this.props.channelID,
                                    currentUserLogin: this.props.currentUserLogin,
                                    message: e,
                                    showTimestamps: this.props.showTimestamps
                                });
                            default:
                                return null
                        }
                    }, t
                }(r.Component),
                Ze = n("GnwI"),
                et = (n("HjUq"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
                tt = 10,
                nt = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isAutoScrolling: !0
                        }, t.shouldUpdateMessages = !1, t.saveScrollRef = function(e) {
                            return t.scroll = e
                        }, t.handleScrollEvent = function(e) {
                            t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type) && (t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= tt ? t.setState({
                                isAutoScrolling: !0
                            }) : t.setState({
                                isAutoScrolling: !1
                            }))
                        }, t.handleResize = function() {
                            t.state.isAutoScrolling && t.scrollToBottom()
                        }, t.handleClickMoreMessages = function() {
                            t.setState({
                                isAutoScrolling: !0
                            }, t.scrollToBottom)
                        }, t.scrollToBottom = function() {
                            t.scroll && t.scroll.scrollContent && (t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight)
                        }, t.reportChatRenderSent = function() {
                            t.props.chatRenderSentEvent && t.props.latencyTracking.reportCustomEvent(t.props.chatRenderSentEvent)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this;
                        et.forEach(function(t) {
                            e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                        })
                    }, t.prototype.componentWillUnmount = function() {
                        var e = this;
                        et.forEach(function(t) {
                            e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                        })
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        0 === this.props.badgeSets.count && e.badgeSets.count > 0 && (this.shouldUpdateMessages = !0)
                    }, t.prototype.componentDidUpdate = function(e) {
                        this.shouldUpdateMessages = !1, this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                    }, t.prototype.render = function() {
                        var e = this,
                            t = this.props.messages.map(function(t) {
                                return r.createElement(Je, {
                                    badgeSets: e.props.badgeSets,
                                    channelID: e.props.channelID,
                                    isCurrentUserModerator: e.props.isCurrentUserModerator,
                                    isCurrentUserStaff: e.props.isCurrentUserStaff,
                                    message: t,
                                    key: t.id,
                                    showAutoModActions: e.props.showAutoModActions,
                                    showModerationActions: e.props.showModerationActions,
                                    showModerationIcons: e.props.showModerationIcons,
                                    showTimestamps: e.props.showTimestamps,
                                    useHighContrastColors: e.props.useHighContrastColors,
                                    currentUserDisplayName: e.props.currentUserDisplayName,
                                    currentUserLogin: e.props.currentUserLogin,
                                    confirmModerationAction: e.props.confirmModerationAction,
                                    onPushMessage: e.props.onPushMessage,
                                    doesNotUpdate: !e.shouldUpdateMessages,
                                    theme: e.props.theme,
                                    onRenderReportChatSent: e.reportChatRenderSent
                                })
                            });
                        return r.createElement(B.Ya, {
                            refDelegate: this.props.containerRef,
                            className: "chat-list",
                            display: B.X.Flex,
                            flexDirection: B.Aa.Column,
                            flexWrap: B.Ba.NoWrap,
                            overflow: B.db.Hidden,
                            flexGrow: 1
                        }, r.createElement(f.a, {
                            onResize: this.handleResize
                        }), r.createElement(B.Qa, {
                            flexGrow: 1
                        }, r.createElement(v.b, {
                            className: "chat-list__lines",
                            scrollRef: this.saveScrollRef,
                            "data-a-target": "chat-scroller"
                        }, r.createElement(B.Qa, {
                            flexGrow: 1,
                            fullHeight: !0,
                            padding: {
                                bottom: 1
                            }
                        }, r.createElement("div", {
                            role: "log"
                        }, t)))), r.createElement(B.Ya, {
                            className: "chat-list__more-messages-placeholder",
                            position: B.kb.Relative,
                            margin: {
                                x: 2
                            }
                        }, this.moreMessages()))
                    }, t.prototype.moreMessages = function() {
                        return this.state.isAutoScrolling ? null : r.createElement(B.Qa, {
                            display: B.X.Flex,
                            justifyContent: B.Xa.Center,
                            alignItems: B.f.Center,
                            position: B.kb.Absolute,
                            padding: .5,
                            attachBottom: !0,
                            fullWidth: !0
                        }, r.createElement(B.Fb, {
                            className: "chat-list__more-messages",
                            borderRadius: B.x.Medium
                        }, r.createElement("div", {
                            onClick: this.handleClickMoreMessages
                        }, Object(s.d)("More messages below.", "ChatList"))))
                    }, t
                }(r.Component),
                it = Object(Ze.b)("ChatListPresentation", {
                    autoReportInteractive: !0
                })(nt),
                rt = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            messages: []
                        }, t.onBufferUpdate = function() {
                            t.syncBufferHandle || (t.syncBufferHandle = setTimeout(t.syncBufferedMessages, 0))
                        }, t.syncBufferedMessages = function() {
                            t.props.messageBufferAPI && t.setState({
                                messages: t.props.messageBufferAPI.getMessages()
                            }), t.clearBufferHandle()
                        }, t.clearBufferHandle = function() {
                            t.syncBufferHandle && (clearTimeout(t.syncBufferHandle), t.syncBufferHandle = 0)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.messageBufferAPI && (this.props.messageBufferAPI.addUpdateHandler(this.onBufferUpdate), this.setState({
                            messages: this.props.messageBufferAPI.getMessages()
                        }))
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = e.pubsub.messages.chatRichEmbedInfo,
                            n = e.pubsub.messages.extensionMessage;
                        t && this.props.pubsub.messages.chatRichEmbedInfo !== t && s.p.apollo.client.writeQuery({
                            query: u,
                            variables: {
                                slug: t.data.twitch_metadata.clip_metadata.slug
                            },
                            data: function(e) {
                                var t = e.data.twitch_metadata.clip_metadata;
                                return {
                                    clip: {
                                        __typename: "Clip",
                                        slug: t.slug,
                                        id: t.id,
                                        url: e.data.request_url,
                                        title: e.data.title,
                                        thumbnailURL: e.data.thumbnail_url,
                                        curator: t.curator_id ? {
                                            displayName: e.data.author_name,
                                            id: t.curator_id,
                                            __typename: "User"
                                        } : null,
                                        broadcaster: t.channel_display_name ? {
                                            displayName: t.channel_display_name,
                                            id: t.broadcaster_id,
                                            __typename: "User"
                                        } : null
                                    }
                                }
                            }(t)
                        }), this.props.messageBufferAPI !== e.messageBufferAPI && (this.props.messageBufferAPI && this.props.messageBufferAPI.removeUpdateHandler(this.onBufferUpdate), e.messageBufferAPI && (e.messageBufferAPI.addUpdateHandler(this.onBufferUpdate), this.setState({
                            messages: e.messageBufferAPI.getMessages()
                        }))), n && this.props.pubsub.messages.extensionMessage !== n && this.props.onPushMessage(function(e) {
                            var t = e.data;
                            return {
                                type: p.b.ExtensionMessage,
                                id: t.id,
                                sentAt: t.sent_at,
                                extension: {
                                    clientID: t.sender.extension_client_id,
                                    version: t.sender.extension_version,
                                    displayName: t.sender.display_name,
                                    displayBadges: Object(m.b)(t.sender.badges),
                                    chatColor: t.sender.chat_color
                                },
                                content: {
                                    text: t.content.text,
                                    fragments: Object(m.c)(t.content.fragments)
                                }
                            }
                        }(n))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.messageBufferAPI && this.props.messageBufferAPI.removeUpdateHandler(this.onBufferUpdate), this.clearBufferHandle()
                    }, t.prototype.render = function() {
                        return r.createElement(it, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeSets,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            channelLogin: this.props.channelLogin,
                            onPushMessage: this.props.onPushMessage,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isCurrentUserStaff: this.props.isCurrentUserStaff,
                            isEmbedded: this.props.isEmbedded,
                            messages: this.state.messages,
                            showAutoModActions: this.props.showAutoModActions,
                            showModerationActions: this.props.showModerationActions,
                            showModerationIcons: this.props.showModerationIcons,
                            showTimestamps: this.props.showTimestamps,
                            theme: this.props.theme,
                            useHighContrastColors: this.props.useHighContrastColors,
                            currentUserLogin: this.props.currentUserLogin,
                            containerRef: this.props.containerRef,
                            chatRenderSentEvent: this.props.chatRenderSentEvent,
                            confirmModerationAction: this.props.confirmModerationAction
                        })
                    }, t
                }(r.Component);
            var at = Object(o.compose)(Object(a.connect)(function(e) {
                return {
                    chatRenderSentEvent: Object(g.b)(e),
                    showAutoModActions: e.chat.showAutoModActions,
                    showModerationActions: e.chat.showModerationActions,
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps,
                    useHighContrastColors: e.chat.useHighContrastColors
                }
            }), Object(l.a)([{
                skip: function(e) {
                    return !e.channelID
                },
                topic: function(e) {
                    return e.channelID ? Object(d.z)(e.channelID) : ""
                },
                mapMessageTypesToProps: (ze = {}, ze[c.PubsubMessageType.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", ze[c.PubsubMessageType.StreamChatRoomExtensionMessage] = "extensionMessage", ze)
            }]), h.a)(rt);
            n.d(t, !1, function() {
                return rt
            }), n.d(t, "a", function() {
                return at
            })
        },
        r2Xj: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                DarkMode: "darkMode",
                FollowerDuration: "followerDuration",
                FollowerMode: "followerMode",
                HideChat: "hideChat",
                ShowMessageFlags: "showMessageFlags",
                ShowAutoModActions: "showAutoModActions",
                ShowModActions: "showModerationActions",
                ShowModIcons: "showModIcons",
                ShowTimestamps: "showTimestamps",
                UseHighContrastColors: "useHighContrastColors",
                SlowMode: "slowMode"
            }
        },
        r62z: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "b", function() {
                return d
            }), n.d(t, "d", function() {
                return u
            });
            var i = n("+GjP"),
                r = "https://www.facebook.com/sharer/sharer.php",
                a = "https://www.twitter.com/share",
                o = "https://www.reddit.com/submit",
                s = "https://vk.com/share.php";

            function l(e) {
                return Object(i.e)(r, {
                    u: e
                })
            }

            function c(e, t) {
                return Object(i.e)(a, {
                    url: e,
                    text: t
                })
            }

            function d(e, t) {
                return Object(i.e)(o, {
                    url: e,
                    title: t
                })
            }

            function u(e) {
                return Object(i.e)(s, {
                    url: e
                })
            }
        },
        rVcM: function(e, t, n) {},
        rhXE: function(e, t, n) {},
        ru7j: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BlockedUsers"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blockedUsers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 61
                }
            };
            n.loc.source = {
                body: "query BlockedUsers {\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ry0r: function(e, t, n) {
            "use strict";
            var i, r = n("/MKj"),
                a = n("kRBY"),
                o = n("mrSG"),
                s = n("q1tI"),
                l = n("oJmH"),
                c = n("/7QA"),
                d = n("yR8l"),
                u = n("eDVu"),
                p = n("0Log"),
                m = n("geRD"),
                h = n("/aPz"),
                g = n("DMoW"),
                f = n("TSYQ"),
                v = n("4rCz"),
                b = n("Ue10");
            n("OCTF");
            ! function(e) {
                e.CloseButton = "bits-card-wrapper-close-button-selector", e.OuterWrapper = "bits-card-wrapper-outer-selector", e.InnerWrapper = "bits-card-wrapper-inner-selector"
            }(i || (i = {}));
            var k, y = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.onUserClose,
                            n = e.children,
                            r = e.className,
                            a = e.dataATarget,
                            o = e.closeDataATarget,
                            l = t ? s.createElement(b.Ya, {
                                position: b.kb.Absolute,
                                padding: {
                                    top: .5,
                                    right: .5
                                },
                                attachRight: !0,
                                attachTop: !0,
                                zIndex: b.jc.Above
                            }, s.createElement(b.A, {
                                ariaLabel: Object(v.d)("close bits card", "BitsCard"),
                                "data-a-target": o,
                                "data-test-selector": i.CloseButton,
                                onClick: t,
                                icon: b.ub.Close,
                                type: b.C.Secondary,
                                size: b.B.Small
                            })) : null;
                        return s.createElement(b.Fb, {
                            "data-test-selector": i.OuterWrapper,
                            className: f("bits-card-wrapper", r),
                            "data-a-target": a,
                            display: b.X.Flex,
                            flexDirection: b.Aa.Column,
                            position: b.kb.Absolute,
                            background: b.r.Base,
                            elevation: 3,
                            zIndex: b.jc.Above,
                            fullWidth: !0,
                            border: !0
                        }, l, s.createElement(b.Ya, {
                            "data-test-selector": i.InnerWrapper,
                            display: b.X.Flex,
                            flexDirection: b.Aa.Column,
                            alignItems: b.f.Center,
                            justifyContent: b.Xa.Center,
                            flexGrow: 1,
                            fullWidth: !0
                        }, n))
                    }, t.defaultProps = {
                        dataATarget: "bits-card",
                        closeDataATarget: "bits-card-close-button"
                    }, t
                }(s.PureComponent),
                C = n("zrSb"),
                S = function() {
                    return s.createElement(b.Ya, {
                        textAlign: b.Sb.Center,
                        padding: 1
                    }, s.createElement(b.W, {
                        italic: !0
                    }, Object(c.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
                },
                E = n("jv9u"),
                N = n("/0dD"),
                O = (n("wtKP"), function(e) {
                    var t = void 0 !== e.progress,
                        n = s.createElement("img", {
                            className: "cheer-badge__image",
                            src: e.badge.image1x,
                            alt: e.badge.title,
                            srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                        });
                    if (!t) return n;
                    var i = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                    return s.createElement("div", {
                        className: "cheer-badge__progress-container"
                    }, n, s.createElement("div", {
                        className: "cheer-badge__progress-overlay",
                        style: {
                            width: i + "px"
                        },
                        "data-test-selector": "cheer-progress"
                    }))
                }),
                _ = n("VeT4"),
                w = n("5zXJ"),
                D = function(e) {
                    var t;
                    e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = s.createElement(b.Ya, {
                        padding: {
                            bottom: .5
                        }
                    }, e.selfBitsBadge.current && s.createElement(b.Ya, {
                        display: b.X.Inline,
                        margin: {
                            right: .5
                        }
                    }, s.createElement(O, {
                        badge: e.selfBitsBadge.current
                    })), e.selfBitsBadge.next && s.createElement(O, {
                        badge: e.selfBitsBadge.next,
                        progress: e.selfBitsBadge.progress
                    }), e.selfBitsBadge.nextBits && Object(c.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                        bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                    }, "Bits--BalanceFooter")));
                    var n = Object(c.d)("{bitsGem} Log in to see your Bits balance", {
                        bitsGem: s.createElement(_.a, {
                            count: 100,
                            withImage: !0,
                            bitsConfig: e.bitsConfig,
                            themeOverride: N.a.Dark
                        })
                    }, "Bits--BalanceFooter");
                    return void 0 !== e.balance && null !== e.balance && (n = Object(c.d)("You have {currentBits}", {
                        currentBits: s.createElement(_.a, {
                            count: e.balance,
                            withImage: !0,
                            withText: !0,
                            bitsConfig: e.bitsConfig,
                            themeOverride: N.a.Dark
                        })
                    }, "Bits--BalanceFooter")), s.createElement(b.Ya, {
                        flexGrow: 1,
                        padding: 1,
                        className: "bits-balance-footer"
                    }, t, s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexGrow: 1,
                        alignItems: b.f.Center,
                        justifyContent: b.Xa.Between
                    }, s.createElement("div", null, n), s.createElement(b.z, {
                        disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > w.n,
                        onClick: e.onClickGetBits,
                        "data-test-selector": "get-bits-button",
                        "data-a-target": "get-bits-button"
                    }, Object(c.d)("Get Bits", "Bits--BalanceFooter"))))
                },
                I = function(e) {
                    return s.createElement(b.Ya, {
                        flexGrow: 1
                    }, s.createElement(b.Ya, {
                        className: "undo-prompt__footer",
                        padding: 1,
                        display: b.X.Flex,
                        justifyContent: b.Xa.Between
                    }, s.createElement(b.z, {
                        onClick: e.onCancel || void 0,
                        type: b.F.Hollow,
                        overlay: !0,
                        "data-test-selector": "cancel-button"
                    }, Object(c.d)("Cancel", "Bits--UndoPrompt")), s.createElement(b.z, {
                        onClick: e.onConfirm || void 0,
                        "data-test-selector": "confirm-button"
                    }, Object(c.d)("Send", "Bits--UndoPrompt"))), s.createElement(b.nb, {
                        animationDirection: b.ob.Down,
                        size: b.pb.ExtraSmall,
                        animationDuration: w.v.UNDO_PROMPT_DURATION / 1e3
                    }))
                },
                T = function(e) {
                    return e.event, s.createElement(D, {
                        bitsConfig: e.bitsConfig,
                        onClickGetBits: e.onClickGetBits,
                        balance: e.balance,
                        selfBitsBadge: e.selfBitsBadge
                    })
                },
                M = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return this.props.isSending ? this.props.totalBits >= w.r ? s.createElement(I, {
                            onCancel: this.props.onCancelSend,
                            onConfirm: this.props.onConfirmSend
                        }) : null : this.props.event ? s.createElement(T, {
                            event: this.props.event,
                            selfBitsBadge: this.props.userSelfBitsBadge,
                            bitsConfig: this.props.bitsConfig,
                            onClickGetBits: this.props.handleClickBuy,
                            balance: this.props.bitsBalance
                        }) : s.createElement(D, {
                            selfBitsBadge: this.props.userSelfBitsBadge,
                            bitsConfig: this.props.bitsConfig,
                            onClickGetBits: this.props.handleClickBuy,
                            balance: this.props.bitsBalance
                        })
                    }, t
                }(s.PureComponent),
                R = n("wUQP"),
                L = function(e) {
                    return s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexGrow: 1,
                        flexDirection: b.Aa.Column,
                        justifyContent: b.Xa.Center,
                        alignItems: b.f.Center,
                        padding: 1
                    }, s.createElement(b.Ya, {
                        padding: {
                            top: 1
                        }
                    }, s.createElement(b.W, {
                        type: b.Wb.H5,
                        color: b.O.Link,
                        bold: !0
                    }, Object(c.d)("Cheer to support your streamer and Direct Relief!", "Bits--CharityCheerIntro"))), s.createElement(b.S, {
                        src: "https://d3aqoihi2n8ty8.cloudfront.net/charity-banner/direct-relief_bits-banner.png",
                        alt: Object(c.d)("Twitch + Direct Relief", "Bits--CharityCheerIntro")
                    }), s.createElement(b.W, null, Object(c.d)("Twitch will donate $2 for every 1000 Bits using the limited time Charity Cheermote (charity) or #charity with any Cheermote <x:link>Details</x:link>", {
                        "x:link": function(e) {
                            return s.createElement(b.U, {
                                linkTo: "http://link.twitch.tv/hashtag-charity"
                            }, e)
                        }
                    }, "Bits--CharityCheerIntro")), s.createElement(b.Ya, {
                        padding: {
                            top: 1,
                            bottom: 1
                        }
                    }, s.createElement("a", {
                        href: "#",
                        onClick: e.onClickHelp,
                        "data-test-selector": "help-link"
                    }, Object(c.d)("How do I cheer?", "Bits--CharityCheerIntro"))))
                },
                F = n("dx/T"),
                j = function(e) {
                    return s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexGrow: 1,
                        flexDirection: b.Aa.Column,
                        justifyContent: b.Xa.Center,
                        alignItems: b.f.Center,
                        padding: 1
                    }, s.createElement(b.Ya, {
                        padding: {
                            top: 2,
                            bottom: 2
                        }
                    }, s.createElement(b.W, {
                        type: b.Wb.H5,
                        color: b.O.Link,
                        bold: !0
                    }, Object(c.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), s.createElement(b.W, null, Object(c.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), s.createElement(b.Ya, {
                        padding: {
                            top: 2,
                            bottom: 1
                        }
                    }, s.createElement("a", {
                        href: "#",
                        onClick: e.onClickHelp,
                        "data-test-selector": "help-link"
                    }, Object(c.d)("How do I cheer?", "Bits--CheermoteIntro"))))
                },
                x = n("3CMh"),
                A = function(e) {
                    var t = e.headline || e.prefix + (e.tier || "");
                    if (e.tournament && e.tier <= 0) {
                        var n = e.tournament.teams.find(function(t) {
                            return t.id === e.prefix
                        });
                        n && (t = n.name + " - " + e.prefix)
                    }
                    return s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Column,
                        alignItems: b.f.Center,
                        padding: 1
                    }, s.createElement(b.W, {
                        type: b.Wb.H4,
                        bold: !0
                    }, t), s.createElement(x.a, {
                        prefix: e.prefix,
                        amount: e.tier,
                        bitsConfig: e.bitsConfig,
                        showImage: !0,
                        showAmount: e.tier > 0
                    }))
                },
                U = (n("Aa/l"), function(e) {
                    var t = null;
                    return e.minToCheer > 1 && (t = s.createElement(b.W, {
                        "data-test-selector": "min-to-cheer-selector",
                        color: b.O.Alt2,
                        italic: !0
                    }, Object(c.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                        minToCheer: e.minToCheer
                    }, "Bits--CheermoteTierIntro"))), s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexGrow: 1,
                        flexDirection: b.Aa.Column,
                        alignItems: b.f.Center,
                        justifyContent: b.Xa.Center,
                        padding: 1,
                        className: "cheermote-tier-intro"
                    }, s.createElement(b.Ya, {
                        padding: {
                            x: 4
                        },
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b.W, {
                        color: b.O.Alt2
                    }, Object(c.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t)
                }),
                P = n("4VQm"),
                B = (n("ecb7"), function(e) {
                    var t = e.prefixes.map(function(t, n) {
                        if (t.alt && t.cheerAmount) return s.createElement(b.Qa, {
                            className: "pending-cheer-list__list-item",
                            key: n,
                            padding: {
                                x: 1
                            }
                        }, s.createElement("li", null, s.createElement(x.a, {
                            prefix: t.alt,
                            amount: t.cheerAmount > w.p ? w.p : t.cheerAmount,
                            bitsConfig: e.bitsConfig,
                            size: x.b.Small,
                            showAmount: !0,
                            showImage: !0
                        })))
                    });
                    return s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Row,
                        alignItems: b.f.End,
                        justifyContent: b.Xa.Center,
                        flexWrap: b.Ba.Wrap,
                        margin: {
                            top: 1
                        },
                        className: "pending-cheer-list"
                    }, t)
                });
            ! function(e) {
                e.MinCheer = "sponsored-campaign-minimum-cheer", e.OverBitsTotal = "sponsored-campaign-over-total", e.CannotBeSponsored = "sponsored-campaign-cannot-be-sponsored", e.OverUserLimit = "sponsored-campaign-over-user-limit"
            }(k || (k = {}));
            var V, W = function(e) {
                    var t = 0;
                    if (e.prefixes.forEach(function(n) {
                            n.alt === e.sponsoredCampaignPrefix && n.cheerAmount && (t += n.cheerAmount)
                        }), t <= 0) return null;
                    if (t < e.sponsoredCampaign.minimumBitsAmount) {
                        var n = Object(c.d)("This Cheermote has a minimum of {minBits} Bits for {brand} to add extra Bits.", {
                            minBits: e.sponsoredCampaign.minimumBitsAmount,
                            brand: e.sponsoredCampaign.brandName
                        }, "Bits--PendingCheer");
                        return s.createElement(b.W, {
                            "data-test-selector": k.MinCheer,
                            color: b.O.Error
                        }, n)
                    }
                    if (e.sponsoredBitsBonus + e.sponsoredCampaign.bitsUsed > e.sponsoredCampaign.bitsTotal) {
                        n = Object(c.d)("Not enough bits from the sponsored pool to support your cheer with the {brand} Cheermote.", {
                            brand: e.sponsoredCampaign.brandName
                        }, "Bits--PendingCheer");
                        return s.createElement(b.W, {
                            "data-test-selector": k.OverBitsTotal,
                            color: b.O.Error
                        }, n)
                    }
                    if (e.sponsoredCampaign.self) {
                        if (!e.sponsoredCampaign.self.canBeSponsored) {
                            n = Object(c.d)("You are not eligible to use the {brand} Cheermote.", {
                                brand: e.sponsoredCampaign.brandName
                            }, "Bits--PendingCheer");
                            return s.createElement(b.W, {
                                "data-test-selector": k.CannotBeSponsored,
                                color: b.O.Error
                            }, n)
                        }
                        if (e.sponsoredCampaign.self.bitsUsed + e.sponsoredBitsBonus > e.sponsoredCampaign.userLimit) {
                            n = Object(c.d)("You have reached the user limit for use of the {brand} Cheermote.", {
                                brand: e.sponsoredCampaign.brandName
                            }, "Bits--PendingCheer");
                            return s.createElement(b.W, {
                                "data-test-selector": k.OverUserLimit,
                                color: b.O.Error
                            }, n)
                        }
                    }
                    return null
                },
                H = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return this.props.event, null
                    }, t
                }(s.Component),
                G = n("XmgI"),
                Y = (n("H0r1"), (V = {})[g.P.USER_BANNED] = "user-banned-selector", V[g.P.USER_INELIGIBLE] = "user-ineligible-selector", V[g.P.USER_SUSPENDED] = "user-suspended-selector", V[g.P.CHANNEL_INELIGIBLE] = "channel-ineligible-selector", V[g.P.ZALGO_MESSAGE] = "zalgo-message-selector", V[g.P.CHANNEL_BLOCKED_TERMS] = "channel-blocked-terms-selector", V[g.P.INVALID_EVENT_ID] = "invalid-event-id-selector", V[g.P.REQUEST_THROTTLED] = "request-throttled-selector", V[g.P.UNKNOWN] = "unknown-selector", V),
                z = function(e) {
                    var t;
                    if (e.prefixes && 1 === e.prefixes.length) {
                        var n = e.prefixes[0].alt;
                        n && (t = s.createElement(b.Ya, {
                            padding: {
                                top: 2
                            }
                        }, s.createElement(x.a, {
                            prefix: n,
                            amount: e.amount > w.p ? w.p : e.amount,
                            bitsConfig: e.bitsConfig,
                            showImage: !0,
                            showAmount: !0
                        })))
                    } else if (e.prefixes) t = s.createElement(b.Ya, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(P.b, {
                        className: "pending-cheer__scroll-container"
                    }, s.createElement(B, {
                        prefixes: e.prefixes,
                        bitsConfig: e.bitsConfig
                    })));
                    else {
                        var i = Object(c.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                            totalBits: s.createElement("strong", null, e.amount),
                            channelName: e.channelDisplayName
                        }, "Bits--PendingCheer");
                        t = s.createElement(b.Ya, {
                            "data-test-selector": "default-pending-cheer-message-selector",
                            padding: {
                                top: 2,
                                x: 5
                            }
                        }, s.createElement(b.W, {
                            color: b.O.Alt2,
                            "data-a-target": "total-bits-message"
                        }, i))
                    }
                    var r = null;
                    e.prefixes && e.sponsoredCampaign && e.sponsoredCampaignPrefix && (r = s.createElement(W, {
                        prefixes: e.prefixes,
                        sponsoredCampaign: e.sponsoredCampaign,
                        sponsoredCampaignPrefix: e.sponsoredCampaignPrefix,
                        sponsoredBitsBonus: e.sponsoredBitsBonus
                    }));
                    var a = function(e) {
                            if (e.smallestCheermote < e.minPerEmote || e.bitsSendHasError && e.bitsSendErrorCode === g.P.EMOTE_AMOUNT_BELOW_MIN_BITS) {
                                var t = Object(c.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                                    minPerEmote: e.minPerEmote
                                }, "Bits--PendingCheer");
                                return s.createElement(b.W, {
                                    "data-test-selector": "minimum-cheermote-selector",
                                    color: b.O.Error,
                                    italic: !0,
                                    "data-a-target": "min-emote-bits-error"
                                }, t)
                            }
                            if (e.chatMessage && e.chatMessage.length > w.o || e.bitsSendHasError && e.bitsSendErrorCode === g.P.MESSAGE_LENGTH_EXCEEDED) {
                                var n = Object(c.d)("You have exceeded the maximum number of characters you can use in your cheer.", "Bits--PendingCheer");
                                return s.createElement(b.W, {
                                    "data-test-selector": "message-length-exceeded-selector",
                                    color: b.O.Error,
                                    italic: !0
                                }, n)
                            }
                            if (e.bitsSendHasError) {
                                var i = Y[e.bitsSendErrorCode] || Y[g.P.UNKNOWN],
                                    r = void 0;
                                switch (e.bitsSendErrorCode) {
                                    case g.P.ZALGO_MESSAGE:
                                        r = Object(c.d)("You have unsupported characters in your message, please remove them and try again.", "Bits--PendingCheer");
                                        break;
                                    case g.P.USER_BANNED:
                                    case g.P.USER_INELIGIBLE:
                                    case g.P.USER_SUSPENDED:
                                    case g.P.CHANNEL_INELIGIBLE:
                                        r = Object(c.d)("Sorry, you are unable to send bits in this channel at this time.", "Bits--PendingCheer");
                                        break;
                                    case g.P.CHANNEL_BLOCKED_TERMS:
                                        r = Object(c.d)("You have blocked words in your message, please remove them and try again.", "Bits--PendingCheer");
                                        break;
                                    case g.P.INVALID_EVENT_ID:
                                    case g.P.REQUEST_THROTTLED:
                                    case g.P.UNKNOWN:
                                    default:
                                        r = Object(c.d)("Something went wrong when processing your cheer, please try again later.", "Bits--PendingCheer")
                                }
                                return s.createElement(b.W, {
                                    "data-test-selector": i,
                                    color: b.O.Error,
                                    italic: !0
                                }, r)
                            }
                            return null
                        }(e),
                        o = function(e) {
                            if (e.largestCheermote > w.p || e.bitsSendHasError && e.bitsSendErrorCode === g.P.TOO_LARGE_BITS_EMOTE) {
                                var t = Object(c.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                                    maximumCheerSize: w.p
                                }, "Bits--PendingCheer");
                                return s.createElement(b.W, {
                                    "data-test-selector": "largest-cheermote-selector",
                                    "data-a-target": "max-cheer-bits-error"
                                }, t)
                            }
                            if (0 === e.bitsBalance) return s.createElement(b.W, {
                                "data-test-selector": "zero-balance-selector",
                                "data-a-target": "zero-bits-error"
                            }, Object(c.d)("Please get Bits. You have 0 Bits and cannot send a Cheer", "Bits--PendingCheer"));
                            if (e.bitsBalance && e.amount > e.bitsBalance) return s.createElement(b.W, {
                                "data-test-selector": "purchase-more-selector",
                                "data-a-target": "need-more-bits-error"
                            }, Object(c.d)("Please purchase {neededBits} more Bits to Cheer", {
                                neededBits: e.amount - e.bitsBalance
                            }, "Bits--PendingCheer"));
                            if (e.amount < e.minToCheer || e.bitsSendHasError && e.bitsSendErrorCode === g.P.AMOUNT_BELOW_MIN_BITS) {
                                var n = Object(c.d)("Add {moreBitsAmount} more Bits to reach this channel's minimum Cheer.", {
                                    moreBitsAmount: e.minToCheer - e.amount
                                }, "Bits--PendingCheer");
                                return s.createElement(b.W, {
                                    "data-test-selector": "minimum-cheer-selector",
                                    "data-a-target": "min-cheer-bits-error"
                                }, n)
                            }
                            if (e.amount > w.q || e.bitsSendHasError && e.bitsSendErrorCode === g.P.TOO_LARGE_CHEER) {
                                var i = Object(c.d)("{maximumCheerSize} is the maximum amount of Bits you can send in one message, send multiple messages if you want to Cheer more!", {
                                    maximumCheerSize: w.q
                                }, "Bits--PendingCheer");
                                return s.createElement(b.W, {
                                    "data-test-selector": "minimum-cheer-selector",
                                    "data-a-target": "max-message-bits-error"
                                }, i)
                            }
                            if (e.chatMessage && Object(G.c)(e.chatMessage, e.bitsConfig)) {
                                var r = Object(c.d)("message contains at least one display only Cheermote.", "Bits--PendingCheer");
                                return s.createElement(b.W, {
                                    "data-test-selector": "display-only-cheermote-selector",
                                    "data-a-target": "display-only-bits-error"
                                }, r)
                            }
                            return null
                        }(e),
                        l = s.createElement(x.a, {
                            amount: e.amount + e.bonusBits,
                            prefix: w.l,
                            bitsConfig: e.bitsConfig,
                            display: b.X.Inline,
                            showImage: !1,
                            showAmount: !0,
                            size: x.b.Medium
                        });
                    return s.createElement(b.Ya, null, s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Column,
                        alignItems: b.f.Center,
                        padding: 1,
                        className: "pending-cheer"
                    }, s.createElement(b.W, {
                        fontSize: b.Ca.Size4,
                        bold: !0
                    }, Object(c.d)("Cheering {totalBits} Bits", {
                        totalBits: l
                    }, "Bits--PendingCheer")), !a && t, !a && !o && r && s.createElement(b.Ya, {
                        padding: {
                            top: 1
                        }
                    }, r), !a && o && s.createElement(b.Fb, {
                        padding: {
                            top: 1
                        },
                        color: b.O.Error
                    }, o), a && s.createElement(b.Ya, {
                        padding: {
                            top: 3,
                            x: 3
                        }
                    }, a)), !a && !o && s.createElement(H, {
                        event: e.event,
                        amount: e.amount,
                        "data-test-selector": "event-reminder-selector"
                    }))
                },
                q = n("x1M1"),
                X = (n("zmH+"), {
                    themed: !0,
                    dark: {
                        "1x": w.b + "/dark/animated/promo/intro.gif"
                    },
                    light: {
                        "1x": w.b + "/light/animated/promo/intro.gif"
                    }
                }),
                Q = function() {
                    return s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Column,
                        alignItems: b.f.Center,
                        justifyContent: b.Xa.Center,
                        flexGrow: 1,
                        className: "bits-sending"
                    }, s.createElement(b.Ya, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(q.a, {
                        sources: X
                    })), s.createElement(b.W, {
                        italic: !0
                    }, Object(c.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
                };

            function K(e) {
                var t = {
                    maximumFractionDigits: 1
                };
                return e < 1e4 ? Object(c.f)(e, t) : e < 1e5 ? Object(c.g)(100 * Math.floor(e / 100), t) : e < 1e6 ? Object(c.g)(1e3 * Math.floor(e / 1e3), t) : Object(c.g)(1e5 * Math.floor(e / 1e5), t)
            }
            n("Yr1V");
            var $, J = function(e) {
                    var t = K(e.sponsorCampaign.bitsTotal - e.sponsorCampaign.bitsUsed),
                        n = K(e.sponsorCampaign.bitsTotal);
                    return s.createElement(b.Fb, {
                        background: b.r.AccentAlt2,
                        color: b.O.Overlay,
                        display: b.X.Flex,
                        flexGrow: 1,
                        flexDirection: b.Aa.Column,
                        position: b.kb.Relative,
                        justifyContent: b.Xa.Center,
                        alignItems: b.f.Center,
                        padding: 1
                    }, s.createElement(b.Ya, {
                        padding: {
                            top: 1,
                            bottom: 1
                        }
                    }, s.createElement(b.W, {
                        type: b.Wb.H5,
                        bold: !0
                    }, Object(c.d)("Give more Bits to this streamer!", "Bits--SponsorIntro"))), s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Row,
                        fullWidth: !0,
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(b.Qa, {
                        padding: {
                            right: 1
                        }
                    }, s.createElement(b.S, {
                        src: e.sponsorCampaign.brandImageURL,
                        alt: e.sponsorCampaign.brandName
                    })), s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Column,
                        flexGrow: 1
                    }, s.createElement(b.Qa, {
                        alignSelf: b.g.Baseline
                    }, s.createElement(b.W, null, Object(c.d)("{brandName} Bits", {
                        brandName: e.sponsorCampaign.brandName
                    }, "Bits--SponsorIntro"))), s.createElement(b.nb, {
                        value: e.sponsorCampaign.bitsPercentageRemaining,
                        mask: !0
                    }), s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Row,
                        justifyContent: b.Xa.Between
                    }, s.createElement(b.W, {
                        fontSize: b.Ca.Size7
                    }, Object(c.d)("{bitsRemaining} Remiaining", {
                        bitsRemaining: t
                    }, "Bits--SponsorIntro")), s.createElement(b.W, {
                        fontSize: b.Ca.Size7
                    }, Object(c.d)("{totalBits}", {
                        totalBits: n
                    }, "Bits--SponsorIntro"))))), s.createElement(b.W, {
                        fontSize: b.Ca.Size7
                    }, Object(c.d)("The {brandName} Cheermote gives {sponsorPercentage}% bonus Bits when you Cheer {minimumSponsorBits} or more!", {
                        minimumSponsorBits: e.sponsorCampaign.thresholds[0].minimumBits,
                        brandName: e.sponsorCampaign.brandName,
                        sponsorPercentage: 100 * e.sponsorCampaign.thresholds[0].matchedPercent
                    }, "Bits--SponsorIntro"), s.createElement(b.U, {
                        type: b.V.Overlay,
                        to: "https://www.twitch.tv/"
                    }, Object(c.d)(" Details", "Bits--SponsorIntro"))), s.createElement(b.Fb, {
                        background: b.r.AccentAlt2,
                        position: b.kb.Absolute,
                        className: "sponsored-cheermote__tail"
                    }))
                },
                Z = (n("u0cu"), function(e) {
                    var t = Object(c.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                            totalBits: e.totalBits,
                            channelName: e.channelDisplayName
                        }, "Bits--UndoPrompt"),
                        n = null;
                    if (e.prefixes && e.prefixes.length > 1) n = s.createElement(P.b, {
                        className: "bits-undo-prompt__scroll-container"
                    }, s.createElement(b.Ya, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(B, {
                        prefixes: e.prefixes,
                        bitsConfig: e.bitsConfig
                    })));
                    else {
                        var i = e.prefixes[0].alt;
                        i && (n = s.createElement(b.Ya, {
                            padding: {
                                bottom: 1
                            }
                        }, s.createElement(x.a, {
                            prefix: i,
                            amount: e.totalBits,
                            bitsConfig: e.bitsConfig,
                            showAmount: !0,
                            showImage: !0
                        })))
                    }
                    return s.createElement(b.Ya, {
                        display: b.X.Flex,
                        flexDirection: b.Aa.Column,
                        alignItems: b.f.Center,
                        justifyContent: b.Xa.Center,
                        flexGrow: 1,
                        padding: 1,
                        className: "bits-undo-prompt"
                    }, n, s.createElement(b.W, null, t))
                }),
                ee = function() {
                    return s.createElement(b.Ya, {
                        className: "hgg-2018-introduction"
                    }, s.createElement(b.Ya, {
                        padding: {
                            top: 1
                        }
                    }, s.createElement(b.W, {
                        fontSize: b.Ca.Size5,
                        bold: !0
                    }, Object(c.d)("Cheer with Bits and unlock loot!", "HGG2018Introduction"))), s.createElement(b.Ya, {
                        fullWidth: !0,
                        display: b.X.Flex,
                        flexDirection: b.Aa.Column,
                        alignContent: b.e.Stretch
                    }, s.createElement(b.S, {
                        className: "hgg-2018-introduction__banner-image",
                        src: w.c + "/hearthstone2018/marketing/bitscardbanner.png",
                        srcSet: {
                            "2x": w.c + "/hearthstone2018/marketing/bitscardbanner.png"
                        },
                        alt: Object(c.d)("Hearthstone Global Games", "HGG2018Introduction")
                    })), s.createElement(b.Ya, {
                        padding: {
                            x: 2,
                            top: 1,
                            bottom: .5
                        }
                    }, s.createElement(b.W, null, Object(c.d)("Unlock in-game loot and Twitch emotes when you Cheer with Bits to support your favorite team.", "HGG2018Introduction"))), s.createElement(b.Ya, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(b.U, {
                        to: "https://watch.twitch.tv/HGGCheer",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, Object(c.d)("Details", "HGG2018Introduction"))))
                },
                te = (n("qKeE"), function() {
                    return s.createElement(b.Ya, {
                        className: "hgc-2018-introduction"
                    }, s.createElement(b.Ya, {
                        padding: {
                            top: 2,
                            bottom: 1
                        }
                    }, s.createElement(b.W, {
                        fontSize: b.Ca.Size5,
                        bold: !0
                    }, Object(c.d)("Cheer with Bits and unlock loot!", "HGC2018Introduction"))), s.createElement(b.Ya, {
                        className: "hgc-2018-introduction__banner-background",
                        padding: {
                            top: 1
                        }
                    }, s.createElement(b.Qa, {
                        position: b.kb.Absolute,
                        attachRight: !0,
                        attachLeft: !0,
                        margin: "auto"
                    }, s.createElement(b.S, {
                        className: "hgc-2018-introduction__banner-image",
                        src: w.c + "/hgc2018/hgc-logo/1x.png",
                        srcSet: {
                            "2x": w.c + "/hgc2018/hgc-logo/2x.png"
                        },
                        alt: Object(c.d)("Heroes of the Storm Global Championship", "HGC2018Introduction")
                    }))), s.createElement(b.Ya, {
                        padding: {
                            x: 2,
                            top: 1,
                            bottom: .5
                        }
                    }, s.createElement(b.W, null, Object(c.d)("Unlock in-game loot and Twitch emotes when you Cheer with Bits to support your favorite team.", "HGC2018Introduction"))), s.createElement(b.Ya, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(b.U, {
                        to: "https://link.twitch.tv/hgccheer2018",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, Object(c.d)("Details", "HGC2018Introduction"))))
                }),
                ne = (n("TTKc"), function() {
                    return s.createElement(b.Ya, {
                        className: "owl-2018-introduction"
                    }, s.createElement(b.Ya, {
                        padding: {
                            top: 2,
                            bottom: 1
                        }
                    }, s.createElement(b.W, {
                        fontSize: b.Ca.Size5,
                        bold: !0
                    }, Object(c.d)("Cheer with Bits and unlock loot!", "OWL2018Introduction"))), s.createElement(b.Ya, {
                        className: "owl-2018-introduction__banner-background",
                        padding: {
                            top: 1
                        }
                    }, s.createElement("img", {
                        className: "owl-2018-introduction__banner-image",
                        src: w.c + "/owl-2017/overwatch-wide.png"
                    })), s.createElement(b.Ya, {
                        padding: {
                            x: 2,
                            top: 1,
                            bottom: .5
                        }
                    }, s.createElement(b.W, null, Object(c.d)("Unlock an emote set by cheering 250 Bits or more! Cheer 500 Bits or more and you’ll unlock a second set and share emotes with Chat!", "OWL2018Introduction"))), s.createElement(b.Ya, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(b.U, {
                        to: "http://link.twitch.tv/owl-drops-onsite-bitscard-blogus",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, Object(c.d)("Details", "OWL2018Introduction"))))
                });
            ! function(e) {
                e.CratesChristmas = "CratesChristmas", e.OWL2018 = "owl2018", e.HGC2018 = "hgc2018", e.WORLDCUP2018 = "worldcup2018", e.HGG2018 = "hearthstone2018", e.HGG2018TEST = "hearthstone2018-test"
            }($ || ($ = {}));
            var ie = function(e) {
                    switch (e.event) {
                        case $.HGC2018:
                            return s.createElement(te, null);
                        case $.OWL2018:
                            return s.createElement(ne, null);
                        case $.HGG2018:
                        case $.HGG2018TEST:
                            return s.createElement(ee, null);
                        default:
                            return s.createElement(j, {
                                onClickHelp: e.onClickHelp
                            })
                    }
                },
                re = function(e) {
                    if (e.isSending) return e.totalBits < w.r ? s.createElement(Q, null) : s.createElement(Z, {
                        bitsConfig: e.bitsConfig,
                        channelDisplayName: e.displayName,
                        prefixes: e.currentCheers,
                        totalBits: e.totalBits
                    });
                    if (e.hoveredCheermote) return s.createElement(A, {
                        event: e.event,
                        tournament: e.tournament,
                        bitsConfig: e.bitsConfig,
                        prefix: e.hoveredCheermote,
                        tier: e.hoveredTier
                    });
                    var t = function(e) {
                            var t = null;
                            return e.orderedActions.forEach(function(e) {
                                e.campaign && (t = e.campaign)
                            }), t
                        }(e.bitsConfig),
                        n = function(e) {
                            var t = "";
                            return e.orderedActions.forEach(function(e) {
                                e.campaign && (t = e.prefix)
                            }), t
                        }(e.bitsConfig),
                        i = c.b.get(w.u, R.a.Off);
                    if (e.totalBits) return s.createElement(z, {
                        bitsConfig: e.bitsConfig,
                        prefixes: e.currentCheers,
                        amount: e.totalBits,
                        bonusBits: e.bonusBits,
                        channelDisplayName: e.displayName,
                        bitsBalance: e.bitsBalance,
                        largestCheermote: e.largestCheermote,
                        smallestCheermote: e.smallestCheermote,
                        minPerEmote: e.emoteMinimumBits,
                        minToCheer: e.cheerMinimumBits,
                        event: e.event,
                        sponsoredCampaign: t,
                        sponsoredCampaignPrefix: n,
                        sponsoredBitsBonus: e.bonusBits,
                        bitsSendErrorCode: e.bitsSendErrorCode,
                        bitsSendHasError: e.bitsSendHasError,
                        chatMessage: e.chatMessage
                    });
                    if (e.helpRequested) return s.createElement(F.a, null);
                    var r = c.b.get(w.d, R.a.Off);
                    if (e.chosenCheermote) {
                        var a = e.cheerMinimumBits;
                        return s.createElement(U, {
                            minToCheer: a
                        })
                    }
                    return e.event ? s.createElement(ie, {
                        event: e.event,
                        onClickHelp: e.showHelp,
                        channelID: e.channelID
                    }) : t && (i === R.a.On || i === R.a.StaffOnly && e.isStaff) ? s.createElement(J, {
                        sponsorCampaign: t
                    }) : r === R.a.On ? s.createElement(L, {
                        onClickHelp: e.showHelp
                    }) : s.createElement(j, {
                        onClickHelp: e.showHelp
                    })
                };
            var ae = n("XDQu"),
                oe = n("8/mp"),
                se = (n("AcdH"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleCheermoteHover = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onHover(n)
                        }, t.handleCheermoteUnhover = function() {
                            t.props.onHoverLeave()
                        }, t.handleCheermoteClick = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onClick(n)
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.bitsConfig.orderedActions.filter(function(e) {
                                return e.type !== w.h && e.type !== w.f
                            }).map(function(e) {
                                var t = e.indexedTiers.get(w.m);
                                return t ? {
                                    imgSrc: t.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: t.indexedImages.DARK.static.get(2),
                                    key: e.prefix
                                } : null
                            }).map(function(t, n) {
                                return t && t.key ? s.createElement(b.Qa, {
                                    key: t.key,
                                    margin: {
                                        bottom: 1
                                    }
                                }, s.createElement("li", {
                                    className: "cheermote-prefix-selector__cheermote"
                                }, s.createElement("button", {
                                    className: "cheermote-prefix-selector__item-button",
                                    "data-key": t.key,
                                    onMouseEnter: e.handleCheermoteHover,
                                    onMouseLeave: e.handleCheermoteUnhover,
                                    onClick: e.handleCheermoteClick,
                                    "data-a-target": "cheermote-" + t.key.replace(":", "")
                                }, s.createElement("img", {
                                    alt: t.key,
                                    src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                                })))) : s.createElement("li", {
                                    key: "null-cheermote-" + n
                                }, s.createElement("button", {
                                    className: "cheermote-prefix-selector__item-button",
                                    disabled: !0
                                }, s.createElement("div", {
                                    className: "cheermote-prefix-selector__placeholder"
                                })))
                            }),
                            n = s.createElement(b.Qa, {
                                className: "cheermote-prefix-selector__cheermotes",
                                display: b.X.Flex,
                                flexWrap: b.Ba.Wrap,
                                flexDirection: b.Aa.Row,
                                justifyContent: b.Xa.Start,
                                alignItems: b.f.End,
                                padding: {
                                    bottom: 1
                                }
                            }, s.createElement("ul", null, t));
                        return s.createElement(b.Ya, {
                            flexGrow: 1,
                            overflow: b.db.Hidden,
                            className: "cheermote-prefix-selector"
                        }, s.createElement(oe.b, null, n))
                    }, t
                }(s.PureComponent));
            var le = Object(r.connect)(function(e) {
                    return {
                        darkModeEnabled: Object(ae.a)(e) === N.a.Dark
                    }
                })(se),
                ce = (n("ECxT"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleCheermoteHover = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onHover(n)
                        }, t.handleCheermoteUnhover = function() {
                            t.props.onHoverLeave()
                        }, t.handleCheermoteClick = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onClick(n)
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.bitsConfig.indexedActions[this.props.chosenCheermote.toLowerCase()],
                            n = t.orderedTiers.filter(function(e) {
                                return e.canCheer && e.canShowInBitsCard
                            }).map(function(e) {
                                return {
                                    imgSrc: e.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: e.indexedImages.DARK.static.get(2),
                                    key: t.prefix + ":" + e.bits
                                }
                            }).reverse().map(function(t, n) {
                                return t && t.key ? s.createElement("li", {
                                    key: t.key,
                                    className: "cheermote-tier-selector__cheermote"
                                }, s.createElement("button", {
                                    className: "cheermote-tier-selector__item-button",
                                    "data-key": t.key,
                                    onMouseEnter: e.handleCheermoteHover,
                                    onMouseLeave: e.handleCheermoteUnhover,
                                    onClick: e.handleCheermoteClick,
                                    "data-a-target": "cheermote-" + t.key.replace(":", "")
                                }, s.createElement("img", {
                                    alt: t.key,
                                    src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                                })), s.createElement(x.a, {
                                    bitsConfig: e.props.bitsConfig,
                                    prefix: "",
                                    amount: +t.key.split(":")[1],
                                    showImage: !1,
                                    showAmount: !0,
                                    size: x.b.Small
                                })) : s.createElement("li", {
                                    key: "null-cheermote-" + n
                                }, s.createElement("button", {
                                    className: "cheermote-tier-selector__item-button",
                                    disabled: !0
                                }, s.createElement("div", {
                                    className: "cheermote-tier-selector__placeholder"
                                })))
                            }),
                            i = s.createElement(b.Ya, {
                                padding: {
                                    right: 2
                                },
                                fullWidth: !0,
                                className: "cheermote-tier-selector__back-button"
                            }, s.createElement(b.z, {
                                "data-a-target": "bits-card-back-button",
                                type: b.F.Text,
                                fullWidth: !0,
                                onClick: this.props.onClose
                            }, Object(c.d)("Show All Cheermotes", "CheermoteCarousel"))),
                            r = s.createElement(b.Qa, {
                                className: "cheermote-tier-selector__cheermotes",
                                display: b.X.Flex,
                                flexWrap: b.Ba.Wrap,
                                flexDirection: b.Aa.Row,
                                justifyContent: b.Xa.Between,
                                alignItems: b.f.End,
                                padding: {
                                    bottom: 1
                                }
                            }, s.createElement("ul", null, n, i));
                        return s.createElement(b.Ya, {
                            flexGrow: 1,
                            overflow: b.db.Hidden,
                            className: "cheermote-tier-selector"
                        }, r)
                    }, t
                }(s.PureComponent));
            var de = Object(r.connect)(function(e) {
                    return {
                        darkModeEnabled: Object(ae.a)(e) === N.a.Dark
                    }
                })(ce),
                ue = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return this.props.helpRequested && !this.props.currentCheers.length ? null : this.props.chosenCheermote ? s.createElement(de, {
                            bitsConfig: this.props.bitsConfig,
                            chosenCheermote: this.props.chosenCheermote,
                            onHover: this.props.handleTierHover,
                            onHoverLeave: this.props.handleUnhover,
                            onClick: this.props.handleTierClick,
                            onClose: this.props.clearChosenCheermote
                        }) : s.createElement(le, {
                            bitsConfig: this.props.bitsConfig,
                            onHover: this.props.handleCheermoteHover,
                            onHoverLeave: this.props.handleUnhover,
                            onClick: this.props.handleCheermoteClick
                        })
                    }, t
                }(s.PureComponent),
                pe = n("ebRM"),
                me = n("RiD7"),
                he = n("UajW"),
                ge = (n("c+1r"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            totalBits: 0,
                            bonusBits: 0,
                            largestCheermote: 0,
                            smallestCheermote: 0
                        }, t.unhoverTimeout = 0, t.handleTierHover = function(e) {
                            clearTimeout(t.unhoverTimeout);
                            var n = e.split(":");
                            n.length < 2 || (t.setState({
                                hoveredTier: +n[1],
                                hoveredCheermote: n[0]
                            }), t.props.trackBitsCardInteraction(me.a.PreviewEmote, {
                                emoteType: n[0],
                                emoteLevel: +n[1]
                            }))
                        }, t.handleUnhover = function() {
                            t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                        }, t.clearHovered = function() {
                            t.setState({
                                hoveredTier: 0,
                                hoveredCheermote: null
                            })
                        }, t.handleTierClick = function(e) {
                            t.props.onClickCheermote(e.split(":").join(""))
                        }, t.handleCheermoteHover = function(e) {
                            clearTimeout(t.unhoverTimeout), t.setState({
                                hoveredCheermote: e,
                                hoveredTier: 0
                            }), t.props.trackBitsCardInteraction(me.a.PreviewEmote, {
                                emoteType: e,
                                emoteLevel: 100
                            })
                        }, t.handleCheermoteClick = function(e) {
                            t.setState({
                                chosenCheermote: e,
                                hoveredCheermote: null,
                                hoveredTier: 0
                            })
                        }, t.clearChosenCheermote = function() {
                            t.setState({
                                chosenCheermote: null,
                                hoveredCheermote: null,
                                hoveredTier: 0
                            })
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        var t = this.props.visible || !!this.props.currentCheers.length,
                            n = e.visible || !!e.currentCheers.length;
                        if (t && !n && this.setState({
                                chosenCheermote: null,
                                hoveredCheermote: null,
                                hoveredTier: 0
                            }), this.props.currentCheers !== e.currentCheers) {
                            var i = Object(pe.a)(e.currentCheers),
                                r = i.total,
                                a = i.bonus,
                                o = i.largestCheermote,
                                s = i.smallestCheermote;
                            this.setState({
                                totalBits: r,
                                bonusBits: a,
                                largestCheermote: o,
                                smallestCheermote: s
                            })
                        }
                    }, t.prototype.componentDidMount = function() {
                        var e = Object(pe.a)(this.props.currentCheers),
                            t = e.total,
                            n = e.bonus,
                            i = e.largestCheermote,
                            r = e.smallestCheermote;
                        this.setState({
                            totalBits: t,
                            bonusBits: n,
                            largestCheermote: i,
                            smallestCheermote: r
                        }), this.props.onMount && this.props.onMount()
                    }, t.prototype.render = function() {
                        var e = this.props,
                            t = e.cheerMessageAutoModded,
                            n = e.visible,
                            i = e.currentCheers,
                            r = e.data,
                            a = e.bitsConfig,
                            o = e.isSending,
                            l = e.helpRequested,
                            d = e.channelID,
                            u = e.showHelp,
                            p = e.isStaff,
                            m = e.bitsSendErrorCode,
                            h = e.bitsSendHasError,
                            g = e.handleClickBuy,
                            f = e.onCancelSend,
                            v = e.onConfirmSend,
                            k = e.chatMessage;
                        if (t || !n && !i.length) return null;
                        if (!r || r.loading) return s.createElement(E.a, null);
                        if (r.error || !a) return s.createElement(S, null);
                        var y, C = this.props.helpRequested && !this.props.currentCheers.length,
                            N = null;
                        return r.user.cheer.settings.event && (N = r.user.cheer.settings.event.toLowerCase().replace("_", "-")), C && (y = s.createElement(b.Ya, {
                            position: b.kb.Absolute,
                            padding: {
                                left: .5,
                                top: .5
                            },
                            attachLeft: !0,
                            attachTop: !0
                        }, s.createElement(b.z, {
                            onClick: this.props.closeHelp,
                            "data-a-target": "bits-card-back-button",
                            icon: b.ub.ChatSettingsBack,
                            type: b.F.Text,
                            size: b.D.Small
                        }, Object(c.d)("Back", "BitsCard")))), s.createElement(s.Fragment, null, !o && y, s.createElement(b.Fb, {
                            className: "t-bits-card__contents",
                            display: b.X.Flex,
                            flexGrow: 0,
                            flexDirection: b.Aa.Column,
                            alignContent: b.e.Stretch,
                            textAlign: b.Sb.Center,
                            borderBottom: !o,
                            fullWidth: !0
                        }, s.createElement(re, {
                            bitsBalance: r.currentUser && r.currentUser.bitsBalance,
                            bitsConfig: a,
                            cheerMinimumBits: r.user.cheer.settings.cheerMinimumBits,
                            chosenCheermote: this.state.chosenCheermote,
                            currentCheers: i,
                            displayName: r.user.displayName,
                            emoteMinimumBits: r.user.cheer.settings.emoteMinimumBits,
                            event: N,
                            helpRequested: l,
                            hoveredCheermote: this.state.hoveredCheermote,
                            hoveredTier: this.state.hoveredTier,
                            isSending: o,
                            largestCheermote: this.state.largestCheermote,
                            smallestCheermote: this.state.smallestCheermote,
                            totalBits: this.state.totalBits,
                            bonusBits: this.state.bonusBits,
                            tournament: r.user.tournament,
                            channelID: d,
                            showHelp: u,
                            isStaff: p,
                            bitsSendErrorCode: m,
                            bitsSendHasError: h,
                            chatMessage: k
                        })), !o && s.createElement(ue, {
                            bitsConfig: a,
                            chosenCheermote: this.state.chosenCheermote,
                            currentCheers: i,
                            eventString: N,
                            helpRequested: l,
                            handleCheermoteClick: this.handleCheermoteClick,
                            handleCheermoteHover: this.handleCheermoteHover,
                            handleTierClick: this.handleTierClick,
                            handleTierHover: this.handleTierHover,
                            handleUnhover: this.handleUnhover,
                            clearChosenCheermote: this.clearChosenCheermote
                        }), s.createElement(b.Ya, {
                            className: "t-bits-card__footer",
                            fullWidth: !0,
                            display: b.X.Flex
                        }, s.createElement(M, {
                            bitsBalance: r.currentUser && r.currentUser.bitsBalance,
                            bitsConfig: a,
                            event: N,
                            isSending: o,
                            totalBits: this.state.totalBits,
                            userSelfBitsBadge: r.user.self && r.user.self.bitsBadge,
                            handleClickBuy: g,
                            onCancelSend: f,
                            onConfirmSend: v
                        })))
                    }, t
                }(s.Component)),
                fe = Object(l.compose)(Object(u.a)(function(e) {
                    return {
                        query: he,
                        variables: {
                            name: e.channelID
                        },
                        topic: Object(h.d)(e.channelID),
                        type: p.PubsubMessageType.BitsChannelSettingsEvent,
                        mutator: function(e, t) {
                            if (t) return void 0 !== e.updates.minimum_bits && (t.user.cheer.settings.cheerMinimumBits = e.updates.minimum_bits), void 0 !== e.updates.minimum_bits_emote && (t.user.cheer.settings.emoteMinimumBits = e.updates.minimum_bits_emote), t
                        }
                    }
                }), Object(d.a)(he, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                name: e.channelID,
                                withCheerBombEventEnabled: !1
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }))(ge),
                ve = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return s.createElement(b.Ya, {
                            padding: 1,
                            textAlign: b.Sb.Center
                        }, s.createElement(b.W, {
                            color: b.O.Error,
                            italic: !0
                        }, Object(c.d)("You cannot Cheer in your own channel.", "BitsCard")))
                    }, t
                }(s.PureComponent),
                be = n("opIq"),
                ke = n("bYOw"),
                ye = n("H31v"),
                Ce = n("8nkl"),
                Se = n("ao1a"),
                Ee = n("Gcqi"),
                Ne = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            helpRequested: !1,
                            buyingBits: !1,
                            backTargetsIntro: !1
                        }, t.lastRefetchTime = 0, t.showHelp = function(e) {
                            e.preventDefault(), t.setState({
                                helpRequested: !0
                            }), t.props.trackBitsCardInteraction(me.a.NewUserHelpRequested)
                        }, t.closeHelp = function() {
                            return t.setState({
                                helpRequested: !1
                            })
                        }, t.handleClickBuy = function() {
                            t.setState({
                                buyingBits: !0
                            }), t.props.trackBitsCardInteraction(me.a.BuyMain)
                        }, t.handleCloseBuy = function() {
                            return t.setState({
                                buyingBits: !1
                            })
                        }, t.handleSkip = function() {
                            t.closeHelp(), t.mutateFirstCheerTutorialState({
                                hasAbandoned: !1,
                                hasSkipped: !0
                            }), t.props.trackBitsCardInteraction(me.a.NewUserSkipTutorial)
                        }, t.handleCloseIntro = function() {
                            t.closeHelp(), t.props.currentCheers.length ? t.mutateFirstCheerTutorialState({
                                hasAbandoned: !1,
                                hasSkipped: !0
                            }) : t.props.onUserClose(), t.props.trackBitsCardInteraction(me.a.NewUserCloseTutorial)
                        }, t.handleClickFirstTimePurchaseDiscount = function() {
                            t.setState({
                                buyingBits: !0,
                                helpRequested: !1,
                                backTargetsIntro: !0
                            }), t.mutateFirstCheerTutorialState({
                                hasAbandoned: !0,
                                hasSkipped: !1
                            }), t.props.trackBitsCardInteraction(me.a.NewUserFirstTimePurchaseDiscountClick)
                        }, t.handleBackFromBuy = function() {
                            t.setState({
                                helpRequested: t.state.backTargetsIntro,
                                buyingBits: !1
                            })
                        }, t.onMountBitsCardMain = function() {
                            t.setState({
                                backTargetsIntro: !1
                            })
                        }, t.mutateFirstCheerTutorialState = function(e) {
                            return o.__awaiter(t, void 0, void 0, function() {
                                var t, n, i, r, a, s, l;
                                return o.__generator(this, function(d) {
                                    switch (d.label) {
                                        case 0:
                                            if (!(t = this.props.data && this.props.data.currentUser)) return [3, 4];
                                            n = t.bitsUserSettings, i = t.id, r = n && n.firstCheerTutorial || {
                                                hasAbandoned: !1,
                                                hasSkipped: !1
                                            }, a = {
                                                hasAbandoned: e.hasAbandoned,
                                                hasSkipped: e.hasSkipped
                                            }, s = {
                                                setBitsUserSettings: {
                                                    __typename: "SetBitsUserSettingsPayload",
                                                    currentUser: {
                                                        __typename: "User",
                                                        id: i || null,
                                                        bitsUserSettings: {
                                                            __typename: "BitsUserSettings",
                                                            firstCheerTutorial: o.__assign({
                                                                __typename: "FirstCheerTutorial"
                                                            }, r, a)
                                                        }
                                                    }
                                                }
                                            }, d.label = 1;
                                        case 1:
                                            return d.trys.push([1, 3, , 4]), [4, this.props.setBitsUserSettings(Object(m.b)({
                                                abandonedFirstCheerTutorial: e.hasAbandoned,
                                                skippedFirstCheerTutorial: e.hasSkipped
                                            }, s))];
                                        case 2:
                                            return d.sent(), [3, 4];
                                        case 3:
                                            return l = d.sent(), c.k.error(l, "Failed to set bits user settings."), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        var t = this.props.visible || !!this.props.currentCheers.length,
                            n = e.visible || !!e.currentCheers.length;
                        if (!t && n) {
                            var i = Date.now();
                            i - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = i, e.data.refetch())
                        }
                        t && !n && this.setState({
                            buyingBits: !1
                        })
                    }, t.prototype.render = function() {
                        if (this.props.cheerMessageAutoModded || !this.props.visible && !this.props.currentCheers.length) return null;
                        if (!this.props.data || this.props.data.loading) return s.createElement(y, {
                            onUserClose: this.props.onUserClose
                        }, s.createElement(E.a, null));
                        if (this.props.data.error || !this.props.bitsConfig) return s.createElement(y, {
                            onUserClose: this.props.onUserClose
                        }, s.createElement(S, null));
                        if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return s.createElement(y, {
                            onUserClose: this.props.onUserClose
                        }, s.createElement(ve, null));
                        var e = this.props.data && this.props.data.currentUser,
                            t = e && e.bitsUserState,
                            n = e && e.bitsUserSettings;
                        if (Object(Se.b)(t)) {
                            if (this.state.buyingBits) return s.createElement(y, {
                                onUserClose: this.handleCloseBuy,
                                closeDataATarget: "bits-buy-card-close-button"
                            }, s.createElement(be.a, {
                                bitsConfig: this.props.bitsConfig,
                                channelLogin: this.props.channelLogin,
                                closeAllBits: this.props.onUserClose,
                                onClose: this.handleCloseBuy,
                                onBack: this.handleBackFromBuy,
                                trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                                location: me.b.ChatTooltip,
                                shouldShowNewUserCheerUX: !0
                            }));
                            if (Object(Se.d)(t, n) || Object(Se.b)(t) && this.state.helpRequested) return s.createElement(y, {
                                onUserClose: this.handleCloseIntro,
                                closeDataATarget: "bits-intro-close-button"
                            }, s.createElement(b.Ya, {
                                padding: 1
                            }, s.createElement(C.a, {
                                onUserSkip: this.handleSkip,
                                onUserClickFirstTimePurchaseDiscount: this.handleClickFirstTimePurchaseDiscount,
                                trackBitsCardInteraction: this.props.trackBitsCardInteraction
                            })))
                        }
                        return this.state.buyingBits ? s.createElement(y, {
                            onUserClose: this.handleCloseBuy,
                            closeDataATarget: "bits-buy-card-close-button"
                        }, s.createElement(be.a, {
                            bitsConfig: this.props.bitsConfig,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.onUserClose,
                            onClose: this.handleCloseBuy,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                            location: me.b.ChatTooltip,
                            size: ke.b.Scrollview
                        })) : s.createElement(y, {
                            onUserClose: this.props.currentCheers.length ? void 0 : this.props.onUserClose
                        }, s.createElement(fe, {
                            onMount: this.onMountBitsCardMain,
                            bitsConfig: this.props.bitsConfig,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            cheerMessageAutoModded: this.props.cheerMessageAutoModded,
                            visible: this.props.visible,
                            currentCheers: this.props.currentCheers,
                            isSending: this.props.isSending,
                            isStaff: this.props.isStaff,
                            onClickCheermote: this.props.onClickCheermote,
                            onCancelSend: this.props.onCancelSend,
                            onConfirmSend: this.props.onConfirmSend,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                            bitsSendErrorCode: this.props.bitsSendErrorCode,
                            bitsSendHasError: this.props.bitsSendHasError,
                            helpRequested: this.state.helpRequested,
                            showHelp: this.showHelp,
                            closeHelp: this.closeHelp,
                            handleClickBuy: this.handleClickBuy,
                            chatMessage: this.props.chatMessage
                        }))
                    }, t
                }(s.Component),
                Oe = Object(l.compose)(Object(d.a)(Ee, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function() {
                        return {
                            variables: {
                                isActiveFirstCheerExperiment: Object(Se.a)()
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(d.a)(Ce, {
                    name: "setBitsUserSettings"
                }), Object(u.a)(function(e) {
                    return {
                        query: Ee,
                        variables: {
                            isActiveFirstCheerExperiment: Object(Se.a)()
                        },
                        topic: e.user ? Object(h.E)(e.user.id) : "",
                        type: p.PubsubMessageType.UserBitsFirstPurchase,
                        skip: !e.user || !Object(Se.a)(),
                        mutator: function(t, n) {
                            return !n.currentUser || t.message_type !== ye.b.FirstPurchase || e.user && t.data.user_id !== e.user.id ? n : (n.currentUser.bitsUserState === g.d.NEW_USER && (n.currentUser.bitsUserState = g.d.ACQUIRED), n)
                        }
                    }
                }))(Ne);
            var _e = Object(r.connect)(function(e) {
                return {
                    user: Object(a.e)(e),
                    isStaff: Object(a.g)(e)
                }
            })(Oe);
            n.d(t, "a", function() {
                return _e
            })
        },
        "s/8O": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return c
            }), n.d(t, "c", function() {
                return d
            }), n.d(t, "a", function() {
                return u
            });
            var i, r = n("/7QA"),
                a = n("f00E"),
                o = n("2xye"),
                s = /tag=(.*?)(&|$)/;

            function l(e) {
                var t = e.match(s);
                return t && t.length >= 2 ? t[1] : ""
            }

            function c(e) {
                if (e.game && e.product) {
                    var t, n;
                    e.user && (t = e.user.displayName, n = e.user.id);
                    var i = {
                        location: e.location,
                        game_id: e.game.id,
                        game_name: e.game.name,
                        developer: e.product.developer,
                        genre: e.product.genres,
                        asin: e.info.asin,
                        channel: t,
                        channel_id: n,
                        crate: e.info.crateASINs
                    };
                    r.p.tracking.track(o.SpadeEventType.FuelBuyButton, i)
                }
            }

            function d(e) {
                var t = {
                    asin: e.item.info.asin,
                    price: e.item.info.price,
                    channel_id: e.user && e.user.id || null,
                    channel: e.user && e.user.login || null,
                    game_id: e.game.id,
                    game_name: e.game.name,
                    impression_group_id: e.impressionGroupID,
                    impression_id: e.impressionID,
                    item_index: e.index,
                    max_index: e.offerCount,
                    offer_type: e.offerType,
                    store_id: l(e.item.info.purchaseURL)
                };
                r.p.tracking.track(o.SpadeEventType.FuelOfferView, t)
            }

            function u(e, t, n) {
                var i = Object(a.b)(),
                    r = e.inGameContent.length + 1,
                    o = {
                        product: {
                            game: t,
                            user: n,
                            item: e,
                            impressionGroupID: i,
                            offerCount: r,
                            impressionID: Object(a.b)(),
                            index: 0,
                            offerType: "fuel"
                        },
                        igc: {}
                    };
                return e.inGameContent.forEach(function(e, s) {
                    e && (o.igc[e.id] = {
                        game: t,
                        user: n,
                        item: e,
                        impressionGroupID: i,
                        offerCount: r,
                        impressionID: Object(a.b)(),
                        index: s + 1,
                        offerType: "fuel"
                    })
                }), o
            }! function(e) {
                e.Hover = "hover", e.ViewDetails = "view_asin_detail", e.ClickToAmazon = "click_to_amazon"
            }(i || (i = {}))
        },
        s8Ou: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ReportContentInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reportContent"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "contentID"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 111
                }
            };
            n.loc.source = {
                body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\nreportContent(input: $input) {\ncontentID\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sAMt: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 62
                }
            };
            n.loc.source = {
                body: "query ChatUser($login: String!) {\nuser(login: $login) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sLlB: function(e, t, n) {
            "use strict";
            var i, r = n("/MKj"),
                a = n("fvjX"),
                o = n("5xw2"),
                s = n("OhOW"),
                l = n("mrSG"),
                c = n("q1tI"),
                d = n("wIs1"),
                u = n("/7QA"),
                p = n("vSJR"),
                m = n("8/mp"),
                h = n("HSqT"),
                g = n("2xye"),
                f = n("GnwI"),
                v = n("Ue10");
            n("S58p");
            ! function(e) {
                e.ClearAllButton = "language-select-menu__clear-all-button"
            }(i || (i = {}));
            var b = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleLanguageChange = function(e) {
                            var n = e.currentTarget,
                                i = n.parentElement && n.parentElement.getAttribute("data-language-code");
                            i && (t.props.updateLanguagePreferences(i, n.checked), t.trackLanguageChange(i, n.checked))
                        }, t.renderDropdownContent = function() {
                            return c.createElement(c.Fragment, null, c.createElement("div", {
                                className: "language-select-menu__balloon"
                            }, c.createElement(m.b, null, c.createElement(v.Ya, {
                                padding: .5
                            }, Object(h.b)().map(t.renderLanguageOption)))), c.createElement(v.Fb, {
                                background: v.r.Alt,
                                borderTop: !0,
                                className: "language-select-menu__footer"
                            }, c.createElement(v.z, {
                                type: v.F.Text,
                                onClick: t.props.clearLanguagePreferences,
                                "data-a-target": "language-clear-all",
                                "data-test-selector": i.ClearAllButton
                            }, Object(u.d)("Clear all", "LanguageSelectMenu"))))
                        }, t.renderLanguageOption = function(e) {
                            return c.createElement(v.Ya, {
                                padding: {
                                    x: 1,
                                    y: .5
                                },
                                key: e.code
                            }, c.createElement(v.N, {
                                label: e.label,
                                checked: t.props.languagePreferences.includes(e.code),
                                "data-language-code": e.code,
                                "data-a-target": "language-filter-" + e.code + "-checkbox",
                                onChange: t.handleLanguageChange
                            }))
                        }, t.renderButtonContent = function() {
                            var e = t.props.languagePreferences.length,
                                n = Object(u.d)("Language", "LanguageSelectMenu");
                            return c.createElement(v.Ya, {
                                display: v.X.Flex
                            }, n, c.createElement(v.Ya, {
                                margin: {
                                    left: .5
                                }
                            }, 0 !== e && c.createElement(v.hb, {
                                type: v.ib.Brand,
                                label: e.toString()
                            })))
                        }, t.trackLanguageChange = function(e, n) {
                            var i = "";
                            t.props.match && t.props.match.params && (i = decodeURIComponent(t.props.match.params.encodedCommunityName).toLowerCase()), u.p.tracking.track(g.SpadeEventType.LanguageFilterChange, {
                                item_name: "language",
                                item_value: e,
                                item_action: n ? "select" : "deselect",
                                game: i || null,
                                open_click: !0
                            })
                        }, t
                    }
                    return l.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        return c.createElement(v.Ya, {
                            className: "language-select-menu"
                        }, c.createElement(p.a, {
                            "data-a-target": "language-filter-dropdown",
                            buttonLabel: this.renderButtonContent()
                        }, this.renderDropdownContent()))
                    }, t
                }(c.Component),
                k = Object(a.compose)(d.a, Object(f.b)("LanguageSelectMenu"))(b);
            var y = Object(r.connect)(function(e) {
                return {
                    languagePreferences: Object(s.a)(e)
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    updateLanguagePreferences: o.c,
                    clearLanguagePreferences: o.a
                }, e)
            })(k);
            n.d(t, "a", function() {
                return y
            })
        },
        sMoq: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "VIPUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "GrantVIPInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "grantVIP"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "grantee"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 122
                }
            };
            n.loc.source = {
                body: "mutation VIPUser($input: GrantVIPInput!){\ngrantVIP(input: $input) {\nchannel {\nid\n}\ngrantee {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sPFP: function(e, t, n) {},
        sTgJ: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("fvjX"),
                a = n("1/iK"),
                o = n("y5D0"),
                s = n("mrSG"),
                l = n("TSYQ"),
                c = n("q1tI"),
                d = n("/7QA"),
                u = n("2aBk"),
                p = n("Ue10"),
                m = (n("BRlh"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return s.__extends(t, e), t.prototype.componentDidMount = function() {
                        u.b && u.b.destroyPlayer()
                    }, t.prototype.render = function() {
                        var e = l("channel-page__video-player", {
                            "channel-page__video-player--theatre-mode": this.props.theatreModeEnabled || !1
                        });
                        return c.createElement(p.Ya, {
                            className: e,
                            display: p.X.Flex,
                            alignItems: p.f.Center,
                            justifyContent: p.Xa.Center,
                            flexWrap: p.Ba.NoWrap,
                            fullHeight: this.props.theatreModeEnabled,
                            fullWidth: this.props.rightColumnExpanded,
                            position: this.props.theatreModeEnabled ? p.kb.Fixed : p.kb.Relative
                        }, c.createElement(p.o, {
                            ratio: p.p.Aspect16x9
                        }, c.createElement(p.Ya, {
                            className: "require-login-video-player__player",
                            display: p.X.Flex,
                            flexDirection: p.Aa.Column,
                            alignItems: p.f.Center,
                            justifyContent: p.Xa.Center,
                            fullHeight: !0,
                            fullWidth: !0
                        }, this.renderLiveIndicator())), c.createElement(p.Ya, {
                            className: "require-login-video-player__content",
                            textAlign: p.Sb.Center,
                            position: p.kb.Absolute
                        }, c.createElement(p.G, {
                            background: p.r.Base,
                            borderRadius: p.x.Large,
                            elevation: 3,
                            border: !0
                        }, c.createElement(p.Ya, {
                            padding: 2
                        }, this.props.title && c.createElement(c.Fragment, null, c.createElement(p.Ya, {
                            margin: {
                                top: 2
                            }
                        }, c.createElement(p.W, {
                            fontSize: p.Ca.Size4,
                            bold: !0,
                            lines: 2,
                            ellipsis: !0
                        }, this.props.title))), c.createElement(p.Ya, {
                            margin: {
                                top: 2
                            }
                        }, c.createElement(p.W, {
                            fontSize: p.Ca.Size5
                        }, Object(d.d)("You need a Twitch Account to watch this stream.", "NflRequireLoginPlayer"))), c.createElement(p.Ya, {
                            margin: {
                                top: 2
                            }
                        }, c.createElement(p.z, {
                            onClick: this.props.signup
                        }, c.createElement(p.Ya, {
                            padding: {
                                x: 2
                            }
                        }, Object(d.d)("Create a Free Account", "NflRequireLoginPlayer")))), c.createElement(p.Ya, {
                            margin: {
                                top: 1
                            }
                        }, c.createElement(p.z, {
                            type: p.F.Text,
                            onClick: this.props.login
                        }, c.createElement(p.Ya, {
                            padding: {
                                x: 2
                            }
                        }, Object(d.d)("Log In", "NflRequireLoginPlayer"))))))))
                    }, t.prototype.renderLiveIndicator = function() {
                        if (void 0 === this.props.live) return null;
                        var e = null;
                        this.props.live && (e = c.createElement(p.Ya, {
                            margin: {
                                right: .5
                            }
                        }, c.createElement(p.K, {
                            status: p.M.Live,
                            size: p.L.Medium,
                            pulse: !0
                        })));
                        var t = this.props.live ? Object(d.d)("LIVE", "NflRequireLoginPlayer") : Object(d.d)("OFFLINE", "NflRequireLoginPlayer");
                        return c.createElement(c.Fragment, null, e, c.createElement(p.W, {
                            color: p.O.Overlay,
                            fontSize: p.Ca.Size5
                        }, t))
                    }, t
                }(c.PureComponent));
            var h = Object(i.connect)(function(e) {
                return {
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theatreModeEnabled: e.ui.theatreModeEnabled
                }
            }, function(e) {
                return Object(r.bindActionCreators)({
                    login: function() {
                        return Object(o.e)(a.a.NflRequireLoginPlayer)
                    },
                    signup: function() {
                        return Object(o.g)(a.a.NflRequireLoginPlayer)
                    }
                }, e)
            })(m);
            n.d(t, "a", function() {
                return h
            })
        },
        sU0Q: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoChatCard_Video"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "previewThumbnailURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "90"
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "51"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "publishedAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "owner"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 162
                }
            };
            n.loc.source = {
                body: "query VideoChatCard_Video($videoID: ID!) {\nvideo(id: $videoID) {\nid\ntitle\npreviewThumbnailURL(width: 90 height: 51)\npublishedAt\nowner {\nid\nlogin\ndisplayName\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sbEw: function(e, t, n) {},
        sblI: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("0Log"),
                r = n("ZtEv"),
                a = n("aF6k");
            i.ModerationActions.Ban, i.ModerationActions.Timeout, i.ModerationActions.Unban, i.ModerationActions.Untimeout;

            function o(e, t, n, i) {
                return {
                    type: r.b.Moderation,
                    moderationType: e,
                    id: Object(a.a)(t + "-mod"),
                    userLogin: t,
                    reason: n,
                    duration: i
                }
            }
        },
        "sf7/": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "c", function() {
                return a
            }), n.d(t, "d", function() {
                return o
            });
            var i = "vodChat.video.CURRENT_VIDEO_CHANGED",
                r = "vodChat.video.CURRENT_VIDEO_TIME_CHANGED",
                a = function(e) {
                    return {
                        type: i,
                        id: e
                    }
                },
                o = function(e) {
                    return {
                        type: r,
                        updatedTime: e
                    }
                }
        },
        tFCv: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("9C/b"),
                s = n("fvjX"),
                l = n("ZS2+"),
                c = n("/0dD"),
                d = n("SDEh"),
                u = n("edgk"),
                p = n("1/iK"),
                m = n("y5D0"),
                h = n("jZLd"),
                g = n("kRBY"),
                f = n("XDQu"),
                v = n("+pBb"),
                b = n("tY8L"),
                k = n("r2Xj"),
                y = n("WytW"),
                C = n("F6GT"),
                S = n("x0gr"),
                E = l.a.wrap(function() {
                    return n.e(199).then(n.bind(null, "8MX0"))
                }, "ChatSettingsComponent"),
                N = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            editAppearance: !1,
                            shouldMountChild: !1
                        }, t.handleSettingsToggle = function(e) {
                            t.setState({
                                shouldMountChild: !0
                            }), t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                                editAppearance: !1
                            })
                        }, t.onEdit = function() {
                            t.setState({
                                editAppearance: !0
                            })
                        }, t.onLeaveEdit = function() {
                            t.setState({
                                editAppearance: !1
                            })
                        }, t.onDarkModeToggle = function() {
                            var e = t.props.darkModeEnabled ? c.a.Light : c.a.Dark;
                            t.props.onThemeChanged(e, !t.props.isPopout), Object(S.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !t.props.darkModeEnabled,
                                settingName: k.a.DarkMode
                            })
                        }, t.onTimestampToggle = function() {
                            Object(C.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(S.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !t.props.showTimestamps,
                                settingName: k.a.ShowTimestamps
                            })
                        }, t.onHighContrastColorsToggle = function() {
                            Object(C.b)("useHighContrastColors", !t.props.useHighContrastColors), t.props.useHighContrastColors ? t.props.onUseHighContrastColorsDisable() : t.props.onUseHighContrastColorsEnable(), Object(S.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !t.props.useHighContrastColors,
                                settingName: k.a.UseHighContrastColors
                            })
                        }, t.onChatHide = function() {
                            t.props.onChatHide(), Object(S.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !0,
                                settingName: k.a.HideChat
                            })
                        }, t.onChatPopout = function() {
                            t.props.isPopout || t.props.onChatHide();
                            var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                            e && !Object(d.a)() && (e.focus(), Object(u.a)(e, function() {
                                t.props.onChatUnhide()
                            }))
                        }, t.onColorSelected = function(e) {
                            t.props.isLoggedIn ? t.props.onChatCommand(Object(y.a)(e)) : t.props.login()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(r.Fragment, null, r.createElement(E.Preload, null), r.createElement(M, {
                            onToggle: this.handleSettingsToggle
                        }, this.state.shouldMountChild && r.createElement(E, {
                            authToken: this.props.authToken,
                            darkModeEnabled: this.props.darkModeEnabled,
                            editAppearance: this.state.editAppearance,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isHostMode: this.props.isHostMode,
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            onChatCommand: this.props.onChatCommand,
                            onChatHide: this.onChatHide,
                            onChatPopout: this.onChatPopout,
                            onShowChatRules: this.props.onShowChatRules,
                            onDarkModeToggle: this.onDarkModeToggle,
                            onTimestampToggle: this.onTimestampToggle,
                            onHighContrastColorsToggle: this.onHighContrastColorsToggle,
                            showTimestamps: this.props.showTimestamps,
                            useHighContrastColors: this.props.useHighContrastColors,
                            theatreModeEnabled: this.props.theatreModeEnabled,
                            onColorSelected: this.onColorSelected,
                            channelLogin: this.props.channelLogin,
                            channelID: this.props.channelID,
                            isLoggedIn: this.props.isLoggedIn,
                            onClickEditAppearance: this.onEdit,
                            onLeaveEditAppearance: this.onLeaveEdit,
                            onShowViewerCard: this.props.onShowViewerCard,
                            containerElement: this.props.containerElement,
                            "data-test-selector": "chat-settings-component"
                        })))
                    }, t
                }(r.Component);
            var O = Object(a.connect)(function(e) {
                    return {
                        isLoggedIn: Object(g.f)(e),
                        darkModeEnabled: Object(f.a)(e) === c.a.Dark,
                        showTimestamps: e.chat.showTimestamps,
                        useHighContrastColors: e.chat.useHighContrastColors,
                        theatreModeEnabled: e.ui.theatreModeEnabled
                    }
                }, function(e) {
                    return Object(s.bindActionCreators)({
                        login: function() {
                            return Object(m.e)(p.a.Chat)
                        },
                        onChatHide: function() {
                            return v.L()
                        },
                        onChatUnhide: function() {
                            return v.O()
                        },
                        onThemeChanged: function(e) {
                            return Object(h.b)(e, void 0, !1)
                        },
                        onTimestampsDisable: function() {
                            return v.E()
                        },
                        onTimestampsEnable: function() {
                            return v.J()
                        },
                        onUseHighContrastColorsDisable: function() {
                            return v.F()
                        },
                        onUseHighContrastColorsEnable: function() {
                            return v.K()
                        },
                        onShowViewerCard: b.e
                    }, e)
                })(N),
                _ = Object(o.a)(O),
                w = n("/7QA"),
                D = n("eJ65"),
                I = n("Ue10"),
                T = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.setToggleBalloonRef = function(e) {
                            return t.toggleBalloonRef = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidUpdate = function(e) {
                        this.props.onToggle && this.props.isChatRulesOpen && !e.isChatRulesOpen && this.toggleBalloonRef.toggleBalloon(!1)
                    }, t.prototype.render = function() {
                        return r.createElement(D.a, {
                            onToggle: this.props.onToggle,
                            ref: this.setToggleBalloonRef
                        }, r.createElement(I.A, {
                            icon: I.ub.Gear,
                            ariaLabel: Object(w.d)("Chat settings", "ChatInput"),
                            "data-a-target": "chat-settings",
                            disabled: !!this.props.disabled
                        }), r.createElement(I.u, {
                            direction: I.v.Top,
                            noTail: !0,
                            offsetY: "11px",
                            "data-a-target": "chat-settings-balloon"
                        }, this.props.children))
                    }, t
                }(r.Component);
            var M = Object(a.connect)(function(e) {
                return {
                    isChatRulesOpen: e.chat.isChatRulesOpen
                }
            })(T);
            n.d(t, "a", function() {
                return _
            }), n.d(t, "b", function() {
                return M
            })
        },
        tIid: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "b", function() {
                return s
            });
            var i = n("/7QA"),
                r = "esport_insider_pass_whitelist",
                a = "esports_room_cheering_whitelist";

            function o(e, t, n) {
                return void 0 === n && (n = !1), l(r, e, t, n)
            }

            function s(e, t) {
                return l(a, e, t)
            }

            function l(e, t, n, r) {
                void 0 === r && (r = !1);
                var a = i.b.get(e, []),
                    o = n && n.roles && n.roles.isStaff || r;
                return a.includes(t) || a.includes(t + "-staff") && o
            }
        },
        tY8L: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "e", function() {
                return s
            }), n.d(t, "d", function() {
                return l
            });
            var i = n("oK83"),
                r = "viewer-card.VIEWER_CARD_HIDDEN",
                a = "viewer-card.VIEWER_CARD_SHOWN";

            function o() {
                return {
                    type: r
                }
            }

            function s(e, t, n, r) {
                return void 0 === r && (r = 0), {
                    type: a,
                    viewerCardOptions: {
                        viewerCardType: i.b.Viewer,
                        initialTopOffset: r,
                        sourceID: n,
                        sourceType: t,
                        targetID: e
                    }
                }
            }

            function l(e, t, n, r) {
                return void 0 === r && (r = 0), {
                    type: a,
                    viewerCardOptions: {
                        viewerCardType: i.b.Extension,
                        initialTopOffset: r,
                        sourceID: n,
                        targetID: e,
                        extensionVersion: t
                    }
                }
            }
        },
        tiJ6: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("H1ft"),
                s = n("0Log"),
                l = n("5zf8"),
                c = n("/aPz"),
                d = n("2xye"),
                u = n("1rIY"),
                p = n("Mg1H"),
                m = n("Q34B"),
                h = n("vRsq"),
                g = n("zQgx"),
                f = n("Q94S");

            function v(e, t) {
                var n = e.owner ? e.owner.login : "",
                    i = m.a.VIDEO,
                    r = Object(h.i)(n, e.id);
                return {
                    clipSlug: "",
                    collectionID: t ? t.id : "",
                    contentCanonicalUrl: r,
                    contentType: i,
                    hostedChannel: null,
                    isSecondaryStreamPlaying: !1,
                    videoID: e.id,
                    videoPlayerSource: ""
                }
            }

            function b(e) {
                if (e && e.hosting && e.hosting.id && e.hosting.login) {
                    var t = e.hosting;
                    return {
                        id: t.id,
                        login: t.login,
                        displayName: t.displayName || "",
                        profileImageURL: t.profileImageURL
                    }
                }
                return null
            }
            var k, y = n("kmJV"),
                C = n("xyN1"),
                S = n("csJo"),
                E = n("mGiD"),
                N = n("MAph"),
                O = n("SWMh"),
                _ = n("50oY");
            n.d(t, "b", function() {
                return D
            }), n.d(t, "a", function() {
                return I
            });
            var w = (k = Object(u.a)("ChannelContext", {
                    loading: !1,
                    error: !1,
                    channel: null,
                    channelLogin: "",
                    clip: null,
                    clipSlug: "",
                    collection: null,
                    collectionID: "",
                    contentCanonicalUrl: "",
                    contentType: m.a.NONE,
                    currentUser: null,
                    hostedChannel: null,
                    isSecondaryStreamPlaying: !1,
                    live: !1,
                    page: _.c.About,
                    video: null,
                    videoID: "",
                    videoMarkers: [],
                    videoPlayerSource: "",
                    viewerCount: null,
                    clearData: function() {},
                    toggleInsiderChannel: function() {}
                })).InnerProvider,
                D = k.withContext,
                I = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            loading: !1,
                            error: !1,
                            channelLogin: "",
                            channel: null,
                            clipSlug: "",
                            clip: null,
                            videoID: "",
                            video: null,
                            videoMarkers: [],
                            collectionID: "",
                            collection: null,
                            contentCanonicalUrl: "",
                            contentType: m.a.NONE,
                            currentUser: null,
                            live: !1,
                            hostedChannel: null,
                            videoPlayerSource: "",
                            isSecondaryStreamPlaying: !1,
                            page: _.c.About,
                            viewerCount: null,
                            toggleInsiderChannel: function() {
                                t.toggleInsiderChannel()
                            },
                            clearData: function() {
                                t.clearResetOfflineTimer()
                            }
                        }, t.logger = a.k.withCategory("ChannelContext"), t.nextHostTarget = "", t.updateRoute = function(e) {
                            t.setState({
                                page: t.getPageType(e)
                            });
                            var n = e.match.params.channelLogin;
                            n && n !== t.state.channelLogin && (t.resetPrivateVariables(), t.setState({
                                viewerCount: null
                            })), t.setState(t.updateVideoSource({
                                route: e
                            }));
                            var i = Object(f.e)(e),
                                r = Object(f.a)(e),
                                a = Object(f.b)(e);
                            t.setState({
                                channelLogin: (n || "").toLowerCase()
                            }), i ? t.fetchVideo(i, a) : r ? t.fetchClip(r) : a ? t.fetchCollection(a) : n ? (t.fetchChannel(n), t.setupPubsub("", n)) : t.logger.warn("Channel Root had no content to load", e.match)
                        }, t.onResetOffline = function() {
                            t.resetOfflineTimer = void 0, t.setState({
                                live: !1
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.updateRoute(this.props)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.match.url !== this.props.match.url && this.updateRoute(e)
                    }, t.prototype.render = function() {
                        return r.createElement(w, {
                            value: this.state
                        }, this.props.children)
                    }, t.prototype.resetPrivateVariables = function() {
                        this.pubsubHostTargetChange && this.pubsubHostTargetChange.unsubscribe(), this.pubsubHostTargetChange = void 0, this.pubsubViewCountUpdate && this.pubsubViewCountUpdate.unsubscribe(), this.pubsubViewCountUpdate = void 0, this.nextHostTarget = "", this.clearResetOfflineTimer()
                    }, t.prototype.fetchChannel = function(e) {
                        var t = this;
                        this.setState({
                            loading: !0
                        });
                        var n = a.p.apollo.client.watchQuery({
                            query: y,
                            variables: {
                                currentChannelLogin: e
                            }
                        }).subscribe({
                            next: function(e) {
                                n.unsubscribe(), t.setState(i.__assign({
                                    error: !1,
                                    loading: !1
                                }, t.updateCurrentUser(e.data.currentUser), t.updateChannel(e.data.user), t.updateVideoSource({
                                    live: e.data.user
                                })))
                            },
                            error: function(i) {
                                n.unsubscribe(), t.setState({
                                    error: !0,
                                    loading: !1
                                }), t.logger.error(i, "failed to fetch channel root data", {
                                    channelLogin: e
                                })
                            }
                        })
                    }, t.prototype.fetchVideo = function(e, t) {
                        var n = this;
                        this.setState({
                            loading: !0
                        });
                        var r = a.p.apollo.client.watchQuery({
                            query: E,
                            variables: {
                                videoID: e,
                                collectionID: t,
                                includeCollection: !!t
                            }
                        }).subscribe({
                            next: function(e) {
                                r.unsubscribe(), n.setState(i.__assign({
                                    error: !1,
                                    loading: !1
                                }, n.updateCurrentUser(e.data.currentUser), n.updateVideo(e.data.video), n.updateChannel(e.data.video && e.data.video.owner), n.updateVideoSource({
                                    video: e.data.video
                                }))), n.fetchVideoMarkers(e.data.video)
                            },
                            error: function(i) {
                                r.unsubscribe(), n.setState({
                                    error: !0,
                                    loading: !1
                                }), n.logger.error(i, "failed to fetch channel root data for video", {
                                    videoID: e,
                                    collectionID: t
                                })
                            }
                        })
                    }, t.prototype.fetchCollection = function(e) {
                        var t = this;
                        this.setState({
                            loading: !0
                        });
                        var n = a.p.apollo.client.watchQuery({
                            query: S,
                            variables: {
                                collectionID: e
                            }
                        }).subscribe({
                            next: function(e) {
                                n.unsubscribe();
                                var r = Object(f.c)(e.data.collection);
                                t.setState(i.__assign({
                                    error: !1,
                                    loading: !1
                                }, t.updateCurrentUser(e.data.currentUser), t.updateCollection(e.data.collection), t.updateVideo(r), t.updateChannel(e.data.collection && e.data.collection.owner), t.updateVideoSource({
                                    video: r,
                                    collection: e.data.collection
                                }))), t.fetchVideoMarkers(r)
                            },
                            error: function(i) {
                                n.unsubscribe(), t.setState({
                                    error: !0,
                                    loading: !1
                                }), t.logger.error(i, "failed to fetch channel root data for collection", {
                                    collectionID: e
                                })
                            }
                        })
                    }, t.prototype.fetchClip = function(e) {
                        var t = this;
                        this.setState({
                            loading: !0
                        });
                        var n = a.p.apollo.client.watchQuery({
                            query: C,
                            variables: {
                                currentChannelLogin: "",
                                includeChannel: !1,
                                videoID: "",
                                includeVideo: !1,
                                collectionID: "",
                                includeCollection: !1,
                                slugID: e,
                                includeClip: !0
                            }
                        }).subscribe({
                            next: function(e) {
                                n.unsubscribe(), t.setState(i.__assign({
                                    error: !1,
                                    loading: !1
                                }, t.updateCurrentUser(e.data.currentUser), t.updateClip(e.data.clip), t.updateChannel(e.data.clip && e.data.clip.broadcaster), t.updateVideoSource({
                                    clip: e.data.clip
                                })))
                            },
                            error: function(i) {
                                n.unsubscribe(), t.setState({
                                    error: !0,
                                    loading: !1
                                }), t.logger.error(i, "failed to fetch channel root data for video", {
                                    clipSlug: e
                                })
                            }
                        })
                    }, t.prototype.updateCurrentUser = function(e) {
                        return {
                            currentUser: e
                        }
                    }, t.prototype.updateCollection = function(e) {
                        return {
                            collection: e
                        }
                    }, t.prototype.updateVideo = function(e) {
                        return {
                            video: e
                        }
                    }, t.prototype.updateClip = function(e) {
                        return {
                            clip: e
                        }
                    }, t.prototype.updateChannel = function(e) {
                        var t = e && e.login || "",
                            n = !!Object(g.d)(e),
                            i = b(e),
                            r = Object(g.h)(e);
                        return this.setupPubsub(e && e.id || "", t), this.clearResetOfflineTimer(), n && (this.resetOfflineTimer = setTimeout(this.onResetOffline, 6e4)), {
                            channel: e,
                            channelLogin: t,
                            live: n,
                            hostedChannel: i,
                            viewerCount: r
                        }
                    }, t.prototype.updateVideoSource = function(e) {
                        var t;
                        return e.route ? t = function(e, t) {
                            var n = Object(f.a)(t) || "",
                                i = Object(f.e)(t) || "",
                                r = Object(f.b)(t) || "",
                                a = "",
                                o = m.a.NONE,
                                s = "",
                                l = !1;
                            if ("" !== n) o = m.a.CLIP, a = Object(h.h)(e, n);
                            else if (i || r) o = r ? m.a.COLLECTION : m.a.VIDEO, a = Object(h.i)(e, i, r);
                            else {
                                o = m.a.LIVE, a = "/" + e;
                                var c = Object(p.b)(e);
                                l = (s = Object(p.c)(e) && c ? c : e) === c
                            }
                            return {
                                clipSlug: n,
                                collectionID: r,
                                contentCanonicalUrl: a,
                                contentType: o,
                                hostedChannel: null,
                                isSecondaryStreamPlaying: l,
                                videoID: i,
                                videoPlayerSource: s
                            }
                        }(e.route.match.params.channelLogin || "", e.route) : e.live ? t = function(e) {
                            var t = e.login || "",
                                n = m.a.LIVE,
                                i = "/" + t,
                                r = Object(p.b)(t),
                                a = Object(p.c)(t) && r ? r : t,
                                o = null,
                                s = !(!e.self || !e.self.subscriptionBenefit) || !1,
                                l = Object(g.c)(e);
                            return s && l || (a = (o = b(e)) ? o.login || "" : t || "", Object(p.a)(a)), {
                                clipSlug: "",
                                collectionID: "",
                                contentCanonicalUrl: i,
                                contentType: n,
                                hostedChannel: o,
                                isSecondaryStreamPlaying: a === r,
                                videoID: "",
                                videoPlayerSource: a
                            }
                        }(e.live) : e.clip ? t = function(e) {
                            var t = e.broadcaster && e.broadcaster.login,
                                n = m.a.CLIP,
                                i = Object(h.h)(t || "", e.slug);
                            return {
                                clipSlug: e.slug,
                                collectionID: "",
                                contentCanonicalUrl: i,
                                contentType: n,
                                hostedChannel: null,
                                isSecondaryStreamPlaying: !1,
                                videoID: "",
                                videoPlayerSource: ""
                            }
                        }(e.clip) : e.collection ? t = function(e) {
                            var t = Object(f.c)(e);
                            return t ? v(t, e) : {
                                clipSlug: "",
                                collectionID: e.id,
                                contentCanonicalUrl: "",
                                contentType: m.a.COLLECTION,
                                hostedChannel: null,
                                isSecondaryStreamPlaying: !1,
                                videoID: "",
                                videoPlayerSource: ""
                            }
                        }(e.collection) : e.video && (t = v(e.video)), t || (this.logger.warn("Unable to set context.", e), {})
                    }, t.prototype.getPageType = function(e) {
                        if (e.match.params.standaloneType) {
                            if (e.match.params.standaloneType === _.e.Videos) return _.c.Videos;
                            if (e.match.params.standaloneType === _.e.Collections) return _.c.Videos
                        }
                        if (void 0 === e.match.params.page) {
                            if (e.match.params.contentType) {
                                if (e.match.params.contentType === _.a.Video) return _.c.Videos;
                                if (e.match.params.contentType === _.a.Clip) return _.c.Videos;
                                if (e.match.params.contentType === _.a.Collection) return _.c.Videos
                            }
                            return _.c.About
                        }
                        return e.match.params.page && _.d.has(e.match.params.page) ? e.match.params.page : (a.k.error(new Error, "Unknown Page Type: '" + e.match.params.page + "' in route: " + e.match.url), _.c.About)
                    }, t.prototype.setupPubsub = function(e, t) {
                        var n = this;
                        if (!this.pubsubHostTargetChange || this.pubsubHostTargetChange.channelLogin !== t)
                            if (this.pubsubHostTargetChange && this.pubsubHostTargetChange.unsubscribe(), e) {
                                var i = a.p.pubsub.subscribe({
                                    topic: Object(c.z)(e),
                                    onMessage: function(i) {
                                        i.type === s.PubsubMessageType.StreamChatRoomHostTargetChange && n.handleStreamChatRoomHostTargetChange(i, t, e)
                                    }
                                });
                                this.pubsubHostTargetChange = {
                                    channelLogin: t,
                                    unsubscribe: i
                                }
                            } else this.pubsubHostTargetChange = void 0;
                        if (!this.pubsubViewCountUpdate || this.pubsubViewCountUpdate.channelLogin !== t)
                            if (this.pubsubViewCountUpdate && this.pubsubViewCountUpdate.unsubscribe(), t) {
                                i = a.p.pubsub.subscribe({
                                    topic: Object(c.K)(t),
                                    onMessage: function(e) {
                                        e.type === s.PubsubMessageType.ViewCount && n.handleViewCount(e)
                                    }
                                });
                                this.pubsubViewCountUpdate = {
                                    channelLogin: t,
                                    unsubscribe: i
                                }
                            } else this.pubsubViewCountUpdate = void 0
                    }, t.prototype.handleStreamChatRoomHostTargetChange = function(e, t, n) {
                        if (e.data.channel_id === n) {
                            a.o.track(d.SpadeEventType.HostModeDebug, {
                                log_type: "pubsub_msg_v2",
                                channel: t,
                                data_channel_id: e.data.channel_id,
                                data_target_channel_id: e.data.target_channel_id,
                                data_target_channel_login: e.data.target_channel_login
                            });
                            var i = e.data.channel_login,
                                r = e.data.target_channel_id,
                                o = (e.data.target_channel_login || "").toLowerCase();
                            if (t !== i) return;
                            r && o ? (this.setState({
                                videoPlayerSource: o,
                                hostedChannel: {
                                    id: r,
                                    login: o,
                                    displayName: o,
                                    profileImageURL: null
                                }
                            }), this.fetchPubsubHostedChannel(o), a.o.track(d.SpadeEventType.HostModeDebug, {
                                log_type: "state_change",
                                channel: t,
                                host_channel: o
                            })) : (this.setState({
                                videoPlayerSource: t,
                                hostedChannel: null
                            }), a.o.track(d.SpadeEventType.HostModeDebug, {
                                log_type: "state_change",
                                channel: t,
                                host_channel: null
                            }))
                        }
                    }, t.prototype.fetchPubsubHostedChannel = function(e) {
                        return i.__awaiter(this, void 0, void 0, function() {
                            var t, n, r;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        this.nextHostTarget = e, i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, a.p.apollo.client.query({
                                            query: N,
                                            variables: {
                                                hostedChannelLogin: e
                                            }
                                        })];
                                    case 2:
                                        return (t = i.sent()).data.user && this.nextHostTarget === e && (n = t.data.user, this.setState({
                                            hostedChannel: {
                                                id: n.id || "",
                                                login: n.login || "",
                                                displayName: n.displayName || "",
                                                profileImageURL: n.profileImageURL
                                            }
                                        })), [3, 4];
                                    case 3:
                                        return r = i.sent(), this.logger.error(r, "failed to fetch hosted channel data", {
                                            hostedChannelLogin: e
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.prototype.fetchVideoMarkers = function(e) {
                        return i.__awaiter(this, void 0, void 0, function() {
                            var t, n;
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        if (!e || !e.lengthSeconds || Object(o.b)() === o.a.None) return [2];
                                        r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 3, , 4]), [4, Object(O.a)(e.id, e.lengthSeconds, e.game)];
                                    case 2:
                                        return t = r.sent(), (n = t.map(function(e) {
                                            return i.__assign({}, e, {
                                                subLabel: Object(l.b)(e.duration)
                                            })
                                        })) && n.length && this.setState({
                                            videoMarkers: n
                                        }), [3, 4];
                                    case 3:
                                        return r.sent(), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.prototype.handleViewCount = function(e) {
                        e.viewers !== this.state.viewerCount && this.setState({
                            live: !0,
                            viewerCount: e.viewers
                        }), this.clearResetOfflineTimer(), this.resetOfflineTimer = setTimeout(this.onResetOffline, 6e4)
                    }, t.prototype.clearResetOfflineTimer = function() {
                        this.resetOfflineTimer && (clearTimeout(this.resetOfflineTimer), this.resetOfflineTimer = void 0)
                    }, t.prototype.toggleInsiderChannel = function() {
                        var e = this.state.channelLogin,
                            t = Object(p.b)(e),
                            n = this.state.videoPlayerSource === e,
                            i = n && t ? t : e;
                        this.setState({
                            videoPlayerSource: i
                        }), Object(p.d)(e, n)
                    }, t
                }(r.Component)
        },
        u0cu: function(e, t, n) {},
        uIkQ: function(e, t, n) {
            "use strict";
            var i = n("b5C3"),
                r = n("fQWD"),
                a = n("ZEQw"),
                o = (n("yzyL"), n("mrSG")),
                s = function() {
                    function e(e, t, n) {
                        this.count = 0, this.globalsBySet = new Map, this.channelsBySet = new Map, this.count = e.length + (t ? t.length : 0), this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                    }
                    return e.prototype.getBadge = function(e, t) {
                        var n = this.channelsBySet.get(e);
                        return n && n.has(t) ? n.get(t) || null : void 0 !== (n = this.globalsBySet.get(e)) && n.get(t) || null
                    }, e.prototype.indexBadges = function(e, t, n) {
                        e.forEach(function(e) {
                            n && e.clickAction === a.c && (e = o.__assign({}, e, {
                                channelName: n
                            }));
                            var i = t.get(e.setID);
                            i || (i = new Map, t.set(e.setID, i)), i.set(e.version, e)
                        })
                    }, e
                }();
            new s([], [], "");
            n.d(t, "b", function() {
                return i.a
            }), n.d(t, "a", function() {
                return r.a
            }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
                return s
            })
        },
        uNjw: function(e, t) {},
        uYvD: function(e, t, n) {},
        uYye: function(e, t, n) {},
        ugLo: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("6x+I"),
                o = n("/7QA"),
                s = n("ht6z"),
                l = n("Ue10"),
                c = (n("XMq5"), "https://twitch.amazon.com/prime/?ref_=sm_w_tup_ln_t_c"),
                d = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            balloonOpen: !1
                        }, t.renderUnavailableText = function() {
                            var e = t.props.options.isInGameContent ? Object(o.d)("This content is currently unavailable", "FuelBuyButton") : Object(o.d)("This game is currently unavailable", "FuelBuyButton");
                            return r.createElement(l.W, {
                                italic: !0,
                                "data-target": "fuel-buy-button-unavailable"
                            }, e)
                        }, t.renderBuyNowButton = function(e, n, i, a) {
                            void 0 === a && (a = l.D.Default);
                            var s = null;
                            if (n && n.length > 1) {
                                var c = Object(o.d)("Includes {crates} Twitch Crates!", {
                                    crates: n.length
                                }, "FuelBuyButton");
                                s = r.createElement(l.W, {
                                    className: "fuel-buy-button__crates",
                                    "data-target": "fuel-buy-button-crates"
                                }, c)
                            }
                            var d = i ? "fuel-buy-button-content" : "fuel-buy-button";
                            return r.createElement(l.Ya, {
                                alignItems: l.f.Center
                            }, r.createElement(l.z, {
                                fullWidth: !0,
                                icon: n && n.length > 0 ? l.ub.Crate : void 0,
                                purchase: e,
                                onClick: t.props.onClickBuyNow,
                                "data-target": d,
                                size: a
                            }, Object(o.d)("Buy Now", "FuelBuyButton")), s)
                        }, t.renderPrimeTreatment = function(e, n) {
                            var i = [],
                                a = r.createElement(l.tb, {
                                    asset: l.ub.Crown,
                                    type: l.vb.Prime,
                                    width: 16,
                                    height: 16,
                                    key: "fuel-crown"
                                });
                            return i = e ? [a, r.createElement("div", {
                                className: "fuel-buy-button__prime-button",
                                key: "fuel-claim"
                            }, r.createElement(l.z, {
                                onClick: t.onClickClaimPrimeOffer
                            }, Object(o.d)("Claim Offer", "FuelBuyButton")))] : [a, r.createElement(l.Ya, {
                                padding: {
                                    x: 1
                                },
                                key: "fuel-free-label"
                            }, r.createElement(l.W, {
                                type: l.Wb.Strong
                            }, Object(o.d)("Free", "FuelBuyButton"))), r.createElement("div", {
                                className: "fuel-buy-button__prime-trial-button",
                                key: "fuel-trial"
                            }, r.createElement(l.z, {
                                linkTo: c,
                                targetBlank: !0,
                                "data-target": "fuel-buy-button-prime-trial"
                            }, Object(o.d)("Start Your Free Trial", "FuelBuyButton")))], r.createElement(l.Ya, {
                                flexDirection: l.Aa.Row,
                                display: l.X.Flex,
                                alignItems: l.f.Center,
                                "data-target": "fuel-buy-button-prime"
                            }, i)
                        }, t.onClickClaimPrimeOffer = function() {
                            if (t.props.onClickClaimPrimeOffer) {
                                var e = t.props.options.info.primeOffer;
                                e && t.props.onClickClaimPrimeOffer(e.id)
                            }
                        }, t.renderExternalAcquisitionLink = function(e) {
                            return r.createElement("a", {
                                href: e.href,
                                target: "_blank"
                            }, e.children)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.options,
                            t = e.info,
                            n = e.countryCode,
                            i = e.externalAcquisition,
                            c = e.crates,
                            d = e.userHasPrime,
                            u = e.isInGameContent,
                            p = e.size,
                            m = t.primeOffer,
                            h = n && Object(s.a)(n),
                            g = !m || !h;
                        if (t.isEntitled) return r.createElement(l.W, {
                            "data-target": "fuel-buy-button-purchased"
                        }, Object(o.d)("Purchased", "FuelBuyButton"));
                        if (!t.isForSale && i && i.isExternal) return r.createElement("div", {
                            "data-target": "fuel-buy-button-external"
                        }, r.createElement(a, {
                            source: i.description,
                            renderers: {
                                Link: this.renderExternalAcquisitionLink
                            }
                        }));
                        if (!t.isForSale && g) return this.renderUnavailableText();
                        if (m && !d) {
                            var f = t.isForSale ? this.renderBuyNowButton(t.price, c, u, p) : void 0;
                            return this.renderPrimeTreatment(d, f)
                        }
                        return m ? this.renderPrimeTreatment(d) : this.renderBuyNowButton(t.price, c, u, p)
                    }, t
                }(r.Component);
            n.d(t, "a", function() {
                return d
            })
        },
        ugtu: function(e, t, n) {
            "use strict";
            n.d(t, "j", function() {
                return s
            }), n.d(t, "k", function() {
                return l
            }), n.d(t, "l", function() {
                return c
            }), n.d(t, "e", function() {
                return d
            }), n.d(t, "d", function() {
                return u
            }), n.d(t, "h", function() {
                return p
            }), n.d(t, "b", function() {
                return m
            }), n.d(t, "i", function() {
                return h
            }), n.d(t, "c", function() {
                return g
            }), n.d(t, "f", function() {
                return f
            }), n.d(t, "g", function() {
                return v
            }), n.d(t, "a", function() {
                return b
            });
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("GxR5"),
                o = n("Ue10");

            function s(e) {
                return i.createElement(o.W, {
                    type: o.Wb.Strong
                }, e)
            }

            function l(e, t) {
                return i.createElement(o.U, {
                    to: t,
                    targetBlank: !0
                }, e)
            }

            function c(e, t) {
                return i.createElement(o.U, {
                    onClick: t
                }, e)
            }

            function d() {
                return Object(r.d)("<x:link>Forgot your username</x:link>?", {
                    "x:link": function(e) {
                        return l(e, a.b)
                    }
                }, "ServerMessage")
            }

            function u() {
                return Object(r.d)("<x:link>Forgot your password</x:link>?", {
                    "x:link": function(e) {
                        return l(e, Object(a.e)())
                    }
                }, "ServerMessage")
            }

            function p() {
                return Object(r.d)("Please <x:link>reset your password</x:link>.", {
                    "x:link": function(e) {
                        return l(e, Object(a.e)())
                    }
                }, "ServerMessage")
            }

            function m() {
                return Object(r.d)("Please <x:link>contact support</x:link> for assistance.", {
                    "x:link": function(e) {
                        return l(e, a.a)
                    }
                }, "ServerMessage")
            }

            function h() {
                return Object(r.d)("To learn more, please read <x:link>this article</x:link>.", {
                    "x:link": function(e) {
                        return l(e, a.c)
                    }
                }, "ServerMessage")
            }

            function g(e) {
                return Object(r.d)("Want to <x:click>create a new account</x:click>?", {
                    "x:click": function(t) {
                        return c(t, e)
                    }
                }, "ServerMessage")
            }

            function f(e) {
                return Object(r.d)("Want to <x:click>log in</x:click> instead?", {
                    "x:click": function(t) {
                        return c(t, e)
                    }
                }, "ServerMessage")
            }

            function v(e) {
                return Object(r.d)("If you need a Twitch account, you can <x:click>create one here</x:click>.", {
                    "x:click": function(t) {
                        return c(t, e)
                    }
                }, "ServerMessage")
            }

            function b(e) {
                return Object(r.d)("If you want to use an existing Twitch ID, you can <x:click>connect it here</x:click>.", {
                    "x:click": function(t) {
                        return c(t, e)
                    }
                }, "ServerMessage")
            }
        },
        uleC: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            });
            var i = n("/7QA"),
                r = null;

            function a(e) {
                return r || (r = {}, i.b.get("nfl_channels", []).forEach(function(e) {
                    r && (r[e] = !0)
                })), r.hasOwnProperty(e.toLowerCase())
            }

            function o(e) {
                return !!e && e === i.b.get("nfl_game_id", "")
            }
        },
        uqjC: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "clipsWatchData"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Clip"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcaster"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "boxArtURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "138"
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "190"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "language"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "viewCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "curator"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createdAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "creationState"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "url"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "videoOffsetSeconds"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "durationSeconds"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 318
                }
            };
            n.loc.source = {
                body: "# These are the fields used by the clips watch page.\nfragment clipsWatchData on Clip {\nid\nbroadcaster {\nid\nlogin\ndisplayName\n}\ngame {\nid\nboxArtURL(width: 138 height: 190)\nname\n}\nlanguage\ntitle\nslug\nviewCount\ncurator {\nid\nlogin\ndisplayName\n}\ncreatedAt\ncreationState\nurl\nvideoOffsetSeconds\nvideo {\nid\n}\ndurationSeconds\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        uu1w: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.Emote = "emote", e.Mention = "mention", e.Hashtag = "hashtag", e.None = "none"
                }(i || (i = {}))
        },
        uy8m: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Left = 0] = "Left", e[e.Middle = 1] = "Middle", e[e.Right = 2] = "Right", e[e.Back = 3] = "Back", e[e.Forward = 4] = "Forward"
                }(i || (i = {}))
        },
        v8tf: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ClipsDownloadButton"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slug"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcaster"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "videoQualities"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sourceURL"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 131
                }
            };
            n.loc.source = {
                body: "query ClipsDownloadButton($slug: ID!) {\nclip(slug: $slug) {\nid\nbroadcaster {\nid\n}\ngame {\nid\nname\n}\nvideoQualities {\nsourceURL\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        vDRX: function(e, t, n) {},
        vGFN: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "j", function() {
                return v
            }), n.d(t, "h", function() {
                return b
            }), n.d(t, "g", function() {
                return k
            }), n.d(t, "l", function() {
                return y
            }), n.d(t, "o", function() {
                return C
            }), n.d(t, "n", function() {
                return S
            }), n.d(t, "k", function() {
                return E
            }), n.d(t, "m", function() {
                return N
            }), n.d(t, "i", function() {
                return O
            }), n.d(t, "e", function() {
                return _
            }), n.d(t, "d", function() {
                return w
            }), n.d(t, "b", function() {
                return D
            }), n.d(t, "f", function() {
                return I
            }), n.d(t, "c", function() {
                return T
            }), n.d(t, "q", function() {
                return R
            }), n.d(t, "p", function() {
                return L
            });
            var i, r, a, o, s, l, c = n("mrSG"),
                d = n("/7QA"),
                u = n("2xye"),
                p = n("mBWp");

            function m(e) {
                d.p.tracking.track(u.SpadeEventType.WhisperThreadMod, {
                    conversation_id: e.threadID,
                    action: e.action
                })
            }

            function h(e) {
                return c.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return c.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, M()];
                            case 1:
                                return t = n.sent(), d.p.tracking.track(u.SpadeEventType.WhisperIgnoreUser, {
                                    ui_context: e.context,
                                    from_login: t && t.login,
                                    ignored_login: e.targetUserLogin,
                                    reason: e.reason || i.Other,
                                    source: e.source
                                }), [2]
                        }
                    })
                })
            }

            function g(e, t) {
                return c.__awaiter(this, void 0, void 0, function() {
                    var n;
                    return c.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return [4, M()];
                            case 1:
                                return n = i.sent(), d.p.tracking.track(u.SpadeEventType.WhisperThreadMod, {
                                    conversation_id: e,
                                    action: t,
                                    login: n && n.login
                                }), [2]
                        }
                    })
                })
            }

            function f(e) {
                d.p.tracking.track(u.SpadeEventType.WhisperAllThreadsMod, {
                    action: e
                })
            }

            function v() {
                f(r.MarkAllRead)
            }

            function b() {
                f(r.EnableDoNotDisturb)
            }

            function k() {
                f(r.DisableDoNotDisturb)
            }

            function y(e, t) {
                h({
                    context: t,
                    targetUserLogin: e,
                    reason: i.Spam,
                    source: "conversations_button"
                })
            }

            function C(e) {
                g(e, s.MarkNotSpam)
            }

            function S(e) {
                g(e, s.Archive)
            }

            function E(e) {
                m({
                    threadID: e,
                    action: a.Mute
                })
            }

            function N(e) {
                m({
                    threadID: e,
                    action: a.Unmute
                })
            }

            function O(e) {
                m({
                    threadID: e,
                    action: a.Expand
                })
            }

            function _(e) {
                m({
                    threadID: e,
                    action: a.Collapse
                })
            }

            function w(e) {
                m({
                    threadID: e,
                    action: a.Close
                })
            }

            function D(e) {
                m({
                    threadID: e,
                    action: a.Archive
                })
            }

            function I(e) {
                d.p.tracking.track(u.SpadeEventType.WhisperThreadCreate, {
                    conversation_id: e.threadID,
                    target_login: e.targetUserlogin,
                    source: "search_target_result",
                    search_result_rank: e.searchResultRank
                })
            }

            function T(e) {
                d.p.tracking.track(u.SpadeEventType.WhisperSearchClick, {
                    query: e.searchQuery,
                    source: "conversation_list",
                    rank: e.searchResultRank,
                    is_conversation: e.isConversation
                })
            }

            function M() {
                var e = this;
                return new Promise(function(t) {
                    setTimeout(function() {
                        return c.__awaiter(e, void 0, void 0, function() {
                            var e, n, i;
                            return c.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        e = null, r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 3, , 4]), [4, d.p.apollo.client.query({
                                            query: p
                                        })];
                                    case 2:
                                        return e = r.sent(), [3, 4];
                                    case 3:
                                        return n = r.sent(), d.k.error(n, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                                    case 4:
                                        return i = e && e.data && e.data.currentUser, t(i), [2]
                                }
                            })
                        })
                    })
                })
            }

            function R(e) {
                return c.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return c.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, M()];
                            case 1:
                                return t = n.sent(), d.p.tracking.track(u.SpadeEventType.WhisperSent, {
                                    to: e.targetUserLogin,
                                    from: t && t.login,
                                    player: "web",
                                    is_turbo: t && t.hasTurbo,
                                    conversation_id: e.threadID,
                                    availability: t && t.availability,
                                    room_type: e.inChannelChat ? l.Channel : l.Conversation
                                }), [2]
                        }
                    })
                })
            }

            function L(e) {
                return c.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return c.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, M()];
                            case 1:
                                return t = n.sent(), d.p.tracking.track(u.SpadeEventType.WhisperReceived, {
                                    to: t && t.login,
                                    from: e.targetUserLogin,
                                    player: "web",
                                    is_turbo: t && t.hasTurbo,
                                    conversation_id: e.threadID
                                }), [2]
                        }
                    })
                })
            }! function(e) {
                e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
            }(i || (i = {})),
            function(e) {
                e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
            }(r || (r = {})),
            function(e) {
                e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
            }(a || (a = {})),
            function(e) {
                e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
            }(o || (o = {})),
            function(e) {
                e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
            }(s || (s = {})),
            function(e) {
                e.Channel = "channel", e.Conversation = "conversation"
            }(l || (l = {}))
        },
        vHGB: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("ZEQw"),
                o = n("Ue10"),
                s = (n("E78O"), n("/7QA")),
                l = n("2xye"),
                c = function(e) {
                    e.badge_type = e.badge_type.toLowerCase().replace(/( |\s)/g, "_"), s.p.tracking.track(l.SpadeEventType.ChatBadgeClick, e)
                };
            n.d(t, "a", function() {
                return d
            });
            var d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isHovering: !1
                    }, t.onMouseOver = function() {
                        t.setState({
                            isHovering: !0
                        })
                    }, t.onMouseOut = function() {
                        t.setState({
                            isHovering: !1
                        })
                    }, t.onBadgeClickHandler = function() {
                        c({
                            badge_type: t.props.badge.title,
                            badge_url_target: t.targetURL
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.badge,
                        t = e.title,
                        n = e.image1x,
                        i = e.image2x,
                        a = e.image4x,
                        l = r.createElement("img", {
                            alt: t,
                            "aria-label": Object(s.d)("{badgeTitle} badge", {
                                badgeTitle: t
                            }, "Badge"),
                            className: "chat-badge",
                            src: n,
                            srcSet: n + " 1x, " + i + " 2x, " + a + " 4x",
                            onMouseOver: this.onMouseOver,
                            onMouseOut: this.onMouseOut
                        });
                    return this.targetURL = this.getTargetURL(), "" !== this.targetURL && (l = r.createElement("a", {
                        href: this.targetURL,
                        onClick: this.onBadgeClickHandler,
                        target: "_blank",
                        "data-a-target": "chat-badge"
                    }, l)), this.state.isHovering ? r.createElement(o.Zb, {
                        align: o.ac.Left,
                        "data-a-target": "chat-badge",
                        display: o.X.Inline,
                        key: n,
                        label: t,
                        offsetY: "0.9rem"
                    }, l) : l
                }, t.prototype.getTargetURL = function() {
                    var e = this.props.badge;
                    switch (e.clickAction) {
                        case a.e:
                            return e.clickURL;
                        case a.c:
                            return e.channelName ? this.getSubscriberLink() : "";
                        case a.d:
                            return "https://www.twitch.tv/products/turbo?ref=chat_badge";
                        default:
                            return ""
                    }
                }, t.prototype.getSubscriberLink = function() {
                    return "https://www.twitch.tv/" + this.props.badge.channelName + "/subscribe?ref=in_chat_subscriber_link"
                }, t
            }(r.Component)
        },
        vKai: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("fvjX"),
                s = n("/7QA"),
                l = n("gcd7"),
                c = n("WytW"),
                d = n("NNSq"),
                u = n("CzFK"),
                p = n("TOso"),
                m = n("NMMG"),
                h = n("l1Uh"),
                g = n("PrJw"),
                f = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleWhisperCommand = function(e) {
                            var n = Object(c.q)(e),
                                i = n.recipientLogin,
                                r = n.body;
                            return i && r ? t.props.isEmbedded || t.props.isPopout ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("Please use the whisper window for whispers.", "WhisperCommandHandler")
                                })
                            } : i.toLowerCase() === t.props.userLogin ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("You cannot whisper to yourself.", "WhisperCommandHandler")
                                })
                            } : t.props.userID ? t.initiateWhisper(i, r) : void 0 : {
                                preserveInput: !0,
                                deferred: Promise.resolve({
                                    notice: Object(s.d)('Usage: "/w [login] [message]"', "WhisperCommandHandler")
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(l.a, {
                            command: "w",
                            handler: this.handleWhisperCommand
                        })
                    }, t.prototype.initiateWhisper = function(e, t) {
                        var n = this;
                        return {
                            deferred: new Promise(function(r, a) {
                                return i.__awaiter(n, void 0, void 0, function() {
                                    var n, o, l, c;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                return i.trys.push([0, 2, , 3]), [4, Object(d.a)(e)];
                                            case 1:
                                                return n = i.sent(), [3, 3];
                                            case 2:
                                                return o = i.sent(), s.k.warn(o, "Failed to fetch user targeted by whisper command.", {
                                                    recipientLogin: e
                                                }), [2, a(o)];
                                            case 3:
                                                return n ? [3, 4] : [2, r({
                                                    notice: Object(s.d)("No user matching that login.", "WhisperCommandHandler")
                                                })];
                                            case 4:
                                                l = Object(m.a)(this.props.userID, n), i.label = 5;
                                            case 5:
                                                return i.trys.push([5, 7, , 8]), Object(g.m)({
                                                    threadID: l,
                                                    targetUserLogin: e,
                                                    inChannelChat: !0
                                                }), [4, Object(p.b)({
                                                    currentUserID: this.props.userID,
                                                    emotes: this.props.emoteMap || {},
                                                    message: t,
                                                    recipientUserID: n
                                                })];
                                            case 6:
                                                return i.sent(), [3, 8];
                                            case 7:
                                                return c = i.sent(), s.k.error(c, "Failed to send whisper using whisper command.", {
                                                    currentUserID: this.props.userID,
                                                    recipientUserID: n
                                                }), [2, r({
                                                    notice: Object(s.d)("Unable to send Whisper at this moment.", "WhisperCommandHandler")
                                                })];
                                            case 8:
                                                return this.props.openThread(l), [2, r({})]
                                        }
                                    })
                                })
                            })
                        }
                    }, t
                }(r.Component);
            var v = Object(a.connect)(null, function(e) {
                return Object(o.bindActionCreators)({
                    openThread: function(e) {
                        return Object(u.l)({
                            threadID: e,
                            collapsed: !0
                        }, Object(h.a)())
                    }
                }, e)
            })(f);
            n.d(t, "a", function() {
                return v
            })
        },
        vSJR: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("u5aL"),
                s = n("N0BP"),
                l = n("Ue10");
            ! function(e) {
                e.DropdownInsideClickDetector = "dropdown-inside-click-detector", e.DropdownWrapper = "dropdown-wrapper"
            }(i || (i = {}));
            var c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isOpen: !!t.props.openByDefault
                    }, t.handleOnClickOut = function() {
                        t.hideDropdown()
                    }, t.handleButtonClick = function() {
                        t.setState(function(e) {
                            return {
                                isOpen: !e.isOpen,
                                hasInteracted: !0
                            }
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.isOpen)
                        })
                    }, t.hideDropdown = function() {
                        t.setState({
                            isOpen: !1
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!0)
                        })
                    }, t.handleInsideDropdownClick = function() {
                        t.hideDropdown()
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.children;
                    return this.props.hideDropdownOnInsideClick && (e = a.createElement("div", {
                        "data-test-selector": i.DropdownInsideClickDetector,
                        onClick: this.handleInsideDropdownClick
                    }, e)), a.createElement(o.a, {
                        onClickOut: this.handleOnClickOut
                    }, a.createElement(l.Fb, r.__assign({
                        background: this.state.isOpen ? l.r.Base : void 0,
                        borderRadius: l.x.Large,
                        className: "inline-dropdown",
                        elevation: this.state.isOpen ? 3 : void 0,
                        padding: .5,
                        position: l.kb.Relative
                    }, Object(s.a)(this.props)), a.createElement("div", {
                        className: "inline-dropdown__button-wrapper"
                    }, a.createElement(l.z, {
                        blurAfterClick: !0,
                        dropdown: !0,
                        onClick: this.handleButtonClick,
                        size: l.D.Large,
                        type: l.F.Hollow
                    }, this.props.buttonLabel)), a.createElement(l.Fb, {
                        attachLeft: !0,
                        background: l.r.Base,
                        borderRadius: l.x.Large,
                        "data-test-selector": i.DropdownWrapper,
                        display: this.state.isOpen ? l.X.Block : l.X.Hide,
                        elevation: 3,
                        fullWidth: !0,
                        padding: {
                            y: 1
                        },
                        position: l.kb.Absolute,
                        zIndex: l.jc.Above
                    }, e)))
                }, t.prototype.toggleDropdown = function(e) {
                    void 0 === e && (e = !this.state.isOpen), this.setState({
                        isOpen: e
                    })
                }, t
            }(a.Component);
            n.d(t, "a", function() {
                return c
            })
        },
        vSeP: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                r = Object(i.a)("ActiveChatters"),
                a = r.withChatServiceProvider,
                o = (0, r.withContext)(function(e) {
                    return {
                        activeChattersAPI: e.serviceAPI,
                        setActiveChattersAPI: e.setServiceAPI
                    }
                })
        },
        vUXZ: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Clips_DeleteClips"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DeleteClipsInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "deleteClips"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "clips"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "slug"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 106
                }
            };
            n.loc.source = {
                body: "mutation Clips_DeleteClips($input: DeleteClipsInput!) {\ndeleteClips(input: $input) {\nclips {\nid\nslug\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        vhpE: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return m
            }), n.d(t, "a", function() {
                return h
            });
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("wbMx"),
                s = n("+GjP"),
                l = n("2xye"),
                c = n("MLDe"),
                d = n("McYG"),
                u = n("4L7N"),
                p = n("Ue10"),
                m = [{
                    type: o.b.Twitter,
                    params: {
                        tt_medium: "twtr"
                    }
                }, {
                    type: o.b.Facebook,
                    params: {
                        tt_medium: "fb"
                    }
                }, {
                    type: o.b.Reddit,
                    params: {
                        tt_medium: "redt"
                    }
                }, {
                    type: o.b.Copy
                }];
            ! function(e) {
                e.MainContainer = "main-container", e.DownloadButtonContainer = "download-button-container", e.ShareButtonTwitter = "share-button-twitter", e.ShareButtonFacebook = "share-button-facebook", e.ShareButtonReddit = "share-button-reddit", e.ShareButtonCopy = "share-button-copy"
            }(i || (i = {}));
            var h = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = {
                            margin: {
                                right: 1
                            }
                        },
                        t = {};
                    return this.props.asBalloon && (t = {
                        justifyContent: p.Xa.Between
                    }, e = {}), a.createElement(p.Ya, r.__assign({
                        className: "clips-social-share",
                        display: p.X.Flex,
                        flexWrap: p.Ba.NoWrap
                    }, t, {
                        "data-test-selector": i.MainContainer
                    }), a.createElement(p.Ya, r.__assign({
                        display: p.X.InlineBlock
                    }, e, {
                        "data-test-selector": i.DownloadButtonContainer
                    }), a.createElement(u.a, {
                        broadcasterLogin: this.props.clip.broadcaster && this.props.clip.broadcaster.login || "",
                        broadcasterId: this.props.clip.broadcaster && this.props.clip.broadcaster.id || "",
                        slug: this.props.clip.slug,
                        pageType: this.props.pageType
                    })), this.renderSocialButton(e, i.ShareButtonTwitter, o.b.Twitter, {
                        tt_medium: "twtr"
                    }), this.renderSocialButton(e, i.ShareButtonFacebook, o.b.Facebook, {
                        tt_medium: "fb"
                    }), this.renderSocialButton(e, i.ShareButtonReddit, o.b.Reddit, {
                        tt_medium: "redt"
                    }), this.renderSocialButton(e, i.ShareButtonCopy, o.b.Copy))
                }, t.prototype.renderSocialButton = function(e, t, n, i) {
                    var u = Object(s.e)(this.props.clip.url, i);
                    return this.props.pageType === l.PageviewLocation.ClipsWatchPage && this.props.clip.broadcaster && this.props.clip.broadcaster.login && (u = Object(s.e)(Object(d.a)(this.props.clip.slug, this.props.clip.broadcaster.login), i)), a.createElement(p.Ya, r.__assign({
                        key: n
                    }, e, {
                        "data-test-selector": t
                    }), a.createElement(o.a, {
                        key: n,
                        type: n,
                        text: this.props.clip.title,
                        url: u,
                        onShareClick: Object(c.c)(this.props.clip.id, this.props.clip.game && this.props.clip.game.name, this.props.clip.broadcaster && this.props.clip.broadcaster.id, this.props.clip.broadcaster && this.props.clip.broadcaster.login, this.props.pageType)
                    }))
                }, t
            }(a.Component)
        },
        vrNp: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("i4un"),
                a = n("dIU+"),
                o = n("QjI3"),
                s = n("Ue10"),
                l = function(e) {
                    return Object(r.d)() ? i.createElement(s.Ya, {
                        display: s.X.Flex,
                        flexWrap: s.Ba.NoWrap,
                        justifyContent: s.Xa.Between,
                        margin: {
                            right: 1
                        }
                    }, i.createElement(s.Ya, null, i.createElement(a.a, {
                        channelLogin: e.login,
                        followUIType: a.b.IconAndText,
                        unfollowUIType: a.b.IconOnly,
                        balloonDirection: s.v.TopRight
                    })), i.createElement(s.Ya, {
                        margin: {
                            left: 1
                        }
                    }, i.createElement(o.a, {
                        channelLogin: e.login,
                        balloonDirection: s.v.TopRight
                    }))) : null
                };
            l.displayName = "SocialButtonsGroup", n.d(t, "a", function() {
                return l
            })
        },
        vtET: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "channelCollection"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Collection"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "items"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "1"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "totalCount"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "InlineFragment",
                                                    typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                            kind: "Name",
                                                            value: "Video"
                                                        }
                                                    },
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "FragmentSpread",
                                                            name: {
                                                                kind: "Name",
                                                                value: "channelVideo"
                                                            },
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "owner"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 269
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/channel/queries/channel-video.gql"\n#import "twilight/features/channel/queries/channel.gql"\nfragment channelCollection on Collection {\nid\nitems(first: 1) {\ntotalCount\nedges {\nnode {\n... on Video {\n...channelVideo\n}\n}\n}\n}\nowner {\n...channel\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("RTtf").definitions)), i.definitions = i.definitions.concat(a(n("BbLt").definitions)), e.exports = i
        },
        vz3z: function(e, t, n) {},
        wC0O: function(e, t, n) {},
        wbMx: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return d
            });
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("Jxh/"),
                l = n("r62z"),
                c = n("Ue10");
            n("jeZI");
            ! function(e) {
                e[e.Twitter = 0] = "Twitter", e[e.Reddit = 1] = "Reddit", e[e.VKontakte = 2] = "VKontakte", e[e.Facebook = 3] = "Facebook", e[e.Copy = 4] = "Copy", e[e.CopyInput = 5] = "CopyInput", e[e.Download = 6] = "Download"
            }(i || (i = {}));
            var d = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderLink = function() {
                        var e = "social-button__link " + n.addSocialClassModifier("social-button__link");
                        return n.props.type === i.Download ? a.createElement("a", r.__assign({
                            href: n.props.url,
                            target: "_blank",
                            className: e,
                            onClick: n.onShareClickHandler
                        }, Object(c.kc)(n.props), {
                            download: n.props.text
                        }), n.renderIcon()) : n.isLink() ? a.createElement("a", r.__assign({
                            href: n.getLinkTarget(),
                            target: "_blank",
                            className: e,
                            onClick: n.onShareClickHandler
                        }, Object(c.kc)(n.props)), n.renderIcon()) : a.createElement("button", r.__assign({
                            onClick: n.copyPageUrl,
                            onMouseLeave: n.clearIsCopiedStatus,
                            className: e
                        }, Object(c.kc)(n.props)), n.renderIcon())
                    }, n.onShareClickHandler = function() {
                        n.props.onShareClick && n.props.onShareClick(n.props.type)
                    }, n.clearIsCopiedStatus = function() {
                        n.setState({
                            isCopied: !1
                        })
                    }, n.getUrl = function() {
                        return n.props.url || window.location.href
                    }, n.copyPageUrl = function(e) {
                        e && e.preventDefault(), n.props.onShareClick && n.props.onShareClick(n.props.type), Object(s.a)(n.getUrl()), n.setState({
                            isCopied: !0
                        })
                    }, n.renderIcon = function() {
                        var e = n.getAssetFromType();
                        return a.createElement(c.Ya, {
                            className: "social-button__icon " + n.addSocialClassModifier("social-button__icon"),
                            display: c.X.Flex,
                            alignItems: c.f.Center,
                            justifyContent: c.Xa.Center
                        }, a.createElement(c.tb, {
                            asset: e
                        }))
                    }, n.isLink = function() {
                        return n.props.type !== i.Copy
                    }, n.getTooltipFromType = function() {
                        switch (n.props.type) {
                            case i.Twitter:
                                return "Twitter";
                            case i.Reddit:
                                return "Reddit";
                            case i.Facebook:
                                return "Facebook";
                            case i.VKontakte:
                                return "VKontakte";
                            case i.Download:
                                return Object(o.d)("Download", "SocialButton");
                            case i.Copy:
                                return n.state.isCopied ? Object(o.d)("Copied", "SocialButton") : Object(o.d)("Copy to clipboard", "SocialButton");
                            default:
                                return ""
                        }
                    }, n.getAssetFromType = function() {
                        switch (n.props.type) {
                            case i.Twitter:
                                return c.ub.Twitter;
                            case i.Facebook:
                                return c.ub.Facebook;
                            case i.VKontakte:
                                return c.ub.VKontakte;
                            case i.Reddit:
                                return c.ub.Reddit;
                            case i.Download:
                                return c.ub.Download;
                            case i.Copy:
                            default:
                                return c.ub.Copy
                        }
                    }, n.addSocialClassModifier = function(e) {
                        switch (n.props.type) {
                            case i.Twitter:
                                return e + "--twitter";
                            case i.Reddit:
                                return e + "--reddit";
                            case i.Facebook:
                                return e + "--facebook";
                            case i.VKontakte:
                                return e + "--vkontakte";
                            case i.Download:
                                return e + "--download";
                            case i.Copy:
                                return e + "--copy";
                            default:
                                return ""
                        }
                    }, n.getLinkTarget = function() {
                        var e = n.props,
                            t = e.text,
                            r = e.type,
                            a = n.getUrl(),
                            o = t || "";
                        switch (r) {
                            case i.Reddit:
                                return Object(l.b)(a, o);
                            case i.VKontakte:
                                return Object(l.d)(a);
                            case i.Facebook:
                                return Object(l.a)(a);
                            case i.Twitter:
                                return Object(l.c)(a, o);
                            default:
                                return ""
                        }
                    }, n.state = {
                        isCopied: !1
                    }, n
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(c.Ya, {
                        className: "social-button"
                    }, a.createElement(c.Zb, {
                        label: this.getTooltipFromType(),
                        direction: c.bc.Bottom
                    }, this.renderLink()))
                }, t
            }(a.Component)
        },
        wiBv: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "fuelGame"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Game"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "product"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "fuelProduct"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 121
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/fuel/models/fuel-product.gql"\nfragment fuelGame on Game {\nid\nname\nproduct {\n...fuelProduct\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("M0lL").definitions)), e.exports = i
        },
        wqI2: function(e, t, n) {},
        wsgK: function(e, t, n) {},
        wtKP: function(e, t, n) {},
        wxwP: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("fvjX"),
                s = n("/7QA"),
                l = n("CFw/"),
                c = n.n(l),
                d = n("aCAx"),
                u = n("Ue10"),
                p = (n("9RDd"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("div", {
                            onClick: this.props.closeModal
                        }, r.createElement(u.i, {
                            type: u.n.FadeIn,
                            duration: u.k.Long,
                            timing: u.m.EaseInOut,
                            enabled: !0
                        }, r.createElement(u.Fb, {
                            className: "browser-push-notifications-upsell",
                            alignItems: u.f.Center,
                            justifyContent: u.Xa.Center,
                            position: u.kb.Fixed,
                            display: u.X.Flex,
                            background: u.r.Overlay,
                            fullHeight: !0,
                            fullWidth: !0,
                            attachTop: !0,
                            attachLeft: !0
                        }, r.createElement(u.Ya, {
                            className: "browser-push-notifications-upsell__container",
                            display: u.X.Flex,
                            textAlign: u.Sb.Center,
                            padding: {
                                x: 1
                            },
                            position: u.kb.Relative
                        }, r.createElement(u.i, {
                            type: u.n.SlideInBottom,
                            duration: u.k.Long,
                            timing: u.m.EaseInOut,
                            enabled: !0
                        }, r.createElement(u.W, {
                            type: u.Wb.H3,
                            fontSize: u.Ca.Size3,
                            lineHeight: u.Za.Body
                        }, Object(s.d)("Don't miss out when your favorite streamers go live!", "BrowserNotificationsUpsellModal")), r.createElement(u.Ya, {
                            margin: {
                                top: 1
                            }
                        }, r.createElement(u.W, {
                            type: u.Wb.H4,
                            fontSize: u.Ca.Size4,
                            color: u.O.OverlayAlt,
                            lineHeight: u.Za.Body
                        }, Object(s.d)("Turn on Browser Notifications to get updates even when your browser window is minimized", "BrowserNotificationsUpsellModal")))), r.createElement(u.Ya, {
                            className: "browser-push-notifications-upsell__arrow",
                            position: u.kb.Absolute,
                            attachTop: !0,
                            attachLeft: !0
                        }, r.createElement(u.i, {
                            type: u.n.SlideInBottom,
                            delay: u.j.Short,
                            duration: u.k.Long,
                            timing: u.m.EaseInOut,
                            enabled: !0
                        }, r.createElement("img", {
                            src: c.a
                        })))))))
                    }, t
                }(r.Component));
            var m = Object(a.connect)(null, function(e) {
                return Object(o.bindActionCreators)({
                    closeModal: d.c
                }, e)
            })(p);
            n.d(t, !1, function() {
                return p
            }), n.d(t, "a", function() {
                return m
            })
        },
        "x0+1": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            alwaysShowMessage: !1
                        }, t.renderBody = function() {
                            return t.state.alwaysShowMessage ? t.props.messageBody : r.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted"
                            }, r.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + Object(a.d)("click to show", "MessageDeletedLine") + ">"))
                        }, t.alwaysShowMessage = function(e) {
                            e && e.preventDefault(), t.setState({
                                alwaysShowMessage: !0
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.targetLogin,
                            n = e.moderatorLogin;
                        return n ? Object(a.d)("{moderatorLogin} deleted {targetLogin}'s message: {body}", {
                            moderatorLogin: n,
                            targetLogin: t,
                            body: this.renderBody()
                        }, "MessageDeletedLine") : Object(a.d)("A moderator deleted {targetLogin}'s message: {body}", {
                            targetLogin: t,
                            body: this.renderBody()
                        }, "MessageDeletedLine")
                    }, t
                }(r.Component);
            n.d(t, "a", function() {
                return o
            })
        },
        x0gr: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return l
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "c", function() {
                return d
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("r2Xj"),
                s = n("oi4T"),
                l = function(e) {
                    r.o.track(a.SpadeEventType.ChatSettingsOpened, Object(s.a)(e))
                },
                c = function(e) {
                    var t = i.__assign({}, Object(s.a)(e), {
                        setting_name: e.settingName,
                        new_value: e.newValue.toString()
                    });
                    r.o.track(a.SpadeEventType.ChatSettingsChanged, t)
                },
                d = function(e) {
                    var t = i.__assign({}, Object(s.a)(e), {
                        setting_name: o.a.FollowerDuration,
                        new_value: e.newValue.toString(),
                        follower_mode_on: e.followerModeOn
                    });
                    r.o.track(a.SpadeEventType.ChatSettingsChanged, t)
                }
        },
        xDdc: function(e, t, n) {},
        xM4F: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoChatChannelAndCommentCreatorAndVideoTrackingContext"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoCreatorID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "commentCreator"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "users"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "ids"
                                },
                                value: {
                                    kind: "ListValue",
                                    values: [{
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "videoCreatorID"
                                        }
                                    }, {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "commentCreator"
                                        }
                                    }]
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 245
                }
            };
            n.loc.source = {
                body: "query VideoChatChannelAndCommentCreatorAndVideoTrackingContext($videoCreatorID: ID! $commentCreator: ID! $videoID: ID) {\nusers(ids: [$videoCreatorID $commentCreator]) {\nid\nlogin\n}\nvideo(id: $videoID) {\nid\nbroadcastType\ntitle\ngame {\nid\nname\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        xXlL: function(e, t, n) {
            "use strict";

            function i(e) {
                return {
                    id: "" + e.id,
                    start: e.start,
                    end: e.end
                }
            }

            function r(e) {
                return {
                    __typename: "WhisperMessageEdge",
                    cursor: "" + e.data_object.id,
                    node: {
                        __typename: "WhisperMessage",
                        id: e.data_object.message_id,
                        nonce: e.data_object.nonce,
                        sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                        editedAt: null,
                        deletedAt: null,
                        content: {
                            __typename: "MessageBody",
                            content: e.data_object.body,
                            emotes: e.data_object.tags.emotes.map(function(e) {
                                return o(i(e))
                            })
                        },
                        from: {
                            __typename: "User",
                            id: "" + e.data_object.from_id
                        }
                    }
                }
            }

            function a(e) {
                return e.map(function(e) {
                    return o(i(e))
                })
            }

            function o(e) {
                return {
                    from: e.start,
                    to: e.end,
                    emoteID: e.id,
                    id: e.id + ";" + e.start + ";" + e.end,
                    setID: "0",
                    __typename: "EmbeddedEmote"
                }
            }
            n.d(t, "c", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            })
        },
        xm8T: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Fuel_ClaimPrimeOffer_RENAME2"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ClaimPrimeOfferInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "claimPrimeOffer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "hasEntitlement"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "claimData"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 141
                }
            };
            n.loc.source = {
                body: "mutation Fuel_ClaimPrimeOffer_RENAME2($input: ClaimPrimeOfferInput!) {\nclaimPrimeOffer(input: $input) {\nself {\nhasEntitlement\nclaimData\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        xyN1: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelRoot_Clip"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slugID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channelCurrentUser"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slugID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "channelClip"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 249
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/channel/queries/channel-current-user.gql"\n#import "twilight/features/channel/queries/channel-clip.gql"\nquery ChannelRoot_Clip(\n$slugID: ID!\n) {\ncurrentUser {\n...channelCurrentUser\n}\nclip(slug: $slugID) {\n...channelClip\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("NJiF").definitions)), i.definitions = i.definitions.concat(a(n("oc+d").definitions)), e.exports = i
        },
        y2lK: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("SDEh"),
                r = n("edgk"),
                a = n("s/8O");

            function o(e, t, n, o, s) {
                var l = n && n.product;
                if (n && l) {
                    Object(a.b)({
                        user: t,
                        game: n,
                        product: l,
                        info: e,
                        location: o
                    });
                    var c = "";
                    t && t.settings && t.settings.isCommerceRevShareEnabled && (c = "&br_id=" + t.id),
                        function(e, t) {
                            var n = window.open(e, "Twitch", "width=1024,height=600,scrollbars=yes");
                            if (!n || Object(i.a)()) return;
                            n.focus(), Object(r.a)(n, function(e) {
                                t(e)
                            })
                        }(e.purchaseURL + c, s)
                }
            }
        },
        y4Ne: function(e, t, n) {},
        y6KF: function(e, t, n) {
            "use strict";
            n.d(t, "f", function() {
                return a
            }), n.d(t, "e", function() {
                return o
            }), n.d(t, "r", function() {
                return r
            }), n.d(t, "p", function() {
                return d
            }), n.d(t, "k", function() {
                return u
            }), n.d(t, "n", function() {
                return p
            }), n.d(t, "j", function() {
                return m
            }), n.d(t, "l", function() {
                return h
            }), n.d(t, "m", function() {
                return g
            }), n.d(t, "o", function() {
                return f
            }), n.d(t, "s", function() {
                return v
            }), n.d(t, "t", function() {
                return b
            }), n.d(t, "h", function() {
                return k
            }), n.d(t, "g", function() {
                return y
            }), n.d(t, "i", function() {
                return C
            }), n.d(t, "q", function() {
                return S
            }), n.d(t, "b", function() {
                return s
            }), n.d(t, "c", function() {
                return l
            }), n.d(t, "d", function() {
                return c
            });
            var i = n("YwGE");
            n.d(t, "a", function() {
                return i.a
            });
            var r, a = "generated",
                o = "custom";
            ! function(e) {
                e.Private = "PRIVATE", e.Public = "PUBLIC"
            }(r || (r = {}));
            var s, l, c, d = "uploading",
                u = "pending_transcode",
                p = "transcoding",
                m = "failed",
                h = "recorded",
                g = "recording",
                f = "unprocessed",
                v = [h, g],
                b = [p, u, m, f, d],
                k = "FORMAT_NOT_SUPPORTED",
                y = "BAD_ASSET",
                C = "INTERNAL_ERROR",
                S = {
                    VIDEO_PREMIERE_STATUS_UNSCHEDULED: "unscheduled",
                    VIDEO_PREMIERE_STATUS_SCHEDULED: "scheduled",
                    VIDEO_PREMIERE_STATUS_STARTED: "started",
                    VIDEO_PREMIERE_STATUS_FAILED: "failed"
                };
            ! function(e) {
                e.Youtube = "youtube"
            }(s || (s = {})),
            function(e) {
                e.None = "NONE", e.Expiring = "EXPIRING"
            }(l || (l = {})),
            function(e) {
                e.Everyone = "", e.SubOnly = "sub_only"
            }(c || (c = {}))
        },
        y8iI: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ClipsOptions_User"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSiteAdmin"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 76
                }
            };
            n.loc.source = {
                body: "query ClipsOptions_User {\ncurrentUser {\nid\nroles {\nisStaff\nisSiteAdmin\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "yI+y": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "c", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("/7QA"),
                r = n("d0ua"),
                a = n("D7An");

            function o() {
                return i.p.experiments.getAssignment(a.b.TheatreFullscreen) || "control"
            }

            function s(e) {
                return "theatre" === e
            }

            function l(e) {
                return s(e) ? document.body : void 0
            }

            function c(e) {
                s(o()) && (e ? i.p.store.dispatch(Object(r.D)()) : i.p.store.dispatch(Object(r.A)()))
            }
        },
        ySEf: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "campaignSubscriptionProduct"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "SubscriptionProduct"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "price"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "url"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "emoteSetID"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "emotes"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "token"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "self"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "promotion"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "newPrice"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "oldPrice"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "discountType"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "discountValue"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "giftPromotion"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "newPrice"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "oldPrice"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "discountType"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "discountValue"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 255
                }
            };
            n.loc.source = {
                body: "fragment campaignSubscriptionProduct on SubscriptionProduct {\nid\nprice\nurl\nemoteSetID\ndisplayName\nname\nemotes {\nid\ntoken\n}\nself {\npromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ySk3: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("oi4T"),
                s = function(e) {
                    var t = i.__assign({}, Object(o.a)(e), {
                        mentioned_user_display_name: e.mentionedUserDisplayName,
                        user: e.userLogin
                    });
                    r.o.track(a.SpadeEventType.ChatMentionUsed, t)
                }
        },
        yWUM: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = "0h0m1s";

            function r(e) {
                if (0 === e) return i;
                if (!e || e < 0) return "";
                var t = e,
                    n = Math.floor(t / 3600);
                return t %= 3600, n + "h" + Math.floor(t / 60) + "m" + (t %= 60) + "s"
            }
        },
        yXtP: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_UpdateChatColor"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UpdateChatColorInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "updateChatColor"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "chatColor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 120
                }
            };
            n.loc.source = {
                body: "mutation Chat_UpdateChatColor($input: UpdateChatColorInput!){\nupdateChatColor(input: $input) {\nuser {\nid\nchatColor\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        yZCp: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return p
            });
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("7TkE"),
                o = n.n(a),
                s = n("5zXJ"),
                l = n("VJHF"),
                c = n("8SX2"),
                d = n("Ue10"),
                u = (n("OXQr"), s.c + "/hgc2018/hgc-gift-chat-icon.png"),
                p = function(e) {
                    if (!(e.event.messageID && e.event.userLogin && e.event.displayName)) return null;
                    var t = i.createElement(c.a, {
                            contentID: e.event.messageID,
                            login: e.event.userLogin,
                            sourceType: e.event.sourceType
                        }, e.event.displayName),
                        n = Object(r.d)("{gifterButton}'s Cheer shared rewards to {selectedCount} others in chat.", {
                            gifterButton: t,
                            selectedCount: e.event.selectedCount
                        }, "RewardGiftNoticeLine"),
                        a = Object(r.d)("<x:link>Cheer at least {minCheerAmount} Bits to share rewards with chat!</x:link>", {
                            minCheerAmount: e.event.minCheerAmount,
                            "x:link": function(e) {
                                return i.createElement(d.U, {
                                    to: "https://blog.twitch.tv/earn-overwatch-league-loot-a494e1c21634",
                                    targetBlank: !0
                                }, e)
                            }
                        }, "RewardGiftNoticeLine"),
                        s = o.a;
                    return e.event.domain === l.c && (n = Object(r.d)("{gifterButton}'s Cheer shared Heroes Loot Chests with {selectedCount} other viewers in Chat!", {
                        gifterButton: t,
                        selectedCount: e.event.selectedCount
                    }, "RewardGiftNoticeLine"), a = Object(r.d)("<x:link>Cheer at least {minCheerAmount} Bits at once and share with Chat!</x:link>", {
                        minCheerAmount: e.event.minCheerAmount,
                        "x:link": function(e) {
                            return i.createElement(d.U, {
                                to: "",
                                targetBlank: !0
                            }, e)
                        }
                    }, "RewardGiftNoticeLine"), s = u), i.createElement(d.Ya, {
                        className: "reward-gift-user-notice",
                        margin: {
                            y: .5
                        }
                    }, i.createElement(d.Ya, {
                        display: d.X.Flex,
                        alignItems: d.f.Center,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, i.createElement(d.Qa, {
                        margin: {
                            right: 1
                        }
                    }, i.createElement("img", {
                        className: "reward-gift-user-notice__icon",
                        src: s
                    })), i.createElement(d.W, {
                        color: d.O.Alt2
                    }, n)), e.event.minCheerAmount > 0 && i.createElement(d.Ya, {
                        className: "reward-gift-user-notice__action",
                        padding: {
                            x: 1,
                            y: 1
                        }
                    }, i.createElement(d.W, {
                        bold: !0,
                        color: d.O.Link
                    }, a)))
                }
        },
        ya7N: function(e, t, n) {},
        ybym: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("fvjX"),
                o = n("/7QA"),
                s = n("yR8l"),
                l = n("eDVu"),
                c = n("0Log"),
                d = n("/aPz"),
                u = n("GnwI"),
                p = n("Ue10"),
                m = n("DOvc"),
                h = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        if (this.props.data.loading || this.props.data.error || !this.props.data.user || !this.props.data.user.stream || !this.props.data.user.stream.id) return null;
                        var e = this.props.data.user.stream.viewersCount || 0,
                            t = this.props.formatCount ? this.props.formatCount(e) : Object(o.g)(e, {
                                maximumFractionDigits: 2
                            });
                        return this.props.isInSideNav ? r.createElement(p.Zb, {
                            label: Object(o.d)("{viewerCount, number} Viewers", {
                                viewerCount: e
                            }, "ChannelViewersCount"),
                            direction: p.bc.Top
                        }, r.createElement(p.Ya, {
                            display: p.X.Flex
                        }, r.createElement(p.W, {
                            bold: !0,
                            fontSize: p.Ca.Size3
                        }, t))) : r.createElement(p.Eb, {
                            value: Object(o.f)(e),
                            label: Object(o.d)("Watching Now", "ChannelViewersCount"),
                            icon: p.ub.GlyphLive,
                            "data-a-target": "channel-viewers-count"
                        })
                    }, t
                }(r.Component),
                g = Object(a.compose)(Object(s.a)(m), Object(l.a)(function(e) {
                    return {
                        query: m,
                        skip: e.data.loading || !e.data.user || !e.data.user.id,
                        variables: {
                            login: e.login
                        },
                        topic: e.data.user && e.data.user.id ? Object(d.J)(e.data.user.id) : "",
                        type: c.PubsubMessageType.ViewCount,
                        mutator: function(e, t) {
                            return t.user && t.user.stream ? (t.user.stream.viewersCount = e.viewers, t) : t
                        }
                    }
                }), Object(u.b)("ChannelViewersCount"))(h);
            n.d(t, !1, function() {
                return h
            }), n.d(t, "a", function() {
                return g
            })
        },
        ygQa: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("yXtP");

            function o() {
                var e = this;
                return Object(r.a)(a, {
                    props: function(t) {
                        return {
                            updateChatColorMutation: function(n) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            color: n
                                                        }
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return [2, e.sent().data];
                                            case 2:
                                                throw new Error("Update chat color mutation is not ready")
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        yzwe: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return s
            });
            var i, r = n("mrSG"),
                a = n("yR8l"),
                o = n("FAYk");

            function s(e) {
                var t = this;
                return Object(a.a)(o, {
                    props: function(n) {
                        return {
                            unmodUserMutation: function(i) {
                                return r.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return r.__generator(this, function(r) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("unmodUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }! function(e) {
                e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserNotFound = "TARGET_NOT_FOUND", e.UserNotMod = "TARGET_NOT_MOD"
            }(i || (i = {}))
        },
        yzyL: function(e, t) {},
        "z+dA": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage_SubscribeButton_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emoteSetID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "canPrimeSubscribe"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "purchasedWithPrime"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tier"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "endsAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isDNRd"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "platform"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "pendingSubscription"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "price"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "startsAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "tier"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "type"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "gift"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isGift"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "requestInfo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "countryCode"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 355
                }
            };
            n.loc.source = {
                body: "query ChannelPage_SubscribeButton_User($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nsubscriptionProducts {\nid\nemoteSetID\nname\n}\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\npurchasedWithPrime\ntier\nendsAt\nisDNRd\nplatform\npendingSubscription {\nprice\nstartsAt\ntier\ntype\n}\ngift {\nisGift\n}\n}\n}\n}\ncurrentUser {\nid\n}\nrequestInfo {\ncountryCode\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        z1lk: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "d", function() {
                    return r
                }), n.d(t, "b", function() {
                    return a
                }), n.d(t, "c", function() {
                    return o
                }),
                function(e) {
                    e[e.Left = 0] = "Left", e[e.Right = 1] = "Right"
                }(i || (i = {}));
            var r = "root",
                a = "addTo",
                o = "collections"
        },
        z36O: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("Ue10"),
                o = function(e) {
                    return r.createElement(a.Ya, {
                        margin: {
                            right: 1
                        },
                        display: a.X.Flex,
                        alignItems: a.f.Center
                    }, r.createElement(a.Zb, {
                        align: a.ac.Left,
                        label: e.tooltip,
                        direction: a.bc.Bottom
                    }, r.createElement(a.Ya, {
                        margin: {
                            right: .5
                        }
                    }, r.createElement(a.Fb, {
                        display: a.X.Flex,
                        alignItems: a.f.Center,
                        color: a.O.Alt2
                    }, r.createElement(a.tb, {
                        asset: e.svgAsset
                    }))), r.createElement(a.W, {
                        fontSize: a.Ca.Size5,
                        ellipsis: !0
                    }, r.createElement(a.U, i.__assign({
                        to: e.linkTo
                    }, Object(a.kc)(e), {
                        targetBlank: e.targetBlank
                    }), e.title))))
                };
            n.d(t, "a", function() {
                return o
            })
        },
        zClW: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return b
            }), n.d(t, "a", function() {
                return k
            }), n.d(t, "b", function() {
                return y
            }), n.d(t, "i", function() {
                return C
            }), n.d(t, "d", function() {
                return N
            }), n.d(t, "f", function() {
                return O
            }), n.d(t, "e", function() {
                return _
            }), n.d(t, "g", function() {
                return w
            }), n.d(t, "h", function() {
                return D
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("ZuiC"),
                s = n("ahza"),
                l = n("pU2t"),
                c = n("ZUUl"),
                d = n("fI4C"),
                u = n("fIj0"),
                p = n("xM4F"),
                m = n("8uuy");
            var h = function(e) {
                    if (e.includes("FollowersOnlyError")) return function(e) {
                        return Object(r.d)("This room is in {duration} followers-only mode. Follow this channel to join the community", {
                            duration: e
                        }, "routines-comments")
                    }(function(e) {
                        var t = e.split(" "),
                            n = t[t.length - 1].match(/((\d+)h)?(\d+)m(\d+)s/);
                        if (!Array.isArray(n)) return "";
                        return {
                            600: "10 Minutes",
                            1800: "30 Minutes",
                            3600: "1 Hour",
                            86400: "1 Day",
                            604800: "1 Week",
                            2592000: "1 Month",
                            7776000: "3 Months"
                        }[60 * parseInt(n[2] || "0", 10) * 60 + 60 * parseInt(n[3], 10) + parseInt(n[4], 10)]
                    }(e));
                    var t = {
                            CommenterBannedError: Object(r.d)("You are banned from sending messages in this channel", "routines-comments"),
                            CommentingDisabledError: Object(r.d)("Sending messages in this channel is disabled", "routines-comments"),
                            UserNotVerifiedError: Object(r.d)("Account email verification required to send a message", "routines-comments"),
                            MaxChildCommentsError: Object(r.d)("The reply limit for this message has been reached", "routines-comments"),
                            MessageLikelySpamError: Object(r.d)("Your message was blocked by the spam filter", "routines-comments"),
                            MessageContainsBannedWordsError: Object(r.d)("Your message wasn't posted due to conflicts with the channel's moderation settings", "routines-comments")
                        },
                        n = Object.keys(t).find(function(t) {
                            return e.includes(t)
                        });
                    return n ? t[n] : Object(r.d)("Unable to send a new message at this time", "routines-comments")
                },
                g = "",
                f = -1,
                v = !1,
                b = function(e, t) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        return i.__generator(this, function(n) {
                            if (v) return [2, Promise.resolve()];
                            if (Object(s.f)(t)) {
                                if (t.offset === f) return [2, Promise.resolve()];
                                f = t.offset
                            }
                            if (Object(s.d)(t)) {
                                if (t.cursor === g) return [2, Promise.resolve()];
                                g = t.cursor
                            }
                            return v = !0, [2, Object(s.g)(t).then(function(n) {
                                v = !1, Object(s.f)(t) && t.offset === f ? e.dispatch(Object(o.A)(n)) : e.dispatch(Object(o.z)(n))
                            }, function(t) {
                                v = !1, r.k.error(t, "VideoChat: unable to fetch messages"), e.dispatch(Object(o.B)())
                            })]
                        })
                    })
                },
                k = function(e, t) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var n, a, d;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, Object(s.b)(t)];
                                case 1:
                                    return (n = i.sent()).requestError ? (r.k.error(n.requestError, k.name), e.dispatch(Object(o.r)(h(""))), [2]) : n.error ? (r.k.error(new Error(n.error.error), k.name), e.dispatch(Object(o.r)(h(n.error.message))), [2]) : void 0 === n.body ? (e.dispatch(Object(o.r)(h(""))), [2]) : (a = Object(l.c)(n.body), e.dispatch(Object(o.s)(a)), e.dispatch(Object(c.b)(S, a)), setTimeout(function() {
                                        e.dispatch(Object(o.q)())
                                    }, 5e3), [3, 3]);
                                case 2:
                                    return d = i.sent(), r.k.error(d, k.name), e.dispatch(Object(o.r)(h(""))), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                y = function(e, t) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, Object(s.c)(t)];
                                case 1:
                                    return i.sent(), e.dispatch(Object(o.t)({
                                        comment: t
                                    })), e.dispatch(Object(c.b)(E, {
                                        comment: t
                                    })), [3, 3];
                                case 2:
                                    return n = i.sent(), r.k.error(n, y.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                C = function(e, t) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var n, a;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, Object(s.h)(t)];
                                case 1:
                                    return n = i.sent(), e.dispatch(Object(o.v)(n)), [3, 3];
                                case 2:
                                    return a = i.sent(), r.k.error(a, C.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                S = function(e, t, n, o) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var e, s;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, n.query({
                                        query: u,
                                        variables: {
                                            videoCreatorID: t.comments[0].channelId,
                                            videoID: t.comments[0].contentId
                                        }
                                    })];
                                case 1:
                                    return e = i.sent().data, o.track(a.SpadeEventType.ChommentCreated, Object(d.f)(t, e)), [3, 3];
                                case 2:
                                    return s = i.sent(), r.k.error(s, S.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                E = function(e, t, n, o) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var s, l;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, n.query({
                                        query: p,
                                        variables: {
                                            videoCreatorID: t.comment.channelId,
                                            commentCreator: t.comment.commenter,
                                            videoID: t.comment.contentId
                                        }
                                    })];
                                case 1:
                                    return s = i.sent().data, o.track(a.SpadeEventType.ChommentDeleted, Object(d.g)(t, e.getState(), s)), [3, 3];
                                case 2:
                                    return l = i.sent(), r.k.error(l, E.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                N = function(e, t, n, o) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var s, l;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, n.query({
                                        query: m,
                                        variables: {
                                            videoID: t.comment.contentId
                                        }
                                    })];
                                case 1:
                                    return s = i.sent().data, o.track(a.SpadeEventType.ChommentUIAction, Object(d.e)(t, e.getState(), s)), [3, 3];
                                case 2:
                                    return l = i.sent(), r.k.error(l, N.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                O = function(e, t, n, o) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var s, l;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, n.query({
                                        query: p,
                                        variables: {
                                            videoCreatorID: t.channelId,
                                            commentCreator: t.commenter,
                                            videoID: t.contentId
                                        }
                                    })];
                                case 1:
                                    return s = i.sent().data, o.track(a.SpadeEventType.ChommentUIAction, Object(d.i)(t, e.getState(), s)), [3, 3];
                                case 2:
                                    return l = i.sent(), r.k.error(l, O.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                _ = function(e, t, n, o) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var l, c, u, p;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), l = e.getState(), c = Object(s.e)(t) ? l.vodChat.comments.comments.parentComments[t.parentId].contentId : t.contentId, [4, n.query({
                                        query: m,
                                        variables: {
                                            videoID: c
                                        }
                                    })];
                                case 1:
                                    return u = i.sent().data, o.track(a.SpadeEventType.ChommentUIAction, Object(d.h)(t, e.getState(), u)), [3, 3];
                                case 2:
                                    return p = i.sent(), r.k.error(p, _.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                w = function(e, t, n, o) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var s, l;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, n.query({
                                        query: m,
                                        variables: {
                                            videoID: t.comment.contentId
                                        }
                                    })];
                                case 1:
                                    return s = i.sent().data, o.track(a.SpadeEventType.ChommentUIAction, Object(d.j)(t, e.getState(), s)), [3, 3];
                                case 2:
                                    return l = i.sent(), r.k.error(l, w.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                D = function(e, t, n, o) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var s, l;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, n.query({
                                        query: u,
                                        variables: {
                                            videoCreatorID: t.channelId,
                                            videoID: t.contentId
                                        }
                                    })];
                                case 1:
                                    return s = i.sent().data, o.track(a.SpadeEventType.ChommentUIAction, Object(d.k)(t, e.getState(), s)), [3, 3];
                                case 2:
                                    return l = i.sent(), r.k.error(l, D.name), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }
        },
        zFR8: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ClipsWatchPage_Clip"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slugID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slugID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "clipsWatchData"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 187
                }
            };
            i.loc.source = {
                body: '#import "twilight/pages/clips-watch/components/clips-watch-page/models/clips-watch-data-fragment.gql"\nquery ClipsWatchPage_Clip($slugID: ID!) {\nclip(slug: $slugID) {\n...clipsWatchData\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("uqjC").definitions)), e.exports = i
        },
        zQgx: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "c", function() {
                return d
            }), n.d(t, "d", function() {
                return u
            }), n.d(t, "g", function() {
                return p
            }), n.d(t, "j", function() {
                return m
            }), n.d(t, "f", function() {
                return h
            }), n.d(t, "k", function() {
                return g
            }), n.d(t, "h", function() {
                return f
            }), n.d(t, "e", function() {
                return v
            }), n.d(t, "l", function() {
                return b
            }), n.d(t, "i", function() {
                return k
            });
            var i = n("cr+I"),
                r = n("/7QA"),
                a = n("UWbL"),
                o = n("+GjP"),
                s = (n("vRsq"), n("DMoW")),
                l = (n("Q94S"), -1);

            function c(e) {
                return !!e && !(!e.hosting || !e.hosting.id)
            }

            function d(e) {
                return "live" === u(e)
            }

            function u(e) {
                if (e && e.stream && e.stream.id && e.stream.type) return e.stream.type
            }

            function p(e) {
                var t = Object(o.a)(e.location.search, "t");
                return t ? Object(a.a)(t) : l
            }

            function m(e, t, n) {
                t && t.owner ? r.p.setPageTitle(t.owner.displayName + " - " + t.title) : n && n.broadcaster ? r.p.setPageTitle(n.broadcaster.displayName + " - " + n.title) : e && r.p.setPageTitle(e.displayName || "")
            }

            function h(e) {
                return e && e.broadcastSettings && e.broadcastSettings.title ? e.broadcastSettings.title : ""
            }

            function g(e) {
                return !(!e || !e.id) && (!!e.campaignProperties && !!e.campaignProperties.domains && e.campaignProperties.domains.length > 0)
            }

            function f(e) {
                return e && e.stream ? e.stream.viewersCount : null
            }

            function v(e, t) {
                return t && (! function(e) {
                    return e && "" !== e.id && e.creationState && e.creationState === s.n.CREATED
                }(t) || function(e, t) {
                    return !!e && t && t.broadcaster && t.broadcaster.login && t.broadcaster.login.toLowerCase() !== e.toLowerCase()
                }(e, t))
            }

            function b(e, t) {
                return !!e && (!!t && !!t.owner && !!t.owner.login && t.owner.login.toLowerCase() !== e.toLowerCase())
            }

            function k(e) {
                var t = {},
                    n = i.parse(e.location.search),
                    r = p(e);
                return r !== l && (t.highlightTimestamp = r), n.comment && (t.highlightedMessageID = n.comment), t
            }
        },
        zWFo: function(e, t, n) {},
        zixI: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnblockUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnblockUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unblockUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 100
                }
            };
            n.loc.source = {
                body: "mutation UnblockUser($input: UnblockUserInput!) {\nunblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "zmH+": function(e, t, n) {},
        znm4: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("/MKj"),
                a = n("yR8l"),
                o = n("QzU5"),
                s = n("kRBY"),
                l = n("4rCz"),
                c = n("0Lz3"),
                d = n("WytW"),
                u = n("ZuiC"),
                p = n("sf7/"),
                m = n("HjbF"),
                h = n("kVrx"),
                g = n("zClW"),
                f = n("l41m"),
                v = function(e, t, n) {
                    return e && t && !n
                },
                b = n("Sfdh"),
                k = n("ZUUl"),
                y = n("pwkZ"),
                C = n("pq/L");
            n.d(t, "a", function() {
                return N
            });
            var S = 2;
            var E = Object(r.connect)(function(e, t) {
                    var n = {
                        comments: [],
                        currentVideoTime: e.vodChat.comments.currentVideoTime,
                        cursor: e.vodChat.comments.cursor,
                        errorMessage: e.vodChat.comments.errorMessage,
                        hasFetchedComments: e.vodChat.comments.hasLoadedData,
                        hasRequestedCurrentUserBlockList: e.vodChat.comments.hasLoadedCurrentUserBlockedList,
                        isCreationCoolDownActive: e.vodChat.comments.isPostCooldownActive,
                        isCurrentUserModerator: !1,
                        isLoggedIn: Object(s.f)(e),
                        isReplayFilterOn: e.vodChat.comments.isReplayFilterOn,
                        isScrollingSynced: e.vodChat.comments.isScrollingSynced,
                        offsetRange: Object(f.b)(e.vodChat.comments.comments),
                        replyCursorMap: e.vodChat.comments.replyCursorMap,
                        shouldSendReplayFilterError: !1,
                        hideTimestamps: e.vodChat.comments.hideTimestamps
                    };
                    if (!t.data.loading && !t.data.error && t.data.video) {
                        var i = t.data,
                            r = i.currentUser,
                            a = i.video;
                        null !== r && r.roles && (n.isCurrentUserModerator = Object(m.b)(r, a.owner)), n.comments = Object(f.c)(e, t.data.video.broadcastType, n.isCurrentUserModerator, t.blockedUsers), n.shouldSendReplayFilterError = v(e.vodChat.comments.isReplayFilterOn, t.data.video.broadcastType !== o.a.Upload, e.vodChat.comments.hasDismissedChatReplayError)
                    }
                    return n
                }, function(e, t) {
                    return {
                        onUpdateBegan: function(n, i) {
                            if (n.videoID)
                                if (i.videoID === n.videoID) {
                                    if (!n.hasFetchedComments) {
                                        var r = {
                                            bitsConfig: t.bitsConfig,
                                            offset: n.currentVideoTime,
                                            videoID: n.videoID
                                        };
                                        if (n.highlightTimestamp && n.currentVideoTime !== n.highlightTimestamp) return;
                                        return n.highlightedMessageID && (r.highlightedMessageID = n.highlightedMessageID), void e(Object(k.a)(g.c, r))
                                    }
                                    if (n.offsetRange !== f.a) {
                                        if (Object(m.f)({
                                                cursor: n.cursor,
                                                currentVideoTime: n.currentVideoTime,
                                                offsetEndTime: n.offsetRange.endSec,
                                                offsetThreshold: S
                                            })) return void e(Object(k.a)(g.c, {
                                            bitsConfig: t.bitsConfig,
                                            cursor: n.cursor.future,
                                            videoID: n.videoID
                                        }));
                                        if (Object(m.e)(n)) return void e(Object(k.a)(g.c, {
                                            bitsConfig: t.bitsConfig,
                                            offset: n.currentVideoTime,
                                            videoID: n.videoID
                                        }))
                                    }
                                } else e(Object(p.c)(n.videoID))
                        },
                        onCreate: function(t) {
                            if (Object(d.j)(t.message)) {
                                var n = Object(l.d)("Sorry, commands are not supported in Chat on Videos yet.", "VideoChatPresentation");
                                e(Object(u.u)(n))
                            } else e(Object(k.a)(g.a, t)), e(Object(k.b)(g.e, t))
                        },
                        onError: function(t) {
                            e(Object(u.u)(t))
                        },
                        onErrorDismissClick: function() {
                            e(Object(u.w)())
                        },
                        onUnmount: function() {
                            e(Object(u.y)())
                        },
                        onLoadMoreReplies: function(t, n, i, r) {
                            e(Object(k.a)(g.c, Object(m.a)(t, n, i, r)))
                        },
                        onDisableSync: function() {
                            e(Object(u.D)())
                        },
                        onEnableSync: function() {
                            e(Object(u.E)())
                        },
                        onBanUser: function(t) {
                            e(Object(k.a)(h.a, t)), e(Object(k.b)(g.d, t))
                        },
                        onDeleteComment: function(t) {
                            e(Object(k.a)(g.b, t)), e(Object(k.b)(g.f, t))
                        },
                        onPlayerSeekRequest: function(n, i) {
                            t.onPlayerSeekRequest(n), void 0 !== i && e(Object(k.b)(g.h, i))
                        },
                        onTurnOffReplayFilter: function() {
                            e(Object(u.C)(!1))
                        },
                        onWillMount: function() {
                            e(Object(u.x)())
                        },
                        onDidMount: function(t) {
                            e(Object(u.C)(t))
                        }
                    }
                }, function(e, t, n) {
                    var r = t.onDisableSync;
                    e.isScrollingSynced || (r = function() {});
                    var a = t.onCreate;
                    return e.shouldSendReplayFilterError && (a = function(e) {
                        t.onError(Object(b.a)().chatReplayFilterError), t.onCreate(e)
                    }), i.__assign({}, e, t, n, {
                        onDisableSync: r,
                        onCreate: a,
                        data: n.data
                    })
                })(y.a),
                N = Object(a.a)(C, {
                    options: function(e) {
                        return {
                            variables: {
                                videoID: e.videoID,
                                hasVideoID: !!e.videoID
                            }
                        }
                    },
                    props: function(e) {
                        var t = e.ownProps,
                            n = e.data,
                            r = n && n.video && n.video.owner && n.video.owner.cheer && n.video.owner.cheer.emotes || [],
                            a = Object(c.a)(r),
                            o = {};
                        return n && !n.loading && !n.error && n.currentUser && n.currentUser.blockedUsers && (o = n.currentUser.blockedUsers.reduce(function(e, t) {
                            return t && (e[t.id] = !0), e
                        }, {})), i.__assign({}, t, {
                            data: n,
                            bitsConfig: a,
                            blockedUsers: o
                        })
                    }
                })(E)
        },
        zxEZ: function(e, t, n) {
            "use strict";
            var i = n("mSxK");
            n.d(t, "a", function() {
                return i.c
            }), n.d(t, "b", function() {
                return i.d
            })
        },
        zyUW: function(e, t, n) {}
    }
]);