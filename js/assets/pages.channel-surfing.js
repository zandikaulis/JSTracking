webpackJsonp([89], {
    "+5Qw": function(e, t) {},
    "+V/3": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        });
        var a = "subscribe_to_channel",
            i = "turbo",
            r = "visit_url",
            s = "broadcaster"
    },
    "+WrY": function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("RH2O"),
            s = n("2KeS"),
            o = n("6sO2"),
            l = n("1F7R"),
            d = n("O0Qc"),
            c = n("OLl6"),
            u = n("uXDg"),
            p = n("qzJ+"),
            m = n("m4HT"),
            h = n("QPF3"),
            g = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleWhisperCommand = function(e) {
                        var n = Object(d.r)(e),
                            a = n.recipientLogin,
                            i = n.body;
                        return a && i ? t.props.isEmbedded || t.props.isPopout ? {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("Please use the whisper window for whispers.", "WhisperCommandHandler")
                            })
                        } : a.toLowerCase() === t.props.userLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("You cannot whisper to yourself.", "WhisperCommandHandler")
                            })
                        } : t.props.userID ? t.initiateWhisper(a, i) : void 0 : {
                            preserveInput: !0,
                            deferred: Promise.resolve({
                                notice: Object(o.d)('Usage: "/w [login] [message]"', "WhisperCommandHandler")
                            })
                        }
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return i.createElement(l.a, {
                        command: "w",
                        handler: this.handleWhisperCommand
                    })
                }, t.prototype.initiateWhisper = function(e, t) {
                    var n = this;
                    return {
                        deferred: new Promise(function(i, r) {
                            return a.__awaiter(n, void 0, void 0, function() {
                                var n, s, l, d;
                                return a.__generator(this, function(a) {
                                    switch (a.label) {
                                        case 0:
                                            return a.trys.push([0, 2, , 3]), [4, Object(c.a)(e)];
                                        case 1:
                                            return n = a.sent(), [3, 3];
                                        case 2:
                                            return s = a.sent(), o.j.warn(s, "Failed to fetch user targeted by whisper command.", {
                                                recipientLogin: e
                                            }), [2, r(s)];
                                        case 3:
                                            return n ? [3, 4] : [2, i({
                                                notice: Object(o.d)("No user matching that login.", "WhisperCommandHandler")
                                            })];
                                        case 4:
                                            return a.trys.push([4, 6, , 7]), [4, Object(p.a)({
                                                currentUserID: this.props.userID,
                                                emotes: this.props.emoteMap || {},
                                                message: t,
                                                recipientUserID: n
                                            })];
                                        case 5:
                                            return a.sent(), [3, 7];
                                        case 6:
                                            return l = a.sent(), o.j.error(l, "Failed to send whisper using whisper command.", {
                                                currentUserID: this.props.userID,
                                                recipientUserID: n
                                            }), [2, i({
                                                notice: Object(o.d)("Unable to send Whisper at this moment.", "WhisperCommandHandler")
                                            })];
                                        case 7:
                                            return d = Object(m.a)(this.props.userID, n), this.props.openThread(d), [2, i({})]
                                    }
                                })
                            })
                        })
                    }
                }, t
            }(i.Component);
        var f = Object(r.b)(null, function(e) {
            return Object(s.b)({
                openThread: function(e) {
                    return Object(u.l)({
                        threadID: e,
                        collapsed: !0
                    }, Object(h.a)())
                }
            }, e)
        })(g);
        n.d(t, "a", function() {
            return f
        })
    },
    "+kbm": function(e, t) {},
    "+po9": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "leaderboardItem"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsLeaderboard"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "items"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "edges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "node"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entryKey"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "rank"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 106
            }
        };
        n.loc.source = {
            body: "fragment leaderboardItem on BitsLeaderboard {\nitems {\nedges {\ncursor\nnode {\nid\nentryKey\nrank\nscore\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "/eFD": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatSettings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "blockLinks"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rules"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatDelayMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "query Chat_ChannelData($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nlogin\ndisplayName\nchatSettings {\nblockLinks\nrules\nchatDelayMs\n}\nself {\nisModerator\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0ImK": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "embeddedEmote"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "EmbeddedEmote"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "emoteID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "from"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "to"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 65
            }
        };
        n.loc.source = {
            body: "fragment embeddedEmote on EmbeddedEmote {\nemoteID\nsetID\nfrom\nto\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0gf8": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelSurfing_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "languages"
                        }
                    },
                    type: {
                        kind: "ListType",
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "createdAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followedGames"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "streams"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "first"
                                                    },
                                                    value: {
                                                        kind: "Variable",
                                                        name: {
                                                            kind: "Name",
                                                            value: "limit"
                                                        }
                                                    }
                                                }, {
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "languages"
                                                    },
                                                    value: {
                                                        kind: "Variable",
                                                        name: {
                                                            kind: "Name",
                                                            value: "languages"
                                                        }
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "edges"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "node"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "type"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "isMature"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "previewImageURL"
                                                                        },
                                                                        arguments: [{
                                                                            kind: "Argument",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "width"
                                                                            },
                                                                            value: {
                                                                                kind: "IntValue",
                                                                                value: "640"
                                                                            }
                                                                        }, {
                                                                            kind: "Argument",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "height"
                                                                            },
                                                                            value: {
                                                                                kind: "IntValue",
                                                                                value: "360"
                                                                            }
                                                                        }],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "viewersCount"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "broadcaster"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "login"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "profileImageURL"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "70"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "self"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "follower"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "followedAt"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "boxArtURL"
                                                                                },
                                                                                arguments: [{
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "width"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "40"
                                                                                    }
                                                                                }, {
                                                                                    kind: "Argument",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "height"
                                                                                    },
                                                                                    value: {
                                                                                        kind: "IntValue",
                                                                                        value: "55"
                                                                                    }
                                                                                }],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 427
            }
        };
        n.loc.source = {
            body: "query ChannelSurfing_CurrentUser($limit: Int $languages: [String!]) {\ncurrentUser {\nid\ncreatedAt\nfollowedGames {\nnodes {\nid\nname\nstreams(first: $limit languages: $languages) {\nedges {\nnode {\nid\ntype\nisMature\npreviewImageURL(width: 640 height: 360)\nviewersCount\nbroadcaster {\nid\nlogin\nprofileImageURL(width: 70)\ndisplayName\nself {\nfollower {\nfollowedAt\n}\n}\n}\ngame {\nid\ndisplayName\nboxArtURL(width: 40 height: 55)\n}\n}\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "11M/": function(e, t, n) {
        "use strict";
        n("jIAO");
        var a, i = n("RH2O"),
            r = n("Aj/L"),
            s = n("TToO"),
            o = n("GiK3"),
            l = n("7vx8"),
            d = n("3zLD"),
            c = n("2KeS"),
            u = n("6sO2"),
            p = n("NXs7"),
            m = n("QKs+"),
            h = n("Ldv2"),
            g = n("NikC"),
            f = n("ZVME"),
            b = n("0nzt"),
            v = n("1F7R"),
            k = n("J4ib"),
            y = n("Y5T0");
        ! function(e) {
            e.Recent = "RECENT", e.Top = "TOP"
        }(a || (a = {}));
        var C, _ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.unpinRecentCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    return s.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: a.Recent
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(k.d)("Recent cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t.resetTopCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    return s.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: a.Top
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(k.d)("Top cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return o.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, o.createElement(v.a, {
                        command: "unpin",
                        handler: this.unpinRecentCheer
                    }), o.createElement(v.a, {
                        command: "reset",
                        handler: this.resetTopCheer
                    }))
                }, t = s.__decorate([Object(l.a)(y, {
                    name: "dismissPinnedCheer"
                })], t)
            }(o.Component),
            E = n("iydZ"),
            S = n("bkpq"),
            w = n("uLsu"),
            N = n("+WrY"),
            T = n("HW6M"),
            D = n("RweG"),
            O = n("aMxy"),
            I = n("oIkB"),
            M = n("HZww"),
            R = n("vH/s"),
            L = n("iMOk"),
            x = n("Odds"),
            j = (n("y0i/"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        formInputValue: "",
                        sharing: !1
                    }, t.hasUnmounted = !1, t.handleShareClick = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            return s.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            sharing: !0
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, , 3, 4]), [4, this.props.onShare(this.state.formInputValue)];
                                    case 2:
                                        return e.sent(), [3, 4];
                                    case 3:
                                        return this.hasUnmounted || this.setState({
                                            sharing: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.onInputChange = function(e) {
                        t.setState({
                            formInputValue: e.currentTarget.value
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.hasUnmounted = !1
                }, t.prototype.componentWillUnmount = function() {
                    this.hasUnmounted = !0
                }, t.prototype.render = function() {
                    var e = T("share-input", {
                            "share-input--hidden": this.props.hide
                        }),
                        t = this.state.formInputValue.length > 255,
                        n = t ? "-" + (this.state.formInputValue.length - 255) : Object(u.d)("Share", "ChatResubNotification"),
                        a = Object(u.d)("Close", "ChatResubNotification"),
                        i = Object(u.d)("Add a message to the streamer", "ChatResubNotification"),
                        r = this.state.sharing ? x.A.Loading : x.A.Default;
                    return o.createElement(x._8, {
                        className: e,
                        padding: 1,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: x._15.Absolute
                    }, o.createElement(x._32, {
                        className: "share-input__container",
                        position: x._15.Relative,
                        border: !0,
                        background: x.n.Base,
                        padding: 1
                    }, o.createElement(x._8, {
                        position: x._15.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, o.createElement(x.w, {
                        ariaLabel: a,
                        onClick: this.props.onClose,
                        type: x.y.Secondary,
                        icon: x._23.Close,
                        "data-a-target": "resub-notification-close-form-btn",
                        "data-test-selector": "share-input__close-form-btn"
                    })), o.createElement(x._8, {
                        textAlign: x._42.Center,
                        padding: {
                            top: 1,
                            bottom: 2
                        }
                    }, this.props.children), o.createElement(x._8, {
                        display: x.R.Flex,
                        flexWrap: x.U.NoWrap
                    }, o.createElement(x._8, {
                        fullWidth: !0
                    }, o.createElement(x._4, {
                        autoFocus: !0,
                        type: x._5.Text,
                        value: this.state.formInputValue,
                        onChange: this.onInputChange,
                        placeholder: i,
                        "data-a-target": "resub-notification-share-message-input",
                        "data-test-selector": "share-input__share-message-input"
                    })), o.createElement(x.v, {
                        disabled: t,
                        onClick: this.handleShareClick,
                        "data-a-target": "resub-notification-send-msg-btn",
                        "data-test-selector": "share-input__send-msg-btn",
                        state: r
                    }, n))))
                }, t
            }(o.Component)),
            U = (n("54rb"), function(e) {
                var t = Object(u.d)("Share", "Chat--SharePrompt"),
                    n = Object(u.d)("Close", "Chat--SharePrompt"),
                    a = T("chat-share-prompt", {
                        "chat-share-prompt--hidden": e.hide || !e.children
                    });
                return o.createElement(x._8, {
                    position: x._15.Absolute,
                    fullWidth: !0,
                    className: a,
                    padding: {
                        y: .5,
                        left: .5
                    }
                }, o.createElement(x._8, {
                    display: x.R.Flex,
                    padding: 1,
                    justifyContent: x._7.Between,
                    alignItems: x.c.Center,
                    flexWrap: x.U.NoWrap
                }, o.createElement(x.Q, {
                    "data-a-target": "resub-notification-months-subbed-text",
                    "data-test-selector": "share-prompt__text"
                }, e.children), o.createElement(x._8, {
                    display: x.R.Flex,
                    flexWrap: x.U.NoWrap,
                    alignItems: x.c.Center,
                    flexShrink: 0,
                    padding: {
                        left: .5
                    }
                }, o.createElement(x._8, {
                    display: x.R.Inline,
                    padding: {
                        right: .5
                    },
                    flexShrink: 0
                }, o.createElement(x.v, {
                    onClick: e.onClickShare,
                    size: x.z.Small,
                    "data-a-target": "resub-notification-share-notification-btn",
                    "data-test-selector": "share-prompt__share-btn"
                }, t)), o.createElement(x._8, {
                    flexShrink: 0
                }, o.createElement(x.w, {
                    ariaLabel: n,
                    onClick: e.onClickClose,
                    type: x.y.Secondary,
                    icon: x._23.Close,
                    "data-a-target": "resub-notification-close-notification-btn",
                    "data-test-selector": "share-prompt__close-btn"
                })))))
            }),
            B = n("Tzcg"),
            A = n("xZvS"),
            F = n("cxe8"),
            P = n("QNxL"),
            V = (n("BTUa"), "chat_dismiss"),
            H = "chat_share",
            z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.purchaseTokensExist = function(e) {
                        return e.data.user.self && e.data.user.self.purchaseTokens.length > 0
                    }, t.manageParentSpace = function(e) {
                        t.dataIsReady(e) && t.purchaseTokensExist(e) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissPurchaseToken = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return s.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), e = this.props.data.user.self.purchaseTokens[0], t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(I.e)(F, {
                                            channelLogin: this.props.channelLogin
                                        }, t), u.n.track(R.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: e.asin,
                                            item_name: e.title,
                                            context: V,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), [4, this.props.dismissPurchaseToken(Object(I.a)({
                                            token: e.id,
                                            channelID: this.props.data.user.id
                                        }))];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.sharePurchase = function(e) {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return s.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), a.label = 1;
                                    case 1:
                                        return a.trys.push([1, , 3, 4]), t = this.props.data.user.self.purchaseTokens[0], [4, this.props.sharePurchaseTokenInChat(Object(I.a)({
                                            token: t.id,
                                            channelID: this.props.data.user.id,
                                            message: e
                                        }))];
                                    case 2:
                                        return a.sent(), u.n.track(R.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: t.asin,
                                            item_name: t.title,
                                            context: H,
                                            context_details: e,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), n = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(I.e)(F, {
                                            channelLogin: this.props.channelLogin
                                        }, n), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.dataIsReady(e)) {
                        var t = e.pubsub.messages.userCommerceUpdateEvent,
                            n = this.props.pubsub.messages.userCommerceUpdateEvent,
                            a = !n && t,
                            i = n && t && n.time !== t.time;
                        (a || i) && this.props.data && this.props.data.refetch()
                    }
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.purchaseTokensExist(this.props) && this.props.data.user.self ? this.renderPurchaseToken(this.props.data.user.self.purchaseTokens[0]) : null
                }, t.prototype.renderPurchaseToken = function(e) {
                    var t, n;
                    t = this.props.data.user.settings.isCommerceRevShareEnabled ? Object(u.d)("You bought {product} and supported {channelName}!", {
                        product: o.createElement("strong", null, e.title),
                        channelName: o.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat") : Object(u.d)("You bought {product} while watching {channelName}!", {
                        product: o.createElement("strong", null, e.title),
                        channelName: o.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat");
                    var a = e.inGameContents.map(this.renderLootInGameContent),
                        i = e.badges.map(this.renderLootBadge),
                        r = e.emoteSets.map(this.renderLootEmoteSet),
                        s = e.bits.map(this.renderLootBits, this);
                    return (a.length || i.length || r.length || s.length) && (n = o.createElement(x._8, {
                        "data-test-selector": "share-purchase__loot",
                        padding: {
                            bottom: 1
                        },
                        display: x.R.Flex,
                        justifyContent: x._7.Center
                    }, a, i, r, s), t = Object(u.d)("You bought {product} and opened a Twitch Crate! Let {channelName} know you shared the love.", {
                        product: o.createElement("strong", null, e.title),
                        channelName: o.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat")), o.createElement(x._8, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: x._15.Absolute
                    }, o.createElement(U, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissPurchaseToken
                    }, t), o.createElement(j, {
                        hide: !this.state.showMessageInput,
                        onShare: this.sharePurchase,
                        onClose: this.toggleContentShown
                    }, o.createElement(x._8, {
                        padding: {
                            bottom: 1
                        }
                    }, o.createElement("figure", null, o.createElement("img", {
                        width: 40,
                        height: 40,
                        src: e.imageThumbnail
                    }))), n, o.createElement(x.Q, null, Object(u.d)("Score! Give a shout out to {channelName} in Chat about all your sweet loot!", {
                        channelName: o.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat"))))
                }, t.prototype.renderLootInGameContent = function(e) {
                    return o.createElement(x._8, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__igc"
                    }, o.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.imageURL
                    }))
                }, t.prototype.renderLootEmoteSet = function(e) {
                    return Object(B.b)(e.emoteSet.emotes).map(function(e) {
                        return o.createElement(x._8, {
                            key: e.id,
                            margin: {
                                top: .5,
                                right: 1
                            },
                            "data-test-selector": "share-purchase__emoticon"
                        }, o.createElement("img", {
                            className: "share-to-chat__loot",
                            srcSet: e.srcSet,
                            alt: e.displayName
                        }))
                    })
                }, t.prototype.renderLootBadge = function(e) {
                    return o.createElement(x._8, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__badge"
                    }, o.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.badge.image2x
                    }))
                }, t.prototype.renderLootBits = function(e) {
                    if (this.props.bitsConfig) return o.createElement(x._8, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__bits"
                    }, o.createElement(L.a, {
                        count: e.quantity,
                        bitsConfig: this.props.bitsConfig,
                        withImage: !0
                    }))
                }, t = s.__decorate([Object(l.a)(F, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(D.a)([{
                    topic: function(e) {
                        return Object(M.w)(e.currentUserID)
                    },
                    mapMessageTypesToProps: (C = {}, C[O.PubsubMessageType.ChatNotification] = "userCommerceUpdateEvent", C)
                }])], t)
            }(o.Component),
            G = Object(l.a)(A, {
                name: "dismissPurchaseToken"
            })(Object(l.a)(P, {
                name: "sharePurchaseTokenInChat"
            })(z));
        var W = Object(i.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            })(G),
            q = (n("e9ZN"), function(e) {
                var t = T("rare-emote__face", {
                        "rare-emote__face--animate": !!e.animate
                    }),
                    n = T("rare-emote__neck", {
                        "rare-emote__neck--animate": !!e.animate
                    });
                return o.createElement(x._8, {
                    overflow: x._11.Hidden,
                    className: "rare-emote"
                }, o.createElement(x._2, {
                    zIndex: x._59.Above,
                    position: x._15.Relative
                }, o.createElement("img", {
                    className: t,
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.emoteID + "/2.0"
                })), o.createElement(x._8, {
                    position: x._15.Relative,
                    zIndex: x._59.Default,
                    className: n
                }, o.createElement(x._22, {
                    width: 28,
                    height: 28,
                    asset: x._23.Neck
                })))
            }),
            Q = 3;
        var K, Y = n("nEoF"),
            $ = n("S20p"),
            J = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        resubDismissed: !1,
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.randomEmoteId = t.getRandomEmoteId(), t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.resubExists = function(e, t) {
                        return e.data.user.self && e.data.user.self.resubNotification && !t.resubDismissed
                    }, t.manageParentSpace = function() {
                        t.dataIsReady(t.props) && t.resubExists(t.props, t.state) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissResubNotification = function() {
                        t.setState({
                            resubDismissed: !0
                        })
                    }, t.shareResub = function(e) {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return s.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.resubNotification) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 4, 5, 6]), this.props.authToken ? [4, function(e, t, n, a) {
                                            return s.__awaiter(this, void 0, void 0, function() {
                                                var i, r, o;
                                                return s.__generator(this, function(s) {
                                                    switch (s.label) {
                                                        case 0:
                                                            i = "https://api.twitch.tv/api/channels/" + e + "/use_chat_notification_token", r = 1, s.label = 1;
                                                        case 1:
                                                            if (!(r <= Q)) return [3, 7];
                                                            s.label = 2;
                                                        case 2:
                                                            return s.trys.push([2, 5, , 6]), [4, fetch(i, {
                                                                body: JSON.stringify({
                                                                    token_id: t,
                                                                    custom_message: n
                                                                }),
                                                                method: "POST",
                                                                headers: {
                                                                    "Client-ID": u.o.config.legacyClientID,
                                                                    Accept: "application/json; charset=UTF-8",
                                                                    "content-type": "application/json; charset=UTF-8",
                                                                    Authorization: "OAuth " + a
                                                                }
                                                            })];
                                                        case 3:
                                                            return [4, s.sent().json()];
                                                        case 4:
                                                            return [2, s.sent()];
                                                        case 5:
                                                            if (o = s.sent(), r === Q) throw o;
                                                            return [3, 6];
                                                        case 6:
                                                            return ++r, [3, 1];
                                                        case 7:
                                                            return [2]
                                                    }
                                                })
                                            })
                                        }(this.props.channelLogin, this.props.data.user.self.resubNotification.token, e, this.props.authToken)] : [3, 3];
                                    case 2:
                                        a.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.resubNotification = null), e
                                        }, Object(I.e)($, {
                                            channelLogin: this.props.channelLogin
                                        }, t), this.dismissResubNotification(), a.label = 3;
                                    case 3:
                                        return [3, 6];
                                    case 4:
                                        return n = a.sent(), u.j.error(n, "Failed to post resub message"), [3, 6];
                                    case 5:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 6:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace()
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.dataIsReady(e) && e.data.user.self && e.data.user.self.resubNotification && !this.randomEmoteId && (this.randomEmoteId = this.getRandomEmoteId())
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.resubExists(this.props, this.state) && this.props.data.user.self && this.props.data.user.self.resubNotification ? this.renderResubToken(this.props.data.user.self.resubNotification) : null
                }, t.prototype.renderResubToken = function(e) {
                    return o.createElement(x._8, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: x._15.Absolute
                    }, o.createElement(U, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissResubNotification
                    }, Object(u.d)("It's your {monthsSubbed, number} month anniversary!", {
                        monthsSubbed: e.months
                    }, "ChatResubNotification")), o.createElement(j, {
                        hide: !this.state.showMessageInput,
                        onShare: this.shareResub,
                        onClose: this.toggleContentShown
                    }, o.createElement(q, {
                        emoteID: this.randomEmoteId,
                        animate: this.state.showMessageInput
                    }), o.createElement(x.Q, null, Object(u.d)("Hooray! Let {channelName} know it's your {monthsSubbed, number} month anniversary.", {
                        channelName: o.createElement("strong", null, this.props.channelDisplayName),
                        monthsSubbed: e.months
                    }, "ChatResubNotification"))))
                }, t.prototype.getRandomEmoteId = function() {
                    var e = Math.floor(Math.random() * Y.b.length);
                    return Y.b[e]
                }, t = s.__decorate([Object(l.a)($, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                })], t)
            }(o.Component);
        n("NZkJ");
        ! function(e) {
            e[e.Resub = 1] = "Resub", e[e.Purchase = 2] = "Purchase"
        }(K || (K = {}));
        var Z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestedSpaces: new Set
                    }, t.addSpace = function(e) {
                        t.state.requestedSpaces.has(e) || t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.add(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.removeSpace = function(e) {
                        t.state.requestedSpaces.has(e) && t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.delete(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.requestResubSpace = function() {
                        t.addSpace(K.Resub)
                    }, t.dismissResubSpace = function() {
                        t.removeSpace(K.Resub)
                    }, t.requestPurchaseSpace = function() {
                        t.addSpace(K.Purchase)
                    }, t.dismissPurchaseSpace = function() {
                        t.removeSpace(K.Purchase)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    this.state.requestedSpaces.size && (e = Array.from(this.state.requestedSpaces.values()).sort()[0]);
                    var t = T({
                            "share-to-chat__space--hidden": e !== K.Resub
                        }),
                        n = T({
                            "share-to-chat__space--hidden": e !== K.Purchase
                        });
                    return o.createElement(x._8, null, o.createElement(x._8, {
                        className: t
                    }, o.createElement(J, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        requestSpace: this.requestResubSpace,
                        dismissSpace: this.dismissResubSpace
                    })), o.createElement(x._8, {
                        className: n
                    }, o.createElement(W, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig,
                        requestSpace: this.requestPurchaseSpace,
                        dismissSpace: this.dismissPurchaseSpace
                    })))
                }, t
            }(o.Component),
            X = n("vh75"),
            ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        show: !0
                    }, t.dismiss = function() {
                        t.setState({
                            show: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                        show: !0
                    })
                }, t.prototype.render = function() {
                    return this.state.show ? o.createElement(x._32, {
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        background: x.n.AccentAlt2,
                        color: x.K.Overlay,
                        position: x._15.Absolute,
                        className: "hosting-notification",
                        padding: {
                            y: .5,
                            left: .5
                        },
                        "data-a-target": "hosting-notification-container"
                    }, o.createElement(x._8, {
                        display: x.R.Flex,
                        padding: 1,
                        justifyContent: x._7.Between,
                        alignItems: x.c.Center,
                        flexWrap: x.U.NoWrap
                    }, o.createElement(x._8, {
                        display: x.R.Flex,
                        flexWrap: x.U.NoWrap
                    }, o.createElement(x._8, {
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, o.createElement(x.Q, null, Object(u.d)("Hosting", "ChatHostingNotification"))), o.createElement(x._8, {
                        ellipsis: !0,
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, o.createElement(x.Q, {
                        type: x._46.Strong,
                        "data-test-selector": "hosting-notification__text",
                        "data-a-target": "hosting-notification-channel-name"
                    }, "" + this.props.hostedChannelDisplayName))), o.createElement(x._8, {
                        display: x.R.Flex,
                        flexWrap: x.U.NoWrap,
                        flexShrink: 0
                    }, o.createElement(x._8, {
                        display: x.R.Inline,
                        padding: {
                            right: .5
                        }
                    }, o.createElement(x.v, {
                        linkTo: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                content: "host_channel",
                                medium: "chat_bar_notification"
                            }
                        },
                        size: x.z.Small,
                        "data-a-target": "hosting-notification-gotochannel-button"
                    }, Object(u.d)("Go to Channel", "ChatHostingNotification"))), o.createElement(x.w, {
                        onClick: this.dismiss,
                        ariaLabel: Object(u.d)("Close", "HostingNotification"),
                        size: x.x.Small,
                        overlay: !0,
                        icon: x._23.Close,
                        "data-a-target": "hosting-notification-close-button"
                    })))) : null
                }, t
            }(o.Component),
            te = n("F8kA"),
            ne = (n("W266"), "nativeBroadcastNotifDismissed"),
            ae = [{
                title: "English",
                login: "esamarathon"
            }, {
                title: "Français",
                login: "LeFrenchRestream"
            }, {
                title: "Deutsch",
                login: "GermenchRestream"
            }, {
                title: "Русский",
                login: "SpeedrunsRussia"
            }],
            ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isClosed: !1
                    }, t.getChannelLinks = function() {
                        var e = k.b.get("native_broadcast_blacklist", []);
                        return ae.filter(function(t) {
                            return e.indexOf(t.login.toLowerCase()) < 0
                        }).filter(function(e) {
                            return e.login.toLowerCase() !== t.props.channelLogin.toLowerCase()
                        }).map(function(e) {
                            var t = e.title + " (" + e.login + ")";
                            return o.createElement("li", {
                                key: e.login
                            }, o.createElement(te.a, {
                                className: "native-broadcast-notification__link",
                                to: "/" + e.login.toLowerCase()
                            }, t))
                        })
                    }, t.onDismiss = function() {
                        t.setState({
                            isClosed: !0
                        });
                        var e, n = s.__assign({}, u.l.get(ne, {}), ((e = {})[t.props.channelLogin.toLowerCase()] = Date.now(), e));
                        u.l.set(ne, n)
                    }, t.onExpire = function() {
                        t.setState({
                            isClosed: !0
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.channelLogin.toLowerCase() !== this.props.channelLogin.toLowerCase() && this.setState({
                        isClosed: !1
                    })
                }, t.prototype.render = function() {
                    if (this.state.isClosed) return null;
                    if (!this.isEventChannel(this.props.channelLogin)) return null;
                    if (this.hasDismissedForChannel(this.props.channelLogin)) return null;
                    var e = Date.now();
                    if (e < 15191352e5 || e >= 15195132e5) return null;
                    var t = this.getChannelLinks();
                    return t.length ? o.createElement(x._32, {
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        background: x.n.AccentAlt2,
                        color: x.K.Overlay,
                        padding: 1,
                        position: x._15.Absolute
                    }, o.createElement(x._8, {
                        margin: {
                            bottom: 1
                        }
                    }, o.createElement(x.Q, {
                        type: x._46.H4
                    }, Object(u.d)("ESA Winter 2018", "NativeBroadcastNotification"))), o.createElement(x._8, {
                        margin: {
                            bottom: 1
                        }
                    }, o.createElement(x.Q, {
                        color: x.K.OverlayAlt
                    }, Object(u.d)("Want to watch ESA in you local language? Try one of these international broadcasts!", "NativeBroadcastNotification"))), o.createElement("ul", null, t), o.createElement(x._8, {
                        attachRight: !0,
                        attachTop: !0,
                        margin: 1,
                        position: x._15.Absolute
                    }, o.createElement(x.w, {
                        ariaLabel: Object(u.d)("Close", "NativeBroadcastNotification"),
                        icon: x._23.Close,
                        onClick: this.onDismiss,
                        overlay: !0,
                        size: x.x.Small,
                        "data-a-target": "native-broadcast-notification-close-button"
                    })), o.createElement(x._8, {
                        margin: {
                            top: .5
                        }
                    }, o.createElement(x._18, {
                        countdown: 30,
                        onCountdownEnd: this.onExpire,
                        size: x._19.ExtraSmall
                    }))) : null
                }, t.prototype.isEventChannel = function(e) {
                    return ae.map(function(e) {
                        return e.login.toLowerCase()
                    }).includes(e.toLowerCase())
                }, t.prototype.hasDismissedForChannel = function(e) {
                    var t = u.l.get(ne, {})[e.toLowerCase()];
                    return !!t && t >= 15191352e5
                }, t
            }(o.Component),
            re = n("+Znq"),
            se = n("7MbV"),
            oe = (n("q4rf"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onClickInteraction = function(e) {
                        t.props.sendMessage(":act " + e.currentTarget.getAttribute("data-action")), t.toggleBalloonRef.toggleBalloon()
                    }, t.setToggleBalloonRef = function(e) {
                        return t.toggleBalloonRef = e
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.getPresetText();
                    return this.props.isLoggedIn && 0 !== e.length ? o.createElement(x._32, {
                        className: "orbis",
                        display: x.R.Flex,
                        flexDirection: x.T.Column,
                        alignItems: x.c.Stretch,
                        background: x.n.Base,
                        flexShrink: 0,
                        borderBottom: !0
                    }, o.createElement(re.a, {
                        ref: this.setToggleBalloonRef
                    }, o.createElement("div", {
                        className: "orbis__dropdown-container",
                        "data-test-selector": "orbis-dropdown-container"
                    }, o.createElement(x._8, {
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: x.R.Flex,
                        justifyContent: x._7.Between,
                        flexWrap: x.U.NoWrap
                    }, o.createElement(x._8, {
                        ellipsis: !0,
                        padding: {
                            right: 1
                        }
                    }, o.createElement(x.Q, {
                        type: x._46.Span
                    }, Object(u.d)("Interactions Available", "Orbis"))), o.createElement(x._8, {
                        display: x.R.Flex,
                        justifyContent: x._7.Between,
                        alignItems: x.c.Center,
                        flexShrink: 0
                    }, o.createElement(x._8, {
                        className: "orbis__dropdown-icon",
                        display: x.R.Flex,
                        justifyContent: x._7.Between,
                        alignItems: x.c.Center
                    }, o.createElement(x._22, {
                        asset: x._23.AngleRight
                    }))))), o.createElement(x.q, {
                        offsetY: "1px",
                        noTail: !0
                    }, o.createElement(x._8, {
                        className: "orbis__dropdown-content",
                        padding: 1
                    }, this.renderInteractions(e))))) : null
                }, t.prototype.renderInteractions = function(e) {
                    for (var t = [], n = 0, a = e; n < a.length; n++) {
                        var i = a[n];
                        t.push(this.renderInteraction(i))
                    }
                    return t
                }, t.prototype.renderInteraction = function(e) {
                    return e ? o.createElement(x._6, {
                        onClick: this.onClickInteraction,
                        key: e,
                        "data-action": e,
                        "data-test-selector": "orbis-interaction"
                    }, o.createElement(x._2, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, o.createElement(x.Q, {
                        ellipsis: !0
                    }, e))) : null
                }, t.prototype.getPresetText = function() {
                    if (!(this.props.data && this.props.data.user && this.props.data.user.stream && this.props.data.user.stream.platform && this.props.data.user.stream.platform.title)) return [];
                    var e = this.props.data.user.stream.platform.title.presetText;
                    return e.some(function(e) {
                        return "" !== e
                    }) ? e : []
                }, t
            }(o.Component)),
            le = Object(l.a)(se, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.isLoggedIn || !e.channelLogin
                }
            })(oe);
        var de = Object(i.b)(function(e) {
                return {
                    isLoggedIn: Object(r.d)(e)
                }
            })(le),
            ce = n("BMQ2"),
            ue = n("WIs4"),
            pe = n("aSvS"),
            me = n("rIzn"),
            he = n("J7iJ"),
            ge = n("KfLc"),
            fe = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return o.createElement(x._32, {
                        background: x.n.Base,
                        color: x.K.Alt
                    }, o.createElement(x._8, {
                        padding: {
                            bottom: .5,
                            top: 1,
                            x: 1
                        }
                    }, o.createElement(x._8, {
                        margin: {
                            bottom: .5
                        }
                    }, o.createElement(x.Q, {
                        bold: !0,
                        type: x._46.H5
                    }, Object(u.d)("Introducing: New Chatter Announcements!", "RitualsOnboardingSticky"))), o.createElement(x._8, {
                        margin: {
                            bottom: .5
                        }
                    }, o.createElement(x.Q, {
                        type: x._46.Span
                    }, Object(u.d)("New chatter announcements are now active in your channel, making it easier to welcome new people.", "RitualsOnboardingSticky")), o.createElement(x.Q, null, o.createElement(te.a, {
                        onClick: this.props.onClick,
                        to: "/" + this.props.channelLogin + "/dashboard/settings",
                        "data-test-selector": "rituals-sticky-link"
                    }, Object(u.d)("Manage in Dashboard", "RitualsOnboardingSticky"))))), o.createElement(x._32, {
                        alignItems: x.c.Center,
                        background: x.n.Alt2,
                        borderBottom: !0,
                        color: x.K.Alt2,
                        display: x.R.Flex,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, o.createElement(x._22, {
                        asset: x._23.Lock,
                        height: 12,
                        width: 12
                    }), o.createElement(x._8, {
                        display: x.R.Inline,
                        margin: {
                            left: .5
                        }
                    }, o.createElement(x.Q, {
                        fontSize: x.V.Size8,
                        type: x._46.Span
                    }, Object(u.d)("You see this because you own this channel", "RitualsOnboardingSticky")))), o.createElement(x._32, {
                        attachRight: !0,
                        attachTop: !0,
                        padding: {
                            x: .5,
                            top: 1
                        },
                        position: x._15.Absolute
                    }, o.createElement(x.w, {
                        ariaLabel: Object(u.d)("Close", "RitualsOnboardingSticky"),
                        icon: x._23.Close,
                        onClick: this.props.onDismiss,
                        size: x.x.Small,
                        type: x.y.Secondary,
                        "data-test-selector": "rituals-sticky-dismiss-button"
                    })))
                }, t
            }(o.PureComponent),
            be = "seenNewChatterAnnouncementSticky",
            ve = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isDismissed: !1
                    }, n.onClick = function() {
                        Object(ge.c)({
                            action: pe.a.Click,
                            channelID: n.props.channelID
                        })
                    }, n.onDismiss = function() {
                        u.l.set(be, !0), n.setState({
                            isDismissed: !0
                        }), Object(ge.c)({
                            action: pe.a.Dismiss,
                            channelID: n.props.channelID
                        })
                    }, n.state.isDismissed = u.l.get(be, !1), n
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return !this.props.data || this.props.data.loading || this.props.data.error ? null : this.props.data.channel.settings.isRitualsEnabled ? this.state.isDismissed ? null : o.createElement(fe, {
                        channelLogin: this.props.channelLogin,
                        onClick: this.onClick,
                        onDismiss: this.onDismiss
                    }) : null
                }, t
            }(o.Component);

        function ke(e) {
            return e.currentUserID !== e.channelID || !Object(me.a)()
        }
        var ye = Object(d.compose)(Object(i.b)(function(e) {
                var t = Object(r.c)(e);
                return {
                    currentUserID: t && t.id
                }
            }, null), Object(l.a)(he, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: ke
            }), Object(ue.a)(function(e) {
                return {
                    query: he,
                    variables: {
                        id: e.channelID
                    },
                    topic: Object(M.q)(e.channelID),
                    type: O.PubsubMessageType.UpdatedChannelChatProperty,
                    mutator: function(e, t) {
                        return t.channel.settings.isRitualsEnabled = e.data.is_rituals_enabled, t
                    },
                    skip: ke(e)
                }
            }))(ve),
            Ce = n("qkCi"),
            _e = 200,
            Ee = function() {
                return function(e) {
                    var t = this;
                    this.resetWithChannelLogin = function(e) {
                        t.activeChatterLogins = new Set, t.activeChatters = {}, t.channelLogin = e, t.currentUserLogin = null, t.isDirty = !0
                    }, this.getActiveChatters = function() {
                        return t.isDirty = !1, Object.keys(t.activeChatters).map(function(e) {
                            return t.activeChatters[e]
                        })
                    }, this.setCurrentUserLogin = function(e) {
                        t.currentUserLogin = e, t.activeChatterLogins.has(e) && (t.isDirty = !0, t.removeActiveChatter(e))
                    }, this.consumeChatEvent = function(e) {
                        t.getUsersFromEvent(e).forEach(function(e) {
                            t.handleActiveChatter(e)
                        })
                    }, this.getUsersFromEvent = function(e) {
                        switch (e.type) {
                            case Ce.b.Message:
                                return [{
                                    login: e.user.userLogin,
                                    displayName: e.user.userDisplayName
                                }];
                            case Ce.b.Ritual:
                                return [{
                                    login: e.message.user.userLogin,
                                    displayName: e.message.user.userDisplayName
                                }];
                            case Ce.b.Raid:
                                return [{
                                    login: e.params.login,
                                    displayName: e.params.displayName
                                }];
                            case Ce.b.Resubscription:
                            case Ce.b.Subscription:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }];
                            case Ce.b.SubGift:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }, {
                                    displayName: e.recipientDisplayName,
                                    login: e.recipientLogin
                                }];
                            default:
                                return []
                        }
                    }, this.handleActiveChatter = function(e) {
                        e.login !== t.channelLogin && e.login !== t.currentUserLogin && (t.activeChatterLogins.has(e.login) ? (t.activeChatterLogins.delete(e.login), t.addActiveChatter(e)) : (t.addActiveChatter(e), t.trimActiveChatters(), t.isDirty = !0))
                    }, this.addActiveChatter = function(e) {
                        t.activeChatterLogins.add(e.login), t.activeChatters[e.login] = e
                    }, this.removeActiveChatter = function(e) {
                        t.activeChatterLogins.delete(e), delete t.activeChatters[e]
                    }, this.trimActiveChatters = function() {
                        if (!(t.activeChatterLogins.size <= _e))
                            for (var e = t.activeChatterLogins.size - _e, n = t.activeChatterLogins.values(), a = 0; a < e; a++) {
                                var i = n.next().value;
                                t.removeActiveChatter(i)
                            }
                    }, this.resetWithChannelLogin(e)
                }
            }(),
            Se = n("mwvJ"),
            we = 1e3,
            Ne = 1e3,
            Te = 250,
            De = 0,
            Oe = 200,
            Ie = function() {
                function e(e, t) {
                    void 0 === e && (e = Te), void 0 === t && (t = function() {});
                    var n = this;
                    this.maxSize = e, this.onBufferUpdate = t, this.delayedMessageBuffer = [], this.setDelay = function(e) {
                        n.delayDuration = e
                    }, this.setCurrentUserLogin = function(e) {
                        n.currentUserLogin = e
                    }, this.consumeChatEvent = function(e) {
                        var t = !1;
                        switch (e.type) {
                            case Ce.b.Message:
                                if (n.uncountedMessages++, e.user.userID && n.blockedUsers.has(e.user.userID)) return;
                                var a = e.messageParts[0];
                                if (a && a.type === Se.a.Text && a.content.startsWith(":act ")) return;
                                t = !n.isOwnMessage(e);
                                break;
                            case Ce.b.Resubscription:
                                t = !!e.message && !n.isOwnMessage(e.message);
                                break;
                            case Ce.b.Moderation:
                                var i = e.userLogin;
                                if (n.moderatedUsers.has(i)) return;
                                [n.buffer, n.delayedMessageBuffer.map(function(e) {
                                    return e.event
                                })].forEach(function(e) {
                                    e.forEach(function(e) {
                                        switch (e.type) {
                                            case Ce.b.Message:
                                                e.user && i === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0);
                                                break;
                                            case Ce.b.Resubscription:
                                            case Ce.b.Ritual:
                                                e.message && i === e.message.user.userLogin && !e.message.deleted && (e.message.deleted = !0)
                                        }
                                    })
                                }), n.moderatedUsers.add(i), setTimeout(n.unmoderateUser(i), we);
                                break;
                            case Ce.b.Disconnected:
                                return;
                            case Ce.b.Reconnect:
                                if (n.buffer.find(function(t) {
                                        return t.id === e.id
                                    }) || n.delayedMessageBuffer.find(function(t) {
                                        return t.event.id === e.id
                                    })) return;
                                break;
                            case Ce.b.Clear:
                                n.clear();
                                break;
                            case Ce.b.ModerationAction:
                                if (n.currentUserLogin && e.createdByLogin === n.currentUserLogin) return
                        }
                        n.delayedMessageBuffer.push({
                            event: e,
                            time: Date.now(),
                            shouldDelay: t
                        })
                    }, this.unmoderateUser = function(e) {
                        return function() {
                            n.moderatedUsers.delete(e)
                        }
                    }, this.isOwnMessage = function(e) {
                        var t = e.user;
                        return !(!n.currentUserLogin || !t || t.userLogin !== n.currentUserLogin)
                    }, this.currentUserLogin = null, this.delayedMessageBuffer = [], this.buffer = [], this._isDirty = !1, this.moderatedUsers = new Set, this.blockedUsers = new Set, this.delayDuration = De, this.throttlingDuration = Oe, this.flushInterval = setInterval(function() {
                        return n.flushRawMessages()
                    }, this.throttlingDuration), this.uncountedMessages = 0, this.chatRateMeasurements = [], this.chatRateMeasurementInterval = setInterval(function() {
                        return n.measureChatRate()
                    }, Ne), this.setBlockedUsers = this.setBlockedUsers.bind(this)
                }
                return e.prototype.shutdown = function() {
                    this.flushInterval && (clearInterval(this.flushInterval), clearInterval(this.chatRateMeasurementInterval))
                }, e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e.prototype.toArray = function() {
                    return this.buffer = this.buffer.slice(-this.maxSize), this._isDirty = !1, this.buffer
                }, e.prototype.clear = function(e) {
                    if (void 0 === e && (e = 0), e <= 0) return this.buffer = [], void(this.delayedMessageBuffer = []);
                    this.buffer = this.buffer.slice(-e)
                }, e.prototype.isDeletable = function(e) {
                    return void 0 !== e.deleted
                }, e.prototype.flushRawMessages = function() {
                    var e = this,
                        t = [],
                        n = Date.now();
                    this.delayedMessageBuffer.forEach(function(a) {
                        var i = a.event,
                            r = a.time,
                            s = a.shouldDelay;
                        r <= n - e.delayDuration || !s ? e.isDeletable(i) && i.deleted || (e.buffer.push(i), e._isDirty = !0, e.onBufferUpdate()) : t.push({
                            event: i,
                            time: r,
                            shouldDelay: s
                        })
                    }), this.delayedMessageBuffer = t
                }, e.prototype.measureChatRate = function() {
                    3 === this.chatRateMeasurements.length && this.chatRateMeasurements.shift(), this.chatRateMeasurements.push(this.uncountedMessages), this.uncountedMessages = 0
                }, Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "moderatedUserCount", {
                    get: function() {
                        return this.moderatedUsers.size
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "chatRate", {
                    get: function() {
                        return 0 === this.chatRateMeasurements.length ? 0 : this.chatRateMeasurements.reduce(function(e, t) {
                            return e + t
                        }) / this.chatRateMeasurements.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), e
            }(),
            Me = n("INp2");
        var Re = n("6Agf");
        var Le = n("aUOx"),
            xe = n("l21v");

        function je(e, t, n, a, i, r, o) {
            return void 0 === o && (o = !1), s.__assign({}, Object(xe.a)(t, n, a, i, r, o), {
                type: Ce.b.Message,
                messageType: e,
                id: n.id || Object(Me.a)(n.username)
            })
        }
        var Ue = n("Ncf8");
        var Be = n("O0Qc"),
            Ae = n("YhVV"),
            Fe = function() {
                function e(e, t, n) {
                    var a = this;
                    this.onJoinedEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, {
                            type: Ce.b.Connected,
                            id: Object(Me.a)("connected")
                        })
                    }, this.onDisconnectedEvent = function(e) {
                        return a.postMessage((t = e.reason, {
                            type: Ce.b.Disconnected,
                            id: Object(Me.a)("disconnected"),
                            reason: t
                        }));
                        var t
                    }, this.onReconnectingEvent = function(e) {
                        return a.postMessage({
                            type: Ce.b.Reconnect,
                            id: Object(Me.a)("reconnect")
                        })
                    }, this.onHostedEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.from, n = e.isAuto, i = e.viewers, {
                            type: Ce.b.Hosted,
                            id: Object(Me.a)("hosted-" + t),
                            hostingChannel: t,
                            isAutohost: n,
                            viewerCount: i
                        }));
                        var t, n, i
                    }, this.onHostingEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.target, {
                            type: Ce.b.Hosting,
                            id: Object(Me.a)("hosting"),
                            hostedChannel: t
                        }));
                        var t
                    }, this.onUnhostEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.channel, {
                            type: Ce.b.Unhost,
                            id: Object(Me.a)("unhost-" + t)
                        }));
                        var t
                    }, this.onChatMessageEvent = function(e) {
                        a.postMessageToCurrentChannel(e, a.convertMessage(e))
                    }, this.onChatActionEvent = function(e) {
                        var t = a.bitsConfig || E.a,
                            n = e.message.user.username === a.userLogin ? a.selfEmotes : void 0,
                            i = je(Ce.c.Action, e.action, e.message.user, t, a.shouldBlockLinks(e.message.user), n);
                        a.postMessageToCurrentChannel(e, i)
                    }, this.onChatNoticeEvent = function(e) {
                        if ("msg_rejected" !== e.msgid) {
                            var t = (n = e.channel, i = e.msgid, r = e.body, {
                                type: Ce.b.Notice,
                                id: Object(Me.a)("notice"),
                                channel: n,
                                msgid: i,
                                message: r
                            });
                            a.postMessageToCurrentChannel(e, t)
                        }
                        var n, i, r
                    }, this.onTimeoutEvent = function(e) {
                        a.onModerationEvent(Ce.e.Timeout, e)
                    }, this.onBanEvent = function(e) {
                        a.onModerationEvent(Ce.e.Ban, e)
                    }, this.onModerationEvent = function(e, t) {
                        a.postMessageToCurrentChannel(t, Object(Ue.a)(e, t.userLogin, t.reason, t.duration))
                    }, this.onSubscriptionEvent = function(e) {
                        var t, n, i, r, s;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "Tier 1"
                        }
                        a.postMessageToCurrentChannel(e, (n = e.channel, i = e.user, r = e.methods.prime, s = t, {
                            type: Ce.b.Subscription,
                            id: Object(Me.a)(i.username + "-sub"),
                            channel: n.slice(1),
                            isPrime: r,
                            tier: s,
                            user: i
                        }))
                    }, this.onSubscriptionGiftEvent = function(e) {
                        var t, n, i, r, s, o, l, d, c;
                        switch (e.methods.plan) {
                            case "1000":
                                t = "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "custom"
                        }
                        a.postMessageToCurrentChannel(e, (n = e.channel, i = e.user, r = e.methods.prime, s = t, o = e.recipientName, l = e.recipientID, d = e.recipientLogin, c = e.senderCount, {
                            type: Ce.b.SubGift,
                            id: Object(Me.a)(i.username + "-sub"),
                            channel: n.slice(1),
                            isPrime: r,
                            recipientDisplayName: o,
                            recipientID: l,
                            recipientLogin: d,
                            senderCount: c,
                            tier: s,
                            user: i
                        }))
                    }, this.onBitsCharityEvent = function(e) {
                        var t, n, i, r, s, o;
                        a.postMessage((t = e.total, n = e.charityName, i = e.daysLeft, r = e.hoursLeft, s = e.hashtag, o = e.learnMore, {
                            type: Ce.b.BitsCharity,
                            id: Object(Me.a)("charity"),
                            total: t,
                            charityName: n,
                            daysLeft: i,
                            hoursLeft: r,
                            hashtag: s,
                            learnMore: o
                        }))
                    }, this.onResubscriptionEvent = function(e) {
                        var t, n, i, r, s, o, l, d;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "Tier 1"
                        }
                        a.postMessageToCurrentChannel(e, (n = e.channel, i = e.user, r = e.methods.prime, s = e.months, o = t, l = e.body, d = void 0, l && (d = je(Ce.c.Post, l, i, E.a, !1)), {
                            type: Ce.b.Resubscription,
                            id: Object(Me.a)(i.username + "-sub"),
                            channel: n.slice(1),
                            isPrime: r,
                            months: s,
                            tier: o,
                            user: i,
                            message: d
                        }))
                    }, this.onRoomModsEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.usernames, {
                            type: Ce.b.RoomMods,
                            id: Object(Me.a)("roommods"),
                            moderatorLogins: t
                        }));
                        var t
                    }, this.onRoomStateEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.state, {
                            type: Ce.b.RoomState,
                            id: Object(Me.a)("roomstate"),
                            state: t
                        }));
                        var t
                    }, this.onSlowModeEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.enabled, n = e.length, {
                            type: Ce.b.SlowMode,
                            id: Object(Me.a)("slowmode"),
                            enabled: t,
                            length: n
                        }));
                        var t, n
                    }, this.onEmoteOnlyModeEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.enabled, {
                            type: Ce.b.EmoteOnlyMode,
                            id: Object(Me.a)("emoteonlymode"),
                            enabled: t
                        }));
                        var t
                    }, this.onFollowerOnlyModeEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.enabled, n = e.length, {
                            type: Ce.b.FollowerOnlyMode,
                            id: Object(Me.a)("follower-only"),
                            enabled: t,
                            length: n
                        }));
                        var t, n
                    }, this.onSubscriberOnlyModeEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.enabled, {
                            type: Ce.b.SubscriberOnlyMode,
                            id: Object(Me.a)("subscriber-only"),
                            enabled: t
                        }));
                        var t
                    }, this.onClearChatEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, {
                            type: Ce.b.Clear,
                            id: Object(Me.a)("clear")
                        })
                    }, this.onRaidEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.channel, n = e.userLogin, i = e.params, {
                            type: Ce.b.Raid,
                            id: Object(Me.a)("raid"),
                            channel: t,
                            userLogin: n,
                            params: i
                        }));
                        var t, n, i
                    }, this.onUnraidEvent = function(e) {
                        return a.postMessageToCurrentChannel(e, (t = e.channel, n = e.userLogin, i = e.message, {
                            type: Ce.b.Unraid,
                            id: Object(Me.a)("unraid"),
                            channel: t,
                            userLogin: n,
                            message: i
                        }));
                        var t, n, i
                    }, this.onRitualEvent = function(e) {
                        var t, n;
                        a.postMessage((t = e.type, n = a.convertMessage(e), {
                            type: Ce.b.Ritual,
                            id: Object(Me.a)(n.user.userLogin + "-" + t + "-ritual"),
                            ritualType: t,
                            message: n
                        }))
                    }, this.onBadgesUpdatedEvent = function(e) {
                        return a.postMessage((t = e.username, n = e.badges, {
                            type: Ce.b.BadgesUpdated,
                            id: Object(Me.a)("updateBadges"),
                            userName: t,
                            badges: n
                        }));
                        var t, n
                    }, this.onPurchaseEvent = function(e) {
                        var t = a.bitsConfig || E.a;
                        a.postMessage(function(e, t, n, a) {
                            return {
                                bitsConfig: a,
                                message: t,
                                purchase: e,
                                timestamp: n,
                                id: Object(Me.a)(t.user.userLogin + "-purchase"),
                                type: Ce.b.Purchase
                            }
                        }(e.purchase, a.convertMessage(e), e.timestamp, t))
                    }, this.onCrateEvent = function(e) {
                        var t, n;
                        a.postMessage((t = a.convertMessage(e), n = e.selectedCount, {
                            type: Ce.b.CrateGift,
                            id: Object(Me.a)("crate"),
                            message: t,
                            selectedCount: n
                        }))
                    }, this.convertMessage = function(e) {
                        var t = a.bitsConfig || E.a,
                            n = e.message.user.username === a.userLogin ? a.selfEmotes : void 0;
                        return je(Ce.c.Post, e.message.body, e.message.user, t, a.shouldBlockLinks(e.message.user), n)
                    }, this.logger = u.j.withCategory("chat-service"), this.logger.debug("Created"), this.userLogin = e, this.channelLogin = t, this.service = u.o.tmi, this.client = u.o.tmi.client, this.postMessage = n, this.disabled = u.o.tmi.disabled
                }
                return e.prototype.join = function() {
                    return s.__awaiter(this, void 0, void 0, function() {
                        return s.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Joining channel and binding all event listeners", this.channelLogin), this.connectHandlers(), [4, this.service.join(this.channelLogin)];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.part = function() {
                    return s.__awaiter(this, void 0, void 0, function() {
                        return s.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Parting channel and unbinding all event listeners", this.channelLogin), this.client.events.removeAll(), [4, this.service.part()];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.sendMessage = function(e) {
                    var t = this,
                        n = Object(Be.l)(e, this.channelLogin);
                    return n.handled ? n.result && n.result.deferred && n.result.deferred.then(function(e) {
                        var n = e.notice;
                        n && t.postMessage(Object(Le.a)(n))
                    }) : this.client.sendCommand(this.channelLogin, e).catch(function(e) {
                        u.j.warn("Failed to send message, or message timeout", e)
                    }), n.result
                }, e.prototype.updateEmotes = function(e) {
                    this.selfEmotes = Object(Ae.a)(e), this.client.updateEmoteSets(e)
                }, e.prototype.updateChannelBadges = function(e) {
                    this.client.updateChannelBadges(this.channelLogin, e)
                }, e.prototype.updateBitsConfig = function(e) {
                    this.bitsConfig = e
                }, e.prototype.updateBlockLinks = function(e) {
                    this.blockLinks = e
                }, e.prototype.connectHandlers = function() {
                    this.client.events.removeAll(), this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosted(this.onHostedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.crate(this.onCrateEvent), this.client.events.ritual(this.onRitualEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.followersonly(this.onFollowerOnlyModeEvent), this.client.events.slowmode(this.onSlowModeEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent), this.client.events.emoteonlymode(this.onEmoteOnlyModeEvent), this.client.events.charity(this.onBitsCharityEvent)
                }, e.prototype.shouldBlockLinks = function(e) {
                    return e.username !== this.channelLogin && e.userType !== Re.a.Staff && e.userType !== Re.a.GlobalMod && e.userType !== Re.a.Moderator && this.blockLinks
                }, e.prototype.postMessageToCurrentChannel = function(e, t) {
                    e.channel.toLowerCase().replace("#", "") === this.channelLogin.toLowerCase() && this.postMessage(t)
                }, e
            }(),
            Pe = n("H/22"),
            Ve = function() {
                return function(e, t, n) {
                    this.channelID = e, this.sessionUserID = t, this.unsubscribe = u.k.subscribe({
                        topic: Object(M.k)(this.sessionUserID, this.channelID),
                        onMessage: function(e) {
                            switch (e.data.moderation_action) {
                                case O.ModerationActions.AutoModRejected:
                                    var t = Object(Pe.e)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    n(t);
                                    break;
                                case O.TargetedModerationActions.AutoModMessageRejected:
                                    n(Object(Pe.d)());
                                    break;
                                case O.TargetedModerationActions.AutoModMessageApproved:
                                    n(Object(Pe.b)());
                                    break;
                                case O.TargetedModerationActions.AutoModMessageDenied:
                                    n(Object(Pe.c)());
                                    break;
                                case O.ModerationActions.Ban:
                                    n(Object(Pe.g)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], void 0, e.data.args[1]));
                                    break;
                                case O.ModerationActions.Unban:
                                case O.ModerationActions.Timeout:
                                case O.ModerationActions.Untimeout:
                                case O.ModerationActions.Mod:
                                case O.ModerationActions.Unmod:
                                    n(Object(Pe.g)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], e.data.args[1], e.data.args[2]));
                                    break;
                                case O.ModerationActions.AutoModEnabled:
                                case O.ModerationActions.Clear:
                                case O.ModerationActions.EmoteOnly:
                                case O.ModerationActions.EmoteOnlyOff:
                                case O.ModerationActions.FollowersOnly:
                                case O.ModerationActions.FollowersOnlyOff:
                                case O.ModerationActions.Host:
                                case O.ModerationActions.R9kBeta:
                                case O.ModerationActions.R9kBetaOff:
                                case O.ModerationActions.Raid:
                                case O.ModerationActions.Slow:
                                case O.ModerationActions.SlowOff:
                                case O.ModerationActions.SubsBeta:
                                case O.ModerationActions.SubscribersOnly:
                                case O.ModerationActions.SubscribersOnlyOff:
                                case O.ModerationActions.Unhost:
                                case O.ModerationActions.Unraid:
                                    n(Object(Pe.f)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.args));
                                    break;
                                default:
                                    u.j.warn("Unknown moderation action type", e.data.moderation_action)
                            }
                        }
                    })
                }
            }(),
            He = n("QFW6"),
            ze = n("CSlQ"),
            Ge = n("9fnI"),
            We = n("Z3Cb"),
            qe = "(?:\\W|^)",
            Qe = "(?:$|\\W)",
            Ke = 150,
            Ye = "PowerUpL DarkMode PowerUpR",
            $e = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        hasEnteredChatRoom: !1,
                        hostedChannelLogin: null,
                        raidReceived: !1,
                        userBadges: null
                    }, n.sendMessage = function(e) {
                        if (!e || 0 === e.length || !n.props.authToken) return !1;
                        var t = n.chatService.sendMessage(e);
                        return (!t || !t.preserveInput) && (n.parseOutgoingMessage(e), !0)
                    }, n.pushMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e)
                    }, n.onChatMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e), n.onChatEvent(e)
                    }, n.connect = function(e) {
                        n.logger.debug("Connect", n.props.channelLogin), n.setState({
                            hasEnteredChatRoom: !1
                        }), e.userID && e.channelID && (n.moderationActionService = new Ve(e.channelID, e.userID, n.chatBuffer.consumeChatEvent)), n.chatService.join()
                    }, n.disconnect = function() {
                        n.logger.debug("Disconnect", n.props.channelLogin), n.clearBufferHandle(), n.moderationActionService && n.moderationActionService.unsubscribe(), n.chatService.part()
                    }, n.updateBitsConfig = function(e) {
                        void 0 === e && (e = E.a), n.chatService.updateBitsConfig(e)
                    }, n.updateBlockLinks = function(e) {
                        n.chatService.updateBlockLinks(e)
                    }, n.onChatBufferUpdate = function() {
                        n.syncBufferHandle || n.props.isBackground || (n.syncBufferHandle = setTimeout(n.syncBufferedMessages, 0))
                    }, n.syncBufferedMessages = function() {
                        n.chatBuffer && n.chatBuffer.isDirty && n.props.onChatMessagesUpdate(n.chatBuffer.toArray()), n.clearBufferHandle()
                    }, n.onChatEvent = function(e) {
                        switch (e.type) {
                            case Ce.b.Hosting:
                                n.hostingHandler(e.hostedChannel);
                                break;
                            case Ce.b.Unhost:
                                n.hostingHandler(null);
                                break;
                            case Ce.b.Connected:
                                n.onConnected();
                                break;
                            case Ce.b.RoomState:
                                n.roomStateHandler(e.state);
                                break;
                            case Ce.b.BadgesUpdated:
                                n.onBadgesUpdated(e);
                                break;
                            case Ce.b.Raid:
                                n.setState({
                                    raidReceived: !0
                                })
                        }
                    }, n.hostingHandler = function(e) {
                        n.setState({
                            hostedChannelLogin: e
                        }), n.props.onHostingChange && n.props.onHostingChange(e)
                    }, n.roomStateHandler = function(e) {
                        e.slowMode ? n.props.onSlowModeEnable() : n.props.onSlowModeDisable(), void 0 !== e.followersOnly && (e.followersOnly ? (n.props.onFollowerModeDurationChange(e.followersOnlyRequirement), n.props.onFollowerModeEnable()) : n.props.onFollowerModeDisable()), void 0 !== e.subsOnly && (e.subsOnly ? n.props.onSubsOnlyModeEnable() : n.props.onSubsOnlyModeDisable())
                    }, n.onConnected = function() {
                        n.logger.debug("Connected", n.props.channelLogin), n.chatConnected && n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.state.hasEnteredChatRoom || Object(He.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: !!n.state.hostedChannelLogin
                        }), n.setState({
                            hasEnteredChatRoom: !0
                        }), n.props.latencyTracking.reportInteractive()
                    }, n.createOutgoingTokenMatchers = function(e) {
                        n.outgoingTokenMatchers = e.map(function(e) {
                            return {
                                token: e,
                                regex: new RegExp("" + qe + e + Qe)
                            }
                        })
                    }, n.parseOutgoingMessage = function(e) {
                        n.outgoingTokenMatchers.forEach(function(t) {
                            t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                        })
                    }, n.onOutgoingTokenMatch = function(e, t) {
                        switch (e) {
                            case Ye:
                                var a = n.props.theme === p.a.Light ? p.a.Dark : p.a.Light;
                                n.props.onThemeChange(a);
                                break;
                            default:
                                return
                        }
                    }, n.onBadgesUpdated = function(e) {
                        n.setState({
                            userBadges: e.badges
                        })
                    }, n.clearBufferHandle = function() {
                        n.syncBufferHandle && (clearTimeout(n.syncBufferHandle), n.syncBufferHandle = 0)
                    }, n.chatService = new Fe(t.userLogin, t.channelLogin, n.onChatMessage), n.logger = u.j.withCategory("chat-room"), n.registerCustomLatencyEvents(), n.createOutgoingTokenMatchers([Ye]), n.activeChatters = new Ee(t.channelLogin), n.chatBuffer = new Ie(Ke, n.onChatBufferUpdate), n.chatBuffer.setBlockedUsers(t.blockedUsers), t.userLogin && (n.chatBuffer.setCurrentUserLogin(t.userLogin), n.activeChatters.setCurrentUserLogin(t.userLogin)), n
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.shouldConnectOnMount() ? this.connect(this.props) : this.props.latencyTracking.reportInteractive(), this.props.bitsConfig && this.updateBitsConfig(this.props.bitsConfig), this.updateBlockLinks(this.props.blockLinks), this.props.emoteSetsData && this.props.emoteSetsData.emoteSets && (this.logger.debug("Updating emote sets after mount", {
                        emoteSets: this.props.emoteSetsData && this.props.emoteSetsData.emoteSets
                    }), this.chatService.updateEmotes(this.props.emoteSetsData.emoteSets))
                }, t.prototype.componentWillUnmount = function() {
                    this.disconnect(), this.chatBuffer && this.chatBuffer.shutdown(), this.props.onChatMessagesReset()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props,
                        n = !1;
                    if (e.isHidden && !t.isHidden || !e.rightColumnExpanded && t.rightColumnExpanded ? this.disconnect() : (n = e.channelLogin !== t.channelLogin || e.userLogin !== t.userLogin || e.authToken !== t.authToken || !e.isHidden && t.isHidden || e.rightColumnExpanded && !t.rightColumnExpanded) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.connect(e), this.setState({
                            hostedChannelLogin: null
                        })), this.props.isBackground && !e.isBackground) {
                        var a = u.l.getOptional("roomsFastChatThresholdOverride");
                        if (a || (a = 5), this.chatBuffer.chatRate > a) {
                            var i = u.l.getOptional("roomsClearedBufferSize");
                            i || (i = 20), this.chatBuffer.clear(i)
                        }
                        this.props.onChatMessagesUpdate(this.chatBuffer.toArray())
                    }
                    var r = e.emoteSetsData && e.emoteSetsData.emoteSets,
                        s = t.emoteSetsData && t.emoteSetsData.emoteSets;
                    r && (r !== s || n) && (this.logger.debug("Updating emote sets on props change", {
                        shouldReconnect: n,
                        prevEmoteSets: s,
                        nextEmoteSets: r
                    }), this.chatService.updateEmotes(r)), (e.bitsConfig !== t.bitsConfig || n) && this.updateBitsConfig(e.bitsConfig), (e.blockLinks !== t.blockLinks || n) && this.updateBlockLinks(e.blockLinks);
                    var o = e.isCurrentUserModerator ? 0 : e.chatDelayMS;
                    this.chatBuffer.setDelay(o), e.userLogin && t.userLogin !== e.userLogin && (this.chatBuffer.setCurrentUserLogin(e.userLogin), this.activeChatters.setCurrentUserLogin(e.userLogin)), t.channelLogin !== e.channelLogin && this.activeChatters.resetWithChannelLogin(e.channelLogin), t.blockedUsers !== e.blockedUsers && this.chatBuffer.setBlockedUsers(e.blockedUsers), !this.moderationActionService && e.userID && e.channelID && (this.moderationActionService = new Ve(e.channelID, e.userID, this.chatBuffer.consumeChatEvent))
                }, t.prototype.render = function() {
                    var e = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                        t = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {};
                    return o.createElement(We.b, {
                        authToken: this.props.authToken,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        activeChatters: this.activeChatters,
                        chatRoomHeader: o.createElement(de, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        }),
                        chatRules: this.props.chatRules,
                        currentUserDisplayName: this.props.userDisplayName,
                        currentUserLogin: this.props.userLogin,
                        emotes: e,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hostedChannelLogin: this.state.hostedChannelLogin,
                        isBackground: this.props.isBackground,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHidden: this.props.isHidden,
                        isHostMode: !!this.state.hostedChannelLogin,
                        isOwnChannel: this.isOwnChannel,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.props.closeRoomPicker,
                        onChatUnhide: this.props.onChatUnhide,
                        onPushMessage: this.pushMessage,
                        onSendMessage: this.sendMessage,
                        raidReceived: this.state.raidReceived,
                        theme: this.props.theme,
                        isStaff: this.props.isStaff,
                        userBadges: this.state.userBadges,
                        userID: this.props.userID
                    }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && o.createElement(Z, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig
                    }), this.props.hostedChannelDisplayName && !this.props.isPopout && o.createElement(ee, {
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                        hostedChannelLogin: this.state.hostedChannelLogin || ""
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && o.createElement(ce.a, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && o.createElement(ie, {
                        channelLogin: this.props.channelLogin
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && o.createElement(ye, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin
                    }), o.createElement(N.a, {
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        userLogin: this.props.userLogin,
                        userID: this.props.userID,
                        emoteMap: t
                    }), o.createElement(w.a, {
                        currentUserLogin: this.props.userLogin
                    }), o.createElement(_, {
                        channelID: this.props.channelID
                    }))
                }, t.prototype.shouldConnectOnMount = function() {
                    return (this.props.isEmbedded || this.props.isPopout || this.props.rightColumnExpanded) && !this.chatService.disabled
                }, t.prototype.registerCustomLatencyEvents = function() {
                    this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents(f.a.Chat), this.chatInitialized = this.registerInitEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized), this.shouldConnectOnMount() && (this.chatConnected = this.registerConnectedEvent())
                }, t.prototype.registerInitEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 3e3,
                        group: f.a.Chat,
                        key: f.b.ChatInit,
                        label: f.c.Init
                    })
                }, t.prototype.registerConnectedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 4e3,
                        group: f.a.Chat,
                        key: f.b.ChatConnected,
                        label: f.c.Connected
                    })
                }, Object.defineProperty(t.prototype, "isOwnChannel", {
                    get: function() {
                        return this.props.userID === this.props.channelID
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(o.Component);
        var Je = Object(d.compose)(Object(i.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isHidden: e.chat.isHidden,
                    isLoggedIn: Object(r.d)(e),
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theme: Object(b.a)(e)
                }
            }, function(e, t) {
                return Object(c.b)({
                    onChatMessagesReset: function() {
                        return X.B()
                    },
                    onChatMessagesUpdate: function(e) {
                        return X.R(t.channelLogin, e)
                    },
                    onChatUnhide: function() {
                        return X.T()
                    },
                    onFollowerModeDisable: function() {
                        return X.C()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return X.z(e)
                    },
                    onFollowerModeEnable: function() {
                        return X.J()
                    },
                    onSlowModeDisable: function() {
                        return X.G()
                    },
                    onSlowModeEnable: function() {
                        return X.N()
                    },
                    onSubsOnlyModeDisable: function() {
                        return X.H()
                    },
                    onSubsOnlyModeEnable: function() {
                        return X.O()
                    },
                    onThemeChange: function(e) {
                        return Object(g.b)(e, g.a.TypedCommand)
                    }
                }, e)
            }), Object(ze.d)("ChatRoom"), Object(l.a)(Ge, {
                props: function(e) {
                    var t;
                    return e.data && e.data.user && e.data.user.cheer && e.data.user.cheer.emotes && (t = Object(S.a)(e.data.user.cheer.emotes)), {
                        bitsConfig: t
                    }
                },
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(m.a)(), Object(h.a)())($e),
            Ze = n("/eFD"),
            Xe = n("KNSH"),
            et = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.channelData.channel,
                        t = this.props.userData && this.props.userData.user,
                        n = !1,
                        a = !1;
                    if (t && e && e.self) {
                        var i = t.login === e.login;
                        n = e.self.isModerator || i || t.roles.isGlobalMod || t.roles.isSiteAdmin, a = t.roles.isStaff
                    }
                    var r = e && e.chatSettings && e.chatSettings.rules,
                        s = e && e.chatSettings && e.chatSettings.chatDelayMs,
                        l = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                    return o.createElement(Je, {
                        key: this.props.channelLogin,
                        authToken: this.props.user && this.props.user.authToken,
                        blockLinks: l,
                        channelDisplayName: e && e.displayName,
                        channelID: e && e.id,
                        channelLogin: this.props.channelLogin,
                        chatRules: r,
                        chatDelayMS: s,
                        clientID: this.props.clientID,
                        isBackground: this.props.isBackground,
                        isCurrentUserModerator: n,
                        isEmbedded: !!this.props.isEmbedded,
                        isPopout: !!this.props.isPopout,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                        closeRoomPicker: this.props.closeRoomPicker,
                        onHostingChange: this.props.onHostingChange,
                        userDisplayName: this.props.user && this.props.user.displayName,
                        userID: this.props.user && this.props.user.id.toString(),
                        userLogin: this.props.user && this.props.user.login,
                        isStaff: a
                    })
                }, t = s.__decorate([Object(l.a)(Ze, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(l.a)(Xe, {
                    name: "userData",
                    skip: function(e) {
                        return !e.user
                    }
                }), Object(ze.d)("Chat")], t)
            }(o.Component);
        var tt = Object(i.b)(function(e) {
            return {
                user: Object(r.c)(e)
            }
        })(et);
        n.d(t, !1, function() {
            return et
        }), n.d(t, "a", function() {
            return tt
        })
    },
    "1Eny": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1F7R": function(e, t, n) {
        "use strict";
        var a = n("RH2O"),
            i = n("2KeS"),
            r = n("vh75"),
            s = n("TToO"),
            o = n("GiK3"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.props.addCommand(this.props.command, this.props.handler)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.command === e.command && this.props.handler === e.handler || (this.props.removeCommand(this.props.command), this.props.addCommand(e.command, e.handler))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.removeCommand(this.props.command)
                }, t.prototype.render = function() {
                    return null
                }, t
            }(o.PureComponent);
        var d = Object(a.b)(null, function(e) {
            return Object(i.b)({
                addCommand: r.y,
                removeCommand: r.S
            }, e)
        })(l);
        n.d(t, "a", function() {
            return d
        })
    },
    "1OO3": function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("7vx8"),
            r = 60,
            s = 60 * r,
            o = 24 * s,
            l = 7 * o,
            d = 4 * l;
        var c, u = n("MApH");
        n.d(t, "a", function() {
                return c
            }), t.b = function(e) {
                var t = this;
                return Object(i.a)(u, {
                    props: function(n) {
                        return {
                            banUserMutation: function(i, c) {
                                return void 0 === c && (c = null), a.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return a.__generator(this, function(a) {
                                        switch (a.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                a.label = 1;
                                            case 1:
                                                return a.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: i,
                                                            expiresIn: c && function(e) {
                                                                if (!e) return "0s";
                                                                var t = e,
                                                                    n = "";
                                                                if (t > d) {
                                                                    var a = Math.floor(t / d);
                                                                    t -= a * d, n += a + "mo"
                                                                }
                                                                if (t > l) {
                                                                    var i = Math.floor(t / l);
                                                                    t -= i * l, n += i + "w"
                                                                }
                                                                if (t > o) {
                                                                    var c = Math.floor(t / o);
                                                                    t -= c * o, n += c + "d"
                                                                }
                                                                if (t > s) {
                                                                    var u = Math.floor(t / s);
                                                                    t -= u * s, n += u + "h"
                                                                }
                                                                if (t > r) {
                                                                    var p = Math.floor(t / r);
                                                                    t -= p * r, n += p + "m"
                                                                }
                                                                return t > 0 && (n += t + "s"), n
                                                            }(c)
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return [2, a.sent().data];
                                            case 3:
                                                throw a.sent(), new Error("Unable to ban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Ban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            },
            function(e) {
                e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetIsSelf = "TARGET_IS_SELF", e.TargetIsAnonymous = "TARGET_IS_ANONYMOUS", e.TargetIsMod = "TARGET_IS_MOD", e.TargetIsBroadcaster = "TARGET_IS_BROADCASTER", e.TargetIsStaff = "TARGET_IS_STAFF", e.TargetIsAdmin = "TARGET_IS_ADMIN", e.TargetIsGlobalMod = "TARGET_IS_GLOBAL_MOD", e.TargetIsAlreadyBanned = "TARGET_ALREADY_BANNED", e.DurationInvalid = "DURATION_INVALID"
            }(c || (c = {}))
    },
    "1bR2": function(e, t, n) {
        e.exports = n.p + "assets/gift1-8573b4d1700bd278971c52e7d077d1c4.png"
    },
    "1tZx": function(e, t) {},
    "1vwK": function(e, t) {},
    "2B/Z": function(e, t) {},
    "2I50": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChatInput_SendCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendCheerInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "currentUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsBalance"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\nsendCheer(input: $input) {\nid\ncurrentUser {\nid\nbitsBalance\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2IkU": function(e, t) {},
    "2ZhA": function(e, t) {},
    "3LYq": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_AllowRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AllowRejectedChatMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "allowRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\nallowRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3T7g": function(e, t, n) {
        "use strict";
        var a = n("RbGx"),
            i = n("mbxv"),
            r = n("+V/3"),
            s = (n("AwFw"), n("TToO")),
            o = function() {
                function e(e, t, n) {
                    this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                }
                return e.prototype.getBadge = function(e, t) {
                    var n = this.channelsBySet.get(e);
                    return n && n.has(t) ? n.get(t) || null : void 0 !== (n = this.globalsBySet.get(e)) && n.get(t) || null
                }, e.prototype.indexBadges = function(e, t, n) {
                    e.forEach(function(e) {
                        n && e.clickAction === r.b && (e = s.__assign({}, e, {
                            channelName: n
                        }));
                        var a = t.get(e.setID);
                        a || (a = new Map, t.set(e.setID, a)), a.set(e.version, e)
                    })
                }, e
            }();
        new o([], [], "");
        n.d(t, "b", function() {
            return a.a
        }), n.d(t, "a", function() {
            return i.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return o
        })
    },
    "4Q5V": function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("6sO2"),
            s = n("HW6M"),
            o = n("3zLD"),
            l = n("7vx8"),
            d = n("oIkB"),
            c = n("RbGx"),
            u = n("iydZ"),
            p = n("RH2O"),
            m = n("2KeS"),
            h = n("3T7g"),
            g = n("ass3"),
            f = n("Nay6"),
            b = n("aUOx"),
            v = n("Ncf8"),
            k = n("qkCi"),
            y = n("1OO3"),
            C = n("KBUQ"),
            _ = n("JtUK"),
            E = n("Kthq"),
            S = n("Odds"),
            w = (n("S4DY"), function(e) {
                var t = e.onBanUser,
                    n = S._23.Ban,
                    a = Object(r.d)("Ban {login}", {
                        login: e.senderLogin
                    }, "ModerationIcons"),
                    s = "chat-ban-button";
                return e.isMessageDeleted && (t = e.onUnbanUser, n = S._23.FollowCheck, a = Object(r.d)("Unban {login}", {
                    login: e.senderLogin
                }, "ModerationIcons"), s = "chat-unban-button"), i.createElement(S._32, {
                    color: S.K.Alt2,
                    display: S.R.Inline,
                    margin: {
                        right: .5
                    }
                }, i.createElement("button", {
                    className: "mod-icon",
                    onClick: t,
                    "data-test-selector": s
                }, i.createElement(S._49, {
                    align: S._50.Left,
                    label: a
                }, i.createElement(S._22, {
                    width: 16,
                    height: 16,
                    type: S._24.Inherit,
                    asset: n
                }))), i.createElement("button", {
                    className: "mod-icon",
                    onClick: e.onTimeoutUser,
                    "data-test-selector": "chat-timeout-button"
                }, i.createElement(S._49, {
                    align: S._50.Left,
                    label: Object(r.d)("Timeout {login}", {
                        login: e.senderLogin
                    }, "ModerationIcons")
                }, i.createElement(S._22, {
                    width: 16,
                    height: 16,
                    type: S._24.Inherit,
                    asset: S._23.Timeout
                }))))
            }),
            N = 600,
            T = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanUser = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return a.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return a.trys.push([0, 2, , 3]), [4, this.props.banUserMutation(this.props.senderLogin)];
                                    case 1:
                                        return e = a.sent().banUserFromChatRoom, this.props.onPushMessage && (e.error ? (n = Object(b.a)(Object(_.a)(this.props.senderLogin, e.error.code)), this.props.onPushMessage(n)) : (t = Object(v.a)(k.e.Ban, this.props.senderLogin, null, null), this.props.onPushMessage(t))), [3, 3];
                                    case 2:
                                        return a.sent(), this.props.onPushMessage && (n = Object(b.a)(Object(r.d)("Unable to ban user.", "ModerationIcons")), this.props.onPushMessage(n)), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.onTimeoutUser = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return a.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return a.trys.push([0, 2, , 3]), [4, this.props.banUserMutation(this.props.senderLogin, N)];
                                    case 1:
                                        return e = a.sent().banUserFromChatRoom, this.props.onPushMessage && (e.error ? (n = Object(b.a)(Object(_.a)(this.props.senderLogin, e.error.code, !0)), this.props.onPushMessage(n)) : (t = Object(v.a)(k.e.Timeout, this.props.senderLogin, null, N), this.props.onPushMessage(t))), [3, 3];
                                    case 2:
                                        return a.sent(), this.props.onPushMessage && (n = Object(b.a)(Object(r.d)("Unable to timeout user.", "ModerationIcons")), this.props.onPushMessage(n)), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.onUnbanUser = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return a.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return n.trys.push([0, 2, , 3]), [4, this.props.unbanUserMutation(this.props.senderLogin)];
                                    case 1:
                                        return e = n.sent().unbanUserFromChatRoom, this.props.onPushMessage && (e.error ? (t = Object(b.a)(Object(E.a)(this.props.senderLogin, e.error.code)), this.props.onPushMessage(t)) : (t = Object(b.a)(Object(r.d)("{bannedUserLogin} is no longer banned from this channel.", {
                                            bannedUserLogin: this.props.senderLogin
                                        }, "ModerationIcons")), this.props.onPushMessage(t))), [3, 3];
                                    case 2:
                                        return n.sent(), this.props.onPushMessage && (t = Object(b.a)(Object(r.d)("Unable to unban user.", "ModerationIcons")), this.props.onPushMessage(t)), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return i.createElement(w, {
                        isMessageDeleted: this.props.isMessageDeleted,
                        onBanUser: this.onBanUser,
                        onTimeoutUser: this.onTimeoutUser,
                        onUnbanUser: this.onUnbanUser,
                        senderLogin: this.props.senderLogin
                    })
                }, t
            }(i.Component),
            D = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            O = Object(o.compose)(Object(y.b)(D), Object(C.b)(D))(T),
            I = n("g7wA"),
            M = n("O9wU"),
            R = (n("B88H"), "chat-deleted-message-placeholder"),
            L = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        alwaysShowMessage: !1
                    }, t.renderModerationIcons = function() {
                        return t.props.isCurrentUserModerator && t.props.showModerationIcons ? i.createElement(O, {
                            channelID: t.props.channelID,
                            isMessageDeleted: t.props.message.deleted,
                            senderLogin: t.props.message.user.userLogin
                        }) : null
                    }, t.renderMessageBody = function() {
                        if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                            var e = Object(r.d)("message deleted", "ChatLine");
                            return t.props.isCurrentUserModerator || t.props.isCurrentUserStaff ? i.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": R
                            }, i.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + e + ">")) : i.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": R
                            }, "<" + e + ">")
                        }
                        return Object(I.e)(t.props.message.messageParts, t.props.currentUserDisplayName, t.props.currentUserLogin)
                    }, t.alwaysShowMessage = function(e) {
                        e && e.preventDefault(), t.setState({
                            alwaysShowMessage: !0
                        })
                    }, t.usernameClickHandler = function(e) {
                        t.props.onUsernameClick(t.props.message.user.userLogin, M.a.chat_message, t.props.message.id, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.badgeSets,
                        n = e.className,
                        a = e.message,
                        r = e.showTimestamps,
                        o = {},
                        l = ": ";
                    a.messageType === k.c.Action && (o = {
                        color: a.user.color
                    }, l = " ");
                    var d = null;
                    return r && (d = Object(I.j)(a.timestamp)), i.createElement("div", {
                        className: s(n, "chat-line__message"),
                        style: o,
                        "data-a-target": "chat-line-message"
                    }, d, this.renderModerationIcons(), i.createElement(h.b, {
                        badgeSets: t,
                        badgesToRender: a.badges
                    }), i.createElement("button", {
                        onClick: this.usernameClickHandler,
                        className: "chat-line__username"
                    }, i.createElement(f.a, {
                        userData: a.user
                    })), i.createElement("span", {
                        key: "separator",
                        "aria-hidden": "true"
                    }, l), this.renderMessageBody())
                }, t
            }(i.Component);
        var x = Object(o.compose)(Object(p.b)(void 0, function(e) {
                return Object(m.b)({
                    onUsernameClick: g.d
                }, e)
            }))(L),
            j = n("6Agf"),
            U = n("l21v"),
            B = n("3LYq"),
            A = n("IEOs"),
            F = {
                badges: {
                    twitchbot: "1"
                },
                bits: 0,
                color: "#6441A5",
                displayName: "AutoMod",
                id: "automod",
                userID: "automod",
                username: "automod",
                userType: j.a.GlobalMod,
                emotes: null
            },
            P = {
                VoHiYo: {
                    displayName: "VoHiYo",
                    id: "81274",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/81274/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/3.0 3.0x",
                    token: "VoHiYo"
                }
            };
        var V = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isResolved: !1
                    }, t.allowAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        });
                        var e = t.props.message;
                        e.autoModType === k.a.MessageRejectedPrompt && t.props.allowRejectedChatMessage && t.props.allowRejectedChatMessage(Object(d.a)({
                            id: e.rejectedMessage.id
                        }))
                    }, t.denyAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        });
                        var e = t.props.message;
                        e.autoModType === k.a.MessageRejectedPrompt && t.props.denyRejectedChatMessage && t.props.denyRejectedChatMessage(Object(d.a)({
                            id: e.rejectedMessage.id
                        }))
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e, t = this.props.message;
                    switch (t.autoModType) {
                        case k.a.MessageRejectedPrompt:
                            e = function(e) {
                                var t;
                                switch (e) {
                                    case "aggressive":
                                        t = Object(r.d)("aggressive", "AutoModLine");
                                        break;
                                    case "sexual":
                                        t = Object(r.d)("sexual", "AutoModLine");
                                        break;
                                    case "profanity":
                                        t = Object(r.d)("profanity", "AutoModLine");
                                        break;
                                    case "identity":
                                        t = Object(r.d)("identity", "AutoModLine");
                                        break;
                                    default:
                                        return Object(r.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
                                }
                                return Object(r.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                                    category: t
                                }, "AutoModLine")
                            }(t.category);
                            break;
                        case k.a.MessageRejected:
                            e = Object(r.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                            break;
                        case k.a.MessageAllowed:
                            e = Object(r.d)("Mods have allowed your message. Happy chatting!", "AutoModLine"), e += " VoHiYo";
                            break;
                        case k.a.MessageDenied:
                            e = Object(r.d)("Mods have removed your message.", "AutoModLine");
                            break;
                        default:
                            throw new Error("Invalid message type")
                    }
                    var n = Object(U.a)(e, F, u.a, !1, P);
                    switch (t.autoModType) {
                        case k.a.MessageRejectedPrompt:
                            if (this.state.isResolved) return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, Object(r.d)("Thank you for your feedback!", "ChatLine"));
                            return i.createElement(S._8, {
                                className: "chat-line__message"
                            }, i.createElement(c.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: n.badges
                            }), i.createElement(f.a, {
                                userData: n.user
                            }), i.createElement("span", {
                                key: "separator"
                            }, ": "), Object(I.e)(n.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin), i.createElement(S._8, {
                                key: "automod-prompt",
                                className: "chat-line__nested-component--float-right"
                            }, i.createElement(S.v, {
                                size: S.z.Small,
                                onClick: this.allowAutoModRejectedMessage,
                                type: S.B.Text
                            }, Object(r.d)("Allow", "AutoModLine")), i.createElement(S.Q, {
                                type: S._46.Span
                            }, "•"), i.createElement(S.v, {
                                size: S.z.Small,
                                onClick: this.denyAutoModRejectedMessage,
                                type: S.B.Text
                            }, Object(r.d)("Deny", "AutoModLine"))), i.createElement(x, a.__assign({}, this.props, {
                                isDeleted: !1,
                                showTimestamps: !1,
                                className: s(["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"]),
                                message: t.rejectedMessage
                            })));
                        case k.a.MessageRejected:
                        case k.a.MessageAllowed:
                        case k.a.MessageDenied:
                            return i.createElement(S._8, {
                                className: s(["chat-line__message", "chat-line__message--special", "chat-line__message--alert"])
                            }, i.createElement(c.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: n.badges
                            }), i.createElement(f.a, {
                                userData: n.user
                            }), i.createElement("span", {
                                key: "separator"
                            }, ": "), Object(I.e)(n.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin));
                        default:
                            throw new Error("Invalid message type")
                    }
                }, t
            }(i.Component),
            H = Object(o.compose)(Object(l.a)(B, {
                name: "allowRejectedChatMessage",
                options: {}
            }), Object(l.a)(A, {
                name: "denyRejectedChatMessage",
                options: {}
            }))(V),
            z = (n("vadT"), function(e) {
                return i.createElement(S._8, {
                    className: "user-notice-line",
                    margin: {
                        y: .5
                    },
                    padding: {
                        right: 2,
                        y: .5
                    }
                }, e.children)
            }),
            G = n("91zu"),
            W = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.params,
                        t = this.props.data,
                        n = t.channel,
                        a = t.loading,
                        s = t.error;
                    if (a || s) return null;
                    var o = Object(r.d)("{displayName} is raiding with a party of {viewerCount}.", {
                        displayName: i.createElement("strong", null, n.displayName),
                        viewerCount: i.createElement("strong", null, e.viewerCount)
                    }, "RaidIncomingMessage");
                    return i.createElement(z, {
                        "data-test-selector": "incoming-raid"
                    }, i.createElement(S._8, {
                        display: S.R.Flex,
                        alignItems: S.c.Center
                    }, i.createElement(S.m, {
                        alt: n.displayName,
                        src: n.profileImageURL,
                        size: 30
                    }), i.createElement(S._32, {
                        color: S.K.Base,
                        margin: {
                            left: 1
                        }
                    }, o)))
                }, t
            }(i.Component),
            q = Object(l.a)(G, {
                options: function(e) {
                    return {
                        variables: {
                            channelLogin: e.message.params.login
                        }
                    }
                }
            })(W),
            Q = n("H/22"),
            K = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.moderationActionEvent,
                        t = null;
                    if (e.moderationActionType === k.d.AutoModEnabled) t = Object(r.d)("AutoMod has been enabled for this channel.", "ModerationActionLine");
                    else if (e.level === Q.a.Channel) {
                        var n = e.args && e.args.join(" ").trim(),
                            a = n && n.length > 0 ? "/" + e.moderationActionType + " " + n : "" + e.moderationActionType;
                        t = Object(r.d)("{user} used: {command}.", {
                            user: e.createdByLogin,
                            command: a
                        }, "ModerationActionLine")
                    } else {
                        var s = e.createdByLogin,
                            o = e.targetUserLogin,
                            l = e.duration,
                            d = e.reason;
                        switch (e.moderationActionType) {
                            case k.d.Timeout:
                                t = l && d ? Object(r.d)("{user} timed out {target} for {duration} seconds. Reason: {reason}.", {
                                    user: s,
                                    target: o,
                                    duration: l,
                                    reason: d
                                }, "ModerationActionLine") : l ? Object(r.d)("{user} timed out {target} for {duration} seconds.", {
                                    user: s,
                                    target: o,
                                    duration: l
                                }, "ModerationActionLine") : Object(r.d)("{user} timed out {target}.", {
                                    user: s,
                                    target: o
                                }, "ModerationActionLine");
                                break;
                            case k.d.Ban:
                                t = d ? Object(r.d)("{user} banned {target}. Reason: {reason}.", {
                                    user: s,
                                    target: o,
                                    reason: d
                                }, "ModerationActionLine") : Object(r.d)("{user} banned {target}.", {
                                    user: s,
                                    target: o
                                }, "ModerationActionLine");
                                break;
                            case k.d.Untimeout:
                                t = Object(r.d)("{user} removed time out on {target}.", {
                                    user: s,
                                    target: o
                                }, "ModerationActionLine");
                                break;
                            case k.d.Unban:
                                t = Object(r.d)("{user} removed ban on {target}.", {
                                    user: s,
                                    target: o
                                }, "ModerationActionLine");
                                break;
                            case k.d.Mod:
                                t = Object(r.d)("{user} granted moderator privileges to {target}.", {
                                    user: s,
                                    target: o
                                }, "ModerationActionLine");
                                break;
                            case k.d.Unmod:
                                t = Object(r.d)("{user} removed moderator privileges for {target}.", {
                                    user: s,
                                    target: o
                                }, "ModerationActionLine");
                                break;
                            default:
                                return null
                        }
                    }
                    return t ? i.createElement(S._8, {
                        className: "chat-line__status"
                    }, i.createElement(S.Q, {
                        type: S._46.Span
                    }, t)) : null
                }, t
            }(i.Component);

        function Y() {
            return {
                raid_error_self: Object(r.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                raid_error_forbidden: Object(r.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                raid_error_already_raiding: Object(r.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                raid_error_too_many_viewers_to_raid: Object(r.d)("Sorry, raids can only support up to 20,000 viewers right now.", "RaidErrorTooManyViewersMessage"),
                raid_error_unexpected: Object(r.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                unraid_error_unexpected: Object(r.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                unraid_error_no_active_raid: Object(r.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                raid_notice_restricted_chat: Object(r.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                raid_notice_mature: Object(r.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                raid_notice_owner: Object(r.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                    unraidCommand: "/unraid"
                }, "RaidNoticeOwnerMessage")
            }
        }
        var $ = function(e) {
                return i.createElement("span", null, Y()[e.message.msgid])
            },
            J = n("yDzg"),
            Z = (n("BlKL"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        t.props.onUsernameClick(t.props.login, t.props.sourceType, t.props.contentID, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return i.createElement("button", {
                        className: "chatter-name",
                        onClick: this.usernameClickHandler
                    }, i.createElement(S.Q, {
                        bold: !0,
                        color: S.K.Base,
                        type: S._46.Span
                    }, this.props.children))
                }, t
            }(i.Component));
        var X = Object(o.compose)(Object(p.b)(void 0, function(e) {
            return Object(m.b)({
                onUsernameClick: g.d
            }, e)
        }))(Z);

        function ee(e) {
            switch (e) {
                case "Tier 2":
                    return Object(r.d)("Tier 2", "ChatLine");
                case "Tier 3":
                    return Object(r.d)("Tier 3", "ChatLine");
                default:
                    return Object(r.d)("Tier 1", "ChatLine")
            }
        }
        var te = function(e) {
            var t, n, a = i.createElement(X, {
                    contentID: e.event.user.id,
                    login: e.event.user.username,
                    sourceType: M.a.chat_message
                }, e.event.user.displayName),
                s = null;
            return s = e.event.isPrime ? Object(r.d)("{userLogin} just subscribed with {service}!", {
                userLogin: a,
                service: (t = e.event.channel, n = Object(J.a)("https://twitch.amazon.com/prime", {
                    ref: "subscriptionMessage",
                    channel: t
                }), i.createElement("a", {
                    className: "chat-line__message--link",
                    href: n,
                    target: "_blank",
                    rel: "noopener"
                }, Object(r.d)("Twitch Prime", "ChatLine")))
            }, "ChatLine") : Object(r.d)("{userLogin} just subscribed with a {subTier} sub!", {
                userLogin: a,
                subTier: ee(e.event.tier)
            }, "ChatLine"), i.createElement(S.Q, {
                color: S.K.Alt2,
                type: S._46.Span
            }, s)
        };
        var ne = function(e) {
                return i.createElement(S._32, {
                    color: S.K.Alt2,
                    display: S.R.Inline
                }, i.createElement(te, {
                    event: e.event
                }), i.createElement("span", null, " "), Object(r.d)("{userLogin} subscribed for {months} months in a row!", {
                    userLogin: i.createElement(X, {
                        contentID: e.event.user.id,
                        login: e.event.user.username,
                        sourceType: M.a.chat_message
                    }, e.event.user.displayName),
                    months: e.event.months
                }, "ChatLine"))
            },
            ae = function(e) {
                var t = e.event.message,
                    n = t.user.isIntl ? t.user.userDisplayName + " (" + t.user.userLogin + ")" : t.user.userDisplayName,
                    a = Object(r.d)("{user} is new here. Say hello!", {
                        user: i.createElement(X, {
                            contentID: t.id,
                            login: t.user.userLogin,
                            sourceType: M.a.chat_message
                        }, "@", n)
                    }, "NewChatterRitual");
                return i.createElement(S._32, {
                    color: S.K.Alt2
                }, a)
            },
            ie = function(e) {
                var t = i.createElement(X, {
                        contentID: e.event.user.id,
                        login: e.event.user.username,
                        sourceType: M.a.chat_message
                    }, e.event.user.displayName),
                    n = i.createElement(X, {
                        contentID: e.event.user.id,
                        login: e.event.recipientLogin,
                        sourceType: M.a.chat_message
                    }, e.event.recipientDisplayName),
                    a = null;
                return a = "custom" === e.event.tier ? function(e, t, n) {
                    return 1 === n ? Object(r.d)("{userLogin} gifted a Sub to {recipient}! It's their first Gift Sub in the channel!", {
                        userLogin: e,
                        recipient: t
                    }, "ChatLine") : n > 1 ? Object(r.d)("{userLogin} gifted a Sub to {recipient}! They've given {senderCount} Gift Subs in the channel!", {
                        userLogin: e,
                        recipient: t,
                        senderCount: n
                    }, "ChatLine") : Object(r.d)("{userLogin} gifted a subscription to {recipient}!", {
                        userLogin: e,
                        recipient: t
                    }, "ChatLine")
                }(t, n, e.event.senderCount) : function(e, t, n, a) {
                    var i = ee(t);
                    return 1 === a ? Object(r.d)("{userLogin} gifted a {subTier} Sub to {recipient}! It's their first Gift Sub in the channel!", {
                        userLogin: e,
                        subTier: i,
                        recipient: n
                    }, "ChatLine") : a > 1 ? Object(r.d)("{userLogin} gifted a {subTier} Sub to {recipient}! They've given {senderCount} Gift Subs in the channel!", {
                        userLogin: e,
                        subTier: i,
                        recipient: n,
                        senderCount: a
                    }, "ChatLine") : Object(r.d)("{userLogin} gifted a {subTier} Sub to {recipient}!", {
                        userLogin: e,
                        subTier: i,
                        recipient: n
                    }, "ChatLine")
                }(t, e.event.tier, n, e.event.senderCount), i.createElement(S.Q, {
                    color: S.K.Alt2,
                    type: S._46.Span
                }, a)
            };
        n("+5Qw");
        var re = "timeout_success",
            se = "ban_success",
            oe = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    if (!e.doesNotUpdate) return !0;
                    if (e.isCurrentUserModerator !== this.props.isCurrentUserModerator) return !0;
                    if (e.showModerationIcons !== this.props.showModerationIcons) return !0;
                    if (e.showTimestamps !== this.props.showTimestamps) return !0;
                    switch (e.message.type) {
                        case k.b.Message:
                            if (e.message.deleted) return !0;
                            break;
                        case k.b.Resubscription:
                        case k.b.Ritual:
                            if (e.message.message && e.message.message.deleted) return !0;
                            break;
                        case k.b.AutoMod:
                            if (e.message.autoModType === k.a.MessageRejectedPrompt && e.showAutoModActions !== this.props.showAutoModActions) return !0;
                            break;
                        case k.b.ModerationAction:
                            if (e.showModerationActions !== this.props.showModerationActions) return !0
                    }
                    return !1
                }, t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case k.b.AutoMod:
                            return e.autoModType !== k.a.MessageRejectedPrompt || this.props.isCurrentUserModerator && this.props.showAutoModActions ? i.createElement(H, {
                                channelID: this.props.channelID,
                                message: e,
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                showModerationIcons: this.props.showModerationIcons,
                                currentUserLogin: this.props.currentUserLogin
                            }) : null;
                        case k.b.ModerationAction:
                            return this.props.isCurrentUserModerator && this.props.showModerationActions ? i.createElement(K, {
                                moderationActionEvent: e
                            }) : null;
                        case k.b.Connected:
                            return i.createElement(S._8, {
                                className: "chat-line__status",
                                "data-a-target": "chat-welcome-message"
                            }, i.createElement(S.Q, {
                                type: S._46.Span
                            }, Object(r.d)("Welcome to the chat room!", "ChatLine")));
                        case k.b.Disconnected:
                            return e.reason ? i.createElement(S._8, {
                                className: "chat-line__status"
                            }, i.createElement(S.Q, {
                                type: S._46.Span
                            }, Object(r.d)("You have been disconnected from chat for the following reason: {reason}", {
                                reason: e.reason
                            }, "ChatLine"))) : i.createElement(S._8, {
                                className: "chat-line__status"
                            }, i.createElement(S.Q, {
                                type: S._46.Span
                            }, Object(r.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                        case k.b.Hosted:
                            var t = null;
                            return t = e.isAutohost ? Object(r.d)("{host} is now auto hosting you for up to {viewerCount, number} viewers.", {
                                host: e.hostingChannel,
                                viewerCount: e.viewerCount
                            }, "ChatLine") : e.viewerCount <= 2 ? Object(r.d)("{host} is now hosting you.", {
                                host: e.hostingChannel
                            }, "ChatLine") : Object(r.d)("{host} is now hosting you for up to {viewerCount, number} viewers.", {
                                host: e.hostingChannel,
                                viewerCount: e.viewerCount
                            }, "ChatLine"), i.createElement(S._8, {
                                className: "chat-line__status"
                            }, i.createElement(S.Q, {
                                type: S._46.Span
                            }, t));
                        case k.b.Hosting:
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, i.createElement(S.Q, {
                                type: S._46.Span
                            }, Object(r.d)("Now hosting {channel}", {
                                channel: e.hostedChannel
                            }, "ChatLine")));
                        case k.b.Unhost:
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, i.createElement(S.Q, {
                                type: S._46.Span
                            }, Object(r.d)("No longer hosting.", "ChatLine")));
                        case k.b.Message:
                            return this.props.onRenderReportChatSent && e.user.userLogin === this.props.currentUserLogin && this.props.onRenderReportChatSent(), i.createElement(x, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e,
                                isDeleted: e.deleted,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            });
                        case k.b.Moderation:
                            return this.props.isCurrentUserModerator ? i.createElement(S._8, {
                                className: "chat-line__moderation"
                            }, Object(I.f)(e)) : null;
                        case k.b.Subscription:
                            return i.createElement(z, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && i.createElement(O, {
                                channelID: this.props.channelID,
                                onPushMessage: this.props.onPushMessage,
                                senderLogin: e.user.username
                            }), i.createElement(te, {
                                event: e
                            }));
                        case k.b.SubGift:
                            return i.createElement(z, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && i.createElement(O, {
                                channelID: this.props.channelID,
                                onPushMessage: this.props.onPushMessage,
                                senderLogin: e.user.username
                            }), i.createElement(ie, {
                                event: e
                            }));
                        case k.b.BitsCharity:
                            return i.createElement(S._8, {
                                className: "chat-line__bits-charity",
                                padding: {
                                    right: 2,
                                    y: .5
                                }
                            }, Object(I.b)(e));
                        case k.b.Resubscription:
                            var n = null;
                            return e.message && (n = i.createElement(x, {
                                badgeSets: this.props.badgeSets,
                                channelID: this.props.channelID,
                                className: "chat-line--inline",
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                isDeleted: e.message.deleted,
                                message: e.message,
                                onPushMessage: this.props.onPushMessage,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps
                            })), i.createElement(z, null, !n && this.props.isCurrentUserModerator && this.props.showModerationIcons && i.createElement(O, {
                                channelID: this.props.channelID,
                                onPushMessage: this.props.onPushMessage,
                                senderLogin: e.user.username
                            }), i.createElement(ne, {
                                event: e
                            }), i.createElement(S._8, null, n));
                        case k.b.RoomMods:
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, Object(I.g)(e.moderatorLogins));
                        case k.b.SlowMode:
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, Object(I.h)(e));
                        case k.b.SubscriberOnlyMode:
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, Object(I.i)(e));
                        case k.b.FollowerOnlyMode:
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, Object(I.d)(e));
                        case k.b.EmoteOnlyMode:
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, Object(I.c)(e));
                        case k.b.Clear:
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, Object(r.d)("Chat was cleared by a moderator", "ChatLine"));
                        case k.b.Notice:
                            if (function(e) {
                                    return e.msgid in Y()
                                }(e)) return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, i.createElement($, {
                                message: e
                            }));
                            if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                case re:
                                case se:
                                    return null
                            }
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, e.message);
                        case k.b.Info:
                            return i.createElement(S._8, {
                                className: "chat-line__status"
                            }, e.message);
                        case k.b.Raid:
                            return i.createElement(q, {
                                message: e
                            });
                        case k.b.Unraid:
                            return i.createElement(z, null, i.createElement(S.Q, {
                                color: S.K.Alt2
                            }, Object(r.d)("The raid has been cancelled.", "RaidCancelMessage")));
                        case k.b.Ritual:
                            return i.createElement(z, null, i.createElement(ae, {
                                event: e
                            }), i.createElement(x, {
                                badgeSets: this.props.badgeSets,
                                channelID: this.props.channelID,
                                className: "chat-line--inline",
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                isDeleted: e.message.deleted,
                                message: e.message,
                                onPushMessage: this.props.onPushMessage,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps
                            }));
                        default:
                            return null
                    }
                }, t
            }(i.Component);
        n.d(t, "a", function() {
            return oe
        })
    },
    "54rb": function(e, t) {},
    "56e8": function(e, t) {},
    "5Dex": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsPinnedCheerV2_LeaderboardEntry"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "profileImageWidth"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "profileImageWidth"
                                        }
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 168
            }
        };
        n.loc.source = {
            body: "query BitsPinnedCheerV2_LeaderboardEntry($userID: ID! $profileImageWidth: Int!) {\nuser(id: $userID) {\nid\ndisplayName\nlogin\nprofileImageURL(width:$profileImageWidth)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5vPJ": function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("GxDs"),
            l = n("pexS"),
            d = {
                isTimedOut: !1
            },
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = d, t.timeoutID = null, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.props.data.clip || (this.timeoutID = setTimeout(function() {
                        e.setState({
                            isTimedOut: !0
                        })
                    }, 5e3))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                        isTimedOut: !1
                    }))
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.clip,
                        n = e.error,
                        a = e.loading;
                    return n || this.state.isTimedOut ? i.createElement(o.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "ClipsChatCard"),
                            description: Object(r.d)("We couldn't find that Clip", "ClipsChatCard")
                        }
                    }) : a || !t ? i.createElement(o.a, null) : i.createElement(o.a, {
                        data: {
                            title: t.title || (t.broadcaster ? Object(r.d)("Clip of {broadcaster}", {
                                broadcaster: t.broadcaster.displayName
                            }, "ClipsChatCard") : ""),
                            description: t.curator ? Object(r.d)("Clipped by {curator}", {
                                curator: t.curator.displayName
                            }, "ClipsChatCard") : "",
                            previewImageURL: t.thumbnailURL,
                            contentURL: t.url
                        }
                    })
                }, t
            }(i.Component),
            u = function(e) {
                return {
                    variables: {
                        slug: e.slug
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: e.forceNetworkRequest ? "cache-first" : "cache-only"
                }
            },
            p = Object(s.a)(l, {
                options: u
            })(c);
        n.d(t, !1, function() {
            return 5e3
        }), n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return d
        }), n.d(t, !1, function() {
            return c
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return p
        })
    },
    "6Agf": function(e, t, n) {
        "use strict";
        var a;
        n.d(t, "a", function() {
                return a
            }),
            function(e) {
                e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
            }(a || (a = {}))
    },
    "6vcJ": function(e, t) {},
    "6yQB": function(e, t, n) {
        "use strict";
        var a = n("RH2O"),
            i = n("2KeS"),
            r = n("iJpA"),
            s = n("c8Oh"),
            o = n("TToO"),
            l = n("GiK3"),
            d = n("6sO2"),
            c = n("zCIC"),
            u = n("+Znq"),
            p = n("D9fv"),
            m = n("CSlQ"),
            h = n("Odds"),
            g = (n("vQzq"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleLanguageChange = function(e) {
                        var n = e.currentTarget,
                            a = n.parentElement && n.parentElement.getAttribute("data-language-code");
                        a && t.props.updateLanguagePreferences(a, n.checked)
                    }, t.renderLanguageOption = function(e) {
                        return l.createElement(h._8, {
                            padding: {
                                x: 1,
                                y: .5
                            },
                            key: e.code
                        }, l.createElement(h.J, {
                            label: e.label,
                            checked: t.props.languagePreferences.includes(e.code),
                            "data-language-code": e.code,
                            "data-a-target": "language-filter-" + e.code + "-checkbox",
                            onChange: t.handleLanguageChange
                        }))
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.languagePreferences.length;
                    return l.createElement(h._8, {
                        className: "language-select-menu"
                    }, l.createElement(u.a, null, l.createElement(h.v, {
                        "data-test-selector": "language-dropdown-button",
                        "data-a-target": "language-filter-dropdown",
                        dropdown: !0,
                        type: h.B.Hollow
                    }, l.createElement(h._8, {
                        display: h.R.Flex
                    }, Object(d.d)("Language", "LanguageSelectMenu"), l.createElement(h._8, {
                        margin: {
                            left: .5
                        }
                    }, 0 !== e && l.createElement(h._12, {
                        type: h._13.Brand,
                        label: e.toString()
                    })))), l.createElement(h.q, {
                        direction: h.r.BottomLeft,
                        noTail: !0,
                        "data-a-target": "language-filter-balloon"
                    }, l.createElement(c.b, {
                        className: "language-select-menu__balloon"
                    }, l.createElement(h._8, {
                        padding: .5
                    }, Object(p.b)().map(this.renderLanguageOption))), l.createElement(h._32, {
                        background: h.n.Alt,
                        borderTop: !0,
                        className: "language-select-menu__footer"
                    }, l.createElement(h.v, {
                        type: h.B.Text,
                        onClick: this.props.clearLanguagePreferences,
                        "data-a-target": "language-clear-all"
                    }, Object(d.d)("Clear all", "LanguageSelectMenu"))))))
                }, t = o.__decorate([Object(m.d)("LanguageSelectMenu")], t)
            }(l.Component));
        var f = Object(a.b)(function(e) {
            return {
                languagePreferences: Object(s.a)(e)
            }
        }, function(e) {
            return Object(i.b)({
                updateLanguagePreferences: r.c,
                clearLanguagePreferences: r.a
            }, e)
        })(g);
        n.d(t, "a", function() {
            return f
        })
    },
    "7LVu": function(e, t) {},
    "7MbV": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_OrbisPresetText"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "platform"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "PlayStation"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "presetText"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 146
            }
        };
        n.loc.source = {
            body: "query Chat_OrbisPresetText ($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\nplatform {\n... on PlayStation {\ntitle {\npresetText\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7X7f": function(e, t) {},
    "7t3k": function(e, t) {},
    "7vYp": function(e, t) {},
    "90yy": function(e, t) {},
    "91zu": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "IncomingRaidLine_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "50"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query IncomingRaidLine_Channel($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\ndisplayName\nprofileImageURL(width: 50)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "9Xbf": function(e, t) {},
    "9fnI": function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 149
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/chat/models/cheer-fragment.gql"\nquery ChatList_Bits($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("576g").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    ACWz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatInput"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isEmbedded"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isEmbedded"
                                            }
                                        }
                                    }]
                                }]
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hashtags"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "edges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cursor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "node"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 274
            }
        };
        n.loc.source = {
            body: "query ChatInput($channelLogin: String! $isEmbedded: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nisPartner @include(if: $isEmbedded)\n}\nuser(login: $channelLogin) {\nid\ncheer {\nid\nhashtags {\nedges {\ncursor\nnode {\nid\n}\n}\n}\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    AQmT: function(e, t) {},
    AaXK: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "selectedBadge"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availableBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "availableBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 288
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_Badges($channelLogin: String!) {\ncurrentUser {\nid\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\nuser(login: $channelLogin) {\nid\nself {\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    AwFw: function(e, t) {},
    B88H: function(e, t) {},
    BBNG: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "friendButtonFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channelUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 538
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nquery ViewerCard($targetLogin: String! $channelID: ID!) {\ntargetUser: user(login: $targetLogin) {\nid\nlogin\nbannerImageURL\ndisplayName\nprofileImageURL(width: 70)\n...friendButtonFragment\n}\nchannelUser: user(id: $channelID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\nemotes {\nid\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\nself {\nisModerator\n}\n}\ncurrentUser {\nlogin\nid\nroles {\nisSiteAdmin\nisStaff\nisGlobalMod\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    BMQ2: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("RH2O"),
            s = n("CIox"),
            o = n("2KeS"),
            l = n("6sO2"),
            d = n("7vx8"),
            c = n("HZww"),
            u = n("+xm8"),
            p = n("f2i/"),
            m = n("Aj/L"),
            h = function() {
                return function() {}
            }(),
            g = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.joinedRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.joinedRaids = t.joinedRaids), n
                }
                return a.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return this.joinedRaids.has(e.id) || this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        joinedRaids: this.joinedRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.add(e.id);
                    var a = this.getStorageData();
                    return a[e.id] = !0, this.setStorageData(a), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.delete(e.id);
                    var a = this.getStorageData();
                    return delete a[e.id], this.setStorageData(a), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    l.l.set("raid", e)
                }, t.prototype.getStorageData = function() {
                    return l.l.get("raid", {})
                }, t
            }(h),
            f = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.leftRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.leftRaids = t.leftRaids), n
                }
                return a.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return !this.leftRaids.has(e.id) && !this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        leftRaids: this.leftRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.delete(e.id);
                    var a = this.getStorageData();
                    return delete a[e.id], this.setStorageData(a), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.add(e.id);
                    var a = this.getStorageData();
                    return a[e.id] = !0, this.setStorageData(a), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    l.l.set("raids-left", e)
                }, t.prototype.getStorageData = function() {
                    return l.l.get("raids-left", {})
                }, t
            }(h),
            b = 3;
        var v = 5,
            k = "raid_update",
            y = function() {
                function e(e, t) {
                    this.id = e.raid.id, this.creatorID = e.raid.creator_id, this.sourceChannelID = e.raid.source_id, this.targetChannelID = e.raid.target_id, this.viewerCount = e.raid.viewer_count, t ? (this.varianceSeconds = t.varianceSeconds, this.totalDurationInSeconds = t.totalDurationInSeconds, this.clientCreatedAtTimestamp = t.clientCreatedAtTimestamp) : (this.varianceSeconds = Math.round(Math.random() * b * 2 - b), this.totalDurationInSeconds = this.getTotalDurationInSeconds(e.raid.remaining_duration_seconds), this.clientCreatedAtTimestamp = (new Date).getTime()), this.isAnnouncing = e.type === k && this.totalDurationInSeconds > 0, this.hasTimeToJoin = this.totalDurationInSeconds > v
                }
                return e.prototype.withMessage = function(t) {
                    return this.id !== t.raid.id ? new e(t) : new e(t, this)
                }, e.prototype.getRemainingJoinTime = function(e) {
                    void 0 === e && (e = new Date);
                    var t = e.getTime() - this.clientCreatedAtTimestamp;
                    return 1e3 * this.totalDurationInSeconds - t
                }, e.prototype.getTotalDurationInSeconds = function(e) {
                    var t = e + this.varianceSeconds;
                    return Math.max(t, 0)
                }, e
            }(),
            C = "https://api.twitch.tv/kraken";
        var _ = n("O0Qc"),
            E = n("Odds"),
            S = (n("z7Cp"), {
                "data-test-selector": "countdown-fill-width"
            }),
            w = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this,
                        t = this.props.startPolling || setInterval;
                    this.intervalID = t(function() {
                        return e.forceUpdate()
                    }, 1e3)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.intervalID)
                }, t.prototype.componentDidUpdate = function() {
                    this.props.getRemainingTime() <= 0 && this.props.onCountdownEnd()
                }, t.prototype.render = function() {
                    var e = this.countdownPercentage + "%";
                    return i.createElement("div", {
                        className: "raid-countdown-bar"
                    }, i.createElement("div", a.__assign({
                        className: "raid-countdown-bar__fill",
                        style: {
                            width: e
                        }
                    }, S)))
                }, Object.defineProperty(t.prototype, "countdownPercentage", {
                    get: function() {
                        return this.props.getRemainingTime() / this.props.totalCountdownTime * 100
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(i.PureComponent),
            N = (n("mR/9"), n("vH/s")),
            T = {
                medium: "twitch_channel",
                content: "raid_channel"
            };

        function D(e, t) {
            var n = {
                raid_creator_id: Number(t.creatorID),
                raid_source_id: Number(t.sourceChannelID),
                raid_target_id: Number(t.targetChannelID),
                raid_id: t.id
            };
            l.n.track(e, n)
        }
        var O = n("UMQJ");
        var I = Object(d.a)(O, {
            options: function(e) {
                return {
                    variables: {
                        sourceChannelID: e.raid.sourceChannelID,
                        targetChannelID: e.raid.targetChannelID
                    }
                }
            }
        })(function(e) {
            if (e.data.loading || e.data.error) return i.createElement("div", null);
            var t = e.component,
                n = a.__rest(e, ["component"]);
            return i.createElement(t, a.__assign({}, n))
        });
        var M, R = {
                "data-test-selector": "current-raiders"
            },
            L = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRemainingTime = function() {
                        return t.props.raid.getRemainingJoinTime()
                    }, t.handleCountdownEnd = function() {
                        t.props.onRaidInvitePeriodOver(t.props.data.targetChannel.login)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e;
                    e = this.props.raid, D(N.SpadeEventType.RaidPromptImpression, e)
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.sourceChannel,
                        n = e.targetChannel;
                    return i.createElement(E._32, {
                        className: "raid-notification",
                        background: E.n.AccentAlt2,
                        color: E.K.Overlay,
                        position: E._15.Absolute,
                        zIndex: E._59.Above,
                        fullWidth: !0
                    }, i.createElement(E._8, {
                        className: "raid-notification__content",
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: E.R.Flex,
                        justifyContent: E._7.Between
                    }, i.createElement(E._8, {
                        alignItems: E.c.Center,
                        display: E.R.Flex
                    }, i.createElement(E.m, {
                        size: 36,
                        src: t.profileImageURL,
                        alt: t.displayName
                    }), i.createElement(E._22, {
                        asset: E._23.AngleRight,
                        height: 10
                    }), i.createElement(E.m, {
                        size: 36,
                        src: n.profileImageURL,
                        alt: n.displayName
                    }), i.createElement(E._8, {
                        padding: {
                            left: 1
                        }
                    }, i.createElement(E.Q, {
                        color: E.K.OverlayAlt,
                        type: E._46.P,
                        className: "raid-notification__channel-name"
                    }, Object(l.d)("{sourceDisplayName} is", {
                        sourceDisplayName: t.displayName
                    }, "RaidCTASourceChannel")), i.createElement(E.Q, null, Object(l.d)("raiding {targetDisplayName}", {
                        targetDisplayName: n.displayName
                    }, "RaidCTATargetChannel")), i.createElement(E.Q, a.__assign({
                        bold: !0
                    }, R), Object(l.d)("{viewerCount, plural, one {# raider} other {# raiders}}", {
                        viewerCount: this.props.raid.viewerCount
                    }, "RaidCTATotalRaiders")))), this.props.children), i.createElement(w, {
                        totalCountdownTime: 1e3 * this.props.raid.totalDurationInSeconds,
                        getRemainingTime: this.getRemainingTime,
                        onCountdownEnd: this.handleCountdownEnd
                    }))
                }, t
            }(i.Component),
            x = (M = L, function(e) {
                return i.createElement(I, a.__assign({}, e, {
                    component: M
                }))
            }),
            j = {
                "data-test-selector": "raid-cancel-button"
            },
            U = function(e) {
                return i.createElement(E._8, {
                    alignSelf: E.d.Center
                }, i.createElement(E.v, a.__assign({
                    size: E.z.Large,
                    type: E.B.Hollow,
                    overlay: !0,
                    onClick: e.onCancelRaid
                }, j), Object(l.d)("Cancel", "RaidCTACancel")))
            },
            B = n("bQ8d"),
            A = {
                "data-test-selector": "join-raid-button"
            },
            F = {
                "data-test-selector": "leave-raid-button"
            },
            P = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.timerID = 0, t.handleLeaveRaid = function() {
                        clearTimeout(t.timerID), t.props.onLeaveRaid()
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.hasJoined && (this.timerID = setTimeout(this.props.onJoinRaid, Object(B.a)(5e3)))
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.timerID)
                }, t.prototype.render = function() {
                    return this.props.hasJoined ? i.createElement(E._8, {
                        alignSelf: E.d.Center
                    }, i.createElement(E.v, a.__assign({
                        size: E.z.Large,
                        type: E.B.Hollow,
                        overlay: !0,
                        onClick: this.handleLeaveRaid
                    }, F), Object(l.d)("Leave", "RaidCTALeave"))) : i.createElement(E._8, {
                        alignSelf: E.d.Center
                    }, i.createElement(E.v, a.__assign({
                        size: E.z.Large,
                        onClick: this.props.onJoinRaid
                    }, A), Object(l.d)("Join", "RaidCTAJoin")))
                }, t
            }(i.Component),
            V = n("jML9"),
            H = n("OAwv");
        var z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        raidStorage: new g
                    }, t.unsubscribe = function() {}, t.handlePubsubMessage = function(e) {
                        t.setState(function(t) {
                            return t.raid ? a.__assign({}, t, {
                                raid: t.raid.withMessage(e)
                            }) : a.__assign({}, t, {
                                raid: new y(e)
                            })
                        })
                    }, t.handleRaidInvitePeriodOver = function(e) {
                        var n = t.hasJoinedCurrentRaid;
                        if (t.state.raid && t.setState({
                                raidStorage: t.state.raidStorage.expireRaid(t.state.raid)
                            }), n) {
                            var i = function(e, t) {
                                var n;
                                if (function(e) {
                                        return !e.split("/")[2]
                                    }(e.pathname)) n = "/" + t;
                                else {
                                    if (! function(e) {
                                            return /^\/.+\/chat$/.test(e)
                                        }(e.pathname)) return "";
                                    n = "/" + t + "/chat"
                                }
                                var i = a.__assign({}, H.parse(e.search), {
                                    referrer: "raid"
                                });
                                return n + "?" + H.stringify(i)
                            }(t.props.history.location || window.location, e);
                            i && t.props.history.push(i, T)
                        }
                    }, t.handleJoinRaid = function() {
                        if (t.state.raid) {
                            var e, n = t.state.raid.id;
                            if (t.props.authToken) ! function(e, t) {
                                var n = {
                                    headers: {
                                        "Client-ID": l.o.config.legacyClientID,
                                        Authorization: "OAuth " + t,
                                        Accept: "application/vnd.twitchtv.v5+json"
                                    },
                                    method: "POST"
                                };
                                fetch(C + "/raids/" + e + "/join", n)
                            }(n, t.props.authToken), e = t.state.raid, D(N.SpadeEventType.RaidPromptJoin, e), t.setState({
                                raidStorage: t.state.raidStorage.joinRaid(t.state.raid)
                            });
                            else t.props.login()
                        }
                    }, t.handleLeaveRaid = function() {
                        var e;
                        t.state.raid && (! function(e, t) {
                            var n = {
                                headers: {
                                    "Client-ID": l.o.config.legacyClientID,
                                    Authorization: "OAuth " + t,
                                    Accept: "application/vnd.twitchtv.v5+json"
                                },
                                method: "POST"
                            };
                            fetch(C + "/raids/" + e + "/leave", n)
                        }(t.state.raid.id, t.props.authToken), e = t.state.raid, D(N.SpadeEventType.RaidPromptLeave, e), t.setState({
                            raidStorage: t.state.raidStorage.leaveRaid(t.state.raid)
                        }))
                    }, t.handleCancelRaid = function() {
                        t.state.raid && t.props.send(_.a)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.subscribe(this.props.channelID), "yes" === l.o.experiments.getAssignment("TWILIGHT_RAID_AUTO_JOIN") && this.setState({
                        raidStorage: new f
                    })
                }, t.prototype.render = function() {
                    return this.shouldRenderRaidNotification ? i.createElement(x, {
                        raid: this.state.raid,
                        onRaidInvitePeriodOver: this.handleRaidInvitePeriodOver
                    }, this.renderCTAButton()) : null
                }, t.prototype.componentWillUnmount = function() {
                    this.unsubscribe()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.props.channelID !== e.channelID && (this.unsubscribe(), this.setState({
                        raid: void 0
                    }, function() {
                        return t.subscribe(e.channelID)
                    }))
                }, t.prototype.subscribe = function(e) {
                    this.unsubscribe = l.o.pubsub.subscribe({
                        topic: Object(c.o)(e),
                        onMessage: this.handlePubsubMessage
                    })
                }, t.prototype.renderCTAButton = function() {
                    return this.isRaidCreator ? i.createElement(U, {
                        onCancelRaid: this.handleCancelRaid
                    }) : i.createElement(P, {
                        onJoinRaid: this.handleJoinRaid,
                        onLeaveRaid: this.handleLeaveRaid,
                        hasJoined: this.hasJoinedCurrentRaid
                    })
                }, Object.defineProperty(t.prototype, "shouldRenderRaidNotification", {
                    get: function() {
                        var e = this.state.raid;
                        return e && e.isAnnouncing && !this.state.raidStorage.isExpired(e) && (e.hasTimeToJoin || this.hasJoinedCurrentRaid)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isRaidCreator", {
                    get: function() {
                        var e = this.state.raid;
                        return e && this.props.data && this.props.data.user && this.props.data.user.id === e.creatorID
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "hasJoinedCurrentRaid", {
                    get: function() {
                        var e = this.state.raid;
                        return !(!e || !this.props.authToken) && (this.isRaidCreator || this.state.raidStorage.hasJoined(e))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(i.Component),
            G = Object(d.a)(V, {
                skip: function(e) {
                    return !e.authToken
                }
            })(z);
        var W = Object(r.b)(function(e) {
                return {
                    authToken: Object(m.a)(e)
                }
            }, function(e) {
                return Object(o.b)({
                    login: function() {
                        return Object(p.f)(u.a.RaidJoin)
                    }
                }, e)
            })(G),
            q = Object(s.f)(W);
        n.d(t, "a", function() {
            return q
        }), n.d(t, !1, function() {
            return W
        }), n.d(t, !1, function() {})
    },
    BTUa: function(e, t) {},
    BlKL: function(e, t) {},
    Bsuy: function(e, t) {},
    CGWe: function(e, t) {},
    CU3k: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage__ChannelViewersCount"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "viewersCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 113
            }
        };
        n.loc.source = {
            body: "query ChannelPage__ChannelViewersCount($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\nviewersCount\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    D6l4: function(e, t, n) {
        "use strict";
        var a, i;
        n.d(t, "a", function() {
                return a
            }), n.d(t, "b", function() {
                return i
            }),
            function(e) {
                e.Bits = "bits", e.Leaderboard = "bits-leader"
            }(a || (a = {})),
            function(e) {
                e.Badge = "badge_update", e.Balance = "balance_update"
            }(i || (i = {}))
    },
    D9fv: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        }), t.b = function() {
            var e = a.o.intl.getLanguageCode(),
                t = function(t) {
                    return "en" === t.code ? 0 : e && e.startsWith(t.code) ? 1 : 2
                };
            return i.slice().sort(function(e, n) {
                var a = t(e),
                    i = t(n);
                return a !== i ? a - i : a + ":" + e.label < i + ":" + n.label ? -1 : 1
            }).concat(r(!0))
        };
        var a = n("6sO2"),
            i = [{
                code: "ar",
                label: "العربية"
            }, {
                code: "bg",
                label: "Български"
            }, {
                code: "cs",
                label: "Čeština"
            }, {
                code: "da",
                label: "Dansk"
            }, {
                code: "de",
                label: "Deutsch"
            }, {
                code: "el",
                label: "Ελληνικά"
            }, {
                code: "en",
                label: "English"
            }, {
                code: "es",
                label: "Español"
            }, {
                code: "fi",
                label: "Suomi"
            }, {
                code: "fr",
                label: "Français"
            }, {
                code: "hu",
                label: "Magyar"
            }, {
                code: "it",
                label: "Italiano"
            }, {
                code: "ja",
                label: "日本語"
            }, {
                code: "ko",
                label: "한국어"
            }, {
                code: "nl",
                label: "Nederlands"
            }, {
                code: "no",
                label: "Norsk"
            }, {
                code: "pl",
                label: "Polski"
            }, {
                code: "pt",
                label: "Português"
            }, {
                code: "ru",
                label: "Русский"
            }, {
                code: "sk",
                label: "Slovenčina"
            }, {
                code: "sv",
                label: "Svenska"
            }, {
                code: "th",
                label: "ภาษาไทย"
            }, {
                code: "tr",
                label: "Türkçe"
            }, {
                code: "vi",
                label: "Tiếng Việt"
            }, {
                code: "zh-hk",
                label: "中文(粵語)"
            }, {
                code: "zh",
                label: "中文"
            }];

        function r(e) {
            return void 0 === e && (e = !1), [{
                code: "asl",
                label: "American Sign Language"
            }, {
                code: "other",
                label: e ? Object(a.d)("Other", "broadcaster-languages") : "Other"
            }]
        }
        var s = new Set(i.concat(r()).map(function(e) {
            return e.code
        }))
    },
    DVR9: function(e, t) {},
    DbMg: function(e, t) {},
    Dc1A: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    FsFC: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = o(e);
            return t.months ? r(a.MONTH, t.months) : t.weeks && t.days ? r(a.WEEK, t.weeks) + " " + r(a.DAY, t.days) : t.weeks ? r(a.WEEK, t.weeks) : t.days && t.hours ? r(a.DAY, t.days) + " " + r(a.HOUR, t.hours) : t.days ? r(a.DAY, t.days) : t.hours && t.minutes ? r(a.HOUR, t.hours) + " " + r(a.MINUTE, t.minutes) : t.hours ? r(a.HOUR, t.hours) : t.minutes && t.seconds ? r(a.MINUTE, t.minutes) + " " + r(a.SECOND, t.seconds) : t.minutes ? r(a.MINUTE, t.minutes) : r(a.SECOND, t.seconds || 0)
        }, t.b = function(e) {
            var t = o(e);
            return t.months ? s(a.MONTH, t.months) : t.weeks && t.days ? "" + s(a.WEEK, t.weeks) + s(a.DAY, t.days) : t.weeks ? s(a.WEEK, t.weeks) : t.days && t.hours ? "" + s(a.DAY, t.days) + s(a.HOUR, t.hours) : t.days ? s(a.DAY, t.days) : t.hours && t.minutes ? "" + s(a.HOUR, t.hours) + s(a.MINUTE, t.minutes) : t.hours ? s(a.HOUR, t.hours) : t.minutes && t.seconds ? "" + s(a.MINUTE, t.minutes) + s(a.SECOND, t.seconds) : t.minutes ? s(a.MINUTE, t.minutes) : s(a.SECOND, t.seconds || 0)
        };
        var a, i = n("6sO2");

        function r(e, t) {
            switch (e) {
                case a.SECOND:
                    return Object(i.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                        secondCount: t
                    }, "formatDuration");
                case a.MINUTE:
                    return Object(i.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                        minuteCount: t
                    }, "formatDuration");
                case a.HOUR:
                    return Object(i.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                        hourCount: t
                    }, "formatDuration");
                case a.DAY:
                    return Object(i.d)("{dayCount, plural, one {# day} other {# days}}", {
                        dayCount: t
                    }, "formatDuration");
                case a.WEEK:
                    return Object(i.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                        weekCount: t
                    }, "formatDuration");
                case a.MONTH:
                    return Object(i.d)("{monthCount, plural, one {# month} other {# months}}", {
                        monthCount: t
                    }, "formatDuration");
                default:
                    return ""
            }
        }

        function s(e, t) {
            switch (e) {
                case a.SECOND:
                    return Object(i.d)("{secondCount}s", {
                        secondCount: t
                    }, "formatDuration");
                case a.MINUTE:
                    return Object(i.d)("{minuteCount}m", {
                        minuteCount: t
                    }, "formatDuration");
                case a.HOUR:
                    return Object(i.d)("{hourCount}h", {
                        hourCount: t
                    }, "formatDuration");
                case a.DAY:
                    return Object(i.d)("{dayCount}d", {
                        dayCount: t
                    }, "formatDuration");
                case a.WEEK:
                    return Object(i.d)("{weekCount}w", {
                        weekCount: t
                    }, "formatDuration");
                case a.MONTH:
                    return Object(i.d)("{monthCount}mo", {
                        monthCount: t
                    }, "formatDuration");
                default:
                    return ""
            }
        }

        function o(e) {
            if (e < 60) return {
                seconds: e
            };
            var t = Math.floor(e / 60),
                n = e % 60;
            if (t < 60) return n ? {
                minutes: t,
                seconds: n
            } : {
                minutes: t
            };
            var a = Math.floor(t / 60);
            if (t %= 60, a < 24) return t ? {
                hours: a,
                minutes: t
            } : {
                hours: a
            };
            var i = Math.floor(a / 24);
            if (a %= 24, i < 7) return a ? {
                days: i,
                hours: a
            } : {
                days: i
            };
            if (i <= 26) {
                var r = Math.floor(i / 7);
                return (i %= 7) ? {
                    weeks: r,
                    days: i
                } : {
                    weeks: r
                }
            }
            return {
                months: Math.round((i + 3) / 30)
            }
        }! function(e) {
            e[e.SECOND = 0] = "SECOND", e[e.MINUTE = 1] = "MINUTE", e[e.HOUR = 2] = "HOUR", e[e.DAY = 3] = "DAY", e[e.WEEK = 4] = "WEEK", e[e.MONTH = 5] = "MONTH"
        }(a || (a = {}))
    },
    GuSj: function(e, t) {},
    GxDs: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("F8kA"),
            s = n("yDzg"),
            o = n("vH/s"),
            l = n("6sO2"),
            d = n("Odds"),
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasImageLoadingError: !1
                    }, t.handleImageError = function() {
                        t.setState({
                            hasImageLoadingError: !0
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                    this.setState({
                        hasImageLoadingError: !1
                    })
                }, t.prototype.render = function() {
                    var e = l.a.defaultStreamPreviewURL;
                    return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), i.createElement(d.E, {
                        aspect: d.l.Aspect16x9,
                        alt: this.props.altText,
                        src: e,
                        onError: this.handleImageError
                    })
                }, t
            }(i.Component),
            u = (n("1tZx"), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
            p = {
                ERROR: "chat-card-error",
                TITLE: "chat-card-title",
                DESCRIPTION: "chat-card-description"
            },
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderErrorCard = function() {
                        var e = i.createElement("img", {
                            "data-test-selector": p.ERROR,
                            src: u,
                            className: "chat-card__error-img"
                        });
                        return t.renderCardContent(e, t.props.error)
                    }, t.renderCardContent = function(e, t) {
                        var n, a;
                        return t ? (n = i.createElement(d.Q, {
                            type: d._46.Span,
                            fontSize: d.V.Size5,
                            "data-test-selector": p.TITLE,
                            title: t.title
                        }, t.title), a = i.createElement(d.Q, {
                            type: d._46.Span,
                            fontSize: d.V.Size6,
                            color: d.K.Alt2,
                            "data-test-selector": p.DESCRIPTION
                        }, t.description)) : (e = i.createElement(d._14, {
                            overlay: !0
                        }), n = i.createElement(d._14, {
                            width: 180
                        }), a = i.createElement(d._14, {
                            width: 120
                        })), i.createElement(d._32, {
                            background: d.n.Base,
                            display: d.R.Flex,
                            flexWrap: d.U.NoWrap,
                            padding: .5
                        }, i.createElement(d._32, {
                            className: "chat-card__preview-img",
                            background: d.n.Alt2,
                            display: d.R.Flex,
                            alignItems: d.c.Center,
                            justifyContent: d._7.Center,
                            flexShrink: 0
                        }, e), i.createElement(d._8, {
                            display: d.R.Flex,
                            alignItems: d.c.Center,
                            overflow: d._11.Hidden
                        }, i.createElement(d._8, {
                            padding: {
                                left: 1
                            },
                            fullWidth: !0
                        }, i.createElement(d._8, {
                            className: "chat-card__title",
                            ellipsis: !0
                        }, n), i.createElement(d._8, {
                            ellipsis: !0
                        }, a))))
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e;
                    if (this.props.error) e = this.renderErrorCard();
                    else if (this.props.data) {
                        var t = Object(s.a)(this.props.data.contentURL, {
                                tt_medium: o.PageviewMedium.Chat,
                                tt_content: o.PageviewContent.ChatCard
                            }),
                            n = i.createElement(c, {
                                altText: this.props.data.title,
                                imageURL: this.props.data.previewImageURL
                            });
                        e = i.createElement(r.a, {
                            className: "chat-card__link",
                            to: t,
                            target: "_blank"
                        }, this.renderCardContent(n, {
                            title: this.props.data.title,
                            description: this.props.data.description
                        }))
                    } else e = this.renderCardContent();
                    return i.createElement(d._32, {
                        elevation: 1,
                        margin: {
                            top: .5
                        }
                    }, e)
                }, t
            }(i.Component),
            h = m;
        n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return h
        })
    },
    "H/22": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), t.e = function(e, t, n, a) {
            var d = {
                    badges: null,
                    bits: 0,
                    color: "",
                    displayName: "",
                    id: "",
                    userID: n,
                    username: n,
                    userType: s.a.User,
                    emotes: null
                },
                c = Object(l.a)(t, d, r.a, !1);
            return {
                type: o.b.AutoMod,
                autoModType: o.a.MessageRejectedPrompt,
                id: function(e) {
                    return e + "-automod-rejected"
                }(e),
                category: a,
                rejectedMessage: i.__assign({}, c, {
                    type: o.b.Message,
                    messageType: o.c.Post,
                    id: e
                })
            }
        }, t.d = function() {
            return {
                id: Object(d.a)("automod-message-rejected"),
                type: o.b.AutoMod,
                autoModType: o.a.MessageRejected
            }
        }, t.b = function() {
            return {
                id: Object(d.a)("automod-message-allowed"),
                type: o.b.AutoMod,
                autoModType: o.a.MessageAllowed
            }
        }, t.c = function() {
            return {
                id: Object(d.a)("automod-message-denied"),
                type: o.b.AutoMod,
                autoModType: o.a.MessageDenied
            }
        }, t.f = function(e, t, n, i) {
            return {
                id: Object(d.a)("channel-moderation-action"),
                type: o.b.ModerationAction,
                moderationActionType: e,
                level: a.Channel,
                createdByLogin: t,
                createdByUserID: n,
                args: i
            }
        }, t.g = function(e, t, n, i, r, s, l) {
            return {
                id: Object(d.a)("channel-moderation-action"),
                type: o.b.ModerationAction,
                moderationActionType: e,
                level: a.User,
                createdByLogin: t,
                createdByUserID: n,
                targetUserID: i,
                targetUserLogin: r,
                duration: s,
                reason: l
            }
        };
        var a, i = n("TToO"),
            r = n("iydZ"),
            s = n("6Agf"),
            o = n("qkCi"),
            l = n("l21v"),
            d = n("INp2");
        ! function(e) {
            e[e.Channel = 0] = "Channel", e[e.User = 1] = "User"
        }(a || (a = {}))
    },
    HuX0: function(e, t) {},
    IEOs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_DenyRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DenyRejectedChatMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "denyRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\ndenyRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    INp2: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e + "-" + Date.now()
        }
    },
    J7iJ: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RitualsEnabled_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "ritualsEnabled"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 153
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/chat/models/rituals-enabled-fragment.gql"\nquery RitualsEnabled_User($id: ID!) {\nchannel: user(id: $id) {\n...ritualsEnabled\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("v2Uk").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    JtUK: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n) {
            void 0 === n && (n = !1);
            if (n) switch (t) {
                case i.a.Forbidden:
                    return Object(a.d)("You don't have permissions to timeout {login}.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsAdmin:
                    return Object(a.d)("You cannot timeout admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsAlreadyBanned:
                    return Object(a.d)("{login} is already banned in this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsAnonymous:
                    return Object(a.d)("You cannot timeout anonymous users.", "BanUserErrorCode");
                case i.a.TargetIsBroadcaster:
                    return Object(a.d)("You cannot timeout the broadcaster.", "BanUserErrorCode");
                case i.a.TargetIsGlobalMod:
                    return Object(a.d)("You cannot timeout global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsMod:
                    return Object(a.d)("You cannot timeout moderator {login} unless you are the owner of this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsSelf:
                    return Object(a.d)("You cannot timeout yourself.", "BanUserErrorCode");
                case i.a.TargetIsStaff:
                    return Object(a.d)("You cannot timeout staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetNotFound:
                    return Object(a.d)("The user you are trying to timeout doesn't exist.", "BanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result.")
            } else switch (t) {
                case i.a.Forbidden:
                    return Object(a.d)("You don't have permissions to ban {login}.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsAdmin:
                    return Object(a.d)("You cannot ban admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsAlreadyBanned:
                    return Object(a.d)("{login} is currently banned in this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsAnonymous:
                    return Object(a.d)("You cannot ban anonymous users.", "BanUserErrorCode");
                case i.a.TargetIsBroadcaster:
                    return Object(a.d)("You cannot ban the broadcaster.", "BanUserErrorCode");
                case i.a.TargetIsGlobalMod:
                    return Object(a.d)("You cannot ban global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsMod:
                    return Object(a.d)("You cannot ban moderator {login} unless you are the owner of this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetIsSelf:
                    return Object(a.d)("You cannot ban yourself.", "BanUserErrorCode");
                case i.a.TargetIsStaff:
                    return Object(a.d)("You cannot ban staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case i.a.TargetNotFound:
                    return Object(a.d)("The user you are trying to ban doesn't exist.", "BanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result.")
            }
        };
        var a = n("6sO2"),
            i = n("1OO3")
    },
    KBUQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), t.b = function(e) {
            var t = this;
            return Object(r.a)(s, {
                props: function(n) {
                    return {
                        unbanUserMutation: function(a) {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var t;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                            i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), [4, n.mutate({
                                                variables: {
                                                    input: {
                                                        channelID: t,
                                                        bannedUserLogin: a
                                                    }
                                                }
                                            })];
                                        case 2:
                                            return [2, i.sent().data];
                                        case 3:
                                            throw i.sent(), new Error("Unable to unban user");
                                        case 4:
                                            return [3, 6];
                                        case 5:
                                            throw new Error("Unban user mutation is not ready");
                                        case 6:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var a, i = n("TToO"),
            r = n("7vx8"),
            s = n("l669");
        n.n(s);
        ! function(e) {
            e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetNotBanned = "TARGET_NOT_BANNED"
        }(a || (a = {}))
    },
    KNSH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_UserData"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 95
            }
        };
        n.loc.source = {
            body: "query Chat_UserData {\nuser {\nid\ndisplayName\nlogin\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KWLn: function(e, t) {},
    KfLc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        }), n.d(t, "d", function() {
            return o
        }), n.d(t, "b", function() {
            return l
        }), n.d(t, "e", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var a = n("6sO2"),
            i = n("vH/s"),
            r = n("aSvS"),
            s = function(e) {
                var t = {
                    action: r.b.DismissToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                a.n.track(i.SpadeEventType.NewChatterTokenStatus, t)
            },
            o = function(e) {
                var t = {
                    action: r.b.RedeemToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: e.userMessage
                };
                a.n.track(i.SpadeEventType.NewChatterTokenStatus, t)
            },
            l = function(e) {
                var t = {
                    action: r.b.RequestEligibility,
                    channel_id: e.channelID,
                    user_banner: null,
                    user_message: null
                };
                a.n.track(i.SpadeEventType.NewChatterTokenStatus, t)
            },
            d = function(e) {
                var t = {
                    action: r.b.RequestToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                a.n.track(i.SpadeEventType.NewChatterTokenStatus, t)
            },
            c = function(e) {
                var t = {
                    action: e.action,
                    channel_id: e.channelID
                };
                a.n.track(i.SpadeEventType.NewChatterOnboardingInteraction, t)
            }
    },
    Kthq: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n) {
            void 0 === n && (n = !1);
            if (n) switch (t) {
                case i.a.Forbidden:
                    return Object(a.d)("You don't have permissions to untimeout {login}.", {
                        login: e
                    }, "UnbanUserErrorCode");
                case i.a.TargetNotFound:
                    return Object(a.d)("The user you are trying to untimeout doesn't exist.", "UnbanUserErrorCode");
                case i.a.TargetNotBanned:
                    return Object(a.d)("{login} is not currently timed out from this channel.", {
                        login: e
                    }, "UnbanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result")
            } else switch (t) {
                case i.a.Forbidden:
                    return Object(a.d)("You don't have permissions to unban {login}.", {
                        login: e
                    }, "UnbanUserErrorCode");
                case i.a.TargetNotFound:
                    return Object(a.d)("The user you are trying to unban doesn't exist.", "UnbanUserErrorCode");
                case i.a.TargetNotBanned:
                    return Object(a.d)("{login} is not currently banned from this channel.", {
                        login: e
                    }, "UnbanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result")
            }
        };
        var a = n("6sO2"),
            i = n("KBUQ")
    },
    L0RX: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    LM6T: function(e, t) {},
    "Lx+S": function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("RH2O"),
            s = n("CIox"),
            o = n("2KeS"),
            l = n("NXs7"),
            d = n("Ouuk"),
            c = n("jF7o"),
            u = n("+xm8"),
            p = n("f2i/"),
            m = n("NikC"),
            h = n("Aj/L"),
            g = n("0nzt"),
            f = n("vh75"),
            b = n("ass3"),
            v = n("TnJK"),
            k = n("O0Qc"),
            y = n("VsL1"),
            C = n("Umoc"),
            _ = n("6sO2"),
            E = n("zCIC"),
            S = n("7vx8"),
            w = n("HW6M"),
            N = n("6BvN"),
            T = [{
                name: "Red",
                hex: "#FF0000"
            }, {
                name: "Blue",
                hex: "#0000FF"
            }, {
                name: "Green",
                hex: "#008000"
            }, {
                name: "Firebrick",
                hex: "#B22222"
            }, {
                name: "Coral",
                hex: "#FF7F50"
            }, {
                name: "Yellow Green",
                hex: "#9ACD32"
            }, {
                name: "Orange Red",
                hex: "#FF4500"
            }, {
                name: "Sea Green",
                hex: "#2E8B57"
            }, {
                name: "Goldenrod",
                hex: "#DAA520"
            }, {
                name: "Chocolate",
                hex: "#D2691E"
            }, {
                name: "Cadet Blue",
                hex: "#5F9EA0"
            }, {
                name: "Dodger Blue",
                hex: "#1E90FF"
            }, {
                name: "Hot Pink",
                hex: "#FF69B4"
            }, {
                name: "Blue Violet",
                hex: "#8A2BE2"
            }, {
                name: "Spring Green",
                hex: "#00FF7F"
            }],
            D = n("Odds"),
            O = (n("90yy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onKeyPress = function(e) {
                        if (e.charCode === N.a.Enter || e.charCode === N.a.Space) {
                            var n = e.currentTarget.getAttribute("data-color");
                            t.selectColor(n)
                        }
                    }, t.onColorSelected = function(e) {
                        var n = e.currentTarget.getAttribute("data-color");
                        t.selectColor(n)
                    }, t.selectColor = function(e) {
                        e && t.props.onColorSelected(e)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = T.map(function(t) {
                            var n = t.hex === e.props.selectedColor,
                                a = {
                                    "color-chooser": !0,
                                    "color-chooser--selected": n
                                };
                            return i.createElement("div", {
                                role: "radio",
                                "aria-checked": n,
                                key: t.hex,
                                "data-color": t.hex,
                                title: t.name,
                                onClick: e.onColorSelected,
                                onKeyPress: e.onKeyPress,
                                className: w(a),
                                style: {
                                    backgroundColor: t.hex
                                },
                                "data-test-selector": "color_swatch_" + t.hex,
                                "data-a-target": "color_swatch_" + t.hex,
                                tabIndex: 0
                            })
                        }),
                        n = Object(_.d)("Name Color", "ChatSettings"),
                        a = i.createElement(D.Q, {
                            transform: D._45.Uppercase,
                            color: D.K.Alt2
                        }, n);
                    return this.props.borderTop && (a = i.createElement(D._32, {
                        margin: {
                            top: 2
                        },
                        borderTop: !0,
                        padding: {
                            top: 2
                        }
                    }, a)), i.createElement("div", null, i.createElement(D._32, {
                        margin: {
                            bottom: 1
                        },
                        background: D.n.Base,
                        color: D.K.Base,
                        display: D.R.InlineFlex,
                        flexDirection: D.T.Column,
                        fullWidth: !0
                    }, a), i.createElement(D._2, {
                        margin: {
                            y: 1
                        },
                        display: D.R.Flex,
                        flexWrap: D.U.Wrap
                    }, i.createElement("div", {
                        role: "radiogroup",
                        "aria-label": n
                    }, t, i.createElement(D.Q, {
                        fontSize: D.V.Size7
                    }, i.createElement("a", {
                        href: "https://twitch.tv/products/turbo?ref=more_colors_direct"
                    }, Object(_.d)("more colors →", "ChatSettings"))))))
                }, t
            }(i.Component)),
            I = n("OAwv"),
            M = n("AaXK"),
            R = (n("7LVu"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onGlobalBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setGlobalBadge(t.props.userLogin, n || "")
                    }, t.onGlobalBadgeKeyPress = function(e) {
                        if (e.charCode === N.a.Enter || e.charCode === N.a.Space) {
                            var n = e.currentTarget.getAttribute("data-badge");
                            t.setGlobalBadge(t.props.userLogin, n || "")
                        }
                    }, t.onChannelBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                    }, t.onChannelBadgeKeyPress = function(e) {
                        if (e.charCode === N.a.Enter || e.charCode === N.a.Space) {
                            var n = e.currentTarget.getAttribute("data-badge");
                            t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                        }
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.currentUser ? i.createElement("div", null, i.createElement(O, {
                        selectedColor: this.props.userChatColor,
                        onColorSelected: this.props.onColorSelected,
                        borderTop: !0
                    }), this.getBadgeChooser()) : null
                }, t.prototype.getBadgeChooser = function() {
                    var e = this;
                    if (this.props.data) {
                        var t = this.props.data.user.self.availableBadges,
                            n = this.props.data.user.self.selectedBadge,
                            a = this.props.data.currentUser.availableBadges,
                            r = this.props.data.currentUser.selectedBadge;
                        if (!t) return null;
                        var s = void 0 === this.state.channelBadgeID && n ? n.setID : this.state.channelBadgeID,
                            o = !s,
                            l = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": o
                            },
                            d = Object(_.d)("No channel badges :(", "ChatSettings");
                        t && t.length > 0 && (d = t.map(function(t) {
                            var a = Boolean(n && t.setID === s),
                                r = {
                                    "edit-appearance__badge-chooser": !0,
                                    "edit-appearance__badge-chooser--selected": a
                                };
                            return i.createElement("div", {
                                role: "radio",
                                "aria-checked": a,
                                "data-badge": t.setID,
                                onClick: e.onChannelBadgeClicked,
                                onKeyPress: e.onChannelBadgeKeyPress,
                                key: t.setID + "/" + t.version,
                                className: w(r),
                                "data-test-selector": "channel_badge_" + t.setID,
                                "data-a-target": "channel_badge_" + t.setID,
                                tabIndex: 0
                            }, i.createElement(D._49, {
                                label: t.title
                            }, i.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(i.createElement("div", {
                            key: "none",
                            role: "radio",
                            "aria-checked": o,
                            "data-badge": "",
                            onClick: this.onChannelBadgeClicked,
                            onKeyPress: this.onChannelBadgeKeyPress,
                            className: w(l),
                            "data-test-selector": "channel_badge_none",
                            "data-a-target": "channel_badge_none",
                            tabIndex: 0
                        }, i.createElement(D._49, {
                            label: Object(_.d)("Same as Global", "ChatSettings")
                        }, i.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, i.createElement(D._22, {
                            asset: D._23.Global
                        })))));
                        var c = void 0 === this.state.globalBadgeID && r ? r.setID : this.state.globalBadgeID,
                            u = !c,
                            p = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": u
                            },
                            m = Object(_.d)("No global badges :(", "ChatSettings");
                        return a && a.length > 0 && (m = a.map(function(t) {
                            var n = Boolean(r && t.setID === c),
                                a = {
                                    "edit-appearance__badge-chooser": !0,
                                    "edit-appearance__badge-chooser--selected": n
                                };
                            return i.createElement("div", {
                                role: "radio",
                                "aria-checked": n,
                                "data-badge": t.setID,
                                onClick: e.onGlobalBadgeClicked,
                                onKeyPress: e.onGlobalBadgeKeyPress,
                                key: t.setID + "/" + t.version,
                                className: w(a),
                                "data-test-selector": "global_badge_" + t.setID,
                                "data-a-target": "global_badge_" + t.setID,
                                tabIndex: 0
                            }, i.createElement(D._49, {
                                label: t.title
                            }, i.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(i.createElement("div", {
                            role: "radio",
                            "aria-checked": u,
                            key: "none",
                            "data-badge": "",
                            onClick: this.onGlobalBadgeClicked,
                            onKeyPress: this.onGlobalBadgeKeyPress,
                            className: w(p),
                            "data-test-selector": "global_badge_none",
                            "data-a-target": "global_badge_none",
                            tabIndex: 0
                        }, i.createElement(D._49, {
                            label: Object(_.d)("None", "ChatSettings")
                        }, i.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, i.createElement(D._22, {
                            asset: D._23.Ban
                        }))))), i.createElement("div", null, i.createElement(D._32, {
                            background: D.n.Base,
                            color: D.K.Base,
                            display: D.R.InlineFlex,
                            flexDirection: D.T.Column,
                            fullWidth: !0
                        }, i.createElement(D._32, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, i.createElement(D._49, {
                            align: D._50.Left,
                            label: Object(_.d)("Your global badge is shown when chatting and whispering.", "ChatSettings"),
                            width: 175
                        }, i.createElement(D.Q, {
                            color: D.K.Alt2,
                            transform: D._45.Uppercase
                        }, Object(_.d)("Global Badge [?]", "ChatSettings")))), i.createElement(D._2, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: D.R.Flex,
                            "data-a-target": "global-badge-selector"
                        }, i.createElement("div", {
                            role: "radiogroup"
                        }, m))), i.createElement(D._32, {
                            background: D.n.Base,
                            color: D.K.Base,
                            display: D.R.InlineFlex,
                            flexDirection: D.T.Column,
                            fullWidth: !0
                        }, i.createElement(D._32, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, i.createElement(D._49, {
                            align: D._50.Left,
                            label: Object(_.d)("Change the badge shown when chatting in this channel.", "ChatSettings"),
                            width: 175
                        }, i.createElement(D.Q, {
                            color: D.K.Alt2,
                            transform: D._45.Uppercase
                        }, Object(_.d)("Channel Badge [?]", "ChatSettings")))), i.createElement(D._2, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: D.R.Flex,
                            "data-a-target": "channel-badge-selector"
                        }, i.createElement("div", {
                            role: "radiogroup"
                        }, d))))
                    }
                }, t.prototype.setChannelBadge = function(e, t, n) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var i, r;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return i = {
                                        "Client-ID": _.o.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, [4, fetch("https://api.twitch.tv/kraken/users/" + t + "/chat/channels/" + e + "/badges", {
                                        method: "PUT",
                                        body: I.stringify({
                                            selected_badge: n
                                        }),
                                        headers: i
                                    })];
                                case 1:
                                    return (r = a.sent()) && r.ok && (this.props.onBadgesChanged(), this.setState({
                                        channelBadgeID: n
                                    })), [2]
                            }
                        })
                    })
                }, t.prototype.setGlobalBadge = function(e, t) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var n, i;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return n = {
                                        "Client-ID": _.o.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, [4, fetch("https://api.twitch.tv/kraken/users/" + e + "/chat/badges", {
                                        method: "PUT",
                                        body: I.stringify({
                                            selected_badge: t
                                        }),
                                        headers: n
                                    }).catch(console.error)];
                                case 1:
                                    return (i = a.sent()) && i.ok && (this.props.onBadgesChanged(), this.setState({
                                        globalBadgeID: t
                                    })), [2]
                            }
                        })
                    })
                }, t = a.__decorate([Object(S.a)(M, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(i.Component)),
            L = n("+Znq"),
            x = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return i.createElement(D._8, {
                        "data-toggle-balloon-id": "raids-follower-only-tooltip",
                        margin: {
                            left: .5
                        },
                        position: D._15.Relative
                    }, i.createElement(D._49, {
                        align: D._50.Right,
                        direction: D._51.Top,
                        display: D.R.InlineFlex,
                        label: this.props.text,
                        width: 175,
                        show: !0
                    }, i.createElement(D._2, {
                        alignItems: D.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: D.R.InlineFlex,
                        justifyContent: D._7.Center
                    }, i.createElement(D.Q, {
                        color: D.K.Overlay,
                        fontSize: D.V.Size8,
                        type: D._46.Span,
                        "data-test-selector": "raids-follower-only-tooltip"
                    }, "i"))))
                }, t
            }(i.Component),
            j = n("V5M+"),
            U = n("oSFp"),
            B = n("F8kA"),
            A = n("9u8h"),
            F = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.targetChannelID = t.props.targetChannelID, t
                }
                return a.__extends(t, e), t.fetchRecentRaidsList = function(e) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return a.trys.push([0, 2, , 3]), [4, A.a.get("/kraken/raids?client_id=" + _.a.authSettings.clientID + "&api_version=" + _.a.defaultAPIVersion + "&target_id=" + e)];
                                case 1:
                                    return t = a.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = a.sent(), _.j.error(n, "Couldn't fetch raids list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.deserialize = function(e) {
                    var t = [];
                    if (e.body && e.body.raids) {
                        for (var n in e.body.raids)
                            if (n.hasOwnProperty) {
                                var a = {
                                    raidID: e.body.raids[n]._id,
                                    raidAt: e.body.raids[n].raid_at,
                                    userID: e.body.raids[n].creator_user._id,
                                    name: e.body.raids[n].creator_user.name
                                };
                                t.push(a)
                            }
                        return t
                    }
                    return []
                }, t
            }(i.Component),
            P = n("oIkB"),
            V = n("g7wA"),
            H = n("O9wU"),
            z = n("jPU6"),
            G = n("y1/w"),
            W = (n("MSFW"), n("L0RX")),
            q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onUsernameClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-username"),
                            a = e.currentTarget.getAttribute("data-raid-id") || "";
                        n && t.props.onUsernameClick(n, H.a.recent_raids, a)
                    }, t.onBanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.banUser)(Object(P.a)({
                            channelID: n,
                            bannedUserLogin: a
                        }))
                    }, t.onUnbanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.unbanUser)(Object(P.a)({
                            channelID: n,
                            bannedUserLogin: a
                        }))
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return i.createElement(D._8, {
                        key: "recent-raids-layout2-" + this.props.raiderUserID,
                        className: "recent-raids-item",
                        flexDirection: D.T.Row,
                        display: D.R.Flex,
                        fullWidth: !0
                    }, i.createElement(D._8, {
                        flexDirection: D.T.Row,
                        display: D.R.Flex,
                        fullWidth: !0,
                        justifyContent: D._7.Between
                    }, i.createElement(D.Q, {
                        bold: !0
                    }, i.createElement("a", {
                        className: "recent-raids-item__name",
                        "data-username": this.props.channelLogin,
                        "data-raid-id": this.props.raidID,
                        onClick: this.onUsernameClick,
                        href: "#"
                    }, this.props.channelLogin)), i.createElement(D._8, {
                        position: D._15.Relative
                    }, i.createElement(D._8, {
                        className: "recent-raids-item__timestamp"
                    }, Object(V.k)(Date.parse(this.props.timestamp))), this.getCardSlideInContent())))
                }, t.prototype.getCardSlideInContent = function() {
                    if (!this.props.slideInContent) return null;
                    var e = null;
                    return e = this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? i.createElement(D.v, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: D.z.Small,
                        type: D.B.Text,
                        onClick: this.onUnbanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(_.d)("Unban", "RecentRaid")) : i.createElement(D.v, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: D.z.Small,
                        type: D.B.Text,
                        onClick: this.onBanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(_.d)("Ban", "RecentRaid")), i.createElement(D._8, {
                        key: "recent-raids-layout-" + this.props.raiderUserID,
                        className: "recent-raids-item__hover-content",
                        zIndex: D._59.Above,
                        "data-a-target": "recent-raids-item-hover"
                    }, this.props.slideInContent, e)
                }, t = a.__decorate([Object(S.a)(G, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.raiderUserID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(S.a)(z, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var a = e.readQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        }
                                    });
                                    a && (t && t.data && (a.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        },
                                        data: a
                                    }))
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(S.a)(W, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: t.raiderUserID,
                                            channelID: t.channelID
                                        }
                                    });
                                    if (n) {
                                        var i = a.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                        e.writeQuery({
                                            query: G,
                                            variables: {
                                                targetUserID: t.raiderUserID,
                                                channelID: t.channelID
                                            },
                                            data: i
                                        })
                                    }
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(i.Component),
            Q = n("mw/a"),
            K = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onReportButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-raid-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: Q.a.Raid,
                                targetUserID: a,
                                contentID: n,
                                extra: JSON.stringify({
                                    channel_id: a.toString()
                                }),
                                additionalTrackingID: t.props.targetChannelID
                            },
                            title: Object(_.d)("Report {channelDisplayName}", {
                                channelDisplayName: i
                            }, "ReportUserModal")
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return a.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, F.fetchRecentRaidsList(this.props.targetChannelID)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        raidChannels: e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = [],
                        t = [],
                        n = {};
                    if (void 0 !== this.state.raidChannels)
                        for (var a in 0 === this.state.raidChannels.length && e.push(i.createElement(D.Q, {
                                key: "recent-raids-no-raids",
                                type: D._46.P
                            }, Object(_.d)("You have no recent raids", "RecentRaids"))), this.state.raidChannels)
                            if (a.hasOwnProperty) {
                                var r = this.state.raidChannels[a];
                                this.state.raidChannels.hasOwnProperty(a) && void 0 === n[r.userID] && (t.push(i.createElement(q, {
                                    key: "recent-raids-item-" + r.userID,
                                    slideInContent: [i.createElement(D._32, {
                                        key: "recent-raids-item-report-area-" + r.userID,
                                        color: D.K.Alt2,
                                        display: D.R.InlineFlex
                                    }, i.createElement(D.v, {
                                        key: "recent-raid-report-button",
                                        size: D.z.Small,
                                        type: D.B.Text,
                                        onClick: this.onReportButtonClick,
                                        "data-a-target": "recent-raid-item-button",
                                        "data-raid-id": r.raidID,
                                        "data-target-user-login": r.name,
                                        "data-target-user-id": r.userID
                                    }, Object(_.d)("Report", "RecentRaid")), i.createElement(D._49, {
                                        align: D._50.Right,
                                        width: 150,
                                        label: Object(_.d)("Banning a user prevents them from future chatting or raiding", "RecentRaid")
                                    }))],
                                    timestamp: r.raidAt,
                                    channelLogin: r.name,
                                    raiderUserID: r.userID,
                                    channelID: this.props.targetChannelID,
                                    raiderLogin: r.name,
                                    raidID: r.raidID,
                                    onUsernameClick: this.props.onUsernameClick,
                                    showReportUserModal: this.props.showReportUserModal
                                })), n[r.userID] = !0)
                            }
                    var s = null;
                    return this.props.recentRaids ? i.createElement(D._8, {
                        key: "recent-raids"
                    }, i.createElement(D._8, {
                        margin: {
                            bottom: 2
                        }
                    }, i.createElement(D.Q, {
                        color: D.K.Link,
                        type: D._46.Span
                    }, i.createElement(B.a, {
                        to: {
                            pathname: "/broadcast/dashboard/settings/raids"
                        }
                    }, Object(_.d)("Manage Raid Settings", "RecentRaids")))), e, t) : (s = i.createElement(D._8, {
                        key: "recent-raids",
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: D.R.Flex,
                        justifyContent: D._7.Between,
                        alignItems: D.c.Center
                    }, i.createElement(D.O, {
                        hoverUnderlineNone: !0,
                        onClick: this.props.onClickRecentRaids,
                        "data-test-selector": "recent-raids-button"
                    }, Object(_.d)("See Recent Raids", "ChatSettings")), this.props.tooltipText && i.createElement(D._8, {
                        position: D._15.Relative
                    }, i.createElement(D._49, {
                        align: D._50.Right,
                        direction: D._51.Top,
                        display: D.R.InlineFlex,
                        label: this.props.tooltipText,
                        width: 175,
                        show: !0
                    }, i.createElement(D._2, {
                        alignItems: D.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: D.R.InlineFlex,
                        justifyContent: D._7.Center,
                        margin: {
                            left: .5
                        }
                    }, i.createElement(D.Q, {
                        color: D.K.Overlay,
                        fontSize: D.V.Size8,
                        type: D._46.Span
                    }, "i"))))), i.createElement(D._8, null, s))
                }, t
            }(i.Component);
        var Y = Object(r.b)(function() {
                return {}
            }, function(e) {
                return Object(o.b)({
                    showReportUserModal: function(e) {
                        var t = a.__rest(e, []);
                        return Object(j.d)(U.a, t)
                    }
                }, e)
            })(K),
            $ = n("UzRK"),
            J = n("YDbY"),
            Z = (n("7t3k"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        autoModToolTipVisible: !1
                    }, n.handleFollowerDurationClick = function(e) {
                        var t = e.currentTarget.getAttribute("data-duration");
                        t && n.onFollowerDurationChange(parseInt(t, 10))
                    }, n.onClickRecentRaids = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), n.props.onClickRecentRaids()
                    }, n.onChatClear = function() {
                        n.props.onChatCommand(Object(k.c)())
                    }, n.getSelectedFollowerDuration = function() {
                        if (n.props.followerModeEnabled) return n.props.followerModeDuration;
                        var e = n.props.lastUsedFollowerDurations[n.props.channelLogin];
                        return "number" == typeof e ? e : $.a
                    }, n.onFollowerModeToggle = function() {
                        if (n.props.followerModeEnabled) n.props.onChatCommand(Object(k.d)()), n.props.onFollowerModeDisable();
                        else {
                            var e = n.getSelectedFollowerDuration();
                            n.props.onChatCommand(Object(k.f)(e)), n.props.onFollowerModeDurationChange(e), n.props.onFollowerModeEnable()
                        }
                        Object(C.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.followerModeEnabled,
                            settingName: v.a.FollowerMode
                        })
                    }, n.onSlowModeToggle = function() {
                        n.props.slowModeEnabled ? (n.props.onChatCommand(Object(k.e)()), n.props.onSlowModeDisable()) : (n.props.onChatCommand(Object(k.g)()), n.props.onSlowModeEnable()), Object(C.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.slowModeEnabled,
                            settingName: v.a.SlowMode
                        })
                    }, n.onFollowerDurationChange = function(e) {
                        Object(y.c)(n.props.channelLogin, e), n.props.onFollowerModeDurationPreferenceChange(n.props.channelLogin, e), n.props.followerModeEnabled && (n.props.onChatCommand(Object(k.f)(e)), n.props.onFollowerModeDurationChange(e)), Object(C.c)({
                            channelLogin: n.props.channelLogin,
                            followerModeOn: n.props.followerModeEnabled,
                            isHostMode: n.props.isHostMode,
                            newValue: e
                        })
                    }, n.onModIconsToggle = function() {
                        Object(y.b)("showModIcons", !n.props.showModerationIcons), n.props.showModerationIcons ? n.props.onModIconsDisable() : n.props.onModIconsEnable(), Object(C.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.showModerationIcons,
                            settingName: v.a.ShowModIcons
                        })
                    }, n.onShowModerationActionsToggle = function() {
                        Object(y.b)("showModerationActions", !n.props.showModerationActions), n.props.showModerationActions ? n.props.onShowModerationActionsDisable() : n.props.onShowModerationActionsEnable(), Object(C.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.showModerationActions,
                            settingName: v.a.ShowModActions
                        })
                    }, n.onShowAutoModActionsToggle = function() {
                        Object(y.b)("showAutoModActions", !n.props.showAutoModActions), n.props.showAutoModActions ? n.props.onShowAutoModActionsDisable() : n.props.onShowAutoModActionsEnable(), Object(C.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.showAutoModActions,
                            settingName: v.a.ShowAutoModActions
                        })
                    }, n.handleToggleAutoModLink = n.handleToggleAutoModLink.bind(n), n.handleToggleAutoModLink = n.handleToggleAutoModLink.bind(n), n
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (!this.props.isCurrentUserModerator) return null;
                    var t = this.getSelectedFollowerDuration(),
                        n = $.b.map(function(n) {
                            return i.createElement(D._6, {
                                "data-duration": n,
                                key: n,
                                onClick: e.handleFollowerDurationClick,
                                selected: n === t
                            }, i.createElement(D._8, {
                                padding: .5
                            }, Object($.c)(n)))
                        });
                    return i.createElement(D._32, {
                        key: "mod-tools",
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, i.createElement(D._8, {
                        margin: {
                            bottom: 2
                        }
                    }, i.createElement(D.Q, {
                        color: D.K.Alt2,
                        transform: D._45.Uppercase
                    }, Object(_.d)("Mod Tools", "ChatSettings"))), i.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(D.J, {
                        checked: this.props.showModerationIcons,
                        "data-a-target": "mod-icons-checkbox",
                        "data-test-selector": "mod-icons-checkbox",
                        id: "chat-settings-mod-icons",
                        label: Object(_.d)("Mod Icons", "ChatSettings"),
                        onChange: this.onModIconsToggle
                    })), i.createElement(D._32, {
                        margin: {
                            bottom: 1
                        },
                        display: D.R.Flex,
                        justifyContent: D._7.Between,
                        flexWrap: D.U.Wrap
                    }, i.createElement(D.J, {
                        checked: this.props.followerModeEnabled,
                        "data-a-target": "follower-mode-checkbox",
                        "data-test-selector": "follower-mode-checkbox",
                        id: "chat-settings-followers-only",
                        label: Object(_.d)("Followers-Only Chat", "ChatSettings"),
                        onChange: this.onFollowerModeToggle
                    }), this.props.showRaidsTooltip ? i.createElement(x, {
                        text: Object(_.d)("Prevent offensive raiders from chatting.", "RaidReportingChat")
                    }) : null, i.createElement(D._8, {
                        alignItems: D.c.Center,
                        display: D.R.Flex,
                        flexWrap: D.U.NoWrap,
                        justifyContent: D._7.Between
                    }, i.createElement(D._8, {
                        margin: {
                            right: .5
                        }
                    }, i.createElement(D.Q, {
                        color: D.K.Alt2,
                        fontSize: D.V.Size7,
                        type: D._46.Span
                    }, Object(_.d)("Must have followed for", "ChatSettings"))), i.createElement(D._8, {
                        className: "chat-settings__mod-tools-follower-button",
                        flexShrink: 0
                    }, i.createElement(L.a, {
                        display: D.R.InlineBlock
                    }, i.createElement(D.v, {
                        size: D.z.Small,
                        type: D.B.Text,
                        "data-a-target": "follower-mode-dropdown",
                        "data-test-selector": "follower-mode-duration-menu",
                        dropdown: !0
                    }, Object($.d)(t)), i.createElement(D.q, {
                        direction: D.r.TopRight
                    }, i.createElement(D._8, {
                        padding: .5
                    }, i.createElement(D.Q, {
                        color: D.K.Alt2
                    }, Object(_.d)("Followers can chat if they have followed for at least", "ChatSettings"))), i.createElement(D._32, {
                        color: D.K.Link
                    }, n)))))), i.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(D.J, {
                        checked: this.props.slowModeEnabled,
                        "data-a-target": "slow-mode-checkbox",
                        "data-test-selector": "slow-mode-checkbox",
                        id: "chat-settings-slow-mode",
                        label: Object(_.d)("Slow Mode", "ChatSettings"),
                        onChange: this.onSlowModeToggle
                    })), i.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(D.J, {
                        checked: this.props.showModerationActions,
                        "data-a-target": "show-mod-actions-checkbox",
                        "data-test-selector": "show-mod-actions",
                        id: "chat-settings-show-mod-actions",
                        label: Object(_.d)("Show Moderation Actions", "ChatSettings"),
                        onChange: this.onShowModerationActionsToggle
                    })), i.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(D.J, {
                        checked: this.props.showAutoModActions,
                        "data-a-target": "show-automod-messages-checkbox",
                        "data-test-selector": "show-automod-messages",
                        id: "chat-settings-show-automod-messages",
                        label: Object(_.d)("Show Messages Caught by AutoMod", "ChatSettings"),
                        onChange: this.onShowAutoModActionsToggle
                    })), i.createElement(Y, {
                        key: "recent-raids",
                        recentRaids: this.props.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard,
                        targetChannelID: this.props.channelID,
                        tooltipText: this.props.showRaidsTooltip ? Object(_.d)("View recent raids with option to report or ban.", "RaidReportingChat") : ""
                    }), this.renderModerationSettingsLink(), i.createElement("button", {
                        onClick: this.onChatClear,
                        "data-a-target": "clear-chat-button",
                        "data-test-selector": "clear-chat-button"
                    }, Object(_.d)("Clear Chat", "ChatSettings")))
                }, t.prototype.handleModerationSettingsClick = function() {
                    _.l.set("autoModToolTipSeen", 5)
                }, t.prototype.showAutoModHotSpot = function() {
                    return _.l.get("autoModToolTipSeen", 0) < 5
                }, t.prototype.renderModerationSettingsLink = function() {
                    if (Object(J.a)()) {
                        var e = Object(_.d)("Manage Moderation Settings", "ChatSettings");
                        return this.showAutoModHotSpot() ? i.createElement(D._8, {
                            margin: {
                                top: 1,
                                bottom: 1
                            },
                            display: D.R.Flex,
                            justifyContent: D._7.Between,
                            alignItems: D.c.Center
                        }, i.createElement(D.O, {
                            to: "/" + this.props.channelLogin + "/dashboard/settings/automod",
                            "data-a-target": "automod-link-button",
                            "data-test-selector": "automod-link-button",
                            onClick: this.handleModerationSettingsClick
                        }, e), i.createElement("div", {
                            onMouseEnter: this.handleToggleAutoModLink,
                            onMouseLeave: this.handleToggleAutoModLink
                        }, i.createElement(D._8, {
                            alignItems: D.c.Center,
                            className: "chat-moderation-settings__highlight-indicator",
                            display: D.R.InlineFlex,
                            justifyContent: D._7.Center,
                            margin: {
                                left: .5
                            }
                        }, i.createElement(D.Q, {
                            color: D.K.Overlay,
                            fontSize: D.V.Size8,
                            type: D._46.Span
                        }, "i"), i.createElement(D._8, {
                            position: D._15.Relative
                        }, i.createElement(D.q, {
                            direction: D.r.TopRight,
                            show: this.state.autoModToolTipVisible,
                            offsetX: "-0.6rem",
                            offsetY: "1.5rem"
                        }, i.createElement(D._8, {
                            margin: 1
                        }, Object(_.d)("Mods can now update AutoMod levels as well as Blocked and Permitted Terms.", "ChatSettings"))))))) : i.createElement(D._32, {
                            margin: {
                                top: 1,
                                bottom: 1
                            },
                            display: D.R.Flex,
                            justifyContent: D._7.Between,
                            alignItems: D.c.Center,
                            color: D.K.Alt
                        }, i.createElement(D.O, {
                            to: "/" + this.props.channelLogin + "/dashboard/settings/automod",
                            "data-a-target": "automod-link-button",
                            "data-test-selector": "automod-link-button",
                            type: D.P.Inherit,
                            hoverUnderlineNone: !0
                        }, e))
                    }
                }, t.prototype.handleToggleAutoModLink = function() {
                    this.setState(function(e) {
                        return {
                            autoModToolTipVisible: !e.autoModToolTipVisible
                        }
                    })
                }, t
            }(i.Component));
        var X = Object(r.b)(function(e) {
                return {
                    followerModeDuration: e.chat.followerDuration,
                    followerModeEnabled: e.chat.followerMode,
                    lastUsedFollowerDurations: e.chat.lastUsedFollowerDurations,
                    showAutoModActions: e.chat.showAutoModActions,
                    showModerationActions: e.chat.showModerationActions,
                    showModerationIcons: e.chat.showModIcons,
                    slowModeEnabled: e.chat.slowMode
                }
            }, function(e) {
                return Object(o.b)({
                    onChatHide: function() {
                        return f.Q()
                    },
                    onChatUnhide: function() {
                        return f.T()
                    },
                    onFollowerModeDisable: function() {
                        return f.C()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return f.z(e)
                    },
                    onFollowerModeDurationPreferenceChange: function(e, t) {
                        return f.A(e, t)
                    },
                    onFollowerModeEnable: function() {
                        return f.J()
                    },
                    onModIconsDisable: function() {
                        return f.D()
                    },
                    onModIconsEnable: function() {
                        return f.K()
                    },
                    onShowAutoModActionsEnable: function() {
                        return f.L()
                    },
                    onShowAutoModActionsDisable: function() {
                        return f.E()
                    },
                    onShowModerationActionsEnable: function() {
                        return f.M()
                    },
                    onShowModerationActionsDisable: function() {
                        return f.F()
                    },
                    onSlowModeDisable: function() {
                        return f.G()
                    },
                    onSlowModeEnable: function() {
                        return f.N()
                    },
                    onTimestampsDisable: function() {
                        return f.I()
                    },
                    onTimestampsEnable: function() {
                        return f.P()
                    },
                    onThemeChanged: function(e) {
                        return Object(m.b)(e, void 0, !1)
                    },
                    login: function() {
                        return Object(p.f)(u.a.Chat)
                    }
                }, e)
            })(Z),
            ee = n("SZoP"),
            te = n("3T7g"),
            ne = "edit-appearance-button",
            ae = "edit-display-name";

        function ie(e) {
            var t = i.createElement(D.Q, {
                    bold: !0,
                    type: D._46.Span
                }, i.createElement("span", {
                    style: {
                        color: e.chatColor
                    },
                    "data-a-target": ae
                }, Object(ee.a)(e.login, e.displayName))),
                n = null;
            return e.editAppearance || (n = i.createElement(D._8, {
                margin: {
                    top: 1
                }
            }, i.createElement(D.O, {
                hoverUnderlineNone: !0,
                onClick: e.onClickEdit,
                "data-a-target": ne,
                "data-test-selector": ne
            }, Object(_.d)("Edit Appearance", "ChatSettings")))), i.createElement(D._32, {
                background: D.n.Base,
                color: D.K.Base,
                display: D.R.InlineFlex,
                flexDirection: D.T.Column,
                fullWidth: !0
            }, i.createElement(D.Q, {
                color: D.K.Alt2,
                transform: D._45.Uppercase
            }, Object(_.d)("Name Display", "ChatSettings")), i.createElement(D._8, {
                margin: {
                    top: 2
                }
            }, e.userBadges && e.userBadges.map(function(e) {
                return i.createElement(te.a, {
                    key: e.id,
                    badge: e
                })
            }), t), n)
        }
        var re = n("pg5l"),
            se = (n("Vaxm"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        recentRaids: !1,
                        chatColor: null,
                        raidsTooltipDismissed: !1,
                        autoModToolTipVisible: !1
                    }, t.resizeAnimationFrame = 0, t.dismissRaidsTooltip = function() {
                        t.setState({
                            raidsTooltipDismissed: !0
                        })
                    }, t.onClickEdit = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickEditAppearance()
                    }, t.onClickRecentRaids = function() {
                        t.setState({
                            recentRaids: !0
                        })
                    }, t.onClickBack = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onLeaveEditAppearance(), t.setState({
                            recentRaids: !1
                        })
                    }, t.onColorSelected = function(e) {
                        t.setState({
                            chatColor: e
                        }), t.props.onColorSelected(e)
                    }, t.onBadgesChanged = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return a.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return !this.props.data || this.props.data.loading ? [3, 2] : [4, this.props.data.refetch()];
                                    case 1:
                                        if ((e = a.sent()).data) {
                                            if (!(t = e.data).user.self) return [2];
                                            n = {}, t.user.self.displayBadges.forEach(function(e) {
                                                n[e.setID] = e.version
                                            }), _.o.tmi.client.updateChannelBadges(this.props.channelLogin, n)
                                        }
                                        a.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 700;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.onResize, !0), this.setContainerHeight()
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.render = function() {
                    if (!this.props.data || this.props.data.loading) return null;
                    var e = null;
                    if (this.props.isLoggedIn && this.props.data.currentUser) {
                        var t = this.props.data.user.self ? this.props.data.user.self.displayBadges : [];
                        e = i.createElement(ie, {
                            key: "name-display",
                            login: this.props.data.currentUser.login,
                            displayName: this.props.data.currentUser.displayName,
                            chatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                            editAppearance: this.props.editAppearance,
                            userBadges: t,
                            onClickEdit: this.onClickEdit
                        })
                    }
                    var n = [];
                    return this.props.isLoggedIn ? this.props.editAppearance ? n = [i.createElement(D._2, {
                        margin: {
                            bottom: 2
                        },
                        key: "chat-settings-edit-inject",
                        className: "chat-settings__edit-button"
                    }, i.createElement(D.O, {
                        hoverUnderlineNone: !0,
                        key: "chat-settings-edit",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, i.createElement(D.Q, {
                        color: D.K.Link,
                        type: D._46.Span
                    }, i.createElement(D._22, {
                        asset: D._23.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(_.d)("Back", "ChatSettingsAppearance")))), e, i.createElement(R, {
                        key: "edit-appearance",
                        onColorSelected: this.onColorSelected,
                        editAppearance: this.props.editAppearance,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        userChatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                        userLogin: this.props.data.currentUser.login,
                        onBadgesChanged: this.onBadgesChanged
                    })] : this.state.recentRaids ? n = [i.createElement(D._2, {
                        key: "chat-settings-recent-raids"
                    }, i.createElement(D.O, {
                        hoverUnderlineNone: !0,
                        key: "chat-settings-edit",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, i.createElement(D.Q, {
                        color: D.K.Link,
                        type: D._46.Span
                    }, i.createElement(D._22, {
                        asset: D._23.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(_.d)("Back", "ChatSettingsRecentRaids")), i.createElement(D._8, {
                        margin: {
                            top: 2
                        }
                    }, i.createElement(D.Q, {
                        key: "recent-raids-title",
                        color: D.K.Alt2,
                        transform: D._45.Uppercase
                    }, Object(_.d)("Recent Raids", "ChatSettings"))))), i.createElement(Y, {
                        key: "recent-raids",
                        targetChannelID: this.props.channelID,
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard
                    })] : (n = [e, this.renderUniversalOptions()], this.props.isCurrentUserModerator && !this.props.isEmbedded && n.push(i.createElement(X, {
                        key: "moderation-tools",
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isHostMode: this.props.isHostMode,
                        isLoggedIn: this.props.isLoggedIn,
                        onChatCommand: this.props.onChatCommand,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onShowViewerCard: this.props.onShowViewerCard,
                        recentRaids: this.state.recentRaids,
                        showRaidsTooltip: this.showRaidsTooltip
                    }))) : n = [i.createElement(O, {
                        key: "color-chooser",
                        onColorSelected: this.props.onColorSelected
                    }), this.renderUniversalOptions()], i.createElement(E.b, {
                        className: "chat-settings",
                        suppressScrollX: !0,
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, i.createElement("div", {
                        onClick: this.dismissRaidsTooltip
                    }, i.createElement(D._32, {
                        key: "chat-settings",
                        className: "chat-settings__content",
                        background: D.n.Base,
                        color: D.K.Base,
                        padding: 2
                    }, n)))
                }, t.prototype.renderUniversalOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && i.createElement(D.J, {
                            checked: this.props.darkModeEnabled,
                            "data-a-target": "darkmode-checkbox",
                            "data-test-selector": "dark-mode-checkbox",
                            id: "chat-settings-dark-mode",
                            label: Object(_.d)("Dark Mode", "ChatSettings"),
                            onChange: this.props.onDarkModeToggle
                        }),
                        t = !this.props.isEmbedded && i.createElement("button", {
                            onClick: this.props.onChatPopout,
                            "data-a-target": "popout-chat-button",
                            "data-test-selector": "popout-button"
                        }, Object(_.d)("Popout", "ChatSettings")),
                        n = !this.props.isPopout && !this.props.isEmbedded && (window.BetterTTV || window.FrankerFaceZ) && i.createElement("button", {
                            onClick: this.props.onLegacyChatPopout,
                            "data-test-selector": "legacy-popout-button"
                        }, Object(_.d)("Legacy Popout", "ChatSettings")),
                        a = !this.props.isPopout && i.createElement("button", {
                            onClick: this.props.onChatHide,
                            "data-a-target": "hide-chat-button",
                            "data-test-selector": "hide-chat-button"
                        }, Object(_.d)("Hide Chat", "ChatSettings"));
                    return i.createElement(D._8, {
                        key: "chat-options"
                    }, i.createElement(D._32, {
                        borderTop: !0,
                        margin: {
                            top: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, i.createElement(D.Q, {
                        color: D.K.Alt2,
                        transform: D._45.Uppercase
                    }, Object(_.d)("Chat Options", "ChatSettings"))), i.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(D.J, {
                        checked: this.props.showTimestamps,
                        "data-a-target": "timestamp-checkbox",
                        "data-test-selector": "timestamps-selector",
                        id: "chat-settings-timestamp",
                        label: Object(_.d)("Timestamps", "ChatSettings"),
                        onChange: this.props.onTimestampToggle
                    })), i.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, e), i.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a), i.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, t), n && i.createElement(D._8, null, n))
                }, Object.defineProperty(t.prototype, "showRaidsTooltip", {
                    get: function() {
                        return this.props.sawFirstRaidPrompt && !this.state.raidsTooltipDismissed
                    },
                    enumerable: !0,
                    configurable: !0
                }), t = a.__decorate([Object(S.a)(re, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(i.Component)),
            oe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        editAppearance: !1
                    }, t.handleSettingsToggle = function(e) {
                        t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                            editAppearance: !1
                        })
                    }, t.onEdit = function() {
                        t.setState({
                            editAppearance: !0
                        })
                    }, t.onLeaveEdit = function() {
                        t.setState({
                            editAppearance: !1
                        })
                    }, t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? l.a.Light : l.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout), Object(C.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.darkModeEnabled,
                            settingName: v.a.DarkMode
                        })
                    }, t.onTimestampToggle = function() {
                        Object(y.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(C.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showTimestamps,
                            settingName: v.a.ShowTimestamps
                        })
                    }, t.onChatHide = function() {
                        t.props.onChatHide(), Object(C.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !0,
                            settingName: v.a.HideChat
                        })
                    }, t.onChatPopout = function() {
                        t.props.isPopout || t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(c.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onLegacyChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("https://www.twitch.tv/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(c.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onColorSelected = function(e) {
                        t.props.isLoggedIn ? t.props.onChatCommand(Object(k.b)(e)) : t.props.login()
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return i.createElement(ce, {
                        onToggle: this.handleSettingsToggle
                    }, i.createElement(se, {
                        authToken: this.props.authToken,
                        darkModeEnabled: this.props.darkModeEnabled,
                        editAppearance: this.state.editAppearance,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        onChatCommand: this.props.onChatCommand,
                        onChatHide: this.onChatHide,
                        onChatPopout: this.onChatPopout,
                        onDarkModeToggle: this.onDarkModeToggle,
                        onLegacyChatPopout: this.onLegacyChatPopout,
                        onTimestampToggle: this.onTimestampToggle,
                        showTimestamps: this.props.showTimestamps,
                        theatreModeEnabled: this.props.theatreModeEnabled,
                        onColorSelected: this.onColorSelected,
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isLoggedIn: this.props.isLoggedIn,
                        onClickEditAppearance: this.onEdit,
                        onLeaveEditAppearance: this.onLeaveEdit,
                        sawFirstRaidPrompt: this.props.sawFirstRaidPrompt,
                        onShowViewerCard: this.props.onShowViewerCard,
                        containerElement: this.props.containerElement
                    }))
                }, t
            }(i.Component);
        var le = Object(r.b)(function(e) {
                return {
                    isLoggedIn: Object(h.d)(e),
                    darkModeEnabled: Object(g.a)(e) === l.a.Dark,
                    showTimestamps: e.chat.showTimestamps,
                    theatreModeEnabled: e.ui.theatreModeEnabled
                }
            }, function(e) {
                return Object(o.b)({
                    login: function() {
                        return Object(p.f)(u.a.Chat)
                    },
                    onChatHide: function() {
                        return f.Q()
                    },
                    onChatUnhide: function() {
                        return f.T()
                    },
                    onThemeChanged: function(e) {
                        return Object(m.b)(e, void 0, !1)
                    },
                    onTimestampsDisable: function() {
                        return f.I()
                    },
                    onTimestampsEnable: function() {
                        return f.P()
                    },
                    onShowViewerCard: b.d
                }, e)
            })(oe),
            de = Object(s.f)(le),
            ce = function(e) {
                return i.createElement(L.a, {
                    onToggle: e.onToggle
                }, i.createElement(D.w, {
                    icon: D._23.Gear,
                    ariaLabel: Object(_.d)("Chat settings", "ChatInput"),
                    "data-a-target": "chat-settings",
                    disabled: !!e.disabled
                }), i.createElement(D.q, {
                    direction: D.r.Top,
                    noTail: !0,
                    offsetY: "11px",
                    "data-a-target": "chat-settings-balloon"
                }, e.children))
            };
        n.d(t, "a", function() {
            return de
        }), n.d(t, "b", function() {
            return ce
        })
    },
    Lzcc: function(e, t) {},
    MApH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_BanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 126
            }
        };
        n.loc.source = {
            body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    MSFW: function(e, t) {},
    Mful: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "chatMessage"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ChatMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "authorName"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "authorColor"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "author"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "body"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "embeddedEmote"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "setID"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "version"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsUsed"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/chat/models/embedded-emote-fragment.gql"\nfragment chatMessage on ChatMessage {\nid\nauthorName\nauthorColor\nauthor {\nid\nlogin\n}\nbody {\ncontent\nemotes {\n...embeddedEmote\n}\n}\nbadges {\nsetID\nversion\n}\nbitsUsed\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("0ImK").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    NZkJ: function(e, t) {},
    Nay6: function(e, t, n) {
        "use strict";
        var a = n("HW6M"),
            i = n("GiK3"),
            r = (n("7vYp"), function(e) {
                var t, n = [i.createElement("span", {
                    key: "username-display",
                    className: "chat-author__display-name",
                    "data-a-target": "chat-message-username",
                    "data-a-user": e.userData.userLogin,
                    "data-test-selector": "message-username",
                    style: {
                        color: e.userData.color
                    }
                }, e.userData.userDisplayName)];
                if (e.userData.isIntl) {
                    var r = a(((t = {})["chat-author__intl-login"] = !e.highlighted, t["chat-author__intl-login--highlighted"] = e.highlighted, t));
                    n.push(i.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.userData.color
                        },
                        className: r,
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.userData.userLogin + ")"))
                }
                return i.createElement("span", {
                    key: e.userData.userID + "-authorlabel"
                }, n)
            });
        n.d(t, !1, function() {
            return "message-username"
        }), n.d(t, !1, function() {
            return "message-username-canonical"
        }), n.d(t, !1, function() {
            return "chat-author__display-name"
        }), n.d(t, !1, function() {
            return "chat-author__intl-login"
        }), n.d(t, !1, function() {
            return "chat-author__intl-login--highlighted"
        }), n.d(t, "a", function() {
            return r
        })
    },
    Ncf8: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, r) {
            return {
                type: a.b.Moderation,
                moderationType: e,
                id: Object(i.a)(t + "-mod"),
                userLogin: t,
                reason: n,
                duration: r
            }
        };
        var a = n("qkCi"),
            i = n("INp2")
    },
    O0Qc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        }), t.h = function(e) {
            return "/ignore " + e
        }, t.j = function(e) {
            return "/unignore " + e
        }, t.i = function(e) {
            return "/mod " + e
        }, t.k = function(e) {
            return "/unmod " + e
        }, t.m = function(e) {
            return /^[\/]/.test(e)
        }, t.c = function() {
            return "/clear"
        }, t.d = function() {
            return "/followersoff"
        }, t.e = function() {
            return "/slowoff"
        }, t.f = function(e) {
            return "/followers " + e
        }, t.g = function() {
            return "/slow"
        }, t.b = function(e) {
            return "/color " + e
        }, t.q = function(e) {
            var t = e.trim().match(s);
            if (!t) return null;
            return {
                recipientLogin: t[1] || null,
                body: t[2] || null
            }
        }, t.r = function(e) {
            var t = e.trim().match(o);
            if (!t) return {
                recipientLogin: null,
                body: null
            };
            return {
                recipientLogin: t[1] || null,
                body: t[2] || null
            }
        }, t.n = function(e) {
            var t = e.trim().match(l);
            if (!t) return null;
            return {
                bannedUserLogin: t[1],
                duration: t[2] && Number(t[2]) || null
            }
        }, t.p = function(e) {
            var t = e.trim().match(d);
            if (!t) return null;
            return {
                duration: t[1] && Number(t[1]) || null
            }
        }, t.o = function(e) {
            var t = e.trim().match(u);
            if (!t) return null;
            var n = t[1];
            if (!n.startsWith("#") && -1 === c.indexOf(n.toLowerCase())) return null;
            return {
                color: n
            }
        }, t.l = function(e, t) {
            var n = e.match(p);
            if (!n) return {
                handled: !1
            };
            var r = n[1],
                s = a.o.store.getState().chat.commandHandlers[n[1].toLowerCase()];
            if (!s) return {
                command: r,
                handled: !1
            };
            var o = (n[2] || "").trim(),
                l = {
                    channelLogin: t
                };
            try {
                return {
                    command: r,
                    handled: !0,
                    result: s(o, l)
                }
            } catch (e) {
                return i.warn("Exception thrown from chat command handler", {
                    command: n[1],
                    err: e
                }), {
                    handled: !1
                }
            }
        };
        var a = n("6sO2"),
            i = a.o.logger.withCategory("chat-commands"),
            r = "/unraid";
        var s = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i;
        var o = /^(\S+)?\s+(.+)?$/;
        var l = /^\/ban\s+(\S+)(?:\s+(\d+)?)?$/;
        var d = /^\/slow(?:\s+(\d+)?)?$/;
        var c = ["blue", "blueviolet", "cadetblue", "chocolate", "coral", "dodgerblue", "firebrick", "goldenrod", "green", "hotpink", "orangered", "red", "seagreen", "springgreen", "yellowgreen"],
            u = /^\/color\s+(#[A-Fa-f0-9]{6}|[A-Za-z]+)$/;
        var p = /^[/.]([a-z0-9]+)(.+)?$/i
    },
    O9wU: function(e, t, n) {
        "use strict";
        var a;
        n.d(t, "a", function() {
                return a
            }),
            function(e) {
                e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.room_message = 2] = "room_message", e[e.viewer_list = 3] = "viewer_list", e[e.member_list = 4] = "member_list", e[e.test = 5] = "test"
            }(a || (a = {}))
    },
    OLl6: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return a.__awaiter(this, void 0, void 0, function() {
                var t, n;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            t = null, a.label = 1;
                        case 1:
                            return a.trys.push([1, 3, , 4]), [4, i.o.apollo.client.query({
                                query: r,
                                variables: {
                                    login: e
                                }
                            })];
                        case 2:
                            return t = a.sent(), [3, 4];
                        case 3:
                            return n = a.sent(), i.j.warn(n, "Failed to fetch user targeted by chat command.", {
                                userLogin: e
                            }), [3, 4];
                        case 4:
                            return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                    }
                })
            })
        };
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("pV+t");
        n.n(r)
    },
    PqoY: function(e, t) {},
    QCOJ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var a = {
            Embed: "embed",
            Web: "web"
        }
    },
    QFW6: function(e, t, n) {
        "use strict";
        var a, i = n("TToO"),
            r = n("6sO2"),
            s = n("vH/s");
        ! function(e) {
            e.Everyone = "everyone", e.ModsOnly = "mod", e.StreamChat = "twitch_chat", e.SubsOnly = "sub"
        }(a || (a = {}));
        var o = n("gGMi");
        n.d(t, "a", function() {
            return l
        }), n.d(t, "b", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var l = function(e) {
                var t;
                switch (e.roomMinimumRole) {
                    case o.b.Everyone:
                        t = a.Everyone;
                        break;
                    case o.b.Moderator:
                        t = a.ModsOnly;
                        break;
                    case o.b.Subscriber:
                        t = a.SubsOnly;
                        break;
                    default:
                        t = a.StreamChat
                }
                var n = {
                    channel: e.channelLogin,
                    chatroom_type: t,
                    is_host_mode: e.isHostMode,
                    is_using_web_sockets: !0
                };
                return e.roomID && (n.chatroom_id = e.roomID), n
            },
            d = function(e) {
                r.n.track(s.SpadeEventType.ChatRoomJoined, l(e))
            },
            c = function(e) {
                r.n.track(s.SpadeEventType.ChatRoomWatched, i.__assign({}, l(e), {
                    channel_id: e.channelID,
                    client_time: Math.floor(e.clientTime / 1e3)
                }))
            }
    },
    "QKs+": function(e, t, n) {
        "use strict";
        t.a = function() {
            return Object(a.a)(i, {
                props: function(e) {
                    if (e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers) {
                        var t = e.data.currentUser.blockedUsers.reduce(function(e, t) {
                            return t && t.id && e.push(t.id), e
                        }, []);
                        return {
                            blockedUsers: t
                        }
                    }
                    return {
                        blockedUsers: []
                    }
                },
                skip: function(e) {
                    return !(e.isLoggedIn || e.authToken)
                }
            })
        };
        var a = n("7vx8"),
            i = n("vKYs");
        n.n(i)
    },
    QMHY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatRoom_AutohostPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "query ChatRoom_AutohostPrompt($login: String!) {\ncurrentUser {\nid\n}\nuser(login: $login) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QNxL: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SharePurchaseTokenInChat"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SharePurchaseTokenInChatInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sharePurchaseTokenInChat"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation SharePurchaseTokenInChat($input:SharePurchaseTokenInChatInput!) {\nsharePurchaseTokenInChat(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QRuM: function(e, t, n) {
        "use strict";
        var a, i = n("TToO"),
            r = n("GiK3"),
            s = n("6sO2");
        ! function(e) {
            e.On = "on", e.Off = "off", e.StaffOnly = "staff"
        }(a || (a = {}));
        var o = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = s.b.get(this.props.name, a.Off);
                    return e === a.On || e === a.StaffOnly && this.props.isStaff ? this.props.children : null
                }, t
            }(r.Component),
            l = o;
        n.d(t, "a", function() {
            return a
        }), n.d(t, "c", function() {
            return o
        }), n.d(t, "b", function() {
            return l
        })
    },
    QsiC: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PinnedCheer_Cheers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "top"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isTopEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 275
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery PinnedCheer_Cheers($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\ntop {\n...chatMessage\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\nsettings {\nisRecentEnabled\nisTopEnabled\nrecentTimeoutMs\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("Mful").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    R9op: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (e.chat && e.chat.messages) return e.chat.messages[t] || [];
            return []
        }, t.c = function(e) {
            return e.chat.renderSent
        }, t.b = function(e) {
            var t = [];
            if (e.chat && e.chat.commandHandlers)
                for (var n in e.chat.commandHandlers) e.chat.commandHandlers[n] && t.push(n);
            return t.sort()
        };
        var a = n("TToO"),
            i = n("LIeg"),
            r = (n.n(i), n("6sO2")),
            s = n("vh75"),
            o = n("UzRK"),
            l = n("VsL1");
        r.o.store.registerReducer("chat", function(e, t) {
            var n, r;
            switch (void 0 === e && (n = Object(l.a)(), e = a.__assign({}, n, {
                commandHandlers: {},
                emoteSets: [],
                followerDuration: o.a,
                followerMode: !1,
                isHidden: !1,
                messages: {},
                slowMode: !1,
                subsOnlyMode: !1,
                renderSent: null
            })), t.type) {
                case s.d:
                    return a.__assign({}, e, {
                        isHidden: !0
                    });
                case s.e:
                    return a.__assign({}, e, {
                        emoteSets: [],
                        messages: {}
                    });
                case s.f:
                    return a.__assign({}, e, {
                        isHidden: !1
                    });
                case s.g:
                    return a.__assign({}, e, {
                        emoteSets: t.emoteSets
                    });
                case s.h:
                    return a.__assign({}, e, {
                        followerMode: !1
                    });
                case s.i:
                    return a.__assign({}, e, {
                        followerDuration: t.duration
                    });
                case s.j:
                    return a.__assign({}, e, {
                        lastUsedFollowerDurations: a.__assign({}, e.lastUsedFollowerDurations, (r = {}, r[t.channelLogin] = t.duration, r))
                    });
                case s.k:
                    return a.__assign({}, e, {
                        followerMode: !0
                    });
                case s.l:
                    return i(e, function(e) {
                        return e.messages
                    }, function(e) {
                        return e[t.channel] = t.messages.slice(), e
                    });
                case s.b:
                    return a.__assign({}, e, {
                        showAutoModActions: !1
                    });
                case s.c:
                    return a.__assign({}, e, {
                        showAutoModActions: !0
                    });
                case s.m:
                    return a.__assign({}, e, {
                        showModerationActions: !1
                    });
                case s.n:
                    return a.__assign({}, e, {
                        showModerationActions: !0
                    });
                case s.o:
                    return a.__assign({}, e, {
                        showModIcons: !1
                    });
                case s.p:
                    return a.__assign({}, e, {
                        showModIcons: !0
                    });
                case s.s:
                    return a.__assign({}, e, {
                        slowMode: !1
                    });
                case s.t:
                    return a.__assign({}, e, {
                        slowMode: !0
                    });
                case s.u:
                    return a.__assign({}, e, {
                        subsOnlyMode: !1
                    });
                case s.v:
                    return a.__assign({}, e, {
                        subsOnlyMode: !0
                    });
                case s.w:
                    return a.__assign({}, e, {
                        showTimestamps: !1
                    });
                case s.x:
                    return a.__assign({}, e, {
                        showTimestamps: !0
                    });
                case s.a:
                    return i(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return e[t.command] = t.handler, e
                    });
                case s.q:
                    return i(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return delete e[t.command], e
                    });
                case s.r:
                    return a.__assign({}, e, {
                        renderSent: t.customEvent
                    });
                default:
                    return e
            }
        })
    },
    RbGx: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var a = n("GiK3"),
            i = (n.n(a), n("mbxv")),
            r = function(e) {
                var t, n = e.badgesToRender,
                    r = e.badgeSets,
                    s = [];
                t = n, Array.isArray(t) ? s = n.map(function(e) {
                    var t = r.getBadge(e.setID, e.version);
                    return null === t ? null : a.createElement(i.a, {
                        key: t.setID + "/" + t.version,
                        badge: t
                    })
                }) : function(e) {
                    return !Array.isArray(e)
                }(n) && (s = Object.keys(n).map(function(e) {
                    var t = n[e],
                        s = r.getBadge(e, t);
                    return null === s ? null : a.createElement(i.a, {
                        key: s.setID + "/" + s.version,
                        badge: s
                    })
                }));
                var o = s.filter(function(e) {
                    return null !== e
                });
                return a.createElement("span", null, o)
            }
    },
    S20p: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ShareResub_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "resubNotification"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "months"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "query Chat_ShareResub_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nself {\nresubNotification {\nid\nmonths\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    S4DY: function(e, t) {},
    Sra5: function(e, t) {},
    T0IN: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            for (var t = e.length - 1; t > 0; t--) {
                var n = Math.floor(Math.random() * (t + 1)),
                    a = e[t];
                e[t] = e[n], e[n] = a
            }
            return e
        }
    },
    "Ti/Y": function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        a.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation DismissNewChatterToken($input: DismissRitualTokenInput!) {\ndismissRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    TnJK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var a = {
            DarkMode: "darkMode",
            FollowerDuration: "followerDuration",
            FollowerMode: "followerMode",
            HideChat: "hideChat",
            ShowMessageFlags: "showMessageFlags",
            ShowAutoModActions: "showAutoModActions",
            ShowModActions: "showModerationActions",
            ShowModIcons: "showModIcons",
            ShowTimestamps: "showTimestamps",
            SlowMode: "slowMode"
        }
    },
    Tur5: function(e, t, n) {
        "use strict";
        var a = n("bgpf");
        n.d(t, "RitualTokenMutationErrors", function() {
            return a.a
        }), n.d(t, "RitualTokenStatus", function() {
            return a.b
        }), n.d(t, "RitualTokenType", function() {
            return a.c
        });
        var i = n("AQmT"),
            r = (n.n(i), n("xfb5")),
            s = (n.n(r), n("6vcJ"));
        n.n(s)
    },
    UMQJ: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_Channels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sourceChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "sourceChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "sourceChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 268
            }
        };
        n.loc.source = {
            body: "query RaidNotification_Channels($sourceChannelID: ID! $targetChannelID: ID!) {\nsourceChannel: user(id: $sourceChannelID) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\ntargetChannel: user(id: $targetChannelID) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Umoc: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("vH/s"),
            s = n("TnJK"),
            o = n("QFW6"),
            l = function(e) {
                i.n.track(r.SpadeEventType.ChatSettingsOpened, Object(o.a)(e))
            },
            d = function(e) {
                var t = a.__assign({}, Object(o.a)(e), {
                    setting_name: e.settingName,
                    new_value: e.newValue.toString()
                });
                i.n.track(r.SpadeEventType.ChatSettingsChanged, t)
            },
            c = function(e) {
                var t = a.__assign({}, Object(o.a)(e), {
                    setting_name: s.a.FollowerDuration,
                    new_value: e.newValue.toString(),
                    follower_mode_on: e.followerModeOn
                });
                i.n.track(r.SpadeEventType.ChatSettingsChanged, t)
            }
    },
    Uvj5: function(e, t) {},
    UzRK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        }), t.c = function(e) {
            switch (e) {
                case 0:
                    return Object(a.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                case 10:
                    return Object(a.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                case 30:
                    return Object(a.d)("30 minutes", "FollowersOnlyLabel");
                case 60:
                    return Object(a.d)("1 hour", "FollowersOnlyLabel");
                case 1440:
                    return Object(a.d)("1 day", "FollowersOnlyLabel");
                case 10080:
                    return Object(a.d)("1 week", "FollowersOnlyLabel");
                case 43200:
                    return Object(a.d)("1 month", "FollowersOnlyLabel");
                case 129600:
                    return Object(a.d)("3 months", "FollowersOnlyLabel");
                default:
                    return a.j.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
            }
        }, t.d = function(e) {
            switch (e) {
                case 0:
                    return Object(a.d)("0 min", "FollowersOnlyShorthand");
                case 10:
                    return Object(a.d)("10 min", "FollowersOnlyShorthand");
                case 30:
                    return Object(a.d)("30 min", "FollowersOnlyShorthand");
                case 60:
                    return Object(a.d)("1 hr", "FollowersOnlyShorthand");
                case 1440:
                    return Object(a.d)("1 day", "FollowersOnlyShorthand");
                case 10080:
                    return Object(a.d)("1 wk", "FollowersOnlyShorthand");
                case 43200:
                    return Object(a.d)("1 mo", "FollowersOnlyShorthand");
                case 129600:
                    return Object(a.d)("3 mo", "FollowersOnlyShorthand");
                default:
                    return Object(a.d)("custom", "FollowersOnlyShorthand")
            }
        };
        var a = n("6sO2"),
            i = 30,
            r = [0, 10, 30, 60, 1440, 10080, 43200, 129600]
    },
    V9YC: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), t.b = function(e) {
            return {
                type: a,
                languagePreferences: e
            }
        };
        var a = "core.user-preferences.LANGUAGE_PREFERENCES_UPDATED"
    },
    "VB5+": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("vH/s"),
            s = n("QFW6"),
            o = function(e) {
                var t = a.__assign({}, Object(s.a)(e), {
                    mentioned_user_display_name: e.mentionedUserDisplayName,
                    user: e.userLogin
                });
                i.n.track(r.SpadeEventType.ChatMentionUsed, t)
            }
    },
    VSa1: function(e, t) {},
    Vaxm: function(e, t) {},
    VsL1: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("6sO2"),
            r = "control";
        t.a = o, t.b = function(e, t) {
            var n = o();
            n[e] = t, i.l.set(s, n)
        }, t.c = function(e, t) {
            var n = o();
            n.lastUsedFollowerDurations[e] = t, i.l.set(s, n)
        };
        var s = "chatSettings";

        function o() {
            var e = i.l.get(s, {});
            return a.__assign({
                lastUsedFollowerDurations: {},
                showAutoModActions: !0,
                showMessageFlags: !0,
                showModerationActions: !0,
                showModIcons: !1,
                showTimestamps: !1,
                zachModeStatus: r
            }, e)
        }
    },
    W266: function(e, t) {},
    WT1Y: function(e, t) {},
    XYVN: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, s) {
            return {
                topic: n ? Object(i.a)(n) : "",
                type: a.PubsubMessageType.BitsLeaderboardEvent,
                mutator: function(e, t) {
                    if (!t || !n) return t;
                    var a = e.top.map(function(e) {
                        return Object(r.b)(e, n.id)
                    });
                    if (t.user) {
                        if (t.user.tournament && t.user.tournament.teamLeaderboard && (t.user.tournament.teamLeaderboard.items.edges = a), t.user.tournament && t.user.tournament.globalLeaderboard && (t.user.tournament.globalLeaderboard.items.edges = a, s && e.entry_context && e.entry_context.entry.entry_key === s && t.user.tournament.self && t.user.tournament.self.globalLeaderboardItem)) {
                            var i = Object(r.b)(e.entry_context.entry, n.id);
                            t.user.tournament.self.globalLeaderboardItem = i.node
                        }
                        if (t.user.cheer && t.user.cheer.leaderboard && (t.user.cheer.leaderboard.items.edges = a, s && e.entry_context && e.entry_context.entry.entry_key === s && t.user.self && t.user.self.bitsLeaderboardItem)) {
                            var o = Object(r.b)(e.entry_context.entry, n.id);
                            t.user.self.bitsLeaderboardItem = o.node
                        }
                    }
                    return t
                },
                skip: !n,
                query: e,
                variables: {
                    channelID: t
                }
            }
        };
        var a = n("aMxy"),
            i = n("HZww"),
            r = n("bkpq")
    },
    Y5T0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BitsCommandHandler_DismissPinnedCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPinnedCheerInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissPinnedCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation BitsCommandHandler_DismissPinnedCheer($input: DismissPinnedCheerInput!) {\ndismissPinnedCheer(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    YDbY: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var a = n("6sO2"),
            i = function() {
                return a.b.get("dashboard_moderation_settings_enabled", !1)
            }
    },
    Z3Cb: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("CIox"),
            s = n("2KeS"),
            o = n("6sO2"),
            l = n("7vx8"),
            d = n("WIs4"),
            c = n("aMxy"),
            u = n("NXs7"),
            p = n("HZww"),
            m = n("vH/s"),
            h = n("9u8h"),
            g = function() {
                function e() {}
                return e.fetchChannelsList = function() {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return a.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, h.a.get("/kraken/autohost/list")];
                                case 1:
                                    return e = n.sent(), [2, this.deserialize(e)];
                                case 2:
                                    return t = n.sent(), o.j.error(t, "Couldn't fetch autohost list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.setChannelsList = function(e) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return a.trys.push([0, 2, , 3]), [4, h.a.put("/kraken/autohost/list", {
                                        body: {
                                            targets: e.join(",")
                                        }
                                    })];
                                case 1:
                                    return t = a.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = a.sent(), o.j.error(n, "Couldn't update autohost list"), [2, e];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.deserialize = function(e) {
                    return e.body ? e.body.targets.map(function(e) {
                        return e._id.toString()
                    }) : []
                }, e
            }();
        var f, b, v = n("Odds"),
            k = (n("7X7f"), n("QMHY")),
            y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.dismiss = function() {
                        t.setState({
                            isDismissed: !0
                        }), t.track(m.SpadeEventType.AutohostChatDismiss);
                        var e = t.getAutohostNotificationsDismissed();
                        e[t.props.data.user.id] = {
                            dismissedDate: (new Date).getTime()
                        }, t.setAutohostNotificationsDismissed(e)
                    }, t.addChannelToAutohost = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return a.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, g.fetchChannelsList()];
                                    case 1:
                                        return e = t.sent().concat([this.props.data.user.id]), this.setState({
                                            autohostChannels: e
                                        }), g.setChannelsList(e), this.track(m.SpadeEventType.AutohostChatYes), [2]
                                }
                            })
                        })
                    }, t.trackSettingsClick = function() {
                        t.track(m.SpadeEventType.AutohostChatSettings)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return a.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, g.fetchChannelsList()];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        autohostChannels: e
                                    }), this.isShowing && this.track(m.SpadeEventType.AutohostChatImpression), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    if (!this.isShowing) return null;
                    var e = Object(o.d)("You are now hosting {channel}", {
                            channel: this.props.data.user.displayName
                        }, "AutohostPrompt"),
                        t = Object(o.d)("Auto host this channel whenever you're offline?", "AutohostPrompt"),
                        n = Object(o.d)("Yes", "AutohostPrompt"),
                        a = Object(o.d)("Settings", "AutohostPrompt");
                    return i.createElement(v._32, {
                        "data-target": "autohost-container",
                        "data-test-selector": "autohost_prompt",
                        background: v.n.Base,
                        className: "autohost-prompt",
                        margin: {
                            x: 2
                        },
                        position: v._15.Relative
                    }, i.createElement(v.q, {
                        size: v.s.Medium,
                        direction: v.r.TopLeft,
                        show: !0
                    }, i.createElement(v._32, {
                        alignItems: v.c.Center,
                        borderBottom: !0,
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        justifyContent: v._7.Around,
                        padding: 1
                    }, i.createElement(v._8, {
                        position: v._15.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, i.createElement(v.w, {
                        ariaLabel: Object(o.d)("Close", "AutohostPrompt"),
                        size: v.x.Small,
                        type: v.y.Secondary,
                        "data-test-selector": "autohost-dismiss-button",
                        icon: v._23.Close,
                        onClick: this.dismiss
                    })), i.createElement(v.m, {
                        alt: this.props.data.user.displayName,
                        src: this.props.data.user.profileImageURL,
                        size: 30
                    }), i.createElement(v._8, {
                        className: "autohost-prompt__hosting-message",
                        display: v.R.Flex,
                        padding: {
                            top: .5
                        }
                    }, i.createElement(v._22, {
                        asset: v._23.Check
                    }), i.createElement(v._2, {
                        margin: {
                            left: .5
                        }
                    }, i.createElement(v.Q, null, e)))), i.createElement(v._8, {
                        className: "autohost-prompt__prompt",
                        justifyContent: v._7.Center,
                        display: v.R.Flex,
                        flexWrap: v.U.Wrap,
                        padding: 1
                    }, i.createElement(v.Q, null, t), i.createElement(v._52, {
                        gutterSize: v._54.ExtraSmall,
                        childWidth: v._53.Large
                    }, i.createElement("div", null, i.createElement(v.v, {
                        "data-test-selector": "autohost-yes-button",
                        fullWidth: !0,
                        onClick: this.addChannelToAutohost
                    }, n)), i.createElement("div", null, i.createElement(v.v, {
                        "data-test-selector": "autohost-settings-button",
                        fullWidth: !0,
                        onClick: this.trackSettingsClick,
                        type: v.B.Hollow,
                        linkTo: "https://twitch.tv/settings/profile"
                    }, a))))))
                }, Object.defineProperty(t.prototype, "isShowing", {
                    get: function() {
                        return !this.state.isDismissed && !!this.props.hostedChannelLogin && !this.props.data.loading && !this.props.data.error && this.props.data.user && !!this.state.autohostChannels && !this.state.autohostChannels.includes(this.props.data.user.id) && !this.getAutohostNotificationsDismissed()[this.props.data.user.id]
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.track = function(e) {
                    ! function(e, t) {
                        o.n.track(e, a.__assign({
                            time: Date.now()
                        }, t))
                    }(e, {
                        user_id: this.props.data.currentUser.id,
                        hosting_channel_id: this.props.data.currentUser.id,
                        hosted_channel_id: this.props.data.user.id
                    })
                }, t.prototype.getAutohostNotificationsDismissed = function() {
                    return o.l.get("autohost-notifications-dismissed", {})
                }, t.prototype.setAutohostNotificationsDismissed = function(e) {
                    return o.l.set("autohost-notifications-dismissed", e)
                }, t = a.__decorate([Object(l.a)(k, {
                    skip: function(e) {
                        return !e.hostedChannelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.hostedChannelLogin
                            }
                        }
                    }
                })], t)
            }(i.Component),
            C = n("3T7g"),
            _ = n("J4ib"),
            E = n("QsiC"),
            S = n("HW6M"),
            w = n("zCIC");
        n("bL99");
        ! function(e) {
            e[e.Gold = 0] = "Gold", e[e.Silver = 1] = "Silver", e[e.Bronze = 2] = "Bronze", e[e.Default = 3] = "Default"
        }(f || (f = {})),
        function(e) {
            e[e.Big = 0] = "Big", e[e.Small = 1] = "Small"
        }(b || (b = {}));
        var N, T = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.renderMedalSVG(this.props.medal, this.props.size),
                        t = S("bits-leaderboard-medal__profile-image", {
                            "bits-leaderboard-medal__profile-image--big": this.props.size === b.Big
                        }, {
                            "bits-leaderboard-medal__profile-image--small": this.props.size === b.Small
                        }),
                        n = null;
                    return this.props.profileImageUrl && (n = i.createElement(v._2, {
                        position: v._15.Absolute
                    }, i.createElement("img", {
                        className: t,
                        src: this.props.profileImageUrl
                    }))), i.createElement(v._8, {
                        className: "bits-leaderboard-medal",
                        display: v.R.Flex,
                        position: v._15.Relative
                    }, e, n)
                }, t.prototype.renderMedalSVG = function(e, t) {
                    var n = t === b.Big ? "bits-leaderboard-medal__big" : "bits-leaderboard-medal__small";
                    return e === f.Gold ? i.createElement("svg", {
                        className: n,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, i.createElement("defs", null, i.createElement("linearGradient", {
                        x1: "15.783%",
                        y1: "9.653%",
                        x2: "82.407%",
                        y2: "91.627%",
                        id: "bits-leaderboard-gold-linearGradient-1"
                    }, i.createElement("stop", {
                        stopColor: "#D8B258",
                        offset: "0%"
                    }), i.createElement("stop", {
                        stopColor: "#A4770E",
                        offset: "100%"
                    })), i.createElement("path", {
                        id: "bits-leaderboard-gold-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), i.createElement("linearGradient", {
                        x1: "17.025%",
                        y1: "7.356%",
                        x2: "84.092%",
                        y2: "91.769%",
                        id: "bits-leaderboard-gold-linearGradient-3"
                    }, i.createElement("stop", {
                        stopColor: "#E5B561",
                        offset: "0%"
                    }), i.createElement("stop", {
                        stopColor: "#EEC05F",
                        offset: "12.638%"
                    }), i.createElement("stop", {
                        stopColor: "#FFECB9",
                        offset: "20.419%"
                    }), i.createElement("stop", {
                        stopColor: "#DCB35E",
                        offset: "30.58%"
                    }), i.createElement("stop", {
                        stopColor: "#E0B55B",
                        offset: "45.279%"
                    }), i.createElement("stop", {
                        stopColor: "#CDA148",
                        offset: "62.771%"
                    }), i.createElement("stop", {
                        stopColor: "#E9CC8F",
                        offset: "76.584%"
                    }), i.createElement("stop", {
                        stopColor: "#ECBE5D",
                        offset: "83.038%"
                    }), i.createElement("stop", {
                        stopColor: "#C09A4C",
                        offset: "100%"
                    })), i.createElement("linearGradient", {
                        x1: "83.2%",
                        y1: "89.733%",
                        x2: "12.813%",
                        y2: "3.179%",
                        id: "bits-leaderboard-gold-linearGradient-4"
                    }, i.createElement("stop", {
                        stopColor: "#9A790A",
                        offset: "0%"
                    }), i.createElement("stop", {
                        stopColor: "#FFEFB9",
                        offset: "87.642%"
                    }), i.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "100%"
                    })), i.createElement("circle", {
                        id: "bits-leaderboard-gold-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), i.createElement("g", {
                        id: "bits-leaderboard-gold-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, i.createElement("g", {
                        id: "bits-leaderboard-gold-Medal-1-gold-lg"
                    }, i.createElement("g", {
                        id: "bits-leaderboard-gold-Star"
                    }, i.createElement("use", {
                        fill: "#D6A94C",
                        xlinkHref: "#bits-leaderboard-gold-path-2"
                    }), i.createElement("path", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), i.createElement("path", {
                        id: "bits-leaderboard-gold-Star",
                        fill: "url(#bits-leaderboard-gold-linearGradient-3)",
                        d: "M16 28.58l-2.469 2.215-1.615-2.897-3.055 1.294-.587-3.265-3.31.232.505-3.279-3.206-.855 1.543-2.937-2.755-1.85 2.413-2.277-2.005-2.643 3.021-1.371-1.037-3.151 3.302-.316.042-3.317 3.226.774 1.117-3.124 2.8 1.78L16 1l2.07 2.592 2.8-1.78 1.117 3.125 3.226-.774.042 3.317 3.302.316-1.037 3.151 3.021 1.37-2.005 2.644 2.413 2.278-2.755 1.849 1.543 2.937-3.206.855.505 3.28-3.31-.233-.587 3.265-3.055-1.294-1.615 2.897z"
                    }), i.createElement("g", {
                        id: "bits-leaderboard-gold-Oval"
                    }, i.createElement("use", {
                        fill: "#BE912A",
                        xlinkHref: "#bits-leaderboard-gold-path-5"
                    }), i.createElement("circle", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    }))))) : e === f.Silver ? i.createElement("svg", {
                        className: n,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, i.createElement("defs", null, i.createElement("linearGradient", {
                        x1: "18.738%",
                        y1: "20.297%",
                        x2: "79.716%",
                        y2: "88.714%",
                        id: "bits-leaderboard-silver-linearGradient-1"
                    }, i.createElement("stop", {
                        stopColor: "#D0D8DB",
                        offset: "0%"
                    }), i.createElement("stop", {
                        stopColor: "#7E848A",
                        offset: "100%"
                    })), i.createElement("path", {
                        id: "bits-leaderboard-silver-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), i.createElement("linearGradient", {
                        x1: "19.638%",
                        y1: "10.855%",
                        x2: "81.99%",
                        y2: "89.124%",
                        id: "bits-leaderboard-silver-linearGradient-3"
                    }, i.createElement("stop", {
                        stopColor: "#202020",
                        offset: "0%"
                    }), i.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), i.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.779%"
                    }), i.createElement("stop", {
                        stopColor: "#313131",
                        offset: "30.58%"
                    }), i.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), i.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "61.521%"
                    }), i.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "74.572%"
                    }), i.createElement("stop", {
                        stopColor: "#656565",
                        offset: "87.343%"
                    }), i.createElement("stop", {
                        stopColor: "#C4C4C4",
                        offset: "100%"
                    })), i.createElement("linearGradient", {
                        x1: "0%",
                        y1: "0%",
                        x2: "99.438%",
                        y2: "96.312%",
                        id: "bits-leaderboard-silver-linearGradient-4"
                    }, i.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "3.677%"
                    }), i.createElement("stop", {
                        offset: "100%"
                    })), i.createElement("linearGradient", {
                        x1: "8.437%",
                        y1: "13.448%",
                        x2: "86.525%",
                        y2: "83.33%",
                        id: "bits-leaderboard-silver-linearGradient-5"
                    }, i.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "0%"
                    }), i.createElement("stop", {
                        stopColor: "#EAEEF2",
                        offset: "9.632%"
                    }), i.createElement("stop", {
                        stopColor: "#686C71",
                        offset: "100%"
                    })), i.createElement("circle", {
                        id: "bits-leaderboard-silver-path-6",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), i.createElement("g", {
                        id: "bits-leaderboard-silver-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, i.createElement("g", {
                        id: "bits-leaderboard-silver-Medal-2-silver-lg"
                    }, i.createElement("g", {
                        id: "bits-leaderboard-silver-Star-Copy-2"
                    }, i.createElement("use", {
                        fill: "#CBC8D0",
                        xlinkHref: "#bits-leaderboard-silver-path-2"
                    }), i.createElement("path", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), i.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-3",
                        fill: "url(#bits-leaderboard-silver-linearGradient-3)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), i.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-4-grad",
                        fill: "url(#bits-leaderboard-silver-linearGradient-4)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), i.createElement("g", {
                        id: "bits-leaderboard-silver-Oval-Copy"
                    }, i.createElement("use", {
                        fill: "#A3A7AA",
                        xlinkHref: "#bits-leaderboard-silver-path-6"
                    }), i.createElement("circle", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-5)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    }))))) : e === f.Bronze ? i.createElement("svg", {
                        className: n,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, i.createElement("defs", null, i.createElement("linearGradient", {
                        x1: "14.834%",
                        y1: "10.25%",
                        x2: "82.068%",
                        y2: "89.469%",
                        id: "bits-leaderboard-bronze-linearGradient-1"
                    }, i.createElement("stop", {
                        stopColor: "#DF904C",
                        offset: "0%"
                    }), i.createElement("stop", {
                        stopColor: "#A65611",
                        offset: "100%"
                    })), i.createElement("path", {
                        id: "bits-leaderboard-bronze-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), i.createElement("linearGradient", {
                        x1: "19.142%",
                        y1: "10.021%",
                        x2: "79.509%",
                        y2: "86.458%",
                        id: "bits-leaderboard-bronze-linearGradient-3"
                    }, i.createElement("stop", {
                        offset: "0%"
                    }), i.createElement("stop", {
                        stopColor: "#494949",
                        offset: "9.355%"
                    }), i.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), i.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.419%"
                    }), i.createElement("stop", {
                        stopColor: "#818181",
                        offset: "25.723%"
                    }), i.createElement("stop", {
                        stopColor: "#5D5D5D",
                        offset: "39.965%"
                    }), i.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), i.createElement("stop", {
                        stopColor: "#7A7A7A",
                        offset: "50.012%"
                    }), i.createElement("stop", {
                        stopColor: "#717171",
                        offset: "57.677%"
                    }), i.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "63.526%"
                    }), i.createElement("stop", {
                        stopColor: "#888",
                        offset: "69.88%"
                    }), i.createElement("stop", {
                        stopColor: "#F1F1F1",
                        offset: "75.215%"
                    }), i.createElement("stop", {
                        stopColor: "#B9B9B9",
                        offset: "79.325%"
                    }), i.createElement("stop", {
                        stopColor: "#545454",
                        offset: "92.875%"
                    }), i.createElement("stop", {
                        offset: "100%"
                    })), i.createElement("linearGradient", {
                        x1: "19.604%",
                        y1: "10.043%",
                        x2: "84.81%",
                        y2: "89.074%",
                        id: "bits-leaderboard-bronze-linearGradient-4"
                    }, i.createElement("stop", {
                        stopColor: "#F2C6A5",
                        offset: "0%"
                    }), i.createElement("stop", {
                        stopColor: "#864223",
                        offset: "100%"
                    })), i.createElement("circle", {
                        id: "bits-leaderboard-bronze-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), i.createElement("g", {
                        id: "bits-leaderboard-bronze-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, i.createElement("g", {
                        id: "bits-leaderboard-bronze-Medal-3-bronze-lg"
                    }, i.createElement("g", {
                        id: "bits-leaderboard-bronze-Star-Copy-2B"
                    }, i.createElement("use", {
                        fill: "#DE9572",
                        xlinkHref: "#bits-leaderboard-bronze-path-2"
                    }), i.createElement("path", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), i.createElement("path", {
                        id: "bits-leaderboard-bronze-Star-Copy-3B",
                        fill: "url(#bits-leaderboard-bronze-linearGradient-3)",
                        opacity: ".4",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), i.createElement("g", {
                        id: "bits-leaderboard-bronze-Oval-Copy-B"
                    }, i.createElement("use", {
                        fill: "#A96643",
                        xlinkHref: "#bits-leaderboard-bronze-path-5"
                    }), i.createElement("circle", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    }))))) : e === f.Default ? i.createElement("svg", {
                        className: n,
                        viewBox: "0 0 20 20",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, i.createElement("defs", null, i.createElement("path", {
                        id: "bits-leaderboard-default-path-1",
                        d: "M10 16.88l-1.31676 1.01089-.91717-1.38367-1.57365.52857-.4182-1.6065-1.66001-.01104.12608-1.65525-1.56648-.54944.65672-1.52462-1.3032-1.0283L3.1435 9.43184l-.8987-1.39573 1.45468-.79978-.39681-1.61193 1.63555-.2841.14808-1.65343 1.63918.26234.67692-1.51576 1.46519.78037L10 2l1.13241 1.21383 1.46519-.78037.67692 1.51576 1.63918-.26234.14808 1.65342 1.63555.28411-.3968 1.61193 1.45467.79978-.8987 1.39573 1.11618 1.22878-1.3032 1.02831.6567 1.52462-1.56647.54944.12608 1.65525-1.66.01104-.41821 1.6065-1.57365-.52857-.91717 1.38367z"
                    })), i.createElement("g", {
                        id: "bits-leaderboard-default-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, i.createElement("g", {
                        id: "bits-leaderboard-default-bitbadge/blank"
                    }, i.createElement("g", {
                        id: "bits-leaderboard-default-Star"
                    }, i.createElement("use", {
                        fill: "#D7CCEB",
                        xlinkHref: "#bits-leaderboard-default-path-1"
                    }), i.createElement("path", {
                        stroke: "#D7CCEB",
                        d: "M10 17.51035l-1.4374 1.10351-1.0012-1.51044-1.71783.577-.45652-1.7537-1.8121-.01204.13763-1.8069-1.71-.59979.71688-1.6643-1.4226-1.12253L2.5153 9.3798l-.98104-1.52362 1.58796-.87305-.43317-1.75961 1.7854-.31014.16165-1.80492 1.78937.28638.73894-1.65463 1.59943.85187L10 1.26703l1.23616 1.32505 1.59943-.85187.73894 1.65463 1.78937-.28638.16165 1.80492 1.7854.31014-.43317 1.7596 1.58796.87306-.98104 1.52362 1.21844 1.34136-1.4226 1.12252.71688 1.66431-1.71.59978.13763 1.8069-1.8121.01205-.45652 1.7537-1.71782-.577-1.00121 1.51044L10 17.51036z"
                    })), i.createElement("circle", {
                        id: "bits-leaderboard-default-Oval-2",
                        fill: "#EEE9F6",
                        cx: "10",
                        cy: "10",
                        r: "6"
                    })))) : null
                }, t
            }(i.Component),
            D = n("nrdj"),
            O = n("5Dex"),
            I = n("CFVp"),
            M = (n("mmly"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return i.createElement(v._8, {
                        display: v.R.InlineFlex,
                        alignItems: v.c.Center,
                        flexGrow: 1
                    });
                    var e = this.props.bitsConfig ? this.props.bitsConfig : Object(I.a)(),
                        t = null,
                        n = "";
                    if (this.props.data && this.props.data.user) {
                        n = this.props.data.user.displayName || this.props.data.user.login;
                        var a = i.createElement(v.Q, {
                            ellipsis: !0
                        }, n);
                        this.props.selfId && this.props.selfId === this.props.id && (a = i.createElement(v.Q, {
                            ellipsis: !0,
                            color: v.K.Link,
                            bold: !0
                        }, n)), t = i.createElement(v._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-expanded-leaderboard-entry__username",
                            margin: {
                                x: 1
                            },
                            display: v.R.InlineBlock
                        }, a)
                    }
                    var r, s = null;
                    s = this.props.selfId && this.props.selfId === this.props.value ? i.createElement(v._12, {
                        label: this.props.rank.toString(),
                        type: v._13.Brand
                    }) : i.createElement(v.Q, {
                        color: v.K.Link,
                        bold: !0
                    }, this.props.rank);
                    var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || o.a.defaultAvatarURL;
                    return r = i.createElement(v._8, {
                        overflow: v._11.Hidden,
                        display: v.R.InlineFlex,
                        flexGrow: 1,
                        fullWidth: !0,
                        alignItems: v.c.Center
                    }, i.createElement(v._8, {
                        className: "bits-leaderboard-expanded-leaderboard-entry__rank",
                        padding: {
                            right: .5
                        }
                    }, s), i.createElement("img", {
                        src: l,
                        className: "bits-leaderboard-expanded-leaderboard-entry__avatar"
                    }), t, i.createElement(v._8, {
                        flexShrink: 0,
                        className: "bits-leaderboard-expanded-leaderboard-entry__score",
                        margin: {
                            left: "auto"
                        },
                        display: v.R.InlineBlock
                    }, i.createElement(D.a, {
                        animated: !1,
                        showImage: !0,
                        showAmount: !0,
                        prefix: "Cheer",
                        bitsConfig: e,
                        size: D.b.ExtremelySmall,
                        display: v.R.InlineFlex,
                        amount: this.props.score,
                        formattedNumber: !0,
                        alignItems: v.c.Center
                    }))), i.createElement(v._8, {
                        className: "bits-leaderboard-expanded-leaderboard-entry",
                        display: v.R.Block,
                        alignItems: v.c.Center
                    }, r)
                }, t
            }(i.Component)),
            R = Object(s.d)(Object(l.a)(O, {
                name: "data",
                skip: function(e) {
                    return !e.id
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.value,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(M),
            L = (n("2ZhA"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return i.createElement(v._8, {
                        display: v.R.InlineFlex,
                        alignItems: v.c.Center,
                        flexGrow: 1
                    });
                    var e = this.props.bitsConfig ? this.props.bitsConfig : Object(I.a)(),
                        t = null,
                        n = "";
                    if (this.props.data && this.props.data.user) {
                        n = this.props.data.user.displayName || this.props.data.user.login;
                        var a = i.createElement(v.Q, {
                            ellipsis: !0,
                            bold: !0
                        }, n);
                        this.props.selfId && this.props.selfId === this.props.value && (a = i.createElement(v.Q, {
                            ellipsis: !0,
                            color: v.K.Link,
                            bold: !0
                        }, n)), t = i.createElement(v._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-expanded-top-three-entry__username",
                            margin: {
                                x: .5
                            },
                            display: v.R.InlineBlock
                        }, a)
                    }
                    var r, s = null;
                    s = this.props.selfId && this.props.selfId === this.props.value ? i.createElement(v._12, {
                        label: this.props.rank.toString(),
                        type: v._13.Brand
                    }) : i.createElement(v.Q, {
                        color: v.K.Link,
                        bold: !0
                    }, this.props.rank);
                    var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || o.a.defaultAvatarURL;
                    return r = i.createElement(v._8, {
                        overflow: v._11.Hidden,
                        display: v.R.InlineFlex,
                        flexGrow: 1,
                        fullWidth: !0,
                        alignItems: v.c.Center
                    }, i.createElement(v._8, {
                        className: "bits-leaderboard-expanded-top-three-entry__rank"
                    }, s), i.createElement(T, {
                        size: b.Big,
                        medal: this.props.medal,
                        profileImageUrl: l
                    }), t, i.createElement(v._8, {
                        flexShrink: 0,
                        className: "bits-leaderboard-expanded-top-three-entry__score",
                        margin: {
                            left: "auto"
                        },
                        display: v.R.InlineBlock
                    }, i.createElement(D.a, {
                        animated: !1,
                        showImage: !0,
                        showAmount: !0,
                        prefix: "Cheer",
                        bitsConfig: e,
                        size: D.b.ExtremelySmall,
                        display: v.R.InlineFlex,
                        amount: this.props.score,
                        formattedNumber: !0,
                        alignItems: v.c.Center
                    }))), i.createElement(v._8, {
                        className: "bits-leaderboard-expanded-top-three-entry",
                        display: v.R.Block
                    }, r)
                }, t
            }(i.Component)),
            x = Object(s.d)(Object(l.a)(O, {
                name: "data",
                skip: function(e) {
                    return !e.id
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.value,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(L);
        ! function(e) {
            e.Weekly = "WEEK", e.AllTime = "ALLTIME", e.Monthly = "MONTH"
        }(N || (N = {}));
        n("GuSj");
        var j = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.renderExpandArrow = function() {
                    return i.createElement(v._8, {
                        position: v._15.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        className: "bits-leaderboard-expanded__arrow",
                        display: v.R.Flex,
                        alignItems: v.c.Stretch
                    }, i.createElement(v.v, {
                        size: v.z.Small,
                        fullWidth: !0,
                        type: v.B.Text,
                        onClick: t.props.toggleExpand
                    }, i.createElement(v._22, {
                        asset: v._23.AngleUp,
                        height: 12,
                        width: 12
                    })))
                }, t
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = this.shouldRenderBottomContent(),
                    t = this.renderTopThreeEntries(),
                    n = this.renderTopTenEntries(),
                    a = this.renderExpandArrow(),
                    r = this.renderTopSection(),
                    s = null,
                    o = null;
                e && ((s = this.renderUserPlaceEntry()) || (o = this.renderBottomSection()));
                var l = {
                        "bits-leaderboard-expanded__top-three-break": !!this.props.topEdges && this.props.topEdges.length > 3
                    },
                    d = {
                        "bits-leaderboard-expanded__top-ten-break": !!this.props.topEdges && this.props.topEdges.length > 0
                    };
                return i.createElement(v._32, {
                    background: v.n.Base,
                    padding: {
                        top: 1
                    },
                    position: v._15.Relative
                }, r, i.createElement(w.b, {
                    className: "bits-leaderboard-expanded__scrollable",
                    suppressScrollX: !0
                }, i.createElement(v._8, null, i.createElement("ul", null, t, i.createElement(v._8, {
                    className: S(l)
                }), n, i.createElement(v._8, {
                    className: S(d)
                }), s), o)), a)
            }, t.prototype.renderTopThreeEntries = function() {
                if (!this.props.topEdges) return null;
                var e = [];
                return this.props.topEdges[0] && e.push(this.renderTopThreeEntry(this.props.topEdges[0], f.Gold)), this.props.topEdges[1] && e.push(this.renderTopThreeEntry(this.props.topEdges[1], f.Silver)), this.props.topEdges[2] && e.push(this.renderTopThreeEntry(this.props.topEdges[2], f.Bronze)), e
            }, t.prototype.renderTopSection = function() {
                var e = Object(o.d)("Weekly Top Cheerers", "Bits--PinnedCheerV2"),
                    t = this.props.secondsRemaining ? this.props.secondsRemaining : 0,
                    n = Math.floor(t / 86400),
                    a = i.createElement(v.Q, {
                        type: v._46.Span
                    }, Object(o.d)("Resets in {time} days", {
                        time: n
                    }, "Bits--PinnedCheerV2"));
                return n < 1 && (a = i.createElement(v.Q, {
                    type: v._46.Span
                }, Object(o.d)("Resets in less than a day", "Bits--PinnedCheerV2"))), this.props.leaderboardMode === N.AllTime ? (e = Object(o.d)("All-time Top Cheerers", "Bits--PinnedCheerV2"), a = null) : this.props.leaderboardMode === N.Monthly && (e = Object(o.d)("Monthly Top Cheerers", "Bits--PinnedCheerV2")), i.createElement(v._8, {
                    display: v.R.Flex,
                    alignItems: v.c.Center,
                    flexDirection: v.T.Column
                }, i.createElement(v.Q, {
                    type: v._46.H5,
                    bold: !0
                }, e), a, i.createElement(v._8, {
                    className: "bits-leaderboard-expanded__section-break",
                    margin: {
                        y: 1
                    }
                }))
            }, t.prototype.renderBottomSection = function() {
                var e = !!this.props.topEdges && this.props.topEdges.length > 0;
                return i.createElement(v._8, {
                    padding: {
                        bottom: 1
                    }
                }, i.createElement(v._32, {
                    borderTop: e
                }, i.createElement(v._8, {
                    display: v.R.Flex,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    margin: {
                        top: 1
                    }
                }, i.createElement(v._22, {
                    asset: v._23.Bits,
                    type: v._24.Brand
                }), i.createElement(v.Q, {
                    type: v._46.Span,
                    bold: !0
                }, Object(o.d)("Cheer your way to the top!", "Bits--PinnedCheersV2")), i.createElement(v.O, {
                    to: "https://blog.twitch.tv/earn-new-rewards-for-supporting-your-favorite-creators-da6b34a98827",
                    targetBlank: !0,
                    hoverUnderlineNone: !1
                }, i.createElement(v.Q, {
                    bold: !0
                }, Object(o.d)("Learn More", "Bits--PinnedCheersV2"))))))
            }, t.prototype.renderTopThreeEntry = function(e, t) {
                return i.createElement(v._8, {
                    key: e.node.id,
                    padding: {
                        x: 1,
                        top: .5
                    }
                }, i.createElement(x, {
                    id: e.node.id,
                    value: e.node.entryKey,
                    score: e.node.score,
                    bitsConfig: this.props.bitsConfig,
                    medal: t,
                    selfId: this.props.selfId,
                    rank: e.node.rank
                }))
            }, t.prototype.renderTopTenEntries = function() {
                var e = this;
                return this.props.topEdges ? this.props.topEdges.slice(3, 10).map(function(t) {
                    return e.renderTopTenEntry(t.node)
                }) : null
            }, t.prototype.renderTopTenEntry = function(e) {
                return i.createElement(v._8, {
                    key: e.id,
                    padding: {
                        x: 1,
                        top: .5
                    }
                }, i.createElement(R, {
                    id: e.id,
                    value: e.entryKey,
                    score: e.score,
                    bitsConfig: this.props.bitsConfig,
                    selfId: this.props.selfId,
                    rank: e.rank
                }))
            }, t.prototype.shouldRenderBottomContent = function() {
                var e = this;
                if (!this.props.topEdges) return !1;
                var t = !0;
                return this.props.topEdges.forEach(function(n) {
                    n.node.entryKey === e.props.selfId && (t = !1)
                }), t
            }, t.prototype.renderUserPlaceEntry = function() {
                if (!this.props.userPlaceEdge) return null;
                var e = this.renderTopTenEntry(this.props.userPlaceEdge);
                return i.createElement(v._8, {
                    padding: {
                        top: .5
                    }
                }, i.createElement(v._32, {
                    borderTop: !0
                }, i.createElement(v._8, {
                    padding: {
                        y: .5
                    }
                }, e)))
            }, t
        }(i.Component);

        function U(e) {
            switch (e) {
                case 1:
                    return Object(o.d)("Cheer now to be #1!", "Bits--PinnedCheerV2");
                case 2:
                    return Object(o.d)("Cheer to take #2!", "Bits--PinnedCheerV2");
                case 3:
                    return Object(o.d)("Cheer to take #3!", "Bits--PinnedCheerV2");
                default:
                    return Object(o.d)("...", "Bits--PinnedCheerV2")
            }
        }
        n("iqz2");
        var B = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return i.createElement(v._8, {
                        display: v.R.InlineBlock,
                        alignItems: v.c.Center,
                        flexGrow: 1
                    });
                    var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(I.a)(),
                        n = null,
                        a = "";
                    if (this.props.data && this.props.data.user) {
                        a = this.props.data.user.displayName || this.props.data.user.login;
                        var r = i.createElement(v.Q, {
                            ellipsis: !0,
                            bold: !0
                        }, a);
                        this.props.selfId && this.props.selfId === this.props.entryKey && (r = i.createElement(v._12, {
                            label: a,
                            type: v._13.Brand
                        })), n = i.createElement(v._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-first-entry__username"
                        }, r)
                    }
                    if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                        var s = U(1);
                        e = i.createElement(v._8, {
                            className: "bits-leaderboard-header-first-entry__container",
                            overflow: v._11.Hidden,
                            display: v.R.InlineFlex,
                            alignItems: v.c.Center,
                            flexGrow: 1
                        }, i.createElement(v._8, {
                            flexShrink: 0
                        }, i.createElement(T, {
                            size: b.Big,
                            medal: f.Default
                        })), i.createElement(v._8, {
                            className: "bits-leaderboard-header-first-entry__text",
                            margin: {
                                left: .5
                            }
                        }, i.createElement(v.Q, {
                            color: v.K.Link,
                            bold: !0
                        }, s)))
                    } else {
                        var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || o.a.defaultAvatarURL;
                        e = i.createElement(v._8, {
                            className: "bits-leaderboard-header-first-entry__container",
                            overflow: v._11.Hidden,
                            display: v.R.InlineFlex,
                            alignItems: v.c.Center,
                            flexGrow: 1
                        }, i.createElement(v._8, {
                            flexShrink: 0
                        }, i.createElement(T, {
                            size: b.Big,
                            medal: f.Gold,
                            profileImageUrl: l
                        })), i.createElement(v._8, {
                            className: "bits-leaderboard-header-first-entry__text",
                            margin: {
                                left: .5
                            }
                        }, n, i.createElement(v._8, {
                            className: "bits-leaderboard-header-first-entry__score"
                        }, i.createElement(D.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: t,
                            size: D.b.ExtremelySmall,
                            display: v.R.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: v.c.Center
                        }))))
                    }
                    this.props.isEmpty || (e = i.createElement(v._49, {
                        label: a,
                        direction: v._51.Bottom
                    }, e));
                    var d = {
                        "bits-leaderboard-header-first-entry": !0,
                        "bits-leaderboard-header-first-entry__empty": this.props.isEmpty
                    };
                    return i.createElement(v._8, {
                        className: S(d),
                        flexShrink: 0
                    }, e)
                }, t
            }(i.Component),
            A = Object(s.d)(Object(l.a)(O, {
                name: "data",
                skip: function(e) {
                    return !e.id || !e.entryKey
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.entryKey,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(B),
            F = (n("x8iQ"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return i.createElement(v._8, {
                        display: v.R.InlineFlex,
                        alignItems: v.c.Center,
                        flexGrow: 1
                    });
                    var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(I.a)(),
                        n = null,
                        a = "";
                    if (this.props.data && this.props.data.user) {
                        a = this.props.data.user.displayName || this.props.data.user.login;
                        var r = i.createElement(v.Q, {
                            ellipsis: !0,
                            bold: !0
                        }, a);
                        this.props.selfId && this.props.selfId === this.props.entryKey && (r = i.createElement(v._12, {
                            label: a,
                            type: v._13.Brand
                        })), n = i.createElement(v._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-runner-up-entry__username",
                            flexShrink: 1,
                            margin: {
                                x: .5
                            }
                        }, r)
                    }
                    if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                        var s = U(this.props.rank ? this.props.rank : 0);
                        e = i.createElement(v._8, {
                            overflow: v._11.Hidden,
                            display: v.R.Flex,
                            alignItems: v.c.Center,
                            flexGrow: 0,
                            fullWidth: !0
                        }, i.createElement(v._8, {
                            flexShrink: 0
                        }, i.createElement(T, {
                            size: b.Small,
                            medal: f.Default
                        })), i.createElement(v._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-runner-up-entry__username",
                            flexShrink: 1,
                            margin: {
                                x: .5
                            }
                        }, i.createElement(v.Q, {
                            color: v.K.Link,
                            bold: !0
                        }, s)))
                    } else {
                        var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || o.a.defaultAvatarURL;
                        e = i.createElement(v._8, {
                            overflow: v._11.Hidden,
                            display: v.R.Flex,
                            alignItems: v.c.Center,
                            flexGrow: 0,
                            fullWidth: !0
                        }, i.createElement(v._8, {
                            flexShrink: 0
                        }, i.createElement(T, {
                            size: b.Small,
                            medal: this.props.medal,
                            profileImageUrl: l
                        })), n, i.createElement(v._8, {
                            flexShrink: 0,
                            className: "bits-leaderboard-header-runner-up-entry__score",
                            margin: {
                                left: "auto"
                            }
                        }, i.createElement(D.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: t,
                            size: D.b.ExtremelySmall,
                            display: v.R.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: v.c.Center
                        })))
                    }
                    return this.props.isEmpty || (e = i.createElement(v._49, {
                        label: a,
                        direction: v._51.Bottom
                    }, e)), i.createElement(v._8, {
                        className: "bits-leaderboard-header-runner-up-entry",
                        display: v.R.Flex,
                        alignItems: v.c.Center
                    }, e)
                }, t
            }(i.Component)),
            P = Object(s.d)(Object(l.a)(O, {
                name: "data",
                skip: function(e) {
                    return !e.id || !e.entryKey
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.entryKey,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(F),
            V = (n("LM6T"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderFirstPlaceEntry = function() {
                        var e, n = null;
                        return t.props.topEdges && t.props.topEdges[0] && (n = t.props.topEdges[0]), e = n ? i.createElement(A, {
                            selfId: t.props.selfId,
                            id: n.node.id,
                            entryKey: n.node.entryKey,
                            score: n.node.score,
                            bitsConfig: t.props.bitsConfig
                        }) : i.createElement(A, {
                            isEmpty: !0
                        }), i.createElement(v._2, {
                            key: 1
                        }, e)
                    }, t.renderExpandArrow = function() {
                        return i.createElement(v._8, {
                            className: "pinned-cheer-v2-header--arrow",
                            alignItems: v.c.Stretch,
                            fullHeight: !0,
                            display: v.R.InlineFlex,
                            attachTop: !0,
                            position: v._15.Absolute
                        }, i.createElement(v.v, {
                            size: v.z.Small,
                            fullWidth: !0,
                            type: v.B.Text,
                            onClick: t.props.toggleExpand
                        }, i.createElement(v._22, {
                            asset: v._23.AngleDown,
                            height: 12,
                            width: 12
                        })))
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.renderFirstPlaceEntry(),
                        t = null,
                        n = null,
                        a = this.renderExpandArrow();
                    if (this.props.topEdges && this.props.topEdges[0]) {
                        t = this.renderRunnerUpEntry(2, f.Silver);
                        var r = this.props.topEdges[1] ? 3 : 0;
                        n = this.renderRunnerUpEntry(r, f.Bronze)
                    }
                    return i.createElement(v._32, {
                        className: "pinned-cheer-v2-header",
                        background: v.n.Base,
                        position: v._15.Relative
                    }, i.createElement(v._8, {
                        className: "pinned-cheer-v2-header__users",
                        display: v.R.InlineFlex,
                        flexWrap: v.U.NoWrap,
                        justifyContent: v._7.Between,
                        fullHeight: !0
                    }, e, i.createElement(v._8, {
                        className: "pinned-cheer-v2-header__runner-up-entries",
                        display: v.R.Flex,
                        flexShrink: 1,
                        flexWrap: v.U.NoWrap,
                        justifyContent: v._7.Between,
                        flexDirection: v.T.Column
                    }, t, n)), a)
                }, t.prototype.renderRunnerUpEntry = function(e, t) {
                    var n, a = null;
                    return e > 0 && this.props.topEdges && this.props.topEdges[e - 1] && (a = this.props.topEdges[e - 1]), n = a ? i.createElement(P, {
                        selfId: this.props.selfId,
                        id: a.node.id,
                        entryKey: a.node.entryKey,
                        score: a.node.score,
                        medal: t,
                        bitsConfig: this.props.bitsConfig
                    }) : i.createElement(P, {
                        isEmpty: !0,
                        medal: f.Default,
                        rank: e
                    }), i.createElement(v._2, {
                        key: e
                    }, n)
                }, t
            }(i.Component)),
            H = n("4Q5V"),
            z = n("mwvJ"),
            G = (n("1vwK"), "pinned-cheer--collapse"),
            W = /(\d+)$/,
            q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1
                    }, t.collapseCheer = !0, t.root = null, t.renderedMessage = null, t.saveRenderedMessageRef = function(e) {
                        t.renderedMessage = e
                    }, t.saveRootRef = function(e) {
                        t.root = e
                    }, t.handleHeadlineClick = function() {
                        t.collapseCheer = !t.collapseCheer, t.root && t.root.classList.toggle(G, t.collapseCheer)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    if (this.renderedMessage) {
                        var e = this.renderedMessage.getElementsByClassName("pinned-cheer__rendered-message-inner");
                        if (e.length) {
                            var t = e[0].getBoundingClientRect().height > 42;
                            this.state.cheerIsTall !== t && this.setState({
                                cheerIsTall: t
                            })
                        }
                    }
                }, t.prototype.render = function() {
                    if (!this.props.recentCheer) return null;
                    for (var e = "", t = 0, n = this.props.recentCheer.messageParts; t < n.length; t++) {
                        var a = n[t];
                        if (a.type === z.a.Emote && a.content.cheerAmount && a.content.alt) {
                            var r = a.content.alt.replace(W, "").toLowerCase();
                            e ? e !== r && (e = "cheer") : e = r
                        }
                    }
                    var s, l, d = this.state.cheerIsTall,
                        c = i.createElement("div", {
                            ref: this.saveRenderedMessageRef,
                            className: S({
                                "pinned-cheer__rendered-message": !0,
                                "pinned-cheer__rendered-message--recent": !0
                            })
                        }, i.createElement(v._32, {
                            margin: {
                                x: 2
                            },
                            borderTop: !0
                        }), i.createElement(v._8, {
                            padding: {
                                y: .5
                            },
                            className: "pinned-cheer__rendered-message-inner"
                        }, i.createElement(H.a, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeData,
                            showAutoModActions: !1,
                            showModerationActions: !1,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isCurrentUserModerator: !1,
                            isCurrentUserStaff: !1,
                            message: this.props.recentCheer,
                            showModerationIcons: !1,
                            showTimestamps: !1
                        }))),
                        u = i.createElement(v.Q, {
                            type: v._46.Strong
                        }, Object(o.d)("Recent Cheer", "Bits--PinnedCheers")),
                        p = ((l = {
                            "pinned-cheer__bounding-box": !0
                        })[G] = this.collapseCheer, l),
                        m = {
                            "pinned-cheer__headline": !0,
                            "pinned-cheer__headline--clickable": d
                        },
                        h = this.props.recentCheerMsRemaining ? this.props.recentCheerMsRemaining : 0;
                    return s = i.createElement(v._8, {
                        className: "pinned-cheer__progress-bar-placeholder"
                    }, i.createElement(v._8, {
                        className: "pinned-cheer__progress-bar",
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        justifyContent: v._7.End
                    }, i.createElement(v._18, {
                        key: this.props.recentCheer.id,
                        countdown: h / 1e3,
                        size: v._19.ExtraSmall
                    }))), i.createElement(v._8, {
                        className: "pinned-cheer",
                        flexGrow: 0,
                        flexShrink: 0,
                        zIndex: v._59.Default
                    }, i.createElement("div", {
                        className: S(p),
                        ref: this.saveRootRef
                    }, i.createElement(v._2, {
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: v.R.Flex,
                        flexDirection: v.T.Row,
                        flexWrap: v.U.NoWrap
                    }, i.createElement("div", {
                        className: S(m),
                        onClick: d ? this.handleHeadlineClick : void 0
                    }, i.createElement(v._8, {
                        flexGrow: 1,
                        flexShrink: 1,
                        display: v.R.Flex,
                        alignItems: v.c.Center,
                        flexWrap: v.U.Wrap
                    }, i.createElement(v._22, {
                        asset: v._23.HourGlass,
                        height: 18,
                        width: 18
                    }), i.createElement(v._8, {
                        margin: {
                            left: .5
                        },
                        display: v.R.Inline
                    }, u), null), i.createElement(v._8, {
                        className: "pinned-cheer__expand-caret",
                        flexShrink: 0,
                        flexGrow: 0,
                        display: v.R.Flex,
                        justifyContent: v._7.Between,
                        alignItems: v.c.Center
                    }, d ? i.createElement(v._22, {
                        asset: v._23.AngleLeft
                    }) : null))), c, s))
                }, t
            }(i.Component),
            Q = n("XYVN"),
            K = n("/LBW"),
            Y = n("dQj3"),
            $ = n("eMi+"),
            J = (n("zbFZ"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isExpanded: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null
                    }, t.recentCheerTimeout = 0, t.toggleIsExpanded = function() {
                        t.setState(function(e) {
                            return {
                                isExpanded: !e.isExpanded
                            }
                        }, function() {
                            t.state.isExpanded && t.onExpandClick()
                        })
                    }, t.onExpandClick = function() {
                        var e = t.props,
                            n = e.channelID,
                            a = e.userID,
                            i = e.data.user;
                        if (i && i.cheer && i.cheer.leaderboard && i.cheer.settings && i.cheer.settings.leaderboard && i.cheer.settings.leaderboard.isEnabled) {
                            var r = i.cheer.settings.leaderboard.timePeriodType,
                                s = i.cheer.leaderboard.items.edges.slice(0, 10),
                                o = !1;
                            a && (o = s.findIndex(function(e) {
                                return e.node.entryKey === a
                            }) >= 0), Object(K.i)({
                                leaderboardSize: s.length,
                                leaderboardMode: r || N.AllTime,
                                userPresentInLeaderboard: o,
                                userID: a,
                                channelID: n
                            })
                        }
                    }, t.handleProgressExpired = function() {
                        _.k.debug("setTimeout expired, forcing re-render"), t.forceUpdate()
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.calcRecentCheerExpiry(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.calcRecentCheerExpiry(e)
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.recentCheerTimeout)
                }, t.prototype.shouldComponentUpdate = function(e, t) {
                    var n = this.getRecentCheerInfo(this.props, this.state),
                        a = this.getRecentCheerInfo(e, t);
                    if (!n.shouldRender && !n.recentCheer) return !0;
                    var i = n.recentCheer ? n.recentCheer.id : 0,
                        r = a.recentCheer ? a.recentCheer.id : 0;
                    return n.shouldRender !== a.shouldRender || n.recentCheer !== a.recentCheer || i !== r
                }, t.prototype.componentDidUpdate = function() {
                    var e = this.getRecentCheerInfo(this.props, this.state),
                        t = 0;
                    this.state.recentCheerExpireTime && (t = Math.max(0, this.state.recentCheerExpireTime - Date.now())), e.shouldRender && (clearTimeout(this.recentCheerTimeout), this.recentCheerTimeout = setTimeout(this.handleProgressExpired, t + 100))
                }, t.prototype.render = function() {
                    var e = null,
                        t = this.renderRecentCheer();
                    return null === t && (e = this.renderLeaderboard()), i.createElement(v._8, {
                        zIndex: v._59.Default
                    }, e, t)
                }, t.prototype.renderLeaderboard = function() {
                    if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.leaderboard)) return null;
                    if (!this.props.data.user.cheer.settings || !this.props.data.user.cheer.settings.leaderboard || !this.props.data.user.cheer.settings.leaderboard.isEnabled) return null;
                    var e = this.props.data.user.cheer.leaderboard.items.edges.slice(0, 10),
                        t = null,
                        n = this.props.data.user.cheer.settings.leaderboard.timePeriodType || N.AllTime;
                    this.props.data.user.self && this.props.data.user.self.bitsLeaderboardItem && (t = this.props.data.user.self.bitsLeaderboardItem);
                    var a = null;
                    this.state.isExpanded && (a = i.createElement(j, {
                        topEdges: e,
                        userPlaceEdge: t,
                        toggleExpand: this.toggleIsExpanded,
                        selfId: this.props.userID,
                        bitsConfig: this.props.bitsConfig,
                        leaderboardMode: n,
                        secondsRemaining: this.props.data.user.cheer.leaderboard.secondsRemaining
                    }));
                    var r = null;
                    return this.state.isExpanded || (r = i.createElement(V, {
                        topEdges: e,
                        toggleExpand: this.toggleIsExpanded,
                        selfId: this.props.userID,
                        bitsConfig: this.props.bitsConfig
                    })), i.createElement(v._8, {
                        className: "pinned-cheer-v2",
                        zIndex: v._59.Default
                    }, i.createElement(v._32, {
                        borderBottom: !0
                    }, r, a))
                }, t.prototype.getRecentCheerInfo = function(e, t) {
                    var n = !1,
                        a = void 0;
                    this.state.isExpanded || !e.data.error && e.data.user && e.data.user.cheer && e.data.user.cheer.recent && e.data.user.cheer.settings.isRecentEnabled && t.recentCheerExpireTime && 0 !== Math.max(0, t.recentCheerExpireTime - Date.now()) && (n = !0, a = Object(Y.a)(e.data.user.cheer.recent, this.props.bitsConfig, this.props.blockLinks) || void 0);
                    return {
                        shouldRender: n,
                        recentCheer: a
                    }
                }, t.prototype.renderRecentCheer = function() {
                    if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.recent)) return null;
                    var e = this.getRecentCheerInfo(this.props, this.state);
                    return e.shouldRender ? i.createElement(q, {
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelID: this.props.channelID,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        recentCheer: e.recentCheer,
                        recentCheerMsRemaining: this.props.data.user.cheer.settings.recentTimeoutMs
                    }) : null
                }, t.prototype.calcRecentCheerExpiry = function(e) {
                    if (e.data.user && e.data.user.cheer && e.data.user.cheer.recentTimeoutMs && e.data.user.cheer.recent) {
                        var t = Object(Y.a)(e.data.user.cheer.recent, this.props.bitsConfig, this.props.blockLinks),
                            n = t ? t.id : null;
                        this.state.recentCheerID !== n && this.setState({
                            recentCheerID: n,
                            recentCheerExpireTime: n ? Date.now() + e.data.user.cheer.recentTimeoutMs : null
                        })
                    }
                }, t
            }(i.Component)),
            Z = Object(s.d)(Object(l.a)($, {
                name: "data",
                options: function(e) {
                    return {
                        variables: {
                            channelID: e.channelID
                        }
                    }
                }
            }), Object(d.a)(function(e) {
                return {
                    query: E,
                    variables: {
                        channelID: e.channelID
                    },
                    topic: Object(p.b)(e.channelID),
                    type: c.PubsubMessageType.BitsPinEvent,
                    mutator: function(t, n) {
                        if (n && n.user && n.user.cheer) {
                            var a = JSON.parse(t.msg);
                            if (a.channel_id === e.channelID) return _.k.debug("Received pubsub update", {
                                hasRecentCheer: !!a.recent && a.recent.has_recent_event,
                                hasNewRecentCheer: !n.user.cheer.recent || null !== a.recent.tags && n.user.cheer.recent.id !== a.recent.tags.msg_id
                            }), a.recent && (a.recent.has_recent_event || "dismiss" === a.action) ? (!n.user.cheer.recent || null !== a.recent.tags && n.user.cheer.recent.id !== a.recent.tags.msg_id || "dismiss" === a.action) && (n.user.cheer.recent = Object(Y.c)(a.recent), n.user.cheer.recentTimeoutMs = n.user.cheer.settings.recentTimeoutMs) : n.user.cheer.recent = null, n
                        }
                    }
                }
            }), Object(d.a)(function(e) {
                return Object(Q.a)($, e.channelID, e.data.user && e.data.user.cheer && e.data.user.cheer.leaderboard, e.userID)
            }))(J),
            X = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null,
                        pcheersV2Enabled: !1
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return i.createElement(Z, {
                        channelID: this.props.channelID,
                        userID: this.props.userID,
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin
                    })
                }, t
            }(i.Component),
            ee = n("RH2O"),
            te = n("Aj/L");
        var ne, ae = Object(ee.b)(function(e) {
                var t = Object(te.c)(e);
                return {
                    isStaff: t && t.roles && t.roles.isStaff
                }
            })(X),
            ie = n("D6l4"),
            re = n("3zLD"),
            se = n("6BvN"),
            oe = n("+xm8"),
            le = n("HM6l"),
            de = n("f2i/"),
            ce = n("ZVME"),
            ue = n("c3pS"),
            pe = (n("Lzcc"), function() {
                return i.createElement(v._32, {
                    className: "bits-card-error",
                    display: v.R.Flex,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    justifyContent: v._7.Center,
                    textAlign: v._42.Center,
                    padding: 1,
                    border: !0,
                    background: v.n.Base,
                    elevation: 3,
                    fullWidth: !0,
                    position: v._15.Absolute
                }, i.createElement(v.Q, {
                    italic: !0
                }, Object(o.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
            }),
            me = n("iMOk"),
            he = (n("56e8"), function(e) {
                var t = void 0 !== e.progress,
                    n = i.createElement("img", {
                        className: "cheer-badge__image",
                        src: e.badge.image1x,
                        alt: e.badge.title,
                        srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                    });
                if (!t) return n;
                var a = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                return i.createElement("div", {
                    className: "cheer-badge__progress-container"
                }, n, i.createElement("div", {
                    className: "cheer-badge__progress-overlay",
                    style: {
                        width: a + "px"
                    },
                    "data-test-selector": "cheer-progress"
                }))
            }),
            ge = n("3iBR"),
            fe = function(e) {
                var t;
                e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = i.createElement(v._8, {
                    padding: {
                        bottom: .5
                    }
                }, e.selfBitsBadge.current && i.createElement(v._8, {
                    display: v.R.Inline,
                    margin: {
                        right: .5
                    }
                }, i.createElement(he, {
                    badge: e.selfBitsBadge.current
                })), e.selfBitsBadge.next && i.createElement(he, {
                    badge: e.selfBitsBadge.next,
                    progress: e.selfBitsBadge.progress
                }), e.selfBitsBadge.nextBits && Object(o.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                    bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                }, "Bits--BalanceFooter")));
                var n = Object(o.d)("{bitsGem} Log in to see your Bits balance", {
                    bitsGem: i.createElement(me.a, {
                        count: 100,
                        withImage: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: u.a.Dark
                    })
                }, "Bits--BalanceFooter");
                return void 0 !== e.balance && null !== e.balance && (n = Object(o.d)("You have {currentBits}", {
                    currentBits: i.createElement(me.a, {
                        count: e.balance,
                        withImage: !0,
                        withText: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: u.a.Dark
                    })
                }, "Bits--BalanceFooter")), i.createElement(v._8, {
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-balance-footer"
                }, t, i.createElement(v._8, {
                    display: v.R.Flex,
                    flexGrow: 1,
                    alignItems: v.c.Center,
                    justifyContent: v._7.Between
                }, i.createElement("div", null, n), i.createElement(v.v, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > ge.i,
                    onClick: e.onClickGetBits,
                    "data-test-selector": "get-bits-button",
                    "data-a-target": "get-bits-button"
                }, Object(o.d)("Get Bits", "Bits--BalanceFooter"))))
            },
            be = function(e) {
                return e.event, i.createElement(fe, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance,
                    selfBitsBadge: e.selfBitsBadge
                })
            },
            ve = function(e) {
                return i.createElement(v._8, {
                    flexGrow: 1
                }, i.createElement(v._8, {
                    className: "undo-prompt__footer",
                    padding: 1,
                    display: v.R.Flex,
                    justifyContent: v._7.Between
                }, i.createElement(v.v, {
                    onClick: e.onCancel || void 0,
                    type: v.B.Hollow,
                    overlay: !0,
                    "data-test-selector": "cancel-button"
                }, Object(o.d)("Cancel", "Bits--UndoPrompt")), i.createElement(v.v, {
                    onClick: e.onConfirm || void 0,
                    "data-test-selector": "confirm-button"
                }, Object(o.d)("Send", "Bits--UndoPrompt"))), i.createElement(v._18, {
                    size: v._19.ExtraSmall,
                    countdown: ge.m.UNDO_PROMPT_DURATION / 1e3
                }))
            },
            ke = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return this.props.isSending ? this.props.totalBits >= ge.l ? i.createElement(ve, {
                        onCancel: this.props.onCancelSend,
                        onConfirm: this.props.onConfirmSend
                    }) : null : this.props.event ? i.createElement(be, {
                        event: this.props.event,
                        selfBitsBadge: this.props.userSelfBitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.props.handleClickBuy,
                        balance: this.props.bitsBalance
                    }) : i.createElement(fe, {
                        selfBitsBadge: this.props.userSelfBitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.props.handleClickBuy,
                        balance: this.props.bitsBalance
                    })
                }, t
            }(i.PureComponent),
            ye = (n("Uvj5"), function() {
                var e = {
                    border: !0,
                    background: v.n.Base,
                    elevation: 3,
                    fullWidth: !0
                };
                return i.createElement(v._32, a.__assign({
                    className: "bits-card-loading",
                    display: v.R.Flex,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    justifyContent: v._7.Center,
                    position: v._15.Absolute
                }, e), i.createElement(v._10, {
                    delay: 0
                }), i.createElement(v._8, {
                    padding: {
                        top: 2
                    }
                }, i.createElement(v.Q, {
                    italic: !0
                }, Object(o.d)("Fetching Bits", "BitsCard"))))
            }),
            Ce = n("QRuM"),
            _e = n("ySfT"),
            Ee = function(e) {
                return i.createElement(v._8, {
                    display: v.R.Flex,
                    flexGrow: 1,
                    flexDirection: v.T.Column,
                    justifyContent: v._7.Center,
                    alignItems: v.c.Center,
                    padding: 1
                }, i.createElement(v._8, {
                    padding: {
                        top: 2,
                        bottom: 2
                    }
                }, i.createElement(v.Q, {
                    type: v._46.H5,
                    color: v.K.Link,
                    bold: !0
                }, Object(o.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), i.createElement(v.Q, null, Object(o.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), i.createElement(v._8, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, i.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(o.d)("How do I cheer?", "Bits--CheermoteIntro"))))
            },
            Se = function(e) {
                var t = e.headline || e.prefix + (e.tier || "");
                if (e.tournament && e.tier <= 0) {
                    var n = e.tournament.teams.find(function(t) {
                        return t.id === e.prefix
                    });
                    n && (t = n.name + " - " + e.prefix)
                }
                return i.createElement(v._8, {
                    display: v.R.Flex,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    padding: 1
                }, i.createElement(v.Q, {
                    type: v._46.H4,
                    bold: !0
                }, t), i.createElement(D.a, {
                    prefix: e.prefix,
                    amount: e.tier,
                    bitsConfig: e.bitsConfig,
                    showImage: !0,
                    showAmount: e.tier > 0
                }))
            },
            we = (n("DVR9"), function(e) {
                var t = null;
                e.minToCheer > 1 && (t = i.createElement(v.Q, {
                    "data-test-selector": "min-to-cheer-selector",
                    color: v.K.Alt2,
                    italic: !0
                }, Object(o.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                    minToCheer: e.minToCheer
                }, "Bits--CheermoteTierIntro")));
                var n = null;
                return e.minToPin > 0 && (n = i.createElement(v.Q, {
                    "data-test-selector": "min-to-pin-selector",
                    color: v.K.Alt2,
                    italic: !0
                }, Object(o.d)("Pinning your Cheer is a minimum of {minToPin} Bits", {
                    minToPin: e.minToPin
                }, "Bits--CheermoteTierIntro"))), i.createElement(v._8, {
                    display: v.R.Flex,
                    flexGrow: 1,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    justifyContent: v._7.Center,
                    padding: 1,
                    className: "cheermote-tier-intro"
                }, i.createElement(v._8, {
                    padding: {
                        x: 4
                    },
                    margin: {
                        bottom: 1
                    }
                }, i.createElement(v.Q, {
                    color: v.K.Alt2
                }, Object(o.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t, n)
            }),
            Ne = n("1bR2"),
            Te = n.n(Ne),
            De = n("vDGQ"),
            Oe = (n("CGWe"), function(e) {
                return Object(De.d)({
                    action: De.a.View,
                    type: De.c.BitsIntro,
                    channelId: e.channelID
                }), i.createElement(v._8, {
                    "data-test-selector": "crate-intro"
                }, i.createElement(v._8, {
                    padding: {
                        x: 1,
                        top: 2,
                        bottom: 1
                    }
                }, i.createElement(v.Q, {
                    fontSize: v.V.Size4,
                    bold: !0
                }, Object(o.d)("Share the Holiday Cheer!", "Crates"))), i.createElement(v._32, {
                    className: "crates-holiday-background",
                    background: v.n.Alt,
                    padding: 1,
                    margin: {
                        y: 1
                    },
                    display: v.R.Flex,
                    justifyContent: v._7.Around,
                    alignItems: v.c.End,
                    borderTop: !0,
                    borderBottom: !0
                }, i.createElement(v.e, {
                    type: v.j.BounceIn,
                    delay: v.f.Long,
                    enabled: !0
                }, i.createElement(v._49, {
                    label: "XmasRaid"
                }, i.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633161/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/3.0 3.0x",
                    alt: "XmasRaid"
                }))), i.createElement(v.e, {
                    type: v.j.BounceIn,
                    delay: v.f.Medium,
                    enabled: !0
                }, i.createElement(v._49, {
                    label: "MerryPurple"
                }, i.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633177/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/3.0 3.0x",
                    alt: "MerryPurple"
                }))), i.createElement(v.e, {
                    type: v.j.BounceIn,
                    delay: v.f.Short,
                    enabled: !0
                }, i.createElement(v._49, {
                    label: "GiftRage"
                }, i.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/634141/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/3.0 3.0x",
                    alt: "GiftRage"
                }))), i.createElement("img", {
                    src: Te.a,
                    height: "50",
                    width: "50"
                }), i.createElement(v.e, {
                    type: v.j.BounceIn,
                    delay: v.f.Short,
                    enabled: !0
                }, i.createElement(v._49, {
                    label: "RudolphWhoa"
                }, i.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633166/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/3.0 3.0x",
                    alt: "RudolphWhoa"
                }))), i.createElement(v.e, {
                    type: v.j.BounceIn,
                    delay: v.f.Medium,
                    enabled: !0
                }, i.createElement(v._49, {
                    label: "FeelsGingerMan"
                }, i.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633171/1.0 1x,https://static-cdn.jtvnw.net/emoticons/v1/633171/2.0 2x,https://static-cdn.jtvnw.net/emoticons/v1/633171/3.0 4x",
                    alt: "FeelsGingerMan"
                }))), i.createElement(v.e, {
                    type: v.j.BounceIn,
                    delay: v.f.Long,
                    enabled: !0
                }, i.createElement(v._49, {
                    label: "OrnaMental"
                }, i.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633170/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/3.0 3.0x",
                    alt: "OrnaMental"
                })))), i.createElement(v._8, {
                    padding: 1
                }, i.createElement(v.Q, {
                    type: v._46.P
                }, Object(o.d)("Cheer any amount to support your streamer, and get a holiday gift! Cheer {minBits, number} Bits or more, and others in chat can get a gift too!", {
                    minBits: 250
                }, "Crates")), i.createElement(v.Q, {
                    type: v._46.Strong
                }, i.createElement("a", {
                    href: "http://link.twitch.tv/holiday-emotes",
                    target: "_blank",
                    rel: "noreferrer noopener"
                }, Object(o.d)("Details", "Crates")))))
            }),
            Ie = (n("kjfG"), function() {
                return i.createElement(v._8, {
                    className: "owl-2018-introduction"
                }, i.createElement(v._8, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, i.createElement(v.Q, {
                    fontSize: v.V.Size5,
                    bold: !0
                }, Object(o.d)("Cheer with Bits and unlock loot!", "OWL2018Introduction"))), i.createElement(v._8, {
                    className: "owl-2018-introduction__banner-background",
                    padding: {
                        top: 1
                    }
                }, i.createElement("img", {
                    className: "owl-2018-introduction__banner-image",
                    src: ge.c + "/owl-2017/overwatch-wide.png"
                })), i.createElement(v._8, {
                    padding: {
                        x: 2,
                        top: 1,
                        bottom: .5
                    }
                }, i.createElement(v.Q, null, Object(o.d)("Cheer 150 Bits or more to hype your team and get a team emote! Cheer along with your fellow fans to unlock in-game skins based on everyone’s Cheers!", "OWL2018Introduction"))), i.createElement(v._8, {
                    padding: {
                        bottom: 1
                    }
                }, i.createElement(v.O, {
                    to: "http://link.twitch.tv/owl-drops-onsite-bitscard-blogus",
                    targetBlank: !0,
                    hoverUnderlineNone: !1
                }, Object(o.d)("Details", "OWL2018Introduction"))))
            });
        ! function(e) {
            e.CratesChristmas = "CratesChristmas", e.OWL2018 = "owl2018"
        }(ne || (ne = {}));
        var Me = function(e) {
                switch (e.event) {
                    case ne.OWL2018:
                        return i.createElement(Ie, null);
                    case ne.CratesChristmas:
                        return i.createElement(Oe, {
                            onClickHelp: e.onClickHelp,
                            channelID: e.channelID
                        });
                    default:
                        return i.createElement(Ee, {
                            onClickHelp: e.onClickHelp
                        })
                }
            },
            Re = n("N221"),
            Le = n("cv4W"),
            xe = n.n(Le),
            je = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = "";
                    if (this.props.amount < 250) {
                        var t = 250 - this.props.amount;
                        e = Object(o.d)("{bitsToGo, plural, one {Cheer # more Bit to share gifts with chat!} other {Cheer # more Bits to share gifts with chat!}}", {
                            bitsToGo: t
                        }, "Crates")
                    } else e = Object(o.d)("Your Cheer will share gifts with chat!", "Crates");
                    return i.createElement(v._32, {
                        className: "crate-christmas-2017-reminder",
                        background: v.n.Alt,
                        borderTop: !0,
                        padding: 1
                    }, i.createElement(v._8, {
                        display: v.R.Inline,
                        margin: {
                            right: .5
                        }
                    }, i.createElement("img", {
                        src: xe.a,
                        height: "22",
                        width: "22"
                    })), i.createElement(v.Q, {
                        type: v._46.Strong
                    }, e))
                }, t
            }(i.Component),
            Ue = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    switch (this.props.event) {
                        case ne.CratesChristmas:
                            return i.createElement(je, {
                                amount: this.props.amount
                            });
                        default:
                            return null
                    }
                }, t
            }(i.Component),
            Be = (n("WT1Y"), function(e) {
                var t = e.prefixes.map(function(t, n) {
                    if (t.alt && t.cheerAmount) return i.createElement(v._2, {
                        className: "pending-cheer-list__list-item",
                        key: n,
                        padding: {
                            x: 1
                        }
                    }, i.createElement("li", null, i.createElement(D.a, {
                        prefix: t.alt,
                        amount: t.cheerAmount > ge.k ? ge.k : t.cheerAmount,
                        bitsConfig: e.bitsConfig,
                        size: D.b.Small,
                        showAmount: !0,
                        showImage: !0
                    })))
                });
                return i.createElement(v._8, {
                    display: v.R.Flex,
                    flexDirection: v.T.Row,
                    alignItems: v.c.End,
                    justifyContent: v._7.Center,
                    flexWrap: v.U.Wrap,
                    margin: {
                        top: 1
                    },
                    className: "pending-cheer-list"
                }, t)
            }),
            Ae = (n("KWLn"), function(e) {
                var t;
                if (e.prefixes && 1 === e.prefixes.length) {
                    var n = e.prefixes[0].alt;
                    n && (t = i.createElement(v._8, {
                        padding: {
                            top: 2
                        }
                    }, i.createElement(D.a, {
                        prefix: n,
                        amount: e.amount > ge.k ? ge.k : e.amount,
                        bitsConfig: e.bitsConfig,
                        showImage: !0,
                        showAmount: !0
                    })))
                } else if (e.prefixes) t = i.createElement(v._8, {
                    margin: {
                        top: 1
                    }
                }, i.createElement(Re.b, {
                    className: "pending-cheer__scroll-container"
                }, i.createElement(Be, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var a = Object(o.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                        totalBits: i.createElement("strong", null, e.amount),
                        channelName: e.channelDisplayName
                    }, "Bits--PendingCheer");
                    t = i.createElement(v._8, {
                        "data-test-selector": "default-pending-cheer-message-selector",
                        padding: {
                            top: 2,
                            x: 5
                        }
                    }, i.createElement(v.Q, {
                        color: v.K.Alt2,
                        "data-a-target": "total-bits-message"
                    }, a))
                }
                var r = null;
                e.purchaseMore && e.purchaseMore > 0 && (r = i.createElement(v.Q, {
                    "data-test-selector": "purchase-more-selector",
                    "data-a-target": "need-more-bits-error"
                }, Object(o.d)("Please purchase {neededBits} more Bits to Cheer", {
                    neededBits: e.purchaseMore
                }, "Bits--PendingCheer")));
                var s = null;
                if (e.largestCheermote > ge.k) {
                    var l = Object(o.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                        maximumCheerSize: ge.k
                    }, "Bits--PendingCheer");
                    r = i.createElement(v.Q, {
                        "data-test-selector": "largest-cheermote-selector",
                        "data-a-target": "max-cheer-bits-error"
                    }, l)
                }
                if (e.amount < e.minToCheer) {
                    var d = Object(o.d)("Add {moreBitsAmount} Bits to reach this channel's minimum Cheer.", {
                        moreBitsAmount: e.minToCheer - e.amount
                    }, "Bits--PendingCheer");
                    r = i.createElement(v.Q, {
                        "data-test-selector": "minimum-cheer-selector",
                        "data-a-target": "min-cheer-bits-error"
                    }, d)
                }
                if (e.smallestCheermote < e.minPerEmote) {
                    var c = Object(o.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                        minPerEmote: e.minPerEmote
                    }, "Bits--PendingCheer");
                    s = i.createElement(v.Q, {
                        "data-test-selector": "minimum-cheermote-selector",
                        color: v.K.Alt2,
                        italic: !0,
                        "data-a-target": "min-emote-bits-error"
                    }, c)
                }
                var u = i.createElement(D.a, {
                    amount: e.amount,
                    prefix: ge.g,
                    bitsConfig: e.bitsConfig,
                    display: v.R.Inline,
                    showImage: !1,
                    showAmount: !0,
                    size: D.b.Medium
                });
                return i.createElement(v._8, null, i.createElement(v._8, {
                    display: v.R.Flex,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    padding: 1,
                    className: "pending-cheer"
                }, i.createElement(v.Q, {
                    fontSize: v.V.Size4,
                    bold: !0
                }, Object(o.d)("Cheering {totalBits} Bits", {
                    totalBits: u
                }, "Bits--PendingCheer")), !s && t, !s && r && i.createElement(v._8, {
                    padding: {
                        top: 1
                    }
                }, r), s && i.createElement(v._8, {
                    padding: {
                        top: 3,
                        x: 3
                    }
                }, s)), !s && !r && i.createElement(Ue, {
                    event: e.event,
                    amount: e.amount
                }))
            }),
            Fe = n("qe65"),
            Pe = (n("f1ZS"), {
                themed: !0,
                dark: {
                    "1x": ge.b + "/dark/animated/promo/intro.gif"
                },
                light: {
                    "1x": ge.b + "/light/animated/promo/intro.gif"
                }
            }),
            Ve = function() {
                return i.createElement(v._8, {
                    display: v.R.Flex,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    justifyContent: v._7.Center,
                    flexGrow: 1,
                    className: "bits-sending"
                }, i.createElement(v._8, {
                    padding: {
                        bottom: 1
                    }
                }, i.createElement(Fe.a, {
                    sources: Pe
                })), i.createElement(v.Q, {
                    italic: !0
                }, Object(o.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
            },
            He = (n("ZoRy"), function(e) {
                var t = Object(o.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                        totalBits: e.totalBits,
                        channelName: e.channelDisplayName
                    }, "Bits--UndoPrompt"),
                    n = null;
                if (e.prefixes && e.prefixes.length > 1) n = i.createElement(Re.b, {
                    className: "bits-undo-prompt__scroll-container"
                }, i.createElement(v._8, {
                    margin: {
                        top: 1
                    }
                }, i.createElement(Be, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var a = e.prefixes[0].alt;
                    a && (n = i.createElement(v._8, {
                        padding: {
                            bottom: 1
                        }
                    }, i.createElement(D.a, {
                        prefix: a,
                        amount: e.totalBits,
                        bitsConfig: e.bitsConfig,
                        showAmount: !0,
                        showImage: !0
                    })))
                }
                return i.createElement(v._8, {
                    display: v.R.Flex,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    justifyContent: v._7.Center,
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-undo-prompt"
                }, n, i.createElement(v.Q, null, t))
            }),
            ze = function(e) {
                var t = o.b.get("crate_snowman_launch", Ce.a.Off),
                    n = t === Ce.a.On || t === Ce.a.StaffOnly && e.isStaff ? ne.CratesChristmas : null,
                    a = e.event || n;
                if (e.isSending) return e.totalBits < ge.l ? i.createElement(Ve, null) : i.createElement(He, {
                    bitsConfig: e.bitsConfig,
                    channelDisplayName: e.displayName,
                    prefixes: e.currentCheers,
                    totalBits: e.totalBits
                });
                if (e.hoveredCheermote) return i.createElement(Se, {
                    event: e.event,
                    tournament: e.tournament,
                    bitsConfig: e.bitsConfig,
                    prefix: e.hoveredCheermote,
                    tier: e.hoveredTier
                });
                if (e.totalBits) return i.createElement(Ae, {
                    bitsConfig: e.bitsConfig,
                    prefixes: e.currentCheers,
                    amount: e.totalBits,
                    channelDisplayName: e.displayName,
                    purchaseMore: e.bitsBalance && e.totalBits - e.bitsBalance,
                    largestCheermote: e.largestCheermote,
                    smallestCheermote: e.smallestCheermote,
                    minPerEmote: e.emoteMinimumBits,
                    minToCheer: e.cheerMinimumBits,
                    event: a
                });
                if (e.helpRequested) return i.createElement(_e.a, null);
                if (e.chosenCheermote) {
                    var r = e.recentMinimumBits,
                        s = e.cheerMinimumBits;
                    return i.createElement(we, {
                        minToPin: r,
                        minToCheer: s
                    })
                }
                return a ? i.createElement(Me, {
                    event: a,
                    onClickHelp: e.showHelp,
                    channelID: e.channelID
                }) : i.createElement(Ee, {
                    onClickHelp: e.showHelp
                })
            },
            Ge = n("0nzt"),
            We = (n("nQZu"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props.bitsConfig.orderedActions.filter(function(e) {
                            return e.type !== ge.e
                        }).map(function(e) {
                            var t = e.indexedTiers.get(ge.h);
                            return t ? {
                                imgSrc: t.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: t.indexedImages.DARK.static.get(2),
                                key: e.prefix
                            } : null
                        }).map(function(t, n) {
                            return t && t.key ? i.createElement(v._2, {
                                key: t.key,
                                margin: {
                                    bottom: 1
                                }
                            }, i.createElement("li", {
                                className: "cheermote-prefix-selector__cheermote"
                            }, i.createElement("button", {
                                className: "cheermote-prefix-selector__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + t.key.replace(":", "")
                            }, i.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })))) : i.createElement("li", {
                                key: "null-cheermote-" + n
                            }, i.createElement("button", {
                                className: "cheermote-prefix-selector__item-button",
                                disabled: !0
                            }, i.createElement("div", {
                                className: "cheermote-prefix-selector__placeholder"
                            })))
                        }),
                        n = i.createElement(v._2, {
                            className: "cheermote-prefix-selector__cheermotes",
                            display: v.R.Flex,
                            flexWrap: v.U.Wrap,
                            flexDirection: v.T.Row,
                            justifyContent: v._7.Start,
                            alignItems: v.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, i.createElement("ul", null, t));
                    return i.createElement(v._8, {
                        flexGrow: 1,
                        overflow: v._11.Hidden,
                        className: "cheermote-prefix-selector"
                    }, i.createElement(w.b, null, n))
                }, t
            }(i.PureComponent));
        var qe = Object(ee.b)(function(e) {
                return {
                    darkModeEnabled: Object(Ge.a)(e) === u.a.Dark
                }
            })(We),
            Qe = (n("9Xbf"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props.bitsConfig.indexedActions[this.props.chosenCheermote.toLowerCase()],
                        n = t.orderedTiers.filter(function(e) {
                            return e.bits <= ge.k
                        }).map(function(e) {
                            return {
                                imgSrc: e.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: e.indexedImages.DARK.static.get(2),
                                key: t.prefix + ":" + e.bits
                            }
                        }).reverse().map(function(t, n) {
                            return t && t.key ? i.createElement("li", {
                                key: t.key,
                                className: "cheermote-tier-selector__cheermote"
                            }, i.createElement("button", {
                                className: "cheermote-tier-selector__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + t.key.replace(":", "")
                            }, i.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })), i.createElement(D.a, {
                                bitsConfig: e.props.bitsConfig,
                                prefix: "",
                                amount: +t.key.split(":")[1],
                                showImage: !1,
                                showAmount: !0,
                                size: D.b.Small
                            })) : i.createElement("li", {
                                key: "null-cheermote-" + n
                            }, i.createElement("button", {
                                className: "cheermote-tier-selector__item-button",
                                disabled: !0
                            }, i.createElement("div", {
                                className: "cheermote-tier-selector__placeholder"
                            })))
                        }),
                        a = i.createElement(v._8, {
                            padding: {
                                right: 2
                            },
                            fullWidth: !0,
                            className: "cheermote-tier-selector__back-button"
                        }, i.createElement(v.v, {
                            "data-a-target": "bits-card-back-button",
                            type: v.B.Text,
                            fullWidth: !0,
                            onClick: this.props.onClose
                        }, Object(o.d)("Show All Cheermotes", "CheermoteCarousel"))),
                        r = i.createElement(v._2, {
                            className: "cheermote-tier-selector__cheermotes",
                            display: v.R.Flex,
                            flexWrap: v.U.Wrap,
                            flexDirection: v.T.Row,
                            justifyContent: v._7.Between,
                            alignItems: v.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, i.createElement("ul", null, n, a));
                    return i.createElement(v._8, {
                        flexGrow: 1,
                        overflow: v._11.Hidden,
                        className: "cheermote-tier-selector"
                    }, r)
                }, t
            }(i.PureComponent));
        var Ke = Object(ee.b)(function(e) {
                return {
                    darkModeEnabled: Object(Ge.a)(e) === u.a.Dark
                }
            })(Qe),
            Ye = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return this.props.helpRequested && !this.props.currentCheers.length ? null : this.props.chosenCheermote ? i.createElement(Ke, {
                        bitsConfig: this.props.bitsConfig,
                        chosenCheermote: this.props.chosenCheermote,
                        onHover: this.props.handleTierHover,
                        onHoverLeave: this.props.handleUnhover,
                        onClick: this.props.handleTierClick,
                        onClose: this.props.clearChosenCheermote
                    }) : i.createElement(qe, {
                        bitsConfig: this.props.bitsConfig,
                        onHover: this.props.handleCheermoteHover,
                        onHoverLeave: this.props.handleUnhover,
                        onClick: this.props.handleCheermoteClick
                    })
                }, t
            }(i.PureComponent),
            $e = (n("d/6e"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = {
                        border: !0,
                        background: v.n.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    return i.createElement(v._32, a.__assign({
                        className: "bits-self-cheer-warning",
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._7.Center,
                        textAlign: v._42.Center,
                        padding: {
                            top: 2,
                            x: 1,
                            bottom: 1
                        },
                        position: v._15.Absolute
                    }, e), i.createElement(v._8, {
                        padding: {
                            top: .5,
                            right: .5
                        },
                        attachTop: !0,
                        attachRight: !0,
                        position: v._15.Absolute
                    }, i.createElement(v.w, {
                        ariaLabel: Object(o.d)("close bits card", "BitsCardSelfCheerWarning"),
                        "data-a-target": "bits-card-close-button",
                        onClick: this.props.onUserClose,
                        icon: v._23.Close,
                        type: v.y.Secondary,
                        size: v.x.Small
                    })), i.createElement(v.Q, {
                        color: v.K.Error,
                        italic: !0
                    }, Object(o.d)("You cannot Cheer in your own channel.", "BitsCard")))
                }, t
            }(i.PureComponent)),
            Je = n("WVx7"),
            Ze = n("ZJYd"),
            Xe = n("iWdz"),
            et = (n("2B/Z"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        chosenCheermote: null,
                        hoveredCheermote: null,
                        hoveredTier: 0,
                        helpRequested: !1,
                        totalBits: 0,
                        largestCheermote: 0,
                        smallestCheermote: 0,
                        buyingBits: !1
                    }, t.unhoverTimeout = 0, t.lastRefetchTime = 0, t.handleTierHover = function(e) {
                        clearTimeout(t.unhoverTimeout);
                        var n = e.split(":");
                        n.length < 2 || (t.setState({
                            hoveredTier: +n[1],
                            hoveredCheermote: n[0]
                        }), t.props.trackBitsCardInteraction(K.a.PreviewEmote, {
                            emoteType: n[0],
                            emoteLevel: +n[1]
                        }))
                    }, t.handleUnhover = function() {
                        t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                    }, t.clearHovered = function() {
                        t.setState({
                            hoveredTier: 0,
                            hoveredCheermote: null
                        })
                    }, t.handleTierClick = function(e) {
                        t.props.onClickCheermote(e.split(":").join(""))
                    }, t.handleCheermoteHover = function(e) {
                        clearTimeout(t.unhoverTimeout), t.setState({
                            hoveredCheermote: e,
                            hoveredTier: 0
                        }), t.props.trackBitsCardInteraction(K.a.PreviewEmote, {
                            emoteType: e,
                            emoteLevel: 100
                        })
                    }, t.handleCheermoteClick = function(e) {
                        t.setState({
                            chosenCheermote: e,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.clearChosenCheermote = function() {
                        t.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.showHelp = function(e) {
                        e.preventDefault(), t.setState({
                            helpRequested: !0
                        })
                    }, t.closeHelp = function() {
                        return t.setState({
                            helpRequested: !1
                        })
                    }, t.handleClickBuy = function() {
                        t.setState({
                            buyingBits: !0
                        }), t.props.trackBitsCardInteraction(K.a.BuyMain)
                    }, t.handleCloseBuy = function() {
                        return t.setState({
                            buyingBits: !1
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.visible || !!this.props.currentCheers.length,
                        n = e.visible || !!e.currentCheers.length;
                    if (!t && n) {
                        var a = Date.now();
                        a - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = a, e.data.refetch())
                    }
                    if (t && !n && this.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            buyingBits: !1
                        }), this.props.currentCheers !== e.currentCheers) {
                        var i = Object(Ze.a)(e.currentCheers),
                            r = i.total,
                            s = i.largestCheermote,
                            o = i.smallestCheermote;
                        this.setState({
                            totalBits: r,
                            largestCheermote: s,
                            smallestCheermote: o
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.props.visible && !this.props.currentCheers.length) return null;
                    var e, t = {
                        border: !0,
                        background: v.n.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    if (this.props.currentCheers.length || (e = i.createElement(v._8, {
                            position: v._15.Absolute,
                            attachTop: !0,
                            attachRight: !0,
                            padding: {
                                top: .5,
                                right: .5
                            }
                        }, i.createElement(v.w, {
                            ariaLabel: Object(o.d)("close bits card", "BitsCard"),
                            "data-a-target": "bits-card-close-button",
                            onClick: this.props.onUserClose,
                            icon: v._23.Close,
                            type: v.y.Secondary,
                            size: v.x.Small
                        }))), !this.props.data || this.props.data.loading) return i.createElement(ye, null);
                    if (this.props.data.error || !this.props.bitsConfig) return i.createElement(pe, null);
                    if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return i.createElement($e, {
                        onUserClose: this.props.onUserClose
                    });
                    if (this.state.buyingBits) return i.createElement(Je.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.props.onUserClose,
                        onClose: this.handleCloseBuy,
                        trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                        location: K.b.ChatTooltip
                    });
                    var n, r = this.state.helpRequested && !this.props.currentCheers.length,
                        s = null;
                    return this.props.data.user.cheer.settings.event && (s = this.props.data.user.cheer.settings.event.toLowerCase().replace("_", "-")), r && (n = i.createElement(v._8, {
                        position: v._15.Absolute,
                        padding: {
                            left: .5,
                            top: .5
                        },
                        attachLeft: !0,
                        attachTop: !0
                    }, i.createElement(v.v, {
                        onClick: this.closeHelp,
                        "data-a-target": "bits-card-back-button",
                        icon: v._23.ChatSettingsBack,
                        type: v.B.Text,
                        size: v.z.Small
                    }, Object(o.d)("Back", "BitsCard")))), i.createElement(v._8, {
                        className: "t-bits-card",
                        position: v._15.Absolute,
                        fullWidth: !0
                    }, i.createElement(v._32, a.__assign({
                        position: v._15.Relative,
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        "data-a-target": "bits-card"
                    }, t), !this.props.isSending && n, e, i.createElement(v._32, {
                        className: "t-bits-card__contents",
                        display: v.R.Flex,
                        flexGrow: 0,
                        flexDirection: v.T.Column,
                        alignContent: v.b.Stretch,
                        textAlign: v._42.Center,
                        borderBottom: !this.props.isSending
                    }, i.createElement(ze, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        displayName: this.props.data.user.displayName,
                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                        event: s,
                        helpRequested: this.state.helpRequested,
                        hoveredCheermote: this.state.hoveredCheermote,
                        hoveredTier: this.state.hoveredTier,
                        isSending: this.props.isSending,
                        largestCheermote: this.state.largestCheermote,
                        recentMinimumBits: this.props.data.user.cheer.settings.recentMinimumBits,
                        smallestCheermote: this.state.smallestCheermote,
                        totalBits: this.state.totalBits,
                        tournament: this.props.data.user.tournament,
                        channelID: this.props.channelID,
                        showHelp: this.showHelp,
                        isStaff: this.props.isStaff
                    })), !this.props.isSending && i.createElement(Ye, {
                        bitsConfig: this.props.bitsConfig,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        eventString: s,
                        helpRequested: this.state.helpRequested,
                        handleCheermoteClick: this.handleCheermoteClick,
                        handleCheermoteHover: this.handleCheermoteHover,
                        handleTierClick: this.handleTierClick,
                        handleTierHover: this.handleTierHover,
                        handleUnhover: this.handleUnhover,
                        clearChosenCheermote: this.clearChosenCheermote
                    }), i.createElement(v._8, {
                        className: "t-bits-card__footer",
                        fullWidth: !0,
                        display: v.R.Flex
                    }, i.createElement(ke, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        event: s,
                        isSending: this.props.isSending,
                        totalBits: this.state.totalBits,
                        userSelfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        handleClickBuy: this.handleClickBuy,
                        onCancelSend: this.props.onCancelSend,
                        onConfirmSend: this.props.onConfirmSend
                    }))))
                }, t
            }(i.Component)),
            tt = Object(re.compose)(Object(l.a)(Xe, {
                name: "data",
                skip: function(e) {
                    return !e.channelID
                },
                options: function(e) {
                    return {
                        variables: {
                            name: e.channelID
                        },
                        fetchPolicy: "cache-and-network"
                    }
                }
            }))(et);
        var nt, at = Object(ee.b)(function(e) {
                return {
                    user: Object(te.c)(e)
                }
            })(tt),
            it = n("KSGD"),
            rt = n("2emZ"),
            st = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = rt.a.Hashtag, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith("#") && null !== t.props.hashTags.edges ? t.props.hashTags.edges.filter(function(t) {
                            return t.node.id.includes(e)
                        }).map(function(n) {
                            return {
                                current: e,
                                replacement: n.node.id,
                                element: t.genearateHashtagDisplay(n.node.id)
                            }
                        }) : null
                    }, t.genearateHashtagDisplay = function(e) {
                        return i.createElement(v._8, {
                            padding: {
                                right: .5
                            },
                            key: "hashtag:" + e
                        }, i.createElement(v.Q, null, e))
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: it.func
                }, t
            }(i.Component),
            ot = n("iydZ"),
            lt = n("Lx+S"),
            dt = n("vh75"),
            ct = n("SZoP"),
            ut = n("Bir6"),
            pt = 5,
            mt = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = rt.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var a = t ? e : e.substring(1),
                            i = new RegExp("^" + Object(ut.a)(a), "i");
                        return n.state.sortedChatMembers.filter(function(e) {
                            return i.test(e.login) || e.displayName && i.test(e.displayName)
                        }).slice(0, pt).map(function(a) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + (a.displayName || a.login),
                                element: n.renderMention(a)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return i.createElement("span", null, Object(ct.a)(e.login, e.displayName || null))
                    }, n.sortChatMembers = function(e) {
                        var t = [{
                                login: e.channelLogin,
                                displayName: e.channelDisplayName
                            }],
                            n = e.chatMembers;
                        return n.sort(function(e, t) {
                            return e.login < t.login ? -1 : e.login > t.login ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedChatMembers: n.sortChatMembers(t)
                    }, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.chatMembers === e.chatMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin || this.setState({
                        sortedChatMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: it.func
                }, t
            }(i.Component),
            ht = function() {
                return i.createElement(v.q, {
                    direction: v.r.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, i.createElement(v._8, {
                    padding: 1,
                    "data-test-selector": "manage-moderation-settings-tooltip"
                }, Object(o.d)("Mods can now update AutoMod levels as well as Blocked and Permitted Terms.", "ManageModerationSettingsChat")))
            },
            gt = function() {
                return i.createElement(v.q, {
                    direction: v.r.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, i.createElement(v._8, {
                    padding: 1,
                    "data-test-selector": "raids-settings-tooltip"
                }, Object(o.d)("If a raid is offensive, moderate in chat settings.", "RaidReportingChat")))
            },
            ft = n("QCOJ"),
            bt = n("O0Qc"),
            vt = n("l21v"),
            kt = n("hcyD"),
            yt = n("VB5+"),
            Ct = n("Umoc"),
            _t = n("YDbY"),
            Et = n("ieBa"),
            St = n("CSlQ"),
            wt = n("ACWz"),
            Nt = n("2I50"),
            Tt = /\S/,
            Dt = 3;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(nt || (nt = {}));
        var Ot = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.syncMembers = function() {
                    n.props.activeChatters.isDirty && n.setState({
                        chatMembers: n.props.activeChatters.getActiveChatters()
                    })
                }, n.setChatInputRef = function(e) {
                    return n.chatInputRef = e
                }, n.setAutocompleteInputRef = function(e) {
                    return n.autocompleteInputRef = e
                }, n.onChatSettingsToggle = function(e) {
                    n.handleRaidReportingToggle(e), n.handleModerationSettingsToggle(e), e || Object(Ct.b)({
                        channelLogin: n.props.channelLogin,
                        isHostMode: n.props.isHostMode
                    })
                }, n.handleModerationSettingsToggle = function(e) {
                    if (!e && Object(_t.a)()) {
                        var t = o.l.get("autoModToolTipSeen", 0) + 1;
                        n.setState({
                            showAutomodSettingsTooltip: !1
                        }), o.l.set("autoModToolTipSeen", t)
                    }
                }, n.handleRaidReportingToggle = function(e) {
                    n.props.raidReceived && (n.state.showRaidsSettingsTooltip && (n.setState({
                        showRaidsSettingsTooltip: !1
                    }), o.l.set("raidsModerationTooltipsSeenNumTimes", Dt)), e && n.setState({
                        showRaidsFollowerOnlyTooltip: !1
                    }))
                }, n.onKeyDown = function(e) {
                    var t = e.charCode || e.keyCode;
                    switch (n.props.onKeyDown && t !== se.a.Enter && n.props.onKeyDown(e), t) {
                        case se.a.Enter:
                            return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                        case se.a.Esc:
                            return void(n.state.showCard === nt.Bits && n.setState({
                                showCard: nt.None
                            }));
                        default:
                            return
                    }
                }, n.onMessageValueUpdate = function(e) {
                    n.setState({
                        value: e
                    })
                }, n.onInputFocus = function() {
                    n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                        hasInteractedOrPageload: !0
                    })
                }, n.onMouseEnterInput = function() {
                    n.state.hasInteractedOrPageload || n.setState({
                        hasInteractedOrPageload: !0
                    })
                }, n.onChatCommand = function(e) {
                    n.props.onChatCommand(e), n.trackChatEvent()
                }, n.confirmEmbedAction = function(e, t, a) {
                    var i = n,
                        r = i.hasConfirmedInEmbed;
                    if (i.hasSeenConfirmationPrompt) return r;
                    var s = window.confirm(n.confirmationMessage(e, t, a));
                    return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = s, n.setState({
                        hasSeenAndRejectedEmbedPrompt: !s
                    }), s
                }, n.confirmationMessage = function(e, t, n) {
                    return Object(o.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                        displayName: e,
                        message: t,
                        channelLogin: n
                    }, "ChatInput")
                }, n.onMessageSend = function() {
                    return a.__awaiter(n, void 0, void 0, function() {
                        var e, t, n, i, r = this;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return this.props.authToken ? this.props.channelID ? (e = Tt.test(this.state.value)) ? this.state.isSendingBits ? (o.j.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (o.j.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : (this.resetAndUpdateRenderSentChatMessageEvent(), this.props.data && this.props.data.currentUser ? 0 === (t = Object(Ze.a)(this.state.messageCheers)).total ? (this.sendRegularMessage(), [2]) : this.props.data.user ? this.props.data.user.cheer ? this.props.data.user.cheer.settings ? (n = Object(Ze.f)({
                                        messageBits: t,
                                        balance: this.props.data.currentUser.bitsBalance,
                                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                                        inputValue: this.state.value
                                    })).canSpend ? this.props.sendCheer ? (this.setState({
                                        isSendingBits: !0
                                    }), t.total >= ge.l ? [4, new Promise(function(e) {
                                        var t = setTimeout(e, ge.m.UNDO_PROMPT_DURATION),
                                            n = function(n) {
                                                void 0 === n && (n = !1), clearTimeout(t), r.cancelDelayedSend = null, r.confirmDelayedSend = null, e(n)
                                            };
                                        r.cancelDelayedSend = function() {
                                            return n(!0)
                                        }, r.confirmDelayedSend = function() {
                                            return n(!1)
                                        }
                                    })] : [3, 2]) : (o.j.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (o.j.warn("[Chat Input] Spending bits forbidden.", n), [2]) : (o.j.warn("[Chat Input] Cheer Settings are undefined."), [2]) : (o.j.warn("[Chat Input] Cheer is null."), [2]) : (o.j.warn("[Chat Input] User is null."), [2]) : (this.sendRegularMessage(), [2])) : (o.j.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                        hasSendableInput: e,
                                        value: this.state.value
                                    }), [2]) : (o.j.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.props.login(), [2]);
                                case 1:
                                    if (a.sent()) return this.setState({
                                        isSendingBits: !1
                                    }), this.chatInputRef.focus(), [2];
                                    a.label = 2;
                                case 2:
                                    i = Object(le.a)(), a.label = 3;
                                case 3:
                                    return a.trys.push([3, 5, , 6]), [4, this.props.sendCheer({
                                        variables: {
                                            input: {
                                                id: i,
                                                targetID: this.props.channelID,
                                                bits: t.total,
                                                content: this.state.value
                                            }
                                        }
                                    })];
                                case 4:
                                    return a.sent(), [3, 6];
                                case 5:
                                    return a.sent(), this.setState({
                                        isSendingBits: !1
                                    }), this.chatInputRef.focus(), [2];
                                case 6:
                                    return this.setState({
                                        isSendingBits: !1,
                                        showCard: nt.None,
                                        value: ""
                                    }), this.chatInputRef.focus(), this.autocompleteInputRef.setValue(""), [2]
                            }
                        })
                    })
                }, n.onEmotePickerToggle = function() {
                    n.setState(function(e) {
                        return e.messageCheers.length ? e : {
                            showCard: e.showCard === nt.Emotes ? nt.None : nt.Emotes
                        }
                    })
                }, n.onBitsIconClick = function() {
                    n.state.showCard === nt.Bits ? n.trackBitsCardInteraction(K.a.CloseCard) : n.trackBitsCardInteraction(K.a.OpenCard), n.setState({
                        showCard: n.state.showCard === nt.Bits ? nt.None : nt.Bits
                    })
                }, n.onShowViewersList = function() {
                    n.state.showCard !== nt.None && n.setState({
                        showCard: nt.None
                    }), n.props.showViewersList()
                }, n.onBitsClose = function() {
                    n.state.showCard === nt.Bits && n.setState({
                        showCard: nt.None
                    }), n.trackBitsCardInteraction(K.a.CloseCard)
                }, n.onClickEmote = function(e) {
                    var t = n.state.value;
                    n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef.setValue(t)
                }, n.onEmotePickerDataLoaded = function(e) {
                    e && n.setState({
                        showEmotePickerButton: !0
                    })
                }, n.trackBitsCardInteraction = function(e, t) {
                    var a = {
                        actionName: e,
                        emoteType: t && t.emoteType,
                        emoteLevel: t && t.emoteLevel,
                        location: t && t.location,
                        displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                    };
                    Object(K.h)(a)
                }, n.resetAndUpdateRenderSentChatMessageEvent = function() {
                    n.props.latencyTracking.resetCustomEvents(ce.a.Chat);
                    var e = n.props.latencyTracking.registerCustomEvent({
                        benchmark: 400,
                        group: ce.a.Chat,
                        key: ce.b.ChatRenderSent,
                        label: ce.c.RenderSent,
                        start: ce.d.Registration
                    });
                    n.props.updateRenderSentChatMessageEvent(e)
                }, n.state = {
                    chatMembers: t.activeChatters.getActiveChatters(),
                    hasInteractedOrPageload: t.firstPageLoaded,
                    hasSeenAndRejectedEmbedPrompt: !1,
                    isSendingBits: !1,
                    messageCheers: [],
                    showBuyBits: !1,
                    showCard: nt.None,
                    showEmotePickerButton: !!t.authToken,
                    showRaidsSettingsTooltip: !1,
                    showRaidsFollowerOnlyTooltip: !1,
                    showAutomodSettingsTooltip: !1,
                    value: ""
                }, n
            }
            return a.__extends(t, e), t.prototype.componentWillMount = function() {
                this.syncMembersHandle = setInterval(this.syncMembers, 250)
            }, t.prototype.componentWillUpdate = function(e, t) {
                if (t.value !== this.state.value && this.props.bitsConfig) {
                    var n = [];
                    Object(ot.c)(t.value, this.props.bitsConfig).forEach(function(e) {
                        e.type === z.a.Emote && n.push(e.content)
                    }), n.length && t.showCard === nt.Emotes && this.setState({
                        showCard: nt.None
                    }), this.setState({
                        messageCheers: n
                    })
                }
            }, t.prototype.componentWillReceiveProps = function(e) {
                var t = this;
                !this.props.firstPageLoaded && e.firstPageLoaded && (this.setState({
                    hasInteractedOrPageload: !0
                }), this.props.isCurrentUserModerator && Object(_t.a)() && o.l.get("automodChatCogTooltipSeenNumTimes", 0) < 3 && this.setState({
                    showAutomodSettingsTooltip: !0
                }, function() {
                    setTimeout(t.incrementAndHideAutomodTooltipCounter, 15e3)
                })), this.props.isCurrentUserModerator && !this.props.raidReceived && e.raidReceived && o.l.get("raidsModerationTooltipsSeenNumTimes", 0) < Dt && this.setState({
                    showRaidsSettingsTooltip: !0,
                    showRaidsFollowerOnlyTooltip: !0
                }, function() {
                    setTimeout(function() {
                        var e = o.l.get("raidsModerationTooltipsSeenNumTimes", 0) + 1;
                        o.l.set("raidsModerationTooltipsSeenNumTimes", e), t.setState({
                            showRaidsSettingsTooltip: !1
                        })
                    }, 2e4)
                })
            }, t.prototype.componentWillUnmount = function() {
                this.syncMembersHandle && (clearInterval(this.syncMembersHandle), this.syncMembersHandle = 0)
            }, t.prototype.render = function() {
                if (this.props.hidden) return null;
                if (this.state.hasSeenAndRejectedEmbedPrompt) return i.createElement(v._8, {
                    className: "chat-input",
                    padding: {
                        x: 2,
                        bottom: 2
                    }
                }, i.createElement(v.Q, {
                    "data-test-selector": "chat-embed-denied-text"
                }, Object(o.d)("You rejected the prompt to send messages in this embedded version of Twitch Chat. If this was done in error, please refresh the page.", "ChatInput")), this.renderButtonContainer(!0));
                var e = [];
                this.props.bitsConfig && e.push(i.createElement(v.w, {
                    key: "bits",
                    icon: v._23.Bits,
                    ariaLabel: Object(o.d)("Bits", "ChatInput"),
                    type: v.y.Secondary,
                    onClick: this.onBitsIconClick,
                    "data-a-target": "bits-button"
                })), this.state.showEmotePickerButton && e.push(i.createElement(Et.b, {
                    key: "emote-picker",
                    onClick: this.onEmotePickerToggle
                }));
                var t = null;
                this.state.hasInteractedOrPageload && (t = i.createElement(Et.c, {
                    channelOwnerID: this.props.channelID,
                    onClickEmote: this.onClickEmote,
                    onLoad: this.onEmotePickerDataLoaded,
                    toggleVisibility: this.onEmotePickerToggle,
                    visible: this.state.showCard === nt.Emotes
                }));
                var n = null;
                this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = i.createElement(at, {
                    bitsConfig: this.props.bitsConfig,
                    channelID: this.props.channelID,
                    channelLogin: this.props.channelLogin,
                    currentCheers: this.state.messageCheers,
                    isSending: this.state.isSendingBits,
                    isStaff: this.props.isStaff,
                    onCancelSend: this.cancelDelayedSend,
                    onClickCheermote: this.onClickEmote,
                    onConfirmSend: this.confirmDelayedSend,
                    onUserClose: this.onBitsClose,
                    trackBitsCardInteraction: this.trackBitsCardInteraction,
                    visible: this.state.showCard === nt.Bits
                }));
                var a = null;
                return this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.hashtags && this.state.messageCheers.length > 0 && (a = i.createElement(st, {
                    hashTags: this.props.data.user.cheer.hashtags
                })), i.createElement(v._8, {
                    className: "chat-input",
                    padding: {
                        x: 2,
                        bottom: 2
                    }
                }, i.createElement(v._2, {
                    position: v._15.Relative,
                    zIndex: v._59.Default
                }, i.createElement("div", {
                    onMouseEnter: this.onMouseEnterInput
                }, t, n, i.createElement(ue.b, {
                    componentType: ue.a.TextArea,
                    suggestionSource: ue.c.Chat,
                    onValueUpdate: this.onMessageValueUpdate,
                    onFocus: this.onInputFocus,
                    onKeyDown: this.onKeyDown,
                    componentRefDelegate: this.setChatInputRef,
                    refDelegate: this.setAutocompleteInputRef,
                    paddingRight: 30 * e.length,
                    placeholder: Object(o.d)("Send a message", "ChatInput"),
                    noResize: !0,
                    "data-a-target": "chat-input",
                    "data-test-selector": "chat-input",
                    disabled: this.state.isSendingBits,
                    containerElement: this.props.containerElement
                }, i.createElement(ue.d, {
                    emotes: this.props.emotes
                }), i.createElement(mt, {
                    channelDisplayName: this.props.channelDisplayName,
                    channelLogin: this.props.channelLogin,
                    chatMembers: this.state.chatMembers
                }), a), i.createElement(v._8, {
                    position: v._15.Absolute,
                    attachRight: !0,
                    attachTop: !0
                }, e))), this.renderButtonContainer(!1))
            }, t.prototype.renderButtonContainer = function(e) {
                return void 0 === e && (e = !1), i.createElement(v._8, {
                    className: "chat-input__buttons-container",
                    display: v.R.Flex,
                    justifyContent: v._7.Between,
                    margin: {
                        top: 1
                    }
                }, i.createElement(v._8, {
                    display: v.R.Flex,
                    flexDirection: v.T.Row
                }, i.createElement(v._8, {
                    position: v._15.Relative
                }, i.createElement(lt.a, {
                    onToggle: this.onChatSettingsToggle,
                    channelLogin: this.props.channelLogin,
                    isHostMode: this.props.isHostMode,
                    authToken: this.props.authToken,
                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                    onChatCommand: this.onChatCommand,
                    isPopout: this.props.isPopout,
                    isEmbedded: this.props.isEmbedded,
                    channelID: this.props.channelID,
                    sawFirstRaidPrompt: this.state.showRaidsFollowerOnlyTooltip,
                    containerElement: this.props.containerElement
                }), this.renderChatCogTooltips()), i.createElement(v.w, {
                    ariaLabel: Object(o.d)("Viewer list", "ChatInput"),
                    "data-a-target": "chat-viewer-list",
                    "data-test-selector": "chat-viewer-list",
                    icon: v._23.ViewerList,
                    onClick: this.onShowViewersList
                })), this.renderSendButton(e))
            }, t.prototype.renderSendButton = function(e) {
                var t;
                return void 0 === e && (e = !1), t = this.state.value && null !== Object(bt.q)(this.state.value) ? Object(o.d)("Whisper", "ChatInput") : Object(o.d)("Chat", "ChatInput"), i.createElement(v.v, {
                    onClick: this.onMessageSend,
                    "data-a-target": "chat-send-button",
                    "data-test-selector": "chat-send-button",
                    disabled: this.state.isSendingBits || e
                }, t)
            }, t.prototype.renderChatCogTooltips = function() {
                return this.state.showRaidsSettingsTooltip ? i.createElement(gt, null) : this.state.showAutomodSettingsTooltip && Object(_t.a)() ? i.createElement(ht, null) : null
            }, t.prototype.incrementAndHideAutomodTooltipCounter = function() {
                var e = o.l.get("automodChatCogTooltipSeenNumTimes", 0) + 1;
                o.l.set("automodChatCogTooltipSeenNumTimes", e), this.setState({
                    showAutomodSettingsTooltip: !1
                })
            }, t.prototype.sendRegularMessage = function() {
                this.props.onSendMessage && this.props.onSendMessage(this.state.value) && (this.trackChatEvent(), this.trackMentions(), this.autocompleteInputRef.setValue(""), this.setState({
                    showCard: nt.None
                }))
            }, t.prototype.trackChatEvent = function() {
                Object(kt.a)({
                    channelID: this.props.channelID,
                    channelLogin: this.props.channelLogin,
                    isHostMode: this.props.isHostMode,
                    player: this.props.isPopout ? ft.a.Embed : ft.a.Web,
                    subOnlyMode: this.props.isSubsOnlyModeEnabled
                })
            }, t.prototype.trackMentions = function() {
                if (this.state.value && this.props.sessionUser)
                    for (var e = 0, t = Object(vt.c)(this.state.value, this.props.sessionUser.displayName, !1); e < t.length; e++) {
                        var n = t[e];
                        n.type === z.a.Mention && n.content.recipient !== n.content.sender && Object(yt.a)({
                            channelLogin: this.props.channelLogin,
                            isHostMode: this.props.isHostMode,
                            mentionedUserDisplayName: n.content.recipient,
                            userLogin: this.props.sessionUser.login
                        })
                    } else o.j.warn("[ChatInput] trackMentions was called in a nonsensical state.")
            }, t
        }(i.Component);
        var It = Object(re.compose)(Object(l.a)(Nt, {
                name: "sendCheer"
            }), Object(l.a)(wt), Object(St.d)("ChatInput", {
                autoReportInteractive: !0
            }), Object(ee.b)(function(e) {
                return {
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode,
                    sessionUser: Object(te.c)(e)
                }
            }, function(e) {
                return Object(s.b)({
                    login: function() {
                        return Object(de.f)(oe.a.Chat)
                    },
                    updateRenderSentChatMessageEvent: dt.U
                }, e)
            }))(Ot),
            Mt = n("kpSd"),
            Rt = (n("HuX0"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onClickConfirm = function() {
                        n.markRoomSeen(), n.setState({
                            showRules: !1
                        })
                    };
                    var a = n.getRoomsSeen();
                    return n.state = {
                        showRules: n.props.chatRules && n.props.chatRules.length > 0 && !a[n.props.channelLogin]
                    }, n
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return this.state.showRules ? i.createElement(v._8, {
                        className: "chat-rules",
                        position: v._15.Relative
                    }, i.createElement(v._32, {
                        border: !0,
                        background: v.n.Base,
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(v._8, {
                        padding: 1
                    }, i.createElement(v._8, {
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(v.Q, {
                        type: v._46.H6
                    }, Object(o.d)("Chat Rules:", "ChatRules"))), i.createElement(v._8, null, i.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                        return i.createElement("li", {
                            key: t
                        }, e)
                    }))), i.createElement(v._8, {
                        margin: {
                            top: 1
                        },
                        display: v.R.Flex,
                        justifyContent: v._7.Center
                    }, i.createElement(v.v, {
                        size: v.z.Small,
                        onClick: this.onClickConfirm
                    }, Object(o.d)("Ok, got it!", "ChatRules")))))) : null
                }, t.prototype.getRoomsSeen = function() {
                    return o.l.get("chat_rules_shown", {})
                }, t.prototype.markRoomSeen = function() {
                    var e = this.getRoomsSeen();
                    e[this.props.channelLogin] = !0, o.l.set("chat_rules_shown", e)
                }, t
            }(i.Component)),
            Lt = n("ass3"),
            xt = 3;
        var jt = n("O9wU"),
            Ut = (n("Bsuy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, jt.a.viewer_list, "", e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        a = t.header,
                        r = n.map(function(t, n) {
                            return i.createElement("div", {
                                key: "chat-viewers-list-item-" + t,
                                role: "listitem",
                                "aria-setsize": -1,
                                "aria-posinset": n + 1
                            }, i.createElement("button", {
                                className: "chat-viewers-list__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, i.createElement(v.Q, {
                                transform: v._45.Capitalize
                            }, t)))
                        }),
                        s = "chat-viewers-list-header-" + a;
                    return i.createElement(v._8, {
                        className: "chat-viewers-list",
                        padding: {
                            bottom: 2
                        }
                    }, i.createElement("div", {
                        id: s
                    }, i.createElement(v.Q, {
                        transform: v._45.Uppercase
                    }, a)), i.createElement("div", {
                        role: "list",
                        "aria-labelledby": s
                    }, r))
                }, t
            }(i.Component)),
            Bt = (n("gwjw"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        filter: "",
                        inputValue: "",
                        filteredViewers: {},
                        viewersPage: 0,
                        renderedViewers: [],
                        isLoading: !1
                    }, t.filterTimeout = 0, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.loadMore = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e = this;
                            return a.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, new Promise(function(t) {
                                            e.setState(function(t) {
                                                return {
                                                    renderedViewers: e.getRenderedViewers(t.filteredViewers.viewers, t.viewersPage + 1),
                                                    viewersPage: t.viewersPage + 1
                                                }
                                            }, function() {
                                                t()
                                            })
                                        })];
                                    case 1:
                                        return t.sent(), [2]
                                }
                            })
                        })
                    }, t.getRenderedViewers = function(e, t) {
                        return e ? e.slice(0, 100 * (t || 1)) : []
                    }, t.handleFilter = function(e, n) {
                        var a = function(e, t) {
                                if (!t) return e;
                                var n = Object.assign({}, e);
                                return Object.keys(n).forEach(function(e) {
                                    var a = n[e];
                                    Array.isArray(a) && (n[e] = a.filter(function(e) {
                                        return -1 !== e.toLowerCase().indexOf(t)
                                    }))
                                }), n
                            }(n, e),
                            i = t.getRenderedViewers(a.viewers, 1);
                        t.scroll && t.scroll.scrollToTop(), t.setState({
                            filteredViewers: a,
                            isLoading: !1,
                            renderedViewers: i,
                            viewersPage: 1
                        })
                    }, t.handleFilterChange = function(e) {
                        var n = e.target.value,
                            a = n.toLowerCase().trim();
                        t.setState({
                            filter: a,
                            inputValue: n,
                            isLoading: !0
                        }), clearTimeout(t.filterTimeout), t.filterTimeout = setTimeout(function() {
                            t.handleFilter(a, t.props.viewers)
                        }, 350)
                    }, t.onKeyDown = function(e) {
                        e.keyCode === se.a.Esc && t.props.closeViewersList()
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.handleFilter(this.state.filter, e.viewers)
                }, t.prototype.render = function() {
                    var e = [],
                        t = this.state.filteredViewers;
                    t.staff && t.staff.length > 0 && e.push(i.createElement(Ut, {
                        key: "chat-viewers-list-staff",
                        header: Object(o.d)("Staff", "ChatViewers"),
                        viewers: t.staff,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.admins && t.admins.length > 0 && e.push(i.createElement(Ut, {
                        key: "chat-viewers-list-admins",
                        header: Object(o.d)("Admins", "ChatViewers"),
                        viewers: t.admins,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.global_mods && t.global_mods.length > 0 && e.push(i.createElement(Ut, {
                        key: "chat-viewers-list-global-mods",
                        header: Object(o.d)("Global Moderators", "ChatViewers"),
                        viewers: t.global_mods,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.moderators && t.moderators.length > 0 && e.push(i.createElement(Ut, {
                        key: "chat-viewers-list-moderators",
                        header: Object(o.d)("Moderators", "ChatViewers"),
                        viewers: t.moderators,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.viewers && t.viewers.length > 0 && e.push(i.createElement(Ut, {
                        key: "chat-viewers-list-viewers",
                        "data-test-selector": "chat-viewers-list-viewers",
                        header: Object(o.d)("Viewers", "ChatViewers"),
                        viewers: this.state.renderedViewers,
                        onUsernameClick: this.props.onShowViewerCard
                    }));
                    var n = this.props.isLoading || this.state.isLoading,
                        a = n && i.createElement(v._8, {
                            className: "chat-viewers__loading",
                            display: v.R.Flex,
                            alignItems: v.c.Center,
                            justifyContent: v._7.Center,
                            zIndex: v._59.Above,
                            position: v._15.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, i.createElement(v._10, null));
                    return i.createElement(v._2, {
                        className: "chat-viewers__container",
                        fullWidth: !0,
                        fullHeight: !0,
                        flexShrink: 0,
                        zIndex: v._59.Default
                    }, i.createElement("section", {
                        "aria-labelledby": "chat-viewers__header"
                    }, i.createElement(v._8, {
                        className: "chat-viewers__pane",
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        flexWrap: v.U.NoWrap,
                        position: v._15.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0
                    }, i.createElement(v._8, {
                        className: "chat-viewers__header",
                        display: v.R.Flex,
                        justifyContent: v._7.Center,
                        alignItems: v.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, i.createElement(v._8, {
                        position: v._15.Absolute,
                        attachLeft: !0,
                        margin: {
                            left: 1
                        }
                    }, i.createElement(v.w, {
                        icon: v._23.Close,
                        ariaLabel: Object(o.d)("Close", "ChatViewers"),
                        "data-a-target": "chat-viewer-list",
                        onClick: this.props.closeViewersList
                    })), i.createElement("p", {
                        "data-a-target": "chat-viewers_header-channel-name",
                        id: "chat-viewers__header"
                    }, Object(o.d)("Viewer List", "ChatViewers"))), i.createElement(v._8, {
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        flexWrap: v.U.NoWrap,
                        fullHeight: !0
                    }, i.createElement(v._8, {
                        className: "chat-viewers__filter",
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }, i.createElement(v._4, {
                        type: v._5.Search,
                        name: "viewers-filter",
                        placeholder: Object(o.d)("Filter Viewers", "ChatViewers"),
                        readOnly: this.props.isLoading,
                        onChange: this.handleFilterChange,
                        value: this.state.inputValue,
                        autoFocus: !0,
                        onKeyDown: this.onKeyDown
                    })), i.createElement(w.b, {
                        className: "chat-viewers__list",
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0,
                        scrollContentClassName: "chat-viewers__scroll-container"
                    }, i.createElement(v._8, {
                        padding: {
                            x: 2
                        }
                    }, e, i.createElement(w.a, {
                        key: this.state.filter,
                        enabled: !n,
                        loadMore: this.loadMore
                    }))), a))))
                }, t
            }(i.Component)),
            At = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        viewers: {},
                        viewerCount: 0,
                        isLoading: !1
                    }, n.logger = o.j.withCategory("chat-viewers"), n
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.channelLogin !== e.channelLogin && this.updateViewers(e.channelLogin)
                }, t.prototype.componentDidMount = function() {
                    return a.__awaiter(this, void 0, void 0, function() {
                        return a.__generator(this, function(e) {
                            return this.updateViewers(this.props.channelLogin), [2]
                        })
                    })
                }, t.prototype.render = function() {
                    return i.createElement(Bt, {
                        channelLogin: this.props.channelLogin,
                        closeViewersList: this.props.closeViewersList,
                        viewers: this.state.viewers,
                        viewerCount: this.state.viewerCount,
                        isLoading: this.state.isLoading,
                        onShowViewerCard: this.props.onShowViewerCard
                    })
                }, t.prototype.updateViewers = function(e) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, r;
                        return a.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    return this.props.latencyTracking.resetCustomEvents(ce.a.ViewersList), t = this.props.latencyTracking.registerCustomEvent({
                                        benchmark: 3e3,
                                        group: ce.a.ViewersList,
                                        key: ce.b.ViewersListUpdated,
                                        label: ce.c.Updated,
                                        start: ce.d.Registration
                                    }), this.setState({
                                        isLoading: !0
                                    }), [4, function(e) {
                                        return a.__awaiter(this, void 0, void 0, function() {
                                            var t, n, i, r;
                                            return a.__generator(this, function(a) {
                                                switch (a.label) {
                                                    case 0:
                                                        t = "https://tmi.twitch.tv/group/user/" + e.toLowerCase() + "/chatters", n = 1, a.label = 1;
                                                    case 1:
                                                        if (!(n <= xt)) return [3, 7];
                                                        a.label = 2;
                                                    case 2:
                                                        return a.trys.push([2, 5, , 6]), [4, fetch(t, {
                                                            method: "GET",
                                                            headers: {
                                                                Accept: "application/json; charset=UTF-8",
                                                                "content-type": "application/json; charset=UTF-8"
                                                            }
                                                        })];
                                                    case 3:
                                                        return [4, a.sent().json()];
                                                    case 4:
                                                        return i = a.sent(), o.j.debug("[update] getViewers done."), [2, i];
                                                    case 5:
                                                        if (r = a.sent(), n === xt) throw r;
                                                        return [3, 6];
                                                    case 6:
                                                        return ++n, [3, 1];
                                                    case 7:
                                                        return [2]
                                                }
                                            })
                                        })
                                    }(e)];
                                case 1:
                                    return n = s.sent(), i = n ? n.chatters : {}, r = n ? n.chatter_count : 0, this.logger.debug("Updated viewers list with " + r + " viewers"), this.setState({
                                        viewers: i,
                                        viewerCount: r,
                                        isLoading: !1
                                    }), this.props.latencyTracking.reportCustomEvent(t), [2]
                            }
                        })
                    })
                }, t = a.__decorate([Object(St.d)("ViewersList", {
                    autoReportInteractive: !0
                })], t)
            }(i.Component);
        var Ft = Object(ee.b)(null, function(e) {
                return Object(s.b)({
                    onShowViewerCard: Lt.d
                }, e)
            })(At),
            Pt = n("tjbt"),
            Vt = n("ZiSq"),
            Ht = (n("jIAO"), n("vLl9"));
        n("dVd7");
        n.d(t, "a", function() {
            return zt
        }), n.d(t, "b", function() {
            return qt
        });
        var zt = "chat-room-header-label",
            Gt = o.j.withCategory("chat-room"),
            Wt = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.closeViewersList = function() {
                        n.setState({
                            showViewersList: !1
                        })
                    }, n.showViewersList = function() {
                        n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                            showViewersList: !0
                        })
                    }, n.onChatInputFocus = function() {
                        n.props.authToken && !n.state.showChatRules && n.setState({
                            showChatRules: !0
                        })
                    }, n.setChatListElement = function(e) {
                        n.setState({
                            chatListElement: e
                        })
                    }, n.shouldHideChatInput = function() {
                        return n.state.showViewersList
                    };
                    var a = new C.c([], [], n.props.channelLogin);
                    return n.state = {
                        showChatRules: !1,
                        showViewersList: !1,
                        badgeSets: a
                    }, n
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    if (this.props.isBackground) return null;
                    if (this.props.isHidden && !this.props.isPopout) return i.createElement(v._32, {
                        alignItems: v.c.Center,
                        background: v.n.Alt2,
                        borderLeft: !0,
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: v._7.Center,
                        color: v.K.Base,
                        position: v._15.Relative
                    }, i.createElement(v._8, {
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(v.Q, {
                        fontSize: v.V.Size5
                    }, Object(o.d)("Chat is hidden.", "ChatRoom"))), i.createElement(v.v, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(o.d)("Show Chat", "ChatRoom")));
                    var e = this.props.bitsConfig && this.props.firstPageLoaded && i.createElement(ae, {
                            badgeData: this.state.badgeSets,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelID: this.props.channelID,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            userID: this.props.userID
                        }),
                        t = this.state.showViewersList && i.createElement(Ft, {
                            channelLogin: this.props.channelLogin,
                            closeViewersList: this.closeViewersList
                        }),
                        n = !!this.props.authToken && !this.props.isEmbedded,
                        a = null;
                    return this.state.showChatRules && (a = i.createElement(v._8, {
                        padding: {
                            x: 2
                        }
                    }, i.createElement(Rt, {
                        chatRules: this.props.chatRules,
                        channelLogin: this.props.channelLogin
                    }))), i.createElement(v._2, {
                        "data-test-selector": "chat-room-component-layout",
                        "data-a-target": this.props.theme === u.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                        flexShrink: 1,
                        flexGrow: 1,
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        overflow: v._11.Hidden,
                        fullWidth: !0,
                        fullHeight: !0
                    }, i.createElement("section", {
                        role: "complementary",
                        "aria-labelledby": zt
                    }, i.createElement(v._32, {
                        background: v.n.Alt2,
                        borderLeft: !this.props.isEmbedded,
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        flexWrap: v.U.NoWrap,
                        position: v._15.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: v._11.Hidden,
                        color: v.K.Base,
                        className: "chat-room__content"
                    }, this.props.chatRoomHeader, e, i.createElement(Mt.a, {
                        badgeSets: this.state.badgeSets,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        isEmbedded: this.props.isEmbedded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isCurrentUserStaff: this.props.isStaff,
                        onPushMessage: this.props.onPushMessage,
                        containerRef: this.setChatListElement
                    }), i.createElement(v._8, {
                        className: "chat-room__notifications",
                        position: v._15.Absolute,
                        zIndex: v._59.Default,
                        fullWidth: !0
                    }, this.props.children), a, this.props.isOwnChannel && !this.props.isEmbedded && i.createElement(y, {
                        hostedChannelLogin: this.props.hostedChannelLogin
                    }), t, i.createElement(Pt.a, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        onPushMessage: this.props.onPushMessage,
                        onSendMessage: this.props.onSendMessage
                    }), i.createElement(It, {
                        activeChatters: this.props.activeChatters,
                        authToken: this.props.authToken,
                        bitsConfig: n ? this.props.bitsConfig : void 0,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hidden: this.shouldHideChatInput(),
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        isStaff: this.props.isStaff,
                        onChatCommand: this.props.onSendMessage,
                        badgeSets: this.state.badgeSets,
                        userBadges: this.props.userBadges,
                        showViewersList: this.showViewersList,
                        raidReceived: this.props.raidReceived,
                        onSendMessage: this.props.onSendMessage,
                        onInputFocus: this.onChatInputFocus,
                        containerElement: this.state.chatListElement
                    }), i.createElement(v._8, {
                        className: "chat-room__viewer-card",
                        fullHeight: !0,
                        fullWidth: !0,
                        position: v._15.Absolute,
                        "data-a-target": "chat-user-card"
                    }, i.createElement(Vt.a, {
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        onSendMessage: this.props.onSendMessage,
                        channelID: this.props.channelID
                    })))))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && this.setState({
                            badgeSets: new C.c(e.data.badges, e.data.user.broadcastBadges, e.channelLogin)
                        }), e.data && e.data.user && e.data.user.self && e.data.user.self.displayBadges) {
                        var t = {};
                        e.data.user.self.displayBadges.forEach(function(e) {
                            t[e.setID] = e.version
                        }), o.o.tmi.client.updateChannelBadges(e.channelLogin, t)
                    }
                }, t
            }(i.Component),
            qt = Object(s.d)(Object(l.a)(Ht, {
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(d.a)(function(e) {
                return {
                    query: Ht,
                    variables: {
                        channelLogin: e.channelLogin
                    },
                    topic: Object(p.u)(e.userID),
                    type: c.PubsubMessageType.UserBitsBadgeUpdate,
                    skip: !e.userID,
                    mutator: function(t, n) {
                        if (Gt.debug("Received bits-user-update-v1 pubsub update", {
                                data: n,
                                event: t
                            }), !n.badges || t.message_type === ie.b.Balance || null === t.data.newest_version || t.data.channel_id !== e.channelID) return n;
                        var a = n.badges.find(function(e) {
                            return e.setID === t.data.set_id && e.version === t.data.newest_version
                        });
                        return void 0 !== a && n.user.self.displayBadges && (n.user.self.displayBadges = n.user.self.displayBadges.map(function(e) {
                            return e.setID === a.setID && e.version !== a.version ? a : e
                        }), (!n.user.self.selectedBadge || a.setID === ie.a.Bits && n.user.self.selectedBadge.setID === ie.a.Bits) && (n.user.self.selectedBadge = a), n.user.self.selectedBadge && (a.setID !== ie.a.Leaderboard || n.user.self.selectedBadge.setID !== ie.a.Bits && n.user.self.selectedBadge.setID !== ie.a.Leaderboard) || (n.user.self.selectedBadge = a)), n
                    }
                }
            }), r.f)(Wt)
    },
    ZiSq: function(e, t, n) {
        "use strict";
        var a, i = n("TToO"),
            r = n("RH2O"),
            s = n("2KeS"),
            o = n("+xm8"),
            l = n("V5M+"),
            d = n("f2i/"),
            c = n("Aj/L"),
            u = n("ass3"),
            p = n("oSFp"),
            m = n("HW6M"),
            h = n("GiK3");
        ! function(e) {
            e[e.None = 0] = "None", e[e.Left = 1] = "Left", e[e.Middle = 2] = "Middle", e[e.Right = 3] = "Right"
        }(a || (a = {}));
        var g = n("6sO2"),
            f = n("E9Qg"),
            b = n("+Znq"),
            v = n("5s0/"),
            k = n("7vx8"),
            y = n("Odds");
        n("fbnZ");

        function C(e) {
            e.stopPropagation()
        }
        var _, E = function(e) {
                return h.createElement(y._2, {
                    display: y.R.InlineBlock
                }, h.createElement("div", {
                    className: "viewer-card-drag-cancel",
                    onMouseDown: C
                }, e.children))
            },
            S = n("O0Qc"),
            w = n("CSlQ"),
            N = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isIgnored: !1
                    }, t.ignoreUser = function() {
                        t.props.sendMessageToTMI(Object(S.h)(t.props.targetLogin)), t.setState({
                            isIgnored: !0
                        })
                    }, t.unignoreUser = function() {
                        t.props.sendMessageToTMI(Object(S.j)(t.props.targetLogin)), t.setState({
                            isIgnored: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isIgnored) {
                        var e = Object(g.d)("Unblock User", "ViewerCardIgnoreAction");
                        return h.createElement(y._49, {
                            key: "Ignore",
                            label: e,
                            direction: y._51.Top,
                            align: y._50.Right,
                            offsetX: "15%"
                        }, h.createElement(y.w, {
                            icon: y._23.Unignore,
                            ariaLabel: Object(g.d)("Unblock {displayName}", {
                                displayName: this.props.targetDisplayName
                            }, "ViewerCardIgnoreAction"),
                            onClick: this.unignoreUser,
                            overlay: !0
                        }))
                    }
                    var t = Object(g.d)("Block User", "ViewerCardIgnoreAction");
                    return h.createElement(y._49, {
                        key: "Ignore",
                        label: t,
                        direction: y._51.Top,
                        align: y._50.Right,
                        offsetX: "15%"
                    }, h.createElement(y.w, {
                        icon: y._23.Ignore,
                        ariaLabel: Object(g.d)("Block {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.ignoreUser,
                        overlay: !0
                    }))
                }, t = i.__decorate([Object(w.d)("ViewerCardIgnoreAction")], t)
            }(h.Component),
            T = n("oIkB"),
            D = n("Dc1A"),
            O = n("1Eny"),
            I = n("zVM8"),
            M = "10 minutes",
            R = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            a = e.channelID,
                            i = e.userLogin;
                        n(Object(T.a)({
                            channelID: a,
                            bannedUserLogin: i
                        }))
                    }, t.onTimeoutClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            a = e.channelID,
                            i = e.userLogin;
                        n(Object(T.a)({
                            channelID: a,
                            bannedUserLogin: i,
                            expiresIn: M
                        }))
                    }, t.onUnbanClick = function() {
                        var e = t.props,
                            n = e.unbanUser,
                            a = e.channelID,
                            i = e.userLogin;
                        n(Object(T.a)({
                            channelID: a,
                            bannedUserLogin: i
                        }))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return h.createElement(y._8, {
                        display: y.R.InlineFlex
                    }, this.getContent())
                }, t.prototype.getContent = function() {
                    return this.props.data.loading || this.props.data.error ? [this.renderBanAction(!0), this.renderTimeoutAction(!0)] : this.props.data.chatRoomBanStatus ? this.props.data.chatRoomBanStatus.isPermanent ? [this.renderUnbanAction(), this.renderTimeoutAction(!0)] : [this.renderBanAction(), this.renderUntimeoutAction()] : [this.renderBanAction(), this.renderTimeoutAction()]
                }, t.prototype.renderTimeoutAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(g.d)("Timeout User", "ViewerCardModActions");
                    return h.createElement(y._8, {
                        key: "Timeout",
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._49, {
                        label: t,
                        direction: y._51.Top,
                        align: y._50.Left,
                        offsetX: "20%"
                    }, h.createElement(y.w, {
                        icon: y._23.Timeout,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onTimeoutClick
                    })))
                }, t.prototype.renderUntimeoutAction = function() {
                    var e = Object(g.d)("Untimeout User", "ViewerCardModActions");
                    return h.createElement(y._8, {
                        key: "Untimeout",
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._49, {
                        label: e,
                        direction: y._51.Top,
                        align: y._50.Left,
                        offsetX: "20%"
                    }, h.createElement(y.w, {
                        icon: y._23.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t.prototype.renderBanAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(g.d)("Ban User", "ViewerCardModActions");
                    return h.createElement(y._8, {
                        key: "Ban",
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._49, {
                        label: t,
                        direction: y._51.Top,
                        align: y._50.Left,
                        offsetX: "20%"
                    }, h.createElement(y.w, {
                        icon: y._23.Ban,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onBanClick
                    })))
                }, t.prototype.renderUnbanAction = function() {
                    var e = Object(g.d)("Unban User", "ViewerCardModActions");
                    return h.createElement(y._8, {
                        key: "Unban",
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._49, {
                        label: e,
                        direction: y._51.Top,
                        align: y._50.Left,
                        offsetX: "20%"
                    }, h.createElement(y.w, {
                        icon: y._23.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t = i.__decorate([Object(w.d)("ViewerCardModActions"), Object(k.a)(I, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.userID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(k.a)(D, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var a = e.readQuery({
                                        query: I,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        }
                                    });
                                    a && (t && t.data && (a.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: I,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        },
                                        data: a
                                    }))
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(k.a)(O, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                        query: I,
                                        variables: {
                                            targetUserID: t.userID,
                                            channelID: t.channelID
                                        }
                                    });
                                    if (n) {
                                        var a = i.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                        e.writeQuery({
                                            query: I,
                                            variables: {
                                                targetUserID: t.userID,
                                                channelID: t.channelID
                                            },
                                            data: a
                                        })
                                    }
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(h.Component),
            L = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.modUser = function() {
                        n.props.sendMessageToTMI(Object(S.i)(n.props.targetLogin)), n.setState({
                            isModerator: !0
                        })
                    }, n.unmodUser = function() {
                        n.props.sendMessageToTMI(Object(S.k)(n.props.targetLogin)), n.setState({
                            isModerator: !1
                        })
                    }, n.state = {
                        isModerator: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isModerator) {
                        var e = Object(g.d)("Unmod User", "ViewerCardOwnerActions");
                        return h.createElement(y._8, {
                            key: "OP",
                            display: y.R.InlineFlex,
                            padding: {
                                right: 1
                            }
                        }, h.createElement(y._49, {
                            label: e,
                            direction: y._51.Top,
                            align: y._50.Center
                        }, h.createElement(y.w, {
                            icon: y._23.FollowCheck,
                            ariaLabel: e,
                            onClick: this.unmodUser
                        })))
                    }
                    e = Object(g.d)("Mod User", "ViewerCardOwnerActions");
                    return h.createElement(y._8, {
                        key: "OP",
                        display: y.R.InlineFlex,
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._49, {
                        label: e,
                        direction: y._51.Top,
                        align: y._50.Center
                    }, h.createElement(y.w, {
                        icon: y._23.OP,
                        ariaLabel: e,
                        onClick: this.modUser
                    })))
                }, t = i.__decorate([Object(w.d)("ViewerCardOwnerActions")], t)
            }(h.Component),
            x = n("O9wU"),
            j = n("phns"),
            U = n("mw/a"),
            B = n("daN3"),
            A = n("YH6m"),
            F = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onGiftSelect = function() {
                        t.props.onGiftSelect && t.props.onGiftSelect()
                    }, t.onSelectTierTab = function(e) {
                        t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return h.createElement(y._8, null, h.createElement(y._8, {
                        display: y.R.Flex,
                        justifyContent: y._7.Between,
                        alignItems: y.c.Center,
                        fullWidth: !0
                    }, h.createElement(y.Q, {
                        bold: !0,
                        type: y._46.H5
                    }, Object(g.d)("Choose A Gift Subscription", "GiftTierTabs")), h.createElement(y.v, {
                        type: y.B.Text,
                        icon: y._23.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, h.createElement(y._8, {
                        alignItems: y.c.Center,
                        display: y.R.InlineFlex
                    }, h.createElement(y.Q, null, Object(g.d)("Back", "GiftTierTabs"))))), h.createElement(A.a, {
                        canPrimeSubscribe: !1,
                        channelDisplayName: this.props.channelDisplayName,
                        giftRecipient: this.props.giftRecipient,
                        isGift: !0,
                        isSubscribed: !1,
                        onGiftSelect: this.onGiftSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        userHasPrime: !1
                    }))
                }, t
            }(h.Component),
            P = n("pQNb"),
            V = n("CwIZ"),
            H = n("m4HT"),
            z = (n("VSa1"), n("BBNG"));
        ! function(e) {
            e[e.ActionsPage = 0] = "ActionsPage", e[e.SubGiftSelectPage = 1] = "SubGiftSelectPage"
        }(_ || (_ = {}));
        var G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: _.ActionsPage
                    }, t.getContent = function() {
                        if (t.props.data.loading || t.props.data.error) return t.renderHideButton();
                        var e = {
                                backgroundImage: "url(" + (t.props.data.targetUser.bannerImageURL || f) + ")"
                            },
                            n = t.state.currentPage === _.ActionsPage ? t.renderActions() : t.renderSubGiftSelect();
                        return h.createElement(y._32, {
                            border: !0,
                            className: "viewer-card",
                            elevation: 1,
                            "data-a-target": "viewer-card"
                        }, h.createElement(y._3, {
                            background: y.n.AccentAlt2
                        }, h.createElement("div", {
                            className: "viewer-card__background",
                            style: e
                        }, h.createElement(y._8, {
                            display: y.R.Flex,
                            flexDirection: y.T.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            className: "viewer-card__overlay"
                        }, h.createElement(y._32, {
                            alignItems: y.c.Start,
                            background: y.n.Overlay,
                            className: "viewer-card__banner",
                            display: y.R.Flex,
                            flexDirection: y.T.Row,
                            flexGrow: 1,
                            fullWidth: !0,
                            justifyContent: y._7.Start,
                            padding: 1,
                            position: y._15.Relative,
                            textAlign: y._42.Center
                        }, h.createElement(E, null, h.createElement(y.m, {
                            src: t.props.data.targetUser.profileImageURL,
                            size: 50,
                            alt: t.props.data.targetUser.displayName
                        })), h.createElement(E, null, h.createElement(y._8, {
                            alignItems: y.c.Center,
                            margin: 1,
                            className: "viewer-card__display-name",
                            ellipsis: !0
                        }, h.createElement(y.Q, {
                            color: y.K.Overlay,
                            type: y._46.H4
                        }, h.createElement(y.O, {
                            hoverUnderlineNone: !0,
                            targetBlank: !0,
                            to: "/" + t.props.targetLogin,
                            type: y.P.Inherit
                        }, t.props.data.targetUser.displayName)))), h.createElement(E, null, t.renderHideButton()), h.createElement(E, null, t.renderIgnoreButton()))))), n)
                    }, t.toggleGiftPage = function() {
                        var e = t.state.currentPage === _.ActionsPage ? _.SubGiftSelectPage : _.ActionsPage;
                        e === _.SubGiftSelectPage && t.trackGiftEvent(), t.setState({
                            currentPage: e
                        })
                    }, t.onWhisperButtonClick = function() {
                        t.props.hideViewerCard()
                    }, t.handleReportUserClick = function() {
                        if (!t.props.isLoggedIn) return t.props.login();
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: t.reportContentTypeFromSourceType(t.props.sourceType),
                                targetUserID: t.props.data.targetUser.id,
                                contentID: t.props.sourceID,
                                extra: JSON.stringify({
                                    channel_id: t.props.channelID.toString()
                                }),
                                additionalTrackingID: t.props.channelID
                            },
                            title: Object(g.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.data.targetUser.displayName
                            }, "ReportUserModalTitle")
                        })
                    }, t.trackBuyGiftSubEvent = function(e) {
                        Object(V.b)(i.__assign({}, e, {
                            action: V.a.BuyGiftSub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        }))
                    }, t.trackGiftEvent = function() {
                        Object(V.b)({
                            action: V.a.GiftASub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.error ? null : this.getContent()
                }, t.prototype.renderIgnoreButton = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : h.createElement(y._8, {
                        key: "Ignore",
                        position: y._15.Absolute,
                        attachRight: !0,
                        attachBottom: !0,
                        margin: {
                            bottom: .5,
                            right: .5
                        }
                    }, h.createElement(N, {
                        targetDisplayName: this.props.data.targetUser.displayName,
                        targetLogin: this.props.targetLogin,
                        sendMessageToTMI: this.props.sendMessageToTMI
                    }))
                }, t.prototype.renderHideButton = function() {
                    return h.createElement(y._8, {
                        className: "viewer-card__hide",
                        position: y._15.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        margin: {
                            top: .5,
                            right: .5
                        },
                        "data-a-target": "viewer-card-close-button"
                    }, h.createElement(y.w, {
                        icon: y._23.Close,
                        onClick: this.props.hideViewerCard,
                        ariaLabel: Object(g.d)("Hide", "ViewerCard"),
                        overlay: !0
                    }))
                }, t.prototype.renderActions = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : h.createElement(y._32, {
                        className: "viewer-card__actions",
                        "data-test-selector": "viewer-card-actions",
                        attachBottom: !0
                    }, this.renderSocialActions(), this.renderChatActions())
                }, t.prototype.renderSocialActions = function() {
                    return h.createElement(y._32, {
                        display: y.R.Flex,
                        background: y.n.Base,
                        flexDirection: y.T.Row,
                        fullWidth: !0,
                        padding: {
                            y: 1,
                            left: 1,
                            right: .5
                        }
                    }, h.createElement(y._8, {
                        margin: {
                            right: .5
                        }
                    }, h.createElement(E, null, h.createElement(j.a, {
                        friendData: {
                            user: this.props.data.targetUser
                        },
                        targetID: this.props.data.targetUser.id
                    }))), h.createElement(y._8, {
                        margin: {
                            right: .5
                        }
                    }, h.createElement(E, null, this.renderWhisperButton())), h.createElement(y._8, {
                        margin: {
                            right: .5
                        }
                    }, h.createElement(E, null, this.renderGiftSubscriptionButton())), h.createElement(y._8, {
                        flexGrow: 1,
                        textAlign: y._42.Right
                    }, h.createElement(E, null, h.createElement(b.a, {
                        key: "MoreOptionsButton"
                    }, h.createElement(y.w, {
                        ariaLabel: Object(g.d)("More options", "ViewerCard"),
                        icon: y._23.More,
                        "data-a-target": "viewer-card-more-button"
                    }), h.createElement(y.q, {
                        direction: y.r.BottomRight,
                        "data-a-target": "viewer-card-more-balloon"
                    }, h.createElement(y._8, {
                        padding: {
                            y: 1
                        }
                    }, h.createElement(y._6, {
                        onClick: this.handleReportUserClick,
                        "data-a-target": "viewer-card-report-button"
                    }, h.createElement(y._8, {
                        padding: {
                            x: 1
                        }
                    }, Object(g.d)("Report {user}", {
                        user: this.props.targetLogin
                    }, "ViewerCard")))))))))
                }, t.prototype.renderWhisperButton = function() {
                    if (!this.props.data.currentUser || !this.props.data.targetUser) return null;
                    var e = Object(H.a)(this.props.data.currentUser.id, this.props.data.targetUser.id);
                    return h.createElement(v.a, {
                        onClick: this.onWhisperButtonClick,
                        isPopout: this.props.isPopout,
                        threadID: e
                    })
                }, t.prototype.renderGiftSubscriptionButton = function() {
                    return !this.props.data.channelUser || !this.props.data.channelUser.subscriptionProducts || this.props.data.channelUser.subscriptionProducts.length < 1 ? null : h.createElement(B.a, {
                        onClick: this.toggleGiftPage,
                        subProductId: this.props.data.channelUser.subscriptionProducts[0].id,
                        giftRecipient: this.props.targetLogin
                    })
                }, t.prototype.renderSubGiftSelect = function() {
                    return h.createElement(y._8, null, h.createElement(P.a, {
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        isGift: !0
                    }), h.createElement(y._32, {
                        background: y.n.Base,
                        attachBottom: !0,
                        display: y.R.Flex,
                        flexDirection: y.T.Row,
                        justifyContent: y._7.Between,
                        fullWidth: !0,
                        flexGrow: 0,
                        padding: 2
                    }, h.createElement(F, {
                        onBack: this.toggleGiftPage,
                        channelDisplayName: this.props.data.channelUser.displayName,
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        giftRecipient: this.props.data.targetUser.login,
                        reportSubMenuAction: this.trackBuyGiftSubEvent
                    })))
                }, t.prototype.renderChatActions = function() {
                    var e = [];
                    return this.isModeratorOrHigher() && e.push(h.createElement(R, {
                        key: "ModActions",
                        channelID: this.props.data.channelUser.id,
                        userID: this.props.data.targetUser.id,
                        userLogin: this.props.targetLogin
                    })), this.isOwnerOrHigher() && e.push(h.createElement(L, {
                        key: "OwnerActions",
                        sendMessageToTMI: this.props.sendMessageToTMI,
                        targetLogin: this.props.targetLogin
                    })), e.length ? h.createElement(y._32, {
                        display: y.R.Flex,
                        background: y.n.Alt2,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, h.createElement(E, null, e)) : null
                }, t.prototype.isOwnerOrHigher = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && (e.currentUser.roles.isGlobalMod || e.currentUser.roles.isSiteAdmin || e.currentUser.roles.isStaff || this.isOwner())
                }, t.prototype.isModeratorOrHigher = function() {
                    return this.isOwnerOrHigher() || this.props.data.channelUser.self && this.props.data.channelUser.self.isModerator
                }, t.prototype.isOwner = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && e.currentUser.id === e.channelUser.id
                }, t.prototype.reportContentTypeFromSourceType = function(e) {
                    switch (e) {
                        case x.a.chat_message:
                            return U.a.Chat;
                        case x.a.room_message:
                            return U.a.Room;
                        case x.a.recent_raids:
                            return U.a.Raid;
                        case x.a.viewer_list:
                        default:
                            return U.a.User
                    }
                }, t = i.__decorate([Object(w.d)("ViewerCard"), Object(k.a)(z, {
                    options: function(e) {
                        return {
                            variables: {
                                targetLogin: e.targetLogin,
                                channelID: e.channelID
                            }
                        }
                    }
                })], t)
            }(h.Component),
            W = (n("PqoY"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        dragging: !1
                    }, t.onDragStart = function(e) {
                        t.cardContainerRef && t.layerRef && e.nativeEvent.which === a.Left && (t.layerRef.addEventListener("mousemove", t.onDrag), window.addEventListener("mouseup", t.onDragEnd), window.addEventListener("selectstart", t.cancelSelection), t.setState({
                            dragging: !0
                        }), t.initCardX = t.cardContainerRef.offsetLeft, t.initCardY = t.cardContainerRef.offsetTop, t.initMouseX = e.clientX, t.initMouseY = e.clientY)
                    }, t.onDrag = function(e) {
                        t.nextTop = t.initCardY + e.clientY - t.initMouseY, t.nextLeft = t.initCardX + e.clientX - t.initMouseX, t.rafHandle || (t.rafHandle = requestAnimationFrame(function() {
                            t.rafHandle = 0, t.cardContainerRef && (t.cardContainerRef.style.top = t.nextTop + "px", t.cardContainerRef.style.left = t.nextLeft + "px")
                        }))
                    }, t.onDragEnd = function() {
                        t.removeDragListeners(), t.setState({
                            dragging: !1
                        })
                    }, t.removeDragListeners = function() {
                        t.layerRef && t.layerRef.removeEventListener("mousemove", t.onDrag), window.removeEventListener("mouseup", t.onDragEnd), window.removeEventListener("selectstart", t.cancelSelection)
                    }, t.cancelSelection = function(e) {
                        e.preventDefault()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.hideViewerCard(), this.rafHandle && cancelAnimationFrame(this.rafHandle), this.removeDragListeners()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.viewerCardOptions && e.viewerCardOptions && (e.viewerCardOptions.targetLogin === this.props.viewerCardOptions.targetLogin && e.viewerCardOptions.initialTopOffset === this.props.viewerCardOptions.initialTopOffset || this.cardContainerRef && (this.cardContainerRef.style.left = "0px"))
                }, t.prototype.render = function() {
                    var e = this,
                        t = {
                            "viewer-card-layer": !0,
                            "viewer-card-layer--dragging": this.state.dragging
                        },
                        n = {
                            "viewer-card-layer__draggable": !0,
                            "viewer-card-layer__draggable--dragging": this.state.dragging
                        },
                        a = null;
                    if (this.props.viewerCardOptions) {
                        var i = {};
                        if (this.layerRef) {
                            var r = this.layerRef.getBoundingClientRect();
                            i = {
                                top: Math.max(this.props.viewerCardOptions.initialTopOffset - r.top, 0) + "px"
                            }
                        }
                        a = h.createElement(y._2, {
                            className: m(n),
                            position: y._15.Absolute
                        }, h.createElement("div", {
                            onMouseDown: this.onDragStart,
                            ref: function(t) {
                                e.cardContainerRef = t
                            },
                            style: i,
                            "data-a-target": "viewer-card-positioner"
                        }, h.createElement(G, {
                            channelID: this.props.channelID,
                            hideViewerCard: this.props.hideViewerCard,
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            sendMessageToTMI: this.props.onSendMessage,
                            showReportUserModal: this.props.showReportUserModal,
                            sourceID: this.props.viewerCardOptions.sourceID,
                            sourceType: this.props.viewerCardOptions.sourceType,
                            targetLogin: this.props.viewerCardOptions.targetLogin,
                            isLoggedIn: this.props.isLoggedIn,
                            login: this.props.login
                        })))
                    }
                    return h.createElement(y._2, {
                        className: m(t),
                        fullHeight: !0,
                        fullWidth: !0,
                        position: y._15.Relative,
                        zIndex: y._59.Default
                    }, h.createElement("div", {
                        onMouseUp: this.onDragEnd,
                        ref: function(t) {
                            e.layerRef = t
                        }
                    }, a))
                }, t
            }(h.Component));
        var q = Object(r.b)(function(e) {
            return {
                viewerCardOptions: e.viewerCard.viewerCardOptions,
                isLoggedIn: Object(c.d)(e)
            }
        }, function(e) {
            return Object(s.b)({
                hideViewerCard: u.c,
                login: function() {
                    return Object(d.f)(o.a.ViewerCard)
                },
                showReportUserModal: function(e) {
                    var t = i.__rest(e, []);
                    return Object(l.d)(p.a, t)
                }
            }, e)
        })(W);
        n.d(t, "a", function() {
            return q
        })
    },
    ZoRy: function(e, t) {},
    aSvS: function(e, t, n) {
        "use strict";
        var a, i;
        n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.DismissToken = "token_dismissed", e.RedeemToken = "token_redeemed", e.RequestEligibility = "eligibility_requested", e.RequestToken = "token_requested"
            }(a || (a = {})),
            function(e) {
                e.Click = "clicked_manage_in_dashboards", e.Dismiss = "dismissed"
            }(i || (i = {}))
    },
    aUOx: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return {
                type: a.b.Info,
                id: Object(i.a)("info"),
                message: e
            }
        };
        var a = n("qkCi"),
            i = n("INp2")
    },
    ass3: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        }), t.c = function() {
            return {
                type: a
            }
        }, t.d = function(e, t, n, a) {
            void 0 === a && (a = 0);
            return {
                type: i,
                viewerCardOptions: {
                    initialTopOffset: a,
                    sourceID: n,
                    sourceType: t,
                    targetLogin: e
                }
            }
        };
        var a = "viewer-card.VIEWER_CARD_HIDDEN",
            i = "viewer-card.VIEWER_CARD_SHOWN"
    },
    bL99: function(e, t) {},
    bQ8d: function(e, t, n) {
        "use strict";

        function a(e, t) {
            if (void 0 === t && (t = 0), t > e) {
                var n = t;
                t = e, e = n
            }
            return t + Math.floor(Math.random() * (e - t + 1))
        }
        t.a = a, t.b = function(e) {
            return e[a(e.length - 1)]
        }, t.c = function(e, t) {
            var n = 0,
                a = [];
            for (; n < e;) a.push(t(n)), n += 1;
            return a
        }
    },
    bgpf: function(e, t, n) {
        "use strict";
        var a, i, r;
        n.d(t, "c", function() {
                return a
            }), n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.NewChatter = "NEW_CHATTER"
            }(a || (a = {})),
            function(e) {
                e.Available = "AVAILABLE", e.Dismissed = "DISMISSED", e.Eligible = "ELIGIBLE", e.Redeemed = "REDEEMED"
            }(i || (i = {})),
            function(e) {
                e.TokenNotAvailable = "TOKEN_NOT_AVAILABLE", e.TokenNotFound = "TOKEN_NOT_FOUND", e.UserBanned = "USER_CHAT_BANNED", e.UserNotFollowing = "FOLLOWER_ONLY_MODE_ENFORCEMENT_FAILED", e.UserNotSubbed = "SUB_ONLY_MODE_ENFORCEMENT_FAILED", e.UserTimedOut = "USER_CHAT_TIMED_OUT"
            }(r || (r = {}))
    },
    c8Oh: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.userPreferences.languagePreferences
        };
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("V9YC"),
            s = n("iJpA");
        i.o.store.registerReducer("userPreferences", function(e, t) {
            switch (void 0 === e && (e = {
                languagePreferences: Object(s.b)()
            }), t.type) {
                case r.a:
                    return a.__assign({}, e, {
                        languagePreferences: t.languagePreferences
                    });
                default:
                    return e
            }
        })
    },
    cv4W: function(e, t, n) {
        e.exports = n.p + "assets/gift3-03f7dd6edab76b3567ff92bba447d5cb.png"
    },
    cxe8: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_SharePurchase_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isCommerceRevShareEnabled"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "purchaseTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "asin"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "imageThumbnail"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "40"
                                                    }
                                                }],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteSets"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteSet"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "token"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "badges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "badge"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "quantity"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "inGameContents"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "imageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "30"
                                                            }
                                                        }],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 433
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery Chat_SharePurchase_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nsettings {\nisCommerceRevShareEnabled\n}\nself {\npurchaseTokens {\nid\ntitle\nasin\nimageThumbnail: imageURL(width: 40)\nimageURL\nemoteSets {\nid\nemoteSet {\nid\nemotes {\nid\ntoken\n}\n}\n}\nbadges {\nid\nbadge{\n...badge\n}\n}\nbits {\nid\nquantity\n}\ninGameContents {\nid\nimageURL(width: 30)\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    "d/6e": function(e, t) {},
    dQj3: function(e, t, n) {
        "use strict";
        t.b = l, t.a = function(e, t, n) {
            if (!e.author) return null;
            var d = l(e.body.emotes),
                c = e.badges.reduce(function(e, t) {
                    return e[t.setID] = t.version, e
                }, {});
            return {
                type: r.b.Message,
                messageType: r.c.Post,
                id: e.id,
                badges: c,
                bits: e.bitsUsed,
                timestamp: 0,
                deleted: !1,
                user: a.__assign({
                    userID: e.author.id,
                    userLogin: e.author.login,
                    userType: i.a.User,
                    color: e.authorColor
                }, Object(o.a)(e.authorName, e.author.login)),
                messageParts: Object(s.g)(e.body.content, d, e.bitsUsed, t, n, e.authorName)
            }
        }, t.c = function(e) {
            if (null === e.tags || null === e.message || null === e.bits_used) return null;
            var t = "ChatMessage:" + e.tags.msg_id;
            return {
                __typename: "ChatMessage",
                "Symbol(id)": t,
                id: e.tags.msg_id,
                authorName: e.tags.display_name,
                authorColor: e.tags.color,
                author: {
                    __typename: "User",
                    "Symbol(id)": "User:" + e.user_id,
                    id: e.user_id,
                    login: e.username
                },
                body: {
                    __typename: "MessageBody",
                    "Symbol(id)": "$" + t + ".body",
                    content: e.message,
                    emotes: e.tags.emotes.map(function(e, n) {
                        return {
                            __typename: "EmbeddedEmote",
                            "Symbol(id)": t + ".body.emotes." + n,
                            emoteID: e.id.toString(),
                            from: e.start,
                            to: e.end,
                            setID: e.set
                        }
                    })
                },
                badges: e.tags.badges.map(function(e, n) {
                    return {
                        __typename: "Badge",
                        "Symbol(id)": t + ".badges." + n,
                        setID: e.badge_set_id,
                        version: e.badge_set_version
                    }
                }),
                bitsUsed: e.bits_used
            }
        };
        var a = n("TToO"),
            i = n("6Agf"),
            r = n("qkCi"),
            s = n("l21v"),
            o = n("e1CU");

        function l(e) {
            var t = [];
            return e.forEach(function(e) {
                t[e.from] = {
                    startIndex: e.from,
                    endIndex: e.to + 1,
                    data: {
                        images: {
                            themed: !1,
                            sources: {
                                "1x": Object(s.f)(e.emoteID, 1),
                                "2x": Object(s.f)(e.emoteID, 2),
                                "4x": Object(s.f)(e.emoteID, 4)
                            }
                        }
                    }
                }
            }), t
        }
    },
    dVd7: function(e, t) {},
    e9ZN: function(e, t) {},
    "eMi+": function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsPinnedCheerV2_Leaderboards"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "leaderboard"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "10"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "leaderboardItem"
                                                },
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "secondsRemaining"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "leaderboard"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isEnabled"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "timePeriodType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsLeaderboardItem"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "rank"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entryKey"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 490
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/bits/models/bits-leaderboard-item-fragment.gql"\n#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery BitsPinnedCheerV2_Leaderboards($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\nleaderboard (first: 10) {\nid\n...leaderboardItem\nsecondsRemaining\n}\nsettings {\nleaderboard {\nisEnabled\ntimePeriodType\n}\nisRecentEnabled\nrecentTimeoutMs\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\n}\nself {\nbitsLeaderboardItem {\nid\nrank\nscore\nentryKey\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};

        function r(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }
        a.definitions = a.definitions.concat(r(n("+po9").definitions)), a.definitions = a.definitions.concat(r(n("Mful").definitions)), e.exports = a
    },
    f1ZS: function(e, t) {},
    fbnZ: function(e, t) {},
    g7wA: function(e, t, n) {
        "use strict";
        t.e = function(e, t, n) {
            var i = null,
                s = e.reduce(function(s, o, u) {
                    switch (o.type) {
                        case p.a.Text:
                            var g = u > 0;
                            return s.concat(function(e, t, n, i, r) {
                                var s = [],
                                    o = "";
                                i && (o = o.concat(" "));
                                var l = e.content.split(/\s+/);
                                return l.forEach(function(e, i) {
                                    if ("" !== e) {
                                        var r = i < l.length - 1 ? e + " " : e;
                                        (t || n) && function(e, t, n) {
                                            var a = e.trim().toLowerCase();
                                            return t && a === t.toLowerCase() || n && a === n.toLowerCase()
                                        }(e, t, n) ? (s = (s = s.concat(o)).concat(a.createElement(m._8, {
                                            className: "chat-line__message--mention-recipient",
                                            display: m.R.InlineFlex,
                                            key: "" + e + i,
                                            "data-a-target": "chat-message-mention"
                                        }, r)), o = "") : o = o.concat(r)
                                    }
                                }), s = s.concat(o), a.createElement("span", {
                                    key: "chat-line__message-text-" + r,
                                    "data-a-target": "chat-message-text"
                                }, s)
                            }(o, t, n, g, u));
                        case p.a.Mention:
                            var f = "";
                            return function(e) {
                                return e.content && e.content.sender
                            }(o) && t && o.content.sender.toLowerCase() === t.toLowerCase() ? f = "chat-line__message--mention-sender" : function(e) {
                                return e.content && e.content.recipient
                            }(o) && t && o.content.recipient.toLowerCase() === t.toLowerCase() && (f = "chat-line__message--mention-recipient"), s.concat(a.createElement(m._8, {
                                className: f,
                                display: m.R.InlineFlex,
                                key: u,
                                "data-a-target": "chat-message-mention"
                            }, "@" + o.content.recipient));
                        case p.a.Link:
                            return s = s.concat(h(u, o)), e.length > u + 1 && e[u + 1].type === p.a.Link && s.push(" "), s;
                        case p.a.Emote:
                            return s = s.concat(a.createElement(l.a, {
                                key: u,
                                emote: o.content
                            })), e.length > u + 1 && e[u + 1].type === p.a.Emote && s.push(" "), s;
                        case p.a.ClipLink:
                            return i ? s.concat(h(u, o)) : (i = a.createElement(r.a, {
                                key: u
                            }, a.createElement(d.a, {
                                slug: o.content.slug
                            })), s);
                        case p.a.VideoLink:
                            return i ? s.concat(h(u, o)) : (i = a.createElement(c.a, {
                                key: u,
                                id: o.content.id,
                                url: o.content.url
                            }), s);
                        default:
                            return s.concat(a.createElement("span", {
                                key: u
                            }))
                    }
                }, []);
            i && (s = s.concat(i));
            return s
        }, t.f = function(e) {
            if (e.moderationType === u.e.Ban) return e.reason ? a.createElement("span", {
                className: "chat-line__moderation--ban-with-reason"
            }, Object(i.d)("{userLogin} has been banned. Reason: {reason}", {
                userLogin: e.userLogin,
                reason: e.reason
            }, "ChatLine")) : a.createElement("span", {
                className: "chat-line__moderation--ban"
            }, Object(i.d)("{userLogin} is now banned from this channel.", {
                userLogin: e.userLogin
            }, "ChatLine"));
            if (e.reason && e.duration) {
                var t = Object(i.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                    duration: e.duration,
                    reason: e.reason,
                    userLogin: e.userLogin
                }, "ChatLine");
                return a.createElement("span", {
                    className: "chat-line__moderation--timeout-with-reason"
                }, t)
            }
            if (e.duration) return a.createElement("span", {
                className: "chat-line__moderation--timeout"
            }, Object(i.d)("{userLogin} has been timed out for {duration} seconds.", {
                userLogin: e.userLogin,
                duration: e.duration
            }, "ChatLine"))
        }, t.b = function(e) {
            var t = e.daysLeft;
            0 === t && (t = e.hoursLeft);
            var n = {
                bitsTotal: a.createElement("strong", null, Object(o.e)(e.total, {
                    style: "currency",
                    currency: "USD"
                })),
                charityName: a.createElement("strong", null, e.charityName),
                learnMoreURL: a.createElement("a", {
                    href: e.learnMore,
                    target: "_blank"
                }, e.learnMore),
                hashtag: a.createElement("strong", null, e.hashtag),
                timeRemaining: Object(o.e)(t)
            };
            return a.createElement("span", null, 0 === e.daysLeft ? (r = n, Object(i.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more hours to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                bitsTotal: r.bitsTotal,
                charityName: r.charityName,
                timeRemaining: r.timeRemaining,
                hashtag: r.hashtag,
                learnMoreURL: r.learnMoreURL
            }, "ChatLine")) : function(e) {
                return Object(i.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more days to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                    bitsTotal: e.bitsTotal,
                    charityName: e.charityName,
                    timeRemaining: e.timeRemaining,
                    hashtag: e.hashtag,
                    learnMoreURL: e.learnMoreURL
                }, "ChatLine")
            }(n));
            var r
        }, t.h = function(e) {
            var t = e.enabled ? Object(i.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                length: e.length
            }, "ChatLine") : Object(i.d)("This room is no longer in slow mode.", "ChatLine");
            return a.createElement("span", null, t)
        }, t.g = function(e) {
            var t;
            if (e.length > 0) {
                var n = e.join(", ");
                t = Object(i.d)("The moderators of this channel are: {moderatorList}", {
                    moderatorList: n
                }, "ChatLine")
            } else t = Object(i.d)("There are no moderators of this channel.", "ChatLine");
            return a.createElement("span", null, t)
        }, t.d = function(e) {
            if (e.enabled) {
                var t = 0 === e.length ? Object(i.d)("This room is in followers-only mode.", "ChatLine") : Object(i.d)("This room is now in {length} followers-only mode.", {
                    length: Object(s.a)(60 * e.length)
                }, "ChatLine");
                return a.createElement("span", null, t)
            }
            return a.createElement("span", null, Object(i.d)("This room is no longer in followers-only mode.", "ChatLine"))
        }, t.c = function(e) {
            return e.enabled ? a.createElement("span", null, Object(i.d)("This room is now in emote-only mode.", "ChatLine")) : a.createElement("span", null, Object(i.d)("This room is no longer in emote-only mode.", "ChatLine"))
        }, t.i = function(e) {
            var t = e.enabled ? Object(i.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(i.d)("This room is no longer in subscriber-only mode.", "ChatLine");
            return a.createElement("span", null, t)
        }, t.a = g, t.j = function(e) {
            return a.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, g(new Date(e)))
        }, t.k = function(e) {
            return a.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, function(e, t) {
                void 0 === t && (t = {});
                var n = i.o.intl.getLanguageCode() || "en";
                return Intl.DateTimeFormat(n, t).format(e)
            }(new Date(e), {
                hour: "numeric",
                minute: "numeric"
            }))
        };
        var a = n("GiK3"),
            i = (n.n(a), n("6sO2")),
            r = n("o5l+"),
            s = n("FsFC"),
            o = n("J4ib"),
            l = n("hXeO"),
            d = n("5vPJ"),
            c = n("kBA+"),
            u = n("qkCi"),
            p = n("mwvJ"),
            m = n("Odds");

        function h(e, t) {
            return a.createElement("a", {
                key: e,
                className: "chat-line__message--link",
                href: t.content.url,
                target: "_blank",
                rel: "noreferrer noopener"
            }, t.content.displayText)
        }

        function g(e) {
            var t = e.getHours() % 12;
            0 === t && (t = 12);
            var n = e.getMinutes(),
                a = n.toString();
            return n < 10 && (a = "0" + a), t + ":" + a
        }
    },
    gGMi: function(e, t, n) {
        "use strict";
        var a;
        n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.Everyone = "EVERYONE", e.Moderator = "MODERATOR", e.Subscriber = "SUBSCRIBER"
            }(a || (a = {}));
        var i, r = ((i = {})[a.Everyone] = "Everyone", i[a.Moderator] = "Mods", i[a.Subscriber] = "Subs", i)
    },
    gwjw: function(e, t) {},
    hXeO: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var a = n("GiK3"),
            i = (n.n(a), n("8RKZ")),
            r = function(e) {
                var t, n = e.emote,
                    r = n.alt || "";
                return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = a.createElement("strong", {
                    className: "chat-line__message--cheer-amount",
                    style: {
                        color: n.cheerColor
                    }
                }, n.cheerAmount)), a.createElement(i.a, {
                    alt: r,
                    cheerText: t,
                    className: "chat-line__message--emote",
                    srcKey: "1x",
                    srcSet: n.images
                })
            }
    },
    hcyD: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return d
        });
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("vH/s"),
            s = n("l7/s"),
            o = (n.n(s), n("QFW6")),
            l = this,
            d = function(e) {
                return a.__awaiter(l, void 0, void 0, function() {
                    var t, n, l, d;
                    return a.__generator(this, function(c) {
                        switch (c.label) {
                            case 0:
                                t = null, c.label = 1;
                            case 1:
                                return c.trys.push([1, 3, , 4]), [4, i.o.apollo.client.query({
                                    query: s,
                                    variables: {
                                        id: e.channelID
                                    }
                                })];
                            case 2:
                                return t = c.sent(), [3, 4];
                            case 3:
                                return n = c.sent(), i.j.error(n, "ChatEvent query failed."), [3, 4];
                            case 4:
                                return t && t.data || i.j.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), l = t && t.data && t.data.user || null, d = a.__assign({}, Object(o.a)(e), {
                                    broadcast_id: i.n.getVideoPlayerTrackingData().broadcastID,
                                    channel_id: e.channelID,
                                    game: l && l.stream && l.stream.game && l.stream.game.name,
                                    live: !!(l && l.stream && l.stream.id.length > 0),
                                    partner: l && l.isPartner || !1,
                                    play_session_id: i.n.getVideoPlayerTrackingData().playSessionID,
                                    player: e.player,
                                    ritual_nca: e.fromNewChatterRitual || !1,
                                    sub_only_mode: e.subOnlyMode
                                }), i.n.track(r.SpadeEventType.Chat, d), [2]
                        }
                    })
                })
            }
    },
    iJpA: function(e, t, n) {
        "use strict";
        t.c = function(e, t) {
            var n = this;
            return function(r) {
                return a.__awaiter(n, void 0, void 0, function() {
                    var n, d;
                    return a.__generator(this, function(a) {
                        return n = new Set(l()), t ? n.add(e) : n.delete(e), d = Array.from(n), i.l.set(o, d), r(Object(s.b)(d)), [2]
                    })
                })
            }
        }, t.a = function() {
            var e = this;
            return function(t) {
                return a.__awaiter(e, void 0, void 0, function() {
                    return a.__generator(this, function(e) {
                        return i.l.set(o, []), t(Object(s.b)([])), [2]
                    })
                })
            }
        }, t.b = l;
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("D9fv"),
            s = n("V9YC"),
            o = "languageDirectoryFilters";

        function l() {
            return i.l.get(o, []).filter(function(e) {
                return r.a.has(e)
            })
        }
    },
    iWdz: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsCard_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "totalBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nextBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "progress"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "current"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "next"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "teams"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 381
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery BitsCard_Bits($name: ID!) {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\nuser(id: $name) {\nid\ndisplayName\ncheer {\nid\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nrecentMinimumBits\nevent\n}\n}\nself {\nbitsBadge {\nid\ntotalBits\nnextBits\nprogress\ncurrent {\n...badge\n}\nnext {\n...badge\n}\n}\n}\ntournament {\nid\nteams {\nid\nname\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    imaO: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RedeemNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "redeemRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 182
            }
        };
        a.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RedeemNewChatterToken($input: RedeemRitualTokenInput!) {\nredeemRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    iqz2: function(e, t) {},
    "j/3B": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualToken"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "RitualToken"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "expiresAt"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "status"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 64
            }
        };
        n.loc.source = {
            body: "fragment ritualToken on RitualToken {\nid\nexpiresAt\nstatus\ntype\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    j7j0: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("WIs4"),
            l = n("aMxy"),
            d = n("HZww"),
            c = n("CSlQ"),
            u = n("Odds"),
            p = n("CU3k"),
            m = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return !this.props.data.loading && !this.props.data.error && this.props.data.user && this.props.data.user.stream && this.props.data.user.stream.id ? i.createElement(u._31, {
                        value: Object(r.e)(this.props.data.user.stream.viewersCount || 0),
                        label: Object(r.d)("Watching Now", "ChannelViewersCount"),
                        icon: u._23.GlyphLive,
                        "data-a-target": "channel-viewers-count"
                    }) : null
                }, t = a.__decorate([Object(s.a)(p), Object(o.a)(function(e) {
                    return {
                        query: p,
                        skip: e.data.loading || !e.data.user || !e.data.user.id,
                        variables: {
                            login: e.login
                        },
                        topic: e.data.user ? Object(d.z)(e.data.user.id) : "",
                        type: l.PubsubMessageType.ViewCount,
                        mutator: function(e, t) {
                            return t.user && t.user.stream ? (t.user.stream.viewersCount = e.viewers, t) : t
                        }
                    }
                }), Object(c.d)("ChannelViewersCount")], t)
            }(i.Component);
        n.d(t, "a", function() {
            return m
        })
    },
    jIAO: function(e, t, n) {
        "use strict";
        n("R9op");
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("ass3");
        i.o.store.registerReducer("viewerCard", function(e, t) {
            switch (void 0 === e && (e = {
                viewerCardOptions: null
            }), t.type) {
                case r.a:
                    return a.__assign({}, e, {
                        viewerCardOptions: null
                    });
                case r.b:
                    return t.viewerCardOptions ? a.__assign({}, e, {
                        viewerCardOptions: a.__assign({}, t.viewerCardOptions)
                    }) : e;
                default:
                    return e
            }
        })
    },
    jML9: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 43
            }
        };
        n.loc.source = {
            body: "query RaidNotification_User {\nuser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jPU6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "kBA+": function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("SZoP"),
            l = n("GxDs"),
            d = n("Odds"),
            c = n("s+oZ"),
            u = {
                ERROR: "video-chat-card-error"
            },
            p = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.video,
                        n = e.error,
                        a = e.loading;
                    if (n || t && !t.owner) return i.createElement(l.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "VideoChatCard"),
                            description: Object(r.d)("We couldn't find that video", "VideoChatCard")
                        }
                    });
                    if (a || !t) return i.createElement(l.a, null);
                    var s = i.createElement(d.Q, null, Object(r.c)(new Date(t.publishedAt), "medium"), i.createElement("span", null, " · "), Object(o.a)(t.owner.login, t.owner.displayName));
                    return i.createElement(l.a, {
                        data: {
                            title: t.title,
                            description: s,
                            previewImageURL: t.previewThumbnailURL,
                            contentURL: this.props.url
                        }
                    })
                }, t
            }(i.Component),
            m = function(e) {
                return {
                    variables: {
                        videoID: e.id
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: "cache-first"
                }
            },
            h = Object(s.a)(c, {
                options: m
            })(p);
        n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return h
        })
    },
    kjfG: function(e, t) {},
    kpSd: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("RH2O"),
            s = n("2KeS"),
            o = n("6sO2"),
            l = n("RweG"),
            d = n("aMxy"),
            c = n("HZww"),
            u = n("pexS"),
            p = n("R9op"),
            m = n("DtWM"),
            h = n("zCIC"),
            g = n("4Q5V"),
            f = n("CSlQ"),
            b = n("Odds"),
            v = (n("rMeN"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            k = 10,
            y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type) && (t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= k ? t.setState({
                            isAutoScrolling: !0
                        }) : t.setState({
                            isAutoScrolling: !1
                        }))
                    }, t.handleResize = function() {
                        t.state.isAutoScrolling && t.scrollToBottom()
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom)
                    }, t.scrollToBottom = function() {
                        t.scroll && t.scroll.scrollContent && (t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight)
                    }, t.reportChatRenderSent = function() {
                        t.props.chatRenderSentEvent && t.props.latencyTracking.reportCustomEvent(t.props.chatRenderSentEvent)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    v.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    v.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this,
                        t = this.props.messages.map(function(t) {
                            return i.createElement(g.a, {
                                badgeSets: e.props.badgeSets,
                                channelID: e.props.channelID,
                                isCurrentUserModerator: e.props.isCurrentUserModerator,
                                isCurrentUserStaff: e.props.isCurrentUserStaff,
                                message: t,
                                key: t.id,
                                showAutoModActions: e.props.showAutoModActions,
                                showModerationActions: e.props.showModerationActions,
                                showModerationIcons: e.props.showModerationIcons && !e.props.isEmbedded,
                                showTimestamps: e.props.showTimestamps,
                                currentUserDisplayName: e.props.currentUserDisplayName,
                                currentUserLogin: e.props.currentUserLogin,
                                onPushMessage: e.props.onPushMessage,
                                doesNotUpdate: !0,
                                onRenderReportChatSent: e.reportChatRenderSent
                            })
                        });
                    return i.createElement(b._8, {
                        refDelegate: this.props.containerRef,
                        className: "chat-list",
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        flexWrap: b.U.NoWrap,
                        overflow: b._11.Hidden,
                        flexGrow: 1
                    }, i.createElement(m.a, {
                        onResize: this.handleResize
                    }), i.createElement(b._2, {
                        flexGrow: 1
                    }, i.createElement(h.b, {
                        className: "chat-list__lines",
                        scrollRef: this.saveScrollRef,
                        "data-a-target": "chat-scroller"
                    }, i.createElement(b._2, {
                        flexGrow: 1,
                        fullHeight: !0,
                        padding: {
                            bottom: 1
                        }
                    }, i.createElement("div", {
                        role: "log"
                    }, t)))), i.createElement(b._8, {
                        className: "chat-list__more-messages-placeholder",
                        position: b._15.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : i.createElement(b._2, {
                        display: b.R.Flex,
                        justifyContent: b._7.Center,
                        alignItems: b.c.Center,
                        position: b._15.Absolute,
                        padding: .5,
                        attachBottom: !0,
                        fullWidth: !0
                    }, i.createElement("div", {
                        className: "chat-list__more-messages",
                        onClick: this.handleClickMoreMessages
                    }, Object(o.d)("More messages below.", "ChatList")))
                }, t = a.__decorate([Object(f.d)("ChatListPresentation", {
                    autoReportInteractive: !0
                })], t)
            }(i.Component),
            C = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t, n, a = e.pubsub.messages.chatRichEmbedInfo;
                    a && this.props.pubsub.messages.chatRichEmbedInfo !== a && o.o.apollo.client.writeQuery({
                        query: u,
                        variables: {
                            slug: a.data.twitch_metadata.clip_metadata.slug
                        },
                        data: (t = a, n = t.data.twitch_metadata.clip_metadata, {
                            clip: {
                                slug: n.slug,
                                id: n.id,
                                url: t.data.request_url,
                                title: t.data.title,
                                thumbnailURL: t.data.thumbnail_url,
                                curator: n.curator_id ? {
                                    displayName: t.data.author_name,
                                    id: n.curator_id,
                                    __typename: "User"
                                } : null,
                                broadcaster: n.channel_display_name ? {
                                    displayName: n.channel_display_name,
                                    id: n.broadcaster_id,
                                    __typename: "User"
                                } : null,
                                __typename: "Clip"
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return i.createElement(y, {
                        channelID: this.props.channelID,
                        badgeSets: this.props.badgeSets,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        channelLogin: this.props.channelLogin,
                        onPushMessage: this.props.onPushMessage,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isCurrentUserStaff: this.props.isCurrentUserStaff,
                        isEmbedded: this.props.isEmbedded,
                        messages: this.props.messages,
                        showAutoModActions: this.props.showAutoModActions,
                        showModerationActions: this.props.showModerationActions,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        currentUserLogin: this.props.currentUserLogin,
                        containerRef: this.props.containerRef,
                        chatRenderSentEvent: this.props.chatRenderSentEvent
                    })
                }, t
            }(i.Component);
        var _, E = Object(s.d)(Object(r.b)(function(e, t) {
            return {
                chatRenderSentEvent: Object(p.c)(e),
                messages: Object(p.a)(e, t.channelLogin),
                showAutoModActions: e.chat.showAutoModActions,
                showModerationActions: e.chat.showModerationActions,
                showModerationIcons: e.chat.showModIcons,
                showTimestamps: e.chat.showTimestamps
            }
        }), Object(l.a)([{
            skip: function(e) {
                return !e.channelID
            },
            topic: function(e) {
                return e.channelID ? Object(c.q)(e.channelID) : ""
            },
            mapMessageTypesToProps: (_ = {}, _[d.PubsubMessageType.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", _)
        }]))(C);
        n.d(t, !1, function() {
            return C
        }), n.d(t, "a", function() {
            return E
        })
    },
    l669: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UnbanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 132
            }
        };
        n.loc.source = {
            body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "l7/s": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_ChatEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 116
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "mR/9": function(e, t) {},
    mbxv: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("+V/3"),
            s = n("Odds"),
            o = (n("2IkU"), n("6sO2")),
            l = n("vH/s"),
            d = function(e) {
                var t = Date.now() / 1e3;
                e.badge_type = e.badge_type.toLowerCase().replace(/( |\s)/g, "_"), o.o.tracking.track(l.SpadeEventType.ChatBadgeClick, Object.assign({
                    client_time: t
                }, e))
            };
        n.d(t, "a", function() {
            return c
        });
        var c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isHovering: !1
                }, t.onMouseOver = function() {
                    t.setState({
                        isHovering: !0
                    })
                }, t.onMouseOut = function() {
                    t.setState({
                        isHovering: !1
                    })
                }, t.onBadgeClickHandler = function() {
                    d({
                        badge_type: t.props.badge.title,
                        badge_url_target: t.targetURL
                    })
                }, t
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = this.props.badge,
                    t = e.title,
                    n = e.image1x,
                    a = e.image2x,
                    r = e.image4x,
                    l = i.createElement("img", {
                        alt: t,
                        "aria-label": Object(o.d)("{badgeTitle} badge", {
                            badgeTitle: t
                        }, "Badge"),
                        className: "chat-badge",
                        src: n,
                        srcSet: n + " 1x, " + a + " 2x, " + r + " 4x",
                        onMouseOver: this.onMouseOver,
                        onMouseOut: this.onMouseOut
                    });
                return this.targetURL = this.getTargetURL(), "" !== this.targetURL && (l = i.createElement("a", {
                    href: this.targetURL,
                    onClick: this.onBadgeClickHandler,
                    target: "_blank",
                    "data-a-target": "chat-badge"
                }, l)), this.state.isHovering ? i.createElement(s._49, {
                    align: s._50.Left,
                    "data-a-target": "chat-badge",
                    display: s.R.Inline,
                    key: n,
                    label: t,
                    offsetY: "0.9rem"
                }, l) : l
            }, t.prototype.getTargetURL = function() {
                var e = this.props.badge;
                switch (e.clickAction) {
                    case r.d:
                        return e.clickURL;
                    case r.b:
                        return e.channelName ? this.getSubscriberLink() : "";
                    case r.c:
                        return "https://www.twitch.tv/products/turbo?ref=chat_badge";
                    default:
                        return ""
                }
            }, t.prototype.getSubscriberLink = function() {
                return "https://www.twitch.tv/" + this.props.badge.channelName + "/subscribe?ref=in_chat_subscriber_link"
            }, t
        }(i.Component)
    },
    mmly: function(e, t) {},
    nQZu: function(e, t) {},
    "pV+t": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 62
            }
        };
        n.loc.source = {
            body: "query ChatUser($login: String!) {\nuser(login: $login) {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pexS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsChatCard_Clip"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "slug"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clip"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thumbnailURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "curator"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcaster"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "query ClipsChatCard_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nthumbnailURL\ntitle\nslug\nurl\ncurator {\nid\ndisplayName\n}\nbroadcaster {\nid\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pg5l: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 236
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_CurrentUser($channelLogin: String!) {\ncurrentUser {\nid\nlogin\ndisplayName\nchatColor\n}\nuser(login: $channelLogin) {\nid\nself {\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    q4rf: function(e, t) {},
    qDcU: function(e, t) {},
    qkCi: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "e", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        });
        var a, i, r, s, o = n("aMxy");
        n.o(o, "ModerationActions") && n.d(t, "d", function() {
                return o.ModerationActions
            }),
            function(e) {
                e[e.Message = 0] = "Message", e[e.Moderation = 1] = "Moderation", e[e.ModerationAction = 2] = "ModerationAction", e[e.TargetedModerationAction = 3] = "TargetedModerationAction", e[e.AutoMod = 4] = "AutoMod", e[e.Connected = 5] = "Connected", e[e.Disconnected = 6] = "Disconnected", e[e.Reconnect = 7] = "Reconnect", e[e.Hosting = 8] = "Hosting", e[e.Unhost = 9] = "Unhost", e[e.Hosted = 10] = "Hosted", e[e.Subscription = 11] = "Subscription", e[e.Resubscription = 12] = "Resubscription", e[e.SubGift = 13] = "SubGift", e[e.Clear = 14] = "Clear", e[e.SubscriberOnlyMode = 15] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 16] = "FollowerOnlyMode", e[e.SlowMode = 17] = "SlowMode", e[e.EmoteOnlyMode = 18] = "EmoteOnlyMode", e[e.RoomMods = 19] = "RoomMods", e[e.RoomState = 20] = "RoomState", e[e.Raid = 21] = "Raid", e[e.Unraid = 22] = "Unraid", e[e.Ritual = 23] = "Ritual", e[e.Notice = 24] = "Notice", e[e.Info = 25] = "Info", e[e.BadgesUpdated = 26] = "BadgesUpdated", e[e.Purchase = 27] = "Purchase", e[e.BitsCharity = 28] = "BitsCharity", e[e.CrateGift = 29] = "CrateGift"
            }(a || (a = {})),
            function(e) {
                e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention"
            }(i || (i = {})),
            function(e) {
                e[e.Ban = 0] = "Ban", e[e.Timeout = 1] = "Timeout"
            }(r || (r = {})),
            function(e) {
                e[e.MessageRejectedPrompt = 0] = "MessageRejectedPrompt", e[e.MessageRejected = 1] = "MessageRejected", e[e.MessageAllowed = 2] = "MessageAllowed", e[e.MessageDenied = 3] = "MessageDenied"
            }(s || (s = {}))
    },
    rIzn: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var a = n("6sO2"),
            i = function() {
                return a.l.get("ritualsFeatureFlagOverride", a.b.get("viewer_milestones_enabled", !1))
            }
    },
    rMeN: function(e, t) {},
    "s+oZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "VideoChatCard_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "previewThumbnailURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "90"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "51"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "publishedAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 162
            }
        };
        n.loc.source = {
            body: "query VideoChatCard_Video($videoID: ID!) {\nvideo(id: $videoID) {\nid\ntitle\npreviewThumbnailURL(width: 90 height: 51)\npublishedAt\nowner {\nid\nlogin\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ssrl: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "NewChatterRitual_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ritualTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "ritualToken"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 167
            }
        };
        a.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nquery NewChatterRitual_Channel($id: ID!) {\nchannel: user(id: $id) {\nid\nself {\nritualTokens {\n...ritualToken\n}\n}\nstream {\nid\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    sx3M: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var a = n("TToO"),
            i = n("knr3"),
            r = n("OAwv"),
            s = n("GiK3"),
            o = n("6sO2"),
            l = n("7vx8"),
            d = n("j7/Y"),
            c = n("2o2f"),
            u = n("w9tK"),
            p = n("vH/s"),
            m = n("J4ib"),
            h = n("T0IN"),
            g = n("CSlQ"),
            f = n("DBTH"),
            b = n("S4HN"),
            v = n("6yQB"),
            k = n("j7j0"),
            y = n("Odds"),
            C = function(e) {
                return e.stream ? s.createElement(y._32, {
                    "data-test-selector": "channel-surfing-channel-info",
                    display: y.R.Flex,
                    flexShrink: 0,
                    padding: {
                        bottom: 1,
                        right: 2
                    },
                    alignItems: y.c.Center
                }, s.createElement(y.m, {
                    src: e.stream.broadcaster.profileImageURL,
                    alt: e.stream.broadcaster.displayName,
                    size: e.avatarSize
                }), s.createElement(y._8, {
                    margin: {
                        left: 1
                    }
                }, s.createElement(y._8, {
                    ellipsis: !0
                }, s.createElement(y.Q, {
                    type: y._46.Span,
                    fontSize: y.V.Size6,
                    breakpointExtraExtraLarge: {
                        fontSize: y.V.Size5
                    },
                    color: y.K.Alt
                }, e.stream.broadcaster.displayName)), s.createElement(y._32, {
                    color: y.K.Live,
                    display: y.R.InlineFlex,
                    zIndex: y._59.Above
                }, s.createElement(k.a, {
                    login: e.stream.broadcaster.login
                })))) : s.createElement(y._14, {
                    height: e.avatarSize,
                    width: 80
                })
            },
            _ = n("RH2O"),
            E = n("Aj/L"),
            S = n("3T7g"),
            w = n("11M/"),
            N = n("kpSd"),
            T = n("fc0G"),
            D = n("5MsU"),
            O = (n("Sra5"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.checkIfStreamIsLoaded = function(e) {
                        t.setState({
                            isOnline: e === D.a.Online
                        })
                    }, t.emptyCallBack = function() {}, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(y._8, {
                        className: "channel-surfing-player",
                        "data-test-selector": "channel-surfing-player",
                        display: y.R.Flex,
                        flexDirection: y.T.Column,
                        fullHeight: !0,
                        fullWidth: !0
                    }, s.createElement(y._32, {
                        background: y.n.Base,
                        display: y.R.Flex,
                        flexDirection: y.T.Column,
                        flexWrap: y.U.NoWrap,
                        breakpointMedium: {
                            flexDirection: y.T.Row
                        },
                        elevation: 3,
                        fullHeight: !0,
                        fullWidth: !0
                    }, this.renderVideoPlayer(), this.renderRightColumn()))
                }, t.prototype.renderVideoPlayer = function() {
                    return s.createElement(y._8, {
                        className: "channel-surfing-player__video",
                        flexGrow: 1,
                        position: y._15.Relative,
                        fullHeight: !0,
                        fullWidth: !0
                    }, this.props.stream && s.createElement(y.e, {
                        type: y.j.FadeIn,
                        duration: y.g.ExtraLong,
                        timing: y.i.EaseInOut,
                        delay: y.f.Medium,
                        enabled: this.state.isOnline && this.props.showTransition
                    }, s.createElement(T.c, {
                        "data-test-selector": "channel-surfing-player__video",
                        channelLogin: this.props.stream.broadcaster.login,
                        playerTypeOverride: T.b.Onboarding,
                        onStreamStatusChange: this.checkIfStreamIsLoaded,
                        disableTheatreButton: !0,
                        disableFullscreen: !0
                    })))
                }, t.prototype.renderRightColumn = function() {
                    if (this.props.chatEnabled) return s.createElement(y._32, {
                        className: "channel-surfing-player__right-column",
                        position: y._15.Relative,
                        background: this.props.stream ? y.n.Base : y.n.Alt
                    }, this.renderChat())
                }, t.prototype.renderChat = function() {
                    if (this.props.stream && this.props.user) return s.createElement(y._32, {
                        className: "channel-surfing-player__chat",
                        "data-test-selector": "channel-surfing-player__chat",
                        background: y.n.Base,
                        color: y.K.Base,
                        position: y._15.Absolute,
                        display: y.R.Flex,
                        flexDirection: y.T.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        overflow: y._11.Hidden
                    }, s.createElement(y.e, {
                        type: y.j.FadeIn,
                        duration: y.g.Medium,
                        delay: y.f.Short,
                        timing: y.i.EaseInOut,
                        enabled: this.props.showTransition
                    }, this.renderChatHeader()), s.createElement(N.a, {
                        badgeSets: new S.c([], [], this.props.stream.broadcaster.login),
                        channelID: this.props.stream.broadcaster.id,
                        channelLogin: this.props.stream.broadcaster.login,
                        currentUserDisplayName: this.props.user.displayName,
                        currentUserLogin: this.props.user.login,
                        isEmbedded: !1,
                        isCurrentUserModerator: !1,
                        isCurrentUserStaff: !1,
                        onPushMessage: this.emptyCallBack,
                        containerRef: this.emptyCallBack
                    }), s.createElement(y._8, {
                        display: y.R.Hide
                    }, s.createElement(w.a, {
                        channelLogin: this.props.stream.broadcaster.login,
                        clientID: o.o.config.legacyClientID
                    })))
                }, t.prototype.renderChatHeader = function() {
                    return s.createElement(y._8, {
                        margin: {
                            left: 2,
                            top: 1
                        }
                    }, s.createElement(y._8, {
                        breakpointExtraLarge: {
                            display: y.R.Hide
                        }
                    }, s.createElement(C, {
                        "data-test-selector": "channel-surfing-player__channel-avatar",
                        stream: this.props.stream,
                        avatarSize: 30
                    })), s.createElement(y._8, {
                        display: y.R.Hide,
                        breakpointExtraLarge: {
                            display: y.R.InlineBlock
                        }
                    }, s.createElement(C, {
                        "data-test-selector": "channel-surfing-player__channel-avatar",
                        stream: this.props.stream,
                        avatarSize: 40
                    })))
                }, t
            }(s.Component));
        var I, M = Object(_.b)(function(e) {
                return {
                    user: Object(E.c)(e)
                }
            })(O),
            R = n("HW6M");
        n("DbMg");
        ! function(e) {
            e.Left = "left", e.Right = "right"
        }(I || (I = {}));
        var L, x = function(e) {
                var t = e.position === I.Left,
                    n = e.position === I.Right,
                    a = {
                        "channel-surfing-preview-card": !0,
                        "channel-surfing-preview-card--left": t,
                        "channel-surfing-preview-card--right": n
                    };
                return s.createElement(y._32, {
                    className: R(a),
                    attachLeft: t,
                    attachRight: n,
                    position: y._15.Absolute,
                    zIndex: y._59.Above,
                    display: y.R.Hide,
                    breakpointMedium: {
                        display: y.R.Flex
                    },
                    fullHeight: !0
                }, s.createElement(y.e, {
                    type: e.position === I.Left ? y.j.SlideInLeft : y.j.SlideInRight,
                    delay: y.f.Long,
                    duration: y.g.Medium,
                    timing: y.i.EaseInOut,
                    enabled: e.showTransition
                }, s.createElement(y._2, {
                    fullHeight: !0,
                    fullWidth: !0
                }, s.createElement("div", {
                    "data-test-selector": "channel-surfing-preview-card",
                    onClick: e.onClick
                }, s.createElement(y._32, {
                    elevation: 3,
                    display: y.R.Flex,
                    fullHeight: !0,
                    fullWidth: !0
                }, s.createElement(y._49, {
                    display: y.R.Flex,
                    direction: t ? y._51.Right : y._51.Left,
                    label: e.label
                }, s.createElement("img", {
                    src: e.previewImageURL,
                    alt: e.label,
                    width: "100%",
                    height: "100%"
                })))))))
            },
            j = (n("+kbm"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(y._8, {
                        display: y.R.Flex,
                        flexDirection: y.T.Column,
                        padding: {
                            y: .5
                        },
                        breakpointMedium: {
                            padding: {
                                y: 1
                            }
                        },
                        breakpointExtraExtraLarge: {
                            padding: {
                                y: 2
                            }
                        },
                        fullHeight: !0,
                        fullWidth: !0
                    }, s.createElement(y._8, {
                        className: "channel-surfing-content--top-section"
                    }, this.renderLanguageSelector()), s.createElement(y._8, {
                        "data-test-selector": "channel-surfing-content",
                        display: y.R.Flex,
                        justifyContent: y._7.Center,
                        alignItems: y.c.Center,
                        flexDirection: y.T.Row,
                        position: y._15.Relative,
                        fullHeight: !0,
                        fullWidth: !0
                    }, this.renderPreviousCard(), this.renderPreviousButton(), s.createElement(M, {
                        stream: this.props.stream,
                        chatEnabled: this.props.chatEnabled,
                        showTransition: this.props.showTransition
                    }), this.renderNextButton(), this.renderNextCard()), s.createElement(y._8, {
                        className: "channel-surfing-content--bottom-section"
                    }, s.createElement(y.e, {
                        type: y.j.FadeIn,
                        duration: y.g.Medium,
                        delay: y.f.Short,
                        timing: y.i.EaseInOut,
                        enabled: this.props.showTransition
                    }, this.renderContentUnderVideo())))
                }, t.prototype.renderPreviousButton = function() {
                    if (this.props.stream) return s.createElement(y._8, {
                        className: "channel-surfing-content__button " + (this.props.previousSection.stream ? "" : "channel-surfing-content__button--hidden"),
                        "data-test-selector": "channel-surfing-content__previous-button",
                        margin: {
                            right: 1
                        },
                        breakpointMedium: {
                            margin: {
                                left: 4,
                                right: 1
                            }
                        },
                        breakpointExtraExtraLarge: {
                            margin: {
                                left: 5,
                                right: 2
                            }
                        }
                    }, s.createElement(y.w, {
                        ariaLabel: Object(o.d)("Go to previous", "ChannelSurfingContent"),
                        icon: y._23.AngleLeft,
                        type: y.y.Hollow,
                        size: y.x.Large,
                        onClick: this.props.previousSection.onSelect
                    }))
                }, t.prototype.renderPreviousCard = function() {
                    if (this.props.previousSection.stream) return s.createElement(x, {
                        "data-test-selector": "channel-surfing-content__previous-card",
                        label: this.props.previousSection.stream.broadcaster.displayName,
                        previewImageURL: this.props.previousSection.stream.previewImageURL,
                        position: I.Left,
                        onClick: this.props.previousSection.onSelect,
                        showTransition: this.props.showTransition
                    })
                }, t.prototype.renderNextButton = function() {
                    return this.props.stream ? s.createElement(y._8, {
                        className: "channel-surfing-content__button " + (this.props.nextSection.stream ? "" : "channel-surfing-content__button--hidden"),
                        "data-test-selector": "channel-surfing-content__next-button",
                        margin: {
                            left: 1
                        },
                        breakpointMedium: {
                            margin: {
                                left: 1,
                                right: 4
                            }
                        },
                        breakpointExtraExtraLarge: {
                            margin: {
                                left: 2,
                                right: 5
                            }
                        }
                    }, s.createElement(y.w, {
                        ariaLabel: Object(o.d)("Go to next", "ChannelSurfingContent"),
                        icon: y._23.AngleRight,
                        type: y.y.Hollow,
                        size: y.x.Large,
                        onClick: this.props.nextSection.onSelect
                    })) : s.createElement(y._8, {
                        margin: {
                            left: 1,
                            right: 4
                        },
                        breakpointMedium: {
                            margin: {
                                left: 1,
                                right: 4
                            }
                        },
                        breakpointExtraExtraLarge: {
                            margin: {
                                left: 2,
                                right: 5
                            }
                        }
                    }, s.createElement(y._14, {
                        width: 34,
                        height: 34
                    }))
                }, t.prototype.renderNextCard = function() {
                    if (this.props.nextSection.stream) return s.createElement(x, {
                        "data-test-selector": "channel-surfing-content__next-card",
                        label: this.props.nextSection.stream.broadcaster.displayName,
                        previewImageURL: this.props.nextSection.stream.previewImageURL,
                        position: I.Right,
                        onClick: this.props.nextSection.onSelect,
                        showTransition: this.props.showTransition
                    })
                }, t.prototype.renderLanguageSelector = function() {
                    return this.props.stream ? s.createElement(y._8, {
                        "data-test-selector": "channel-surfing-player__language-selector",
                        display: y.R.Flex,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(v.a, null)) : s.createElement(y._8, {
                        display: y.R.InlineBlock,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(y._14, {
                        height: 30,
                        width: 98
                    }))
                }, t.prototype.renderContentUnderVideo = function() {
                    return s.createElement(y._8, {
                        display: y.R.Flex,
                        justifyContent: y._7.Between,
                        margin: {
                            top: 1
                        }
                    }, !this.props.chatEnabled && s.createElement(C, {
                        stream: this.props.stream,
                        avatarSize: 40
                    }), this.renderSuggestedBecauseSection(this.props.chatEnabled))
                }, t.prototype.renderSuggestedBecauseSection = function(e) {
                    return this.props.stream ? s.createElement(y._8, {
                        "data-test-selector": "channel-surfing-player__suggested-because",
                        display: y.R.Flex,
                        flexDirection: e ? y.T.Row : y.T.RowReverse
                    }, s.createElement(y.E, {
                        src: this.props.stream.game.boxArtURL,
                        alt: this.props.stream.game.displayName,
                        aspect: y.l.Aspect3x4,
                        size: y.F.Size4
                    }), s.createElement(y._8, {
                        display: y.R.Flex,
                        flexDirection: y.T.Column,
                        margin: {
                            left: e ? 1 : 0,
                            right: e ? 0 : 1
                        },
                        overflow: y._11.Hidden
                    }, s.createElement(y.Q, {
                        type: y._46.Span,
                        color: y.K.Alt,
                        fontSize: y.V.Size5,
                        breakpointMedium: {
                            fontSize: y.V.Size6
                        },
                        ellipsis: !0
                    }, Object(o.d)("Suggested because you followed", "ChannelSurfingContent")), s.createElement(y._8, null, s.createElement(y.Q, {
                        type: y._46.Span,
                        color: y.K.Base,
                        fontSize: y.V.Size6,
                        breakpointMedium: {
                            fontSize: y.V.Size5
                        },
                        ellipsis: !0
                    }, this.props.stream.game.displayName)))) : s.createElement(y._8, {
                        display: y.R.Flex,
                        flexDirection: y.T.Row,
                        alignItems: y.c.Center
                    }, s.createElement(y._14, {
                        width: 40,
                        height: 55
                    }), s.createElement(y._8, {
                        margin: {
                            left: 1
                        }
                    }, s.createElement(y._14, {
                        width: 180,
                        lineCount: 2
                    })))
                }, t
            }(s.Component)),
            U = n("hdYS"),
            B = n("4bQk"),
            A = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        followedNameForToast: null
                    }, t.onFollow = function(e) {
                        t.props.stream && (t.setState({
                            followedNameForToast: t.props.stream.broadcaster.displayName
                        }, function() {
                            return setTimeout(function() {
                                return t.setState({
                                    followedNameForToast: null
                                })
                            }, 3e3)
                        }), t.props.onFollow && t.props.onFollow(e))
                    }, t.toBold = function(e) {
                        return s.createElement(y.Q, {
                            key: "" + e,
                            type: y._46.Span,
                            bold: !0
                        }, e)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(y._8, {
                        "data-test-selector": "channel-surfing-footer-follow",
                        padding: {
                            x: 1,
                            y: 1
                        },
                        fullWidth: !0
                    }, this.renderFollowedToast(), this.renderCenterContent(), s.createElement(y.e, {
                        type: y.j.SlideInBottom,
                        duration: y.g.Medium,
                        delay: y.f.Medium,
                        timing: y.i.EaseInOut,
                        enabled: !!this.props.transitionDirection
                    }, s.createElement(y._8, {
                        display: y.R.Flex,
                        justifyContent: y._7.Center
                    }, this.renderSkipButton(), this.renderFollowButton())))
                }, t.prototype.renderCenterContent = function() {
                    return s.createElement(y._8, {
                        "data-test-selector": "channel-surfing-footer-follow__text",
                        display: y.R.Flex,
                        flexDirection: y.T.Column,
                        margin: {
                            bottom: 1
                        },
                        textAlign: y._42.Center
                    }, s.createElement(y.e, {
                        type: this.props.transitionDirection === H.Right ? y.j.SlideInRight : y.j.SlideInLeft,
                        duration: y.g.Medium,
                        delay: y.f.Short,
                        timing: y.i.EaseInOut,
                        enabled: !!this.props.transitionDirection
                    }, s.createElement(y._8, {
                        justifyContent: y._7.Center,
                        margin: {
                            bottom: .5
                        },
                        display: y.R.Hide,
                        breakpointLarge: {
                            display: y.R.Flex
                        }
                    }, this.renderAvatar()), s.createElement(y._8, null, this.renderTitle())), s.createElement(y._32, {
                        margin: {
                            top: .5
                        },
                        display: y.R.Hide,
                        breakpointMedium: {
                            display: y.R.InlineBlock
                        }
                    }, this.renderSubtitle()))
                }, t.prototype.renderAvatar = function() {
                    return this.props.stream ? s.createElement(y._8, null, s.createElement(y._8, {
                        breakpointExtraLarge: {
                            display: y.R.Hide
                        }
                    }, s.createElement(y.m, {
                        src: this.props.stream.broadcaster.profileImageURL,
                        alt: this.props.stream.broadcaster.displayName,
                        size: 30
                    })), s.createElement(y._8, {
                        display: y.R.Hide,
                        breakpointExtraLarge: {
                            display: y.R.InlineBlock
                        }
                    }, s.createElement(y.m, {
                        src: this.props.stream.broadcaster.profileImageURL,
                        alt: this.props.stream.broadcaster.displayName,
                        size: 40
                    }))) : s.createElement(y._8, null, s.createElement(y._8, {
                        breakpointExtraLarge: {
                            display: y.R.Hide
                        }
                    }, s.createElement(y._14, {
                        height: 30,
                        width: 30
                    })), s.createElement(y._8, {
                        display: y.R.Hide,
                        breakpointExtraLarge: {
                            display: y.R.InlineBlock
                        }
                    }, s.createElement(y._14, {
                        height: 40,
                        width: 40
                    })))
                }, t.prototype.renderTitle = function() {
                    var e = this;
                    return this.props.stream ? s.createElement(y._8, null, s.createElement(y.Q, {
                        type: y._46.Span,
                        color: y.K.Base,
                        fontSize: y.V.Size5,
                        breakpointLarge: {
                            fontSize: y.V.Size4
                        },
                        breakpointExtraExtraLarge: {
                            fontSize: y.V.Size3
                        }
                    }, Object(o.d)("Follow <x:bold>{broadcasterDisplayName}</x:bold>?", {
                        "x:bold": function(t) {
                            return e.toBold(t)
                        },
                        broadcasterDisplayName: this.props.stream.broadcaster.displayName
                    }, "ChannelSurfingFollowFooter"))) : s.createElement(y._8, {
                        display: y.R.InlineBlock
                    }, s.createElement(y._14, {
                        lineCount: 1,
                        width: 200
                    }))
                }, t.prototype.renderSubtitle = function() {
                    return this.props.stream ? s.createElement(y.Q, {
                        type: y._46.Span,
                        color: y.K.Alt,
                        fontSize: y.V.Size6,
                        breakpointLarge: {
                            fontSize: y.V.Size5
                        },
                        breakpointExtraExtraLarge: {
                            fontSize: y.V.Size4
                        }
                    }, Object(o.d)("Follow to stay updated with upcoming broadcasts.", "ChannelSurfingFollowFooter")) : s.createElement(y._8, {
                        display: y.R.InlineBlock
                    }, s.createElement(y._14, {
                        lineCount: 1,
                        width: 300
                    }))
                }, t.prototype.renderSkipButton = function() {
                    return s.createElement(y._8, {
                        margin: {
                            right: .5
                        },
                        "data-test-selector": "channel-surfing-footer-follow__skip"
                    }, s.createElement(y._8, {
                        breakpointMedium: {
                            display: y.R.Hide
                        }
                    }, this.renderSkipButtonWithSize(y.z.Small)), s.createElement(y._8, {
                        display: y.R.Hide,
                        breakpointMedium: {
                            display: y.R.Flex
                        },
                        breakpointExtraExtraLarge: {
                            display: y.R.Hide
                        }
                    }, this.renderSkipButtonWithSize(y.z.Default)), s.createElement(y._8, {
                        display: y.R.Hide,
                        breakpointExtraExtraLarge: {
                            display: y.R.Flex
                        }
                    }, this.renderSkipButtonWithSize(y.z.Large)))
                }, t.prototype.renderSkipButtonWithSize = function(e) {
                    return s.createElement(y.v, {
                        type: y.B.Hollow,
                        icon: y._23.Close,
                        size: e,
                        onClick: this.props.onSkip,
                        disabled: null === this.props.stream
                    }, Object(o.d)("Skip", "ChannelSurfingFollowFooter"))
                }, t.prototype.renderFollowButton = function() {
                    if (this.props.stream) {
                        var e = this.props.stream.broadcaster.login;
                        return s.createElement(y._8, {
                            margin: {
                                left: .5
                            },
                            "data-test-selector": "channel-surfing-footer-follow__follow"
                        }, s.createElement(y._8, {
                            breakpointMedium: {
                                display: y.R.Hide
                            }
                        }, this.renderFollowButtonWithSize(e, y.z.Small)), s.createElement(y._8, {
                            display: y.R.Hide,
                            breakpointMedium: {
                                display: y.R.Flex
                            },
                            breakpointExtraExtraLarge: {
                                display: y.R.Hide
                            }
                        }, this.renderFollowButtonWithSize(e, y.z.Default)), s.createElement(y._8, {
                            display: y.R.Hide,
                            breakpointExtraExtraLarge: {
                                display: y.R.Flex
                            }
                        }, this.renderFollowButtonWithSize(e, y.z.Large)))
                    }
                }, t.prototype.renderFollowButtonWithSize = function(e, t) {
                    return s.createElement(U.a, {
                        channelLogin: e,
                        size: t,
                        onFollow: this.onFollow,
                        onUnfollow: this.props.onUnfollow,
                        followUIType: B.b.IconAndText,
                        unfollowUIType: B.b.IconAndText,
                        hideDropdownWhenFollowing: !0,
                        showLoadingPlaceholder: !0
                    })
                }, t.prototype.renderFollowedToast = function() {
                    var e = this;
                    if (this.state.followedNameForToast) return s.createElement(y._8, {
                        position: y._15.Relative,
                        "data-test-selector": "channel-surfing-footer-follow__follow-toast"
                    }, s.createElement(y.q, {
                        direction: y.r.TopCenter,
                        size: y.s.Medium,
                        offsetY: "3rem",
                        show: !0
                    }, s.createElement(y._32, {
                        background: y.n.AccentAlt2,
                        textAlign: y._42.Center,
                        padding: .5,
                        fullWidth: !0
                    }, s.createElement(y.Q, {
                        type: y._46.Span,
                        color: y.K.Base,
                        fontSize: y.V.Size6,
                        breakpointLarge: {
                            fontSize: y.V.Size5
                        },
                        breakpointExtraExtraLarge: {
                            fontSize: y.V.Size4
                        }
                    }, Object(o.d)("You followed <x:bold>{followedName}</x:bold>!", {
                        "x:bold": function(t) {
                            return e.toBold(t)
                        },
                        followedName: this.state.followedNameForToast
                    }, "ChannelSurfingFollowFooter")))))
                }, t
            }(s.Component),
            F = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(y._32, {
                        "data-test-selector": "channel-surfing-header",
                        display: y.R.Flex,
                        alignItems: y.c.Center,
                        justifyContent: y._7.Center,
                        padding: {
                            x: 4,
                            y: 1
                        },
                        breakpointMedium: {
                            padding: {
                                x: 2
                            }
                        },
                        fullWidth: !0
                    }, this.renderBackButton(), this.renderHeaderCenterText(), this.renderDoneButton())
                }, t.prototype.renderBackButton = function() {
                    return s.createElement(y._8, {
                        "data-test-selector": "channel-surfing-header__back",
                        position: y._15.Absolute,
                        margin: {
                            left: 1
                        },
                        attachLeft: !0
                    }, s.createElement(y._8, {
                        breakpointMedium: {
                            display: y.R.Hide
                        }
                    }, this.renderBackButtonWithSize(y.z.Small)), s.createElement(y._8, {
                        display: y.R.Hide,
                        breakpointMedium: {
                            display: y.R.InlineBlock
                        },
                        breakpointExtraExtraLarge: {
                            display: y.R.Hide
                        }
                    }, this.renderBackButtonWithSize(y.z.Default)), s.createElement(y._8, {
                        display: y.R.Hide,
                        breakpointExtraExtraLarge: {
                            display: y.R.InlineBlock
                        }
                    }, this.renderBackButtonWithSize(y.z.Large)))
                }, t.prototype.renderBackButtonWithSize = function(e) {
                    var t, n = Object(o.d)("Back to Game selection", "ChannelSurfingHeader");
                    return t = e === y.z.Small ? s.createElement(y.w, {
                        size: y.x.Small,
                        ariaLabel: n,
                        type: y.y.Hollow,
                        icon: y._23.AngleLeft,
                        onClick: this.props.onBack,
                        disabled: this.props.loading
                    }) : s.createElement(y.v, {
                        size: e,
                        type: y.B.Hollow,
                        icon: y._23.AngleLeft,
                        onClick: this.props.onBack,
                        disabled: this.props.loading
                    }, n), s.createElement(y._8, {
                        alignSelf: y.d.Start,
                        breakpointMedium: {
                            justifyContent: y._7.End,
                            alignSelf: y.d.Center
                        }
                    }, t)
                }, t.prototype.renderHeaderCenterText = function() {
                    return s.createElement(y._8, {
                        "data-test-selector": "channel-surfing-header__text",
                        display: y.R.Flex,
                        alignItems: y.c.Center,
                        flexDirection: y.T.Column
                    }, s.createElement(y._8, {
                        margin: {
                            top: .5
                        }
                    }, s.createElement(y.Q, {
                        color: y.K.Base,
                        fontSize: y.V.Size5,
                        breakpointLarge: {
                            fontSize: y.V.Size4
                        },
                        breakpointExtraExtraLarge: {
                            fontSize: y.V.Size3
                        }
                    }, Object(o.d)("Now, let's find you some channels to follow.", "ChannelSurfingHeader"))), s.createElement(y._8, {
                        margin: {
                            y: .5
                        },
                        display: y.R.Hide,
                        breakpointMedium: {
                            display: y.R.Block
                        }
                    }, s.createElement(y.Q, {
                        color: y.K.Alt,
                        fontSize: y.V.Size6,
                        breakpointLarge: {
                            fontSize: y.V.Size5
                        },
                        breakpointExtraExtraLarge: {
                            fontSize: y.V.Size4
                        }
                    }, Object(o.d)("Sometimes it's the personality, sometimes it's the game. You decide.", "ChannelSurfingHeader"))))
                }, t.prototype.renderDoneButton = function() {
                    return s.createElement(y._8, {
                        "data-test-selector": "channel-surfing-header__done",
                        position: y._15.Absolute,
                        margin: {
                            right: 1
                        },
                        attachRight: !0
                    }, s.createElement(y._8, {
                        breakpointMedium: {
                            display: y.R.Hide
                        }
                    }, this.renderDoneButtonWithSize(y.z.Small)), s.createElement(y._8, {
                        display: y.R.Hide,
                        breakpointMedium: {
                            display: y.R.InlineBlock
                        },
                        breakpointExtraExtraLarge: {
                            display: y.R.Hide
                        }
                    }, this.renderDoneButtonWithSize(y.z.Default)), s.createElement(y._8, {
                        display: y.R.Hide,
                        breakpointExtraExtraLarge: {
                            display: y.R.InlineBlock
                        }
                    }, this.renderDoneButtonWithSize(y.z.Large)))
                }, t.prototype.renderDoneButtonWithSize = function(e) {
                    return s.createElement(y.v, {
                        size: e,
                        onClick: this.props.onDone,
                        disabled: this.props.loading
                    }, Object(o.d)("Done", "ChannelSurfingHeader"))
                }, t
            }(s.Component),
            P = "channel-surfing";

        function V(e) {
            o.n.track(p.SpadeEventType.OnboardingSurfAction, e)
        }! function(e) {
            e.Skip = "skip", e.MoveLeft = "move_l", e.MoveRight = "move_r", e.Follow = "follow"
        }(L || (L = {}));
        var H, z = n("0gf8"),
            G = 20;
        ! function(e) {
            e.Left = "left", e.Right = "right"
        }(H || (H = {}));
        var W = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.dataMappedToState = !1, n.followedChannelsCount = 0, n.lastLanguagePreferencesUsedToUpdateData = new Set(n.props.languagePreferences), n.calculateProgress = function() {
                        return n.state.channelSurfingData.length ? Math.min(100, (n.state.channelIndex + 1) / n.state.channelSurfingData.length * 100) : 0
                    }, n.mapAndShuffleData = function(e) {
                        if (!e.currentUser || !e.currentUser.followedGames || !e.currentUser.followedGames.nodes) return [];
                        var t, n = new Set((t = e.currentUser.id, o.l.get(P + "-" + t, []))),
                            a = e.currentUser.followedGames.nodes.filter(function(e) {
                                return !!e
                            }).map(function(e) {
                                return e.streams
                            }).filter(function(e) {
                                return !!e
                            }).map(function(e) {
                                return e.edges
                            }).filter(function(e) {
                                return !!e
                            }).map(function(e) {
                                return e
                            }).map(function(e) {
                                return e
                            }).filter(function(e) {
                                return !!e
                            }).map(function(e) {
                                return e.map(function(e) {
                                    return e.node
                                })
                            }).filter(function(e) {
                                return !!e
                            }).map(function(e) {
                                return e
                            }).filter(function(e) {
                                return !!e
                            }).map(function(e) {
                                return e.filter(function(e) {
                                    return e && e.id && !e.isMature && e.broadcaster && e.broadcaster.login && e.type === c.a.Live
                                })
                            }).map(function(e) {
                                return e.filter(function(e) {
                                    return !n.has(e.broadcaster.login) && null === e.broadcaster.self.follower.followedAt
                                })
                            }).filter(function(e) {
                                return e.length
                            }),
                            i = Math.max(1, G / a.length),
                            r = a.reduce(function(e, t) {
                                return e.concat(t.slice(0, i))
                            }, []);
                        return Object(h.a)(r)
                    }, n.refreshDataAndRestart = function() {
                        return a.__awaiter(n, void 0, void 0, function() {
                            var e = this;
                            return a.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, this.props.data.refetch()];
                                    case 1:
                                        return t.sent(), this.setState(function(t) {
                                            return {
                                                channelSurfingData: e.mapAndShuffleData(e.props.data),
                                                previouslyViewedCount: t.previouslyViewedCount + t.channelIndex,
                                                channelIndex: 0
                                            }
                                        }), [2]
                                }
                            })
                        })
                    }, n.goBackToCommunitySelectionPage = function() {
                        o.o.history.push("/hi" + location.search)
                    }, n.trackAndComplete = function() {
                        Object(b.d)(), n.followedChannelsCount > 0 ? n.redirectWithQueryParams("/directory/following/live") : n.redirectWithQueryParams("/directory/following/foryou")
                    }, n.trackAndSkip = function() {
                        V({
                            action: L.Skip,
                            view_number: n.state.previouslyViewedCount + n.state.channelIndex
                        }), n.setState(function(e) {
                            var t, a, i, r, s = e.channelSurfingData[e.channelIndex],
                                l = e.channelSurfingData.slice();
                            return s && (l.splice(e.channelIndex, 1), t = n.props.data.currentUser.id, a = s.broadcaster.login, i = P + "-" + t, (r = o.l.get(i, [])).push(a), o.l.set(i, r)), {
                                channelSurfingData: l
                            }
                        }, function() {
                            return n.setTransition(H.Right)
                        })
                    }, n.trackAndFollow = function() {
                        V({
                            action: L.Follow,
                            view_number: n.state.previouslyViewedCount + n.state.channelIndex
                        }), n.followedChannelsCount += 1, n.state.channelIndex < n.state.channelSurfingData.length && n.setState(function(e) {
                            return {
                                channelIndex: e.channelIndex + 1
                            }
                        }, function() {
                            return n.setTransition(H.Right)
                        })
                    }, n.trackUnfollowedChannel = function() {
                        n.followedChannelsCount -= 1
                    }, n.trackAndMoveToPreviousChannel = function() {
                        n.state.channelIndex > 0 && (V({
                            action: L.MoveLeft,
                            view_number: n.state.previouslyViewedCount + n.state.channelIndex
                        }), n.setState(function(e) {
                            return {
                                channelIndex: e.channelIndex - 1
                            }
                        }, function() {
                            return n.setTransition(H.Left)
                        }))
                    }, n.trackAndMoveToNextChannel = function() {
                        n.state.channelIndex < n.state.channelSurfingData.length && (V({
                            action: L.MoveRight,
                            view_number: n.state.previouslyViewedCount + n.state.channelIndex
                        }), n.setState(function(e) {
                            return {
                                channelIndex: e.channelIndex + 1
                            }
                        }, function() {
                            return n.setTransition(H.Right)
                        }))
                    }, n.setTransition = function(e) {
                        n.setState({
                            transitionDirection: e
                        }, function() {
                            return setTimeout(function() {
                                return n.setState({
                                    transitionDirection: null
                                })
                            }, 1e3)
                        })
                    };
                    var i = o.o.experiments.getAssignment(f.i),
                        r = o.o.experiments.getAssignment(f.h);
                    return n.state = {
                        channelSurfingExperimentAssignment: Object(f.m)(i, r) ? r : null,
                        channelIndex: 0,
                        previouslyViewedCount: 0,
                        channelSurfingData: [],
                        transitionDirection: null
                    }, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    o.o.setPageTitle(Object(m.d)("Welcome", "ChannelSurfingPage")), i.bind("left", this.trackAndMoveToPreviousChannel), i.bind("right", this.trackAndMoveToNextChannel)
                }, t.prototype.componentDidUpdate = function() {
                    this.props.data && !this.props.data.loading && this.props.latencyTracking.reportInteractive(), (null !== this.state.channelSurfingExperimentAssignment && (!this.props.data.currentUser || Object(f.o)(new Date(this.props.data.currentUser.createdAt))) || r.parse(window.location.search).onboarding_override) && (this.state.channelSurfingData.length || !this.dataMappedToState) || this.redirectWithQueryParams("/")
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this,
                        n = this.followedGamesDataLoaded(e) && !this.dataMappedToState,
                        a = !this.followedGamesDataLoaded(this.props) && this.followedGamesDataLoaded(e) && this.languagePreferencesUpdated(e);
                    n && this.setState({
                        channelSurfingData: this.mapAndShuffleData(e.data),
                        channelIndex: 0
                    }, function() {
                        t.setTransition(H.Right), t.dataMappedToState = !0, t.lastLanguagePreferencesUsedToUpdateData = new Set(e.languagePreferences)
                    }), a && (this.loadingNewDataTimer && (clearTimeout(this.loadingNewDataTimer), this.loadingNewDataTimer = 0), this.loadingNewDataTimer = setTimeout(function() {
                        t.setState({
                            channelSurfingData: t.mapAndShuffleData(e.data),
                            channelIndex: 0
                        }, function() {
                            return t.setTransition(H.Right)
                        }), t.lastLanguagePreferencesUsedToUpdateData = new Set(e.languagePreferences), t.loadingNewDataTimer = 0
                    }, 1500))
                }, t.prototype.componentWillUnmount = function() {
                    i.unbind("left"), i.unbind("right"), this.dataMappedToState = !1
                }, t.prototype.render = function() {
                    var e = this.state.channelSurfingData.length && this.state.channelIndex < this.state.channelSurfingData.length ? this.state.channelSurfingData[this.state.channelIndex] : null;
                    return s.createElement(y._32, {
                        "data-test-selector": "channel-surfing-page",
                        background: y.n.Alt2,
                        display: y.R.Flex,
                        justifyContent: y._7.Between,
                        flexDirection: y.T.Column,
                        fullHeight: !0
                    }, s.createElement(y._8, {
                        fullWidth: !0
                    }, s.createElement(y._32, {
                        background: y.n.Base,
                        borderBottom: !0
                    }, this.renderHeader(e)), s.createElement(y._18, {
                        size: y._19.Small,
                        value: this.calculateProgress()
                    })), this.renderCenterContent(e), s.createElement(y._32, {
                        borderTop: !0,
                        background: y.n.Base
                    }, this.renderFooter(e)))
                }, t.prototype.reachedEndOfChannelSurfing = function() {
                    return !(!this.state.channelSurfingData.length || this.state.channelIndex !== this.state.channelSurfingData.length)
                }, t.prototype.renderCenterContent = function(e) {
                    return this.reachedEndOfChannelSurfing() ? this.renderCompletedChannelSurfingCTA() : s.createElement(j, {
                        "data-test-selector": "channel-surfing-page__content",
                        stream: e,
                        previousSection: {
                            stream: this.state.channelIndex > 0 ? this.state.channelSurfingData[this.state.channelIndex - 1] : null,
                            onSelect: this.trackAndMoveToPreviousChannel
                        },
                        nextSection: {
                            stream: this.state.channelIndex < this.state.channelSurfingData.length - 1 ? this.state.channelSurfingData[this.state.channelIndex + 1] : null,
                            onSelect: this.trackAndMoveToNextChannel
                        },
                        chatEnabled: !!this.state.channelSurfingExperimentAssignment && this.state.channelSurfingExperimentAssignment === f.c.Chat,
                        showTransition: !!this.state.transitionDirection
                    })
                }, t.prototype.followedGamesDataLoaded = function(e) {
                    return !(!e.data || e.data.loading || !e.data.currentUser || !e.data.currentUser.followedGames)
                }, t.prototype.renderHeader = function(e) {
                    return s.createElement(F, {
                        "data-test-selector": "channel-surfing-page__header",
                        loading: null === e && !this.reachedEndOfChannelSurfing(),
                        onBack: this.goBackToCommunitySelectionPage,
                        onDone: this.trackAndComplete
                    })
                }, t.prototype.renderFooter = function(e) {
                    return this.reachedEndOfChannelSurfing() ? null : s.createElement(A, {
                        "data-test-selector": "channel-surfing-page__footer",
                        stream: e,
                        onSkip: this.trackAndSkip,
                        onFollow: this.trackAndFollow,
                        onUnfollow: this.trackUnfollowedChannel,
                        transitionDirection: this.state.transitionDirection
                    })
                }, t.prototype.renderCompletedChannelSurfingCTA = function() {
                    return s.createElement(y._8, {
                        "data-test-selector": "channel-surfing-page__completed",
                        textAlign: y._42.Center,
                        margin: 1,
                        breakpointMedium: {
                            margin: {
                                x: 2,
                                y: 1
                            }
                        },
                        alignItems: y.c.Center
                    }, s.createElement(y._32, {
                        color: y.K.Base,
                        fontSize: y.V.Size4,
                        breakpointMedium: {
                            fontSize: y.V.Size3
                        },
                        breakpointExtraLarge: {
                            fontSize: y.V.Size2
                        }
                    }, Object(m.d)("That's a good start. Want to keep going?", "ChannelSurfingPage")), s.createElement(y._8, {
                        display: y.R.Flex,
                        justifyContent: y._7.Center,
                        margin: 2
                    }, s.createElement(y.v, {
                        "data-test-selector": "channel-surfing-page__completed-continue",
                        onClick: this.refreshDataAndRestart,
                        size: y.z.Large
                    }, Object(m.d)("Continue", "ChannelSurfingPage"))), s.createElement(y._8, {
                        display: y.R.Flex,
                        justifyContent: y._7.Center
                    }, s.createElement(y.v, {
                        "data-test-selector": "channel-surfing-page__completed-followed",
                        type: y.B.Hollow,
                        onClick: this.trackAndComplete
                    }, Object(m.d)("View my personalized content", "ChannelSurfingPage"))))
                }, t.prototype.languagePreferencesUpdated = function(e) {
                    if (this.lastLanguagePreferencesUsedToUpdateData.size !== e.languagePreferences.length) return !0;
                    for (var t = 0, n = e.languagePreferences; t < n.length; t++) {
                        var a = n[t];
                        if (!this.lastLanguagePreferencesUsedToUpdateData.has(a)) return !0
                    }
                    return !1
                }, t.prototype.redirectWithQueryParams = function(e) {
                    var t = location.search ? location.search + "&tt_medium=onboarding_surf" : "?tt_medium=onboarding_surf";
                    window.location.assign("" + e + t)
                }, t = a.__decorate([Object(g.d)("ChannelSurfingPage", {
                    destination: u.a.OnboardingSurf
                }), Object(d.a)({
                    location: p.PageviewLocation.OnboardingChannelSurfing
                }), Object(l.a)(z, {
                    options: function(e) {
                        return {
                            fetchPolicy: "network-only",
                            variables: {
                                limit: 20,
                                languages: e.languagePreferences
                            }
                        }
                    }
                })], t)
            }(s.Component),
            q = n("c8Oh");
        var Q = Object(_.b)(function(e) {
            return {
                languagePreferences: Object(q.a)(e)
            }
        })(W);
        n.d(t, "CHANNEL_SURFING_PAGE_SELECTOR", function() {
            return "channel-surfing-page"
        }), n.d(t, "CHANNEL_SURFING_PAGE_HEADER_SELECTOR", function() {
            return "channel-surfing-page__header"
        }), n.d(t, "CHANNEL_SURFING_PAGE_CONTENT_SELECTOR", function() {
            return "channel-surfing-page__content"
        }), n.d(t, "CHANNEL_SURFING_PAGE_FOOTER_SELECTOR", function() {
            return "channel-surfing-page__footer"
        }), n.d(t, "CHANNEL_SURFING_PAGE_COMPLETED_SELECTOR", function() {
            return "channel-surfing-page__completed"
        }), n.d(t, "CHANNEL_SURFING_PAGE_COMPLETED_CONTINUE_BUTTON_SELECTOR", function() {
            return "channel-surfing-page__completed-continue"
        }), n.d(t, "CHANNEL_SURFING_PAGE_COMPLETED_FOLLOWED_CHANNELS_BUTTON_SELECTOR", function() {
            return "channel-surfing-page__completed-followed"
        }), n.d(t, "COMMUNITY_STREAMS_LIMIT", function() {
            return 20
        }), n.d(t, "COMMUNITY_STREAMS_PER_GAME_DISPLAY_LIMIT", function() {
            return 10
        }), n.d(t, "COMMUNITY_STREAMS_OVERALL_DISPLAY_LIMIT", function() {
            return G
        }), n.d(t, "ChannelSurfingDirection", function() {
            return H
        }), n.d(t, "ChannelSurfingPageComponent", function() {
            return W
        }), n.d(t, "ChannelSurfingPage", function() {
            return Q
        })
    },
    thJT: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RequestNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RequestRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        a.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RequestNewChatterToken($input: RequestRitualTokenInput!) {\nrequestRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    tjbt: function(e, t, n) {
        "use strict";
        (function(e) {
            n.d(t, "a", function() {
                return I
            });
            var a = n("TToO"),
                i = n("GiK3"),
                r = (n.n(i), n("3zLD")),
                s = (n.n(r), n("RH2O")),
                o = n("6sO2"),
                l = n("7vx8"),
                d = n("RweG"),
                c = n("WIs4"),
                u = n("aMxy"),
                p = n("oIkB"),
                m = n("HZww"),
                h = n("Aj/L"),
                g = n("aUOx"),
                f = n("QCOJ"),
                b = n("rIzn"),
                v = n("hcyD"),
                k = n("KfLc"),
                y = n("yqxY"),
                C = n("Tur5"),
                _ = n("ssrl"),
                E = (n.n(_), n("Ti/Y")),
                S = (n.n(E), n("imaO")),
                w = (n.n(S), n("thJT")),
                N = (n.n(w), 3e5),
                T = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            closedByError: !1,
                            isLive: !1
                        }, t.eligibilityTimeouts = {}, t.expirationTimeouts = {}, t.getBannerMessage = function() {
                            return Object(o.d)("Click an emote to say hello!", "NewChatterRitual")
                        }, t.getLiveStatus = function(e) {
                            var t = e.pubsub.messages.streamDown ? e.pubsub.messages.streamDown.server_time : 0,
                                n = e.pubsub.messages.streamUp ? e.pubsub.messages.streamUp.server_time : 0;
                            return t || n ? n > t : e.data && e.data.channel && !!e.data.channel.stream.id || !1
                        }, t.setEligibilityTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), a = 0, i = Object.keys(t.eligibilityTimeouts); a < i.length; a++) {
                                var r = i[a];
                                n.has(r) || (clearTimeout(t.eligibilityTimeouts[r]), delete t.eligibilityTimeouts[r])
                            }
                            n.forEach(function(e) {
                                t.eligibilityTimeouts[e] || (t.eligibilityTimeouts[e] = setTimeout(function() {
                                    delete t.eligibilityTimeouts[e], t.isEligible = !0, t.state.isLive && t.requestRitualToken()
                                }, N))
                            })
                        }, t.requestRitualToken = function() {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return a.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            Object(k.e)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), e = a.__assign({}, Object(p.a)({
                                                channelID: this.props.channelID,
                                                type: C.RitualTokenType.NewChatter
                                            })), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.requestToken(e)];
                                        case 2:
                                            return n.sent(), this.isEligible = !1, [3, 4];
                                        case 3:
                                            return t = n.sent(), o.j.error(t, "Failed to request new chatter ritual token."), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.setExpirationTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), a = 0, i = Object.keys(t.expirationTimeouts); a < i.length; a++) {
                                var r = i[a];
                                n.has(r) || (clearTimeout(t.expirationTimeouts[r]), delete t.expirationTimeouts[r])
                            }
                            e.forEach(function(e) {
                                if (!t.expirationTimeouts[e.id] && e.expiresAt && new Date(e.expiresAt).valueOf() > Date.now()) {
                                    var n = new Date(e.expiresAt).valueOf() - Date.now();
                                    t.expirationTimeouts[e.id] = setTimeout(t.expireRitualToken.bind(e.id), n)
                                }
                            })
                        }, t.expireRitualToken = function(e) {
                            delete t.expirationTimeouts[e];
                            Object(p.e)(_, {
                                id: t.props.channelID
                            }, function(t) {
                                return t.channel && t.channel.self && t.channel.self.ritualTokens && (t.channel.self.ritualTokens = t.channel.self.ritualTokens.filter(function(t) {
                                    return t.id === e
                                })), t
                            })
                        }, t.redeemRitualToken = function(e, n) {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var t, i, r;
                                return a.__generator(this, function(s) {
                                    switch (s.label) {
                                        case 0:
                                            Object(v.a)({
                                                channelID: this.props.channelID,
                                                channelLogin: this.props.channelLogin,
                                                isHostMode: this.props.isHostMode,
                                                fromNewChatterRitual: !0,
                                                subOnlyMode: this.props.isSubsOnlyModeEnabled,
                                                player: this.props.isEmbedded || this.props.isPopout ? f.a.Embed : f.a.Web
                                            }), Object(k.d)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID,
                                                userMessage: n
                                            }), t = a.__assign({}, Object(p.a)({
                                                channelID: this.props.channelID,
                                                type: C.RitualTokenType.NewChatter,
                                                messageText: n
                                            }), {
                                                optimisticResponse: {
                                                    redeemRitualToken: {
                                                        __typename: "RedeemRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: C.RitualTokenStatus.Redeemed,
                                                            type: C.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), i = null, s.label = 1;
                                        case 1:
                                            return s.trys.push([1, 3, , 4]), [4, this.props.redeemToken(t)];
                                        case 2:
                                            return i = s.sent(), [3, 4];
                                        case 3:
                                            return r = s.sent(), o.j.error(r, "Failed to redeem new chatter ritual."), this.handleGenericError(), [2];
                                        case 4:
                                            if (i.data.redeemRitualToken.error) switch (i.data.redeemRitualToken.error.code) {
                                                case C.RitualTokenMutationErrors.UserBanned:
                                                case C.RitualTokenMutationErrors.UserNotFollowing:
                                                case C.RitualTokenMutationErrors.UserNotSubbed:
                                                case C.RitualTokenMutationErrors.UserTimedOut:
                                                    return this.props.onSendMessage(n), this.setState({
                                                        closedByError: !0
                                                    }), [2];
                                                default:
                                                    return this.handleGenericError(), [2]
                                            }
                                            return i.data.redeemRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.dismissRitualToken = function(e) {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var t, n, i;
                                return a.__generator(this, function(r) {
                                    switch (r.label) {
                                        case 0:
                                            Object(k.a)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), t = a.__assign({}, Object(p.a)({
                                                channelID: this.props.channelID,
                                                type: C.RitualTokenType.NewChatter
                                            }), {
                                                optimisticResponse: {
                                                    dismissRitualToken: {
                                                        __typename: "DismissRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: C.RitualTokenStatus.Dismissed,
                                                            type: C.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), n = null, r.label = 1;
                                        case 1:
                                            return r.trys.push([1, 3, , 4]), [4, this.props.dismissToken(t)];
                                        case 2:
                                            return n = r.sent(), [3, 4];
                                        case 3:
                                            return i = r.sent(), o.j.error(i, "Failed to redeem new chatter ritual."), [3, 4];
                                        case 4:
                                            return n && n.data.dismissRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.handleGenericError = function() {
                            t.props.onPushMessage(Object(g.a)(Object(o.d)("Something went wrong.", "NewChatterRitual"))), t.setState({
                                closedByError: !0
                            })
                        }, t.clearAllTimers = function() {
                            for (var e = 0, n = Object.keys(t.eligibilityTimeouts); e < n.length; e++) {
                                var a = n[e];
                                clearTimeout(t.eligibilityTimeouts[a])
                            }
                            t.eligibilityTimeouts = {};
                            for (var i = 0, r = Object.keys(t.expirationTimeouts); i < r.length; i++) {
                                a = r[i];
                                clearTimeout(t.expirationTimeouts[a])
                            }
                            t.expirationTimeouts = {}
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        this.props.data && this.props.data.loading || !e.data || !e.data.loading || Object(k.b)({
                            channelID: this.props.channelID
                        });
                        var t = this.getLiveStatus(e);
                        if (this.state.isLive !== t && (this.setState({
                                isLive: t
                            }), t && this.isEligible && this.requestRitualToken()), e.data && e.data.channel && e.data.channel.self && e.data.channel.self.ritualTokens) {
                            var n = e.data.channel.self.ritualTokens;
                            this.setEligibilityTimeouts(n.filter(function(e) {
                                return e.status === C.RitualTokenStatus.Eligible
                            })), this.setExpirationTimeouts(n.filter(function(e) {
                                return !!e.expiresAt
                            }))
                        } else this.clearAllTimers()
                    }, t.prototype.componentWillUnmount = function() {
                        this.clearAllTimers()
                    }, t.prototype.render = function() {
                        return this.props.data && this.props.data.channel ? this.state.closedByError || !this.state.isLive ? null : i.createElement(y.a, {
                            bannerMessage: this.getBannerMessage(),
                            onRitualDismissed: this.dismissRitualToken,
                            onRitualRedeemed: this.redeemRitualToken,
                            ritualTokens: this.props.data.channel.self && this.props.data.channel.self.ritualTokens ? this.props.data.channel.self.ritualTokens : []
                        }) : null
                    }, t
                }(i.Component);

            function D(e) {
                return !e.firstPageLoaded || !Object(b.a)() || !e.isLoggedIn || e.isEmbedded || e.isPopout
            }
            var O, I = Object(r.compose)(Object(s.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isLoggedIn: Object(h.d)(e),
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode
                }
            }, null), Object(l.a)(_, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: D
            }), Object(c.a)(function(t) {
                return {
                    query: _,
                    variables: {
                        id: t.channelID
                    },
                    topic: Object(m.q)(t.channelID),
                    type: u.PubsubMessageType.UpdatedChannelChatProperty,
                    mutator: function(n, a) {
                        return n.data.is_rituals_enabled ? e(function() {
                            t.data && t.data.refetch && t.data.refetch()
                        }) : a.channel && a.channel.self && (a.channel.self.ritualTokens = []), a
                    },
                    skip: D(t)
                }
            }), Object(d.a)([{
                topic: function(e) {
                    return Object(m.z)(e.channelID)
                },
                mapMessageTypesToProps: (O = {}, O[u.PubsubMessageType.ChannelStreamUp] = "streamUp", O[u.PubsubMessageType.ChannelStreamDown] = "streamDown", O),
                skip: D
            }]), Object(l.a)(E, {
                name: "dismissToken"
            }), Object(l.a)(S, {
                name: "redeemToken"
            }), Object(l.a)(w, {
                name: "requestToken"
            }))(T)
        }).call(t, n("162o").setImmediate)
    },
    uLsu: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("GiK3"),
            r = n("3zLD"),
            s = n("6sO2"),
            o = n("1F7R"),
            l = n("7vx8"),
            d = n("u8SD"),
            c = n("Kxgf"),
            u = n("djIP"),
            p = n("OLl6"),
            m = n("pV+t"),
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getInvalidUserMessage = function() {
                        return Object(s.d)("No user matching that login.", "IgnoreCommandHandler")
                    }, t.blockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("You cannot ignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: Object(p.a)(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.blockUserMutation(e, u.b.Other, u.a.Chat, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(s.d)("Unable to ignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(s.d)("User successfully ignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("Please specify a user to ignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t.unblockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("You cannot unignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: Object(p.a)(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.unblockUserMutation(e, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(s.d)("Unable to unignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(s.d)("User successfully unignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("Please specify a user to unignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return i.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, i.createElement(o.a, {
                        command: "ignore",
                        handler: this.blockUser
                    }), i.createElement(o.a, {
                        command: "unignore",
                        handler: this.unblockUser
                    }))
                }, t
            }(i.Component),
            g = Object(r.compose)(Object(l.a)(m, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.currentUserLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.currentUserLogin
                }
            }), Object(c.a)(), Object(d.a)())(h);
        n.d(t, "a", function() {
            return g
        })
    },
    v2Uk: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualsEnabled"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "settings"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isRitualsEnabled"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isRitualsWhitelisted"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "fragment ritualsEnabled on User {\nid\nsettings {\nisRitualsEnabled\nisRitualsWhitelisted\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vDGQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return r
        }), t.d = function(e) {
            if (!e.action || !e.userId) return;
            var t = {
                location: o.PageviewLocation.Channel,
                action: e.action,
                target: e.target,
                type: e.type,
                channel_id: e.channelId,
                reward_id: e.rewardID,
                user_id: e.userId,
                time: Date.now()
            };
            s.o.tracking.track(o.SpadeEventType.CrateNotificationAction, t)
        };
        var a, i, r, s = n("6sO2"),
            o = n("vH/s");
        ! function(e) {
            e.Close = "close", e.DontShowThis = "dont_show_this", e.LearnMore = "learn_more", e.OpenLater = "open_later", e.OpenNow = "open_now", e.Timeout = "timeout", e.TryBeta = "try_beta", e.View = "view"
        }(a || (a = {})),
        function(e) {
            e.Inventory = "inventory", e.OpenCrate = "open_crate"
        }(i || (i = {})),
        function(e) {
            e.Ftue = "ftue", e.ReceiveCrate = "receive_crate", e.ReceiveGift = "receive_giveaway_item", e.BitsIntro = "bits_intro"
        }(r || (r = {}))
    },
    vKYs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BlockedUsers"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 61
            }
        };
        n.loc.source = {
            body: "query BlockedUsers {\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vLl9: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 256
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatList_Badges($channelLogin: String!) {\nbadges {\n...badge\n}\nuser(login: $channelLogin) {\nid\nbroadcastBadges {\n...badge\n}\nself {\nselectedBadge {\n...badge\n}\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !i[t] && (i[t] = !0, !0)
        })), e.exports = a
    },
    vQzq: function(e, t) {},
    vadT: function(e, t) {},
    vh75: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return a
        }), n.d(t, "e", function() {
            return i
        }), n.d(t, "f", function() {
            return r
        }), n.d(t, "g", function() {
            return s
        }), n.d(t, "k", function() {
            return o
        }), n.d(t, "h", function() {
            return l
        }), n.d(t, "i", function() {
            return d
        }), n.d(t, "j", function() {
            return c
        }), n.d(t, "l", function() {
            return u
        }), n.d(t, "c", function() {
            return p
        }), n.d(t, "b", function() {
            return m
        }), n.d(t, "n", function() {
            return h
        }), n.d(t, "m", function() {
            return g
        }), n.d(t, "p", function() {
            return f
        }), n.d(t, "o", function() {
            return b
        }), n.d(t, "t", function() {
            return v
        }), n.d(t, "s", function() {
            return k
        }), n.d(t, "v", function() {
            return y
        }), n.d(t, "u", function() {
            return C
        }), n.d(t, "x", function() {
            return _
        }), n.d(t, "w", function() {
            return E
        }), n.d(t, "a", function() {
            return S
        }), n.d(t, "q", function() {
            return w
        }), n.d(t, "r", function() {
            return N
        }), t.R = function(e, t) {
            return {
                type: u,
                channel: e,
                messages: t
            }
        }, t.B = function() {
            return {
                type: i
            }
        }, t.P = function() {
            return {
                type: _
            }
        }, t.I = function() {
            return {
                type: E
            }
        }, t.T = function() {
            return {
                type: r
            }
        }, t.Q = function() {
            return {
                type: a
            }
        }, t.L = function() {
            return {
                type: p
            }
        }, t.E = function() {
            return {
                type: m
            }
        }, t.M = function() {
            return {
                type: h
            }
        }, t.F = function() {
            return {
                type: g
            }
        }, t.K = function() {
            return {
                type: f
            }
        }, t.D = function() {
            return {
                type: b
            }
        }, t.J = function() {
            return {
                type: o
            }
        }, t.A = function(e, t) {
            return {
                type: c,
                channelLogin: e,
                duration: t
            }
        }, t.z = function(e) {
            return {
                type: d,
                duration: e
            }
        }, t.C = function() {
            return {
                type: l
            }
        }, t.N = function() {
            return {
                type: v
            }
        }, t.G = function() {
            return {
                type: k
            }
        }, t.O = function() {
            return {
                type: y
            }
        }, t.H = function() {
            return {
                type: C
            }
        }, t.y = function(e, t) {
            return {
                type: S,
                command: e.toLowerCase(),
                handler: t
            }
        }, t.S = function(e) {
            return {
                type: w,
                command: e.toLowerCase()
            }
        }, t.U = function(e) {
            return {
                type: N,
                customEvent: e
            }
        };
        var a = "chat.CHAT_HIDDEN",
            i = "chat.CHAT_RESET",
            r = "chat.CHAT_SHOWN",
            s = "chat.EMOTE_SETS_UPDATED",
            o = "chat.FOLLOWER_MODE_ENABLED",
            l = "chat.FOLLOWER_MODE_DISABLED",
            d = "chat.FOLLOWER_MODE_DURATION_CHANGED",
            c = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
            u = "chat.MESSAGES_UPDATED",
            p = "chat.AUTOMOD_ACTIONS_ENABLED",
            m = "chat.AUTOMOD_ACTIONS_DISABLED",
            h = "chat.MODERATION_ACTIONS_ENABLED",
            g = "chat.MODERATION_ACTIONS_DISABLED",
            f = "chat.MOD_ICONS_ENABLED",
            b = "chat.MOD_ICONS_DISABLED",
            v = "chat.SLOW_MODE_ENABLED",
            k = "chat.SLOW_MODE_DISABLED",
            y = "chat.SUBS_ONLY_MODE_ENABLED",
            C = "chat.SUBS_ONLY_MODE_DISABLED",
            _ = "chat.TIMESTAMPS_ENABLED",
            E = "chat.TIMESTAMPS_DISABLED",
            S = "chat.ADD_COMMAND",
            w = "chat.REMOVE_COMMAND",
            N = "chat.RENDER_SENT_CHAT_MESSAGE"
    },
    x8iQ: function(e, t) {},
    xZvS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissPurchaseToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPurchaseTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissPurchaseToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 113
            }
        };
        n.loc.source = {
            body: "mutation DismissPurchaseToken($input:DismissPurchaseTokenInput!) {\ndismissPurchaseToken(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xfb5: function(e, t) {},
    "y0i/": function(e, t) {},
    "y1/w": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 190
            }
        };
        n.loc.source = {
            body: "query RecentRaidsModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yqxY: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return u
        });
        var a = n("TToO"),
            i = n("GiK3"),
            r = (n.n(i), n("6sO2")),
            s = n("l21v"),
            o = n("Odds"),
            l = n("Tur5"),
            d = n("qDcU"),
            c = (n.n(d), [{
                id: "30259",
                alt: "HeyGuys"
            }, {
                id: "81274",
                alt: "VoHiYo"
            }, {
                id: "64138",
                alt: "SeemsGood"
            }]),
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onEmoteClick = function(e) {
                        if (n.renderedTokenID) {
                            var t = e.currentTarget.dataset.emoteString;
                            t ? n.props.onRitualRedeemed(n.renderedTokenID, t) : r.j.warn("[NewChatterRitual] Could not find clicked emote ID.")
                        } else r.j.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.onCloseButtonClick = function() {
                        n.renderedTokenID ? n.props.onRitualDismissed(n.renderedTokenID) : r.j.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.getAvailableToken = function() {
                        return n.props.ritualTokens.find(function(e) {
                            return e.type === l.RitualTokenType.NewChatter && e.status === l.RitualTokenStatus.Available && (!e.expiresAt || Date.now() < new Date(e.expiresAt).valueOf())
                        }) || null
                    }, n.renderedTokenID = null, n
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.getAvailableToken();
                    if (this.renderedTokenID = t ? t.id : null, !t) return null;
                    var n = c.map(function(t) {
                        return i.createElement(o._8, {
                            key: t.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, i.createElement(o._49, {
                            label: t.alt
                        }, i.createElement(o._6, {
                            alpha: !0,
                            onClick: e.onEmoteClick,
                            "data-emote-string": t.alt,
                            "data-test-selector": "emote-button"
                        }, i.createElement(o._8, {
                            padding: .5
                        }, i.createElement("img", {
                            className: "new-chatter-ritual__emote",
                            src: Object(s.f)(t.id, 3)
                        })))))
                    });
                    return i.createElement(o._32, {
                        background: o.n.Base,
                        border: !0,
                        className: "new-chatter-ritual",
                        margin: {
                            x: 2,
                            bottom: .5
                        },
                        padding: {
                            left: .5,
                            y: .5
                        }
                    }, i.createElement(o._8, {
                        alignItems: o.c.Center,
                        display: o.R.Flex,
                        flexWrap: o.U.NoWrap
                    }, i.createElement(o._8, {
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, this.props.bannerMessage), n, i.createElement(o._32, {
                        borderLeft: !0,
                        flexShrink: 0
                    }, i.createElement(o.w, {
                        ariaLabel: "close",
                        icon: o._23.Close,
                        onClick: this.onCloseButtonClick,
                        size: o.x.Large,
                        "data-test-selector": "dismiss-button"
                    }))))
                }, t
            }(i.Component)
    },
    z7Cp: function(e, t) {},
    zVM8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "query ViewerCardModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zbFZ: function(e, t) {}
});
//# sourceMappingURL=pages.channel-surfing-0df77bb4532d6715d6b70c43319f5602.js.map