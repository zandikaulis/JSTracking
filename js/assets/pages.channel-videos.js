webpackJsonp([33, 84], {
    "+/J2": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = Number(t);
            return n.setMilliseconds(a), n
        }
    },
    "+5Qw": function(e, t) {},
    "+Aaf": function(e, t) {},
    "+DHI": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "LatestCollectionCarousel_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "collections"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "1"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "videos"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "items"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "first"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "30"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "totalCount"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "edges"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "node"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "FragmentSpread",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "PreviewCardVideo"
                                                                                },
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 319
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/video-preview-card/models/preview-card-video-fragment.gql"\nquery LatestCollectionCarousel_User($userLogin:String!) {\nuser(login:$userLogin) {\nid\ndisplayName\ncollections(first:1) {\nedges {\nnode {\nid\ntitle\nvideos: items(first: 30) {\ntotalCount\nedges {\nnode {\n...PreviewCardVideo\n}\n}\n}\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("qjMx").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "+V/3": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "a", function() {
            return o
        });
        var i = "subscribe_to_channel",
            a = "turbo",
            r = "visit_url",
            o = "broadcaster"
    },
    "+WrY": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("1F7R"),
            d = n("O0Qc"),
            c = n("OLl6"),
            u = n("uXDg"),
            m = n("qzJ+"),
            p = n("m4HT"),
            h = n("QPF3"),
            g = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleWhisperCommand = function(e) {
                        var n = Object(d.r)(e),
                            i = n.recipientLogin,
                            a = n.body;
                        return i && a ? t.props.isEmbedded || t.props.isPopout ? {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("Please use the whisper window for whispers.", "WhisperCommandHandler")
                            })
                        } : i.toLowerCase() === t.props.userLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("You cannot whisper to yourself.", "WhisperCommandHandler")
                            })
                        } : t.props.userID ? t.initiateWhisper(i, a) : void 0 : {
                            preserveInput: !0,
                            deferred: Promise.resolve({
                                notice: Object(s.d)('Usage: "/w [login] [message]"', "WhisperCommandHandler")
                            })
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(l.a, {
                        command: "w",
                        handler: this.handleWhisperCommand
                    })
                }, t.prototype.initiateWhisper = function(e, t) {
                    var n = this;
                    return {
                        deferred: new Promise(function(a, r) {
                            return i.__awaiter(n, void 0, void 0, function() {
                                var n, o, l, d;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            return i.trys.push([0, 2, , 3]), [4, Object(c.a)(e)];
                                        case 1:
                                            return n = i.sent(), [3, 3];
                                        case 2:
                                            return o = i.sent(), s.j.warn(o, "Failed to fetch user targeted by whisper command.", {
                                                recipientLogin: e
                                            }), [2, r(o)];
                                        case 3:
                                            return n ? [3, 4] : [2, a({
                                                notice: Object(s.d)("No user matching that login.", "WhisperCommandHandler")
                                            })];
                                        case 4:
                                            return i.trys.push([4, 6, , 7]), [4, Object(m.a)({
                                                currentUserID: this.props.userID,
                                                emotes: this.props.emoteMap || {},
                                                message: t,
                                                recipientUserID: n
                                            })];
                                        case 5:
                                            return i.sent(), [3, 7];
                                        case 6:
                                            return l = i.sent(), s.j.error(l, "Failed to send whisper using whisper command.", {
                                                currentUserID: this.props.userID,
                                                recipientUserID: n
                                            }), [2, a({
                                                notice: Object(s.d)("Unable to send Whisper at this moment.", "WhisperCommandHandler")
                                            })];
                                        case 7:
                                            return d = Object(p.a)(this.props.userID, n), this.props.openThread(d), [2, a({})]
                                    }
                                })
                            })
                        })
                    }
                }, t
            }(a.Component);
        var f = Object(r.b)(null, function(e) {
            return Object(o.b)({
                openThread: function(e) {
                    return Object(u.l)({
                        threadID: e,
                        collapsed: !0
                    }, Object(h.a)())
                }
            }, e)
        })(g);
        n.d(t, "a", function() {
            return f
        })
    },
    "+po9": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "leaderboardItem"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsLeaderboard"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "items"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "edges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "node"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entryKey"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "rank"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 106
            }
        };
        n.loc.source = {
            body: "fragment leaderboardItem on BitsLeaderboard {\nitems {\nedges {\ncursor\nnode {\nid\nentryKey\nrank\nscore\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+sSA": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return t.setMilliseconds(999), t
        }
    },
    "/LBW": function(e, t, n) {
        "use strict";
        t.h = function(e) {
            var t = {
                action_name: e.actionName,
                action_type: "click",
                client_time: (new Date).getTime(),
                displayed_balance: e.displayedBalance,
                emote_level: e.emoteLevel,
                emote_type: e.emoteType,
                bits_location: e.location || o.ChatTooltip
            };
            i.n.track(a.SpadeEventType.BitsCardInteraction, t)
        }, n.d(t, "b", function() {
            return o
        }), n.d(t, "a", function() {
            return s
        }), t.d = function(e) {
            if (e && l[e]) return l[e];
            return i.j.error(new Error('Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), 'Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), s.Buy100
        }, t.e = function(e) {
            var t = {
                channel: e.channel,
                channel_id: e.channelID,
                available: e.available,
                host: "twitch.tv"
            };
            i.n.track(a.SpadeEventType.BitsAdsAvailability, t)
        }, t.f = function(e) {
            var t = {
                distinct_id: i.o.session.deviceID,
                host: "twitch.tv",
                request_id: e.requestID,
                campaign_id: e.campaignID,
                adblock: e.adblock
            };
            i.n.track(a.SpadeEventType.BitsAdsImpression, t)
        }, n.d(t, "c", function() {
            return r
        }), t.g = function(e) {
            var t = i.n.getLastPageview(),
                n = {
                    location: t && t.location || "",
                    ad_returned: null,
                    campaign_id: e.campaignID,
                    distinct_id: i.o.session.deviceID,
                    host: "twitch.tv",
                    request_id: e.requestID,
                    request_method: e.requestMethod
                };
            i.n.track(a.SpadeEventType.BitsAdsRequest, n)
        };
        var i = n("6sO2"),
            a = n("vH/s");
        var r, o = {
                ChatTooltip: "card",
                GetBitsButton: "get_bits_button",
                BitsLandingPage: "bits_landing_page"
            },
            s = {
                BuyMain: "buy_main",
                Buy100: "buy_100",
                Buy500: "buy_500",
                Buy1000: "buy_1000",
                Buy1500: "buy_1500",
                Buy5000: "buy_5000",
                Buy10000: "buy_10000",
                Buy25000: "buy_25000",
                CloseCard: "menu_close",
                OpenCard: "menu_open",
                PreviewEmote: "emote_preview",
                WatchAd: "watch_ad",
                WatchAnotherAd: "watch_another_ad",
                CheeringInRoom: "cheering_in_room"
            },
            l = {
                100: s.Buy100,
                500: s.Buy500,
                1000: s.Buy1000,
                1500: s.Buy1500,
                5000: s.Buy5000,
                10000: s.Buy10000,
                25000: s.Buy25000
            };
        ! function(e) {
            e.ShowAdButton = "show_ad_button"
        }(r || (r = {}))
    },
    "/SNv": function(e, t, n) {
        e.exports = n.p + "assets/hearthstone-classes-b3b59eedbe78268cf62299a41ec09be1.png"
    },
    "/dIK": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = Number(t);
            return n.setDate(a), n
        }
    },
    "/eFD": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatSettings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "blockLinks"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rules"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatDelayMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "query Chat_ChannelData($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nlogin\ndisplayName\nchatSettings {\nblockLinks\nrules\nchatDelayMs\n}\nself {\nisModerator\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "/eRw": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RoomPane_SendRoomMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendRoomMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendRoomMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "roomMessageContent"
                                        },
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sender"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatColor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "remainingDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 338
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/rooms/models/room-message-content-fragment.gql"\nmutation RoomPane_SendRoomMessage($input: SendRoomMessageInput!) {\nsendRoomMessage(input: $input) {\nmessage {\nid\ndeletedAt\nsentAt\n...roomMessageContent\nsender {\nid\nlogin\nchatColor\ndisplayName\n}\n}\nerror {\ncode\nslowModeDurationSeconds\nremainingDurationSeconds\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("2LJg").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "024F": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getMilliseconds()
        }
    },
    "0H+u": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserImageUploader"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "offlineImageURL"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 108
            }
        };
        n.loc.source = {
            body: "query UserImageUploader($login: String!) {\nuser(login: $login) {\nid\nlogin\nbannerImageURL\nofflineImageURL\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0ImK": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "embeddedEmote"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "EmbeddedEmote"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "emoteID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "from"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "to"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 65
            }
        };
        n.loc.source = {
            body: "fragment embeddedEmote on EmbeddedEmote {\nemoteID\nsetID\nfrom\nto\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0LAu": function(e, t, n) {
        var i = n("MIQa");
        e.exports = function() {
            return i(new Date)
        }
    },
    "0UyA": function(e, t, n) {
        var i = n("4Z4o");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    "0YGC": function(e, t) {
        e.exports = function() {
            var e = new Date,
                t = e.getFullYear(),
                n = e.getMonth(),
                i = e.getDate(),
                a = new Date(0);
            return a.setFullYear(t, n, i - 1), a.setHours(23, 59, 59, 999), a
        }
    },
    "0aH9": function(e, t, n) {
        var i = n("3znZ"),
            a = 6e4,
            r = 6048e5;
        e.exports = function(e, t) {
            var n = i(e),
                o = i(t),
                s = n.getTime() - n.getTimezoneOffset() * a,
                l = o.getTime() - o.getTimezoneOffset() * a;
            return Math.round((s - l) / r)
        }
    },
    "0oN5": function(e, t, n) {
        var i = n("WNGz");
        e.exports = function(e) {
            var t = new Date;
            return t.setDate(t.getDate() + 1), i(e).getTime() === i(t).getTime()
        }
    },
    "11Bn": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function() {
            var e = Array.prototype.slice.call(arguments).map(function(e) {
                    return i(e)
                }),
                t = Math.max.apply(null, e);
            return new Date(t)
        }
    },
    "11M/": function(e, t, n) {
        "use strict";
        n("jIAO");
        var i, a = n("RH2O"),
            r = n("Aj/L"),
            o = n("TToO"),
            s = n("GiK3"),
            l = n("7vx8"),
            d = n("3zLD"),
            c = n("2KeS"),
            u = n("6sO2"),
            m = n("NXs7"),
            p = n("QKs+"),
            h = n("Ldv2"),
            g = n("NikC"),
            f = n("ZVME"),
            v = n("0nzt"),
            b = n("1F7R"),
            k = n("J4ib"),
            y = n("Y5T0");
        ! function(e) {
            e.Recent = "RECENT", e.Top = "TOP"
        }(i || (i = {}));
        var _, C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.unpinRecentCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return o.__awaiter(t, void 0, void 0, function() {
                                    return o.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: i.Recent
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(k.d)("Recent cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t.resetTopCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return o.__awaiter(t, void 0, void 0, function() {
                                    return o.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: i.Top
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(k.d)("Top cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return s.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, s.createElement(b.a, {
                        command: "unpin",
                        handler: this.unpinRecentCheer
                    }), s.createElement(b.a, {
                        command: "reset",
                        handler: this.resetTopCheer
                    }))
                }, t = o.__decorate([Object(l.a)(y, {
                    name: "dismissPinnedCheer"
                })], t)
            }(s.Component),
            S = n("iydZ"),
            E = n("bkpq"),
            N = n("uLsu"),
            w = n("+WrY"),
            D = n("HW6M"),
            O = n("RweG"),
            I = n("aMxy"),
            T = n("oIkB"),
            M = n("HZww"),
            R = n("vH/s"),
            x = n("iMOk"),
            L = n("Odds"),
            A = (n("y0i/"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        formInputValue: "",
                        sharing: !1
                    }, t.hasUnmounted = !1, t.handleShareClick = function() {
                        return o.__awaiter(t, void 0, void 0, function() {
                            return o.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            sharing: !0
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, , 3, 4]), [4, this.props.onShare(this.state.formInputValue)];
                                    case 2:
                                        return e.sent(), [3, 4];
                                    case 3:
                                        return this.hasUnmounted || this.setState({
                                            sharing: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.onInputChange = function(e) {
                        t.setState({
                            formInputValue: e.currentTarget.value
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.hasUnmounted = !1
                }, t.prototype.componentWillUnmount = function() {
                    this.hasUnmounted = !0
                }, t.prototype.render = function() {
                    var e = D("share-input", {
                            "share-input--hidden": this.props.hide
                        }),
                        t = this.state.formInputValue.length > 255,
                        n = t ? "-" + (this.state.formInputValue.length - 255) : Object(u.d)("Share", "ChatResubNotification"),
                        i = Object(u.d)("Close", "ChatResubNotification"),
                        a = Object(u.d)("Add a message to the streamer", "ChatResubNotification"),
                        r = this.state.sharing ? L.z.Loading : L.z.Default;
                    return s.createElement(L._7, {
                        className: e,
                        padding: 1,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: L._14.Absolute
                    }, s.createElement(L._30, {
                        className: "share-input__container",
                        position: L._14.Relative,
                        border: !0,
                        background: L.m.Base,
                        padding: 1
                    }, s.createElement(L._7, {
                        position: L._14.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, s.createElement(L.v, {
                        ariaLabel: i,
                        onClick: this.props.onClose,
                        type: L.x.Secondary,
                        icon: L._21.Close,
                        "data-a-target": "resub-notification-close-form-btn",
                        "data-test-selector": "share-input__close-form-btn"
                    })), s.createElement(L._7, {
                        textAlign: L._40.Center,
                        padding: {
                            top: 1,
                            bottom: 2
                        }
                    }, this.props.children), s.createElement(L._7, {
                        display: L.Q.Flex,
                        flexWrap: L.T.NoWrap
                    }, s.createElement(L._7, {
                        fullWidth: !0
                    }, s.createElement(L._3, {
                        autoFocus: !0,
                        type: L._4.Text,
                        value: this.state.formInputValue,
                        onChange: this.onInputChange,
                        placeholder: a,
                        "data-a-target": "resub-notification-share-message-input",
                        "data-test-selector": "share-input__share-message-input"
                    })), s.createElement(L.u, {
                        disabled: t,
                        onClick: this.handleShareClick,
                        "data-a-target": "resub-notification-send-msg-btn",
                        "data-test-selector": "share-input__send-msg-btn",
                        state: r
                    }, n))))
                }, t
            }(s.Component)),
            F = (n("54rb"), function(e) {
                var t = Object(u.d)("Share", "Chat--SharePrompt"),
                    n = Object(u.d)("Close", "Chat--SharePrompt"),
                    i = D("chat-share-prompt", {
                        "chat-share-prompt--hidden": e.hide || !e.children
                    });
                return s.createElement(L._7, {
                    position: L._14.Absolute,
                    fullWidth: !0,
                    className: i,
                    padding: {
                        y: .5,
                        left: .5
                    }
                }, s.createElement(L._7, {
                    display: L.Q.Flex,
                    padding: 1,
                    justifyContent: L._6.Between,
                    alignItems: L.c.Center,
                    flexWrap: L.T.NoWrap
                }, s.createElement(L.P, {
                    "data-a-target": "resub-notification-months-subbed-text",
                    "data-test-selector": "share-prompt__text"
                }, e.children), s.createElement(L._7, {
                    display: L.Q.Flex,
                    flexWrap: L.T.NoWrap,
                    alignItems: L.c.Center,
                    flexShrink: 0,
                    padding: {
                        left: .5
                    }
                }, s.createElement(L._7, {
                    display: L.Q.Inline,
                    padding: {
                        right: .5
                    },
                    flexShrink: 0
                }, s.createElement(L.u, {
                    onClick: e.onClickShare,
                    size: L.y.Small,
                    "data-a-target": "resub-notification-share-notification-btn",
                    "data-test-selector": "share-prompt__share-btn"
                }, t)), s.createElement(L._7, {
                    flexShrink: 0
                }, s.createElement(L.v, {
                    ariaLabel: n,
                    onClick: e.onClickClose,
                    type: L.x.Secondary,
                    icon: L._21.Close,
                    "data-a-target": "resub-notification-close-notification-btn",
                    "data-test-selector": "share-prompt__close-btn"
                })))))
            }),
            j = n("Tzcg"),
            U = n("xZvS"),
            B = n("cxe8"),
            P = n("QNxL"),
            V = (n("BTUa"), "chat_dismiss"),
            H = "chat_share",
            W = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.purchaseTokensExist = function(e) {
                        return e.data.user.self && e.data.user.self.purchaseTokens.length > 0
                    }, t.manageParentSpace = function(e) {
                        t.dataIsReady(e) && t.purchaseTokensExist(e) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissPurchaseToken = function() {
                        return o.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return o.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), e = this.props.data.user.self.purchaseTokens[0], t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(T.d)(B, {
                                            channelLogin: this.props.channelLogin
                                        }, t), u.n.track(R.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: e.asin,
                                            item_name: e.title,
                                            context: V,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), [4, this.props.dismissPurchaseToken(Object(T.a)({
                                            token: e.id,
                                            channelID: this.props.data.user.id
                                        }))];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.sharePurchase = function(e) {
                        return o.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return o.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, , 3, 4]), t = this.props.data.user.self.purchaseTokens[0], [4, this.props.sharePurchaseTokenInChat(Object(T.a)({
                                            token: t.id,
                                            channelID: this.props.data.user.id,
                                            message: e
                                        }))];
                                    case 2:
                                        return i.sent(), u.n.track(R.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: t.asin,
                                            item_name: t.title,
                                            context: H,
                                            context_details: e,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), n = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(T.d)(B, {
                                            channelLogin: this.props.channelLogin
                                        }, n), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.dataIsReady(e)) {
                        var t = e.pubsub.messages.userCommerceUpdateEvent,
                            n = this.props.pubsub.messages.userCommerceUpdateEvent,
                            i = !n && t,
                            a = n && t && n.time !== t.time;
                        (i || a) && this.props.data && this.props.data.refetch()
                    }
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.purchaseTokensExist(this.props) && this.props.data.user.self ? this.renderPurchaseToken(this.props.data.user.self.purchaseTokens[0]) : null
                }, t.prototype.renderPurchaseToken = function(e) {
                    var t, n;
                    t = this.props.data.user.settings.isCommerceRevShareEnabled ? Object(u.d)("You bought {product} and supported {channelName}!", {
                        product: s.createElement("strong", null, e.title),
                        channelName: s.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat") : Object(u.d)("You bought {product} while watching {channelName}!", {
                        product: s.createElement("strong", null, e.title),
                        channelName: s.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat");
                    var i = e.inGameContents.map(this.renderLootInGameContent),
                        a = e.badges.map(this.renderLootBadge),
                        r = e.emoteSets.map(this.renderLootEmoteSet),
                        o = e.bits.map(this.renderLootBits, this);
                    return (i.length || a.length || r.length || o.length) && (n = s.createElement(L._7, {
                        "data-test-selector": "share-purchase__loot",
                        padding: {
                            bottom: 1
                        },
                        display: L.Q.Flex,
                        justifyContent: L._6.Center
                    }, i, a, r, o), t = Object(u.d)("You bought {product} and opened a Twitch Crate! Let {channelName} know you shared the love.", {
                        product: s.createElement("strong", null, e.title),
                        channelName: s.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat")), s.createElement(L._7, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: L._14.Absolute
                    }, s.createElement(F, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissPurchaseToken
                    }, t), s.createElement(A, {
                        hide: !this.state.showMessageInput,
                        onShare: this.sharePurchase,
                        onClose: this.toggleContentShown
                    }, s.createElement(L._7, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement("figure", null, s.createElement("img", {
                        width: 40,
                        height: 40,
                        src: e.imageThumbnail
                    }))), n, s.createElement(L.P, null, Object(u.d)("Score! Give a shout out to {channelName} in Chat about all your sweet loot!", {
                        channelName: s.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat"))))
                }, t.prototype.renderLootInGameContent = function(e) {
                    return s.createElement(L._7, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__igc"
                    }, s.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.imageURL
                    }))
                }, t.prototype.renderLootEmoteSet = function(e) {
                    return Object(j.b)(e.emoteSet.emotes).map(function(e) {
                        return s.createElement(L._7, {
                            key: e.id,
                            margin: {
                                top: .5,
                                right: 1
                            },
                            "data-test-selector": "share-purchase__emoticon"
                        }, s.createElement("img", {
                            className: "share-to-chat__loot",
                            srcSet: e.srcSet,
                            alt: e.displayName
                        }))
                    })
                }, t.prototype.renderLootBadge = function(e) {
                    return s.createElement(L._7, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__badge"
                    }, s.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.badge.image2x
                    }))
                }, t.prototype.renderLootBits = function(e) {
                    if (this.props.bitsConfig) return s.createElement(L._7, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__bits"
                    }, s.createElement(x.a, {
                        count: e.quantity,
                        bitsConfig: this.props.bitsConfig,
                        withImage: !0
                    }))
                }, t = o.__decorate([Object(l.a)(B, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(O.a)([{
                    topic: function(e) {
                        return Object(M.v)(e.currentUserID)
                    },
                    mapMessageTypesToProps: (_ = {}, _[I.PubsubMessageType.ChatNotification] = "userCommerceUpdateEvent", _)
                }])], t)
            }(s.Component),
            G = Object(l.a)(U, {
                name: "dismissPurchaseToken"
            })(Object(l.a)(P, {
                name: "sharePurchaseTokenInChat"
            })(W));
        var Q = Object(a.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            })(G),
            q = (n("e9ZN"), function(e) {
                var t = D("rare-emote__face", {
                        "rare-emote__face--animate": !!e.animate
                    }),
                    n = D("rare-emote__neck", {
                        "rare-emote__neck--animate": !!e.animate
                    });
                return s.createElement(L._7, {
                    overflow: L._10.Hidden,
                    className: "rare-emote"
                }, s.createElement(L._1, {
                    zIndex: L._57.Above,
                    position: L._14.Relative
                }, s.createElement("img", {
                    className: t,
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.emoteID + "/2.0"
                })), s.createElement(L._7, {
                    position: L._14.Relative,
                    zIndex: L._57.Default,
                    className: n
                }, s.createElement(L._20, {
                    width: 28,
                    height: 28,
                    asset: L._21.Neck
                })))
            }),
            z = 3;
        var Y, J = n("nEoF"),
            $ = n("S20p"),
            K = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        resubDismissed: !1,
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.randomEmoteId = t.getRandomEmoteId(), t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.resubExists = function(e, t) {
                        return e.data.user.self && e.data.user.self.resubNotification && !t.resubDismissed
                    }, t.manageParentSpace = function() {
                        t.dataIsReady(t.props) && t.resubExists(t.props, t.state) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissResubNotification = function() {
                        t.setState({
                            resubDismissed: !0
                        })
                    }, t.shareResub = function(e) {
                        return o.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return o.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.resubNotification) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 4, 5, 6]), this.props.authToken ? [4, function(e, t, n, i) {
                                            return o.__awaiter(this, void 0, void 0, function() {
                                                var a, r, s;
                                                return o.__generator(this, function(o) {
                                                    switch (o.label) {
                                                        case 0:
                                                            a = "https://api.twitch.tv/api/channels/" + e + "/use_chat_notification_token", r = 1, o.label = 1;
                                                        case 1:
                                                            if (!(r <= z)) return [3, 7];
                                                            o.label = 2;
                                                        case 2:
                                                            return o.trys.push([2, 5, , 6]), [4, fetch(a, {
                                                                body: JSON.stringify({
                                                                    token_id: t,
                                                                    custom_message: n
                                                                }),
                                                                method: "POST",
                                                                headers: {
                                                                    "Client-ID": u.o.config.legacyClientID,
                                                                    Accept: "application/json; charset=UTF-8",
                                                                    "content-type": "application/json; charset=UTF-8",
                                                                    Authorization: "OAuth " + i
                                                                }
                                                            })];
                                                        case 3:
                                                            return [4, o.sent().json()];
                                                        case 4:
                                                            return [2, o.sent()];
                                                        case 5:
                                                            if (s = o.sent(), r === z) throw s;
                                                            return [3, 6];
                                                        case 6:
                                                            return ++r, [3, 1];
                                                        case 7:
                                                            return [2]
                                                    }
                                                })
                                            })
                                        }(this.props.channelLogin, this.props.data.user.self.resubNotification.token, e, this.props.authToken)] : [3, 3];
                                    case 2:
                                        i.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.resubNotification = null), e
                                        }, Object(T.d)($, {
                                            channelLogin: this.props.channelLogin
                                        }, t), this.dismissResubNotification(), i.label = 3;
                                    case 3:
                                        return [3, 6];
                                    case 4:
                                        return n = i.sent(), u.j.error(n, "Failed to post resub message"), [3, 6];
                                    case 5:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 6:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace()
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.dataIsReady(e) && e.data.user.self && e.data.user.self.resubNotification && !this.randomEmoteId && (this.randomEmoteId = this.getRandomEmoteId())
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.resubExists(this.props, this.state) && this.props.data.user.self && this.props.data.user.self.resubNotification ? this.renderResubToken(this.props.data.user.self.resubNotification) : null
                }, t.prototype.renderResubToken = function(e) {
                    return s.createElement(L._7, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: L._14.Absolute
                    }, s.createElement(F, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissResubNotification
                    }, Object(u.d)("It's your {monthsSubbed, number} month anniversary!", {
                        monthsSubbed: e.months
                    }, "ChatResubNotification")), s.createElement(A, {
                        hide: !this.state.showMessageInput,
                        onShare: this.shareResub,
                        onClose: this.toggleContentShown
                    }, s.createElement(q, {
                        emoteID: this.randomEmoteId,
                        animate: this.state.showMessageInput
                    }), s.createElement(L.P, null, Object(u.d)("Hooray! Let {channelName} know it's your {monthsSubbed, number} month anniversary.", {
                        channelName: s.createElement("strong", null, this.props.channelDisplayName),
                        monthsSubbed: e.months
                    }, "ChatResubNotification"))))
                }, t.prototype.getRandomEmoteId = function() {
                    var e = Math.floor(Math.random() * J.b.length);
                    return J.b[e]
                }, t = o.__decorate([Object(l.a)($, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                })], t)
            }(s.Component);
        n("NZkJ");
        ! function(e) {
            e[e.Resub = 1] = "Resub", e[e.Purchase = 2] = "Purchase"
        }(Y || (Y = {}));
        var Z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestedSpaces: new Set
                    }, t.addSpace = function(e) {
                        t.state.requestedSpaces.has(e) || t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.add(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.removeSpace = function(e) {
                        t.state.requestedSpaces.has(e) && t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.delete(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.requestResubSpace = function() {
                        t.addSpace(Y.Resub)
                    }, t.dismissResubSpace = function() {
                        t.removeSpace(Y.Resub)
                    }, t.requestPurchaseSpace = function() {
                        t.addSpace(Y.Purchase)
                    }, t.dismissPurchaseSpace = function() {
                        t.removeSpace(Y.Purchase)
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    this.state.requestedSpaces.size && (e = Array.from(this.state.requestedSpaces.values()).sort()[0]);
                    var t = D({
                            "share-to-chat__space--hidden": e !== Y.Resub
                        }),
                        n = D({
                            "share-to-chat__space--hidden": e !== Y.Purchase
                        });
                    return s.createElement(L._7, null, s.createElement(L._7, {
                        className: t
                    }, s.createElement(K, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        requestSpace: this.requestResubSpace,
                        dismissSpace: this.dismissResubSpace
                    })), s.createElement(L._7, {
                        className: n
                    }, s.createElement(Q, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig,
                        requestSpace: this.requestPurchaseSpace,
                        dismissSpace: this.dismissPurchaseSpace
                    })))
                }, t
            }(s.Component),
            X = n("vh75"),
            ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        show: !0
                    }, t.dismiss = function() {
                        t.setState({
                            show: !1
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                        show: !0
                    })
                }, t.prototype.render = function() {
                    return this.state.show ? s.createElement(L._30, {
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        background: L.m.AccentAlt2,
                        color: L.J.Overlay,
                        position: L._14.Absolute,
                        className: "hosting-notification",
                        padding: {
                            y: .5,
                            left: .5
                        },
                        "data-a-target": "hosting-notification-container"
                    }, s.createElement(L._7, {
                        display: L.Q.Flex,
                        padding: 1,
                        justifyContent: L._6.Between,
                        alignItems: L.c.Center,
                        flexWrap: L.T.NoWrap
                    }, s.createElement(L._7, {
                        display: L.Q.Flex,
                        flexWrap: L.T.NoWrap
                    }, s.createElement(L._7, {
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, s.createElement(L.P, null, Object(u.d)("Hosting", "ChatHostingNotification"))), s.createElement(L._7, {
                        ellipsis: !0,
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, s.createElement(L.P, {
                        type: L._44.Strong,
                        "data-test-selector": "hosting-notification__text",
                        "data-a-target": "hosting-notification-channel-name"
                    }, "" + this.props.hostedChannelDisplayName))), s.createElement(L._7, {
                        display: L.Q.Flex,
                        flexWrap: L.T.NoWrap,
                        flexShrink: 0
                    }, s.createElement(L._7, {
                        display: L.Q.Inline,
                        padding: {
                            right: .5
                        }
                    }, s.createElement(L.u, {
                        linkTo: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                content: "host_channel",
                                medium: "chat_bar_notification"
                            }
                        },
                        size: L.y.Small,
                        "data-a-target": "hosting-notification-gotochannel-button"
                    }, Object(u.d)("Go to Channel", "ChatHostingNotification"))), s.createElement(L.v, {
                        onClick: this.dismiss,
                        ariaLabel: Object(u.d)("Close", "HostingNotification"),
                        size: L.w.Small,
                        overlay: !0,
                        icon: L._21.Close,
                        "data-a-target": "hosting-notification-close-button"
                    })))) : null
                }, t
            }(s.Component),
            te = n("F8kA"),
            ne = (n("W266"), "nativeBroadcastNotifDismissed"),
            ie = [{
                title: "English",
                login: "esamarathon"
            }, {
                title: "Français",
                login: "LeFrenchRestream"
            }, {
                title: "Deutsch",
                login: "GermenchRestream"
            }, {
                title: "Русский",
                login: "SpeedrunsRussia"
            }],
            ae = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isClosed: !1
                    }, t.getChannelLinks = function() {
                        var e = k.b.get("native_broadcast_blacklist", []);
                        return ie.filter(function(t) {
                            return e.indexOf(t.login.toLowerCase()) < 0
                        }).filter(function(e) {
                            return e.login.toLowerCase() !== t.props.channelLogin.toLowerCase()
                        }).map(function(e) {
                            var t = e.title + " (" + e.login + ")";
                            return s.createElement("li", {
                                key: e.login
                            }, s.createElement(te.a, {
                                className: "native-broadcast-notification__link",
                                to: "/" + e.login.toLowerCase()
                            }, t))
                        })
                    }, t.onDismiss = function() {
                        t.setState({
                            isClosed: !0
                        });
                        var e, n = o.__assign({}, u.l.get(ne, {}), ((e = {})[t.props.channelLogin.toLowerCase()] = Date.now(), e));
                        u.l.set(ne, n)
                    }, t.onExpire = function() {
                        t.setState({
                            isClosed: !0
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.channelLogin.toLowerCase() !== this.props.channelLogin.toLowerCase() && this.setState({
                        isClosed: !1
                    })
                }, t.prototype.render = function() {
                    if (this.state.isClosed) return null;
                    if (!this.isEventChannel(this.props.channelLogin)) return null;
                    if (this.hasDismissedForChannel(this.props.channelLogin)) return null;
                    var e = Date.now();
                    if (e < 15191352e5 || e >= 15195132e5) return null;
                    var t = this.getChannelLinks();
                    return t.length ? s.createElement(L._30, {
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        background: L.m.AccentAlt2,
                        color: L.J.Overlay,
                        padding: 1,
                        position: L._14.Absolute
                    }, s.createElement(L._7, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(L.P, {
                        type: L._44.H4
                    }, Object(u.d)("ESA Winter 2018", "NativeBroadcastNotification"))), s.createElement(L._7, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(L.P, {
                        color: L.J.OverlayAlt
                    }, Object(u.d)("Want to watch ESA in you local language? Try one of these international broadcasts!", "NativeBroadcastNotification"))), s.createElement("ul", null, t), s.createElement(L._7, {
                        attachRight: !0,
                        attachTop: !0,
                        margin: 1,
                        position: L._14.Absolute
                    }, s.createElement(L.v, {
                        ariaLabel: Object(u.d)("Close", "NativeBroadcastNotification"),
                        icon: L._21.Close,
                        onClick: this.onDismiss,
                        overlay: !0,
                        size: L.w.Small,
                        "data-a-target": "native-broadcast-notification-close-button"
                    })), s.createElement(L._7, {
                        margin: {
                            top: .5
                        }
                    }, s.createElement(L._17, {
                        countdown: 30,
                        onCountdownEnd: this.onExpire,
                        size: L._18.ExtraSmall
                    }))) : null
                }, t.prototype.isEventChannel = function(e) {
                    return ie.map(function(e) {
                        return e.login.toLowerCase()
                    }).includes(e.toLowerCase())
                }, t.prototype.hasDismissedForChannel = function(e) {
                    var t = u.l.get(ne, {})[e.toLowerCase()];
                    return !!t && t >= 15191352e5
                }, t
            }(s.Component),
            re = n("+Znq"),
            oe = n("7MbV"),
            se = (n("q4rf"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onClickInteraction = function(e) {
                        t.props.sendMessage(":act " + e.currentTarget.getAttribute("data-action")), t.toggleBalloonRef.toggleBalloon()
                    }, t.setToggleBalloonRef = function(e) {
                        return t.toggleBalloonRef = e
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    var e = this.getPresetText();
                    return this.props.isLoggedIn && 0 !== e.length ? s.createElement(L._30, {
                        className: "orbis",
                        display: L.Q.Flex,
                        flexDirection: L.S.Column,
                        alignItems: L.c.Stretch,
                        background: L.m.Base,
                        flexShrink: 0,
                        borderBottom: !0
                    }, s.createElement(re.a, {
                        ref: this.setToggleBalloonRef
                    }, s.createElement("div", {
                        className: "orbis__dropdown-container",
                        "data-test-selector": "orbis-dropdown-container"
                    }, s.createElement(L._7, {
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: L.Q.Flex,
                        justifyContent: L._6.Between,
                        flexWrap: L.T.NoWrap
                    }, s.createElement(L._7, {
                        ellipsis: !0,
                        padding: {
                            right: 1
                        }
                    }, s.createElement(L.P, {
                        type: L._44.Span
                    }, Object(u.d)("Interactions Available", "Orbis"))), s.createElement(L._7, {
                        display: L.Q.Flex,
                        justifyContent: L._6.Between,
                        alignItems: L.c.Center,
                        flexShrink: 0
                    }, s.createElement(L._7, {
                        className: "orbis__dropdown-icon",
                        display: L.Q.Flex,
                        justifyContent: L._6.Between,
                        alignItems: L.c.Center
                    }, s.createElement(L._20, {
                        asset: L._21.AngleRight
                    }))))), s.createElement(L.p, {
                        offsetY: "1px",
                        noTail: !0
                    }, s.createElement(L._7, {
                        className: "orbis__dropdown-content",
                        padding: 1
                    }, this.renderInteractions(e))))) : null
                }, t.prototype.renderInteractions = function(e) {
                    for (var t = [], n = 0, i = e; n < i.length; n++) {
                        var a = i[n];
                        t.push(this.renderInteraction(a))
                    }
                    return t
                }, t.prototype.renderInteraction = function(e) {
                    return e ? s.createElement(L._5, {
                        onClick: this.onClickInteraction,
                        key: e,
                        "data-action": e,
                        "data-test-selector": "orbis-interaction"
                    }, s.createElement(L._1, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, s.createElement(L.P, {
                        ellipsis: !0
                    }, e))) : null
                }, t.prototype.getPresetText = function() {
                    if (!(this.props.data && this.props.data.user && this.props.data.user.stream && this.props.data.user.stream.platform && this.props.data.user.stream.platform.title)) return [];
                    var e = this.props.data.user.stream.platform.title.presetText;
                    return e.some(function(e) {
                        return "" !== e
                    }) ? e : []
                }, t
            }(s.Component)),
            le = Object(l.a)(oe, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.isLoggedIn || !e.channelLogin
                }
            })(se);
        var de = Object(a.b)(function(e) {
                return {
                    isLoggedIn: Object(r.d)(e)
                }
            })(le),
            ce = n("BMQ2"),
            ue = n("WIs4"),
            me = n("aSvS"),
            pe = n("rIzn"),
            he = n("J7iJ"),
            ge = n("KfLc"),
            fe = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(L._30, {
                        background: L.m.Base,
                        color: L.J.Alt
                    }, s.createElement(L._7, {
                        padding: {
                            bottom: .5,
                            top: 1,
                            x: 1
                        }
                    }, s.createElement(L._7, {
                        margin: {
                            bottom: .5
                        }
                    }, s.createElement(L.P, {
                        bold: !0,
                        type: L._44.H5
                    }, Object(u.d)("Introducing: New Chatter Announcements!", "RitualsOnboardingSticky"))), s.createElement(L._7, {
                        margin: {
                            bottom: .5
                        }
                    }, s.createElement(L.P, {
                        type: L._44.Span
                    }, Object(u.d)("New chatter announcements are now active in your channel, making it easier to welcome new people.", "RitualsOnboardingSticky")), s.createElement(L.P, null, s.createElement(te.a, {
                        onClick: this.props.onClick,
                        to: "/" + this.props.channelLogin + "/dashboard/settings",
                        "data-test-selector": "rituals-sticky-link"
                    }, Object(u.d)("Manage in Dashboard", "RitualsOnboardingSticky"))))), s.createElement(L._30, {
                        alignItems: L.c.Center,
                        background: L.m.Alt2,
                        borderBottom: !0,
                        color: L.J.Alt2,
                        display: L.Q.Flex,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, s.createElement(L._20, {
                        asset: L._21.Lock,
                        height: 12,
                        width: 12
                    }), s.createElement(L._7, {
                        display: L.Q.Inline,
                        margin: {
                            left: .5
                        }
                    }, s.createElement(L.P, {
                        fontSize: L.U.Size8,
                        type: L._44.Span
                    }, Object(u.d)("You see this because you own this channel", "RitualsOnboardingSticky")))), s.createElement(L._30, {
                        attachRight: !0,
                        attachTop: !0,
                        padding: {
                            x: .5,
                            top: 1
                        },
                        position: L._14.Absolute
                    }, s.createElement(L.v, {
                        ariaLabel: Object(u.d)("Close", "RitualsOnboardingSticky"),
                        icon: L._21.Close,
                        onClick: this.props.onDismiss,
                        size: L.w.Small,
                        type: L.x.Secondary,
                        "data-test-selector": "rituals-sticky-dismiss-button"
                    })))
                }, t
            }(s.PureComponent),
            ve = "seenNewChatterAnnouncementSticky",
            be = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isDismissed: !1
                    }, n.onClick = function() {
                        Object(ge.c)({
                            action: me.a.Click,
                            channelID: n.props.channelID
                        })
                    }, n.onDismiss = function() {
                        u.l.set(ve, !0), n.setState({
                            isDismissed: !0
                        }), Object(ge.c)({
                            action: me.a.Dismiss,
                            channelID: n.props.channelID
                        })
                    }, n.state.isDismissed = u.l.get(ve, !1), n
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return !this.props.data || this.props.data.loading || this.props.data.error ? null : this.props.data.channel.settings.isRitualsEnabled ? this.state.isDismissed ? null : s.createElement(fe, {
                        channelLogin: this.props.channelLogin,
                        onClick: this.onClick,
                        onDismiss: this.onDismiss
                    }) : null
                }, t
            }(s.Component);

        function ke(e) {
            return e.currentUserID !== e.channelID || !Object(pe.a)()
        }
        var ye = Object(d.compose)(Object(a.b)(function(e) {
                var t = Object(r.c)(e);
                return {
                    currentUserID: t && t.id
                }
            }, null), Object(l.a)(he, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: ke
            }), Object(ue.a)(function(e) {
                return {
                    query: he,
                    variables: {
                        id: e.channelID
                    },
                    topic: Object(M.p)(e.channelID),
                    type: I.PubsubMessageType.UpdatedChannelChatProperty,
                    mutator: function(e, t) {
                        return t.channel.settings.isRitualsEnabled = e.data.is_rituals_enabled, t
                    },
                    skip: ke(e)
                }
            }))(be),
            _e = n("qkCi"),
            Ce = 200,
            Se = function() {
                return function(e) {
                    var t = this;
                    this.resetWithChannelLogin = function(e) {
                        t.activeChatterLogins = new Set, t.activeChatters = {}, t.channelLogin = e, t.currentUserLogin = null, t.isDirty = !0
                    }, this.getActiveChatters = function() {
                        return t.isDirty = !1, Object.keys(t.activeChatters).map(function(e) {
                            return t.activeChatters[e]
                        })
                    }, this.setCurrentUserLogin = function(e) {
                        t.currentUserLogin = e, t.activeChatterLogins.has(e) && (t.isDirty = !0, t.removeActiveChatter(e))
                    }, this.consumeChatEvent = function(e) {
                        t.getUsersFromEvent(e).forEach(function(e) {
                            t.handleActiveChatter(e)
                        })
                    }, this.getUsersFromEvent = function(e) {
                        switch (e.type) {
                            case _e.b.Message:
                                return [{
                                    login: e.user.userLogin,
                                    displayName: e.user.userDisplayName
                                }];
                            case _e.b.Ritual:
                                return [{
                                    login: e.message.user.userLogin,
                                    displayName: e.message.user.userDisplayName
                                }];
                            case _e.b.Raid:
                                return [{
                                    login: e.params.login,
                                    displayName: e.params.displayName
                                }];
                            case _e.b.Resubscription:
                            case _e.b.Subscription:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }];
                            case _e.b.SubGift:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }, {
                                    login: e.recipient
                                }];
                            default:
                                return []
                        }
                    }, this.handleActiveChatter = function(e) {
                        e.login !== t.channelLogin && e.login !== t.currentUserLogin && (t.activeChatterLogins.has(e.login) ? (t.activeChatterLogins.delete(e.login), t.addActiveChatter(e)) : (t.addActiveChatter(e), t.trimActiveChatters(), t.isDirty = !0))
                    }, this.addActiveChatter = function(e) {
                        t.activeChatterLogins.add(e.login), t.activeChatters[e.login] = e
                    }, this.removeActiveChatter = function(e) {
                        t.activeChatterLogins.delete(e), delete t.activeChatters[e]
                    }, this.trimActiveChatters = function() {
                        if (!(t.activeChatterLogins.size <= Ce))
                            for (var e = t.activeChatterLogins.size - Ce, n = t.activeChatterLogins.values(), i = 0; i < e; i++) {
                                var a = n.next().value;
                                t.removeActiveChatter(a)
                            }
                    }, this.resetWithChannelLogin(e)
                }
            }(),
            Ee = n("mwvJ"),
            Ne = 1e3,
            we = 1e3,
            De = 250,
            Oe = 0,
            Ie = 200,
            Te = function() {
                function e(e, t) {
                    void 0 === e && (e = De), void 0 === t && (t = function() {});
                    var n = this;
                    this.maxSize = e, this.onBufferUpdate = t, this.delayedMessageBuffer = [], this.setDelay = function(e) {
                        n.delayDuration = e
                    }, this.setCurrentUserLogin = function(e) {
                        n.currentUserLogin = e
                    }, this.consumeChatEvent = function(e) {
                        var t = !1;
                        switch (e.type) {
                            case _e.b.Message:
                                if (n.uncountedMessages++, e.user.userID && n.blockedUsers.has(e.user.userID)) return;
                                var i = e.messageParts[0];
                                if (i && i.type === Ee.a.Text && i.content.startsWith(":act ")) return;
                                t = !n.isOwnMessage(e);
                                break;
                            case _e.b.Resubscription:
                                t = !!e.message && !n.isOwnMessage(e.message);
                                break;
                            case _e.b.Moderation:
                                var a = e.userLogin;
                                if (n.moderatedUsers.has(a)) return;
                                [n.buffer, n.delayedMessageBuffer.map(function(e) {
                                    return e.event
                                })].forEach(function(e) {
                                    e.forEach(function(e) {
                                        switch (e.type) {
                                            case _e.b.Message:
                                                e.user && a === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0);
                                                break;
                                            case _e.b.Resubscription:
                                            case _e.b.Ritual:
                                                e.message && a === e.message.user.userLogin && !e.message.deleted && (e.message.deleted = !0)
                                        }
                                    })
                                }), n.moderatedUsers.add(a), setTimeout(n.unmoderateUser(a), Ne);
                                break;
                            case _e.b.Disconnected:
                                return;
                            case _e.b.Reconnect:
                                if (n.buffer.find(function(t) {
                                        return t.id === e.id
                                    }) || n.delayedMessageBuffer.find(function(t) {
                                        return t.event.id === e.id
                                    })) return;
                                break;
                            case _e.b.Clear:
                                n.clear();
                                break;
                            case _e.b.ModerationAction:
                                if (n.currentUserLogin && e.createdByLogin === n.currentUserLogin) return
                        }
                        n.delayedMessageBuffer.push({
                            event: e,
                            time: Date.now(),
                            shouldDelay: t
                        })
                    }, this.unmoderateUser = function(e) {
                        return function() {
                            n.moderatedUsers.delete(e)
                        }
                    }, this.isOwnMessage = function(e) {
                        var t = e.user;
                        return !(!n.currentUserLogin || !t || t.userLogin !== n.currentUserLogin)
                    }, this.currentUserLogin = null, this.delayedMessageBuffer = [], this.buffer = [], this._isDirty = !1, this.moderatedUsers = new Set, this.blockedUsers = new Set, this.delayDuration = Oe, this.throttlingDuration = Ie, this.flushInterval = setInterval(function() {
                        return n.flushRawMessages()
                    }, this.throttlingDuration), this.uncountedMessages = 0, this.chatRateMeasurements = [], this.chatRateMeasurementInterval = setInterval(function() {
                        return n.measureChatRate()
                    }, we), this.setBlockedUsers = this.setBlockedUsers.bind(this)
                }
                return e.prototype.shutdown = function() {
                    this.flushInterval && (clearInterval(this.flushInterval), clearInterval(this.chatRateMeasurementInterval))
                }, e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e.prototype.toArray = function() {
                    return this.buffer = this.buffer.slice(-this.maxSize), this._isDirty = !1, this.buffer
                }, e.prototype.clear = function(e) {
                    if (void 0 === e && (e = 0), e <= 0) return this.buffer = [], void(this.delayedMessageBuffer = []);
                    this.buffer = this.buffer.slice(-e)
                }, e.prototype.isDeletable = function(e) {
                    return void 0 !== e.deleted
                }, e.prototype.flushRawMessages = function() {
                    var e = this,
                        t = [],
                        n = Date.now();
                    this.delayedMessageBuffer.forEach(function(i) {
                        var a = i.event,
                            r = i.time,
                            o = i.shouldDelay;
                        r <= n - e.delayDuration || !o ? e.isDeletable(a) && a.deleted || (e.buffer.push(a), e._isDirty = !0, e.onBufferUpdate()) : t.push({
                            event: a,
                            time: r,
                            shouldDelay: o
                        })
                    }), this.delayedMessageBuffer = t
                }, e.prototype.measureChatRate = function() {
                    3 === this.chatRateMeasurements.length && this.chatRateMeasurements.shift(), this.chatRateMeasurements.push(this.uncountedMessages), this.uncountedMessages = 0
                }, Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "moderatedUserCount", {
                    get: function() {
                        return this.moderatedUsers.size
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "chatRate", {
                    get: function() {
                        return 0 === this.chatRateMeasurements.length ? 0 : this.chatRateMeasurements.reduce(function(e, t) {
                            return e + t
                        }) / this.chatRateMeasurements.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), e
            }(),
            Me = n("INp2");
        var Re = n("6Agf");
        var xe = n("aUOx"),
            Le = n("l21v");

        function Ae(e, t, n, i, a, r, s) {
            return void 0 === s && (s = !1), o.__assign({}, Object(Le.a)(t, n, i, a, r, s), {
                type: _e.b.Message,
                messageType: e,
                id: n.id || Object(Me.a)(n.username)
            })
        }
        var Fe = n("Ncf8");
        var je = n("O0Qc"),
            Ue = n("YhVV"),
            Be = function() {
                function e(e, t, n) {
                    var i = this;
                    this.onJoinedEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, {
                            type: _e.b.Connected,
                            id: Object(Me.a)("connected")
                        })
                    }, this.onDisconnectedEvent = function(e) {
                        return i.postMessage((t = e.reason, {
                            type: _e.b.Disconnected,
                            id: Object(Me.a)("disconnected"),
                            reason: t
                        }));
                        var t
                    }, this.onReconnectingEvent = function(e) {
                        return i.postMessage({
                            type: _e.b.Reconnect,
                            id: Object(Me.a)("reconnect")
                        })
                    }, this.onHostedEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.from, n = e.isAuto, a = e.viewers, {
                            type: _e.b.Hosted,
                            id: Object(Me.a)("hosted-" + t),
                            hostingChannel: t,
                            isAutohost: n,
                            viewerCount: a
                        }));
                        var t, n, a
                    }, this.onHostingEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.target, {
                            type: _e.b.Hosting,
                            id: Object(Me.a)("hosting"),
                            hostedChannel: t
                        }));
                        var t
                    }, this.onUnhostEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.channel, {
                            type: _e.b.Unhost,
                            id: Object(Me.a)("unhost-" + t)
                        }));
                        var t
                    }, this.onChatMessageEvent = function(e) {
                        i.postMessageToCurrentChannel(e, i.convertMessage(e))
                    }, this.onChatActionEvent = function(e) {
                        var t = i.bitsConfig || S.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0,
                            a = Ae(_e.c.Action, e.action, e.message.user, t, i.shouldBlockLinks(e.message.user), n);
                        i.postMessageToCurrentChannel(e, a)
                    }, this.onChatNoticeEvent = function(e) {
                        if ("msg_rejected" !== e.msgid) {
                            var t = (n = e.channel, a = e.msgid, r = e.body, {
                                type: _e.b.Notice,
                                id: Object(Me.a)("notice"),
                                channel: n,
                                msgid: a,
                                message: r
                            });
                            i.postMessageToCurrentChannel(e, t)
                        }
                        var n, a, r
                    }, this.onTimeoutEvent = function(e) {
                        i.onModerationEvent(_e.e.Timeout, e)
                    }, this.onBanEvent = function(e) {
                        i.onModerationEvent(_e.e.Ban, e)
                    }, this.onModerationEvent = function(e, t) {
                        i.postMessageToCurrentChannel(t, Object(Fe.a)(e, t.userLogin, t.reason, t.duration))
                    }, this.onSubscriptionEvent = function(e) {
                        var t, n, a, r, o;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "Tier 1"
                        }
                        i.postMessageToCurrentChannel(e, (n = e.channel, a = e.user, r = e.methods.prime, o = t, {
                            type: _e.b.Subscription,
                            id: Object(Me.a)(a.username + "-sub"),
                            channel: n.slice(1),
                            isPrime: r,
                            tier: o,
                            user: a
                        }))
                    }, this.onSubscriptionGiftEvent = function(e) {
                        var t, n, a, r, o, s, l;
                        switch (e.methods.plan) {
                            case "1000":
                                t = "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "custom"
                        }
                        i.postMessageToCurrentChannel(e, (n = e.channel, a = e.user, r = e.methods.prime, o = t, s = e.recipientName, l = e.senderCount, {
                            type: _e.b.SubGift,
                            id: Object(Me.a)(a.username + "-sub"),
                            channel: n.slice(1),
                            isPrime: r,
                            recipient: s,
                            senderCount: l,
                            tier: o,
                            user: a
                        }))
                    }, this.onBitsCharityEvent = function(e) {
                        var t, n, a, r, o, s;
                        i.postMessage((t = e.total, n = e.charityName, a = e.daysLeft, r = e.hoursLeft, o = e.hashtag, s = e.learnMore, {
                            type: _e.b.BitsCharity,
                            id: Object(Me.a)("charity"),
                            total: t,
                            charityName: n,
                            daysLeft: a,
                            hoursLeft: r,
                            hashtag: o,
                            learnMore: s
                        }))
                    }, this.onResubscriptionEvent = function(e) {
                        var t, n, a, r, o, s, l, d;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "Tier 1"
                        }
                        i.postMessageToCurrentChannel(e, (n = e.channel, a = e.user, r = e.methods.prime, o = e.months, s = t, l = e.body, d = void 0, l && (d = Ae(_e.c.Post, l, a, S.a, !1)), {
                            type: _e.b.Resubscription,
                            id: Object(Me.a)(a.username + "-sub"),
                            channel: n.slice(1),
                            isPrime: r,
                            months: o,
                            tier: s,
                            user: a,
                            message: d
                        }))
                    }, this.onRoomModsEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.usernames, {
                            type: _e.b.RoomMods,
                            id: Object(Me.a)("roommods"),
                            moderatorLogins: t
                        }));
                        var t
                    }, this.onRoomStateEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.state, {
                            type: _e.b.RoomState,
                            id: Object(Me.a)("roomstate"),
                            state: t
                        }));
                        var t
                    }, this.onSlowModeEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.enabled, n = e.length, {
                            type: _e.b.SlowMode,
                            id: Object(Me.a)("slowmode"),
                            enabled: t,
                            length: n
                        }));
                        var t, n
                    }, this.onEmoteOnlyModeEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.enabled, {
                            type: _e.b.EmoteOnlyMode,
                            id: Object(Me.a)("emoteonlymode"),
                            enabled: t
                        }));
                        var t
                    }, this.onFollowerOnlyModeEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.enabled, n = e.length, {
                            type: _e.b.FollowerOnlyMode,
                            id: Object(Me.a)("follower-only"),
                            enabled: t,
                            length: n
                        }));
                        var t, n
                    }, this.onSubscriberOnlyModeEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.enabled, {
                            type: _e.b.SubscriberOnlyMode,
                            id: Object(Me.a)("subscriber-only"),
                            enabled: t
                        }));
                        var t
                    }, this.onClearChatEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, {
                            type: _e.b.Clear,
                            id: Object(Me.a)("clear")
                        })
                    }, this.onRaidEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.channel, n = e.userLogin, a = e.params, {
                            type: _e.b.Raid,
                            id: Object(Me.a)("raid"),
                            channel: t,
                            userLogin: n,
                            params: a
                        }));
                        var t, n, a
                    }, this.onUnraidEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.channel, n = e.userLogin, a = e.message, {
                            type: _e.b.Unraid,
                            id: Object(Me.a)("unraid"),
                            channel: t,
                            userLogin: n,
                            message: a
                        }));
                        var t, n, a
                    }, this.onRitualEvent = function(e) {
                        var t, n;
                        i.postMessage((t = e.type, n = i.convertMessage(e), {
                            type: _e.b.Ritual,
                            id: Object(Me.a)(n.user.userLogin + "-" + t + "-ritual"),
                            ritualType: t,
                            message: n
                        }))
                    }, this.onBadgesUpdatedEvent = function(e) {
                        return i.postMessage((t = e.username, n = e.badges, {
                            type: _e.b.BadgesUpdated,
                            id: Object(Me.a)("updateBadges"),
                            userName: t,
                            badges: n
                        }));
                        var t, n
                    }, this.onPurchaseEvent = function(e) {
                        var t = i.bitsConfig || S.a;
                        i.postMessage(function(e, t, n, i) {
                            return {
                                bitsConfig: i,
                                message: t,
                                purchase: e,
                                timestamp: n,
                                id: Object(Me.a)(t.user.userLogin + "-purchase"),
                                type: _e.b.Purchase
                            }
                        }(e.purchase, i.convertMessage(e), e.timestamp, t))
                    }, this.onCrateEvent = function(e) {
                        var t, n;
                        i.postMessage((t = i.convertMessage(e), n = e.selectedCount, {
                            type: _e.b.CrateGift,
                            id: Object(Me.a)("crate"),
                            message: t,
                            selectedCount: n
                        }))
                    }, this.convertMessage = function(e) {
                        var t = i.bitsConfig || S.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0;
                        return Ae(_e.c.Post, e.message.body, e.message.user, t, i.shouldBlockLinks(e.message.user), n)
                    }, this.logger = u.j.withCategory("chat-service"), this.logger.debug("Created"), this.userLogin = e, this.channelLogin = t, this.service = u.o.tmi, this.client = u.o.tmi.client, this.postMessage = n, this.disabled = u.o.tmi.disabled
                }
                return e.prototype.join = function() {
                    return o.__awaiter(this, void 0, void 0, function() {
                        return o.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Joining channel and binding all event listeners", this.channelLogin), this.connectHandlers(), [4, this.service.join(this.channelLogin)];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.part = function() {
                    return o.__awaiter(this, void 0, void 0, function() {
                        return o.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Parting channel and unbinding all event listeners", this.channelLogin), this.client.events.removeAll(), [4, this.service.part()];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.sendMessage = function(e) {
                    var t = this,
                        n = Object(je.l)(e, this.channelLogin);
                    return n.handled ? n.result && n.result.deferred && n.result.deferred.then(function(e) {
                        var n = e.notice;
                        n && t.postMessage(Object(xe.a)(n))
                    }) : this.client.sendCommand(this.channelLogin, e).catch(function(e) {
                        u.j.warn("Failed to send message, or message timeout", e)
                    }), n.result
                }, e.prototype.updateEmotes = function(e) {
                    this.selfEmotes = Object(Ue.a)(e), this.client.updateEmoteSets(e)
                }, e.prototype.updateChannelBadges = function(e) {
                    this.client.updateChannelBadges(this.channelLogin, e)
                }, e.prototype.updateBitsConfig = function(e) {
                    this.bitsConfig = e
                }, e.prototype.updateBlockLinks = function(e) {
                    this.blockLinks = e
                }, e.prototype.connectHandlers = function() {
                    this.client.events.removeAll(), this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosted(this.onHostedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.crate(this.onCrateEvent), this.client.events.ritual(this.onRitualEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.followersonly(this.onFollowerOnlyModeEvent), this.client.events.slowmode(this.onSlowModeEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent), this.client.events.emoteonlymode(this.onEmoteOnlyModeEvent), this.client.events.charity(this.onBitsCharityEvent)
                }, e.prototype.shouldBlockLinks = function(e) {
                    return e.username !== this.channelLogin && e.userType !== Re.a.Staff && e.userType !== Re.a.GlobalMod && e.userType !== Re.a.Moderator && this.blockLinks
                }, e.prototype.postMessageToCurrentChannel = function(e, t) {
                    e.channel.toLowerCase().replace("#", "") === this.channelLogin.toLowerCase() && this.postMessage(t)
                }, e
            }(),
            Pe = n("H/22"),
            Ve = function() {
                return function(e, t, n) {
                    this.channelID = e, this.sessionUserID = t, this.unsubscribe = u.k.subscribe({
                        topic: Object(M.k)(this.sessionUserID, this.channelID),
                        onMessage: function(e) {
                            switch (e.data.moderation_action) {
                                case I.ModerationActions.AutoModRejected:
                                    var t = Object(Pe.e)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    n(t);
                                    break;
                                case I.TargetedModerationActions.AutoModMessageRejected:
                                    n(Object(Pe.d)());
                                    break;
                                case I.TargetedModerationActions.AutoModMessageApproved:
                                    n(Object(Pe.b)());
                                    break;
                                case I.TargetedModerationActions.AutoModMessageDenied:
                                    n(Object(Pe.c)());
                                    break;
                                case I.ModerationActions.Ban:
                                    n(Object(Pe.g)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], void 0, e.data.args[1]));
                                    break;
                                case I.ModerationActions.Unban:
                                case I.ModerationActions.Timeout:
                                case I.ModerationActions.Untimeout:
                                case I.ModerationActions.Mod:
                                case I.ModerationActions.Unmod:
                                    n(Object(Pe.g)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], e.data.args[1], e.data.args[2]));
                                    break;
                                case I.ModerationActions.AutoModEnabled:
                                case I.ModerationActions.Clear:
                                case I.ModerationActions.EmoteOnly:
                                case I.ModerationActions.EmoteOnlyOff:
                                case I.ModerationActions.FollowersOnly:
                                case I.ModerationActions.FollowersOnlyOff:
                                case I.ModerationActions.Host:
                                case I.ModerationActions.R9kBeta:
                                case I.ModerationActions.R9kBetaOff:
                                case I.ModerationActions.Raid:
                                case I.ModerationActions.Slow:
                                case I.ModerationActions.SlowOff:
                                case I.ModerationActions.SubsBeta:
                                case I.ModerationActions.SubscribersOnly:
                                case I.ModerationActions.SubscribersOnlyOff:
                                case I.ModerationActions.Unhost:
                                case I.ModerationActions.Unraid:
                                    n(Object(Pe.f)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.args));
                                    break;
                                default:
                                    u.j.warn("Unknown moderation action type", e.data.moderation_action)
                            }
                        }
                    })
                }
            }(),
            He = n("QFW6"),
            We = n("CSlQ"),
            Ge = n("9fnI"),
            Qe = n("Z3Cb"),
            qe = "(?:\\W|^)",
            ze = "(?:$|\\W)",
            Ye = 150,
            Je = "PowerUpL DarkMode PowerUpR",
            $e = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        hasEnteredChatRoom: !1,
                        hostedChannelLogin: null,
                        raidReceived: !1,
                        userBadges: null
                    }, n.sendMessage = function(e) {
                        if (!e || 0 === e.length || !n.props.authToken) return !1;
                        var t = n.chatService.sendMessage(e);
                        return (!t || !t.preserveInput) && (n.parseOutgoingMessage(e), !0)
                    }, n.pushMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e)
                    }, n.onChatMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e), n.onChatEvent(e)
                    }, n.connect = function(e) {
                        n.logger.debug("Connect", n.props.channelLogin), n.setState({
                            hasEnteredChatRoom: !1
                        }), e.userID && e.channelID && (n.moderationActionService = new Ve(e.channelID, e.userID, n.chatBuffer.consumeChatEvent)), n.chatService.join()
                    }, n.disconnect = function() {
                        n.logger.debug("Disconnect", n.props.channelLogin), n.clearBufferHandle(), n.moderationActionService && n.moderationActionService.unsubscribe(), n.chatService.part()
                    }, n.updateBitsConfig = function(e) {
                        void 0 === e && (e = S.a), n.chatService.updateBitsConfig(e)
                    }, n.updateBlockLinks = function(e) {
                        n.chatService.updateBlockLinks(e)
                    }, n.onChatBufferUpdate = function() {
                        n.syncBufferHandle || n.props.isBackground || (n.syncBufferHandle = setTimeout(n.syncBufferedMessages, 0))
                    }, n.syncBufferedMessages = function() {
                        n.chatBuffer && n.chatBuffer.isDirty && n.props.onChatMessagesUpdate(n.chatBuffer.toArray()), n.clearBufferHandle()
                    }, n.onChatEvent = function(e) {
                        switch (e.type) {
                            case _e.b.Hosting:
                                n.hostingHandler(e.hostedChannel);
                                break;
                            case _e.b.Unhost:
                                n.hostingHandler(null);
                                break;
                            case _e.b.Connected:
                                n.onConnected();
                                break;
                            case _e.b.RoomState:
                                n.roomStateHandler(e.state);
                                break;
                            case _e.b.BadgesUpdated:
                                n.onBadgesUpdated(e);
                                break;
                            case _e.b.Raid:
                                n.setState({
                                    raidReceived: !0
                                })
                        }
                    }, n.hostingHandler = function(e) {
                        n.setState({
                            hostedChannelLogin: e
                        }), n.props.onHostingChange && n.props.onHostingChange(e)
                    }, n.roomStateHandler = function(e) {
                        e.slowMode ? n.props.onSlowModeEnable() : n.props.onSlowModeDisable(), void 0 !== e.followersOnly && (e.followersOnly ? (n.props.onFollowerModeDurationChange(e.followersOnlyRequirement), n.props.onFollowerModeEnable()) : n.props.onFollowerModeDisable()), void 0 !== e.subsOnly && (e.subsOnly ? n.props.onSubsOnlyModeEnable() : n.props.onSubsOnlyModeDisable())
                    }, n.onConnected = function() {
                        n.logger.debug("Connected", n.props.channelLogin), n.chatConnected && n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.state.hasEnteredChatRoom || Object(He.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: !!n.state.hostedChannelLogin
                        }), n.setState({
                            hasEnteredChatRoom: !0
                        }), n.props.latencyTracking.reportInteractive()
                    }, n.createOutgoingTokenMatchers = function(e) {
                        n.outgoingTokenMatchers = e.map(function(e) {
                            return {
                                token: e,
                                regex: new RegExp("" + qe + e + ze)
                            }
                        })
                    }, n.parseOutgoingMessage = function(e) {
                        n.outgoingTokenMatchers.forEach(function(t) {
                            t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                        })
                    }, n.onOutgoingTokenMatch = function(e, t) {
                        switch (e) {
                            case Je:
                                var i = n.props.theme === m.a.Light ? m.a.Dark : m.a.Light;
                                n.props.onThemeChange(i);
                                break;
                            default:
                                return
                        }
                    }, n.onBadgesUpdated = function(e) {
                        n.setState({
                            userBadges: e.badges
                        })
                    }, n.clearBufferHandle = function() {
                        n.syncBufferHandle && (clearTimeout(n.syncBufferHandle), n.syncBufferHandle = 0)
                    }, n.chatService = new Be(t.userLogin, t.channelLogin, n.onChatMessage), n.logger = u.j.withCategory("chat-room"), n.registerCustomLatencyEvents(), n.createOutgoingTokenMatchers([Je]), n.activeChatters = new Se(t.channelLogin), n.chatBuffer = new Te(Ye, n.onChatBufferUpdate), n.chatBuffer.setBlockedUsers(t.blockedUsers), t.userLogin && (n.chatBuffer.setCurrentUserLogin(t.userLogin), n.activeChatters.setCurrentUserLogin(t.userLogin)), n
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.shouldConnectOnMount() ? this.connect(this.props) : this.props.latencyTracking.reportInteractive(), this.props.bitsConfig && this.updateBitsConfig(this.props.bitsConfig), this.updateBlockLinks(this.props.blockLinks), this.props.emoteSetsData && this.props.emoteSetsData.emoteSets && (this.logger.debug("Updating emote sets after mount", {
                        emoteSets: this.props.emoteSetsData && this.props.emoteSetsData.emoteSets
                    }), this.chatService.updateEmotes(this.props.emoteSetsData.emoteSets))
                }, t.prototype.componentWillUnmount = function() {
                    this.disconnect(), this.chatBuffer && this.chatBuffer.shutdown(), this.props.onChatMessagesReset()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props,
                        n = !1;
                    if (e.isHidden && !t.isHidden || !e.rightColumnExpanded && t.rightColumnExpanded ? this.disconnect() : (n = e.channelLogin !== t.channelLogin || e.userLogin !== t.userLogin || e.authToken !== t.authToken || !e.isHidden && t.isHidden || e.rightColumnExpanded && !t.rightColumnExpanded) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.connect(e), this.setState({
                            hostedChannelLogin: null
                        })), this.props.isBackground && !e.isBackground) {
                        var i = u.l.getOptional("roomsFastChatThresholdOverride");
                        if (i || (i = 5), this.chatBuffer.chatRate > i) {
                            var a = u.l.getOptional("roomsClearedBufferSize");
                            a || (a = 20), this.chatBuffer.clear(a)
                        }
                        this.props.onChatMessagesUpdate(this.chatBuffer.toArray())
                    }
                    var r = e.emoteSetsData && e.emoteSetsData.emoteSets,
                        o = t.emoteSetsData && t.emoteSetsData.emoteSets;
                    r && (r !== o || n) && (this.logger.debug("Updating emote sets on props change", {
                        shouldReconnect: n,
                        prevEmoteSets: o,
                        nextEmoteSets: r
                    }), this.chatService.updateEmotes(r)), (e.bitsConfig !== t.bitsConfig || n) && this.updateBitsConfig(e.bitsConfig), (e.blockLinks !== t.blockLinks || n) && this.updateBlockLinks(e.blockLinks);
                    var s = e.isCurrentUserModerator ? 0 : e.chatDelayMS;
                    this.chatBuffer.setDelay(s), e.userLogin && t.userLogin !== e.userLogin && (this.chatBuffer.setCurrentUserLogin(e.userLogin), this.activeChatters.setCurrentUserLogin(e.userLogin)), t.channelLogin !== e.channelLogin && this.activeChatters.resetWithChannelLogin(e.channelLogin), t.blockedUsers !== e.blockedUsers && this.chatBuffer.setBlockedUsers(e.blockedUsers), !this.moderationActionService && e.userID && e.channelID && (this.moderationActionService = new Ve(e.channelID, e.userID, this.chatBuffer.consumeChatEvent))
                }, t.prototype.render = function() {
                    var e = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                        t = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {};
                    return s.createElement(Qe.b, {
                        authToken: this.props.authToken,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        activeChatters: this.activeChatters,
                        chatRoomHeader: s.createElement(de, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        }),
                        chatRules: this.props.chatRules,
                        currentUserDisplayName: this.props.userDisplayName,
                        currentUserLogin: this.props.userLogin,
                        emotes: e,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hostedChannelLogin: this.state.hostedChannelLogin,
                        isBackground: this.props.isBackground,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHidden: this.props.isHidden,
                        isHostMode: !!this.state.hostedChannelLogin,
                        isOwnChannel: this.isOwnChannel,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.props.closeRoomPicker,
                        onChatUnhide: this.props.onChatUnhide,
                        onPushMessage: this.pushMessage,
                        onSendMessage: this.sendMessage,
                        raidReceived: this.state.raidReceived,
                        theme: this.props.theme,
                        isStaff: this.props.isStaff,
                        userBadges: this.state.userBadges,
                        userID: this.props.userID
                    }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && s.createElement(Z, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig
                    }), this.props.hostedChannelDisplayName && !this.props.isPopout && s.createElement(ee, {
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                        hostedChannelLogin: this.state.hostedChannelLogin || ""
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && s.createElement(ce.a, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && s.createElement(ae, {
                        channelLogin: this.props.channelLogin
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && s.createElement(ye, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin
                    }), s.createElement(w.a, {
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        userLogin: this.props.userLogin,
                        userID: this.props.userID,
                        emoteMap: t
                    }), s.createElement(N.a, {
                        currentUserLogin: this.props.userLogin
                    }), s.createElement(C, {
                        channelID: this.props.channelID
                    }))
                }, t.prototype.shouldConnectOnMount = function() {
                    return (this.props.isEmbedded || this.props.isPopout || this.props.rightColumnExpanded) && !this.chatService.disabled
                }, t.prototype.registerCustomLatencyEvents = function() {
                    this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents(f.a.Chat), this.chatInitialized = this.registerInitEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized), this.shouldConnectOnMount() && (this.chatConnected = this.registerConnectedEvent())
                }, t.prototype.registerInitEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 3e3,
                        group: f.a.Chat,
                        key: f.b.ChatInit,
                        label: f.c.Init
                    })
                }, t.prototype.registerConnectedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 4e3,
                        group: f.a.Chat,
                        key: f.b.ChatConnected,
                        label: f.c.Connected
                    })
                }, Object.defineProperty(t.prototype, "isOwnChannel", {
                    get: function() {
                        return this.props.userID === this.props.channelID
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(s.Component);
        var Ke = Object(d.compose)(Object(a.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isHidden: e.chat.isHidden,
                    isLoggedIn: Object(r.d)(e),
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theme: Object(v.a)(e)
                }
            }, function(e, t) {
                return Object(c.b)({
                    onChatMessagesReset: function() {
                        return X.B()
                    },
                    onChatMessagesUpdate: function(e) {
                        return X.R(t.channelLogin, e)
                    },
                    onChatUnhide: function() {
                        return X.T()
                    },
                    onFollowerModeDisable: function() {
                        return X.C()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return X.z(e)
                    },
                    onFollowerModeEnable: function() {
                        return X.J()
                    },
                    onSlowModeDisable: function() {
                        return X.G()
                    },
                    onSlowModeEnable: function() {
                        return X.N()
                    },
                    onSubsOnlyModeDisable: function() {
                        return X.H()
                    },
                    onSubsOnlyModeEnable: function() {
                        return X.O()
                    },
                    onThemeChange: function(e) {
                        return Object(g.b)(e, g.a.TypedCommand)
                    }
                }, e)
            }), Object(We.d)("ChatRoom"), Object(l.a)(Ge, {
                props: function(e) {
                    var t;
                    return e.data && e.data.user && e.data.user.cheer && e.data.user.cheer.emotes && (t = Object(E.a)(e.data.user.cheer.emotes)), {
                        bitsConfig: t
                    }
                },
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(p.a)(), Object(h.a)())($e),
            Ze = n("/eFD"),
            Xe = n("KNSH"),
            et = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.channelData.channel,
                        t = this.props.userData && this.props.userData.user,
                        n = !1,
                        i = !1;
                    if (t && e && e.self) {
                        var a = t.login === e.login;
                        n = e.self.isModerator || a || t.roles.isGlobalMod || t.roles.isSiteAdmin, i = t.roles.isStaff
                    }
                    var r = e && e.chatSettings && e.chatSettings.rules,
                        o = e && e.chatSettings && e.chatSettings.chatDelayMs,
                        l = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                    return s.createElement(Ke, {
                        key: this.props.channelLogin,
                        authToken: this.props.user && this.props.user.authToken,
                        blockLinks: l,
                        channelDisplayName: e && e.displayName,
                        channelID: e && e.id,
                        channelLogin: this.props.channelLogin,
                        chatRules: r,
                        chatDelayMS: o,
                        clientID: this.props.clientID,
                        isBackground: this.props.isBackground,
                        isCurrentUserModerator: n,
                        isEmbedded: !!this.props.isEmbedded,
                        isPopout: !!this.props.isPopout,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                        closeRoomPicker: this.props.closeRoomPicker,
                        onHostingChange: this.props.onHostingChange,
                        userDisplayName: this.props.user && this.props.user.displayName,
                        userID: this.props.user && this.props.user.id.toString(),
                        userLogin: this.props.user && this.props.user.login,
                        isStaff: i
                    })
                }, t = o.__decorate([Object(l.a)(Ze, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(l.a)(Xe, {
                    name: "userData",
                    skip: function(e) {
                        return !e.user
                    }
                }), Object(We.d)("Chat")], t)
            }(s.Component);
        var tt = Object(a.b)(function(e) {
            return {
                user: Object(r.c)(e)
            }
        })(et);
        n.d(t, !1, function() {
            return et
        }), n.d(t, "a", function() {
            return tt
        })
    },
    "1E7T": function(e, t) {},
    "1Eny": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1F7R": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("vh75"),
            o = n("TToO"),
            s = n("GiK3"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.props.addCommand(this.props.command, this.props.handler)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.command === e.command && this.props.handler === e.handler || (this.props.removeCommand(this.props.command), this.props.addCommand(e.command, e.handler))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.removeCommand(this.props.command)
                }, t.prototype.render = function() {
                    return null
                }, t
            }(s.PureComponent);
        var d = Object(i.b)(null, function(e) {
            return Object(a.b)({
                addCommand: r.y,
                removeCommand: r.S
            }, e)
        })(l);
        n.d(t, "a", function() {
            return d
        })
    },
    "1OO3": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("7vx8"),
            r = 60,
            o = 60 * r,
            s = 24 * o,
            l = 7 * s,
            d = 4 * l;
        var c, u = n("MApH");
        n.d(t, "a", function() {
                return c
            }), t.b = function(e) {
                var t = this;
                return Object(a.a)(u, {
                    props: function(n) {
                        return {
                            banUserMutation: function(a, c) {
                                return void 0 === c && (c = null), i.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: a,
                                                            expiresIn: c && function(e) {
                                                                if (!e) return "0s";
                                                                var t = e,
                                                                    n = "";
                                                                if (t > d) {
                                                                    var i = Math.floor(t / d);
                                                                    t -= i * d, n += i + "mo"
                                                                }
                                                                if (t > l) {
                                                                    var a = Math.floor(t / l);
                                                                    t -= a * l, n += a + "w"
                                                                }
                                                                if (t > s) {
                                                                    var c = Math.floor(t / s);
                                                                    t -= c * s, n += c + "d"
                                                                }
                                                                if (t > o) {
                                                                    var u = Math.floor(t / o);
                                                                    t -= u * o, n += u + "h"
                                                                }
                                                                if (t > r) {
                                                                    var m = Math.floor(t / r);
                                                                    t -= m * r, n += m + "m"
                                                                }
                                                                return t > 0 && (n += t + "s"), n
                                                            }(c)
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return [2, i.sent().data];
                                            case 3:
                                                throw i.sent(), new Error("Unable to ban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Ban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            },
            function(e) {
                e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetIsSelf = "TARGET_IS_SELF", e.TargetIsAnonymous = "TARGET_IS_ANONYMOUS", e.TargetIsMod = "TARGET_IS_MOD", e.TargetIsBroadcaster = "TARGET_IS_BROADCASTER", e.TargetIsStaff = "TARGET_IS_STAFF", e.TargetIsAdmin = "TARGET_IS_ADMIN", e.TargetIsGlobalMod = "TARGET_IS_GLOBAL_MOD", e.TargetIsAlreadyBanned = "TARGET_ALREADY_BANNED", e.DurationInvalid = "DURATION_INVALID"
            }(c || (c = {}))
    },
    "1bR2": function(e, t, n) {
        e.exports = n.p + "assets/gift1-8573b4d1700bd278971c52e7d077d1c4.png"
    },
    "1gtq": function(e, t, n) {
        var i = n("WNGz");
        e.exports = function(e) {
            var t = new Date;
            return t.setDate(t.getDate() - 1), i(e).getTime() === i(t).getTime()
        }
    },
    "1pvm": function(e, t) {},
    "1rLR": function(e, t, n) {
        var i = n("3EIC");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, 3 * n)
        }
    },
    "1tZx": function(e, t) {},
    "1udo": function(e, t, n) {
        var i = n("WNGz");
        e.exports = function() {
            return i(new Date)
        }
    },
    "1vwK": function(e, t) {},
    "25hp": function(e, t, n) {
        var i = n("G7No");
        e.exports = function(e, t) {
            var n = i(e, t) / 1e3;
            return n > 0 ? Math.floor(n) : Math.ceil(n)
        }
    },
    "2B/Z": function(e, t) {},
    "2I50": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChatInput_SendCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendCheerInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "currentUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsBalance"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\nsendCheer(input: $input) {\nid\ncurrentUser {\nid\nbitsBalance\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2IkU": function(e, t) {},
    "2LJg": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "roomMessageContent"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "RoomMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "content"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "fragments"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "Emote"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "token"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "User"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 183
            }
        };
        n.loc.source = {
            body: "fragment roomMessageContent on RoomMessage {\ncontent {\ntext\nfragments {\ntext\ncontent {\n... on Emote {\nemoteID: id\nsetID\ntoken\n}\n... on User {\nid\nlogin\ndisplayName\n}\n__typename\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2ZhA": function(e, t) {},
    "2lB6": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t, n, a) {
            var r = i(e).getTime(),
                o = i(t).getTime(),
                s = i(n).getTime(),
                l = i(a).getTime();
            if (r > o || s > l) throw new Error("The start of the range cannot be after the end of the range");
            return r < l && s < o
        }
    },
    "3EIC": function(e, t, n) {
        var i = n("xA5w"),
            a = n("Mdww");
        e.exports = function(e, t) {
            var n = i(e),
                r = Number(t),
                o = n.getMonth() + r,
                s = new Date(0);
            s.setFullYear(n.getFullYear(), o, 1), s.setHours(0, 0, 0, 0);
            var l = a(s);
            return n.setMonth(o, Math.min(l, n.getDate())), n
        }
    },
    "3LYq": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_AllowRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AllowRejectedChatMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "allowRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\nallowRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3T7g": function(e, t, n) {
        "use strict";
        var i = n("RbGx"),
            a = n("mbxv"),
            r = n("+V/3"),
            o = (n("AwFw"), n("TToO")),
            s = function() {
                function e(e, t, n) {
                    this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                }
                return e.prototype.getBadge = function(e, t) {
                    var n = this.channelsBySet.get(e);
                    return n && n.has(t) ? n.get(t) || null : void 0 !== (n = this.globalsBySet.get(e)) && n.get(t) || null
                }, e.prototype.indexBadges = function(e, t, n) {
                    e.forEach(function(e) {
                        n && e.clickAction === r.b && (e = o.__assign({}, e, {
                            channelName: n
                        }));
                        var i = t.get(e.setID);
                        i || (i = new Map, t.set(e.setID, i)), i.set(e.version, e)
                    })
                }, e
            }();
        new s([], [], "");
        n.d(t, "b", function() {
            return i.a
        }), n.d(t, "a", function() {
            return a.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return s
        })
    },
    "3g9B": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getDate()
        }
    },
    "3nPg": function(e, t, n) {
        var i = n("G7No"),
            a = 6e4;
        e.exports = function(e, t) {
            var n = i(e, t) / a;
            return n > 0 ? Math.floor(n) : Math.ceil(n)
        }
    },
    "3znZ": function(e, t, n) {
        var i = n("u/4p");
        e.exports = function(e) {
            return i(e, {
                weekStartsOn: 1
            })
        }
    },
    "4Jix": function(e, t) {},
    "4JjK": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Ready = 0] = "Ready", e[e.Dimensions = 1] = "Dimensions", e[e.RequestAd = 2] = "RequestAd", e[e.OnStart = 3] = "OnStart", e[e.OnCredit = 4] = "OnCredit", e[e.OnFinish = 5] = "OnFinish", e[e.OnClose = 6] = "OnClose", e[e.OnError = 7] = "OnError", e[e.Adblock = 8] = "Adblock", e[e.LimitReached = 9] = "LimitReached"
            }(i || (i = {}))
    },
    "4LxA": function(e, t, n) {
        var i = n("iRXW");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() === a.getTime()
        }
    },
    "4OFc": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e).getDay();
            return 0 === t || 6 === t
        }
    },
    "4Q5V": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("HW6M"),
            s = n("3zLD"),
            l = n("7vx8"),
            d = n("oIkB"),
            c = n("RbGx"),
            u = n("iydZ"),
            m = n("RH2O"),
            p = n("2KeS"),
            h = n("3T7g"),
            g = n("ass3"),
            f = n("Nay6"),
            v = n("aUOx"),
            b = n("Ncf8"),
            k = n("qkCi"),
            y = n("1OO3"),
            _ = n("KBUQ"),
            C = n("JtUK"),
            S = n("Kthq"),
            E = n("Odds"),
            N = (n("S4DY"), function(e) {
                var t = e.onBanUser,
                    n = E._21.Ban,
                    i = Object(r.d)("Ban {login}", {
                        login: e.senderLogin
                    }, "ModerationIcons"),
                    o = "chat-ban-button";
                return e.isMessageDeleted && (t = e.onUnbanUser, n = E._21.FollowCheck, i = Object(r.d)("Unban {login}", {
                    login: e.senderLogin
                }, "ModerationIcons"), o = "chat-unban-button"), a.createElement(E._30, {
                    color: E.J.Alt2,
                    display: E.Q.Inline,
                    fontSize: E.U.Size4,
                    margin: {
                        right: .5
                    }
                }, a.createElement("button", {
                    className: "mod-icon",
                    onClick: t,
                    "data-test-selector": o
                }, a.createElement(E._47, {
                    align: E._48.Left,
                    label: i
                }, a.createElement(E._20, {
                    width: 16,
                    height: 16,
                    type: E._22.Inherit,
                    asset: n
                }))), a.createElement("button", {
                    className: "mod-icon",
                    onClick: e.onTimeoutUser,
                    "data-test-selector": "chat-timeout-button"
                }, a.createElement(E._47, {
                    align: E._48.Left,
                    label: Object(r.d)("Timeout {login}", {
                        login: e.senderLogin
                    }, "ModerationIcons")
                }, a.createElement(E._20, {
                    width: 16,
                    height: 16,
                    type: E._22.Inherit,
                    asset: E._21.Timeout
                }))))
            }),
            w = 600,
            D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanUser = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return i.trys.push([0, 2, , 3]), [4, this.props.banUserMutation(this.props.senderLogin)];
                                    case 1:
                                        return e = i.sent().banUserFromChatRoom, this.props.onPushMessage && (e.error ? (n = Object(v.a)(Object(C.a)(this.props.senderLogin, e.error.code)), this.props.onPushMessage(n)) : (t = Object(b.a)(k.e.Ban, this.props.senderLogin, null, null), this.props.onPushMessage(t))), [3, 3];
                                    case 2:
                                        return i.sent(), this.props.onPushMessage && (n = Object(v.a)(Object(r.d)("Unable to ban user.", "ModerationIcons")), this.props.onPushMessage(n)), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.onTimeoutUser = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return i.trys.push([0, 2, , 3]), [4, this.props.banUserMutation(this.props.senderLogin, w)];
                                    case 1:
                                        return e = i.sent().banUserFromChatRoom, this.props.onPushMessage && (e.error ? (n = Object(v.a)(Object(C.a)(this.props.senderLogin, e.error.code, !0)), this.props.onPushMessage(n)) : (t = Object(b.a)(k.e.Timeout, this.props.senderLogin, null, w), this.props.onPushMessage(t))), [3, 3];
                                    case 2:
                                        return i.sent(), this.props.onPushMessage && (n = Object(v.a)(Object(r.d)("Unable to timeout user.", "ModerationIcons")), this.props.onPushMessage(n)), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.onUnbanUser = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return n.trys.push([0, 2, , 3]), [4, this.props.unbanUserMutation(this.props.senderLogin)];
                                    case 1:
                                        return e = n.sent().unbanUserFromChatRoom, this.props.onPushMessage && (e.error ? (t = Object(v.a)(Object(S.a)(this.props.senderLogin, e.error.code)), this.props.onPushMessage(t)) : (t = Object(v.a)(Object(r.d)("{bannedUserLogin} is no longer banned from this channel.", {
                                            bannedUserLogin: this.props.senderLogin
                                        }, "ModerationIcons")), this.props.onPushMessage(t))), [3, 3];
                                    case 2:
                                        return n.sent(), this.props.onPushMessage && (t = Object(v.a)(Object(r.d)("Unable to unban user.", "ModerationIcons")), this.props.onPushMessage(t)), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(N, {
                        isMessageDeleted: this.props.isMessageDeleted,
                        onBanUser: this.onBanUser,
                        onTimeoutUser: this.onTimeoutUser,
                        onUnbanUser: this.onUnbanUser,
                        senderLogin: this.props.senderLogin
                    })
                }, t
            }(a.Component),
            O = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            I = Object(s.compose)(Object(y.b)(O), Object(_.b)(O))(D),
            T = n("g7wA"),
            M = n("O9wU"),
            R = (n("B88H"), "chat-deleted-message-placeholder"),
            x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        alwaysShowMessage: !1
                    }, t.renderModerationIcons = function() {
                        return t.props.isCurrentUserModerator && t.props.showModerationIcons ? a.createElement(I, {
                            channelID: t.props.channelID,
                            isMessageDeleted: t.props.message.deleted,
                            senderLogin: t.props.message.user.userLogin
                        }) : null
                    }, t.renderMessageBody = function() {
                        if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                            var e = Object(r.d)("message deleted", "ChatLine");
                            return t.props.isCurrentUserModerator || t.props.isCurrentUserStaff ? a.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": R
                            }, a.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + e + ">")) : a.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": R
                            }, "<" + e + ">")
                        }
                        return Object(T.j)(t.props.message.messageParts, t.props.currentUserDisplayName, t.props.currentUserLogin)
                    }, t.alwaysShowMessage = function(e) {
                        e && e.preventDefault(), t.setState({
                            alwaysShowMessage: !0
                        })
                    }, t.usernameClickHandler = function(e) {
                        t.props.onUsernameClick(t.props.message.user.userLogin, M.a.chat_message, t.props.message.id, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.badgeSets,
                        n = e.className,
                        i = e.message,
                        r = e.showTimestamps,
                        s = {},
                        l = ": ";
                    i.messageType === k.c.Action && (s = {
                        color: i.user.color
                    }, l = " ");
                    var d = null;
                    return r && (d = Object(T.r)(i.timestamp)), a.createElement("div", {
                        className: o(n, "chat-line__message"),
                        style: s,
                        "data-a-target": "chat-line-message"
                    }, d, this.renderModerationIcons(), a.createElement(h.b, {
                        badgeSets: t,
                        badgesToRender: i.badges
                    }), a.createElement("button", {
                        onClick: this.usernameClickHandler,
                        className: "chat-line__username"
                    }, a.createElement(f.a, {
                        userData: i.user
                    })), a.createElement("span", {
                        key: "separator",
                        "aria-hidden": "true"
                    }, l), this.renderMessageBody())
                }, t
            }(a.Component);
        var L = Object(s.compose)(Object(m.b)(void 0, function(e) {
                return Object(p.b)({
                    onUsernameClick: g.d
                }, e)
            }))(x),
            A = n("6Agf"),
            F = n("l21v"),
            j = n("3LYq"),
            U = n("IEOs"),
            B = {
                badges: {
                    twitchbot: "1"
                },
                bits: 0,
                color: "#6441A5",
                displayName: "AutoMod",
                id: "automod",
                userID: "automod",
                username: "automod",
                userType: A.a.GlobalMod,
                emotes: null
            },
            P = {
                VoHiYo: {
                    displayName: "VoHiYo",
                    id: "81274",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/81274/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/3.0 3.0x",
                    token: "VoHiYo"
                }
            };
        var V = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isResolved: !1
                    }, t.allowAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        });
                        var e = t.props.message;
                        e.autoModType === k.a.MessageRejectedPrompt && t.props.allowRejectedChatMessage && t.props.allowRejectedChatMessage(Object(d.a)({
                            id: e.rejectedMessage.id
                        }))
                    }, t.denyAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        });
                        var e = t.props.message;
                        e.autoModType === k.a.MessageRejectedPrompt && t.props.denyRejectedChatMessage && t.props.denyRejectedChatMessage(Object(d.a)({
                            id: e.rejectedMessage.id
                        }))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t = this.props.message;
                    switch (t.autoModType) {
                        case k.a.MessageRejectedPrompt:
                            e = function(e) {
                                var t;
                                switch (e) {
                                    case "aggressive":
                                        t = Object(r.d)("aggressive", "AutoModLine");
                                        break;
                                    case "sexual":
                                        t = Object(r.d)("sexual", "AutoModLine");
                                        break;
                                    case "profanity":
                                        t = Object(r.d)("profanity", "AutoModLine");
                                        break;
                                    case "identity":
                                        t = Object(r.d)("identity", "AutoModLine");
                                        break;
                                    default:
                                        return Object(r.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
                                }
                                return Object(r.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                                    category: t
                                }, "AutoModLine")
                            }(t.category);
                            break;
                        case k.a.MessageRejected:
                            e = Object(r.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                            break;
                        case k.a.MessageAllowed:
                            e = Object(r.d)("Mods have allowed your message. Happy chatting!", "AutoModLine"), e += " VoHiYo";
                            break;
                        case k.a.MessageDenied:
                            e = Object(r.d)("Mods have removed your message.", "AutoModLine");
                            break;
                        default:
                            throw new Error("Invalid message type")
                    }
                    var n = Object(F.a)(e, B, u.a, !1, P);
                    switch (t.autoModType) {
                        case k.a.MessageRejectedPrompt:
                            if (this.state.isResolved) return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, Object(T.g)());
                            return a.createElement(E._7, {
                                className: "chat-line__message"
                            }, a.createElement(c.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: n.badges
                            }), a.createElement(f.a, {
                                userData: n.user
                            }), a.createElement("span", {
                                key: "separator"
                            }, ": "), Object(T.j)(n.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin), a.createElement(E._7, {
                                key: "automod-prompt",
                                className: "chat-line__nested-component--float-right"
                            }, a.createElement(E.u, {
                                size: E.y.Small,
                                onClick: this.allowAutoModRejectedMessage,
                                type: E.A.Text
                            }, Object(r.d)("Allow", "AutoModLine")), a.createElement(E.P, {
                                type: E._44.Span
                            }, "•"), a.createElement(E.u, {
                                size: E.y.Small,
                                onClick: this.denyAutoModRejectedMessage,
                                type: E.A.Text
                            }, Object(r.d)("Deny", "AutoModLine"))), a.createElement(L, i.__assign({}, this.props, {
                                isDeleted: !1,
                                showTimestamps: !1,
                                className: o(["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"]),
                                message: t.rejectedMessage
                            })));
                        case k.a.MessageRejected:
                        case k.a.MessageAllowed:
                        case k.a.MessageDenied:
                            return a.createElement(E._7, {
                                className: o(["chat-line__message", "chat-line__message--special", "chat-line__message--alert"])
                            }, a.createElement(c.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: n.badges
                            }), a.createElement(f.a, {
                                userData: n.user
                            }), a.createElement("span", {
                                key: "separator"
                            }, ": "), Object(T.j)(n.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin));
                        default:
                            throw new Error("Invalid message type")
                    }
                }, t
            }(a.Component),
            H = Object(s.compose)(Object(l.a)(j, {
                name: "allowRejectedChatMessage",
                options: {}
            }), Object(l.a)(U, {
                name: "denyRejectedChatMessage",
                options: {}
            }))(V),
            W = (n("vadT"), function(e) {
                return a.createElement(E._7, {
                    className: "user-notice-line",
                    margin: {
                        y: .5
                    },
                    padding: {
                        right: 2,
                        y: .5
                    }
                }, e.children)
            }),
            G = n("91zu"),
            Q = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.params,
                        t = this.props.data,
                        n = t.channel,
                        i = t.loading,
                        o = t.error;
                    if (i || o) return null;
                    var s = Object(r.d)("{displayName} is raiding with a party of {viewerCount}.", {
                        displayName: a.createElement("strong", null, n.displayName),
                        viewerCount: a.createElement("strong", null, e.viewerCount)
                    }, "RaidIncomingMessage");
                    return a.createElement(W, {
                        "data-test-selector": "incoming-raid"
                    }, a.createElement(E._7, {
                        display: E.Q.Flex,
                        alignItems: E.c.Center
                    }, a.createElement(E.l, {
                        alt: n.displayName,
                        src: n.profileImageURL,
                        size: 30
                    }), a.createElement(E._30, {
                        color: E.J.Base,
                        margin: {
                            left: 1
                        }
                    }, s)))
                }, t
            }(a.Component),
            q = Object(l.a)(G, {
                options: function(e) {
                    return {
                        variables: {
                            channelLogin: e.message.params.login
                        }
                    }
                }
            })(Q),
            z = n("H/22"),
            Y = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.moderationActionEvent,
                        t = null;
                    if (e.moderationActionType === k.d.AutoModEnabled) t = Object(r.d)("AutoMod has been enabled for this channel.", "ModerationActionLine");
                    else if (e.level === z.a.Channel) {
                        var n = e.args && e.args.join(" ").trim(),
                            i = n && n.length > 0 ? "/" + e.moderationActionType + " " + n : "" + e.moderationActionType;
                        t = Object(r.d)("{user} used: {command}.", {
                            user: e.createdByLogin,
                            command: i
                        }, "ModerationActionLine")
                    } else {
                        var o = e.createdByLogin,
                            s = e.targetUserLogin,
                            l = e.duration,
                            d = e.reason;
                        switch (e.moderationActionType) {
                            case k.d.Timeout:
                                t = l && d ? Object(r.d)("{user} timed out {target} for {duration} seconds. Reason: {reason}.", {
                                    user: o,
                                    target: s,
                                    duration: l,
                                    reason: d
                                }, "ModerationActionLine") : l ? Object(r.d)("{user} timed out {target} for {duration} seconds.", {
                                    user: o,
                                    target: s,
                                    duration: l
                                }, "ModerationActionLine") : Object(r.d)("{user} timed out {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Ban:
                                t = d ? Object(r.d)("{user} banned {target}. Reason: {reason}.", {
                                    user: o,
                                    target: s,
                                    reason: d
                                }, "ModerationActionLine") : Object(r.d)("{user} banned {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Untimeout:
                                t = Object(r.d)("{user} removed time out on {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Unban:
                                t = Object(r.d)("{user} removed ban on {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Mod:
                                t = Object(r.d)("{user} granted moderator privileges to {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Unmod:
                                t = Object(r.d)("{user} removed moderator privileges for {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            default:
                                return null
                        }
                    }
                    return t ? a.createElement(E._7, {
                        className: "chat-line__status"
                    }, a.createElement(E.P, {
                        type: E._44.Span
                    }, t)) : null
                }, t
            }(a.Component);

        function J() {
            return {
                raid_error_self: Object(r.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                raid_error_forbidden: Object(r.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                raid_error_already_raiding: Object(r.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                raid_error_too_many_viewers_to_raid: Object(r.d)("Sorry, raids can only support up to 20,000 viewers right now.", "RaidErrorTooManyViewersMessage"),
                raid_error_unexpected: Object(r.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                unraid_error_unexpected: Object(r.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                unraid_error_no_active_raid: Object(r.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                raid_notice_restricted_chat: Object(r.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                raid_notice_mature: Object(r.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                raid_notice_owner: Object(r.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                    unraidCommand: "/unraid"
                }, "RaidNoticeOwnerMessage")
            }
        }
        var $ = function(e) {
                return a.createElement("span", null, J()[e.message.msgid])
            },
            K = function(e) {
                var t = e.event.isPrime ? Object(T.a)(e.event.user.displayName, Object(T.t)(e.event.channel)) : Object(T.b)(e.event.user.displayName, e.event.tier);
                return a.createElement(E._30, {
                    color: E.J.Alt2,
                    display: E.Q.Inline
                }, t, a.createElement("span", null, " "), Object(r.d)("{userLogin} subscribed for {months} months in a row!", {
                    userLogin: e.event.user.displayName,
                    months: e.event.months
                }, "ChatLine"))
            },
            Z = function(e) {
                var t = e.event.message,
                    n = t.user.isIntl ? t.user.userDisplayName + " (" + t.user.userLogin + ")" : t.user.userDisplayName,
                    i = Object(r.d)("{user} is new here. Say hello!", {
                        user: "@" + n
                    }, "NewChatterRitual");
                return a.createElement(E._30, {
                    color: E.J.Alt2
                }, i)
            },
            X = (n("+5Qw"), "timeout_success"),
            ee = "ban_success",
            te = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    if (!e.doesNotUpdate) return !0;
                    if (e.isCurrentUserModerator !== this.props.isCurrentUserModerator) return !0;
                    if (e.showModerationIcons !== this.props.showModerationIcons) return !0;
                    if (e.showTimestamps !== this.props.showTimestamps) return !0;
                    switch (e.message.type) {
                        case k.b.Message:
                            if (e.message.deleted) return !0;
                            break;
                        case k.b.Resubscription:
                        case k.b.Ritual:
                            if (e.message.message && e.message.message.deleted) return !0;
                            break;
                        case k.b.AutoMod:
                            if (e.message.autoModType === k.a.MessageRejectedPrompt && e.showAutoModActions !== this.props.showAutoModActions) return !0;
                            break;
                        case k.b.ModerationAction:
                            if (e.showModerationActions !== this.props.showModerationActions) return !0
                    }
                    return !1
                }, t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case k.b.AutoMod:
                            return e.autoModType !== k.a.MessageRejectedPrompt || this.props.isCurrentUserModerator && this.props.showAutoModActions ? a.createElement(H, {
                                channelID: this.props.channelID,
                                message: e,
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                showModerationIcons: this.props.showModerationIcons,
                                currentUserLogin: this.props.currentUserLogin
                            }) : null;
                        case k.b.ModerationAction:
                            return this.props.isCurrentUserModerator && this.props.showModerationActions ? a.createElement(Y, {
                                moderationActionEvent: e
                            }) : null;
                        case k.b.Connected:
                            return a.createElement(E._7, {
                                className: "chat-line__status",
                                "data-a-target": "chat-welcome-message"
                            }, a.createElement(E.P, {
                                type: E._44.Span
                            }, Object(r.d)("Welcome to the chat room!", "ChatLine")));
                        case k.b.Disconnected:
                            return e.reason ? a.createElement(E._7, {
                                className: "chat-line__status"
                            }, a.createElement(E.P, {
                                type: E._44.Span
                            }, Object(r.d)("You have been disconnected from chat for the following reason: {reason}", {
                                reason: e.reason
                            }, "ChatLine"))) : a.createElement(E._7, {
                                className: "chat-line__status"
                            }, a.createElement(E.P, {
                                type: E._44.Span
                            }, Object(r.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                        case k.b.Hosted:
                            var t = null;
                            return t = e.isAutohost ? Object(r.d)("{host} is now auto hosting you for up to {viewerCount, number} viewers.", {
                                host: e.hostingChannel,
                                viewerCount: e.viewerCount
                            }, "ChatLine") : e.viewerCount <= 2 ? Object(r.d)("{host} is now hosting you.", {
                                host: e.hostingChannel
                            }, "ChatLine") : Object(r.d)("{host} is now hosting you for up to {viewerCount, number} viewers.", {
                                host: e.hostingChannel,
                                viewerCount: e.viewerCount
                            }, "ChatLine"), a.createElement(E._7, {
                                className: "chat-line__status"
                            }, a.createElement(E.P, {
                                type: E._44.Span
                            }, t));
                        case k.b.Hosting:
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, a.createElement(E.P, {
                                type: E._44.Span
                            }, Object(r.d)("Now hosting {channel}", {
                                channel: e.hostedChannel
                            }, "ChatLine")));
                        case k.b.Unhost:
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, a.createElement(E.P, {
                                type: E._44.Span
                            }, Object(r.d)("No longer hosting.", "ChatLine")));
                        case k.b.Message:
                            return this.props.onRenderReportChatSent && e.user.userLogin === this.props.currentUserLogin && this.props.onRenderReportChatSent(), a.createElement(L, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e,
                                isDeleted: e.deleted,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            });
                        case k.b.Moderation:
                            return this.props.isCurrentUserModerator ? a.createElement(E._7, {
                                className: "chat-line__moderation"
                            }, Object(T.k)(e)) : null;
                        case k.b.Subscription:
                            return a.createElement(W, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && a.createElement(I, {
                                channelID: this.props.channelID,
                                onPushMessage: this.props.onPushMessage,
                                senderLogin: e.user.username
                            }), Object(T.q)(e));
                        case k.b.SubGift:
                            return a.createElement(W, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && a.createElement(I, {
                                channelID: this.props.channelID,
                                onPushMessage: this.props.onPushMessage,
                                senderLogin: e.user.username
                            }), Object(T.p)(e));
                        case k.b.BitsCharity:
                            return a.createElement(E._7, {
                                className: "chat-line__bits-charity",
                                padding: {
                                    right: 2,
                                    y: .5
                                }
                            }, Object(T.d)(e));
                        case k.b.Resubscription:
                            var n = null;
                            return e.message && (n = a.createElement(L, {
                                badgeSets: this.props.badgeSets,
                                channelID: this.props.channelID,
                                className: "chat-line--inline",
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                isDeleted: e.message.deleted,
                                message: e.message,
                                onPushMessage: this.props.onPushMessage,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps
                            })), a.createElement(W, null, !n && this.props.isCurrentUserModerator && this.props.showModerationIcons && a.createElement(I, {
                                channelID: this.props.channelID,
                                onPushMessage: this.props.onPushMessage,
                                senderLogin: e.user.username
                            }), a.createElement(K, {
                                event: e
                            }), a.createElement(E._7, null, n));
                        case k.b.RoomMods:
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, Object(T.m)(e.moderatorLogins));
                        case k.b.SlowMode:
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, Object(T.n)(e));
                        case k.b.SubscriberOnlyMode:
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, Object(T.o)(e));
                        case k.b.FollowerOnlyMode:
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, Object(T.h)(e));
                        case k.b.EmoteOnlyMode:
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, Object(T.f)(e));
                        case k.b.Clear:
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, Object(T.e)());
                        case k.b.Notice:
                            if (function(e) {
                                    return e.msgid in J()
                                }(e)) return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, a.createElement($, {
                                message: e
                            }));
                            if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                case X:
                                case ee:
                                    return null
                            }
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, Object(T.l)(e));
                        case k.b.Info:
                            return a.createElement(E._7, {
                                className: "chat-line__status"
                            }, Object(T.i)(e));
                        case k.b.Raid:
                            return a.createElement(q, {
                                message: e
                            });
                        case k.b.Unraid:
                            return a.createElement(E._7, {
                                className: "chat-line__raid"
                            }, Object(T.u)());
                        case k.b.Ritual:
                            return a.createElement(W, null, a.createElement(Z, {
                                event: e
                            }), a.createElement(L, {
                                badgeSets: this.props.badgeSets,
                                channelID: this.props.channelID,
                                className: "chat-line--inline",
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                isDeleted: e.message.deleted,
                                message: e.message,
                                onPushMessage: this.props.onPushMessage,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps
                            }));
                        default:
                            return null
                    }
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return te
        })
    },
    "4Q9N": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.ProfileImage = "profile_image", e.ProfileBanner = "profile_banner", e.ChannelOfflineImage = "channel_offline_image"
            }(i || (i = {}))
    },
    "4Xyl": function(e, t) {},
    "4Z4o": function(e, t, n) {
        var i = n("3EIC");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, 12 * n)
        }
    },
    "4d+L": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("Aj/L"),
            o = n("vh75"),
            s = n("TToO"),
            l = n("GiK3"),
            d = n("3zLD"),
            c = n("6sO2"),
            u = n("zgdU"),
            m = n("7vx8"),
            p = n("WIs4"),
            h = n("aMxy"),
            g = n("HZww"),
            f = n("11M/"),
            v = n("Z3Cb"),
            b = n("l21v"),
            k = n("CSlQ"),
            y = n("+Znq"),
            _ = n("+xm8"),
            C = n("V5M+"),
            S = n("f2i/"),
            E = n("oIkB"),
            N = n("+8VM"),
            w = n("Odds"),
            D = n("F8t6"),
            O = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.deleteRoom = function() {
                        t.props.deleteRoom(Object(E.a)({
                            roomID: t.props.roomID
                        })), t.props.onCloseModal()
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._30, {
                        background: w.m.Base,
                        className: "delete-room-modal",
                        position: w._14.Relative
                    }, l.createElement(w._7, {
                        padding: 2,
                        margin: {
                            top: 1
                        }
                    }, l.createElement(w._7, {
                        margin: {
                            bottom: 2
                        }
                    }, l.createElement(w.P, {
                        type: w._44.H4
                    }, Object(c.d)("Delete #{roomName}?", {
                        roomName: this.props.roomName
                    }, "DeleteRoomModal")), l.createElement(w._7, {
                        padding: {
                            top: 1
                        }
                    }, l.createElement(w.P, {
                        type: w._44.Span,
                        color: w.J.Alt2
                    }, Object(c.d)("This will remove all messages in this room permanently from your channel", "DeleteRoomModal")))), l.createElement(w._7, {
                        padding: {
                            top: 2
                        },
                        textAlign: w._40.Right
                    }, l.createElement(w._7, {
                        display: w.Q.Inline,
                        margin: {
                            right: .5
                        }
                    }, l.createElement(w.u, {
                        type: w.A.Hollow,
                        onClick: this.props.onCloseModal,
                        "data-test-selector": "cancel-button"
                    }, Object(c.d)("No, keep this room", "DeleteRoomModal"))), l.createElement(w._7, {
                        display: w.Q.Inline,
                        margin: {
                            left: .5
                        }
                    }, l.createElement(w.u, {
                        onClick: this.deleteRoom,
                        "data-test-selector": "confirm-button",
                        type: w.A.Alert
                    }, Object(c.d)("Yes, delete this room", "DeleteRoomModal"))))), l.createElement(N.a, {
                        closeOnBackdropClick: !0
                    }))
                }, t
            }(l.Component),
            I = Object(d.compose)(Object(m.a)(D, {
                name: "deleteRoom"
            }))(O);
        var T = Object(i.b)(null, function(e) {
                return Object(a.b)({
                    onCloseModal: C.c
                }, e)
            })(I),
            M = n("tQTt"),
            R = n("hmtx"),
            x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.toggleMuteSetting = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i;
                            return s.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return e = this.props.data.room.self.isMuted, t = s.__assign({}, Object(E.a)({
                                            isMuted: !e,
                                            roomID: this.props.roomID
                                        }), {
                                            optimisticResponse: {
                                                updateRoomView: {
                                                    __typename: "UpdateRoomViewPayload",
                                                    roomView: {
                                                        isMuted: !e,
                                                        __typename: "RoomView"
                                                    }
                                                }
                                            }
                                        }), this.props.handleClick && this.props.handleClick(), [4, this.props.muteRoom(t)];
                                    case 1:
                                        return n = a.sent(), i = function(e) {
                                            return e.room.self.isMuted = n.data.updateRoomView.roomView.isMuted, e
                                        }, Object(E.d)(M, {
                                            id: this.props.roomID
                                        }, i), [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data.loading) return l.createElement(w._13, {
                        height: 30,
                        width: 160
                    });
                    if (this.props.data.error || !this.props.data.room.owner.self.isChannelMember) return null;
                    var e = Object(c.d)("Mute all notifications", "MuteButton");
                    return this.props.data.room.self.isMuted && (e = Object(c.d)("Unmute all notifications", "MuteButton")), l.createElement(w._5, {
                        alpha: !0,
                        "data-test-selector": "mute-room-button",
                        onClick: this.toggleMuteSetting
                    }, l.createElement(w._30, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, e))
                }, t = s.__decorate([Object(m.a)(M, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                }), Object(m.a)(R, {
                    name: "muteRoom"
                })], t)
            }(l.Component),
            L = n("CIox"),
            A = n("oSFp"),
            F = n("mw/a"),
            j = n("CIWf"),
            U = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.openReportModal = function() {
                        t.props.isLoggedIn ? t.props.onShowModal(A.a, {
                            reportContext: {
                                contentID: t.props.roomID,
                                contentType: F.a.Room,
                                targetUserID: t.props.data.room.owner.id
                            },
                            title: Object(c.d)("Report {roomName}", {
                                roomName: t.props.data.room.name
                            }, "ReportRoomButton")
                        }) : t.props.login()
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return this.props.data.loading ? l.createElement(w._13, null) : this.props.data.error ? l.createElement(w._7, null) : l.createElement(w._5, {
                        alpha: !0,
                        alert: !0,
                        "data-test-selector": "report-room-button-selector",
                        onClick: this.openReportModal
                    }, l.createElement(w._30, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, Object(c.d)("Report", "RoomReportButton")))
                }, t = s.__decorate([Object(m.a)(j, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                })], t)
            }(l.Component),
            B = Object(L.f)(U),
            P = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onRoomNameChange = function(e) {
                        t.props.updateRoomName(e.target.value)
                    }, t.onRoomTopicChange = function(e) {
                        t.props.updateRoomTopic && t.props.updateRoomTopic(e.target.value)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, null, l.createElement(w.V, {
                        label: Object(c.d)("Room name", "RoomLabelsEditor"),
                        error: !!this.props.editRoomNameError,
                        errorMessage: this.props.editRoomNameError
                    }, l.createElement(w._3, {
                        type: w._4.Text,
                        value: this.props.roomName,
                        onChange: this.onRoomNameChange,
                        "data-test-selector": "name-input",
                        placeholder: Object(c.d)("Enter Room name here", "RoomLabelsEditor")
                    })), this.renderRoomTopicEditor())
                }, t.prototype.renderRoomTopicEditor = function() {
                    if (void 0 !== this.props.roomTopic) return l.createElement(w._7, null, l.createElement(w._30, {
                        fullWidth: !0,
                        margin: {
                            top: 1,
                            bottom: 1
                        }
                    }), l.createElement(w.V, {
                        label: Object(c.d)("Room topic", "RoomLabelsEditor"),
                        error: !!this.props.editRoomTopicError,
                        errorMessage: this.props.editRoomTopicError
                    }, l.createElement(w._41, {
                        noResize: !0,
                        value: this.props.roomTopic,
                        onChange: this.onRoomTopicChange,
                        error: !!this.props.editRoomTopicError,
                        "data-test-selector": "topic-input",
                        placeholder: Object(c.d)("What do you want your community to talk about in this room?", "RoomLabelsEditor")
                    })))
                }, t
            }(l.Component),
            V = n("gGMi"),
            H = (n("Jy6n"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isPreviewable: void 0 === t.props.isPreviewable || t.props.isPreviewable,
                        minimumAllowedRole: t.props.minimumAllowedRole || V.b.Everyone
                    }, t.togglePreviewability = function() {
                        t.setState({
                            isPreviewable: !t.state.isPreviewable
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t.toggleSubRole = function() {
                        return t.state.minimumAllowedRole === V.b.Moderator ? t.setMinRoleSub() : t.setMinRoleMod()
                    }, t.toggleAllRole = function() {
                        return t.state.minimumAllowedRole === V.b.Everyone ? t.setMinRoleSub() : t.setMinRoleAll()
                    }, t.setMinRoleMod = function() {
                        t.setState({
                            isPreviewable: !1,
                            minimumAllowedRole: V.b.Moderator
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t.setMinRoleSub = function() {
                        t.setState({
                            isPreviewable: !0,
                            minimumAllowedRole: V.b.Subscriber
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t.setMinRoleAll = function() {
                        t.setState({
                            isPreviewable: !0,
                            minimumAllowedRole: V.b.Everyone
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, null, l.createElement(w._30, {
                        padding: {
                            top: 1,
                            bottom: .5,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(w.P, {
                        type: w._44.Span
                    }, Object(c.d)("Who can chat in this room?", "RoomPermissionsToggle"))), l.createElement(w._30, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            x: .5
                        },
                        display: w.Q.Flex,
                        alignItems: w.c.Center
                    }, l.createElement(w._1, {
                        flexGrow: 1,
                        display: w.Q.Flex,
                        alignItems: w.c.Center,
                        className: "room-permissions-toggle__role-name"
                    }, l.createElement("label", {
                        htmlFor: "room-permissions-toggle__mods-permission"
                    }, l.createElement(w.P, {
                        type: w._44.Strong,
                        color: w.J.Alt
                    }, Object(c.d)("Mods", "RoomPermissionsToggle")))), l.createElement(w._46, {
                        id: "room-permissions-toggle__mods-permission",
                        disabled: !0,
                        checked: !0,
                        "data-test-selector": "moderator-role"
                    })), l.createElement(w._30, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            x: .5
                        },
                        display: w.Q.Flex,
                        alignItems: w.c.Center
                    }, l.createElement(w._1, {
                        flexGrow: 1,
                        display: w.Q.Flex,
                        alignItems: w.c.Center,
                        className: "room-permissions-toggle__role-name"
                    }, l.createElement("label", {
                        htmlFor: "room-permissions-toggle__subs-permission"
                    }, l.createElement(w.P, {
                        type: w._44.Strong,
                        color: w.J.Alt
                    }, Object(c.d)("Subs", "RoomPermissionsToggle")))), l.createElement(w._46, {
                        id: "room-permissions-toggle__subs-permission",
                        checked: this.state.minimumAllowedRole !== V.b.Moderator,
                        onChange: this.toggleSubRole,
                        "data-test-selector": "subscriber-role"
                    })), l.createElement(w._30, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            x: .5
                        },
                        display: w.Q.Flex,
                        alignItems: w.c.Center
                    }, l.createElement(w._1, {
                        flexGrow: 1,
                        display: w.Q.Flex,
                        alignItems: w.c.Center,
                        className: "room-permissions-toggle__role-name"
                    }, l.createElement("label", {
                        htmlFor: "room-permissions-toggle__everyone-permission"
                    }, l.createElement(w.P, {
                        type: w._44.Strong,
                        color: w.J.Alt
                    }, Object(c.d)("Everyone", "RoomPermissionsToggle")))), l.createElement(w._46, {
                        id: "room-permissions-toggle__everyone-permission",
                        checked: this.state.minimumAllowedRole === V.b.Everyone,
                        onChange: this.toggleAllRole,
                        "data-test-selector": "everyone-role"
                    })), l.createElement(w._7, {
                        padding: {
                            x: .5
                        }
                    }, l.createElement(w._30, {
                        borderTop: !0,
                        margin: {
                            top: .5,
                            bottom: 1,
                            x: 1
                        }
                    })), l.createElement(w._30, {
                        display: w.Q.Flex,
                        justifyContent: w._6.Between,
                        alignItems: w.c.Center,
                        padding: {
                            bottom: .5,
                            x: 1
                        },
                        margin: {
                            bottom: 1,
                            x: .5
                        }
                    }, l.createElement(w.X, {
                        gutterSize: w.Y.None
                    }, l.createElement(w.K, {
                        cols: 8
                    }, l.createElement(w.P, null, Object(c.d)("Allow others to read chat but not send messages", "RoomPermissionsToggle"))), l.createElement(w.K, {
                        cols: 4
                    }, l.createElement(w._7, {
                        display: w.Q.Flex,
                        fullHeight: !0,
                        justifyContent: w._6.Center,
                        flexDirection: w.S.Column,
                        alignContent: w.b.End,
                        alignItems: w.c.End
                    }, this.renderPreviewabilityToggle())))))
                }, t.prototype.renderPreviewabilityToggle = function() {
                    var e = this.state.minimumAllowedRole !== V.b.Subscriber,
                        t = l.createElement(w._46, {
                            disabled: e,
                            checked: this.state.isPreviewable,
                            onChange: this.togglePreviewability,
                            "data-test-selector": "previewability-toggle"
                        });
                    return this.state.minimumAllowedRole === V.b.Moderator && (t = l.createElement(w._47, {
                        direction: w._49.Left,
                        width: 100,
                        label: Object(c.d)("This room is only for moderators", "RoomPermissionsToggle")
                    }, t)), t
                }, t
            }(l.Component)),
            W = {
                NAME_LENGTH_INVALID: function(e) {
                    var t = e.maxChars,
                        n = e.minChars;
                    return Object(c.d)("The name must be between {minChars} and {maxChars} characters.", {
                        minChars: n,
                        maxChars: t
                    }, "RoomErrorCodes")
                },
                SLOW_MODE_ENFORCEMENT_FAILED: function(e) {
                    var t = e.remainingDurationSeconds;
                    return Object(c.d)("This room is in slow mode and you are sending messages too quickly. You will be able to talk again in {remainingDurationSeconds} seconds.", {
                        remainingDurationSeconds: t
                    }, "RoomErrorCodes")
                },
                TOPIC_LENGTH_INVALID: function(e) {
                    var t = e.maxChars;
                    return Object(c.d)("The topic may not exceed {maxChars} characters.", {
                        maxChars: t
                    }, "RoomErrorCodes")
                },
                USER_CHAT_TIMED_OUT: function(e) {
                    var t = e.remainingDurationSeconds;
                    return Object(c.d)("You are timed out and cannot chat for {remainingDurationSeconds} seconds.", {
                        remainingDurationSeconds: t
                    }, "RoomErrorCodes")
                }
            },
            G = {
                AUTO_MOD_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("Your message contains inappropriate content.", "RoomErrorCodes")
                },
                EMOTE_ONLY_MODE_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("This Room is in emote-only mode and your message does not contain only emoticons.", "RoomErrorCodes")
                },
                NAME_CONTAINS_INVALID_CHARACTERS: function() {
                    return Object(c.d)("The name contains invalid characters.", "RoomErrorCodes")
                },
                NAME_NOT_UNIQUE: function() {
                    return Object(c.d)("There is already a room with this name.", "RoomErrorCodes")
                },
                NAME_INAPPROPRIATE: function() {
                    return Object(c.d)("The name contains inappropriate content.", "RoomErrorCodes")
                },
                R9K_MODE_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("This Room is in R9K mode and your message is not unique enough.", "RoomErrorCodes")
                },
                RATE_LIMIT_FAILED: function() {
                    return Object(c.d)("Your message was not sent because you are sending messages too quickly.", "RoomErrorCodes")
                },
                SPAM_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("This message has been flagged as spam.", "RoomErrorCodes")
                },
                TOPIC_INAPPROPRIATE: function() {
                    return Object(c.d)("The topic contains inappropriate content.", "RoomErrorCodes")
                },
                USER_SUSPENDED: function() {
                    return Object(c.d)("Your account has been suspended.", "RoomErrorCodes")
                }
            };

        function Q(e, t) {
            return e in G ? G[e]() : e in W && t ? W[e](t) : Object(c.d)("Error", "RoomErrorCodes")
        }
        var q = /^([^\u0000-\u007F]|[a-z0-9_]|-)*$/,
            z = 25,
            Y = 3,
            J = 100;

        function $(e) {
            return q.test(e)
        }

        function K(e) {
            return e.length > z
        }

        function Z(e) {
            return e.length <= z && e.length >= Y
        }

        function X(e) {
            return e.length <= J
        }
        var ee = n("kvxA"),
            te = (n("DY3c"), n("U+9K")),
            ne = {
                OPTIONS: "OPTIONS",
                PERMISSIONS: "PERMISSIONS",
                LABELS: "LABELS"
            },
            ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentView: ne.OPTIONS,
                        isSaveButtonStateSuccess: !1
                    }, t.updatePermissions = function(e) {
                        t.setState({
                            updatedPermissions: e,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.updateRoomName = function(e) {
                        var n;
                        if ($(e = e.toLowerCase())) {
                            if (K(e)) {
                                n = Q("NAME_LENGTH_INVALID", {
                                    maxChars: z,
                                    minChars: Y
                                })
                            }
                        } else n = Q("NAME_CONTAINS_INVALID_CHARACTERS");
                        t.setState({
                            updatedRoomName: e,
                            editRoomNameError: n,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.updateRoomTopic = function(e) {
                        var n;
                        X(e) || (n = Q("TOPIC_LENGTH_INVALID", {
                            maxChars: J
                        }));
                        t.setState({
                            updatedRoomTopic: e,
                            editRoomTopicError: n,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.setOptionsView = function() {
                        t.setState({
                            editRoomNameError: void 0,
                            editRoomTopicError: void 0,
                            currentView: ne.OPTIONS,
                            isSaveButtonStateSuccess: !1,
                            updatedRoomName: void 0,
                            updatedRoomTopic: void 0,
                            updatedPermissions: void 0
                        })
                    }, t.setPermissionsView = function() {
                        t.setState({
                            currentView: ne.PERMISSIONS,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.setLabelsView = function() {
                        t.setState({
                            currentView: ne.LABELS,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.saveUpdate = function() {
                        if (void 0 !== t.state.updatedRoomName || void 0 !== t.state.updatedRoomTopic || void 0 !== t.state.updatedPermissions)
                            if (t.state.updatedRoomName && !Z(t.state.updatedRoomName)) {
                                var e = Q("NAME_LENGTH_INVALID", {
                                    maxChars: z,
                                    minChars: Y
                                });
                                t.setState({
                                    editRoomNameError: e
                                })
                            } else if (t.state.updatedRoomTopic && !X(t.state.updatedRoomTopic)) {
                            e = Q("TOPIC_LENGTH_INVALID", {
                                maxChars: J
                            });
                            t.setState({
                                editRoomTopicError: e
                            })
                        } else {
                            var n = s.__assign({
                                roomID: t.props.roomID,
                                name: t.state.updatedRoomName,
                                topic: t.state.updatedRoomTopic
                            }, t.state.updatedPermissions);
                            t.props.updateRoom(Object(E.a)(n)).then(function(e) {
                                if (e.data.updateRoom.error) {
                                    var n = e.data.updateRoom.error,
                                        i = n.code,
                                        a = n.minLength,
                                        r = Q(i, {
                                            maxChars: n.maxLength,
                                            minChars: a
                                        });
                                    i.includes("NAME") ? t.setState({
                                        editRoomNameError: r
                                    }) : i.includes("TOPIC") && t.setState({
                                        editRoomTopicError: r
                                    })
                                } else {
                                    Object(E.d)(ee, {
                                        id: t.props.roomID
                                    }, function(t) {
                                        return t.room.name = e.data.updateRoom.room.name, t.room.topic = e.data.updateRoom.room.topic, t.room.isPreviewable = e.data.updateRoom.room.isPreviewable, t.room.minimumAllowedRole = e.data.updateRoom.room.minimumAllowedRole, t
                                    }), t.setState({
                                        editRoomNameError: void 0,
                                        editRoomTopicError: void 0,
                                        isSaveButtonStateSuccess: !0,
                                        isTopicFocused: !1,
                                        updatedRoomName: void 0,
                                        updatedRoomTopic: void 0,
                                        updatedPermissions: void 0
                                    })
                                }
                            })
                        }
                    }, t.openDeleteRoomModal = function() {
                        t.props.onShowModal(T, {
                            roomID: t.props.roomID,
                            roomName: t.props.data.room.name
                        })
                    }, t.onRoomTopicChange = function(e) {
                        t.updateRoomTopic(e.target.value)
                    }, t.focusTopic = function() {
                        t.setState({
                            isSaveButtonStateSuccess: !1,
                            isTopicFocused: !0
                        })
                    }, t.blurTopic = function() {
                        t.setState({
                            updatedRoomTopic: void 0,
                            editRoomTopicError: void 0,
                            isSaveButtonStateSuccess: !1,
                            isTopicFocused: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data.loading) return l.createElement(w._13, null);
                    if (this.props.data.error || !this.props.data.room) return l.createElement(w._7, null);
                    var e;
                    switch (this.state.currentView) {
                        case ne.OPTIONS:
                            e = this.getOptionsView();
                            break;
                        case ne.PERMISSIONS:
                            e = this.getPermissionsView();
                            break;
                        case ne.LABELS:
                            e = this.getLabelsView();
                            break;
                        default:
                            e = this.getOptionsView()
                    }
                    return l.createElement(w._7, null, e)
                }, t.prototype.getOptionsView = function() {
                    return this.props.sessionUser && this.props.sessionUser.id.toString() === this.props.data.room.owner.id ? this.getBroadcasterOptionsView() : this.getNonBroadcasterOptionsView()
                }, t.prototype.getBroadcasterOptionsView = function() {
                    return l.createElement(w._7, {
                        padding: {
                            y: .5
                        }
                    }, this.getEditLabelsSection(), l.createElement(w._1, null, l.createElement(w._7, {
                        display: w.Q.Flex
                    }, l.createElement(w._5, {
                        alpha: !0,
                        onClick: this.setPermissionsView,
                        "data-test-selector": "permissions-toggle"
                    }, l.createElement(w._30, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        },
                        display: w.Q.Flex,
                        justifyContent: w._6.Between
                    }, Object(c.d)("Permissions", "RoomDetails"), l.createElement(w._7, {
                        display: w.Q.Flex
                    }, l.createElement(w.P, {
                        color: w.J.Alt2
                    }, V.a[this.props.data.room.minimumAllowedRole]), l.createElement(w._30, {
                        className: "room-details__open-edit",
                        color: w.J.Link,
                        margin: {
                            left: .5
                        }
                    }, l.createElement(w._20, {
                        asset: w._21.GlyphArrDown,
                        height: 13
                    }))))))), l.createElement(w._5, {
                        alert: !0,
                        alpha: !0,
                        onClick: this.openDeleteRoomModal,
                        "data-test-selector": "delete-button"
                    }, l.createElement(w._30, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        }
                    }, Object(c.d)("Delete", "RoomDetails"))), l.createElement(w._7, {
                        padding: {
                            x: 1
                        }
                    }, l.createElement(w._30, {
                        borderTop: !0,
                        margin: {
                            y: .5,
                            x: .5
                        }
                    })), l.createElement(x, {
                        roomID: this.props.roomID
                    }))
                }, t.prototype.getNonBroadcasterOptionsView = function() {
                    return l.createElement(w._7, {
                        padding: {
                            y: .5
                        }
                    }, this.props.forActiveRoom && !!this.props.data.room.topic.length && l.createElement(w._7, {
                        padding: {
                            bottom: .5,
                            top: 1,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(w.P, {
                        className: "room-details__topic-description",
                        color: w.J.Alt2
                    }, this.props.data.room.topic), l.createElement(w._30, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })), this.props.data.room.owner.self.isChannelMember && l.createElement(x, {
                        roomID: this.props.roomID
                    }), l.createElement(B, {
                        roomID: this.props.roomID,
                        isLoggedIn: this.props.isLoggedIn,
                        login: this.props.login,
                        onShowModal: this.props.onShowModal
                    }))
                }, t.prototype.getEditLabelsSection = function() {
                    var e = Object(c.d)("Edit name or topic", "RoomDetails");
                    this.props.forActiveRoom && (e = Object(c.d)("Edit name", "RoomDetails"));
                    var t = l.createElement(w._1, null, l.createElement(w._5, {
                        alpha: !0,
                        onClick: this.setLabelsView,
                        "data-test-selector": "edit-labels"
                    }, l.createElement(w._30, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        },
                        display: w.Q.Flex,
                        justifyContent: w._6.Between
                    }, e, l.createElement(w._7, {
                        display: w.Q.Flex
                    }, l.createElement(w._30, {
                        className: "room-details__open-edit",
                        color: w.J.Link,
                        margin: {
                            left: .5
                        }
                    }, l.createElement(w._20, {
                        asset: w._21.GlyphArrDown,
                        height: 13
                    }))))));
                    return this.props.forActiveRoom ? l.createElement(w._7, null, l.createElement(w._7, {
                        padding: {
                            top: 1,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(w._1, {
                        position: w._14.Relative
                    }, this.getTopicField()), !this.state.isTopicHovered && l.createElement(w._30, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })), l.createElement(w._7, {
                        padding: {
                            top: .5
                        }
                    }, t)) : t
                }, t.prototype.getLabelsView = function() {
                    var e = void 0 !== this.state.updatedRoomName ? this.state.updatedRoomName : this.props.data.room.name,
                        t = void 0 !== this.state.updatedRoomTopic ? this.state.updatedRoomTopic : this.props.data.room.topic,
                        n = Object(c.d)("Edit name or topic", "RoomDetailsReturn");
                    return this.props.forActiveRoom && (n = Object(c.d)("Edit name", "RoomDetailsReturn")), l.createElement(w._7, null, l.createElement(w._1, null, l.createElement(w._7, {
                        display: w.Q.Flex,
                        padding: {
                            y: .5
                        }
                    }, l.createElement(w._5, {
                        alpha: !0,
                        onClick: this.setOptionsView
                    }, l.createElement(w._30, {
                        padding: {
                            y: .5
                        },
                        margin: {
                            left: 1
                        },
                        display: w.Q.Flex
                    }, l.createElement(w._30, {
                        className: "room-details__close-edit",
                        color: w.J.Link,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(w._20, {
                        asset: w._21.GlyphArrDown,
                        height: 13
                    })), n)))), l.createElement(w._7, {
                        padding: {
                            x: .5
                        }
                    }, l.createElement(w._30, {
                        borderTop: !0,
                        margin: {
                            x: 1
                        }
                    })), l.createElement(w._7, {
                        padding: {
                            x: 1,
                            y: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(P, {
                        editRoomNameError: this.state.editRoomNameError,
                        editRoomTopicError: this.props.forActiveRoom ? void 0 : this.state.editRoomTopicError,
                        roomName: e,
                        updateRoomName: this.updateRoomName,
                        roomTopic: this.props.forActiveRoom ? void 0 : t,
                        updateRoomTopic: this.updateRoomTopic
                    })), l.createElement(w._30, {
                        margin: {
                            y: 1,
                            left: 1,
                            right: 3
                        },
                        padding: {
                            left: .5,
                            right: 5
                        }
                    }, this.getSaveButton()))
                }, t.prototype.getPermissionsView = function() {
                    return l.createElement(w._7, null, l.createElement(w._1, null, l.createElement(w._7, {
                        display: w.Q.Flex,
                        padding: {
                            y: .5
                        }
                    }, l.createElement(w._5, {
                        alpha: !0,
                        onClick: this.setOptionsView
                    }, l.createElement(w._30, {
                        padding: {
                            y: .5
                        },
                        margin: {
                            left: 1
                        },
                        display: w.Q.Flex
                    }, l.createElement(w._30, {
                        className: "room-details__close-edit",
                        color: w.J.Link,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(w._20, {
                        asset: w._21.GlyphArrDown,
                        height: 13
                    })), Object(c.d)("Permissions", "RoomDetailsReturn"))))), l.createElement(w._7, {
                        padding: {
                            x: .5
                        }
                    }, l.createElement(w._30, {
                        borderTop: !0,
                        margin: {
                            x: 1
                        }
                    })), l.createElement(H, {
                        isPreviewable: this.props.data.room.isPreviewable,
                        minimumAllowedRole: this.props.data.room.minimumAllowedRole,
                        updatePermissions: this.updatePermissions
                    }), l.createElement(w._30, {
                        margin: {
                            y: 1,
                            left: 1
                        },
                        padding: {
                            left: .5
                        }
                    }, this.getSaveButton()))
                }, t.prototype.getSaveButton = function() {
                    return l.createElement(w.u, {
                        onClick: this.saveUpdate,
                        state: this.state.isSaveButtonStateSuccess ? w.z.Success : w.z.Default,
                        type: this.state.isSaveButtonStateSuccess ? w.A.Text : w.A.Default
                    }, Object(c.d)("Save", "RoomDetails"))
                }, t.prototype.getTopicField = function() {
                    var e, t = void 0 === this.state.updatedRoomTopic ? this.props.data.room.topic : this.state.updatedRoomTopic,
                        n = Object(c.d)("What do you want your community to talk about in this room?", "RoomDetails");
                    return e = this.state.isTopicFocused ? l.createElement(w._41, {
                        autoFocus: !0,
                        noResize: !0,
                        onChange: this.onRoomTopicChange,
                        value: t,
                        placeholder: n
                    }) : l.createElement(w.P, {
                        className: "room-details__topic-description",
                        color: w.J.Alt2,
                        italic: !t
                    }, t || n, l.createElement(w.N, {
                        onClick: this.focusTopic
                    }, l.createElement(w._7, {
                        padding: {
                            left: .5
                        },
                        className: "room-details__edit-topic"
                    }, Object(c.d)("Edit", "RoomDetails")))), l.createElement("div", null, e, this.state.editRoomTopicError && l.createElement(w.P, {
                        color: w.J.Error
                    }, this.state.editRoomTopicError), this.state.isTopicFocused && l.createElement(w._7, {
                        display: w.Q.Flex,
                        justifyContent: w._6.End
                    }, !this.state.isSaveButtonStateSuccess && l.createElement(w._7, {
                        padding: {
                            top: .5
                        }
                    }, l.createElement(w.u, {
                        onClick: this.blurTopic,
                        type: w.A.Text
                    }, Object(c.d)("Cancel", "RoomDetails"))), l.createElement(w._7, {
                        padding: {
                            top: .5,
                            left: 1
                        }
                    }, this.getSaveButton())))
                }, t = s.__decorate([Object(m.a)(ee, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                }), Object(m.a)(te, {
                    name: "updateRoom"
                })], t)
            }(l.Component);
        var ae = Object(i.b)(function(e) {
            return {
                sessionUser: Object(r.c)(e),
                isLoggedIn: Object(r.d)(e)
            }
        }, function(e) {
            return Object(a.b)({
                login: function() {
                    return Object(S.f)(_.a.ReportChannel)
                },
                onShowModal: C.d
            }, e)
        })(ie);

        function re(e, t) {
            return e.minimumAllowedRole === V.b.Everyone ? w._21.Hash : t ? w._21.Unlock : w._21.Lock
        }
        var oe, se = n("P7hg"),
            le = (n("Dr46"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading) return l.createElement(w.P, {
                        color: w.J.Alt,
                        "data-test-selector": "placeholder-text"
                    }, this.props.roomName);
                    if (this.props.data.error) return l.createElement(w._7, null);
                    var e = {
                        isPreviewable: this.props.data.room.isPreviewable,
                        minimumAllowedRole: this.props.data.room.minimumAllowedRole
                    };
                    return l.createElement(y.a, null, l.createElement("div", null, l.createElement(w._30, {
                        display: w.Q.Flex,
                        alignItems: w.c.Center,
                        className: "active-room-button"
                    }, l.createElement(w._7, {
                        className: "active-room-button__states",
                        display: w.Q.Flex
                    }, l.createElement(w._20, {
                        height: 14,
                        asset: re(e, this.props.data.room.self.permissions.sendMessages)
                    })), l.createElement(w.P, {
                        color: w.J.Alt
                    }, this.props.data.room.name), l.createElement(w._7, {
                        className: "room-details__close-edit active-room-button__cch-dropdown"
                    }, l.createElement(w._20, {
                        asset: w._21.AngleRight,
                        type: w._22.Alt,
                        height: 11
                    })))), l.createElement(w.p, {
                        direction: w.q.BottomLeft,
                        size: w.r.Medium
                    }, l.createElement(ae, {
                        forActiveRoom: !0,
                        roomID: this.props.roomID
                    })))
                }, t = s.__decorate([Object(k.d)("ActiveRoomButton"), Object(m.a)(se, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                })], t)
            }(l.Component)),
            de = n("Bh5x");
        n("4Xyl");
        ! function(e) {
            e[e.BadPermissions = 0] = "BadPermissions", e[e.Banned = 1] = "Banned", e[e.Deleted = 2] = "Deleted", e[e.NoPreview = 3] = "NoPreview"
        }(oe || (oe = {}));
        var ce, ue = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && this.props.data.loading ? l.createElement(w._13, {
                        lineCount: 4,
                        width: 160
                    }) : this.props.data && this.props.data.error ? l.createElement(w._7, null) : l.createElement(w._30, {
                        borderLeft: !0,
                        fullHeight: !0,
                        fullWidth: !0,
                        className: "invalid-room-view"
                    }, l.createElement(w._7, {
                        display: w.Q.Flex,
                        justifyContent: w._6.Center,
                        padding: 1
                    }, l.createElement("img", {
                        src: "https://static-cdn.jtvnw.net/emoticons/v1/86/3.0",
                        width: "54",
                        height: "45"
                    })), this.getCopy(), l.createElement(w._7, {
                        textAlign: w._40.Center,
                        padding: {
                            y: 3,
                            x: 2
                        }
                    }, l.createElement(w.u, {
                        type: w.A.Hollow,
                        onClick: this.props.handleStreamChatClick
                    }, Object(c.d)("Back to Stream Chat", "InvalidRoomView"))))
                }, t.prototype.getCopy = function() {
                    var e = null,
                        t = Object(c.d)("You don't have to go home, but you can't stay here. This room has been deleted.", "InvalidRoomView"),
                        n = Object(c.d)("The broadcaster's settings mean you can't participate in this room.", "InvalidRoomView");
                    switch (this.props.type) {
                        case oe.Deleted:
                            e = l.createElement(w.P, null, t);
                            break;
                        case oe.BadPermissions:
                            e = l.createElement(w.P, null, n);
                            break;
                        case oe.Banned:
                            e = l.createElement(w.P, null, Object(c.d)("You are banned and can't rejoin Rooms", "InvalidRoomView"));
                            break;
                        case oe.NoPreview:
                            var i = this.props.data.room.owner.displayName,
                                a = this.props.data.room.name,
                                r = Object(c.d)("You are viewing {displayName}’s #{roomName}. Chat participation is restricted to channel subscribers to chat or preview.", {
                                    displayName: i,
                                    roomName: a
                                }, "InvalidRoomView");
                            e = l.createElement(w.P, null, r);
                            break;
                        default:
                            e = l.createElement(w.P, null, n)
                    }
                    return l.createElement(w._7, {
                        textAlign: w._40.Center
                    }, l.createElement(w._7, {
                        padding: {
                            y: 1,
                            x: 2
                        }
                    }, e))
                }, t = s.__decorate([Object(m.a)(de, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    },
                    skip: function(e) {
                        return e.type !== oe.NoPreview
                    }
                }), Object(k.d)("InvalidRoomView")], t)
            }(l.Component),
            me = n("QKs+"),
            pe = n("ass3"),
            he = n("uekS");
        ! function(e) {
            e[e.RoomMessageEvent = 0] = "RoomMessageEvent", e[e.ModerationEvent = 1] = "ModerationEvent", e[e.SystemMessageEvent = 2] = "SystemMessageEvent", e[e.DeletedMessageEvent = 3] = "DeletedMessageEvent"
        }(ce || (ce = {}));
        var ge = n("X7fs"),
            fe = n("INp2");

        function ve(e) {
            return s.__assign({}, e, {
                kind: ce.RoomMessageEvent
            })
        }

        function be(e) {
            return {
                kind: ce.SystemMessageEvent,
                id: Object(fe.a)("roomSystemMessage"),
                text: e
            }
        }
        var ke = 900,
            ye = 300,
            _e = 100,
            Ce = function() {
                function e(e, t, n, i, a, r) {
                    void 0 === a && (a = ye), void 0 === r && (r = ke);
                    var o = this;
                    this.roomID = e, this.channelID = t, this.onBufferUpdate = n, this.onInitialLoad = i, this.maxVisibleSize = a, this.maxBufferSize = r, this.consumeRoomEvent = function(e, t, n) {
                        if (o.processRoomEvent(e)) {
                            var i = !n && o.offset + o.maxVisibleSize === o.buffer.length,
                                a = !n && o.offset + o.maxVisibleSize >= o.buffer.length;
                            if (o.buffer.length >= o.maxBufferSize && i) {
                                var r = o.buffer.shift();
                                o.eventMap.delete(r.id), o._hasOlderLeft = !0, i = !1, o.oldestCursor = void 0;
                                for (var s = 0, l = o.buffer; s < l.length; s++) {
                                    var d = l[s];
                                    if (d && o.eventMap.get(d.id)) {
                                        o.oldestCursor = o.eventMap.get(d.id);
                                        break
                                    }
                                }
                            }
                            o.buffer.length < o.maxBufferSize && (o.addRoomEventToBuffer(e, t, n), o._isBulkLoad = !1, a && (i && (o.offset = o.offset + 1), o._isDirty = !0, o.onBufferUpdate()))
                        }
                    }, this.loadNewest = function() {
                        o._hasNewerLeft ? o.resetBufferState() : o.offset = Math.max(o.buffer.length - o.maxVisibleSize, 0), o._isDirty = !0, o.onBufferUpdate()
                    }, this.loadOlder = function() {
                        return s.__awaiter(o, void 0, void 0, function() {
                            return s.__generator(this, function(e) {
                                return this.offset > 0 ? (this.offset = Math.max(this.offset - _e, 0), this._isBulkLoad = !0, this._isDirty = !0, this.onBufferUpdate(), [2]) : [2, this.loadMore(!0)]
                            })
                        })
                    }, this.loadNewer = function() {
                        return s.__awaiter(o, void 0, void 0, function() {
                            return s.__generator(this, function(e) {
                                if (this.newestCursor) {
                                    if (this.offset + this.maxVisibleSize < this.buffer.length) return this.offset = Math.min(this.offset + _e, this.buffer.length - this.maxVisibleSize), this._isBulkLoad = !0, this._isDirty = !0, this.onBufferUpdate(), [2];
                                    if (this._hasNewerLeft) return [2, this.loadMore(!1)]
                                }
                                return [2]
                            })
                        })
                    }, this.resetBufferState = function() {
                        o.buffer = [], o.eventMap = new Map, o.offset = 0, o._isDirty = !1, o._hasNewerLeft = !0, o._hasOlderLeft = !0, o.newestCursor = void 0, o.oldestCursor = void 0
                    }, this.loadMore = function(e) {
                        return Object(he.d)(Object(he.c)(c.o.apollo.client.link, {
                            query: ge,
                            variables: {
                                roomID: o.roomID,
                                channelID: o.channelID,
                                last: e ? _e : void 0,
                                before: e ? o.oldestCursor : void 0,
                                first: e ? void 0 : _e,
                                after: e ? void 0 : o.newestCursor
                            }
                        })).then(function(t) {
                            if (t.data && t.data.room.messages) {
                                var n = !1;
                                if (t.data.room.messages.edges.forEach(function(t) {
                                        if (!o.eventMap.has(t.node.id)) {
                                            var i = ve(t.node),
                                                a = o.processRoomEvent(i);
                                            a && (n = !0, o.addRoomEventToBuffer(a, t.cursor, e), o._isBulkLoad = !0)
                                        }
                                    }), e && o._hasOlderLeft && t.data.room.messages.edges.length < _e && (o._hasOlderLeft = !1, n = !0), !e && o._hasNewerLeft && t.data.room.messages.edges.length < _e && (o._hasNewerLeft = !1, n = !0), o.buffer.length > o.maxBufferSize) {
                                    if (e) {
                                        for (var i = 0, a = o.buffer.splice(o.maxBufferSize, o.buffer.length - o.maxBufferSize); i < a.length; i++) {
                                            l = a[i];
                                            o.eventMap.delete(l.id)
                                        }
                                        o._hasNewerLeft = !0, o.newestCursor = void 0;
                                        for (l = 0; l < o.buffer.length; l++) {
                                            if ((u = o.buffer[o.buffer.length - l - 1]) && o.eventMap.get(u.id)) {
                                                o.newestCursor = o.eventMap.get(u.id);
                                                break
                                            }
                                        }
                                    } else {
                                        for (var r = 0, s = o.buffer.splice(0, o.buffer.length - o.maxBufferSize); r < s.length; r++) {
                                            var l = s[r];
                                            o.eventMap.delete(l.id)
                                        }
                                        o._hasOlderLeft = !0, o.oldestCursor = void 0;
                                        for (var d = 0, c = o.buffer; d < c.length; d++) {
                                            var u;
                                            if ((u = c[d]) && o.eventMap.get(u.id)) {
                                                o.oldestCursor = o.eventMap.get(u.id);
                                                break
                                            }
                                        }
                                    }
                                }
                                n && (e || (o.offset = Math.max(o.buffer.length - o.maxVisibleSize, 0)), o._isDirty = !0, o.onBufferUpdate())
                            }
                            o._loadedOnce || (o._loadedOnce = !0, o.onInitialLoad())
                        })
                    }, this.addRoomEventToBuffer = function(e, t, n) {
                        t || (t = n ? o.oldestCursor : o.newestCursor), o.eventMap.has(e.id) || (n ? (o.oldestCursor = t, o.buffer.unshift(e)) : (o.newestCursor = t, o.buffer.push(e)), o.oldestCursor = o.oldestCursor || o.newestCursor, o.newestCursor = o.newestCursor || o.oldestCursor), o.eventMap.set(e.id, t || null)
                    }, this.processRoomEvent = function(e) {
                        switch (e.kind) {
                            case ce.ModerationEvent:
                                for (var t = new Date(e.purgeAfter), n = 0; n < o.buffer.length; n++) {
                                    var i = o.buffer[n];
                                    i.kind === ce.RoomMessageEvent && i.sender.id === e.userID && t <= new Date(i.sentAt) && (o.buffer[n] = s.__assign({}, i, {
                                        deletedAt: (new Date).toISOString()
                                    }), o._isDirty = !0, o.onBufferUpdate())
                                }
                                return null;
                            case ce.DeletedMessageEvent:
                                var a = o.buffer.findIndex(function(t) {
                                    return t.kind === ce.RoomMessageEvent && t.id === e.id
                                });
                                return a && (o.buffer[a] = s.__assign({}, o.buffer[a], {
                                    deletedAt: (new Date).toISOString()
                                }), o._isDirty = !0, o.onBufferUpdate()), null;
                            case ce.RoomMessageEvent:
                                return e.sender.id && o.blockedUsers.has(e.sender.id) ? null : e;
                            case ce.SystemMessageEvent:
                                return e;
                            default:
                                return null
                        }
                    }, this.resetBufferState(), this._loadedOnce = !1, this.blockedUsers = new Set
                }
                return e.prototype.toArray = function() {
                    this._isDirty = !1;
                    var e = Math.min(this.offset + this.maxVisibleSize, this.buffer.length);
                    return this.buffer.slice(this.offset, e)
                }, Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "isBulkLoad", {
                    get: function() {
                        return this._isBulkLoad
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "hasNewerLeft", {
                    get: function() {
                        return !!this.newestCursor && (this._hasNewerLeft || this.offset + this.maxVisibleSize < this.buffer.length)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "hasOlderLeft", {
                    get: function() {
                        return this._hasOlderLeft || this.offset > 0
                    },
                    enumerable: !0,
                    configurable: !0
                }), e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e
            }(),
            Se = n("mwvJ"),
            Ee = n("3KVC"),
            Ne = {
                EMOTE: "Emote",
                MENTION: "User"
            },
            we = "/me ";
        var De = function() {
                return function(e, t, n) {
                    var i = this;
                    this.roomID = e, this.channelID = t, this.consumeRoomEvent = n, this.unsubscribe = function() {
                        i.unsubscribeChatRoomTopic && i.unsubscribeChatRoomTopic(), i.unsubscribeChatRoomsChanneTopic && i.unsubscribeChatRoomsChanneTopic()
                    }, this.unsubscribeChatRoomTopic = c.k.subscribe({
                        topic: Object(g.e)(this.roomID),
                        onMessage: function(e) {
                            var t, n, a, r, o, s = (t = e.data, n = t.message, a = t.cursor, r = n.content.fragments.map(function(e) {
                                var t = {
                                        text: e.text,
                                        content: null,
                                        __typename: "RoomMessageFragment"
                                    },
                                    n = e.emoticon,
                                    i = e.mention,
                                    a = e.text;
                                return n && (t.content = {
                                    emoteID: n.id,
                                    setID: n.set_id,
                                    token: a,
                                    __typename: Ne.EMOTE
                                }), i && (t.content = {
                                    id: i.user_id,
                                    login: i.login,
                                    displayName: i.display_name,
                                    __typename: Ne.MENTION
                                }), t
                            }), o = n.sender.badges.map(function(e) {
                                return {
                                    setID: e.id,
                                    version: e.version,
                                    __typename: "Badge"
                                }
                            }), {
                                cursor: "" + a,
                                node: {
                                    id: n.id,
                                    deletedAt: null,
                                    sentAt: n.sent_at,
                                    content: {
                                        text: n.content.text,
                                        fragments: r,
                                        __typename: "RoomMessageContent"
                                    },
                                    sender: {
                                        id: n.sender.user_id,
                                        login: n.sender.login,
                                        chatColor: n.sender.chat_color,
                                        displayName: n.sender.display_name,
                                        displayBadges: o,
                                        __typename: "User"
                                    },
                                    __typename: "RoomMessage"
                                },
                                __typename: "RoomMessageEdge"
                            });
                            switch (e.type) {
                                case h.PubsubMessageType.ChatRoomMessageCreated:
                                    i.consumeRoomEvent(ve(s.node), s.cursor);
                                    break;
                                case h.PubsubMessageType.ChatRoomMessageDeleted:
                                    i.consumeRoomEvent(function(e) {
                                        return {
                                            kind: ce.DeletedMessageEvent,
                                            id: e.id
                                        }
                                    }(s.node))
                            }
                        }
                    }), this.unsubscribeChatRoomsChanneTopic = c.k.subscribe({
                        topic: Object(g.f)(this.channelID),
                        onMessage: function(e) {
                            switch (e.type) {
                                case h.PubsubMessageType.PurgeMessageRequest:
                                    var t = e;
                                    i.consumeRoomEvent((n = t.data.channel_id, a = t.data.user_id, r = t.data.purge_after, {
                                        kind: ce.ModerationEvent,
                                        id: Object(fe.a)(a + "-moderation-event"),
                                        channelID: n,
                                        userID: a,
                                        purgeAfter: r
                                    }))
                            }
                            var n, a, r
                        }
                    })
                }
            }(),
            Oe = n("Ldv2"),
            Ie = n("3T7g"),
            Te = n("bkpq"),
            Me = n("1F7R"),
            Re = n("1OO3"),
            xe = n("KBUQ"),
            Le = n("O0Qc"),
            Ae = n("JtUK"),
            Fe = n("Kthq"),
            je = 600,
            Ue = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.banUser = function(e) {
                        var n = Object(Le.n)("/ban " + e);
                        if (n && !n.duration) {
                            var i = n.bannedUserLogin;
                            return i ? {
                                deferred: t.props.banUserMutation(i).then(function(e) {
                                    var t = e.banUserFromChatRoom;
                                    return t.error ? {
                                        notice: Object(Ae.a)(i, t.error.code)
                                    } : {
                                        notice: Object(c.d)("{userLogin} is now banned from this channel.", {
                                            userLogin: i
                                        }, "BanCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: Object(c.d)("Unable to ban user.", "BanCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(c.d)("Please specify a user to ban.", "BanCommandHandler")
                                })
                            }
                        }
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Usage: /ban [login]", "BanCommandHandler")
                            })
                        }
                    }, t.unbanUser = function(e) {
                        return e ? {
                            deferred: t.props.unbanUserMutation(e).then(function(t) {
                                var n = t.unbanUserFromChatRoom;
                                return n.error ? {
                                    notice: Object(Fe.a)(e, n.error.code)
                                } : {
                                    notice: Object(c.d)("{bannedUserLogin} is no longer banned from this channel.", {
                                        bannedUserLogin: e
                                    }, "BanCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unban user.", "BanCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Please specify a user to unban.", "BanCommandHandler")
                            })
                        }
                    }, t.timeoutUser = function(e) {
                        var n = Object(Le.n)("/ban " + e);
                        if (n) {
                            var i = n.bannedUserLogin,
                                a = n.duration || je;
                            return i ? {
                                deferred: t.props.banUserMutation(i, a).then(function(e) {
                                    var t = e.banUserFromChatRoom;
                                    return t.error ? {
                                        notice: Object(Ae.a)(i, t.error.code, !0)
                                    } : {
                                        notice: Object(c.d)("{userLogin} has been timed out for {duration} seconds.", {
                                            userLogin: i,
                                            duration: a
                                        }, "BanCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: Object(c.d)("Unable to timeout user.", "BanCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(c.d)("Please specify a user to timeout.", "BanCommandHandler")
                                })
                            }
                        }
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Usage: /timeout [login] [duration in seconds]", "BanCommandHandler")
                            })
                        }
                    }, t.untimeoutUser = function(e) {
                        return e ? {
                            deferred: t.props.unbanUserMutation(e).then(function(t) {
                                var n = t.unbanUserFromChatRoom;
                                return n.error ? {
                                    notice: Object(Fe.a)(e, n.error.code, !0)
                                } : {
                                    notice: Object(c.d)("{login} is no longer timed out in this channel.", {
                                        login: e
                                    }, "BanCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to untimeout user.", "BanCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Please specify a user to untimeout.", "BanCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, {
                        display: w.Q.Hide
                    }, l.createElement(Me.a, {
                        command: "ban",
                        handler: this.banUser
                    }), l.createElement(Me.a, {
                        command: "unban",
                        handler: this.unbanUser
                    }), l.createElement(Me.a, {
                        command: "timeout",
                        handler: this.timeoutUser
                    }), l.createElement(Me.a, {
                        command: "untimeout",
                        handler: this.untimeoutUser
                    }))
                }, t
            }(l.Component),
            Be = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            Pe = Object(d.compose)(Object(xe.b)(Be), Object(Re.b)(Be))(Ue),
            Ve = n("XdSf"),
            He = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.updateChatColor = function(e) {
                        var n = Object(Le.o)("/color " + e);
                        if (n && n.color) {
                            var i = n.color;
                            return {
                                deferred: t.props.updateChatColorMutation(i).then(function() {
                                    return {
                                        notice: Object(c.d)("Your color has been changed.", "ColorCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: Object(c.d)("Unable to change your color.", "ColorCommandHandler")
                                    }
                                })
                            }
                        }
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/color [color]" - Change your username color. Color must be in hex (#000000) or one of the following: Blue, BlueViolet, CadetBlue, Chocolate, Coral, DodgerBlue, Firebrick, GoldenRod, Green, HotPink, OrangeRed, Red, SeaGreen, SpringGreen, YellowGreen.', "ColorCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, {
                        display: w.Q.Hide
                    }, l.createElement(Me.a, {
                        command: "color",
                        handler: this.updateChatColor
                    }))
                }, t
            }(l.Component),
            We = Object(Ve.a)()(He),
            Ge = n("TCxx"),
            Qe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setEmoteOnlyMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/emoteonly" - Enables emote-only mode (only emoticons may be used in chat). Use "emoteonlyoff" to disable.', "EmoteOnlyCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableEmotesOnlyMode: !0
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("emote-only mode has been enabled for this room.", "EmoteOnlyCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to set emote-only mode.", "EmoteOnlyCommandHandler")
                                }
                            })
                        }
                    }, t.unsetEmoteOnlyMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/emoteonlyoff" - Disables emote-only mode.', "EmoteOnlyCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableEmotesOnlyMode: !1
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("emote-only mode has been disabled for this room.", "EmoteOnlyCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unset emote-only mode.", "EmoteOnlyCommandHandler")
                                }
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, {
                        display: w.Q.Hide
                    }, l.createElement(Me.a, {
                        command: "emoteonly",
                        handler: this.setEmoteOnlyMode
                    }), l.createElement(Me.a, {
                        command: "emoteonlyoff",
                        handler: this.unsetEmoteOnlyMode
                    }))
                }, t
            }(l.Component),
            qe = Object(m.a)(Ge, {
                name: "updateRoomModes"
            })(Qe),
            ze = n("R9op"),
            Ye = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.showHelp = function(e) {
                        var n = t.props.chatCommands.sort().map(function(e) {
                            return "/" + e
                        });
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Available commands: {commands}.", {
                                    commands: n.join(", ")
                                }, "HelpCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, {
                        display: w.Q.Hide
                    }, l.createElement(Me.a, {
                        command: "help",
                        handler: this.showHelp
                    }))
                }, t
            }(l.Component);
        var Je, $e = Object(i.b)(function(e) {
                return {
                    chatCommands: Object(ze.b)(e)
                }
            })(Ye),
            Ke = n("uLsu"),
            Ze = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.sendMessage = function(e) {
                        return t.props.sendMessage("/me " + e), {}
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, {
                        display: w.Q.Hide
                    }, l.createElement(Me.a, {
                        command: "me",
                        handler: this.sendMessage
                    }))
                }, t
            }(l.Component),
            Xe = n("EsrG");
        ! function(e) {
            e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserAlreadyModded = "TARGET_ALREADY_MOD", e.UserBanned = "TARGET_IS_CHAT_BANNED", e.UserNotFound = "TARGET_NOT_FOUND"
        }(Je || (Je = {}));
        var et, tt = n("Ta4Q");
        ! function(e) {
            e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserNotFound = "TARGET_NOT_FOUND", e.UserNotMod = "TARGET_NOT_MOD"
        }(et || (et = {}));
        var nt = n("zLjL"),
            it = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.modUser = function(e) {
                        var n = e.trim().split(/\s+/),
                            i = n[0];
                        return 1 === n.length && i && 0 !== i.length ? {
                            deferred: t.props.modUserMutation(i).then(function(e) {
                                if (e.modUser.error) switch (e.modUser.error.code) {
                                    case Je.Forbidden:
                                        return {
                                            notice: rt()
                                        };
                                    case Je.UserAlreadyModded:
                                        return {
                                            notice: Object(c.d)("{login} is already a moderator of this channel.", {
                                                login: i
                                            }, "ModCommandHandler")
                                        };
                                    case Je.UserBanned:
                                        return {
                                            notice: Object(c.d)("{login} is banned in this channel. You must unban this user before granting mod status.", {
                                                login: i
                                            }, "ModCommandHandler")
                                        };
                                    case Je.UserNotFound:
                                        return {
                                            notice: at(i)
                                        };
                                    default:
                                        return {
                                            notice: ot()
                                        }
                                }
                                return {
                                    notice: Object(c.d)("You have added {login} as a moderator of this channel.", {
                                        login: i
                                    }, "ModCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: ot()
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/mod [login]" - Grant mod status to a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                            })
                        }
                    }, t.mods = function(e) {
                        return {
                            deferred: c.o.apollo.client.query({
                                query: nt,
                                fetchPolicy: "network-only",
                                variables: {
                                    id: t.props.channelID
                                }
                            }).then(function(e) {
                                if (!e.data.user) return {
                                    notice: st()
                                };
                                if (0 === e.data.user.mods.edges.length) return {
                                    notice: Object(c.d)("There are no moderators of this channel.", "ModCommandHandler")
                                };
                                var t = e.data.user.mods.edges.map(function(e) {
                                    return e.node.login
                                }).join(", ");
                                return {
                                    notice: Object(c.d)("The moderators of this channel are: {mods}.", {
                                        mods: t
                                    }, "ModCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: st()
                                }
                            })
                        }
                    }, t.unmodUser = function(e) {
                        var n = e.trim().split(/\s+/),
                            i = n[0];
                        return 1 === n.length && i && 0 !== i.length ? {
                            deferred: t.props.unmodUserMutation(i).then(function(e) {
                                if (e.unmodUser.error) switch (e.unmodUser.error.code) {
                                    case et.Forbidden:
                                        return {
                                            notice: rt()
                                        };
                                    case et.UserNotFound:
                                        return {
                                            notice: at(i)
                                        };
                                    case et.UserNotMod:
                                        return {
                                            notice: Object(c.d)("{login} is currently not a moderator of this channel.", {
                                                login: i
                                            }, "ModCommandHandler")
                                        };
                                    default:
                                        return {
                                            notice: lt()
                                        }
                                }
                                return {
                                    notice: Object(c.d)("You have removed {login} as a moderator of this channel.", {
                                        login: i
                                    }, "ModCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: lt()
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/unmod [login]" - Revoke mod status from a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, {
                        display: w.Q.Hide
                    }, l.createElement(Me.a, {
                        command: "mod",
                        handler: this.modUser
                    }), l.createElement(Me.a, {
                        command: "mods",
                        handler: this.mods
                    }), l.createElement(Me.a, {
                        command: "unmod",
                        handler: this.unmodUser
                    }))
                }, t
            }(l.Component);

        function at(e) {
            return Object(c.d)("Invalid username: {login}", {
                login: e
            }, "ModCommandHandler")
        }

        function rt() {
            return Object(c.d)("You don't have permission to perform that action.", "ModCommandHandler")
        }

        function ot() {
            return Object(c.d)("Unable to add moderator.", "ModCommandHandler")
        }

        function st() {
            return Object(c.d)("There was a problem fetching the list of mods.", "ModCommandHandler")
        }

        function lt() {
            return Object(c.d)("Unable to remove moderator.", "ModCommandHandler")
        }
        var dt, ct = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            ut = Object(d.compose)(function(e) {
                var t = this;
                return Object(m.a)(tt, {
                    props: function(n) {
                        return {
                            unmodUserMutation: function(i) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return s.__generator(this, function(a) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("unmodUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }(ct), function(e) {
                var t = this;
                return Object(m.a)(Xe, {
                    props: function(n) {
                        return {
                            modUserMutation: function(i) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return s.__generator(this, function(a) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("modUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }(ct))(it),
            mt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setR9kMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/r9k" - Enables r9k mode. See http://link.twitch.tv/r9k for details. Use "r9koff" to disable.', "R9kCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableR9KMode: !0
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("r9k mode has been enabled for this room.", "R9kCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to set r9k mode.", "R9kCommandHandler")
                                }
                            })
                        }
                    }, t.unsetR9kMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/r9koff" - Disables r9k mode.', "R9kCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableR9KMode: !1
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("r9k mode has been disabled for this room.", "R9kCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unset r9k mode.", "R9kCommandHandler")
                                }
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, {
                        display: w.Q.Hide
                    }, l.createElement(Me.a, {
                        command: "r9k",
                        handler: this.setR9kMode
                    }), l.createElement(Me.a, {
                        command: "r9koff",
                        handler: this.unsetR9kMode
                    }))
                }, t
            }(l.Component),
            pt = Object(m.a)(Ge, {
                name: "updateRoomModes"
            })(mt),
            ht = 120,
            gt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setSlowMode = function(e) {
                        var n = Object(Le.p)("/slow " + e);
                        return n ? {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableSlowMode: !0,
                                        slowModeDurationSeconds: n.duration || ht
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                                        length: n.duration || ht
                                    }, "SlowCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to set slow mode.", "SlowCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/slow [duration]" - Enables slow mode (limit how often users may send messages). Duration (optional, default=120) must be a positive number of seconds. Use "slowoff" to disable.', "SlowCommandHandler")
                            })
                        }
                    }, t.unsetSlowMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/slowoff" - Disables slow mode.', "SlowCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableSlowMode: !1
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("This room is no longer in slow mode.", "SlowCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unset slow mode.", "SlowCommandHandler")
                                }
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(w._7, {
                        display: w.Q.Hide
                    }, l.createElement(Me.a, {
                        command: "slow",
                        handler: this.setSlowMode
                    }), l.createElement(Me.a, {
                        command: "slowoff",
                        handler: this.unsetSlowMode
                    }))
                }, t
            }(l.Component),
            ft = Object(m.a)(Ge, {
                name: "updateRoomModes"
            })(gt),
            vt = n("+WrY"),
            bt = n("BMQ2"),
            kt = n("ZiSq"),
            yt = n("QCOJ"),
            _t = n("hcyD"),
            Ct = n("VB5+"),
            St = n("QFW6"),
            Et = function() {
                var e = Array.from(Array(21).keys()).map(function(e) {
                    return Nt(e)
                });
                return l.createElement(w._7, {
                    className: "fake-room-list",
                    display: w.Q.Flex,
                    flexDirection: w.S.Column,
                    flexWrap: w.T.NoWrap,
                    overflow: w._10.Hidden,
                    flexGrow: 1
                }, l.createElement(w._7, {
                    className: "fake-room-list__lines"
                }, e))
            },
            Nt = function(e) {
                return l.createElement(w._7, {
                    padding: {
                        x: 2,
                        y: .5
                    },
                    key: e
                }, l.createElement(w._1, {
                    display: w.Q.InlineBlock,
                    margin: {
                        right: 1
                    }
                }, l.createElement(w.P, {
                    type: w._44.Span
                }, l.createElement(w._13, {
                    width: 70
                }))), l.createElement(w._1, {
                    display: w.Q.InlineBlock
                }, l.createElement(w.P, {
                    type: w._44.Span
                }, l.createElement(w._13, {
                    width: 50 + 89 * e % 151
                }))))
            },
            wt = n("zCIC"),
            Dt = n("O9wU"),
            Ot = (n("UiRd"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, Dt.a.member_list, "", e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        i = t.header,
                        a = n.map(function(t) {
                            return l.createElement("div", {
                                key: "member-list-group-item-" + t
                            }, l.createElement("button", {
                                className: "member-list-group__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, l.createElement(w.P, {
                                transform: w._43.Capitalize
                            }, t)))
                        });
                    return l.createElement(w._7, {
                        className: "member-list-group",
                        padding: {
                            bottom: 2
                        }
                    }, l.createElement(w.P, {
                        transform: w._43.Uppercase
                    }, i), a)
                }, t
            }(l.Component)),
            It = n("GS+L");
        n("Vvm+");
        ! function(e) {
            e.Admin = "ADMIN", e.GlobalMod = "GLOBALMOD", e.Moderator = "MOD", e.Broadcaster = "BROADCASTER", e.Staff = "STAFF", e.Regular = "REGULAR"
        }(dt || (dt = {}));
        var Tt = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {}, t
            }
            return s.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = this.props.data.loading && l.createElement(w._9, {
                    fillContent: !0
                });
                return l.createElement(w._7, {
                    className: "member-list",
                    fullWidth: !0,
                    fullHeight: !0,
                    flexShrink: 0,
                    zIndex: w._57.Default
                }, l.createElement(w._7, {
                    className: "member-list__pane",
                    display: w.Q.Flex,
                    flexDirection: w.S.Column,
                    flexWrap: w.T.NoWrap,
                    position: w._14.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    attachRight: !0
                }, l.createElement(w._7, {
                    className: "member-list__header",
                    display: w.Q.Flex,
                    justifyContent: w._6.Center,
                    alignItems: w.c.Center,
                    padding: {
                        y: 1
                    },
                    margin: {
                        bottom: 2
                    },
                    flexShrink: 0
                }, l.createElement(w._7, {
                    position: w._14.Absolute,
                    attachLeft: !0,
                    margin: {
                        left: 1
                    }
                }, l.createElement(w.v, {
                    icon: w._21.Close,
                    ariaLabel: Object(c.d)("Close", "MemberList"),
                    onClick: this.props.closeMemberList,
                    "data-test-selector": "member-list-close-button"
                })), l.createElement(w.P, null, Object(c.d)("Member List", "MemberList"))), this.renderMembers(), e))
            }, t.prototype.renderMembers = function() {
                if (this.props.data.loading || this.props.data.error) return null;
                var e = [],
                    t = this.props.data.room.members.edges,
                    n = this.props.onUsernameClick,
                    i = {
                        broadcaster: t.filter(function(e) {
                            return e.type === dt.Broadcaster
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        staff: t.filter(function(e) {
                            return e.type === dt.Staff
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        admin: t.filter(function(e) {
                            return e.type === dt.Admin
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        globalMod: t.filter(function(e) {
                            return e.type === dt.GlobalMod
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        moderator: t.filter(function(e) {
                            return e.type === dt.Moderator
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        member: t.filter(function(e) {
                            return e.type === dt.Regular
                        }).map(function(e) {
                            return e.node.displayName
                        })
                    };
                return i.broadcaster.length > 0 && e.push(l.createElement(Ot, {
                    key: "member-group-broadcaster",
                    header: Object(c.d)("Broadcaster", "MemberList"),
                    viewers: i.broadcaster,
                    onUsernameClick: n
                })), i.staff.length > 0 && e.push(l.createElement(Ot, {
                    key: "member-group-staff",
                    header: Object(c.d)("Staff", "MemberList"),
                    viewers: i.staff,
                    onUsernameClick: n
                })), i.admin.length > 0 && e.push(l.createElement(Ot, {
                    key: "member-group-admins",
                    header: Object(c.d)("Admins", "MemberList"),
                    viewers: i.admin,
                    onUsernameClick: n
                })), i.globalMod.length > 0 && e.push(l.createElement(Ot, {
                    key: "member-group-global-mods",
                    header: Object(c.d)("Global Moderators", "MemberList"),
                    viewers: i.globalMod,
                    onUsernameClick: n
                })), i.moderator.length > 0 && e.push(l.createElement(Ot, {
                    key: "member-group-moderators",
                    header: Object(c.d)("Moderators", "MemberList"),
                    viewers: i.moderator,
                    onUsernameClick: n
                })), i.member.length > 0 && e.push(l.createElement(Ot, {
                    key: "member-group-members",
                    header: Object(c.d)("Members", "MemberList"),
                    viewers: i.member,
                    onUsernameClick: n
                })), l.createElement(wt.b, {
                    className: "member-list__list"
                }, l.createElement(w._7, {
                    padding: {
                        x: 2
                    }
                }, e))
            }, t = s.__decorate([Object(k.d)("MemberList"), Object(m.a)(It, {
                options: function(e) {
                    return {
                        variables: {
                            roomID: e.roomID
                        }
                    }
                }
            })], t)
        }(l.Component);
        var Mt = Object(i.b)(null, function(e) {
                return Object(a.b)({
                    onUsernameClick: pe.d
                }, e)
            })(Tt),
            Rt = n("6BvN"),
            xt = n("c3pS"),
            Lt = n("iydZ"),
            At = n("/LBW"),
            Ft = n("ieBa"),
            jt = n("KSGD"),
            Ut = n("SZoP"),
            Bt = n("Bir6"),
            Pt = n("2emZ"),
            Vt = n("e1CU"),
            Ht = 5,
            Wt = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = Pt.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var i = t ? e : e.substring(1),
                            a = new RegExp("^" + Object(Bt.a)(i), "i");
                        return n.state.sortedRoomMembers.filter(function(e) {
                            return a.test(e.login) || a.test(e.displayName)
                        }).slice(0, Ht).map(function(i) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + i.displayName,
                                element: n.renderMention(i)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return l.createElement("span", null, Object(Ut.a)(e.login, e.displayName))
                    }, n.sortChatMembers = function(e) {
                        var t = [{
                                id: e.channelID,
                                login: e.channelLogin,
                                chatColor: "",
                                displayName: Object(Vt.a)(e.channelDisplayName, e.channelLogin).userDisplayName,
                                displayBadges: [],
                                __typename: "User"
                            }],
                            n = e.roomMembers;
                        return n.sort(function(e, t) {
                            return e.login < t.login ? -1 : e.login > t.login ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedRoomMembers: n.sortChatMembers(t)
                    }, n
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.roomMembers === e.roomMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin && this.props.channelID === e.channelID || this.setState({
                        sortedRoomMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: jt.func
                }, t
            }(l.Component),
            Gt = (n("KnZO"), function() {
                return l.createElement(w._7, {
                    fullWidth: !0,
                    position: w._14.Absolute,
                    className: "rooms-bits-prompt"
                }, l.createElement(w._30, {
                    border: !0,
                    background: w.m.Base,
                    elevation: 3,
                    fullWidth: !0,
                    padding: 1,
                    textAlign: w._40.Center,
                    className: "rooms-bits-prompt__content"
                }, l.createElement(w._7, {
                    padding: {
                        y: 1
                    }
                }, l.createElement(w.P, {
                    color: w.J.Link,
                    type: w._44.H4,
                    bold: !0
                }, Object(c.d)("Cheering is not available in Rooms", "DisabledBitsCard"))), l.createElement(w._7, {
                    display: w.Q.Flex,
                    justifyContent: w._6.Center
                }, l.createElement("img", {
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/86/3.0",
                    width: "42",
                    height: "35"
                })), l.createElement(w._7, {
                    padding: {
                        y: 1
                    }
                }, l.createElement(w.P, null, Object(c.d)("To Cheer in this channel to support the streamer, please cheer in Stream Chat", "DisabledBitsCard")))))
            }),
            Qt = n("NXs7"),
            qt = n("NikC"),
            zt = n("0nzt"),
            Yt = n("Ouuk"),
            Jt = n("jF7o"),
            $t = n("VsL1"),
            Kt = n("v4vD"),
            Zt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? Qt.a.Light : Qt.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout)
                    }, t.onModIconsToggle = function() {
                        Object($t.b)("showModIcons", !t.props.showModerationIcons), t.props.showModerationIcons ? t.props.onModIconsDisable() : t.props.onModIconsEnable()
                    }, t.onSlowModeToggle = function() {
                        0 === t.props.data.room.modes.slowModeDurationSeconds ? t.props.sendMessage("/slow") : t.props.sendMessage("/slowoff")
                    }, t.onTimestampToggle = function() {
                        Object($t.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable()
                    }, t.onChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.data.room.owner.login + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(Yt.a)() && (e.focus(), Object(Jt.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.hasModPermissions = function() {
                        var e = t.props.sessionUser,
                            n = t.props.data,
                            i = n.room,
                            a = n.user;
                        return !!e && (a.roles.isStaff || a.roles.isGlobalMod || a.roles.isSiteAdmin || e.id === i.owner.id || !!i.owner.self && i.owner.self.isModerator)
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.loading ? l.createElement(w._13, {
                        lineCount: 4
                    }) : this.props.data.error ? l.createElement(w._7, null) : l.createElement(wt.b, {
                        className: "room-settings"
                    }, l.createElement(w._30, {
                        className: "room-settings__content",
                        background: w.m.Base,
                        color: w.J.Base,
                        padding: 2
                    }, this.renderChatOptions(), this.renderModTools()))
                }, t.prototype.renderChatOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && l.createElement(w.I, {
                        checked: this.props.darkModeEnabled,
                        "data-test-selector": "dark-mode-checkbox",
                        id: "room-settings-dark-mode",
                        label: Object(c.d)("Dark Mode", "RoomSettings"),
                        onChange: this.onDarkModeToggle
                    });
                    return l.createElement(w._7, null, l.createElement(w._30, {
                        padding: {
                            bottom: 2
                        }
                    }, l.createElement(w.P, {
                        color: w.J.Alt2,
                        transform: w._43.Uppercase
                    }, Object(c.d)("Chat Options", "RoomSettings"))), l.createElement(w._7, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(w.I, {
                        checked: this.props.showTimestamps,
                        "data-test-selector": "timestamps-selector",
                        id: "room-settings-timestamp",
                        label: Object(c.d)("Timestamps", "RoomSettings"),
                        onChange: this.onTimestampToggle
                    })), l.createElement(w._7, {
                        margin: {
                            bottom: 1
                        }
                    }, e), l.createElement(w._7, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement("button", {
                        onClick: this.onChatPopout,
                        "data-test-selector": "popout-button"
                    }, Object(c.d)("Popout", "RoomSettings"))))
                }, t.prototype.renderModTools = function() {
                    if (this.hasModPermissions()) return l.createElement(w._30, {
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, l.createElement(w._7, {
                        margin: {
                            bottom: 2
                        }
                    }, l.createElement(w.P, {
                        color: w.J.Alt2,
                        transform: w._43.Uppercase
                    }, Object(c.d)("Mod Tools", "RoomSettings"))), l.createElement(w._7, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(w.I, {
                        checked: this.props.showModerationIcons,
                        "data-test-selector": "mod-icons-checkbox",
                        id: "room-settings-mod-icons",
                        label: Object(c.d)("Mod Icons", "RoomSettings"),
                        onChange: this.onModIconsToggle
                    })), l.createElement(w._7, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(w.I, {
                        checked: 0 !== this.props.data.room.modes.slowModeDurationSeconds,
                        id: "room-settings-slow-mode",
                        label: Object(c.d)("Slow Mode", "RoomSettings"),
                        onChange: this.onSlowModeToggle
                    })))
                }, t = s.__decorate([Object(m.a)(Kt, {
                    options: function(e) {
                        return {
                            variables: {
                                roomID: e.roomID,
                                isLoggedIn: !!e.sessionUser,
                                userID: e.sessionUser && e.sessionUser.id
                            }
                        }
                    }
                }), Object(k.d)("RoomSettings")], t)
            }(l.Component);
        var Xt, en = Object(i.b)(function(e) {
                return {
                    darkModeEnabled: Object(zt.a)(e) === Qt.a.Dark,
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps,
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    sessionUser: Object(r.c)(e)
                }
            }, function(e) {
                return Object(a.b)({
                    onChatHide: function() {
                        return o.Q()
                    },
                    onChatUnhide: function() {
                        return o.T()
                    },
                    onModIconsDisable: function() {
                        return o.D()
                    },
                    onModIconsEnable: function() {
                        return o.K()
                    },
                    onTimestampsDisable: function() {
                        return o.I()
                    },
                    onTimestampsEnable: function() {
                        return o.P()
                    },
                    onThemeChanged: function(e) {
                        return Object(qt.b)(e, void 0, !1)
                    }
                }, e)
            })(Zt),
            tn = /\S/;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(Xt || (Xt = {}));
        var nn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onKeyDown = function(e) {
                        switch (e.charCode || e.keyCode) {
                            case Rt.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.handleMessageSend()))
                        }
                    }, n.onMessageValueUpdate = function(e) {
                        n.setState({
                            currentMessageInput: e
                        })
                    }, n.handleMessageSend = function() {
                        tn.test(n.state.currentMessageInput) && (n.props.sendMessage(n.state.currentMessageInput), n.setState({
                            currentMessageInput: ""
                        }), n.chatInputRef.focus(), n.autocompleteInputRef.setValue(""))
                    }, n.onClickEmote = function(e) {
                        var t = n.state.currentMessageInput;
                        n.state.currentMessageInput.length > 0 && !n.state.currentMessageInput.endsWith(" ") && (t += " "), t += e + " ", n.setState({
                            currentMessageInput: t
                        }), n.autocompleteInputRef.setValue(t)
                    }, n.onShowMemberList = function() {
                        n.state.showCard !== Xt.None && n.setState({
                            showCard: Xt.None
                        }), n.props.showMemberList()
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            return {
                                showCard: e.showCard !== Xt.Emotes ? Xt.Emotes : Xt.None
                            }
                        })
                    }, n.syncMembers = function() {
                        n.props.activeMembers.isDirty && n.setState({
                            roomMembers: n.props.activeMembers.getActiveMembers()
                        })
                    }, n.setChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInputRef = e
                    }, n.state = {
                        roomMembers: t.activeMembers.getActiveMembers(),
                        currentMessageInput: "",
                        showCard: Xt.None
                    }, n
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.syncMembersHandle = setInterval(this.syncMembers, 250)
                }, t.prototype.componentWillUnmount = function() {
                    this.syncMembersHandle && (clearInterval(this.syncMembersHandle), this.syncMembersHandle = 0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    if (t.currentMessageInput !== this.state.currentMessageInput && e.bitsConfig) {
                        var n = !1;
                        Object(Lt.c)(t.currentMessageInput, e.bitsConfig).forEach(function(e) {
                            e.type === Se.a.Emote && (n = !0)
                        }), n ? (this.setState({
                            showCard: Xt.Bits
                        }), Object(At.h)({
                            actionName: At.a.CheeringInRoom,
                            displayedBalance: 0
                        })) : this.setState({
                            showCard: Xt.None
                        })
                    }
                }, t.prototype.render = function() {
                    var e = [l.createElement(Ft.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle
                    })];
                    return l.createElement(w._7, {
                        className: "room-input",
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, l.createElement(w._7, {
                        position: w._14.Relative,
                        zIndex: w._57.Default
                    }, this.state.showCard === Xt.Bits && l.createElement(Gt, null), l.createElement(Ft.c, {
                        channelOwnerID: this.props.channelID,
                        onClickEmote: this.onClickEmote,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === Xt.Emotes
                    }), l.createElement(xt.b, {
                        componentType: xt.a.TextArea,
                        suggestionSource: xt.c.Chat,
                        onValueUpdate: this.onMessageValueUpdate,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setChatInputRef,
                        refDelegate: this.setAutocompleteInputRef,
                        noResize: !0,
                        paddingRight: 30 * e.length,
                        placeholder: Object(c.d)("Send a message", "RoomInput"),
                        "data-test-selector": "room-input-textarea"
                    }, l.createElement(xt.d, {
                        emotes: this.props.emotes
                    }), l.createElement(Wt, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        roomMembers: this.state.roomMembers
                    })), l.createElement(w._7, {
                        position: w._14.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e)), l.createElement(w._7, {
                        display: w.Q.Flex,
                        justifyContent: w._6.Between,
                        margin: {
                            top: 1
                        }
                    }, l.createElement(w._7, {
                        display: w.Q.Flex,
                        flexDirection: w.S.Row
                    }, l.createElement(y.a, null, l.createElement(w.v, {
                        icon: w._21.Gear,
                        ariaLabel: Object(c.d)("Room Settings", "RoomInput")
                    }), l.createElement(w.p, {
                        direction: w.q.Top,
                        noTail: !0,
                        offsetY: "11px"
                    }, l.createElement(en, {
                        roomID: this.props.roomID,
                        isPopout: this.props.isPopout,
                        sendMessage: this.props.sendMessage
                    }))), l.createElement(w.v, {
                        ariaLabel: Object(c.d)("Member List", "RoomInput"),
                        icon: w._21.ViewerList,
                        onClick: this.onShowMemberList
                    })), l.createElement(w.u, {
                        onClick: this.handleMessageSend,
                        "data-test-selector": "room-input-button"
                    }, Object(c.d)("Chat", "RoomInput"))))
                }, t
            }(l.Component),
            an = Object(d.compose)(Object(k.d)("RoomInput", {
                autoReportInteractive: !0
            }))(nn),
            rn = n("zMie"),
            on = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data && this.props.data.loading) return l.createElement(w._7, null);
                    if (this.props.data && this.props.data.error) return l.createElement(w._7, null);
                    if (this.props.data && !this.props.allowedToChat) {
                        var e = this.props.data.room,
                            t = Object(c.d)("You are viewing {displayName}’s #{roomName}. You have to subscribe to chat here! Subscribe above the player.", {
                                displayName: e.owner.displayName,
                                roomName: e.name
                            }, "RoomInteractionPane");
                        return l.createElement(w._7, {
                            padding: {
                                bottom: 2,
                                x: 2
                            }
                        }, l.createElement(w._30, {
                            padding: {
                                bottom: 1,
                                x: 2
                            },
                            borderTop: !0
                        }), l.createElement(w._7, {
                            padding: {
                                bottom: 1
                            }
                        }, l.createElement(w._7, {
                            display: w.Q.Flex,
                            flexDirection: w.S.Column,
                            fullHeight: !0,
                            justifyContent: w._6.Center
                        }, l.createElement(w.P, {
                            "data-test-selector": "subscription-upsell",
                            color: w.J.Alt
                        }, t))), l.createElement(w.u, {
                            type: w.A.Hollow,
                            onClick: this.props.handleStreamChatClick
                        }, Object(c.d)("Back to Stream Chat", "RoomInteractionPane")))
                    }
                    return l.createElement(w._7, {
                        "data-test-selector": "interaction-enabled"
                    }, l.createElement(an, {
                        activeMembers: this.props.activeMembers,
                        bitsConfig: this.props.bitsConfig,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        isPopout: this.props.isPopout,
                        roomID: this.props.roomID,
                        sendMessage: this.props.sendMessage,
                        showMemberList: this.props.showMemberList
                    }))
                }, t = s.__decorate([Object(m.a)(rn, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    },
                    skip: function(e) {
                        return e.allowedToChat
                    }
                }), Object(k.d)("RoomInteractionPane")], t)
            }(l.Component),
            sn = n("Th9g"),
            ln = n("g7wA"),
            dn = (n("eDxU"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleUsernameClick = function(e) {
                        t.props.onUsernameClick(t.props.sender.login, Dt.a.room_message, t.props.roomID, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.sender,
                        t = [l.createElement("span", {
                            key: "username-display",
                            className: "message-author__display-name",
                            "data-test-selector": "message-username",
                            style: {
                                color: e.chatColor
                            }
                        }, e.displayName)];
                    return Object(Ut.b)(e.displayName) || t.push(l.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.chatColor
                        },
                        className: "message-author__intl-login",
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.login + ")")), l.createElement("button", {
                        onClick: this.handleUsernameClick,
                        className: "message-author__username"
                    }, l.createElement("span", {
                        key: e.id + "-messageauthor"
                    }, t))
                }, t
            }(l.Component)),
            cn = (n("G/62"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanUser = function() {
                        t.props.sendMessage("/ban " + t.props.message.sender.login)
                    }, t.onTimeoutUser = function() {
                        t.props.sendMessage("/timeout " + t.props.message.sender.login)
                    }, t.onUnbanUser = function() {
                        t.props.sendMessage("/unban " + t.props.message.sender.login)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.deletedAt,
                        t = this.onBanUser,
                        n = w._21.Ban,
                        i = Object(c.d)("Ban", "RoomMessageModIcons");
                    return e && (t = this.onUnbanUser, n = w._21.FollowCheck, i = Object(c.d)("Unban", "RoomMessageModIcons")), l.createElement(w._7, {
                        display: w.Q.InlineFlex,
                        margin: {
                            right: .5
                        },
                        className: "room-message-mod-icons"
                    }, l.createElement(w._2, {
                        color: w.J.Alt2,
                        display: w.Q.InlineFlex
                    }, l.createElement("button", {
                        className: "room-message-mod-icons__mod-icon",
                        "data-test-selector": "default-action-button",
                        onClick: t
                    }, l.createElement(w._47, {
                        label: i
                    }, l.createElement(w._20, {
                        width: 16,
                        height: 16,
                        type: w._22.Inherit,
                        asset: n
                    })))), l.createElement(w._2, {
                        color: w.J.Alt2,
                        display: w.Q.InlineFlex
                    }, l.createElement("button", {
                        className: "room-message-mod-icons__mod-icon",
                        "data-test-selector": "timeout-action-button",
                        onClick: this.onTimeoutUser
                    }, l.createElement(w._47, {
                        label: Object(c.d)("Timeout", "RoomMessageModIcons")
                    }, l.createElement(w._20, {
                        width: 16,
                        height: 16,
                        type: w._22.Inherit,
                        asset: w._21.Timeout
                    })))))
                }, t
            }(l.Component)),
            un = (n("Ecgh"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        shouldShowDeletedBody: !1
                    }, t.showDeleted = function(e) {
                        e && e.preventDefault(), t.setState({
                            shouldShowDeletedBody: !0
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.shouldComponentUpdate = function(e, t) {
                    return e.showModerationIcons !== this.props.showModerationIcons || (e.showTimestamps !== this.props.showTimestamps || (t.shouldShowDeletedBody !== this.state.shouldShowDeletedBody || (e.hasModPermissions !== this.props.hasModPermissions || e.message.deletedAt !== this.props.message.deletedAt)))
                }, t.prototype.render = function() {
                    var e = this.props.message.sender.displayBadges,
                        t = {},
                        n = ": ";
                    return this.props.message.content.text.startsWith(we) && (t = {
                        color: this.props.message.sender.chatColor
                    }, n = " "), l.createElement(w._7, {
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement("div", {
                        id: this.props.message.id,
                        className: "room-message",
                        style: t
                    }, this.renderTimestamp(), this.renderModerationIcons(), l.createElement(Ie.b, {
                        badgeSets: this.props.badgeSets,
                        badgesToRender: e
                    }), l.createElement(dn, {
                        roomID: this.props.roomID,
                        messageID: this.props.message.id,
                        sender: this.props.message.sender,
                        onUsernameClick: this.props.onUsernameClick
                    }), l.createElement("span", {
                        key: "separator"
                    }, n), this.renderMessageBody()))
                }, t.prototype.renderMessageBody = function() {
                    if (!this.props.message.deletedAt || this.state.shouldShowDeletedBody) return this.getMessageParts();
                    var e = Object(c.d)("message deleted", "RoomMessage"),
                        t = this.props.hasModPermissions ? l.createElement(w.N, {
                            onClick: this.showDeleted,
                            "data-test-selector": "show-deleted"
                        }, "<" + e + ">") : "<" + e + ">";
                    return l.createElement("span", {
                        key: "deleted",
                        className: "room-message--deleted",
                        "data-test-selector": "deleted-message"
                    }, t)
                }, t.prototype.getMessageParts = function() {
                    var e, t, n, i, a = this.props.message.sender,
                        r = a.displayName,
                        o = a.login;
                    return Object(ln.j)((e = this.props.message, t = e.content.text.startsWith(we), n = [], i = /^(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w./@#%&()\-+=:?~]*)?)$/g, e.content.fragments.forEach(function(a, r) {
                        var o = a.content;
                        if (o && o.__typename === Ne.EMOTE) {
                            var s = o;
                            n.push({
                                type: Se.a.Emote,
                                content: {
                                    alt: a.text,
                                    images: {
                                        themed: !1,
                                        sources: {
                                            "1x": Object(b.f)(s.emoteID, 1),
                                            "2x": Object(b.f)(s.emoteID, 2),
                                            "4x": Object(b.f)(s.emoteID, 4)
                                        }
                                    }
                                }
                            })
                        } else if (o && o.__typename === Ne.MENTION) {
                            var l = o;
                            n.push({
                                type: Se.a.Mention,
                                content: {
                                    sender: e.sender.login,
                                    recipient: l.login
                                }
                            })
                        } else if (i.test(a.text)) {
                            var d = a.text.split(/\s+/);
                            d.forEach(function(e, t) {
                                i.lastIndex = 0;
                                var a = i.exec(e);
                                if (a) {
                                    var r = a.index;
                                    0 !== r && n.push({
                                        type: Se.a.Text,
                                        content: "" + e.slice(0, r)
                                    });
                                    var o = i.lastIndex,
                                        s = (a[1] ? "" : "https://") + e.slice(r, o);
                                    if (Object(Ee.a)(s)) {
                                        var l = Object(Ee.b)(s);
                                        n.push({
                                            type: Se.a.VideoLink,
                                            content: {
                                                id: l,
                                                url: s,
                                                displayText: e.slice(r, o)
                                            }
                                        })
                                    } else n.push({
                                        type: Se.a.Link,
                                        content: {
                                            displayText: e.slice(r, o),
                                            url: s
                                        }
                                    });
                                    var c = e.slice(o),
                                        u = "";
                                    t < d.length - 1 && (u = " "), c && n.push({
                                        type: Se.a.Text,
                                        content: "" + c + u
                                    })
                                } else {
                                    var m = n.length && n[n.length - 1];
                                    if (u = "", t < d.length - 1 && (u = " "), m && m.type === Se.a.Text) m.content += e + u;
                                    else {
                                        var p = "";
                                        t && (p = " "), n.push({
                                            type: Se.a.Text,
                                            content: p + e + u
                                        })
                                    }
                                }
                            })
                        } else {
                            var c = a.text;
                            t && 0 === r && c.startsWith(we) && (c = c.substr(3)), n.push({
                                type: Se.a.Text,
                                content: c
                            })
                        }
                    }), n), r, o)
                }, t.prototype.renderTimestamp = function() {
                    return this.props.showTimestamps ? l.createElement("span", {
                        key: "timestamp",
                        className: "room-message__timestamp",
                        "data-test-selector": "room-message-timestamp"
                    }, Object(ln.c)(new Date(this.props.message.sentAt))) : null
                }, t.prototype.renderModerationIcons = function() {
                    return this.props.showModerationIcons && this.props.hasModPermissions ? l.createElement(cn, {
                        channelID: this.props.channelID,
                        message: this.props.message,
                        sendMessage: this.props.sendMessage
                    }) : null
                }, t
            }(l.Component)),
            mn = (n("DS3o"), function(e) {
                return l.createElement(w._30, {
                    className: "room-system-message",
                    color: w.J.Alt2,
                    key: e.message.id,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, l.createElement(w.P, null, e.message.text))
            }),
            pn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    switch (this.props.message.kind) {
                        case ce.SystemMessageEvent:
                            return l.createElement(mn, {
                                message: this.props.message
                            });
                        case ce.RoomMessageEvent:
                            return l.createElement(un, {
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                badgeSets: this.props.badgeSets,
                                channelID: this.props.channelID,
                                roomID: this.props.roomID,
                                hasModPermissions: this.props.hasModPermissions,
                                message: this.props.message,
                                sendMessage: this.props.sendMessage,
                                onUsernameClick: this.props.onUsernameClick
                            });
                        default:
                            return null
                    }
                }, t
            }(l.Component),
            hn = (n("AsjC"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            gn = 10,
            fn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0,
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        if (t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type)) {
                            var n = t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight;
                            n <= gn && !t.state.isAutoScrolling ? t.setState({
                                isAutoScrolling: !0
                            }) : n > gn && t.state.isAutoScrolling && t.setState({
                                isAutoScrolling: !1
                            })
                        }
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom), t.props.loadNewest()
                    }, t.loadOlder = function() {
                        return t.isLoadingOlder = !0, t.props.loadOlder()
                    }, t.loadNewer = function() {
                        return t.isLoadingOlder = !1, t.props.loadNewer()
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.setState({
                        disableInfiniteTrigger: !1
                    }), this.scroll && this.scroll.scrollContent && (this.scrollToBottom(), hn.forEach(function(t) {
                        e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    }))
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    hn.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.isBulkLoad && this.isLoadingOlder && this.scroll && this.scroll.scrollContent && (this.prevScrollTop = this.scroll.scrollContent.scrollTop), e.isBulkLoad && !this.isLoadingOlder && this.scroll && this.scroll.scrollContent) {
                        var t = this.props.messages[this.props.messages.length - 1] && this.props.messages[this.props.messages.length - 1].id;
                        if (t && document.getElementById(t)) {
                            var n = document.getElementById(t).offsetTop;
                            this.prevScrollTop = this.scroll.scrollContent.scrollTop - n
                        } else this.prevScrollTop = this.scroll.scrollContent.scrollTop
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    if (e.messages !== this.props.messages && (this.state.isAutoScrolling && this.scrollToBottom(), this.props.isBulkLoad && e.messages && this.props.messages))
                        if (this.isLoadingOlder) {
                            var t = e.messages[0] && e.messages[0].id,
                                n = this.props.messages[0] && this.props.messages[0].id;
                            if (t && n && t !== n) {
                                var i = document.getElementById(t);
                                if (i && this.scroll && this.scroll.scrollContent) {
                                    var a = i.offsetTop;
                                    this.scroll.scrollContent.scrollTop = this.prevScrollTop + a
                                }
                            }
                        } else {
                            var r = e.messages[e.messages.length - 1] && e.messages[e.messages.length - 1].id,
                                o = this.props.messages[this.props.messages.length - 1] && this.props.messages[this.props.messages.length - 1].id;
                            if (r && o && r !== o) {
                                var s = document.getElementById(r);
                                if (s && this.scroll && this.scroll.scrollContent) {
                                    a = s.offsetTop;
                                    this.scroll.scrollContent.scrollTop = this.prevScrollTop + a
                                }
                            }
                        }
                }, t.prototype.render = function() {
                    var e = this.getRoomLines();
                    return l.createElement(w._7, {
                        className: "room-list",
                        display: w.Q.Flex,
                        flexDirection: w.S.Column,
                        flexWrap: w.T.NoWrap,
                        overflow: w._10.Hidden,
                        flexGrow: 1
                    }, l.createElement(wt.b, {
                        className: "room-list__lines",
                        scrollRef: this.saveScrollRef
                    }, l.createElement(w._7, {
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: w._10.Hidden,
                        padding: {
                            bottom: 1
                        }
                    }, l.createElement(wt.a, {
                        "data-test-selector": "backward-infinite-scroll",
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadOlder,
                        pixelThreshold: 400,
                        orientation: sn.b.Down,
                        contentLength: e.length,
                        forceLoadMoreContent: this.props.hasOlderLeft,
                        requestCap: 2
                    }), e, l.createElement(wt.a, {
                        "data-test-selector": "forward-infinite-scroll",
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadNewer,
                        pixelThreshold: 400,
                        orientation: sn.b.Up,
                        contentLength: e.length,
                        forceLoadMoreContent: this.props.hasNewerLeft,
                        requestCap: 2
                    }))), l.createElement(w._7, {
                        className: "room-list__more-messages-placeholder",
                        position: w._14.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : l.createElement(w._30, {
                        alignItems: w.c.Center,
                        attachBottom: !0,
                        display: w.Q.Flex,
                        fullWidth: !0,
                        background: w.m.Overlay,
                        justifyContent: w._6.Center,
                        position: w._14.Absolute
                    }, l.createElement(w.u, {
                        onClick: this.handleClickMoreMessages,
                        overlay: !0,
                        type: w.A.Text,
                        fullWidth: !0
                    }, Object(c.d)("More messages below.", "RoomList")))
                }, t.prototype.scrollToBottom = function() {
                    this.scroll.scrollToBottom()
                }, t.prototype.getRoomLines = function() {
                    var e = this,
                        t = this.props.messages;
                    return 0 === t.length && (t = [be(Object(c.d)("Welcome to the chat room!", "RoomList"))]), t.map(function(t) {
                        return l.createElement(pn, {
                            key: t.id,
                            badgeSets: e.props.badgeSets,
                            channelID: e.props.channelID,
                            roomID: e.props.roomID,
                            hasModPermissions: e.props.hasModPermissions,
                            message: t,
                            showModerationIcons: e.props.showModerationIcons,
                            showTimestamps: e.props.showTimestamps,
                            sendMessage: e.props.sendMessage,
                            onUsernameClick: e.props.onUsernameClick
                        })
                    })
                }, t
            }(l.Component);
        var vn = n("Ucyv"),
            bn = 200,
            kn = function() {
                return function(e) {
                    var t = this;
                    this.resetWithRoomOwnerID = function(e) {
                        t.activeMemberIDs = new Set, t.activeMembers = {}, t.roomOwnerID = e, t.currentUserID = null, t.isDirty = !0
                    }, this.getActiveMembers = function() {
                        return t.isDirty = !1, Object.keys(t.activeMembers).map(function(e) {
                            return t.activeMembers[e]
                        })
                    }, this.setCurrentUserID = function(e) {
                        t.currentUserID = e, t.activeMemberIDs.has(e) && (t.isDirty = !0, t.removeActiveMember(e))
                    }, this.consumeRoomMessage = function(e) {
                        t.handleActiveMember(e.sender)
                    }, this.handleActiveMember = function(e) {
                        e.id !== t.roomOwnerID && e.id !== t.currentUserID && (t.activeMemberIDs.has(e.id) ? (t.activeMemberIDs.delete(e.id), t.addActiveMember(e)) : (t.addActiveMember(e), t.trimActiveMembers(), t.isDirty = !0))
                    }, this.addActiveMember = function(e) {
                        t.activeMemberIDs.add(e.id), t.activeMembers[e.id] = e
                    }, this.removeActiveMember = function(e) {
                        t.activeMemberIDs.delete(e), delete t.activeMembers[e]
                    }, this.trimActiveMembers = function() {
                        if (!(t.activeMemberIDs.size <= bn))
                            for (var e = t.activeMemberIDs.size - bn, n = t.activeMemberIDs.values(), i = 0; i < e; i++) {
                                var a = n.next().value;
                                t.removeActiveMember(a)
                            }
                    }, this.resetWithRoomOwnerID(e)
                }
            }(),
            yn = n("gv4B"),
            _n = n("/eRw"),
            Cn = (n("TT/W"), ["137512364", "188864445", "188863650", "190160460", "192718746"]),
            Sn = 3e4,
            En = 6e4,
            Nn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        showMemberList: !1,
                        hasSeenFirstTimeRoomTopic: !1
                    }, n.hasQueuedUpdate = !1, n.isLastReadAtThrottled = !1, n.lastReadAtThrottleTimer = null, n.renderPlaceholders = function() {
                        return l.createElement(w._30, {
                            className: "room-pane",
                            display: w.Q.Flex,
                            flexDirection: w.S.Column,
                            flexWrap: w.T.NoWrap,
                            position: w._14.Relative,
                            flexGrow: 1,
                            fullHeight: !0,
                            overflow: w._10.Hidden,
                            color: w.J.Base,
                            background: w.m.Alt2,
                            borderLeft: !0
                        }, l.createElement(Et, null))
                    }, n.sendMessage = function(e) {
                        if (e && 0 !== e.length && n.props.sessionUser) {
                            var t = Object(Le.l)(e, n.props.channel.login);
                            if (t.command)
                                if (t.handled) t.result && t.result.deferred && t.result.deferred.then(function(e) {
                                    var t = e.notice;
                                    t && n.props.onRoomEvent(be(t))
                                });
                                else {
                                    var i = Object(c.d)("Unrecognized command: /{command}", {
                                        command: t.command
                                    }, "RoomPane");
                                    n.props.onRoomEvent(be(i))
                                }
                            else n.sendRoomMessage(e);
                            Object(_t.a)({
                                channelID: n.props.channelID,
                                channelLogin: n.props.channel.login,
                                isHostMode: n.props.isHostMode,
                                roomID: n.props.roomID,
                                roomMinimumRole: n.props.minimumAllowedRole,
                                player: n.props.isPopout ? yt.a.Embed : yt.a.Web,
                                subOnlyMode: n.props.minimumAllowedRole === V.b.Subscriber
                            });
                            for (var a = 0, r = Object(b.c)(e, n.props.sessionUser.displayName, !1); a < r.length; a++) {
                                var o = r[a];
                                o.type === Se.a.Mention && o.content.recipient !== o.content.sender && Object(Ct.a)({
                                    channelLogin: n.props.channel.login,
                                    isHostMode: n.props.isHostMode,
                                    mentionedUserDisplayName: o.content.recipient,
                                    roomID: n.props.roomID,
                                    roomMinimumRole: n.props.minimumAllowedRole,
                                    userLogin: n.props.sessionUser.login
                                })
                            }
                        }
                    }, n.sendRoomMessage = function(e) {
                        return s.__awaiter(n, void 0, void 0, function() {
                            var t, n, i, a, r, o, l, d, c;
                            return s.__generator(this, function(u) {
                                switch (u.label) {
                                    case 0:
                                        return [4, this.props.sendRoomMessage(Object(E.a)({
                                            roomID: this.props.roomID,
                                            message: e
                                        }))];
                                    case 1:
                                        return t = u.sent(), n = t.data.sendRoomMessage, i = n.message, a = n.error, null !== i ? (r = {
                                            sender: s.__assign({}, i.sender, {
                                                displayBadges: this.props.user.displayBadges
                                            })
                                        }, o = s.__assign({}, i, r), this.props.onRoomEvent(ve(o))) : null !== a && (l = a.code, d = a.remainingDurationSeconds, c = void 0, c = d ? Q(l, {
                                            remainingDurationSeconds: d
                                        }) : Q(l), this.props.onRoomEvent(be(c))), [2]
                                }
                            })
                        })
                    }, n.showMemberList = function() {
                        n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                            showMemberList: !0
                        })
                    }, n.closeMemberList = function() {
                        n.setState({
                            showMemberList: !1
                        })
                    }, n.hasModPermissions = function() {
                        var e = n.props,
                            t = e.channel,
                            i = e.channelID,
                            a = e.sessionUser,
                            r = e.user;
                        return !!a && (r.roles.isStaff || r.roles.isGlobalMod || r.roles.isSiteAdmin || a.id === i || !!t.self && t.self.isModerator)
                    }, n.onUpdateLastReadAt = function() {
                        var e;
                        Object(he.d)(Object(he.c)(c.o.apollo.client.link, s.__assign({
                            query: vn
                        }, (e = n.props.roomID, s.__assign({}, Object(E.a)({
                            lastReadAt: (new Date).toISOString(),
                            roomID: e
                        }))))))
                    }, n.throttleLastReadAtUpdate = function() {
                        n.onUpdateLastReadAt(), n.isLastReadAtThrottled = !0, n.lastReadAtThrottleTimer = setTimeout(n.unthrottleLastReadAtUpdate, Sn)
                    }, n.unthrottleLastReadAtUpdate = function() {
                        n.hasQueuedUpdate ? (n.throttleLastReadAtUpdate(), n.hasQueuedUpdate = !1) : n.isLastReadAtThrottled = !1
                    }, n.activeMembers = new kn(t.channelID), t.sessionUser && n.activeMembers.setCurrentUserID(t.sessionUser.id), n.trackingIntervalHandle = setInterval(function() {
                        Object(St.c)({
                            channelID: n.props.channelID,
                            channelLogin: n.props.channel.login,
                            clientTime: Date.now(),
                            isHostMode: n.props.isHostMode,
                            roomID: n.props.roomID,
                            roomMinimumRole: n.props.minimumAllowedRole
                        })
                    }, En), n
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t, n, i = this,
                        a = this.props;
                    !e.loading && ((e.isFirstTimeVisit || Cn.includes(this.props.channelID)) && e.roomTopic.length > 0 && !this.state.hasSeenFirstTimeRoomTopic || void 0 !== this.props.roomTopic && this.props.roomTopic !== e.roomTopic) && (this.setState({
                        hasSeenFirstTimeRoomTopic: !0
                    }), this.props.onRoomEvent((t = e.roomTopic, n = Object(c.d)('Broadcaster set this room\'s topic to "{topic}"', {
                        topic: t
                    }, "RoomTopic"), {
                        kind: ce.SystemMessageEvent,
                        id: Object(fe.a)("initialRoomTopicMessage"),
                        text: n
                    }))), e.sessionUser && a.sessionUser !== e.sessionUser && this.activeMembers.setCurrentUserID(e.sessionUser.id), a.channelID !== e.channelID && this.activeMembers.resetWithRoomOwnerID(e.channelID);
                    var r = a.roomEvents.length;
                    (this.props.loading && !e.loading || r !== e.roomEvents.length) && a.roomEvents[r - 1] === e.roomEvents[r - 1] && e.roomEvents.slice(r).forEach(function(e) {
                        e.kind === ce.RoomMessageEvent && i.activeMembers.consumeRoomMessage(ve(e))
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    (e.loading && !this.props.loading || e.roomEvents.length !== this.props.roomEvents.length) && (this.isLastReadAtThrottled ? this.hasQueuedUpdate = !0 : this.throttleLastReadAtUpdate())
                }, t.prototype.componentWillUnmount = function() {
                    this.lastReadAtThrottleTimer && clearTimeout(this.lastReadAtThrottleTimer), this.trackingIntervalHandle && clearInterval(this.trackingIntervalHandle)
                }, t.prototype.render = function() {
                    if (this.props.loading || !this.props.bufferLoaded) return this.renderPlaceholders();
                    if (this.props.error) return l.createElement(w._7, null);
                    var e = this.state.showMemberList && l.createElement(Mt, {
                            roomID: this.props.roomID,
                            closeMemberList: this.closeMemberList
                        }),
                        t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                        n = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {};
                    return l.createElement(w._30, {
                        className: "room-pane",
                        display: w.Q.Flex,
                        flexDirection: w.S.Column,
                        flexWrap: w.T.NoWrap,
                        position: w._14.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: w._10.Hidden,
                        color: w.J.Base,
                        background: w.m.Alt2,
                        borderLeft: !0
                    }, l.createElement(Pe, {
                        channelID: this.props.channelID
                    }), l.createElement(We, null), l.createElement(qe, {
                        roomID: this.props.roomID
                    }), l.createElement($e, null), l.createElement(Ke.a, {
                        currentUserLogin: this.props.sessionUser && this.props.sessionUser.login
                    }), l.createElement(Ze, {
                        sendMessage: this.sendRoomMessage
                    }), l.createElement(ut, {
                        channelID: this.props.channelID
                    }), l.createElement(pt, {
                        roomID: this.props.roomID
                    }), l.createElement(ft, {
                        roomID: this.props.roomID
                    }), l.createElement(vt.a, {
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        userLogin: this.props.user.login,
                        userID: this.props.user.id,
                        emoteMap: n
                    }), l.createElement(bt.a, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }), l.createElement(fn, {
                        badgeSets: this.props.badgeSets,
                        channelID: this.props.channelID,
                        roomID: this.props.roomID,
                        hasModPermissions: this.hasModPermissions(),
                        isBulkLoad: this.props.isBulkLoad,
                        loadOlder: this.props.loadOlder,
                        loadNewer: this.props.loadNewer,
                        messages: this.props.roomEvents,
                        hasOlderLeft: this.props.hasOlderLeft,
                        hasNewerLeft: this.props.hasNewerLeft,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        sendMessage: this.sendMessage,
                        onUsernameClick: this.props.onUsernameClick,
                        loadNewest: this.props.loadNewest
                    }), e, l.createElement(on, {
                        activeMembers: this.activeMembers,
                        allowedToChat: this.props.allowedToChat,
                        bitsConfig: this.props.bitsConfig,
                        channelDisplayName: this.props.channel.displayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channel.login,
                        emotes: t,
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        isPopout: this.props.isPopout,
                        roomID: this.props.roomID,
                        sendMessage: this.sendMessage,
                        showMemberList: this.showMemberList
                    }), l.createElement(w._7, {
                        className: "room-pane__viewer-card",
                        fullHeight: !0,
                        fullWidth: !0,
                        position: w._14.Absolute,
                        zIndex: w._57.Default
                    }, l.createElement(kt.a, {
                        isPopout: this.props.isPopout,
                        isEmbedded: !1,
                        onSendMessage: this.sendMessage,
                        channelID: this.props.channelID
                    })))
                }, t
            }(l.Component),
            wn = Object(d.compose)(Object(m.a)(yn, {
                props: function(e) {
                    var t;
                    e.data && e.data.room && e.data.room.owner.cheer && (t = Object(Te.a)(e.data.room.owner.cheer.emotes || []));
                    var n = new Ie.c([]);
                    return e.data && e.data.badges && e.data.room && e.data.room.owner.broadcastBadges && (n = new Ie.c(e.data.badges, e.data.room.owner.broadcastBadges, e.data.room.owner.login)), {
                        error: e.data && e.data.error,
                        loading: !e.data || e.data.loading,
                        badgeSets: n,
                        bitsConfig: t,
                        channel: e.data && e.data.room && e.data.room.owner,
                        roomTopic: e.data && e.data.room && e.data.room.topic,
                        user: e.data && e.data.user,
                        isFirstTimeVisit: e.data && e.data.room && null === e.data.room.self.lastReadAt,
                        minimumAllowedRole: e.data && e.data.room && e.data.room.minimumAllowedRole
                    }
                },
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            channelID: e.channelID,
                            roomID: e.roomID,
                            isLoggedIn: e.isLoggedIn,
                            userID: e.sessionUser && e.sessionUser.id
                        }
                    }
                }
            }), Object(Oe.a)(), Object(m.a)(_n, {
                name: "sendRoomMessage"
            }), Object(k.d)("RoomPane"))(Nn),
            Dn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onRoomBufferUpdate = function() {
                        n.syncBufferHandle || (n.syncBufferHandle = setTimeout(n.syncBufferedMessages, 0))
                    }, n.onInitialLoad = function() {
                        n.syncBufferedMessages(!0)
                    }, n.syncBufferedMessages = function(e) {
                        void 0 === e && (e = !1), n.roomBuffer && n.roomBuffer.isDirty && (n.state.bufferLoaded || e) && n.setState({
                            bufferLoaded: n.state.bufferLoaded || e,
                            roomEvents: n.roomBuffer.toArray(),
                            hasOlderLeft: n.roomBuffer.hasOlderLeft,
                            hasNewerLeft: n.roomBuffer.hasNewerLeft,
                            isBulkLoad: n.roomBuffer.isBulkLoad
                        }, function() {
                            n.clearBufferHandle()
                        })
                    }, n.clearBufferHandle = function() {
                        n.syncBufferHandle && (clearTimeout(n.syncBufferHandle), n.syncBufferHandle = 0)
                    }, n.roomBuffer = new Ce(t.roomID, t.channelID, n.onRoomBufferUpdate, n.onInitialLoad), n.roomService = new De(t.roomID, t.channelID, n.roomBuffer.consumeRoomEvent), n.roomBuffer.setBlockedUsers(t.blockedUsers), n.state = {
                        roomEvents: [],
                        isBulkLoad: !1,
                        bufferLoaded: !1,
                        hasOlderLeft: !0,
                        hasNewerLeft: !0
                    }, n
                }
                return s.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.blockedUsers !== e.blockedUsers && this.roomBuffer.setBlockedUsers(e.blockedUsers)
                }, t.prototype.componentWillUnmount = function() {
                    this.roomService.unsubscribe(), this.clearBufferHandle()
                }, t.prototype.componentDidMount = function() {
                    this.roomBuffer.loadOlder()
                }, t.prototype.render = function() {
                    return l.createElement(wn, s.__assign({}, this.props, {
                        hasOlderLeft: this.state.hasOlderLeft,
                        hasNewerLeft: this.state.hasNewerLeft,
                        isBulkLoad: this.state.isBulkLoad,
                        bufferLoaded: this.state.bufferLoaded,
                        loadNewer: this.roomBuffer.loadNewer,
                        loadOlder: this.roomBuffer.loadOlder,
                        onRoomEvent: this.roomBuffer.consumeRoomEvent,
                        roomEvents: this.state.roomEvents,
                        closeRoomPicker: this.props.closeRoomPicker,
                        loadNewest: this.roomBuffer.loadNewest
                    }))
                }, t
            }(l.Component);
        var On = Object(d.compose)(Object(i.b)(function(e) {
                return {
                    sessionUser: Object(r.c)(e),
                    isLoggedIn: Object(r.d)(e),
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps
                }
            }, function(e) {
                return Object(a.b)({
                    onUsernameClick: pe.d
                }, e)
            }), Object(me.a)())(Dn),
            In = n("CHV0"),
            Tn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    c.k.subscribe({
                        topic: Object(g.f)(this.props.channelID),
                        onMessage: function(t) {
                            t.type === h.PubsubMessageType.ChatRoomDeleted && e.props.roomID === t.data.room.room_id && e.props.onDelete && e.props.onDelete()
                        }
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.data;
                    !t || !e.data || t.loading || e.data.loading || e.data.room.isPreviewable === t.room.isPreviewable && e.data.room.minimumAllowedRole === t.room.minimumAllowedRole || t.refetch()
                }, t.prototype.render = function() {
                    return this.props.data ? this.props.data.loading ? l.createElement(w._7, null) : this.props.data.error || !this.props.data.room || this.props.data.room.minimumAllowedRole === V.b.Moderator && !this.props.data.room.self.permissions.readMessages ? l.createElement(ue, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: oe.BadPermissions
                    }) : this.props.isDeleted ? l.createElement(ue, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: oe.Deleted
                    }) : this.props.data.room.self.permissions.readMessages || this.props.data.room.minimumAllowedRole !== V.b.Subscriber ? this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? l.createElement(ue, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: oe.Banned
                    }) : l.createElement(On, {
                        key: this.props.roomID,
                        allowedToChat: this.props.data.room.self.permissions.sendMessages,
                        channelID: this.props.channelID,
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.props.closeRoomPicker,
                        isHostMode: this.props.isHostMode
                    }) : l.createElement(ue, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: oe.NoPreview
                    }) : null
                }, t
            }(l.Component),
            Mn = Object(d.compose)(Object(m.a)(In, {
                options: function(e) {
                    return {
                        variables: {
                            roomID: e.roomID,
                            channelID: e.channelID,
                            userID: e.sessionUser && e.sessionUser.id
                        }
                    }
                },
                skip: function(e) {
                    return !e.sessionUser
                }
            }), Object(p.a)(function(e) {
                return {
                    query: In,
                    variables: {
                        roomID: e.roomID,
                        channelID: e.channelID,
                        userID: e.sessionUser && e.sessionUser.id
                    },
                    topic: Object(g.e)(e.roomID),
                    type: h.PubsubMessageType.ChatRoomUpdated,
                    mutator: function(e, t) {
                        return e.type === h.PubsubMessageType.ChatRoomUpdated && (t.room.name = e.data.room.name, t.room.topic = e.data.room.topic, t.room.isPreviewable = e.data.room.is_previewable, t.room.minimumAllowedRole = e.data.room.minimum_allowed_role), t
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: In,
                    variables: {
                        roomID: e.roomID,
                        channelID: e.channelID,
                        userID: e.sessionUser && e.sessionUser.id
                    },
                    topic: Object(g.g)("" + (e.sessionUser && e.sessionUser.id)),
                    type: h.PubsubMessageType.ChatRoomsRoomViewUpdated,
                    mutator: function(t, n) {
                        return t.data.room_view.room.room_id === e.roomID && (n.room.self.permissions.readMessages = t.data.room_view.permissions.read_messages, n.room.self.permissions.sendMessages = t.data.room_view.permissions.send_messages, n.user.self.isModerator = t.data.room_view.permissions.moderate), n
                    }
                }
            }), Object(k.d)("Room"))(Tn);
        var Rn = Object(i.b)(function(e) {
                return {
                    sessionUser: Object(r.c)(e)
                }
            })(Mn),
            xn = n("M8zv"),
            Ln = n.n(xn),
            An = n("cxb0"),
            Fn = n("Oioc"),
            jn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        var e = s.__assign({}, Object(E.a)({
                            channelID: t.props.channelID
                        }), {
                            optimisticResponse: {
                                joinChannelRooms: {
                                    __typename: "JoinChannelRoomsPayload",
                                    channel: {
                                        self: {
                                            isChannelMember: !0,
                                            __typename: "UserSelfConnection"
                                        },
                                        __typename: "User"
                                    }
                                }
                            }
                        });
                        t.props.joinRooms(e).then(function(e) {
                            Object(E.d)(An, {
                                channelID: t.props.channelID,
                                userID: t.props.sessionUser && t.props.sessionUser.id
                            }, function(t) {
                                return t.user.self.isChannelMember = e.data.joinChannelRooms.channel.self.isChannelMember, t
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.shouldRender() ? l.createElement(w._7, null, this.getButtonContent(), this.renderBanText()) : null
                }, t.prototype.shouldRender = function() {
                    return this.props.data && !this.props.data.error && this.props.data.user && this.props.sessionUser && this.props.sessionUser.id.toString() !== this.props.channelID && !this.props.data.user.self.isChannelMember
                }, t.prototype.getButtonContent = function() {
                    var e = this.props.data;
                    if (e && !e.loading) {
                        var t = e.user.displayName,
                            n = Object(c.d)("Join {displayName}'s Rooms", {
                                displayName: t
                            }, "JoinRoomsButton");
                        return l.createElement(w.u, {
                            "data-test-selector": "join-rooms-button",
                            disabled: !(!e.chatRoomBanStatus || !e.chatRoomBanStatus.isPermanent),
                            onClick: this.handleClick
                        }, n)
                    }
                    if (e && e.loading) return l.createElement(w._13, {
                        width: 160,
                        height: 30
                    })
                }, t.prototype.renderBanText = function() {
                    var e = this.props.data;
                    if (e && e.chatRoomBanStatus && e.chatRoomBanStatus.isPermanent) return l.createElement(w._7, {
                        padding: {
                            top: .5
                        }
                    }, l.createElement(w.P, {
                        "data-test-selector": "ban-status-text",
                        color: w.J.Error
                    }, Object(c.d)("You are banned and can't rejoin Rooms", "JoinRoomsButton")))
                }, t
            }(l.Component),
            Un = Object(d.compose)(Object(m.a)(Fn, {
                name: "joinRooms"
            }), Object(m.a)(An, {
                options: function(e) {
                    return {
                        variables: {
                            channelID: e.channelID,
                            userID: e.sessionUser && e.sessionUser.id
                        }
                    }
                },
                skip: function(e) {
                    return !e.sessionUser
                }
            }), Object(k.d)("JoinRoomsButton"))(jn);
        var Bn, Pn = Object(i.b)(function(e) {
            return {
                sessionUser: Object(r.c)(e)
            }
        })(Un);
        ! function(e) {
            e.Moderator = "moderator", e.Subscriber = "subscriber"
        }(Bn || (Bn = {}));
        var Vn = function(e) {
                return c.l.get("roomUpsellHistory", {})[e] || !1
            },
            Hn = function(e) {
                var t;
                c.l.set("roomUpsellHistory", s.__assign({}, c.l.get("roomUpsellHistory", {}), ((t = {})[e] = !0, t)))
            },
            Wn = n("q+qZ"),
            Gn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.createRoom = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i, a, r;
                            return s.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        return Z(this.props.roomName) ? [4, this.props.createRoom(Object(E.a)({
                                            name: this.props.roomName,
                                            topic: this.props.roomTopic,
                                            isPreviewable: this.props.isRoomPreviewable,
                                            minimumAllowedRole: this.props.roomMinimumAllowedRole
                                        }))] : [3, 2];
                                    case 1:
                                        if (!(e = o.sent()).data.createRoom.error) switch (this.props.roomMinimumAllowedRole) {
                                            case V.b.Subscriber:
                                                Hn(Bn.Subscriber);
                                                break;
                                            case V.b.Moderator:
                                                Hn(Bn.Moderator)
                                        }
                                        return this.props.onCreateHandler && (r = void 0, e.data.createRoom.error && (t = e.data.createRoom.error, n = t.code, i = t.minLength, a = t.maxLength, r = Q(n, {
                                            maxChars: a,
                                            minChars: i
                                        })), this.props.onCreateHandler(r)), [3, 3];
                                    case 2:
                                        this.props.onCreateHandler && (r = Q("NAME_LENGTH_INVALID", {
                                            maxChars: z,
                                            minChars: Y
                                        }), this.props.onCreateHandler(r)), o.label = 3;
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.isPrimaryCTA ? w.A.Default : w.A.Hollow;
                    return l.createElement(w.u, {
                        onClick: this.createRoom,
                        type: e,
                        "data-test-selector": "create-room-button"
                    }, this.getButtonText())
                }, t.prototype.getButtonText = function() {
                    return Object(c.d)("Create", "CreateRoomButton")
                }, t
            }(l.Component),
            Qn = Object(d.compose)(Object(m.a)(Wn, {
                name: "createRoom"
            }))(Gn),
            qn = (n("E9JN"), {
                align: w._48.Right,
                direction: w._49.Top,
                label: "",
                offsetX: "-2%"
            }),
            zn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onCreateHandler = function(e) {
                        e ? n.setState({
                            roomCreationError: e
                        }) : n.props.onCloseRoomCreator()
                    }, n.onRoomNameChange = function(e) {
                        var t, i = e.target.value.toLowerCase();
                        if ($(i)) {
                            if (K(i)) {
                                t = Q("NAME_LENGTH_INVALID", {
                                    maxChars: z,
                                    minChars: Y
                                })
                            }
                        } else t = Q("NAME_CONTAINS_INVALID_CHARACTERS");
                        n.setState({
                            roomName: i,
                            roomCreationError: t
                        })
                    }, n.updatePermissions = function(e) {
                        n.setState({
                            isRoomPreviewable: e.isPreviewable,
                            roomMinimumAllowedRole: e.minimumAllowedRole
                        })
                    }, n.state = {
                        roomName: t.roomName || "",
                        roomTopic: "",
                        isRoomPreviewable: !0,
                        roomMinimumAllowedRole: V.b.Everyone
                    }, n
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = V.a[this.state.roomMinimumAllowedRole];
                    qn.label = Object(c.d)("Chat Permission: {permissionRole}", {
                        permissionRole: e
                    }, "RoomCreator");
                    var t = {
                        isPreviewable: this.state.isRoomPreviewable,
                        minimumAllowedRole: this.state.roomMinimumAllowedRole
                    };
                    return l.createElement(w._7, {
                        className: "room-creator",
                        padding: {
                            y: 1,
                            x: 2
                        }
                    }, l.createElement(w._7, null, l.createElement(w._7, {
                        position: w._14.Relative
                    }, l.createElement(w._3, {
                        autoFocus: !0,
                        "data-test-selector": "room-creator-input",
                        error: !!this.state.roomCreationError,
                        icon: re(t, !0),
                        type: w._4.Text,
                        value: this.state.roomName,
                        onChange: this.onRoomNameChange,
                        maxLength: 26,
                        placeholder: Object(c.d)("Enter Room name here", "RoomCreator")
                    }), this.renderRoomCreationError(), l.createElement(w._7, {
                        position: w._14.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        display: w.Q.Flex,
                        className: "room-creator__permissions"
                    }, l.createElement(w._30, {
                        display: w.Q.Flex,
                        alignItems: w.c.Center,
                        padding: {
                            right: 1
                        }
                    }, l.createElement(y.a, {
                        tooltipProps: qn
                    }, l.createElement(w.N, null, l.createElement(w._7, {
                        display: w.Q.Flex
                    }, l.createElement(w._7, {
                        padding: {
                            right: .5
                        }
                    }, Object(c.d)("{permissionRole}", {
                        permissionRole: e
                    }, "RoomCreator")), l.createElement(w._20, {
                        asset: w._21.GlyphArrDown
                    }))), l.createElement(w.p, {
                        direction: w.q.BottomRight,
                        size: w.r.Small,
                        noTail: !0,
                        offsetY: "0.5rem",
                        offsetX: "-1rem"
                    }, l.createElement(H, {
                        updatePermissions: this.updatePermissions
                    })))))), l.createElement(w._7, {
                        display: w.Q.Flex,
                        margin: {
                            top: 1
                        },
                        justifyContent: w._6.End
                    }, l.createElement(w._7, {
                        padding: {
                            right: 1
                        }
                    }, l.createElement(w.u, {
                        onClick: this.props.onCloseRoomCreator,
                        type: w.A.Text
                    }, Object(c.d)("Cancel", "RoomCreator"))), l.createElement(Qn, {
                        isPrimaryCTA: !0,
                        roomName: this.state.roomName,
                        roomTopic: this.state.roomTopic,
                        isRoomPreviewable: this.state.isRoomPreviewable,
                        roomMinimumAllowedRole: this.state.roomMinimumAllowedRole,
                        onCreateHandler: this.onCreateHandler,
                        "data-test-selector": "create-room-button"
                    })), l.createElement(w._30, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            y: 1
                        }
                    })))
                }, t.prototype.renderRoomCreationError = function() {
                    if (this.state.roomCreationError) return l.createElement(w.P, {
                        color: w.J.Error,
                        "data-test-selector": "room-creation-error-text"
                    }, this.state.roomCreationError)
                }, t
            }(l.Component),
            Yn = n("rCmJ"),
            Jn = n("pe3h"),
            $n = (n("XViT"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onClick = function() {
                        !n.props.sessionUser || n.props.data && !n.props.data.room.owner.self.isChannelMember || n.props.handleClick(n.props.roomID, n.props.roomName)
                    }, n.closeViews = function() {
                        n.setState({
                            showOptionView: !1
                        })
                    }, n.toggleOptionView = function() {
                        n.state.showOptionView ? n.closeViews() : n.state.showOptionView || n.setState({
                            showOptionView: !0
                        })
                    }, n.state = {
                        showOptionView: !1
                    }, n
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data;
                    if (e && e.loading) return l.createElement(w._13, {
                        width: 160
                    });
                    if (e && e.error) return l.createElement(w._7, null);
                    var t = !this.props.sessionUser || e && !e.room.owner.self.isChannelMember,
                        n = w._21.Lock,
                        i = !1,
                        a = !1;
                    e && (n = re({
                        isPreviewable: e && e.room.isPreviewable,
                        minimumAllowedRole: e && e.room.minimumAllowedRole
                    }, e.room.self.permissions.sendMessages), i = e.room.self.isUnread && e.room.owner.self.isChannelMember, a = e.room.self.isMuted && e.room.owner.self.isChannelMember);
                    return l.createElement(w._30, {
                        position: w._14.Relative,
                        "data-test-selector": "interactable-wrapper",
                        className: "room-picker-option\n          " + (this.props.isActiveRoom ? "room-picker-option--active" : "") + "\n          " + (this.state.showOptionView && !t ? "room-picker-option--hover" : "") + "\n          " + (t ? "room-picker-option--disabled" : "")
                    }, l.createElement(w._5, {
                        onClick: this.onClick,
                        disabled: t,
                        "data-test-selector": "room-option-interactable",
                        hover: this.state.showOptionView && !t
                    }, l.createElement(w._7, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        display: w.Q.Flex,
                        className: "room-picker-option__label",
                        fullWidth: !0
                    }, l.createElement(w._7, {
                        display: w.Q.Flex,
                        alignItems: w.c.Center,
                        flexGrow: 1
                    }, l.createElement(w._30, {
                        className: "room-picker-option__permission-icon",
                        display: w.Q.Flex,
                        padding: {
                            right: .5
                        }
                    }, l.createElement(w._20, {
                        height: 14,
                        asset: n
                    })), l.createElement(w.P, {
                        bold: i && !this.props.isActiveRoom
                    }, this.props.roomName)), l.createElement(w._7, {
                        display: w.Q.Flex,
                        alignItems: w.c.Center,
                        margin: {
                            right: 2
                        }
                    }, a && l.createElement(w._30, {
                        padding: {
                            left: .5
                        },
                        display: w.Q.Flex,
                        className: "room-picker-option__muted-icon"
                    }, l.createElement(w._20, {
                        asset: w._21.WhisperMuted
                    })), this.renderMentionsPill()))), this.renderRoomDetailsBalloonToggle())
                }, t.prototype.renderRoomDetailsBalloonToggle = function() {
                    var e = this.props.data;
                    if (!this.props.sessionUser || !e || e.chatRoomBanStatus && e.chatRoomBanStatus.isPermanent) return null;
                    var t = e.room.owner.self.isChannelMember;
                    return l.createElement(w._7, {
                        margin: {
                            right: 1
                        },
                        position: w._14.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        display: t ? void 0 : w.Q.Block,
                        className: "room-picker-option__settings " + (t ? "" : "room-picker-option__settings--disabled")
                    }, l.createElement(Yn.a, {
                        onClickOut: this.closeViews
                    }, l.createElement("div", {
                        className: "room-picker-option__picker-settings " + (this.state.showOptionView ? "room-picker-option__picker-settings--show" : "")
                    }, l.createElement(w.v, {
                        ariaLabel: Object(c.d)("More options", "RoomPickerOption"),
                        "data-test-selector": "room-details",
                        icon: w._21.More,
                        onClick: this.toggleOptionView,
                        overlay: t
                    })), l.createElement(w.p, {
                        direction: w.q.BottomRight,
                        noTail: !0,
                        size: w.r.Small,
                        offsetY: "-0.5rem",
                        offsetX: "1rem",
                        show: !!this.state.showOptionView
                    }, l.createElement(ae, {
                        roomID: this.props.roomID
                    }))))
                }, t.prototype.renderMentionsPill = function() {
                    return this.props.isActiveRoom || !this.props.data || this.props.data.room.self.unreadMentionCount <= 0 || this.props.data.room.self.isMuted || !this.props.data.room.owner.self.isChannelMember ? null : l.createElement(w._7, {
                        padding: {
                            left: .5
                        }
                    }, l.createElement(w._11, {
                        label: this.props.data.room.self.unreadMentionCount.toString(),
                        type: w._12.Alert
                    }))
                }, t = s.__decorate([Object(m.a)(Jn, {
                    options: function(e) {
                        return {
                            variables: {
                                roomID: e.roomID,
                                channelID: e.channelID,
                                userID: e.sessionUser && e.sessionUser.id
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.sessionUser
                    }
                })], t)
            }(l.Component)),
            Kn = (n("fNhT"), function(e) {
                var t, n, i, a, r, o;
                return e.type === Bn.Subscriber ? (t = Object(c.d)("subscriber-room", "RoomUpsell_SubUpsellName"), n = Object(c.d)("Create a place for your subscribers to hang out", "RoomUpsell_SubUpsellTopic"), i = Object(c.d)("subscriber-room", "RoomUpsell_SubUpsellNameCreate"), a = Object(c.d)("Create a place for your subscribers to hang out", "RoomUpsell_SubUpsellTopicCreate"), r = V.b.Subscriber, o = !0) : (t = Object(c.d)("moderator-room", "RoomUpsell_ModUpsellName"), n = Object(c.d)("Give your moderators a place to sharpen their swords", "RoomUpsell_ModUpsellTopic"), i = Object(c.d)("moderator-room", "RoomUpsell_ModUpsellNameCreate"), a = Object(c.d)("Give your moderators a place to sharpen their swords", "RoomUpsell_ModUpsellTopicCreate"), r = V.b.Moderator, o = !1), l.createElement(w._30, {
                    display: w.Q.Flex,
                    padding: {
                        y: 1,
                        x: 2
                    },
                    className: "room-upsell",
                    elevation: 2
                }, l.createElement(w.X, {
                    gutterSize: w.Y.None
                }, l.createElement(w.K, {
                    cols: 9
                }, l.createElement(w._7, {
                    display: w.Q.Flex
                }, l.createElement(w._7, {
                    padding: {
                        right: .5
                    },
                    display: w.Q.Flex,
                    alignItems: w.c.Center
                }, l.createElement(w._20, {
                    type: w._22.Alt2,
                    height: 14,
                    asset: w._21.Unlock
                })), l.createElement(w.P, {
                    color: w.J.Alt,
                    type: w._44.Strong
                }, t)), l.createElement(w.P, {
                    color: w.J.Alt2,
                    className: "room-upsell__text"
                }, n)), l.createElement(w.K, {
                    cols: 3
                }, l.createElement(w._7, {
                    display: w.Q.Flex,
                    flexDirection: w.S.Column,
                    fullHeight: !0,
                    justifyContent: w._6.Center,
                    padding: {
                        left: .5
                    }
                }, l.createElement(Qn, {
                    isPrimaryCTA: !1,
                    roomName: i,
                    roomTopic: a,
                    isRoomPreviewable: o,
                    roomMinimumAllowedRole: r
                })))))
            }),
            Zn = n("d7Cs"),
            Xn = n("4hnS"),
            ei = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleLeave = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return s.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return e = s.__assign({}, Object(E.a)({
                                            channelID: this.props.channelID
                                        }), {
                                            optimisticResponse: {
                                                leaveChannelRooms: {
                                                    __typename: "LeaveChannelRoomsPayload",
                                                    channel: {
                                                        self: {
                                                            isChannelMember: !0,
                                                            __typename: "UserSelfConnection"
                                                        },
                                                        __typename: "User"
                                                    }
                                                }
                                            }
                                        }), this.props.handleDismiss(), [4, this.props.leaveRooms(e)];
                                    case 1:
                                        return t = i.sent(), n = function(e) {
                                            return e.user.self.isChannelMember = t.data.leaveChannelRooms.channel.self.isChannelMember, e
                                        }, Object(E.d)(Zn, {
                                            id: this.props.channelID
                                        }, n), [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading || this.props.data.error) return l.createElement(w._7, null);
                    var e = this.props.data.user.displayName;
                    return l.createElement(w._7, {
                        padding: {
                            y: 1,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(w.P, {
                        color: w.J.Error
                    }, Object(c.d)("Leave {displayName}'s Rooms?", {
                        displayName: e
                    }, "LeaveRoomsPrompt")), l.createElement(w._7, {
                        display: w.Q.Flex,
                        padding: {
                            top: .5
                        }
                    }, l.createElement(w._7, {
                        padding: {
                            right: .5
                        }
                    }, l.createElement(w.u, {
                        "data-test-selector": "confirm-leave-button",
                        onClick: this.handleLeave,
                        type: w.A.Alert
                    }, Object(c.d)("Leave", "LeaveRoomsPrompt"))), l.createElement(w.u, {
                        "data-test-selector": "cancel-leave-button",
                        onClick: this.props.handleDismiss,
                        type: w.A.Hollow
                    }, Object(c.d)("Cancel", "LeaveRoomsPrompt"))))
                }, t = s.__decorate([Object(k.d)("LeaveRoomsPrompt"), Object(m.a)(Xn, {
                    name: "leaveRooms"
                }), Object(m.a)(Zn, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                })], t)
            }(l.Component),
            ti = n("Fvfv"),
            ni = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        shouldShowLeaveRoomsPrompt: !1
                    }, t.openLeaveRoomsPrompt = function() {
                        t.setState({
                            shouldShowLeaveRoomsPrompt: !0
                        })
                    }, t.closeLeaveRoomsPrompt = function() {
                        t.setState({
                            shouldShowLeaveRoomsPrompt: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return this.props.data.loading || this.props.data.error ? l.createElement(w._7, null) : this.shouldRender() ? l.createElement(y.a, null, l.createElement(w.v, {
                        "data-test-selector": "toggle-balloon-button",
                        ariaLabel: Object(c.d)("More options", "RoomsMemberOptions"),
                        icon: w._21.More
                    }), l.createElement(w.p, {
                        direction: w.q.BottomRight,
                        noTail: !0,
                        offsetY: "0rem"
                    }, l.createElement(w._7, {
                        padding: {
                            y: .5
                        }
                    }, this.renderLeaveOption()))) : null
                }, t.prototype.shouldRender = function() {
                    return this.props.isLoggedIn && this.props.data.user.self.isChannelMember
                }, t.prototype.renderLeaveOption = function() {
                    return this.state.shouldShowLeaveRoomsPrompt ? l.createElement(ei, {
                        channelID: this.props.channelID,
                        handleDismiss: this.closeLeaveRoomsPrompt
                    }) : l.createElement(w._5, {
                        alpha: !0,
                        alert: !0,
                        "data-test-selector": "open-leave-prompt",
                        onClick: this.openLeaveRoomsPrompt
                    }, l.createElement(w._30, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        }
                    }, Object(c.d)("Leave", "RoomsMemberOptions")))
                }, t = s.__decorate([Object(m.a)(ti, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                })], t)
            }(l.Component),
            ii = n("QY1R"),
            ai = (n("nhCy"), "Stream Chat"),
            ri = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        shouldShowRoomCreator: !1
                    }, t.onPickChat = function() {
                        t.props.handleRoomSelect(ai, ai)
                    }, t.showRoomCreator = function() {
                        t.setState({
                            shouldShowRoomCreator: !0
                        })
                    }, t.hideRoomCreator = function() {
                        t.setState({
                            shouldShowRoomCreator: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    if (!this.props.data.loading && !this.props.data.error && this.props.data.user) {
                        var e = this.props.data.user.channelRooms.length;
                        if (this.props.sessionUser) e += this.props.sessionUser.id === this.props.channelID ? 1 : 0, e += !this.props.data.user.self.isChannelMember ? 1 : 0;
                        this.props.latencyTracking.reportInteractive(e)
                    }
                }, t.prototype.render = function() {
                    if (this.props.data.loading && !this.props.data.user) return l.createElement(w._30, {
                        "data-test-selector": "room-picker-loading-state",
                        attachRight: !0,
                        className: "room-picker",
                        background: w.m.Alt,
                        border: !0,
                        position: w._14.Absolute,
                        elevation: 2,
                        zIndex: w._57.Above
                    }, l.createElement(w._7, {
                        key: "chat",
                        margin: {
                            y: .5
                        }
                    }, l.createElement(w._5, {
                        onClick: this.onPickChat,
                        alpha: !0
                    }, l.createElement(w._7, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        display: w.Q.Flex
                    }, l.createElement(w._13, {
                        width: 160
                    })))), l.createElement(w._30, {
                        background: w.m.Alt2,
                        padding: {
                            left: 2,
                            right: 1
                        },
                        fullWidth: !0,
                        borderTop: !0,
                        borderBottom: !0
                    }, l.createElement(w._13, {
                        width: 80
                    })), l.createElement(w._7, {
                        padding: {
                            y: .5,
                            x: 2
                        }
                    }, l.createElement(w._13, {
                        width: 120
                    }), l.createElement(w._13, {
                        width: 160
                    })));
                    if (this.props.data.error) return l.createElement(w._7, null);
                    var e = this.props.isChannelLive ? w.H.Live : w.H.Offline;
                    return l.createElement(w._30, {
                        attachRight: !0,
                        className: "room-picker",
                        background: w.m.Alt,
                        border: !0,
                        position: w._14.Absolute,
                        elevation: 2,
                        zIndex: w._57.Above
                    }, l.createElement(w._7, {
                        margin: {
                            y: .5
                        }
                    }, l.createElement(w._5, {
                        "data-test-selector": "stream-chat-room-picker-option",
                        onClick: this.onPickChat
                    }, l.createElement(w._7, {
                        className: "room-picker__label " + (this.props.activeRoomID === ai ? "room-picker__label--active-main" : ""),
                        key: ai,
                        padding: {
                            y: .5,
                            x: 2
                        },
                        display: w.Q.Flex
                    }, l.createElement(w._30, {
                        textAlign: w._40.Center,
                        padding: {
                            left: .5,
                            right: 1
                        }
                    }, l.createElement(w.F, {
                        status: e
                    })), l.createElement(w._7, null, l.createElement("span", null, Object(c.d)("Stream Chat", "RoomPicker")))))), this.getRoomNumberHeader(), this.renderRoomCreator(), this.renderRoomOnboarding(), this.getExistingRoomsList(), this.getUpsellRoomsList(), this.renderParticipationCTA())
                }, t.prototype.getExistingRoomsList = function() {
                    var e = this,
                        t = this.props.data.user.channelRooms;
                    if (0 === t.length) return null;
                    var n = t.map(function(t) {
                        return l.createElement($n, {
                            channelID: e.props.channelID,
                            isActiveRoom: t.id === e.props.activeRoomID,
                            key: "room-picker-option-" + t.id,
                            roomID: t.id,
                            roomName: t.name,
                            handleClick: e.props.handleRoomSelect,
                            sessionUser: e.props.sessionUser
                        })
                    });
                    return l.createElement(w._7, {
                        margin: {
                            y: .5
                        }
                    }, n)
                }, t.prototype.getUpsellRoomsList = function() {
                    if (this.props.sessionUser && this.props.sessionUser.id === this.props.channelID) {
                        var e = this.props.data.user,
                            t = e.channelRooms,
                            n = e.maxAllowedChannelRooms,
                            i = [];
                        if (n && t.length < n) {
                            var a = !Vn(Bn.Subscriber),
                                r = !Vn(Bn.Moderator);
                            t.forEach(function(e) {
                                e.name !== Object(c.d)("subscriber-room", "RoomPicker_SubUpsellCheck") && e.minimumAllowedRole !== V.b.Subscriber || (a = !1), e.name !== Object(c.d)("moderator-room", "RoomPicker_ModUpsellCheck") && e.minimumAllowedRole !== V.b.Moderator || (r = !1)
                            }), a && this.props.data.user.subscriptionProducts.length > 0 && i.push(l.createElement(Kn, {
                                type: Bn.Subscriber,
                                key: "sub-upsell"
                            })), r && i.push(l.createElement(Kn, {
                                type: Bn.Moderator,
                                key: "mod-upsell"
                            }))
                        }
                        return l.createElement(w._7, null, i)
                    }
                }, t.prototype.getRoomNumberHeader = function() {
                    var e, t = this.props.data.user.channelRooms.length,
                        n = !this.props.data.user.maxAllowedChannelRooms || t >= this.props.data.user.maxAllowedChannelRooms;
                    return e = 0 === t ? Object(c.d)("NO ROOMS YET.", "RoomPicker") : 1 === t ? Object(c.d)("1 ROOM", "RoomPicker") : Object(c.d)("{numRooms} ROOMS", {
                        numRooms: t
                    }, "RoomPicker"), l.createElement(w._30, {
                        "data-test-selector": "room-picker-header",
                        className: "room-picker__header",
                        background: w.m.Alt2,
                        display: w.Q.Flex,
                        alignItems: w.c.Center,
                        justifyContent: w._6.Between,
                        padding: {
                            left: 2,
                            right: 1
                        },
                        fullWidth: !0,
                        borderTop: !0,
                        borderBottom: !0
                    }, l.createElement(w.P, {
                        type: w._44.Strong,
                        color: w.J.Alt2
                    }, e), this.renderRoomNumHeaderButton(n))
                }, t.prototype.renderParticipationCTA = function() {
                    var e = this.props.data.user.displayName;
                    return this.props.sessionUser ? 0 === this.props.data.user.channelRooms.length && this.props.channelID !== this.props.sessionUser.id ? l.createElement(w._7, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        margin: {
                            top: .5,
                            bottom: 1
                        }
                    }, l.createElement(w.P, {
                        color: w.J.Alt2
                    }, Object(c.d)("{displayName} hasn't created any rooms yet!", {
                        displayName: e
                    }, "RoomPicker"))) : this.props.data.user.self.isChannelMember ? void 0 : l.createElement(w._7, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(w.P, null, Object(c.d)("More chat in your chat. You will get notifications when you are @mentioned.", "RoomPicker")), l.createElement(w._7, {
                        margin: {
                            top: .5
                        }
                    }, l.createElement(Pn, {
                        channelID: this.props.channelID
                    }))) : l.createElement(w._7, {
                        "data-test-selector": "room-picker-logged-out-cta",
                        padding: {
                            y: .5,
                            x: 2
                        },
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(w.P, {
                        color: w.J.Alt
                    }, Object(c.d)("Sign up/Log in to access {displayName}'s Rooms", {
                        displayName: e
                    }, "RoomPicker")))
                }, t.prototype.renderRoomCreator = function() {
                    if (this.state.shouldShowRoomCreator) return l.createElement(zn, {
                        onCloseRoomCreator: this.hideRoomCreator
                    })
                }, t.prototype.renderRoomOnboarding = function() {
                    var e = this.props.sessionUser && this.props.sessionUser.id === this.props.channelID,
                        t = this.props.data.user.channelRooms.length,
                        n = !this.props.data.user.maxAllowedChannelRooms || t >= this.props.data.user.maxAllowedChannelRooms;
                    if (e && 0 === t && !n) return l.createElement(w._30, {
                        background: w.m.Alt,
                        color: w.J.Alt2,
                        padding: {
                            bottom: 2,
                            top: 1
                        },
                        textAlign: w._40.Center
                    }, l.createElement(w._7, {
                        margin: {
                            y: 1
                        },
                        fullWidth: !0
                    }, l.createElement("img", {
                        src: Ln.a,
                        height: "50"
                    })), l.createElement(w._7, {
                        padding: {
                            x: 5
                        }
                    }, l.createElement(w.P, null, Object(c.d)("Rooms let your community bond in spaces you create! Get started right here...", "RoomPicker"))))
                }, t.prototype.renderRoomNumHeaderButton = function(e) {
                    if (this.props.sessionUser) {
                        var t, n = this.props.sessionUser.id === this.props.channelID;
                        if (n && !this.state.shouldShowRoomCreator) {
                            if (t = l.createElement(w.u, {
                                    onClick: this.showRoomCreator,
                                    disabled: e,
                                    type: w.A.Text
                                }, l.createElement(w._7, {
                                    display: w.Q.Flex,
                                    alignItems: w.c.Center
                                }, l.createElement(w._7, {
                                    padding: {
                                        right: .5
                                    }
                                }, l.createElement(w._20, {
                                    asset: w._21.Plus,
                                    height: 10
                                })), Object(c.d)("Create Room", "RoomPicker"))), e && this.props.data.user.maxAllowedChannelRooms) {
                                var i = this.props.data.user.maxAllowedChannelRooms,
                                    a = Object(c.d)("You can have a maximum of {numMaxRooms} rooms", {
                                        numMaxRooms: i
                                    }, "RoomPicker");
                                t = l.createElement(w._47, {
                                    direction: w._49.Left,
                                    label: a,
                                    width: 160
                                }, t)
                            }
                        } else n || (t = l.createElement(ni, {
                            channelID: this.props.channelID,
                            isLoggedIn: this.props.isLoggedIn
                        }));
                        return t
                    }
                }, t = s.__decorate([Object(m.a)(ii, {
                    options: function(e) {
                        return {
                            fetchPolicy: "cache-and-network",
                            variables: {
                                id: e.channelID,
                                isBroadcaster: !!e.sessionUser && e.sessionUser.id === e.channelID
                            }
                        }
                    }
                }), Object(k.d)("RoomPicker")], t)
            }(l.Component);
        var oi, si = Object(i.b)(function(e) {
            return {
                sessionUser: Object(r.c)(e),
                isLoggedIn: Object(r.d)(e)
            }
        })(ri);
        ! function(e) {
            e.MentionPill = "mentionPill", e.ViewRooms = "viewRooms"
        }(oi || (oi = {}));
        var li = function(e) {
                return c.l.get("hasSeenRoomsOnboarding", {})[e] || !1
            },
            di = function(e) {
                var t;
                c.l.set("hasSeenRoomsOnboarding", s.__assign({}, c.l.get("hasSeenRoomsOnboarding", {}), ((t = {})[e] = !0, t)))
            };
        var ci = n("BKhP"),
            ui = n("go0B"),
            mi = (n("w0qa"), "Stream Chat"),
            pi = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        activeRoomID: mi,
                        activeRoomName: mi,
                        hasSeenGeneralOnboarding: li(oi.ViewRooms),
                        isActiveRoomDeleted: !1,
                        showRoomPicker: !1
                    }, t.renderOnboardingBalloon = function() {
                        var e = t.props.data;
                        if (t.state.showRoomPicker || t.state.hasSeenGeneralOnboarding) return null;
                        if (!e || !e.user) return null;
                        var n = t.props.sessionUser && t.props.sessionUser.id === e.user.id;
                        return e.user.channelRooms && 0 === e.user.channelRooms.length && !n ? null : l.createElement(w.p, {
                            direction: w.q.BottomRight,
                            offsetX: "1rem",
                            show: !0,
                            size: w.r.Small
                        }, l.createElement(u.a, {
                            onClickOut: t.dismissGeneralOnboarding
                        }, l.createElement(w._7, {
                            padding: 3,
                            textAlign: w._40.Center
                        }, l.createElement("img", {
                            src: Object(b.f)("508650", 3),
                            width: "28"
                        }), l.createElement(w._7, {
                            margin: {
                                y: 1
                            }
                        }, l.createElement(w.P, {
                            color: w.J.Alt2
                        }, Object(c.d)("Rooms help you keep the conversation going", "RoomSelector"))), l.createElement(w.u, {
                            onClick: t.headerClick
                        }, Object(c.d)("View rooms", "RoomSelector")))))
                    }, t.isChannelLive = function(e) {
                        return !(e.error || !e.user) && !!(e.user.stream && e.user.stream.id || e.user.hosting && e.user.hosting.id)
                    }, t.headerClick = function() {
                        t.dismissGeneralOnboarding(), t.setState(function(e) {
                            return {
                                showRoomPicker: !e.showRoomPicker
                            }
                        })
                    }, t.handleRoomSelect = function(e, n) {
                        t.setState({
                            activeRoomID: e,
                            activeRoomName: n,
                            isActiveRoomDeleted: !1,
                            showRoomPicker: !1
                        })
                    }, t.onActiveRoomDelete = function() {
                        t.state.activeRoomID !== mi && t.setState({
                            isActiveRoomDeleted: !0
                        })
                    }, t.goToStreamChat = function() {
                        t.handleRoomSelect(mi, mi)
                    }, t.dismissGeneralOnboarding = function() {
                        t.setState({
                            hasSeenGeneralOnboarding: !0
                        }), di(oi.ViewRooms)
                    }, t.closeRoomPicker = function() {
                        t.setState({
                            showRoomPicker: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.state.showRoomPicker && this.dismissGeneralOnboarding()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (this.props.data && !e.isPopout && (this.props.data.loading || this.props.channelLogin !== e.channelLogin) && e.data.user && e.data.user.channelRooms) {
                        var n = this.isChannelLive(e.data),
                            i = 0 !== e.data.user.channelRooms.length;
                        this.setState({
                            showRoomPicker: !n && i && !e.isEmbedded
                        }), n || this.dismissGeneralOnboarding()
                    }
                    if (this.props.data && e.data && this.props.data.user && e.data.user && this.props.data.user.self && e.data.user.self && !e.data.user.self.isChannelMember && this.props.data.user.self.isChannelMember !== e.data.user.self.isChannelMember && this.goToStreamChat(), this.props.sessionUser && this.props.routedRoomName && this.props.data && this.props.data.loading && !this.props.data.user && !e.data.loading && e.data.user && e.data.user.channelRooms && e.data.user.self.isChannelMember) {
                        var a = e.data.user.channelRooms.find(function(e) {
                            return e.name === t.props.routedRoomName
                        });
                        a && this.setState({
                            activeRoomID: a.id,
                            activeRoomName: a.name
                        })
                    } else this.props.channelLogin !== e.channelLogin && this.state.activeRoomID !== mi && this.goToStreamChat()
                }, t.prototype.render = function() {
                    return l.createElement(w._7, {
                        fullWidth: !0,
                        fullHeight: !0,
                        display: w.Q.Flex,
                        flexDirection: w.S.Column,
                        flexGrow: 1,
                        flexWrap: w.T.NoWrap,
                        zIndex: w._57.Default,
                        position: w._14.Relative
                    }, this.renderHeader(), this.renderRoomPicker(), this.renderHiddenState(), this.renderChat(), this.renderCurrentRoom())
                }, t.prototype.renderChat = function() {
                    if (this.props.isHidden && !this.props.isPopout) return null;
                    var e = this.state.activeRoomID !== mi;
                    return l.createElement(f.a, {
                        channelLogin: this.props.channelLogin,
                        clientID: c.a.authSettings.clientID,
                        isBackground: e,
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.closeRoomPicker,
                        onHostingChange: this.props.onHostingChange,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName
                    })
                }, t.prototype.renderCurrentRoom = function() {
                    return this.props.isHidden && !this.props.isPopout || !this.props.data.user || this.state.activeRoomID === mi ? null : l.createElement(Rn, {
                        isDeleted: this.state.isActiveRoomDeleted,
                        isPopout: this.props.isPopout,
                        channelID: this.props.data.user.id,
                        roomID: this.state.activeRoomID,
                        closeRoomPicker: this.closeRoomPicker,
                        handleStreamChatClick: this.goToStreamChat,
                        onDelete: this.onActiveRoomDelete,
                        isHostMode: !!this.props.hostedChannelDisplayName
                    })
                }, t.prototype.renderHeader = function() {
                    var e = l.createElement(w._7, {
                        display: w.Q.Flex,
                        alignItems: w.c.Center
                    }, !this.state.showRoomPicker && Object(c.d)("Rooms", "RoomSelector"), l.createElement(w._7, {
                        display: w.Q.Flex,
                        alignItems: w.c.Center
                    }, this.renderTotalUnreadMentionCount(), !this.state.showRoomPicker && l.createElement(w._7, {
                        padding: {
                            left: .5
                        },
                        display: w.Q.Flex
                    }, l.createElement(w._20, {
                        asset: w._21.RoomList
                    })), this.state.showRoomPicker && l.createElement(w.v, {
                        ariaLabel: "RoomListOpen",
                        icon: w._21.RoomListOpen,
                        "data-test-selector": "close-room-picker-button",
                        onClick: this.headerClick,
                        blurAfterClick: !0
                    })));
                    this.state.showRoomPicker || (e = l.createElement(w._7, {
                        position: w._14.Relative
                    }, l.createElement(w.u, {
                        "data-test-selector": "open-room-picker-button",
                        onClick: this.headerClick,
                        type: w.A.Text
                    }, e), this.renderOnboardingBalloon())), this.props.isEmbedded && (e = l.createElement(w._7, null));
                    var t = l.createElement(w._30, {
                        className: "room-selector__header",
                        background: this.state.showRoomPicker ? w.m.Alt : w.m.Alt2,
                        borderLeft: !0,
                        borderRight: !0,
                        borderBottom: !0,
                        display: w.Q.Flex,
                        fullWidth: !0,
                        justifyContent: w._6.Between,
                        alignItems: w.c.Center,
                        flexShrink: 0,
                        padding: {
                            left: 2,
                            right: 1
                        }
                    }, l.createElement("div", {
                        id: v.a
                    }, this.renderActiveRoomName()), e);
                    return this.state.showRoomPicker && (t = l.createElement(w._7, {
                        className: "room-selector__open-header-wrapper"
                    }, t)), t
                }, t.prototype.renderRoomPicker = function() {
                    if (this.state.showRoomPicker && this.props.data.user) return l.createElement(u.a, {
                        onClickOut: this.closeRoomPicker
                    }, l.createElement(si, {
                        channelID: this.props.data.user.id,
                        handleRoomSelect: this.handleRoomSelect,
                        isChannelLive: this.isChannelLive(this.props.data),
                        activeRoomID: this.state.activeRoomID
                    }))
                }, t.prototype.renderActiveRoomName = function() {
                    return this.state.showRoomPicker ? l.createElement(w.P, {
                        color: w.J.Alt
                    }, Object(c.d)("Rooms", "RoomSelectorOpened")) : this.state.activeRoomName === mi || this.state.isActiveRoomDeleted ? l.createElement(w.P, {
                        color: w.J.Alt
                    }, this.state.activeRoomName) : l.createElement(le, {
                        roomID: this.state.activeRoomID,
                        roomName: this.state.activeRoomName
                    })
                }, t.prototype.renderTotalUnreadMentionCount = function() {
                    var e = this,
                        t = this.props.data;
                    if (t.error || !t.user || !t.user.self || !t.user.self.isChannelMember || !t.user.channelRooms) return null;
                    var n = t.user.channelRooms.reduce(function(t, n) {
                        return n.self.isMuted || n.id === e.state.activeRoomID ? t : t + n.self.unreadMentionCount
                    }, 0);
                    return n > 0 ? l.createElement(w._7, {
                        display: w.Q.InlineBlock,
                        padding: {
                            left: .5
                        },
                        position: w._14.Relative
                    }, l.createElement(w._11, {
                        label: n.toString(),
                        type: w._12.Alert
                    })) : void 0
                }, t.prototype.renderHiddenState = function() {
                    return !this.props.isHidden || this.props.isPopout ? null : l.createElement(w._30, {
                        alignItems: w.c.Center,
                        background: w.m.Alt2,
                        borderLeft: !0,
                        "data-test-selector": "room-selector-hidden-state",
                        display: w.Q.Flex,
                        flexDirection: w.S.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: w._6.Center,
                        color: w.J.Base,
                        position: w._14.Relative
                    }, l.createElement(w._7, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(w.P, {
                        fontSize: w.U.Size5
                    }, Object(c.d)("Chat is hidden.", "RoomSelector"))), l.createElement(w.u, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(c.d)("Show Chat", "RoomSelector")))
                }, t
            }(l.Component),
            hi = Object(d.compose)(Object(m.a)(ui, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: ui,
                    skip: !e.data.user,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(g.f)("" + (e.data.user && e.data.user.id)),
                    types: [h.PubsubMessageType.ChatRoomCreated, h.PubsubMessageType.ChatRoomDeleted],
                    mutator: function(e, t) {
                        if (e.type === h.PubsubMessageType.ChatRoomDeleted && t.user && t.user.channelRooms) return t.user.channelRooms = t.user.channelRooms.filter(function(t) {
                            return t.id !== e.data.room.room_id
                        }), t;
                        if (e.type === h.PubsubMessageType.ChatRoomCreated && t.user && t.user.channelRooms) {
                            var n = function(e) {
                                return {
                                    id: e.data.room.room_id,
                                    minimumAllowedRole: e.data.room.minimum_allowed_role,
                                    name: e.data.room.name,
                                    topic: e.data.room.topic,
                                    isPreviewable: e.data.room.is_previewable,
                                    self: {
                                        isArchived: !1,
                                        isMuted: !1,
                                        isUnread: !1,
                                        unreadMentionCount: 0,
                                        __typename: "RoomView"
                                    },
                                    __typename: "Room"
                                }
                            }(e);
                            return t.user.channelRooms.push(n), t
                        }
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: ci,
                    skip: !e.sessionUser || !e.data.user,
                    variables: {
                        channelID: e.data.user && e.data.user.id,
                        userID: e.sessionUser && e.sessionUser.id
                    },
                    topic: Object(g.g)("" + (e.sessionUser && e.sessionUser.id)),
                    type: h.PubsubMessageType.ChatRoomsUserModAction,
                    mutator: function(e, t) {
                        return e.type === h.PubsubMessageType.ChatRoomsUserModAction && (t.chatRoomBanStatus = {
                            isPermanent: !e.data.expires_at,
                            __typename: "ChatRoomBanStatus"
                        }), t
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: ui,
                    skip: !e.sessionUser || !e.data.user,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(g.g)("" + (e.sessionUser && e.sessionUser.id)),
                    types: [h.PubsubMessageType.UserMention, h.PubsubMessageType.ChatRoomsRoomViewUpdated],
                    mutator: function(e, t) {
                        return e.type === h.PubsubMessageType.UserMention && t.user && t.user.channelRooms && (t.user.channelRooms = t.user.channelRooms.map(function(t) {
                            return e = e, t.id === e.data.room_id && (t.self.unreadMentionCount += 1), t
                        })), e.type === h.PubsubMessageType.ChatRoomsRoomViewUpdated && t.user && (e = e, t.user.self.isModerator = e.data.room_view.permissions.moderate), t
                    }
                }
            }), Object(k.d)("RoomSelector"))(pi);
        var gi = Object(i.b)(function(e) {
            return {
                isHidden: e.chat.isHidden,
                sessionUser: Object(r.c)(e)
            }
        }, function(e) {
            return Object(a.b)({
                onChatUnhide: function() {
                    return o.T()
                }
            }, e)
        })(hi);
        n.d(t, "a", function() {
            return gi
        })
    },
    "4hnS": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "LeaveRoomsPrompt_LeaveRooms"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "LeaveChannelRoomsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "leaveChannelRooms"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 147
            }
        };
        n.loc.source = {
            body: "mutation LeaveRoomsPrompt_LeaveRooms($input: LeaveChannelRoomsInput!) {\nleaveChannelRooms(input: $input) {\nchannel {\nself {\nisChannelMember\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "4zIR": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t, n) {
            var a = i(e).getTime(),
                r = i(t).getTime(),
                o = i(n).getTime();
            if (r > o) throw new Error("The start of the range cannot be after the end of the range");
            return a >= r && a <= o
        }
    },
    "54rb": function(e, t) {},
    "56e8": function(e, t) {},
    "576g": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "cheer"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "cheer"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "prefix"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "tiers"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "color"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "images"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "theme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isAnimated"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "dpiScale"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 133
            }
        };
        n.loc.source = {
            body: "fragment cheer on User {\ncheer {\nid\nemotes {\nid\nprefix\ntype\ntiers {\nid\nbits\ncolor\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5Dex": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsPinnedCheerV2_LeaderboardEntry"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "profileImageWidth"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "profileImageWidth"
                                        }
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 168
            }
        };
        n.loc.source = {
            body: "query BitsPinnedCheerV2_LeaderboardEntry($userID: ID! $profileImageWidth: Int!) {\nuser(id: $userID) {\nid\ndisplayName\nlogin\nprofileImageURL(width:$profileImageWidth)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5Kla": function(e, t) {},
    "5qwL": function(e, t, n) {
        var i = n("VaeB");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() === a.getTime()
        }
    },
    "5vPJ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("GxDs"),
            l = n("pexS"),
            d = {
                isTimedOut: !1
            },
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = d, t.timeoutID = null, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.props.data.clip || (this.timeoutID = setTimeout(function() {
                        e.setState({
                            isTimedOut: !0
                        })
                    }, 5e3))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                        isTimedOut: !1
                    }))
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.clip,
                        n = e.error,
                        i = e.loading;
                    return n || this.state.isTimedOut ? a.createElement(s.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "ClipsChatCard"),
                            description: Object(r.d)("We couldn't find that Clip", "ClipsChatCard")
                        }
                    }) : i || !t ? a.createElement(s.a, null) : a.createElement(s.a, {
                        data: {
                            title: t.title || (t.broadcaster ? Object(r.d)("Clip of {broadcaster}", {
                                broadcaster: t.broadcaster.displayName
                            }, "ClipsChatCard") : ""),
                            description: t.curator ? Object(r.d)("Clipped by {curator}", {
                                curator: t.curator.displayName
                            }, "ClipsChatCard") : "",
                            previewImageURL: t.thumbnailURL,
                            contentURL: t.url
                        }
                    })
                }, t
            }(a.Component),
            u = function(e) {
                return {
                    variables: {
                        slug: e.slug
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: e.forceNetworkRequest ? "cache-first" : "cache-only"
                }
            },
            m = Object(o.a)(l, {
                options: u
            })(c);
        n.d(t, !1, function() {
            return 5e3
        }), n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return d
        }), n.d(t, !1, function() {
            return c
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return m
        })
    },
    "607n": function(e, t) {
        e.exports = function(e) {
            return e instanceof Date
        }
    },
    "6Agf": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
            }(i || (i = {}))
    },
    "6CZb": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getTime() > (new Date).getTime()
        }
    },
    "6Rwu": function(e, t) {},
    "6SO/": function(e, t, n) {
        var i = n("gAt4");
        e.exports = function(e, t) {
            var n = i(e, t) / 7;
            return n > 0 ? Math.floor(n) : Math.ceil(n)
        }
    },
    "6Zhv": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e).getTime(),
                a = Number(t);
            return new Date(n + a)
        }
    },
    "6axH": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return 6 === i(e).getDay()
        }
    },
    "6lb1": function(e, t) {},
    "6udH": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return 1 === i(e).getDate()
        }
    },
    "6vcJ": function(e, t) {},
    "6yQB": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("iJpA"),
            o = n("c8Oh"),
            s = n("TToO"),
            l = n("GiK3"),
            d = n("6sO2"),
            c = n("zCIC"),
            u = n("+Znq"),
            m = n("D9fv"),
            p = n("CSlQ"),
            h = n("Odds"),
            g = (n("vQzq"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleLanguageChange = function(e) {
                        var n = e.currentTarget,
                            i = n.parentElement && n.parentElement.getAttribute("data-language-code");
                        i && t.props.updateLanguagePreferences(i, n.checked)
                    }, t.renderLanguageOption = function(e) {
                        return l.createElement(h._7, {
                            padding: {
                                x: 1,
                                y: .5
                            },
                            key: e.code
                        }, l.createElement(h.I, {
                            label: e.label,
                            checked: t.props.languagePreferences.includes(e.code),
                            "data-language-code": e.code,
                            "data-a-target": "language-filter-" + e.code + "-checkbox",
                            onChange: t.handleLanguageChange
                        }))
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.languagePreferences.length;
                    return l.createElement(h._7, {
                        className: "language-select-menu"
                    }, l.createElement(u.a, null, l.createElement(h.u, {
                        "data-test-selector": "language-dropdown-button",
                        "data-a-target": "language-filter-dropdown",
                        dropdown: !0,
                        type: h.A.Hollow
                    }, l.createElement(h._7, {
                        display: h.Q.Flex
                    }, Object(d.d)("Language", "LanguageSelectMenu"), l.createElement(h._7, {
                        margin: {
                            left: .5
                        }
                    }, 0 !== e && l.createElement(h._11, {
                        type: h._12.Brand,
                        label: e.toString()
                    })))), l.createElement(h.p, {
                        direction: h.q.BottomLeft,
                        noTail: !0,
                        "data-a-target": "language-filter-balloon"
                    }, l.createElement(c.b, {
                        className: "language-select-menu__balloon"
                    }, l.createElement(h._7, {
                        padding: .5
                    }, Object(m.b)().map(this.renderLanguageOption))), l.createElement(h._30, {
                        background: h.m.Alt,
                        borderTop: !0,
                        className: "language-select-menu__footer"
                    }, l.createElement(h.u, {
                        type: h.A.Text,
                        onClick: this.props.clearLanguagePreferences,
                        "data-a-target": "language-clear-all"
                    }, Object(d.d)("Clear all", "LanguageSelectMenu"))))))
                }, t = s.__decorate([Object(p.d)("LanguageSelectMenu")], t)
            }(l.Component));
        var f = Object(i.b)(function(e) {
            return {
                languagePreferences: Object(o.a)(e)
            }
        }, function(e) {
            return Object(a.b)({
                updateLanguagePreferences: r.c,
                clearLanguagePreferences: r.a
            }, e)
        })(g);
        n.d(t, "a", function() {
            return f
        })
    },
    "7EGB": function(e, t, n) {
        var i = n("Jvcu");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, 7 * n)
        }
    },
    "7FW4": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = i.createElement(o._7, {
                padding: 1,
                fullHeight: !0,
                flexDirection: o.S.Column,
                justifyContent: o._6.Center,
                display: o.Q.Flex
            }, i.createElement(o.P, {
                color: o.J.Link,
                fontSize: o.U.Size4,
                noWrap: !0
            }, Object(r.d)("View All", "Following--ViewAllButton")), i.createElement(o.P, {
                color: o.J.Alt2,
                fontSize: o.U.Size4,
                noWrap: !0
            }, e.subHeader));
            e.linkTo && (t = i.createElement(a.a, {
                to: e.linkTo,
                className: "following__view-all__link"
            }, t));
            return i.createElement("div", {
                className: "following__view-all",
                onClick: e.onClickViewAll,
                "data-test-selector": l
            }, i.createElement(o._7, null, i.createElement(o.j, {
                ratio: e.aspectRatio
            }, i.createElement(o._30, {
                background: o.m.Alt2,
                fullHeight: !0
            }, t))))
        };
        var i = n("GiK3"),
            a = (n.n(i), n("F8kA")),
            r = n("6sO2"),
            o = n("Odds"),
            s = n("oHn4"),
            l = (n.n(s), "view-all-button-selector")
    },
    "7LVu": function(e, t) {},
    "7MbV": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_OrbisPresetText"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "platform"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "PlayStation"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "presetText"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 146
            }
        };
        n.loc.source = {
            body: "query Chat_OrbisPresetText ($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\nplatform {\n... on PlayStation {\ntitle {\npresetText\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7Swd": function(e, t, n) {
        var i = n("3EIC");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    "7X7f": function(e, t) {},
    "7Xwz": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return t.setDate(1), t.setHours(0, 0, 0, 0), t
        }
    },
    "7vYp": function(e, t) {},
    "7yyf": function(e, t, n) {
        var i = n("rBmI");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() === a.getTime()
        }
    },
    "81qH": function(e, t, n) {
        "use strict";
        var i = n("aBed");
        n.d(t, "VideoPreviewCard", function() {
            return i.a
        });
        var a = n("a4C9"),
            r = (n.n(a), n("XYqD"));
        n.d(t, "VideoPreviewCardPlaceholder", function() {
            return r.a
        })
    },
    "8Gpr": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getHours()
        }
    },
    "8KV+": function(e, t, n) {
        var i = n("u/4p");
        e.exports = function(e, t, n) {
            var a = i(e, n),
                r = i(t, n);
            return a.getTime() === r.getTime()
        }
    },
    "8QR2": function(e, t, n) {
        var i = n("xA5w"),
            a = 864e5;
        e.exports = function(e, t, n, r) {
            var o = i(e).getTime(),
                s = i(t).getTime(),
                l = i(n).getTime(),
                d = i(r).getTime();
            if (o > s || l > d) throw new Error("The start of the range cannot be after the end of the range");
            if (!(o < d && l < s)) return 0;
            var c = (d > s ? s : d) - (l < o ? o : l);
            return Math.ceil(c / a)
        }
    },
    "90yy": function(e, t) {},
    "91zu": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "IncomingRaidLine_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "50"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query IncomingRaidLine_Channel($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\ndisplayName\nprofileImageURL(width: 50)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "97Ye": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "LatestVideosFromFollowedCarousel_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followedVideos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "30"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "sort"
                                    },
                                    value: {
                                        kind: "EnumValue",
                                        value: "TIME"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PreviewCardVideo"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 239
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/video-preview-card/models/preview-card-video-fragment.gql"\nquery LatestVideosFromFollowedCarousel_CurrentUser {\ncurrentUser {\nid\nfollowedVideos(first: 30 sort: TIME) {\nedges {\nnode {\n...PreviewCardVideo\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("qjMx").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "9Jn5": function(e, t, n) {
        var i = n("zZbG");
        e.exports = function(e, t) {
            return i(e) - i(t)
        }
    },
    "9fnI": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 149
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/cheer-fragment.gql"\nquery ChatList_Bits($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("576g").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "9r5b": function(e, t, n) {
        var i = n("nfOx");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    "9u8h": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("Aj/L"),
            o = function() {
                function e() {}
                return e.get = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.getOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.put = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.putOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.post = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.postOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.delete = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.deleteOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.request = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        var a, r, o, s;
                        return i.__generator(this, function(l) {
                            switch (l.label) {
                                case 0:
                                    return t = this.constructOptions(t, n), a = t.headers ? t.headers["Content-Type"] : void 0, r = this.serialize(t.body, a), o = i.__assign({}, t, {
                                        body: r
                                    }), [4, this._fetch(e, o)];
                                case 1:
                                    return s = l.sent(), [4, this.constructLegacyAPIResponse(s)];
                                case 2:
                                    return [2, l.sent()]
                            }
                        })
                    })
                }, e.requestOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        var a, r;
                        return i.__generator(this, function(o) {
                            switch (o.label) {
                                case 0:
                                    return o.trys.push([0, 2, , 3]), [4, this.request(e, t, n)];
                                case 1:
                                    if ((a = o.sent()).error || a.requestError) throw new Error("Error while making request");
                                    return r = i.__assign({}, a, {
                                        body: a.body
                                    }), [2, Promise.resolve(r)];
                                case 2:
                                    throw o.sent();
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.getAPIURL = function(e) {
                    return new URL(e, a.o.config.apiBaseURL)
                }, e.constructLegacyAPIResponse = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    t = {
                                        status: e.status
                                    }, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, e.json()];
                                case 2:
                                    return n = i.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                case 3:
                                    return a = i.sent(), e.headers && e.headers.get && (r = e.headers.get("Content-Type")) && -1 !== r.indexOf("application/json") && (t.requestError = a), [3, 4];
                                case 4:
                                    return [2, t]
                            }
                        })
                    })
                }, e._fetch = function(e, t) {
                    return void 0 === t && (t = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, fetch(this.getAPIURL(e).toString(), t)];
                                case 1:
                                    return [2, n.sent()]
                            }
                        })
                    })
                }, e.constructOptions = function(e, t) {
                    return e = Object.assign({}, e, {
                        headers: i.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                    })
                }, e.serialize = function(e, t) {
                    return "application/json; charset=UTF-8" === t ? JSON.stringify(e) : "string" == typeof e ? e : e && FormData.prototype.isPrototypeOf(e) ? e : e ? (this.logger.error(new Error("Could not serialize this request body for the content-type provided."), "attempting to serialize object with a non-JSON content-type", {
                        contentType: t
                    }), null) : null
                }, e.getDefaultHeaders = function(e, t) {
                    var n = a.o.store.getState(),
                        i = {
                            Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                            "Accept-Language": "en-us",
                            "Client-ID": a.o.config.legacyClientID,
                            "X-Requested-With": "XMLHttpRequest"
                        };
                    e.body && FormData.prototype.isPrototypeOf(e.body) || (i["Content-Type"] = "application/json; charset=UTF-8");
                    var o = Object(r.c)(n);
                    return o && (i.Authorization = "OAuth " + o.authToken, o.legacyCSRFToken && (i["Twitch-Api-Token"] = o.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                        i[e] && delete i[e]
                    }), i
                }, e.logger = a.o.logger.withCategory("legacy-api"), e
            }()
    },
    "9uTb": function(e, t) {},
    A2zO: function(e, t, n) {
        var i = n("Be26");
        e.exports = function(e) {
            return i(new Date, e)
        }
    },
    ACWz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatInput"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isEmbedded"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isEmbedded"
                                            }
                                        }
                                    }]
                                }]
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hashtags"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "edges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cursor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "node"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 274
            }
        };
        n.loc.source = {
            body: "query ChatInput($channelLogin: String! $isEmbedded: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nisPartner @include(if: $isEmbedded)\n}\nuser(login: $channelLogin) {\nid\ncheer {\nid\nhashtags {\nedges {\ncursor\nnode {\nid\n}\n}\n}\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    AL3x: function(e, t) {},
    AQmT: function(e, t) {},
    AZvW: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e).getDay();
            return 0 === t && (t = 7), t
        }
    },
    AaXK: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "selectedBadge"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availableBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "availableBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 288
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_Badges($channelLogin: String!) {\ncurrentUser {\nid\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\nuser(login: $channelLogin) {\nid\nself {\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    Akl5: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e),
                n = t.getMonth();
            return t.setFullYear(t.getFullYear(), n + 1, 0), t.setHours(0, 0, 0, 0), t
        }
    },
    AsjC: function(e, t) {},
    AwFw: function(e, t) {},
    B88H: function(e, t) {},
    BBNG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channelUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 437
            }
        };
        n.loc.source = {
            body: "query ViewerCard($targetLogin: String! $channelID: ID!) {\ntargetUser: user(login: $targetLogin) {\nid\nlogin\nbannerImageURL\ndisplayName\nprofileImageURL(width: 70)\n}\nchannelUser: user(id: $channelID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\nemotes {\nid\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\nself {\nisModerator\n}\n}\ncurrentUser {\nlogin\nid\nroles {\nisSiteAdmin\nisStaff\nisGlobalMod\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    BJwU: function(e, t) {},
    BKhP: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Room_BanStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 127
            }
        };
        n.loc.source = {
            body: "query Room_BanStatus($channelID: ID! $userID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    BMQ2: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("CIox"),
            s = n("2KeS"),
            l = n("6sO2"),
            d = n("7vx8"),
            c = n("HZww"),
            u = n("+xm8"),
            m = n("f2i/"),
            p = n("Aj/L"),
            h = function() {
                return function() {}
            }(),
            g = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.joinedRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.joinedRaids = t.joinedRaids), n
                }
                return i.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return this.joinedRaids.has(e.id) || this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        joinedRaids: this.joinedRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.add(e.id);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.delete(e.id);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    l.l.set("raid", e)
                }, t.prototype.getStorageData = function() {
                    return l.l.get("raid", {})
                }, t
            }(h),
            f = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.leftRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.leftRaids = t.leftRaids), n
                }
                return i.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return !this.leftRaids.has(e.id) && !this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        leftRaids: this.leftRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.delete(e.id);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.add(e.id);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    l.l.set("raids-left", e)
                }, t.prototype.getStorageData = function() {
                    return l.l.get("raids-left", {})
                }, t
            }(h),
            v = 3;
        var b = 5,
            k = "raid_update",
            y = function() {
                function e(e, t) {
                    this.id = e.raid.id, this.creatorID = e.raid.creator_id, this.sourceChannelID = e.raid.source_id, this.targetChannelID = e.raid.target_id, this.viewerCount = e.raid.viewer_count, t ? (this.varianceSeconds = t.varianceSeconds, this.totalDurationInSeconds = t.totalDurationInSeconds, this.clientCreatedAtTimestamp = t.clientCreatedAtTimestamp) : (this.varianceSeconds = Math.round(Math.random() * v * 2 - v), this.totalDurationInSeconds = this.getTotalDurationInSeconds(e.raid.remaining_duration_seconds), this.clientCreatedAtTimestamp = (new Date).getTime()), this.isAnnouncing = e.type === k && this.totalDurationInSeconds > 0, this.hasTimeToJoin = this.totalDurationInSeconds > b
                }
                return e.prototype.withMessage = function(t) {
                    return this.id !== t.raid.id ? new e(t) : new e(t, this)
                }, e.prototype.getRemainingJoinTime = function(e) {
                    void 0 === e && (e = new Date);
                    var t = e.getTime() - this.clientCreatedAtTimestamp;
                    return 1e3 * this.totalDurationInSeconds - t
                }, e.prototype.getTotalDurationInSeconds = function(e) {
                    var t = e + this.varianceSeconds;
                    return Math.max(t, 0)
                }, e
            }(),
            _ = "https://api.twitch.tv/kraken";
        var C = n("O0Qc"),
            S = n("Odds"),
            E = (n("z7Cp"), {
                "data-test-selector": "countdown-fill-width"
            }),
            N = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this,
                        t = this.props.startPolling || setInterval;
                    this.intervalID = t(function() {
                        return e.forceUpdate()
                    }, 1e3)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.intervalID)
                }, t.prototype.componentDidUpdate = function() {
                    this.props.getRemainingTime() <= 0 && this.props.onCountdownEnd()
                }, t.prototype.render = function() {
                    var e = this.countdownPercentage + "%";
                    return a.createElement("div", {
                        className: "raid-countdown-bar"
                    }, a.createElement("div", i.__assign({
                        className: "raid-countdown-bar__fill",
                        style: {
                            width: e
                        }
                    }, E)))
                }, Object.defineProperty(t.prototype, "countdownPercentage", {
                    get: function() {
                        return this.props.getRemainingTime() / this.props.totalCountdownTime * 100
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.PureComponent),
            w = (n("mR/9"), n("vH/s")),
            D = {
                medium: "twitch_channel",
                content: "raid_channel"
            };

        function O(e, t) {
            var n = {
                raid_creator_id: Number(t.creatorID),
                raid_source_id: Number(t.sourceChannelID),
                raid_target_id: Number(t.targetChannelID),
                raid_id: t.id
            };
            l.n.track(e, n)
        }
        var I = n("UMQJ");
        var T = Object(d.a)(I, {
            options: function(e) {
                return {
                    variables: {
                        sourceChannelID: e.raid.sourceChannelID,
                        targetChannelID: e.raid.targetChannelID
                    }
                }
            }
        })(function(e) {
            if (e.data.loading || e.data.error) return a.createElement("div", null);
            var t = e.component,
                n = i.__rest(e, ["component"]);
            return a.createElement(t, i.__assign({}, n))
        });
        var M, R = {
                "data-test-selector": "current-raiders"
            },
            x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRemainingTime = function() {
                        return t.props.raid.getRemainingJoinTime()
                    }, t.handleCountdownEnd = function() {
                        t.props.onRaidInvitePeriodOver(t.props.data.targetChannel.login)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e;
                    e = this.props.raid, O(w.SpadeEventType.RaidPromptImpression, e)
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.sourceChannel,
                        n = e.targetChannel;
                    return a.createElement(S._30, {
                        className: "raid-notification",
                        background: S.m.AccentAlt2,
                        color: S.J.Overlay,
                        position: S._14.Absolute,
                        zIndex: S._57.Above,
                        fullWidth: !0
                    }, a.createElement(S._7, {
                        className: "raid-notification__content",
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: S.Q.Flex,
                        justifyContent: S._6.Between
                    }, a.createElement(S._7, {
                        alignItems: S.c.Center,
                        display: S.Q.Flex
                    }, a.createElement(S.l, {
                        size: 36,
                        src: t.profileImageURL,
                        alt: t.displayName
                    }), a.createElement(S._20, {
                        asset: S._21.AngleRight,
                        height: 10
                    }), a.createElement(S.l, {
                        size: 36,
                        src: n.profileImageURL,
                        alt: n.displayName
                    }), a.createElement(S._7, {
                        padding: {
                            left: 1
                        }
                    }, a.createElement(S.P, {
                        color: S.J.OverlayAlt,
                        type: S._44.P,
                        className: "raid-notification__channel-name"
                    }, Object(l.d)("{sourceDisplayName} is", {
                        sourceDisplayName: t.displayName
                    }, "RaidCTASourceChannel")), a.createElement(S.P, null, Object(l.d)("raiding {targetDisplayName}", {
                        targetDisplayName: n.displayName
                    }, "RaidCTATargetChannel")), a.createElement(S.P, i.__assign({
                        bold: !0
                    }, R), Object(l.d)("{viewerCount, plural, one {# raider} other {# raiders}}", {
                        viewerCount: this.props.raid.viewerCount
                    }, "RaidCTATotalRaiders")))), this.props.children), a.createElement(N, {
                        totalCountdownTime: 1e3 * this.props.raid.totalDurationInSeconds,
                        getRemainingTime: this.getRemainingTime,
                        onCountdownEnd: this.handleCountdownEnd
                    }))
                }, t
            }(a.Component),
            L = (M = x, function(e) {
                return a.createElement(T, i.__assign({}, e, {
                    component: M
                }))
            }),
            A = {
                "data-test-selector": "raid-cancel-button"
            },
            F = function(e) {
                return a.createElement(S._7, {
                    alignSelf: S.d.Center
                }, a.createElement(S.u, i.__assign({
                    size: S.y.Large,
                    type: S.A.Hollow,
                    overlay: !0,
                    onClick: e.onCancelRaid
                }, A), Object(l.d)("Cancel", "RaidCTACancel")))
            },
            j = n("bQ8d"),
            U = {
                "data-test-selector": "join-raid-button"
            },
            B = {
                "data-test-selector": "leave-raid-button"
            },
            P = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.timerID = 0, t.handleLeaveRaid = function() {
                        clearTimeout(t.timerID), t.props.onLeaveRaid()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.hasJoined && (this.timerID = setTimeout(this.props.onJoinRaid, Object(j.a)(5e3)))
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.timerID)
                }, t.prototype.render = function() {
                    return this.props.hasJoined ? a.createElement(S._7, {
                        alignSelf: S.d.Center
                    }, a.createElement(S.u, i.__assign({
                        size: S.y.Large,
                        type: S.A.Hollow,
                        overlay: !0,
                        onClick: this.handleLeaveRaid
                    }, B), Object(l.d)("Leave", "RaidCTALeave"))) : a.createElement(S._7, {
                        alignSelf: S.d.Center
                    }, a.createElement(S.u, i.__assign({
                        size: S.y.Large,
                        onClick: this.props.onJoinRaid
                    }, U), Object(l.d)("Join", "RaidCTAJoin")))
                }, t
            }(a.Component),
            V = n("jML9"),
            H = n("OAwv");
        var W = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        raidStorage: new g
                    }, t.unsubscribe = function() {}, t.handlePubsubMessage = function(e) {
                        t.setState(function(t) {
                            return t.raid ? i.__assign({}, t, {
                                raid: t.raid.withMessage(e)
                            }) : i.__assign({}, t, {
                                raid: new y(e)
                            })
                        })
                    }, t.handleRaidInvitePeriodOver = function(e) {
                        var n = t.hasJoinedCurrentRaid;
                        if (t.state.raid && t.setState({
                                raidStorage: t.state.raidStorage.expireRaid(t.state.raid)
                            }), n) {
                            var a = function(e, t) {
                                var n;
                                if (function(e) {
                                        return !e.split("/")[2]
                                    }(e.pathname)) n = "/" + t;
                                else {
                                    if (! function(e) {
                                            return /^\/.+\/chat$/.test(e)
                                        }(e.pathname)) return "";
                                    n = "/" + t + "/chat"
                                }
                                var a = i.__assign({}, H.parse(e.search), {
                                    referrer: "raid"
                                });
                                return n + "?" + H.stringify(a)
                            }(t.props.history.location || window.location, e);
                            a && t.props.history.push(a, D)
                        }
                    }, t.handleJoinRaid = function() {
                        if (t.state.raid) {
                            var e, n = t.state.raid.id;
                            if (t.props.authToken) ! function(e, t) {
                                var n = {
                                    headers: {
                                        "Client-ID": l.o.config.legacyClientID,
                                        Authorization: "OAuth " + t,
                                        Accept: "application/vnd.twitchtv.v5+json"
                                    },
                                    method: "POST"
                                };
                                fetch(_ + "/raids/" + e + "/join", n)
                            }(n, t.props.authToken), e = t.state.raid, O(w.SpadeEventType.RaidPromptJoin, e), t.setState({
                                raidStorage: t.state.raidStorage.joinRaid(t.state.raid)
                            });
                            else t.props.login()
                        }
                    }, t.handleLeaveRaid = function() {
                        var e;
                        t.state.raid && (! function(e, t) {
                            var n = {
                                headers: {
                                    "Client-ID": l.o.config.legacyClientID,
                                    Authorization: "OAuth " + t,
                                    Accept: "application/vnd.twitchtv.v5+json"
                                },
                                method: "POST"
                            };
                            fetch(_ + "/raids/" + e + "/leave", n)
                        }(t.state.raid.id, t.props.authToken), e = t.state.raid, O(w.SpadeEventType.RaidPromptLeave, e), t.setState({
                            raidStorage: t.state.raidStorage.leaveRaid(t.state.raid)
                        }))
                    }, t.handleCancelRaid = function() {
                        t.state.raid && t.props.send(C.a)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.subscribe(this.props.channelID), [4, l.o.experiments.getAssignment("TWILIGHT_RAID_AUTO_JOIN")];
                                case 1:
                                    return "yes" === e.sent() && this.setState({
                                        raidStorage: new f
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return this.shouldRenderRaidNotification ? a.createElement(L, {
                        raid: this.state.raid,
                        onRaidInvitePeriodOver: this.handleRaidInvitePeriodOver
                    }, this.renderCTAButton()) : null
                }, t.prototype.componentWillUnmount = function() {
                    this.unsubscribe()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.props.channelID !== e.channelID && (this.unsubscribe(), this.setState({
                        raid: void 0
                    }, function() {
                        return t.subscribe(e.channelID)
                    }))
                }, t.prototype.subscribe = function(e) {
                    this.unsubscribe = l.o.pubsub.subscribe({
                        topic: Object(c.o)(e),
                        onMessage: this.handlePubsubMessage
                    })
                }, t.prototype.renderCTAButton = function() {
                    return this.isRaidCreator ? a.createElement(F, {
                        onCancelRaid: this.handleCancelRaid
                    }) : a.createElement(P, {
                        onJoinRaid: this.handleJoinRaid,
                        onLeaveRaid: this.handleLeaveRaid,
                        hasJoined: this.hasJoinedCurrentRaid
                    })
                }, Object.defineProperty(t.prototype, "shouldRenderRaidNotification", {
                    get: function() {
                        var e = this.state.raid;
                        return e && e.isAnnouncing && !this.state.raidStorage.isExpired(e) && (e.hasTimeToJoin || this.hasJoinedCurrentRaid)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isRaidCreator", {
                    get: function() {
                        var e = this.state.raid;
                        return e && this.props.data && this.props.data.user && this.props.data.user.id === e.creatorID
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "hasJoinedCurrentRaid", {
                    get: function() {
                        var e = this.state.raid;
                        return !(!e || !this.props.authToken) && (this.isRaidCreator || this.state.raidStorage.hasJoined(e))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.Component),
            G = Object(d.a)(V, {
                skip: function(e) {
                    return !e.authToken
                }
            })(W);
        var Q = Object(r.b)(function(e) {
                return {
                    authToken: Object(p.a)(e)
                }
            }, function(e) {
                return Object(s.b)({
                    login: function() {
                        return Object(m.f)(u.a.RaidJoin)
                    }
                }, e)
            })(G),
            q = Object(o.f)(Q);
        n.d(t, "a", function() {
            return q
        }), n.d(t, !1, function() {
            return Q
        }), n.d(t, !1, function() {})
    },
    BTUa: function(e, t) {},
    Bb5e: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getFullYear() - a.getFullYear()
        }
    },
    Be26: function(e, t, n) {
        var i = n("8KV+");
        e.exports = function(e, t) {
            return i(e, t, {
                weekStartsOn: 1
            })
        }
    },
    Bh5x: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "InvalidRoomView"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "query InvalidRoomView($id: ID!) {\nroom(id: $id) {\nid\nname\nowner {\ndisplayName\nlogin\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Bsuy: function(e, t) {},
    C2pI: function(e, t) {},
    CGWe: function(e, t) {},
    CHV0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Room"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topic"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "readMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sendMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 299
            }
        };
        n.loc.source = {
            body: "query Room($roomID: ID! $channelID: ID! $userID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\nroom(id: $roomID) {\nid\nname\ntopic\nisPreviewable\nminimumAllowedRole\nself {\npermissions {\nreadMessages\nsendMessages\n}\n}\n}\nuser(id: $channelID) {\nid\nself {\nisModerator\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CIWf: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportRoomInfo"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 70
            }
        };
        n.loc.source = {
            body: "query ReportRoomInfo($id: ID!) {\nroom(id: $id) {\nname\nowner {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CVNg: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = Number(t);
            return n.setMonth(0), n.setDate(a), n
        }
    },
    CybZ: function(e, t) {},
    D6ie: function(e, t, n) {
        var i = n("xA5w"),
            a = n("3znZ"),
            r = n("iRXW"),
            o = 6048e5;
        e.exports = function(e) {
            var t = i(e),
                n = a(t).getTime() - r(t).getTime();
            return Math.round(n / o) + 1
        }
    },
    D9fv: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), t.b = function() {
            var e = i.o.intl.getLanguageCode(),
                t = function(t) {
                    return "en" === t.code ? 0 : e && e.startsWith(t.code) ? 1 : 2
                };
            return a.slice().sort(function(e, n) {
                var i = t(e),
                    a = t(n);
                return i !== a ? i - a : i + ":" + e.label < a + ":" + n.label ? -1 : 1
            }).concat(r(!0))
        };
        var i = n("6sO2"),
            a = [{
                code: "ar",
                label: "العربية"
            }, {
                code: "bg",
                label: "Български"
            }, {
                code: "cs",
                label: "Čeština"
            }, {
                code: "da",
                label: "Dansk"
            }, {
                code: "de",
                label: "Deutsch"
            }, {
                code: "el",
                label: "Ελληνικά"
            }, {
                code: "en",
                label: "English"
            }, {
                code: "es",
                label: "Español"
            }, {
                code: "fi",
                label: "Suomi"
            }, {
                code: "fr",
                label: "Français"
            }, {
                code: "hu",
                label: "Magyar"
            }, {
                code: "it",
                label: "Italiano"
            }, {
                code: "ja",
                label: "日本語"
            }, {
                code: "ko",
                label: "한국어"
            }, {
                code: "nl",
                label: "Nederlands"
            }, {
                code: "no",
                label: "Norsk"
            }, {
                code: "pl",
                label: "Polski"
            }, {
                code: "pt",
                label: "Português"
            }, {
                code: "ru",
                label: "Русский"
            }, {
                code: "sk",
                label: "Slovenčina"
            }, {
                code: "sv",
                label: "Svenska"
            }, {
                code: "th",
                label: "ภาษาไทย"
            }, {
                code: "tr",
                label: "Türkçe"
            }, {
                code: "vi",
                label: "Tiếng Việt"
            }, {
                code: "zh-hk",
                label: "中文(粵語)"
            }, {
                code: "zh",
                label: "中文"
            }];

        function r(e) {
            return void 0 === e && (e = !1), [{
                code: "asl",
                label: "American Sign Language"
            }, {
                code: "other",
                label: e ? Object(i.d)("Other", "broadcaster-languages") : "Other"
            }]
        }
        var o = new Set(a.concat(r()).map(function(e) {
            return e.code
        }))
    },
    DS3o: function(e, t) {},
    DVR9: function(e, t) {},
    DY3c: function(e, t) {},
    Dc1A: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Dr46: function(e, t) {},
    E9JN: function(e, t) {},
    EOpv: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        });
        var i, a = n("6sO2");
        ! function(e) {
            e[e.CSGOMap = 0] = "CSGOMap", e[e.CSGOSkillGroup = 1] = "CSGOSkillGroup", e[e.HearthstoneClass = 2] = "HearthstoneClass", e[e.HearthstoneMode = 3] = "HearthstoneMode", e[e.LeagueChampion = 4] = "LeagueChampion", e[e.OverwatchCharacter = 5] = "OverwatchCharacter"
        }(i || (i = {}));
        var r = function(e) {
            switch (e) {
                case i.CSGOMap:
                    return Object(a.d)("Map", "CSGOMapFilter");
                case i.CSGOSkillGroup:
                    return Object(a.d)("Rank", "CSGORankFilter");
                case i.HearthstoneClass:
                    return Object(a.d)("Class", "HearthstoneClassFilter");
                case i.HearthstoneMode:
                    return Object(a.d)("Mode", "HearthstoneModeFilter");
                case i.LeagueChampion:
                    return Object(a.d)("Champion", "LeagueFilter");
                case i.OverwatchCharacter:
                    return Object(a.d)("Hero", "OverwatchFilter");
                default:
                    return ""
            }
        }
    },
    Ecgh: function(e, t) {},
    "Eoz/": function(e, t, n) {
        var i = n("ymQ7"),
            a = n("D6ie"),
            r = n("zZbG"),
            o = n("xA5w"),
            s = n("dH3X"),
            l = n("uyaC");
        var d = {
            M: function(e) {
                return e.getMonth() + 1
            },
            MM: function(e) {
                return u(e.getMonth() + 1, 2)
            },
            Q: function(e) {
                return Math.ceil((e.getMonth() + 1) / 3)
            },
            D: function(e) {
                return e.getDate()
            },
            DD: function(e) {
                return u(e.getDate(), 2)
            },
            DDD: function(e) {
                return i(e)
            },
            DDDD: function(e) {
                return u(i(e), 3)
            },
            d: function(e) {
                return e.getDay()
            },
            E: function(e) {
                return e.getDay() || 7
            },
            W: function(e) {
                return a(e)
            },
            WW: function(e) {
                return u(a(e), 2)
            },
            YY: function(e) {
                return u(e.getFullYear(), 4).substr(2)
            },
            YYYY: function(e) {
                return u(e.getFullYear(), 4)
            },
            GG: function(e) {
                return String(r(e)).substr(2)
            },
            GGGG: function(e) {
                return r(e)
            },
            H: function(e) {
                return e.getHours()
            },
            HH: function(e) {
                return u(e.getHours(), 2)
            },
            h: function(e) {
                var t = e.getHours();
                return 0 === t ? 12 : t > 12 ? t % 12 : t
            },
            hh: function(e) {
                return u(d.h(e), 2)
            },
            m: function(e) {
                return e.getMinutes()
            },
            mm: function(e) {
                return u(e.getMinutes(), 2)
            },
            s: function(e) {
                return e.getSeconds()
            },
            ss: function(e) {
                return u(e.getSeconds(), 2)
            },
            S: function(e) {
                return Math.floor(e.getMilliseconds() / 100)
            },
            SS: function(e) {
                return u(Math.floor(e.getMilliseconds() / 10), 2)
            },
            SSS: function(e) {
                return u(e.getMilliseconds(), 3)
            },
            Z: function(e) {
                return c(e.getTimezoneOffset(), ":")
            },
            ZZ: function(e) {
                return c(e.getTimezoneOffset())
            },
            X: function(e) {
                return Math.floor(e.getTime() / 1e3)
            },
            x: function(e) {
                return e.getTime()
            }
        };

        function c(e, t) {
            t = t || "";
            var n = e > 0 ? "-" : "+",
                i = Math.abs(e),
                a = i % 60;
            return n + u(Math.floor(i / 60), 2) + t + u(a, 2)
        }

        function u(e, t) {
            for (var n = Math.abs(e).toString(); n.length < t;) n = "0" + n;
            return n
        }
        e.exports = function(e, t, n) {
            var i = t ? String(t) : "YYYY-MM-DDTHH:mm:ss.SSSZ",
                a = (n || {}).locale,
                r = l.format.formatters,
                c = l.format.formattingTokensRegExp;
            a && a.format && a.format.formatters && (r = a.format.formatters, a.format.formattingTokensRegExp && (c = a.format.formattingTokensRegExp));
            var u = o(e);
            return s(u) ? function(e, t, n) {
                var i, a, r, o = e.match(n),
                    s = o.length;
                for (i = 0; i < s; i++) a = t[o[i]] || d[o[i]], o[i] = a || ((r = o[i]).match(/\[[\s\S]/) ? r.replace(/^\[|]$/g, "") : r.replace(/\\/g, ""));
                return function(e) {
                    for (var t = "", n = 0; n < s; n++) o[n] instanceof Function ? t += o[n](e, d) : t += o[n];
                    return t
                }
            }(i, r, c)(u) : "Invalid Date"
        }
    },
    Epw6: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e),
                n = t.getFullYear();
            return t.setFullYear(n + 1, 0, 0), t.setHours(23, 59, 59, 999), t
        }
    },
    EsrG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ModUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ModUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "modUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "target"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 119
            }
        };
        n.loc.source = {
            body: "mutation ModUser($input: ModUserInput!){\nmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    F8t6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DeleteRoomModal_DeleteRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DeleteRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "deleteRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "room"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 109
            }
        };
        n.loc.source = {
            body: "mutation DeleteRoomModal_DeleteRoom($input: DeleteRoomInput!) {\ndeleteRoom(input: $input) {\nroom {\nname\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    FNUa: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecentCreatorVideos_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "creatorID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "creatorID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "30"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "sort"
                                    },
                                    value: {
                                        kind: "EnumValue",
                                        value: "TIME"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PreviewCardVideo"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 242
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/video-preview-card/models/preview-card-video-fragment.gql"\nquery RecentCreatorVideos_User($creatorID: ID) {\nuser(id: $creatorID) {\nid\nlogin\nvideos(first: 30 sort: TIME) {\nedges {\nnode {\n...PreviewCardVideo\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("qjMx").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    FsFC: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = s(e);
            return t.months ? r(i.MONTH, t.months) : t.weeks && t.days ? r(i.WEEK, t.weeks) + " " + r(i.DAY, t.days) : t.weeks ? r(i.WEEK, t.weeks) : t.days && t.hours ? r(i.DAY, t.days) + " " + r(i.HOUR, t.hours) : t.days ? r(i.DAY, t.days) : t.hours && t.minutes ? r(i.HOUR, t.hours) + " " + r(i.MINUTE, t.minutes) : t.hours ? r(i.HOUR, t.hours) : t.minutes && t.seconds ? r(i.MINUTE, t.minutes) + " " + r(i.SECOND, t.seconds) : t.minutes ? r(i.MINUTE, t.minutes) : r(i.SECOND, t.seconds || 0)
        }, t.b = function(e) {
            var t = s(e);
            return t.months ? o(i.MONTH, t.months) : t.weeks && t.days ? "" + o(i.WEEK, t.weeks) + o(i.DAY, t.days) : t.weeks ? o(i.WEEK, t.weeks) : t.days && t.hours ? "" + o(i.DAY, t.days) + o(i.HOUR, t.hours) : t.days ? o(i.DAY, t.days) : t.hours && t.minutes ? "" + o(i.HOUR, t.hours) + o(i.MINUTE, t.minutes) : t.hours ? o(i.HOUR, t.hours) : t.minutes && t.seconds ? "" + o(i.MINUTE, t.minutes) + o(i.SECOND, t.seconds) : t.minutes ? o(i.MINUTE, t.minutes) : o(i.SECOND, t.seconds || 0)
        };
        var i, a = n("6sO2");

        function r(e, t) {
            switch (e) {
                case i.SECOND:
                    return Object(a.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                        secondCount: t
                    }, "formatDuration");
                case i.MINUTE:
                    return Object(a.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                        minuteCount: t
                    }, "formatDuration");
                case i.HOUR:
                    return Object(a.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                        hourCount: t
                    }, "formatDuration");
                case i.DAY:
                    return Object(a.d)("{dayCount, plural, one {# day} other {# days}}", {
                        dayCount: t
                    }, "formatDuration");
                case i.WEEK:
                    return Object(a.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                        weekCount: t
                    }, "formatDuration");
                case i.MONTH:
                    return Object(a.d)("{monthCount, plural, one {# month} other {# months}}", {
                        monthCount: t
                    }, "formatDuration");
                default:
                    return ""
            }
        }

        function o(e, t) {
            switch (e) {
                case i.SECOND:
                    return Object(a.d)("{secondCount}s", {
                        secondCount: t
                    }, "formatDuration");
                case i.MINUTE:
                    return Object(a.d)("{minuteCount}m", {
                        minuteCount: t
                    }, "formatDuration");
                case i.HOUR:
                    return Object(a.d)("{hourCount}h", {
                        hourCount: t
                    }, "formatDuration");
                case i.DAY:
                    return Object(a.d)("{dayCount}d", {
                        dayCount: t
                    }, "formatDuration");
                case i.WEEK:
                    return Object(a.d)("{weekCount}w", {
                        weekCount: t
                    }, "formatDuration");
                case i.MONTH:
                    return Object(a.d)("{monthCount}mo", {
                        monthCount: t
                    }, "formatDuration");
                default:
                    return ""
            }
        }

        function s(e) {
            if (e < 60) return {
                seconds: e
            };
            var t = Math.floor(e / 60),
                n = e % 60;
            if (t < 60) return n ? {
                minutes: t,
                seconds: n
            } : {
                minutes: t
            };
            var i = Math.floor(t / 60);
            if (t %= 60, i < 24) return t ? {
                hours: i,
                minutes: t
            } : {
                hours: i
            };
            var a = Math.floor(i / 24);
            if (i %= 24, a < 7) return i ? {
                days: a,
                hours: i
            } : {
                days: a
            };
            if (a <= 26) {
                var r = Math.floor(a / 7);
                return (a %= 7) ? {
                    weeks: r,
                    days: a
                } : {
                    weeks: r
                }
            }
            return {
                months: Math.round((a + 3) / 30)
            }
        }! function(e) {
            e[e.SECOND = 0] = "SECOND", e[e.MINUTE = 1] = "MINUTE", e[e.HOUR = 2] = "HOUR", e[e.DAY = 3] = "DAY", e[e.WEEK = 4] = "WEEK", e[e.MONTH = 5] = "MONTH"
        }(i || (i = {}))
    },
    Fvfv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomsMemberOptions"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 74
            }
        };
        n.loc.source = {
            body: "query RoomsMemberOptions {\nuser(id: $id) {\nid\nself {\nisChannelMember\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "G/62": function(e, t) {},
    G7No: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() - a.getTime()
        }
    },
    GI7G: function(e, t, n) {
        var i = n("xA5w"),
            a = n("orNa"),
            r = n("NKE6");
        e.exports = function(e, t) {
            var n = i(e),
                o = i(t),
                s = r(n, o),
                l = Math.abs(a(n, o));
            return n.setMonth(n.getMonth() - s * l), s * (l - (r(n, o) === -s))
        }
    },
    GJxf: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("TToO"),
            r = n("HW6M"),
            o = n("KSGD"),
            s = n("GiK3"),
            l = n("6sO2"),
            d = n("vH/s"),
            c = n("CSlQ"),
            u = n("81qH"),
            m = n("Odds");
        n("yF7E");
        var p, h, g = "carousel-content",
            f = 10,
            v = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentElementIndex: 0,
                        childrenRendered: !1,
                        hasTrackedItemSectionLoad: !1
                    }, t.onPreviewCardClick = function(e) {
                        if (t.props.videos) {
                            var n = t.props.videos[e];
                            l.n.trackItemSectionClick(a.__assign({
                                carousel_content: t.props.tracking.content,
                                item_id: n.id,
                                item_index: e,
                                item_type: d.TwitchDataType.Video,
                                item_viewcount: n.viewCount,
                                location: t.props.tracking.location
                            }, t.props.tracking.source))
                        }
                    }, t.getVideoCards = function() {
                        var e = t.props.videos;
                        if (null === e) {
                            for (var n = [], i = 0; i < f; i++) n.push(s.createElement(u.VideoPreviewCardPlaceholder, {
                                key: "carousel-placeholder-" + i
                            }));
                            return n
                        }
                        for (var a = [], r = 0; r < e.length; r++)
                            if (r < f || t.props.firstPageLoaded) {
                                if (e[r].id === t.props.currentlyWatchingVideoID) continue;
                                a.push(s.createElement(u.VideoPreviewCard, {
                                    context: t.props.listContext,
                                    collectionID: t.props.collectionID,
                                    onClick: t.onPreviewCardClick,
                                    key: "video-" + r,
                                    tracking: {
                                        content: t.props.tracking.content,
                                        content_index: r,
                                        medium: t.props.tracking.medium
                                    },
                                    overrideImageInteractivity: t.props.overrideCardImageInteractivity,
                                    video: e[r]
                                }))
                            } else a.push(s.createElement(u.VideoPreviewCardPlaceholder, {
                                key: "carousel-placeholder-" + r
                            }));
                        return a
                    }, t.moveCarouselForward = function() {
                        if (!t.isForwardButtonDisabled() && t.props.videos) {
                            var e = t.getNumberOfVisibleElements();
                            t.state.currentElementIndex + 2 * e > t.props.videos.length ? t.setState({
                                currentElementIndex: t.props.videos.length - e
                            }) : t.setState({
                                currentElementIndex: t.state.currentElementIndex + e
                            })
                        }
                    }, t.moveCarouselBackward = function() {
                        if (!t.isBackButtonDisabled()) {
                            var e = t.getNumberOfVisibleElements();
                            t.setState({
                                currentElementIndex: Math.max(t.state.currentElementIndex - e, 0)
                            })
                        }
                    }, t.isForwardButtonDisabled = function() {
                        if (!t.carouselContainerRef) return !1;
                        if (t.props.videos) {
                            var e = 0,
                                n = t.carouselContainerRef.querySelector("[data-js-selector=" + g + "]");
                            return n && (e = n.childElementCount), t.getLastVisibleIndex() >= e
                        }
                        return !0
                    }, t.isBackButtonDisabled = function() {
                        return 0 === t.state.currentElementIndex
                    }, t.getLastVisibleIndex = function() {
                        return t.state.currentElementIndex + t.getNumberOfVisibleElements()
                    }, t.getNumberOfVisibleElements = function() {
                        var e = t.carouselContainerRef.getBoundingClientRect(),
                            n = e.left,
                            i = e.right - n,
                            a = t.getVideoCardEndPadding();
                        return Math.floor((i + a) / t.getChildWidth())
                    }, t.refHandler = function(e) {
                        return t.carouselContainerRef = e
                    }, t.getChildWidth = function() {
                        if (!t.carouselContainerRef) return 0;
                        var e = t.carouselContainerRef.querySelector("[data-js-selector=" + g + "]");
                        return e && e.children.length ? e.children[0].getBoundingClientRect().width : 0
                    }, t.getVideoCardEndPadding = function() {
                        var e = t.carouselContainerRef.querySelector("[data-js-selector=" + g + "]");
                        if (!e || 0 === e.children.length) return 0;
                        var n = window.getComputedStyle(e.children[0]).paddingRight || "";
                        return 2 * parseInt(n, 10) || 0
                    }, t.pixelOffset = function() {
                        return t.getChildWidth() * t.state.currentElementIndex * -1
                    }, t.transformString = function() {
                        return "translate3d(" + t.pixelOffset() + "px, 0px, 0px)"
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this.context.registerReceiver;
                    e && (this.unregisterScrollHandler = e(this)), null !== this.props.videos && this.onDataLoaded()
                }, t.prototype.componentDidUpdate = function(e) {
                    !e.videos && this.props.videos && this.onDataLoaded()
                }, t.prototype.componentWillUnmount = function() {
                    this.unregisterScrollHandler && this.unregisterScrollHandler()
                }, t.prototype.render = function() {
                    return s.createElement(m._1, {
                        margin: {
                            y: 1
                        },
                        position: m._14.Relative
                    }, s.createElement("div", {
                        className: "video-carousel",
                        ref: this.refHandler
                    }, s.createElement(m._7, {
                        className: "video-carousel__child-container",
                        overflow: m._10.Hidden,
                        position: m._14.Relative,
                        fullWidth: !0,
                        "data-test-selector": "child-container"
                    }, s.createElement(m._1, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement("div", {
                        className: "video-carousel__body",
                        style: {
                            transform: this.transformString()
                        },
                        "data-test-selector": "carousel-body"
                    }, s.createElement(m._50, {
                        noWrap: !0,
                        noGrow: !0,
                        childWidth: this.props.videoCardSize || m._51.Large,
                        gutterSize: m._52.Small,
                        "data-js-selector": g
                    }, this.getVideoCards())))), s.createElement(m._7, {
                        className: "video-carousel__nav",
                        display: m.Q.Flex,
                        alignItems: m.c.Center,
                        position: m._14.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        fullHeight: !0
                    }, s.createElement(_, {
                        direction: b.DirectionPrevious,
                        disabled: !this.state.childrenRendered || this.isBackButtonDisabled(),
                        onClickHandler: this.moveCarouselBackward
                    })), s.createElement(m._7, {
                        className: "video-carousel__nav",
                        display: m.Q.Flex,
                        alignItems: m.c.Center,
                        position: m._14.Absolute,
                        attachTop: !0,
                        attachRight: !0,
                        fullHeight: !0
                    }, s.createElement(_, {
                        direction: b.DirectionNext,
                        disabled: !this.state.childrenRendered || this.isForwardButtonDisabled(),
                        onClickHandler: this.moveCarouselForward
                    }))))
                }, t.prototype.checkVisible = function(e) {
                    this.props.videos && this.props.videos.length > 0 && !1 === this.state.hasTrackedItemSectionLoad && function(e) {
                        if (!e) return !1;
                        var t = e.getBoundingClientRect(),
                            n = window.innerWidth,
                            i = window.innerHeight;
                        return !(t.right < 0 || t.bottom < 0 || t.left > n || t.top > i)
                    }(this.carouselContainerRef) && this.trackSectionLoad()
                }, t.prototype.trackSectionLoad = function() {
                    for (var e = this.props.videos ? this.props.videos : [], t = [], n = [], i = 0, r = e; i < r.length; i++) {
                        var o = r[i];
                        t.push(o.id), n.push(o.viewCount)
                    }
                    l.n.trackItemSectionLoad(a.__assign({
                        carousel_content: this.props.tracking.content,
                        location: this.props.tracking.location,
                        rendered_item_count: e.length,
                        rendered_item_list: t,
                        rendered_item_types: [d.TwitchDataType.Video],
                        rendered_items_viewcounts: n
                    }, this.props.tracking.source)), this.setState({
                        hasTrackedItemSectionLoad: !0
                    })
                }, t.prototype.onDataLoaded = function() {
                    var e = this;
                    this.state.childrenRendered || this.setState({
                        childrenRendered: !0
                    }, function() {
                        e.checkVisible()
                    })
                }, t.contextTypes = {
                    registerReceiver: o.func
                }, t
            }(s.Component),
            b = {
                DirectionPrevious: "previous",
                DirectionNext: "next"
            },
            k = ((p = {})[b.DirectionPrevious] = "previous", p[b.DirectionNext] = "next", p),
            y = ((h = {})[b.DirectionPrevious] = m._21.AngleLeft, h[b.DirectionNext] = m._21.AngleRight, h),
            _ = function(e) {
                var t, n = k[e.direction],
                    i = ((t = {})[b.DirectionPrevious] = Object(l.d)("previous", "CarouselNavButton"), t[b.DirectionNext] = Object(l.d)("next", "CarouselNavButton"), t),
                    a = r("video-carousel__button", "video-carousel__button--" + n, {
                        "video-carousel__button--disabled": e.disabled
                    });
                return s.createElement(m._7, {
                    className: a,
                    position: m._14.Relative,
                    display: m.Q.Flex,
                    alignItems: m.c.Stretch
                }, s.createElement(m.v, {
                    "data-test-selector": n + "-button",
                    onClick: e.onClickHandler,
                    disabled: e.disabled,
                    ariaLabel: i[e.direction],
                    icon: y[e.direction],
                    size: m.w.Large
                }))
            },
            C = Object(c.d)("VideoCarousel", {
                autoReportInteractive: !0
            })(v);
        n.d(t, "a", function() {
            return S
        });
        var S = Object(i.b)(function(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded
            }
        })(C)
    },
    "GS+L": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "MemberList"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "members"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "type"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 122
            }
        };
        n.loc.source = {
            body: "query MemberList($roomID: ID!) {\nroom(id: $roomID) {\nid\nmembers(first: 100) {\nedges {\nnode {\nid\ndisplayName\n}\ntype\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    GuSj: function(e, t) {},
    GvNH: function(e, t, n) {
        var i = n("WNGz");
        e.exports = function(e) {
            return i(e).getTime() === i(new Date).getTime()
        }
    },
    GxDs: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("F8kA"),
            o = n("yDzg"),
            s = n("vH/s"),
            l = n("6sO2"),
            d = n("Odds"),
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasImageLoadingError: !1
                    }, t.handleImageError = function() {
                        t.setState({
                            hasImageLoadingError: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                    this.setState({
                        hasImageLoadingError: !1
                    })
                }, t.prototype.render = function() {
                    var e = l.a.defaultStreamPreviewURL;
                    return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), a.createElement(d.D, {
                        aspect: d.k.Aspect16x9,
                        alt: this.props.altText,
                        src: e,
                        onError: this.handleImageError
                    })
                }, t
            }(a.Component),
            u = (n("1tZx"), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
            m = {
                ERROR: "chat-card-error",
                TITLE: "chat-card-title",
                DESCRIPTION: "chat-card-description"
            },
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderErrorCard = function() {
                        var e = a.createElement("img", {
                            "data-test-selector": m.ERROR,
                            src: u,
                            className: "chat-card__error-img"
                        });
                        return t.renderCardContent(e, t.props.error)
                    }, t.renderCardContent = function(e, t) {
                        var n, i;
                        return t ? (n = a.createElement(d.P, {
                            type: d._44.Span,
                            fontSize: d.U.Size5,
                            "data-test-selector": m.TITLE,
                            title: t.title
                        }, t.title), i = a.createElement(d.P, {
                            type: d._44.Span,
                            fontSize: d.U.Size6,
                            color: d.J.Alt2,
                            "data-test-selector": m.DESCRIPTION
                        }, t.description)) : (e = a.createElement(d._13, {
                            overlay: !0
                        }), n = a.createElement(d._13, {
                            width: 180
                        }), i = a.createElement(d._13, {
                            width: 120
                        })), a.createElement(d._30, {
                            background: d.m.Base,
                            display: d.Q.Flex,
                            flexWrap: d.T.NoWrap,
                            padding: .5
                        }, a.createElement(d._30, {
                            className: "chat-card__preview-img",
                            background: d.m.Alt2,
                            display: d.Q.Flex,
                            alignItems: d.c.Center,
                            justifyContent: d._6.Center,
                            flexShrink: 0
                        }, e), a.createElement(d._7, {
                            display: d.Q.Flex,
                            alignItems: d.c.Center,
                            overflow: d._10.Hidden
                        }, a.createElement(d._7, {
                            padding: {
                                left: 1
                            },
                            fullWidth: !0
                        }, a.createElement(d._7, {
                            className: "chat-card__title",
                            ellipsis: !0
                        }, n), a.createElement(d._7, {
                            ellipsis: !0
                        }, i))))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e;
                    if (this.props.error) e = this.renderErrorCard();
                    else if (this.props.data) {
                        var t = Object(o.a)(this.props.data.contentURL, {
                                tt_medium: s.PageviewMedium.Chat,
                                tt_content: s.PageviewContent.ChatCard
                            }),
                            n = a.createElement(c, {
                                altText: this.props.data.title,
                                imageURL: this.props.data.previewImageURL
                            });
                        e = a.createElement(r.a, {
                            className: "chat-card__link",
                            to: t,
                            target: "_blank"
                        }, this.renderCardContent(n, {
                            title: this.props.data.title,
                            description: this.props.data.description
                        }))
                    } else e = this.renderCardContent();
                    return a.createElement(d._30, {
                        elevation: 1,
                        margin: {
                            top: .5
                        }
                    }, e)
                }, t
            }(a.Component),
            h = p;
        n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return h
        })
    },
    "H/22": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.e = function(e, t, n, i) {
            var d = {
                    badges: null,
                    bits: 0,
                    color: "",
                    displayName: "",
                    id: "",
                    userID: n,
                    username: n,
                    userType: o.a.User,
                    emotes: null
                },
                c = Object(l.a)(t, d, r.a, !1);
            return {
                type: s.b.AutoMod,
                autoModType: s.a.MessageRejectedPrompt,
                id: function(e) {
                    return e + "-automod-rejected"
                }(e),
                category: i,
                rejectedMessage: a.__assign({}, c, {
                    type: s.b.Message,
                    messageType: s.c.Post,
                    id: e
                })
            }
        }, t.d = function() {
            return {
                id: Object(d.a)("automod-message-rejected"),
                type: s.b.AutoMod,
                autoModType: s.a.MessageRejected
            }
        }, t.b = function() {
            return {
                id: Object(d.a)("automod-message-allowed"),
                type: s.b.AutoMod,
                autoModType: s.a.MessageAllowed
            }
        }, t.c = function() {
            return {
                id: Object(d.a)("automod-message-denied"),
                type: s.b.AutoMod,
                autoModType: s.a.MessageDenied
            }
        }, t.f = function(e, t, n, a) {
            return {
                id: Object(d.a)("channel-moderation-action"),
                type: s.b.ModerationAction,
                moderationActionType: e,
                level: i.Channel,
                createdByLogin: t,
                createdByUserID: n,
                args: a
            }
        }, t.g = function(e, t, n, a, r, o, l) {
            return {
                id: Object(d.a)("channel-moderation-action"),
                type: s.b.ModerationAction,
                moderationActionType: e,
                level: i.User,
                createdByLogin: t,
                createdByUserID: n,
                targetUserID: a,
                targetUserLogin: r,
                duration: o,
                reason: l
            }
        };
        var i, a = n("TToO"),
            r = n("iydZ"),
            o = n("6Agf"),
            s = n("qkCi"),
            l = n("l21v"),
            d = n("INp2");
        ! function(e) {
            e[e.Channel = 0] = "Channel", e[e.User = 1] = "User"
        }(i || (i = {}))
    },
    HXCM: function(e, t) {
        e.exports = function() {
            var e = new Date,
                t = e.getFullYear(),
                n = e.getMonth(),
                i = e.getDate(),
                a = new Date(0);
            return a.setFullYear(t, n, i + 1), a.setHours(23, 59, 59, 999), a
        }
    },
    HuX0: function(e, t) {},
    I7cV: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = t && Number(t.weekStartsOn) || 0,
                a = i(e),
                r = a.getDay(),
                o = 6 + (r < n ? -7 : 0) - (r - n);
            return a.setDate(a.getDate() + o), a.setHours(23, 59, 59, 999), a
        }
    },
    IEOs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_DenyRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DenyRejectedChatMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "denyRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\ndenyRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    IJO1: function(e, t) {},
    INp2: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e + "-" + Date.now()
        }
    },
    IOwa: function(e, t, n) {
        "use strict";
        var i, a, r, o = n("TToO"),
            s = n("HW6M"),
            l = n("GiK3"),
            d = n("6sO2"),
            c = n("2o2f"),
            u = n("Odds"),
            m = (n("CybZ"), (i = {})[c.a.Live] = "stream-type-indicator--live", i[c.a.Premiere] = "stream-type-indicator--premiere", i[c.a.Rerun] = "stream-type-indicator--rerun", i[c.a.WatchParty] = "stream-type-indicator--rerun", i),
            p = ((a = {})[c.a.Premiere] = u._21.VideoPremiere, a[c.a.Rerun] = u._21.VideoRerun, a[c.a.WatchParty] = u._21.VideoRerun, a),
            h = ((r = {})[c.a.Premiere] = u._22.Live, r[c.a.Rerun] = u._22.Inherit, r[c.a.WatchParty] = u._22.Inherit, r),
            g = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(u._30, {
                        className: this.getClassNames(),
                        color: u.J.Overlay,
                        background: u.m.Overlay,
                        padding: {
                            x: .5
                        },
                        borderRadius: u.s.Small,
                        display: u.Q.Flex
                    }, l.createElement(u._7, {
                        display: u.Q.Flex,
                        alignItems: u.c.Center,
                        margin: {
                            right: .5
                        }
                    }, this.getIcon()), l.createElement(u.P, {
                        type: u._44.Span
                    }, this.getLabel()))
                }, t.prototype.getClassNames = function() {
                    var e = {
                        "stream-type-indicator": !0
                    };
                    return e[m[this.props.type]] = !0, s(e)
                }, t.prototype.getIcon = function() {
                    return this.props.hosting ? l.createElement(u._30, {
                        borderRadius: u.s.Rounded,
                        className: "stream-type-indicator__hosting-dot"
                    }) : this.props.type === c.a.Live ? l.createElement(u._7, {
                        className: "stream-type-indicator__live-wrapper",
                        display: u.Q.Flex,
                        alignItems: u.c.Center
                    }, l.createElement(u.F, {
                        status: u.H.Live,
                        size: u.G.Small
                    })) : l.createElement(u._20, {
                        asset: p[this.props.type],
                        type: h[this.props.type],
                        width: 14,
                        height: 14
                    })
                }, t.prototype.getLabel = function() {
                    if (this.props.hosting) return Object(d.d)("Hosting", "StreamTypeIndicator");
                    switch (this.props.type) {
                        case c.a.Live:
                            return Object(d.d)("LIVE", "StreamTypeIndicator");
                        case c.a.Premiere:
                            return Object(d.d)("Premiere", "StreamTypeIndicator");
                        case c.a.Rerun:
                        case c.a.WatchParty:
                            return Object(d.d)("Rerun", "StreamTypeIndicator");
                        default:
                            return ""
                    }
                }, t
            }(l.Component);
        n.d(t, "a", function() {
            return g
        })
    },
    ISok: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("vKFS"),
            o = n("WxKK"),
            s = n("CSlQ"),
            l = n("81qH"),
            d = n("XYqD"),
            c = n("Odds"),
            u = function(e) {
                var t = [],
                    n = null;
                if (null === e.videos)
                    for (var s = void 0 === e.placeholderCount ? 20 : e.placeholderCount, u = 0; u < s; u++) t.push(a.createElement(d.a, {
                        key: u
                    }));
                else e.viewAllButtonProps && (n = a.createElement(o.a, i.__assign({}, e.viewAllButtonProps))), t = e.videos.map(function(t, n) {
                    return a.createElement(c._7, {
                        "data-a-target": "video-tower-card-" + n,
                        key: "video-" + n,
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(l.VideoPreviewCard, {
                        hideGameArt: e.hideGameArt,
                        context: e.listContext || r.b.MixedGameAndChannelList,
                        tracking: {
                            content: e.trackingContent,
                            content_index: n,
                            medium: e.trackingMedium
                        },
                        video: t
                    }))
                });
                return a.createElement(c._50, {
                    gutterSize: c._52.Small,
                    childWidth: e.videoCardSize || c._51.Large,
                    placeholderItems: 20
                }, t, n)
            },
            m = Object(s.d)("VideoTower", {
                autoReportInteractive: !0
            })(u);
        n.d(t, !1, function() {
            return 20
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return m
        })
    },
    Ic9h: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return g
        });
        var i = n("TToO"),
            a = n("HW6M"),
            r = (n.n(a), n("KSGD")),
            o = (n.n(r), n("GiK3")),
            s = (n.n(o), n("F8kA")),
            l = n("5kgt"),
            d = n("SI0h"),
            c = n("eXld"),
            u = n("2aoH"),
            m = n("Odds"),
            p = n("1E7T"),
            h = (n.n(p), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.currentPath = t.props.location.pathname, t.onHistoryChange = function(e) {
                        e.pathname !== t.currentPath && t.context.scrollToTop(), t.currentPath = e.pathname
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t = a(((e = {})["channel-page-layout__scroll-area--theatre-mode"] = !!this.props.theatreMode, e));
                    return o.createElement(m._7, i.__assign({
                        className: "chennel-page-layout",
                        display: m.Q.Flex,
                        flexDirection: m.S.Column,
                        flexWrap: m.T.NoWrap,
                        fullHeight: !0
                    }, Object(l.a)(this.props)), o.createElement(c.b, {
                        className: t,
                        suppressScrollX: !0,
                        addPaddingWhenPlayerIsPersisting: !0
                    }), o.createElement(u.a, null, o.createElement(d.a, {
                        currentPage: this.props.currentPage,
                        channelLogin: this.props.ownerLogin || ""
                    })), o.createElement(m._7, {
                        padding: {
                            top: 2,
                            x: 3
                        }
                    }, this.props.children))
                }, t.prototype.componentDidMount = function() {
                    this.unsubscribeFromHistory = this.props.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.unsubscribeFromHistory()
                }, t.contextTypes = {
                    scrollToTop: r.func
                }, t
            }(o.Component)),
            g = Object(s.f)(h)
    },
    IwGL: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), n.d(t, "LatestVideosFromFollowedCarouselComponent", function() {
            return h
        }), n.d(t, "LatestVideosFromFollowedCarousel", function() {
            return g
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = (n.n(a), n("3zLD")),
            o = (n.n(r), n("6sO2")),
            s = n("vKFS"),
            l = n("7vx8"),
            d = n("CSlQ"),
            c = n("GJxf"),
            u = n("dc2a"),
            m = n("Odds"),
            p = n("97Ye"),
            h = (n.n(p), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.data && !this.props.data.loading && this.props.data.currentUser && Object(u.a)(this.props.data.currentUser.followedVideos) || null;
                    return !this.props.data || this.props.data.loading || e && 0 !== e.length ? a.createElement("div", null, a.createElement(m._7, {
                        padding: {
                            bottom: 1
                        }
                    }, a.createElement(m.P, {
                        type: m._44.H4,
                        fontSize: m.U.Size5,
                        transform: m._43.Uppercase,
                        color: m.J.Alt2
                    }, Object(o.d)("Latest videos", "LatestVideosFromFollowedCarousel"))), a.createElement(c.a, {
                        currentlyWatchingVideoID: this.props.currentlyWatchingVideoID,
                        listContext: s.b.MixedGameAndChannelList,
                        overrideCardImageInteractivity: !0,
                        tracking: {
                            content: this.props.tracking.content,
                            location: this.props.tracking.location,
                            medium: this.props.tracking.medium,
                            source: {}
                        },
                        videoCardSize: m._51.Medium,
                        videos: e
                    })) : null
                }, t
            }(a.Component)),
            g = Object(r.compose)(Object(l.a)(p), Object(d.d)("LatestVideosFromFollowedCarousel"))(h)
    },
    J7iJ: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RitualsEnabled_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "ritualsEnabled"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 153
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/rituals-enabled-fragment.gql"\nquery RitualsEnabled_User($id: ID!) {\nchannel: user(id: $id) {\n...ritualsEnabled\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("v2Uk").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    J8WN: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = (n.n(a), n("Odds")),
            o = n("yU6t"),
            s = (n.n(o), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDraggingOver: !1
                    }, t.onDragEnter = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !0
                        })
                    }, t.onDragLeave = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !1
                        })
                    }, t.onFileInputChange = function(e) {
                        e.preventDefault(), t.finalizeSelections(e.target.files), e.target.value = ""
                    }, t.onFileDrop = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !1
                        }), t.finalizeSelections(e.dataTransfer.files)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(r.R, {
                        dragOver: this.state.isDraggingOver,
                        error: this.props.error
                    }, a.createElement(r._1, {
                        position: r._14.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        fullWidth: !0,
                        fullHeight: !0,
                        zIndex: r._57.Above
                    }, a.createElement("input", {
                        "data-a-target": "file-picker-input",
                        "data-test-selector": "file-picker-input",
                        className: "drag-and-drop-file-picker__input",
                        accept: this.props.allowedFileTypes.join(","),
                        multiple: this.props.multiFile || !1,
                        onChange: this.onFileInputChange,
                        type: "file",
                        onDragLeave: this.onDragLeave,
                        onDragEnter: this.onDragEnter,
                        onDrop: this.onFileDrop
                    })), this.props.children)
                }, t.prototype.finalizeSelections = function(e) {
                    e && this.props.onFilesSubmitted(Array.from(e))
                }, t
            }(a.Component))
    },
    JNsx: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getMinutes()
        }
    },
    JURy: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e),
                n = new Date(0);
            return n.setFullYear(t.getFullYear(), 0, 1), n.setHours(0, 0, 0, 0), n
        }
    },
    JWRd: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelVideosPage_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelOwnerLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "broadcastType"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "BroadcastType"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoSort"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "VideoSort"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelOwnerLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "profileImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "70"
                                            }
                                        }],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "broadcastType"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "sort"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "videoSort"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PreviewCardVideo"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 494
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/video-preview-card/models/preview-card-video-fragment.gql"\nquery ChannelVideosPage_User($channelOwnerLogin: String! $limit: Int $cursor: Cursor $broadcastType: BroadcastType $videoSort: VideoSort) {\nuser(login: $channelOwnerLogin) {\nid\nlogin\ndisplayName\nhosting {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\nvideos(first: $limit after: $cursor type: $broadcastType sort: $videoSort) {\nedges {\ncursor\nnode {\n...PreviewCardVideo\n}\n}\npageInfo {\nhasNextPage\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("qjMx").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    Javx: function(e, t, n) {
        var i = n("b7g8");
        e.exports = function(e) {
            return i(e) ? 366 : 365
        }
    },
    JtUK: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n) {
            void 0 === n && (n = !1);
            if (n) switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to timeout {login}.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAdmin:
                    return Object(i.d)("You cannot timeout admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAlreadyBanned:
                    return Object(i.d)("{login} is already banned in this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAnonymous:
                    return Object(i.d)("You cannot timeout anonymous users.", "BanUserErrorCode");
                case a.a.TargetIsBroadcaster:
                    return Object(i.d)("You cannot timeout the broadcaster.", "BanUserErrorCode");
                case a.a.TargetIsGlobalMod:
                    return Object(i.d)("You cannot timeout global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsMod:
                    return Object(i.d)("You cannot timeout moderator {login} unless you are the owner of this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsSelf:
                    return Object(i.d)("You cannot timeout yourself.", "BanUserErrorCode");
                case a.a.TargetIsStaff:
                    return Object(i.d)("You cannot timeout staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to timeout doesn't exist.", "BanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result.")
            } else switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to ban {login}.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAdmin:
                    return Object(i.d)("You cannot ban admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAlreadyBanned:
                    return Object(i.d)("{login} is currently banned in this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAnonymous:
                    return Object(i.d)("You cannot ban anonymous users.", "BanUserErrorCode");
                case a.a.TargetIsBroadcaster:
                    return Object(i.d)("You cannot ban the broadcaster.", "BanUserErrorCode");
                case a.a.TargetIsGlobalMod:
                    return Object(i.d)("You cannot ban global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsMod:
                    return Object(i.d)("You cannot ban moderator {login} unless you are the owner of this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsSelf:
                    return Object(i.d)("You cannot ban yourself.", "BanUserErrorCode");
                case a.a.TargetIsStaff:
                    return Object(i.d)("You cannot ban staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to ban doesn't exist.", "BanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result.")
            }
        };
        var i = n("6sO2"),
            a = n("1OO3")
    },
    Jtuq: function(e, t, n) {
        var i = n("lQzg"),
            a = n("xA5w");
        e.exports = function(e, t) {
            var n = a(e),
                r = a(t);
            return 4 * (n.getFullYear() - r.getFullYear()) + (i(n) - i(r))
        }
    },
    Jvcu: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = Number(t);
            return n.setDate(n.getDate() + a), n
        }
    },
    Jy6n: function(e, t) {},
    K7ZZ: function(e, t, n) {
        var i = n("zZbG"),
            a = n("3znZ");
        e.exports = function(e) {
            var t = i(e),
                n = new Date(0);
            n.setFullYear(t + 1, 0, 4), n.setHours(0, 0, 0, 0);
            var r = a(n);
            return r.setMilliseconds(r.getMilliseconds() - 1), r
        }
    },
    KBUQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            var t = this;
            return Object(r.a)(o, {
                props: function(n) {
                    return {
                        unbanUserMutation: function(i) {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var t;
                                return a.__generator(this, function(a) {
                                    switch (a.label) {
                                        case 0:
                                            if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                            a.label = 1;
                                        case 1:
                                            return a.trys.push([1, 3, , 4]), [4, n.mutate({
                                                variables: {
                                                    input: {
                                                        channelID: t,
                                                        bannedUserLogin: i
                                                    }
                                                }
                                            })];
                                        case 2:
                                            return [2, a.sent().data];
                                        case 3:
                                            throw a.sent(), new Error("Unable to unban user");
                                        case 4:
                                            return [3, 6];
                                        case 5:
                                            throw new Error("Unban user mutation is not ready");
                                        case 6:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i, a = n("TToO"),
            r = n("7vx8"),
            o = n("l669");
        n.n(o);
        ! function(e) {
            e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetNotBanned = "TARGET_NOT_BANNED"
        }(i || (i = {}))
    },
    KNSH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_UserData"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 95
            }
        };
        n.loc.source = {
            body: "query Chat_UserData {\nuser {\nid\ndisplayName\nlogin\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KWLn: function(e, t) {},
    KfLc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), n.d(t, "d", function() {
            return s
        }), n.d(t, "b", function() {
            return l
        }), n.d(t, "e", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var i = n("6sO2"),
            a = n("vH/s"),
            r = n("aSvS"),
            o = function(e) {
                var t = {
                    action: r.b.DismissToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            s = function(e) {
                var t = {
                    action: r.b.RedeemToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: e.userMessage
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            l = function(e) {
                var t = {
                    action: r.b.RequestEligibility,
                    channel_id: e.channelID,
                    user_banner: null,
                    user_message: null
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            d = function(e) {
                var t = {
                    action: r.b.RequestToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            c = function(e) {
                var t = {
                    action: e.action,
                    channel_id: e.channelID
                };
                i.n.track(a.SpadeEventType.NewChatterOnboardingInteraction, t)
            }
    },
    KnZO: function(e, t) {},
    Kthq: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n) {
            void 0 === n && (n = !1);
            if (n) switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to untimeout {login}.", {
                        login: e
                    }, "UnbanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to untimeout doesn't exist.", "UnbanUserErrorCode");
                case a.a.TargetNotBanned:
                    return Object(i.d)("{login} is not currently timed out from this channel.", {
                        login: e
                    }, "UnbanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result")
            } else switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to unban {login}.", {
                        login: e
                    }, "UnbanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to unban doesn't exist.", "UnbanUserErrorCode");
                case a.a.TargetNotBanned:
                    return Object(i.d)("{login} is not currently banned from this channel.", {
                        login: e
                    }, "UnbanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result")
            }
        };
        var i = n("6sO2"),
            a = n("KBUQ")
    },
    L0RX: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    LLTj: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return t.setMinutes(0, 0, 0), t
        }
    },
    LM6T: function(e, t) {},
    LU20: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return t.setSeconds(59, 999), t
        }
    },
    LgcN: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        }), n.d(t, "b", function() {
            return o
        }), n.d(t, "c", function() {
            return s
        }), n.d(t, "d", function() {
            return l
        });
        var i = n("TToO"),
            a = this,
            r = function() {
                return i.__awaiter(a, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        switch (e.label) {
                            case 0:
                                return [4, n.e(90).then(n.bind(null, "tk3B"))];
                            case 1:
                                return [2, e.sent()]
                        }
                    })
                })
            },
            o = function() {
                return i.__awaiter(a, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        switch (e.label) {
                            case 0:
                                return [4, n.e(89).then(n.bind(null, "e/M0"))];
                            case 1:
                                return [2, e.sent()]
                        }
                    })
                })
            },
            s = function() {
                return i.__awaiter(a, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        switch (e.label) {
                            case 0:
                                return [4, n.e(88).then(n.bind(null, "Dan5"))];
                            case 1:
                                return [2, e.sent()]
                        }
                    })
                })
            },
            l = function() {
                return i.__awaiter(a, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        switch (e.label) {
                            case 0:
                                return [4, n.e(87).then(n.bind(null, "sQp1"))];
                            case 1:
                                return [2, e.sent()]
                        }
                    })
                })
            }
    },
    Lwev: function(e, t) {},
    "Lx+S": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("CIox"),
            s = n("2KeS"),
            l = n("NXs7"),
            d = n("Ouuk"),
            c = n("jF7o"),
            u = n("+xm8"),
            m = n("f2i/"),
            p = n("NikC"),
            h = n("Aj/L"),
            g = n("0nzt"),
            f = n("vh75"),
            v = n("ass3"),
            b = n("TnJK"),
            k = n("O0Qc"),
            y = n("VsL1"),
            _ = n("Umoc"),
            C = n("6sO2"),
            S = n("zCIC"),
            E = n("7vx8"),
            N = n("HW6M"),
            w = n("6BvN"),
            D = [{
                name: "Red",
                hex: "#FF0000"
            }, {
                name: "Blue",
                hex: "#0000FF"
            }, {
                name: "Green",
                hex: "#008000"
            }, {
                name: "Firebrick",
                hex: "#B22222"
            }, {
                name: "Coral",
                hex: "#FF7F50"
            }, {
                name: "Yellow Green",
                hex: "#9ACD32"
            }, {
                name: "Orange Red",
                hex: "#FF4500"
            }, {
                name: "Sea Green",
                hex: "#2E8B57"
            }, {
                name: "Goldenrod",
                hex: "#DAA520"
            }, {
                name: "Chocolate",
                hex: "#D2691E"
            }, {
                name: "Cadet Blue",
                hex: "#5F9EA0"
            }, {
                name: "Dodger Blue",
                hex: "#1E90FF"
            }, {
                name: "Hot Pink",
                hex: "#FF69B4"
            }, {
                name: "Blue Violet",
                hex: "#8A2BE2"
            }, {
                name: "Spring Green",
                hex: "#00FF7F"
            }],
            O = n("Odds"),
            I = (n("90yy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onKeyPress = function(e) {
                        if (e.charCode === w.a.Enter || e.charCode === w.a.Space) {
                            var n = e.currentTarget.getAttribute("data-color");
                            t.selectColor(n)
                        }
                    }, t.onColorSelected = function(e) {
                        var n = e.currentTarget.getAttribute("data-color");
                        t.selectColor(n)
                    }, t.selectColor = function(e) {
                        e && t.props.onColorSelected(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = D.map(function(t) {
                            var n = t.hex === e.props.selectedColor,
                                i = {
                                    "color-chooser": !0,
                                    "color-chooser--selected": n
                                };
                            return a.createElement("div", {
                                role: "radio",
                                "aria-checked": n,
                                key: t.hex,
                                "data-color": t.hex,
                                title: t.name,
                                onClick: e.onColorSelected,
                                onKeyPress: e.onKeyPress,
                                className: N(i),
                                style: {
                                    backgroundColor: t.hex
                                },
                                "data-test-selector": "color_swatch_" + t.hex,
                                "data-a-target": "color_swatch_" + t.hex,
                                tabIndex: 0
                            })
                        }),
                        n = Object(C.d)("Name Color", "ChatSettings"),
                        i = a.createElement(O.P, {
                            transform: O._43.Uppercase,
                            color: O.J.Alt2
                        }, n);
                    return this.props.borderTop && (i = a.createElement(O._30, {
                        margin: {
                            top: 2
                        },
                        borderTop: !0,
                        padding: {
                            top: 2
                        }
                    }, i)), a.createElement("div", null, a.createElement(O._30, {
                        margin: {
                            bottom: 1
                        },
                        background: O.m.Base,
                        color: O.J.Base,
                        display: O.Q.InlineFlex,
                        flexDirection: O.S.Column,
                        fullWidth: !0
                    }, i), a.createElement(O._1, {
                        margin: {
                            y: 1
                        },
                        display: O.Q.Flex,
                        flexWrap: O.T.Wrap
                    }, a.createElement("div", {
                        role: "radiogroup",
                        "aria-label": n
                    }, t, a.createElement(O.P, {
                        fontSize: O.U.Size7
                    }, a.createElement("a", {
                        href: "https://twitch.tv/products/turbo?ref=more_colors_direct"
                    }, Object(C.d)("more colors →", "ChatSettings"))))))
                }, t
            }(a.Component)),
            T = n("OAwv"),
            M = n("AaXK"),
            R = (n("7LVu"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onGlobalBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setGlobalBadge(t.props.userLogin, n || "")
                    }, t.onGlobalBadgeKeyPress = function(e) {
                        if (e.charCode === w.a.Enter || e.charCode === w.a.Space) {
                            var n = e.currentTarget.getAttribute("data-badge");
                            t.setGlobalBadge(t.props.userLogin, n || "")
                        }
                    }, t.onChannelBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                    }, t.onChannelBadgeKeyPress = function(e) {
                        if (e.charCode === w.a.Enter || e.charCode === w.a.Space) {
                            var n = e.currentTarget.getAttribute("data-badge");
                            t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.currentUser ? a.createElement("div", null, a.createElement(I, {
                        selectedColor: this.props.userChatColor,
                        onColorSelected: this.props.onColorSelected,
                        borderTop: !0
                    }), this.getBadgeChooser()) : null
                }, t.prototype.getBadgeChooser = function() {
                    var e = this;
                    if (this.props.data) {
                        var t = this.props.data.user.self.availableBadges,
                            n = this.props.data.user.self.selectedBadge,
                            i = this.props.data.currentUser.availableBadges,
                            r = this.props.data.currentUser.selectedBadge;
                        if (!t) return null;
                        var o = void 0 === this.state.channelBadgeID && n ? n.setID : this.state.channelBadgeID,
                            s = !o,
                            l = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": s
                            },
                            d = Object(C.d)("No channel badges :(", "ChatSettings");
                        t && t.length > 0 && (d = t.map(function(t) {
                            var i = Boolean(n && t.setID === o),
                                r = {
                                    "edit-appearance__badge-chooser": !0,
                                    "edit-appearance__badge-chooser--selected": i
                                };
                            return a.createElement("div", {
                                role: "radio",
                                "aria-checked": i,
                                "data-badge": t.setID,
                                onClick: e.onChannelBadgeClicked,
                                onKeyPress: e.onChannelBadgeKeyPress,
                                key: t.setID + "/" + t.version,
                                className: N(r),
                                "data-test-selector": "channel_badge_" + t.setID,
                                "data-a-target": "channel_badge_" + t.setID,
                                tabIndex: 0
                            }, a.createElement(O._47, {
                                label: t.title
                            }, a.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(a.createElement("div", {
                            key: "none",
                            role: "radio",
                            "aria-checked": s,
                            "data-badge": "",
                            onClick: this.onChannelBadgeClicked,
                            onKeyPress: this.onChannelBadgeKeyPress,
                            className: N(l),
                            "data-test-selector": "channel_badge_none",
                            "data-a-target": "channel_badge_none",
                            tabIndex: 0
                        }, a.createElement(O._47, {
                            label: Object(C.d)("Same as Global", "ChatSettings")
                        }, a.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, a.createElement(O._20, {
                            asset: O._21.Global
                        })))));
                        var c = void 0 === this.state.globalBadgeID && r ? r.setID : this.state.globalBadgeID,
                            u = !c,
                            m = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": u
                            },
                            p = Object(C.d)("No global badges :(", "ChatSettings");
                        return i && i.length > 0 && (p = i.map(function(t) {
                            var n = Boolean(r && t.setID === c),
                                i = {
                                    "edit-appearance__badge-chooser": !0,
                                    "edit-appearance__badge-chooser--selected": n
                                };
                            return a.createElement("div", {
                                role: "radio",
                                "aria-checked": n,
                                "data-badge": t.setID,
                                onClick: e.onGlobalBadgeClicked,
                                onKeyPress: e.onGlobalBadgeKeyPress,
                                key: t.setID + "/" + t.version,
                                className: N(i),
                                "data-test-selector": "global_badge_" + t.setID,
                                "data-a-target": "global_badge_" + t.setID,
                                tabIndex: 0
                            }, a.createElement(O._47, {
                                label: t.title
                            }, a.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(a.createElement("div", {
                            role: "radio",
                            "aria-checked": u,
                            key: "none",
                            "data-badge": "",
                            onClick: this.onGlobalBadgeClicked,
                            onKeyPress: this.onGlobalBadgeKeyPress,
                            className: N(m),
                            "data-test-selector": "global_badge_none",
                            "data-a-target": "global_badge_none",
                            tabIndex: 0
                        }, a.createElement(O._47, {
                            label: Object(C.d)("None", "ChatSettings")
                        }, a.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, a.createElement(O._20, {
                            asset: O._21.Ban
                        }))))), a.createElement("div", null, a.createElement(O._30, {
                            background: O.m.Base,
                            color: O.J.Base,
                            display: O.Q.InlineFlex,
                            flexDirection: O.S.Column,
                            fullWidth: !0
                        }, a.createElement(O._30, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, a.createElement(O._47, {
                            align: O._48.Left,
                            label: Object(C.d)("Your global badge is shown when chatting and whispering.", "ChatSettings"),
                            width: 175
                        }, a.createElement(O.P, {
                            color: O.J.Alt2,
                            transform: O._43.Uppercase
                        }, Object(C.d)("Global Badge [?]", "ChatSettings")))), a.createElement(O._1, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: O.Q.Flex,
                            "data-a-target": "global-badge-selector"
                        }, a.createElement("div", {
                            role: "radiogroup"
                        }, p))), a.createElement(O._30, {
                            background: O.m.Base,
                            color: O.J.Base,
                            display: O.Q.InlineFlex,
                            flexDirection: O.S.Column,
                            fullWidth: !0
                        }, a.createElement(O._30, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, a.createElement(O._47, {
                            align: O._48.Left,
                            label: Object(C.d)("Change the badge shown when chatting in this channel.", "ChatSettings"),
                            width: 175
                        }, a.createElement(O.P, {
                            color: O.J.Alt2,
                            transform: O._43.Uppercase
                        }, Object(C.d)("Channel Badge [?]", "ChatSettings")))), a.createElement(O._1, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: O.Q.Flex,
                            "data-a-target": "channel-badge-selector"
                        }, a.createElement("div", {
                            role: "radiogroup"
                        }, d))))
                    }
                }, t.prototype.setChannelBadge = function(e, t, n) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return a = {
                                        "Client-ID": C.o.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, [4, fetch("https://api.twitch.tv/kraken/users/" + t + "/chat/channels/" + e + "/badges", {
                                        method: "PUT",
                                        body: T.stringify({
                                            selected_badge: n
                                        }),
                                        headers: a
                                    })];
                                case 1:
                                    return (r = i.sent()) && r.ok && (this.props.onBadgesChanged(), this.setState({
                                        channelBadgeID: n
                                    })), [2]
                            }
                        })
                    })
                }, t.prototype.setGlobalBadge = function(e, t) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var n, a;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return n = {
                                        "Client-ID": C.o.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, [4, fetch("https://api.twitch.tv/kraken/users/" + e + "/chat/badges", {
                                        method: "PUT",
                                        body: T.stringify({
                                            selected_badge: t
                                        }),
                                        headers: n
                                    }).catch(console.error)];
                                case 1:
                                    return (a = i.sent()) && a.ok && (this.props.onBadgesChanged(), this.setState({
                                        globalBadgeID: t
                                    })), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(E.a)(M, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(a.Component)),
            x = n("+Znq"),
            L = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(O._7, {
                        "data-toggle-balloon-id": "raids-follower-only-tooltip",
                        margin: {
                            left: .5
                        },
                        position: O._14.Relative
                    }, a.createElement(O._47, {
                        align: O._48.Right,
                        direction: O._49.Top,
                        display: O.Q.InlineFlex,
                        label: this.props.text,
                        width: 175,
                        show: !0
                    }, a.createElement(O._1, {
                        alignItems: O.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: O.Q.InlineFlex,
                        justifyContent: O._6.Center
                    }, a.createElement(O.P, {
                        color: O.J.Overlay,
                        fontSize: O.U.Size8,
                        type: O._44.Span,
                        "data-test-selector": "raids-follower-only-tooltip"
                    }, "i"))))
                }, t
            }(a.Component),
            A = n("V5M+"),
            F = n("oSFp"),
            j = n("F8kA"),
            U = n("9u8h"),
            B = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.targetChannelID = t.props.targetChannelID, t
                }
                return i.__extends(t, e), t.fetchRecentRaidsList = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, U.a.get("/kraken/raids?client_id=" + C.a.authSettings.clientID + "&api_version=" + C.a.defaultAPIVersion + "&target_id=" + e)];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), C.j.error(n, "Couldn't fetch raids list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.deserialize = function(e) {
                    var t = [];
                    if (e.body && e.body.raids) {
                        for (var n in e.body.raids)
                            if (n.hasOwnProperty) {
                                var i = {
                                    raidID: e.body.raids[n]._id,
                                    raidAt: e.body.raids[n].raid_at,
                                    userID: e.body.raids[n].creator_user._id,
                                    name: e.body.raids[n].creator_user.name
                                };
                                t.push(i)
                            }
                        return t
                    }
                    return []
                }, t
            }(a.Component),
            P = n("oIkB"),
            V = n("g7wA"),
            H = n("O9wU"),
            W = n("jPU6"),
            G = n("y1/w"),
            Q = (n("MSFW"), n("L0RX")),
            q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onUsernameClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-username"),
                            i = e.currentTarget.getAttribute("data-raid-id") || "";
                        n && t.props.onUsernameClick(n, H.a.recent_raids, i)
                    }, t.onBanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.banUser)(Object(P.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t.onUnbanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.unbanUser)(Object(P.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(O._7, {
                        key: "recent-raids-layout2-" + this.props.raiderUserID,
                        className: "recent-raids-item",
                        flexDirection: O.S.Row,
                        display: O.Q.Flex,
                        fullWidth: !0
                    }, a.createElement(O._7, {
                        flexDirection: O.S.Row,
                        display: O.Q.Flex,
                        fullWidth: !0,
                        justifyContent: O._6.Between
                    }, a.createElement(O.P, {
                        bold: !0
                    }, a.createElement("a", {
                        className: "recent-raids-item__name",
                        "data-username": this.props.channelLogin,
                        "data-raid-id": this.props.raidID,
                        onClick: this.onUsernameClick,
                        href: "#"
                    }, this.props.channelLogin)), a.createElement(O._7, {
                        position: O._14.Relative
                    }, a.createElement(O._7, {
                        className: "recent-raids-item__timestamp"
                    }, Object(V.s)(Date.parse(this.props.timestamp))), this.getCardSlideInContent())))
                }, t.prototype.getCardSlideInContent = function() {
                    if (!this.props.slideInContent) return null;
                    var e = null;
                    return e = this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? a.createElement(O.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: O.y.Small,
                        type: O.A.Text,
                        onClick: this.onUnbanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(C.d)("Unban", "RecentRaid")) : a.createElement(O.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: O.y.Small,
                        type: O.A.Text,
                        onClick: this.onBanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(C.d)("Ban", "RecentRaid")), a.createElement(O._7, {
                        key: "recent-raids-layout-" + this.props.raiderUserID,
                        className: "recent-raids-item__hover-content",
                        zIndex: O._57.Above,
                        "data-a-target": "recent-raids-item-hover"
                    }, this.props.slideInContent, e)
                }, t = i.__decorate([Object(E.a)(G, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.raiderUserID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(E.a)(W, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var i = e.readQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        }
                                    });
                                    i && (t && t.data && (i.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        },
                                        data: i
                                    }))
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(E.a)(Q, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: t.raiderUserID,
                                            channelID: t.channelID
                                        }
                                    });
                                    if (n) {
                                        var a = i.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                        e.writeQuery({
                                            query: G,
                                            variables: {
                                                targetUserID: t.raiderUserID,
                                                channelID: t.channelID
                                            },
                                            data: a
                                        })
                                    }
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(a.Component),
            z = n("mw/a"),
            Y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onReportButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-raid-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: z.a.Raid,
                                targetUserID: i,
                                contentID: n,
                                extra: JSON.stringify({
                                    channel_id: i.toString()
                                }),
                                additionalTrackingID: t.props.targetChannelID
                            },
                            title: Object(C.d)("Report {channelDisplayName}", {
                                channelDisplayName: a
                            }, "ReportUserModal")
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, B.fetchRecentRaidsList(this.props.targetChannelID)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        raidChannels: e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = [],
                        t = [],
                        n = {};
                    if (void 0 !== this.state.raidChannels)
                        for (var i in 0 === this.state.raidChannels.length && e.push(a.createElement(O.P, {
                                key: "recent-raids-no-raids",
                                type: O._44.P
                            }, Object(C.d)("You have no recent raids", "RecentRaids"))), this.state.raidChannels)
                            if (i.hasOwnProperty) {
                                var r = this.state.raidChannels[i];
                                this.state.raidChannels.hasOwnProperty(i) && void 0 === n[r.userID] && (t.push(a.createElement(q, {
                                    key: "recent-raids-item-" + r.userID,
                                    slideInContent: [a.createElement(O._30, {
                                        key: "recent-raids-item-report-area-" + r.userID,
                                        color: O.J.Alt2,
                                        display: O.Q.InlineFlex
                                    }, a.createElement(O.u, {
                                        key: "recent-raid-report-button",
                                        size: O.y.Small,
                                        type: O.A.Text,
                                        onClick: this.onReportButtonClick,
                                        "data-a-target": "recent-raid-item-button",
                                        "data-raid-id": r.raidID,
                                        "data-target-user-login": r.name,
                                        "data-target-user-id": r.userID
                                    }, Object(C.d)("Report", "RecentRaid")), a.createElement(O._47, {
                                        align: O._48.Right,
                                        width: 150,
                                        label: Object(C.d)("Banning a user prevents them from future chatting or raiding", "RecentRaid")
                                    }))],
                                    timestamp: r.raidAt,
                                    channelLogin: r.name,
                                    raiderUserID: r.userID,
                                    channelID: this.props.targetChannelID,
                                    raiderLogin: r.name,
                                    raidID: r.raidID,
                                    onUsernameClick: this.props.onUsernameClick,
                                    showReportUserModal: this.props.showReportUserModal
                                })), n[r.userID] = !0)
                            }
                    var o = null;
                    return this.props.recentRaids ? a.createElement(O._7, {
                        key: "recent-raids"
                    }, a.createElement(O._7, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(O.P, {
                        color: O.J.Link,
                        type: O._44.Span
                    }, a.createElement(j.a, {
                        to: {
                            pathname: "/broadcast/dashboard/settings/raids"
                        }
                    }, Object(C.d)("Manage Raid Settings", "RecentRaids")))), e, t) : (o = a.createElement(O._7, {
                        key: "recent-raids",
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: O.Q.Flex,
                        justifyContent: O._6.Between,
                        alignItems: O.c.Center
                    }, a.createElement(O.N, {
                        hoverUnderlineNone: !0,
                        onClick: this.props.onClickRecentRaids,
                        "data-test-selector": "recent-raids-button"
                    }, Object(C.d)("See Recent Raids", "ChatSettings")), this.props.tooltipText && a.createElement(O._7, {
                        position: O._14.Relative
                    }, a.createElement(O._47, {
                        align: O._48.Right,
                        direction: O._49.Top,
                        display: O.Q.InlineFlex,
                        label: this.props.tooltipText,
                        width: 175,
                        show: !0
                    }, a.createElement(O._1, {
                        alignItems: O.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: O.Q.InlineFlex,
                        justifyContent: O._6.Center,
                        margin: {
                            left: .5
                        }
                    }, a.createElement(O.P, {
                        color: O.J.Overlay,
                        fontSize: O.U.Size8,
                        type: O._44.Span
                    }, "i"))))), a.createElement(O._7, null, o))
                }, t
            }(a.Component);
        var J = Object(r.b)(function() {
                return {}
            }, function(e) {
                return Object(s.b)({
                    showReportUserModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(A.d)(F.a, t)
                    }
                }, e)
            })(Y),
            $ = n("UzRK"),
            K = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleFollowerDurationClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-duration");
                        n && t.onFollowerDurationChange(parseInt(n, 10))
                    }, t.onClickRecentRaids = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickRecentRaids()
                    }, t.onChatClear = function() {
                        t.props.onChatCommand(Object(k.c)())
                    }, t.getSelectedFollowerDuration = function() {
                        if (t.props.followerModeEnabled) return t.props.followerModeDuration;
                        var e = t.props.lastUsedFollowerDurations[t.props.channelLogin];
                        return "number" == typeof e ? e : $.a
                    }, t.onFollowerModeToggle = function() {
                        if (t.props.followerModeEnabled) t.props.onChatCommand(Object(k.d)()), t.props.onFollowerModeDisable();
                        else {
                            var e = t.getSelectedFollowerDuration();
                            t.props.onChatCommand(Object(k.f)(e)), t.props.onFollowerModeDurationChange(e), t.props.onFollowerModeEnable()
                        }
                        Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.followerModeEnabled,
                            settingName: b.a.FollowerMode
                        })
                    }, t.onSlowModeToggle = function() {
                        t.props.slowModeEnabled ? (t.props.onChatCommand(Object(k.e)()), t.props.onSlowModeDisable()) : (t.props.onChatCommand(Object(k.g)()), t.props.onSlowModeEnable()), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.slowModeEnabled,
                            settingName: b.a.SlowMode
                        })
                    }, t.onFollowerDurationChange = function(e) {
                        Object(y.c)(t.props.channelLogin, e), t.props.onFollowerModeDurationPreferenceChange(t.props.channelLogin, e), t.props.followerModeEnabled && (t.props.onChatCommand(Object(k.f)(e)), t.props.onFollowerModeDurationChange(e)), Object(_.c)({
                            channelLogin: t.props.channelLogin,
                            followerModeOn: t.props.followerModeEnabled,
                            isHostMode: t.props.isHostMode,
                            newValue: e
                        })
                    }, t.onModIconsToggle = function() {
                        Object(y.b)("showModIcons", !t.props.showModerationIcons), t.props.showModerationIcons ? t.props.onModIconsDisable() : t.props.onModIconsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showModerationIcons,
                            settingName: b.a.ShowModIcons
                        })
                    }, t.onShowModerationActionsToggle = function() {
                        Object(y.b)("showModerationActions", !t.props.showModerationActions), t.props.showModerationActions ? t.props.onShowModerationActionsDisable() : t.props.onShowModerationActionsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showModerationActions,
                            settingName: b.a.ShowModActions
                        })
                    }, t.onShowAutoModActionsToggle = function() {
                        Object(y.b)("showAutoModActions", !t.props.showAutoModActions), t.props.showAutoModActions ? t.props.onShowAutoModActionsDisable() : t.props.onShowAutoModActionsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showAutoModActions,
                            settingName: b.a.ShowAutoModActions
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (!this.props.isCurrentUserModerator) return null;
                    var t = this.getSelectedFollowerDuration(),
                        n = $.b.map(function(n) {
                            return a.createElement(O._5, {
                                "data-duration": n,
                                key: n,
                                onClick: e.handleFollowerDurationClick,
                                selected: n === t
                            }, a.createElement(O._7, {
                                padding: .5
                            }, Object($.c)(n)))
                        });
                    return a.createElement(O._30, {
                        key: "mod-tools",
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, a.createElement(O._7, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(O.P, {
                        color: O.J.Alt2,
                        transform: O._43.Uppercase
                    }, Object(C.d)("Mod Tools", "ChatSettings"))), a.createElement(O._7, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.showModerationIcons,
                        "data-a-target": "mod-icons-checkbox",
                        "data-test-selector": "mod-icons-checkbox",
                        id: "chat-settings-mod-icons",
                        label: Object(C.d)("Mod Icons", "ChatSettings"),
                        onChange: this.onModIconsToggle
                    })), a.createElement(O._30, {
                        margin: {
                            bottom: 1
                        },
                        display: O.Q.Flex,
                        justifyContent: O._6.Between,
                        flexWrap: O.T.Wrap
                    }, a.createElement(O.I, {
                        checked: this.props.followerModeEnabled,
                        "data-a-target": "follower-mode-checkbox",
                        "data-test-selector": "follower-mode-checkbox",
                        id: "chat-settings-followers-only",
                        label: Object(C.d)("Followers-Only Chat", "ChatSettings"),
                        onChange: this.onFollowerModeToggle
                    }), this.props.showRaidsTooltip ? a.createElement(L, {
                        text: Object(C.d)("Prevent offensive raiders from chatting.", "RaidReportingChat")
                    }) : null, a.createElement(O._7, {
                        alignItems: O.c.Center,
                        display: O.Q.Flex,
                        flexWrap: O.T.NoWrap,
                        justifyContent: O._6.Between
                    }, a.createElement(O._7, {
                        margin: {
                            right: .5
                        }
                    }, a.createElement(O.P, {
                        color: O.J.Alt2,
                        fontSize: O.U.Size7,
                        type: O._44.Span
                    }, Object(C.d)("Must have followed for", "ChatSettings"))), a.createElement(O._7, {
                        className: "chat-settings__mod-tools-follower-button",
                        flexShrink: 0
                    }, a.createElement(x.a, {
                        display: O.Q.InlineBlock
                    }, a.createElement(O.u, {
                        size: O.y.Small,
                        type: O.A.Text,
                        "data-a-target": "follower-mode-dropdown",
                        "data-test-selector": "follower-mode-duration-menu",
                        dropdown: !0
                    }, Object($.d)(t)), a.createElement(O.p, {
                        direction: O.q.TopRight
                    }, a.createElement(O._7, {
                        padding: .5
                    }, a.createElement(O.P, {
                        color: O.J.Alt2
                    }, Object(C.d)("Followers can chat if they have followed for at least", "ChatSettings"))), a.createElement(O._30, {
                        color: O.J.Link
                    }, n)))))), a.createElement(O._7, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.slowModeEnabled,
                        "data-a-target": "slow-mode-checkbox",
                        "data-test-selector": "slow-mode-checkbox",
                        id: "chat-settings-slow-mode",
                        label: Object(C.d)("Slow Mode", "ChatSettings"),
                        onChange: this.onSlowModeToggle
                    })), a.createElement(O._7, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.showModerationActions,
                        "data-a-target": "show-mod-actions-checkbox",
                        "data-test-selector": "show-mod-actions",
                        id: "chat-settings-show-mod-actions",
                        label: Object(C.d)("Show Moderation Actions", "ChatSettings"),
                        onChange: this.onShowModerationActionsToggle
                    })), a.createElement(O._7, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.showAutoModActions,
                        "data-a-target": "show-automod-messages-checkbox",
                        "data-test-selector": "show-automod-messages",
                        id: "chat-settings-show-automod-messages",
                        label: Object(C.d)("Show Messages Caught by AutoMod", "ChatSettings"),
                        onChange: this.onShowAutoModActionsToggle
                    })), a.createElement(J, {
                        key: "recent-raids",
                        recentRaids: this.props.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard,
                        targetChannelID: this.props.channelID,
                        tooltipText: this.props.showRaidsTooltip ? Object(C.d)("View recent raids with option to report or ban.", "RaidReportingChat") : ""
                    }), a.createElement("button", {
                        onClick: this.onChatClear,
                        "data-a-target": "clear-chat-button",
                        "data-test-selector": "clear-chat-button"
                    }, Object(C.d)("Clear Chat", "ChatSettings")))
                }, t
            }(a.Component);
        var Z = Object(r.b)(function(e) {
                return {
                    followerModeDuration: e.chat.followerDuration,
                    followerModeEnabled: e.chat.followerMode,
                    lastUsedFollowerDurations: e.chat.lastUsedFollowerDurations,
                    showAutoModActions: e.chat.showAutoModActions,
                    showModerationActions: e.chat.showModerationActions,
                    showModerationIcons: e.chat.showModIcons,
                    slowModeEnabled: e.chat.slowMode
                }
            }, function(e) {
                return Object(s.b)({
                    onChatHide: function() {
                        return f.Q()
                    },
                    onChatUnhide: function() {
                        return f.T()
                    },
                    onFollowerModeDisable: function() {
                        return f.C()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return f.z(e)
                    },
                    onFollowerModeDurationPreferenceChange: function(e, t) {
                        return f.A(e, t)
                    },
                    onFollowerModeEnable: function() {
                        return f.J()
                    },
                    onModIconsDisable: function() {
                        return f.D()
                    },
                    onModIconsEnable: function() {
                        return f.K()
                    },
                    onShowAutoModActionsEnable: function() {
                        return f.L()
                    },
                    onShowAutoModActionsDisable: function() {
                        return f.E()
                    },
                    onShowModerationActionsEnable: function() {
                        return f.M()
                    },
                    onShowModerationActionsDisable: function() {
                        return f.F()
                    },
                    onSlowModeDisable: function() {
                        return f.G()
                    },
                    onSlowModeEnable: function() {
                        return f.N()
                    },
                    onTimestampsDisable: function() {
                        return f.I()
                    },
                    onTimestampsEnable: function() {
                        return f.P()
                    },
                    onThemeChanged: function(e) {
                        return Object(p.b)(e, void 0, !1)
                    },
                    login: function() {
                        return Object(m.f)(u.a.Chat)
                    }
                }, e)
            })(K),
            X = n("SZoP"),
            ee = n("3T7g"),
            te = "edit-appearance-button",
            ne = "edit-display-name";

        function ie(e) {
            var t = a.createElement(O.P, {
                    bold: !0,
                    type: O._44.Span
                }, a.createElement("span", {
                    style: {
                        color: e.chatColor
                    },
                    "data-a-target": ne
                }, Object(X.a)(e.login, e.displayName))),
                n = null;
            return e.editAppearance || (n = a.createElement(O._7, {
                margin: {
                    top: 1
                }
            }, a.createElement(O.N, {
                hoverUnderlineNone: !0,
                onClick: e.onClickEdit,
                "data-a-target": te,
                "data-test-selector": te
            }, Object(C.d)("Edit Appearance", "ChatSettings")))), a.createElement(O._30, {
                background: O.m.Base,
                color: O.J.Base,
                display: O.Q.InlineFlex,
                flexDirection: O.S.Column,
                fullWidth: !0
            }, a.createElement(O.P, {
                color: O.J.Alt2,
                transform: O._43.Uppercase
            }, Object(C.d)("Name Display", "ChatSettings")), a.createElement(O._7, {
                margin: {
                    top: 2
                }
            }, e.userBadges && e.userBadges.map(function(e) {
                return a.createElement(ee.a, {
                    key: e.id,
                    badge: e
                })
            }), t), n)
        }
        var ae = n("pg5l"),
            re = (n("Vaxm"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        recentRaids: !1,
                        chatColor: null,
                        raidsTooltipDismissed: !1
                    }, t.resizeAnimationFrame = 0, t.dismissRaidsTooltip = function() {
                        t.setState({
                            raidsTooltipDismissed: !0
                        })
                    }, t.onClickEdit = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickEditAppearance()
                    }, t.onClickRecentRaids = function() {
                        t.setState({
                            recentRaids: !0
                        })
                    }, t.onClickBack = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onLeaveEditAppearance(), t.setState({
                            recentRaids: !1
                        })
                    }, t.onColorSelected = function(e) {
                        t.setState({
                            chatColor: e
                        }), t.props.onColorSelected(e)
                    }, t.onBadgesChanged = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return !this.props.data || this.props.data.loading ? [3, 2] : [4, this.props.data.refetch()];
                                    case 1:
                                        if ((e = i.sent()).data) {
                                            if (!(t = e.data).user.self) return [2];
                                            n = {}, t.user.self.displayBadges.forEach(function(e) {
                                                n[e.setID] = e.version
                                            }), C.o.tmi.client.updateChannelBadges(this.props.channelLogin, n)
                                        }
                                        i.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 700;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.onResize, !0), this.setContainerHeight()
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.render = function() {
                    if (!this.props.data || this.props.data.loading) return null;
                    var e = null;
                    if (this.props.isLoggedIn && this.props.data.currentUser) {
                        var t = this.props.data.user.self ? this.props.data.user.self.displayBadges : [];
                        e = a.createElement(ie, {
                            key: "name-display",
                            login: this.props.data.currentUser.login,
                            displayName: this.props.data.currentUser.displayName,
                            chatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                            editAppearance: this.props.editAppearance,
                            userBadges: t,
                            onClickEdit: this.onClickEdit
                        })
                    }
                    var n = [];
                    return this.props.isLoggedIn ? this.props.editAppearance ? n = [a.createElement(O._1, {
                        margin: {
                            bottom: 2
                        },
                        key: "chat-settings-edit-inject",
                        className: "chat-settings__edit-button"
                    }, a.createElement(O.N, {
                        hoverUnderlineNone: !0,
                        key: "chat-settings-edit",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, a.createElement(O.P, {
                        color: O.J.Link,
                        type: O._44.Span
                    }, a.createElement(O._20, {
                        asset: O._21.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(C.d)("Back", "ChatSettingsAppearance")))), e, a.createElement(R, {
                        key: "edit-appearance",
                        onColorSelected: this.onColorSelected,
                        editAppearance: this.props.editAppearance,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        userChatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                        userLogin: this.props.data.currentUser.login,
                        onBadgesChanged: this.onBadgesChanged
                    })] : this.state.recentRaids ? n = [a.createElement(O._1, {
                        key: "chat-settings-recent-raids"
                    }, a.createElement(O.N, {
                        hoverUnderlineNone: !0,
                        key: "chat-settings-edit",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, a.createElement(O.P, {
                        color: O.J.Link,
                        type: O._44.Span
                    }, a.createElement(O._20, {
                        asset: O._21.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(C.d)("Back", "ChatSettingsRecentRaids")), a.createElement(O._7, {
                        margin: {
                            top: 2
                        }
                    }, a.createElement(O.P, {
                        key: "recent-raids-title",
                        color: O.J.Alt2,
                        transform: O._43.Uppercase
                    }, Object(C.d)("Recent Raids", "ChatSettings"))))), a.createElement(J, {
                        key: "recent-raids",
                        targetChannelID: this.props.channelID,
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard
                    })] : (n = [e, this.renderUniversalOptions()], this.props.isCurrentUserModerator && !this.props.isEmbedded && n.push(a.createElement(Z, {
                        key: "moderation-tools",
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isHostMode: this.props.isHostMode,
                        isLoggedIn: this.props.isLoggedIn,
                        onChatCommand: this.props.onChatCommand,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onShowViewerCard: this.props.onShowViewerCard,
                        recentRaids: this.state.recentRaids,
                        showRaidsTooltip: this.showRaidsTooltip
                    }))) : n = [a.createElement(I, {
                        key: "color-chooser",
                        onColorSelected: this.props.onColorSelected
                    }), this.renderUniversalOptions()], a.createElement(S.b, {
                        className: "chat-settings",
                        suppressScrollX: !0,
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, a.createElement("div", {
                        onClick: this.dismissRaidsTooltip
                    }, a.createElement(O._30, {
                        key: "chat-settings",
                        className: "chat-settings__content",
                        background: O.m.Base,
                        color: O.J.Base,
                        padding: 2
                    }, n)))
                }, t.prototype.renderUniversalOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && a.createElement(O.I, {
                            checked: this.props.darkModeEnabled,
                            "data-a-target": "darkmode-checkbox",
                            "data-test-selector": "dark-mode-checkbox",
                            id: "chat-settings-dark-mode",
                            label: Object(C.d)("Dark Mode", "ChatSettings"),
                            onChange: this.props.onDarkModeToggle
                        }),
                        t = !this.props.isEmbedded && a.createElement("button", {
                            onClick: this.props.onChatPopout,
                            "data-a-target": "popout-chat-button",
                            "data-test-selector": "popout-button"
                        }, Object(C.d)("Popout", "ChatSettings")),
                        n = !this.props.isPopout && !this.props.isEmbedded && (window.BetterTTV || window.FrankerFaceZ) && a.createElement("button", {
                            onClick: this.props.onLegacyChatPopout,
                            "data-test-selector": "legacy-popout-button"
                        }, Object(C.d)("Legacy Popout", "ChatSettings")),
                        i = !this.props.isPopout && a.createElement("button", {
                            onClick: this.props.onChatHide,
                            "data-a-target": "hide-chat-button",
                            "data-test-selector": "hide-chat-button"
                        }, Object(C.d)("Hide Chat", "ChatSettings"));
                    return a.createElement(O._7, {
                        key: "chat-options"
                    }, a.createElement(O._30, {
                        borderTop: !0,
                        margin: {
                            top: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, a.createElement(O.P, {
                        color: O.J.Alt2,
                        transform: O._43.Uppercase
                    }, Object(C.d)("Chat Options", "ChatSettings"))), a.createElement(O._7, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.showTimestamps,
                        "data-a-target": "timestamp-checkbox",
                        "data-test-selector": "timestamps-selector",
                        id: "chat-settings-timestamp",
                        label: Object(C.d)("Timestamps", "ChatSettings"),
                        onChange: this.props.onTimestampToggle
                    })), a.createElement(O._7, {
                        margin: {
                            bottom: 1
                        }
                    }, e), a.createElement(O._7, {
                        margin: {
                            bottom: 1
                        }
                    }, i), a.createElement(O._7, {
                        margin: {
                            bottom: 1
                        }
                    }, t), n && a.createElement(O._7, null, n))
                }, Object.defineProperty(t.prototype, "showRaidsTooltip", {
                    get: function() {
                        return this.props.sawFirstRaidPrompt && !this.state.raidsTooltipDismissed
                    },
                    enumerable: !0,
                    configurable: !0
                }), t = i.__decorate([Object(E.a)(ae, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(a.Component)),
            oe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        editAppearance: !1
                    }, t.handleSettingsToggle = function(e) {
                        t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                            editAppearance: !1
                        })
                    }, t.onEdit = function() {
                        t.setState({
                            editAppearance: !0
                        })
                    }, t.onLeaveEdit = function() {
                        t.setState({
                            editAppearance: !1
                        })
                    }, t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? l.a.Light : l.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.darkModeEnabled,
                            settingName: b.a.DarkMode
                        })
                    }, t.onTimestampToggle = function() {
                        Object(y.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showTimestamps,
                            settingName: b.a.ShowTimestamps
                        })
                    }, t.onChatHide = function() {
                        t.props.onChatHide(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !0,
                            settingName: b.a.HideChat
                        })
                    }, t.onChatPopout = function() {
                        t.props.isPopout || t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(c.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onLegacyChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("https://www.twitch.tv/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(c.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onColorSelected = function(e) {
                        t.props.isLoggedIn ? t.props.onChatCommand(Object(k.b)(e)) : t.props.login()
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(de, {
                        onToggle: this.handleSettingsToggle
                    }, a.createElement(re, {
                        authToken: this.props.authToken,
                        darkModeEnabled: this.props.darkModeEnabled,
                        editAppearance: this.state.editAppearance,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        onChatCommand: this.props.onChatCommand,
                        onChatHide: this.onChatHide,
                        onChatPopout: this.onChatPopout,
                        onDarkModeToggle: this.onDarkModeToggle,
                        onLegacyChatPopout: this.onLegacyChatPopout,
                        onTimestampToggle: this.onTimestampToggle,
                        showTimestamps: this.props.showTimestamps,
                        theatreModeEnabled: this.props.theatreModeEnabled,
                        onColorSelected: this.onColorSelected,
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isLoggedIn: this.props.isLoggedIn,
                        onClickEditAppearance: this.onEdit,
                        onLeaveEditAppearance: this.onLeaveEdit,
                        sawFirstRaidPrompt: this.props.sawFirstRaidPrompt,
                        onShowViewerCard: this.props.onShowViewerCard,
                        containerElement: this.props.containerElement
                    }))
                }, t
            }(a.Component);
        var se = Object(r.b)(function(e) {
                return {
                    isLoggedIn: Object(h.d)(e),
                    darkModeEnabled: Object(g.a)(e) === l.a.Dark,
                    showTimestamps: e.chat.showTimestamps,
                    theatreModeEnabled: e.ui.theatreModeEnabled
                }
            }, function(e) {
                return Object(s.b)({
                    login: function() {
                        return Object(m.f)(u.a.Chat)
                    },
                    onChatHide: function() {
                        return f.Q()
                    },
                    onChatUnhide: function() {
                        return f.T()
                    },
                    onThemeChanged: function(e) {
                        return Object(p.b)(e, void 0, !1)
                    },
                    onTimestampsDisable: function() {
                        return f.I()
                    },
                    onTimestampsEnable: function() {
                        return f.P()
                    },
                    onShowViewerCard: v.d
                }, e)
            })(oe),
            le = Object(o.f)(se),
            de = function(e) {
                return a.createElement(x.a, {
                    onToggle: e.onToggle
                }, a.createElement(O.v, {
                    icon: O._21.Gear,
                    ariaLabel: Object(C.d)("Chat settings", "ChatInput"),
                    "data-a-target": "chat-settings",
                    disabled: !!e.disabled
                }), a.createElement(O.p, {
                    direction: O.q.Top,
                    noTail: !0,
                    offsetY: "11px",
                    "data-a-target": "chat-settings-balloon"
                }, e.children))
            };
        n.d(t, "a", function() {
            return le
        }), n.d(t, "b", function() {
            return de
        })
    },
    M5Oo: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return t.setSeconds(0, 0), t
        }
    },
    M8zv: function(e, t, n) {
        e.exports = n.p + "assets/empty_state-b5883e957cd574b6630af9c5d66f9b61.png"
    },
    M9Ev: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t, n) {
            var a = i(e),
                r = i(t),
                o = void 0 !== n ? n : 1,
                s = r.getTime();
            if (a.getTime() > s) throw new Error("The first date cannot be after the second date");
            var l = [],
                d = a;
            for (d.setHours(0, 0, 0, 0); d.getTime() <= s;) l.push(i(d)), d.setDate(d.getDate() + o);
            return l
        }
    },
    MApH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_BanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 126
            }
        };
        n.loc.source = {
            body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    MIQa: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return t.setHours(23, 59, 59, 999), t
        }
    },
    "MKc+": function(e, t, n) {
        var i = n("oNnY");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    MSFW: function(e, t) {},
    Mbb9: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getDay()
        }
    },
    Mdww: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e),
                n = t.getFullYear(),
                a = t.getMonth(),
                r = new Date(0);
            return r.setFullYear(n, a + 1, 0), r.setHours(0, 0, 0, 0), r.getDate()
        }
    },
    Mful: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "chatMessage"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ChatMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "authorName"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "authorColor"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "author"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "body"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "embeddedEmote"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "setID"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "version"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsUsed"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/embedded-emote-fragment.gql"\nfragment chatMessage on ChatMessage {\nid\nauthorName\nauthorColor\nauthor {\nid\nlogin\n}\nbody {\ncontent\nemotes {\n...embeddedEmote\n}\n}\nbadges {\nsetID\nversion\n}\nbitsUsed\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("0ImK").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    Moxe: function(e, t, n) {
        var i = n("M5Oo");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() === a.getTime()
        }
    },
    NKE6: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e).getTime(),
                a = i(t).getTime();
            return n < a ? -1 : n > a ? 1 : 0
        }
    },
    NSOL: function(e, t, n) {
        var i = n("6Zhv"),
            a = 6e4;
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, n * a)
        }
    },
    NZkJ: function(e, t) {},
    Nay6: function(e, t, n) {
        "use strict";
        var i = n("HW6M"),
            a = n("GiK3"),
            r = (n("7vYp"), function(e) {
                var t, n = [a.createElement("span", {
                    key: "username-display",
                    className: "chat-author__display-name",
                    "data-a-target": "chat-message-username",
                    "data-a-user": e.userData.userLogin,
                    "data-test-selector": "message-username",
                    style: {
                        color: e.userData.color
                    }
                }, e.userData.userDisplayName)];
                if (e.userData.isIntl) {
                    var r = i(((t = {})["chat-author__intl-login"] = !e.highlighted, t["chat-author__intl-login--highlighted"] = e.highlighted, t));
                    n.push(a.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.userData.color
                        },
                        className: r,
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.userData.userLogin + ")"))
                }
                return a.createElement("span", {
                    key: e.userData.userID + "-authorlabel"
                }, n)
            });
        n.d(t, !1, function() {
            return "message-username"
        }), n.d(t, !1, function() {
            return "message-username-canonical"
        }), n.d(t, !1, function() {
            return "chat-author__display-name"
        }), n.d(t, !1, function() {
            return "chat-author__intl-login"
        }), n.d(t, !1, function() {
            return "chat-author__intl-login--highlighted"
        }), n.d(t, "a", function() {
            return r
        })
    },
    Ncf8: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, r) {
            return {
                type: i.b.Moderation,
                moderationType: e,
                id: Object(a.a)(t + "-mod"),
                userLogin: t,
                reason: n,
                duration: r
            }
        };
        var i = n("qkCi"),
            a = n("INp2")
    },
    O0Qc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        }), t.h = function(e) {
            return "/ignore " + e
        }, t.j = function(e) {
            return "/unignore " + e
        }, t.i = function(e) {
            return "/mod " + e
        }, t.k = function(e) {
            return "/unmod " + e
        }, t.m = function(e) {
            return /^[\/]/.test(e)
        }, t.c = function() {
            return "/clear"
        }, t.d = function() {
            return "/followersoff"
        }, t.e = function() {
            return "/slowoff"
        }, t.f = function(e) {
            return "/followers " + e
        }, t.g = function() {
            return "/slow"
        }, t.b = function(e) {
            return "/color " + e
        }, t.q = function(e) {
            var t = e.trim().match(o);
            if (!t) return null;
            return {
                recipientLogin: t[1] || null,
                body: t[2] || null
            }
        }, t.r = function(e) {
            var t = e.trim().match(s);
            if (!t) return {
                recipientLogin: null,
                body: null
            };
            return {
                recipientLogin: t[1] || null,
                body: t[2] || null
            }
        }, t.n = function(e) {
            var t = e.trim().match(l);
            if (!t) return null;
            return {
                bannedUserLogin: t[1],
                duration: t[2] && Number(t[2]) || null
            }
        }, t.p = function(e) {
            var t = e.trim().match(d);
            if (!t) return null;
            return {
                duration: t[1] && Number(t[1]) || null
            }
        }, t.o = function(e) {
            var t = e.trim().match(u);
            if (!t) return null;
            var n = t[1];
            if (!n.startsWith("#") && -1 === c.indexOf(n.toLowerCase())) return null;
            return {
                color: n
            }
        }, t.l = function(e, t) {
            var n = e.match(m);
            if (!n) return {
                handled: !1
            };
            var r = n[1],
                o = i.o.store.getState().chat.commandHandlers[n[1].toLowerCase()];
            if (!o) return {
                command: r,
                handled: !1
            };
            var s = (n[2] || "").trim(),
                l = {
                    channelLogin: t
                };
            try {
                return {
                    command: r,
                    handled: !0,
                    result: o(s, l)
                }
            } catch (e) {
                return a.warn("Exception thrown from chat command handler", {
                    command: n[1],
                    err: e
                }), {
                    handled: !1
                }
            }
        };
        var i = n("6sO2"),
            a = i.o.logger.withCategory("chat-commands"),
            r = "/unraid";
        var o = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i;
        var s = /^(\S+)?\s+(.+)?$/;
        var l = /^\/ban\s+(\S+)(?:\s+(\d+)?)?$/;
        var d = /^\/slow(?:\s+(\d+)?)?$/;
        var c = ["blue", "blueviolet", "cadetblue", "chocolate", "coral", "dodgerblue", "firebrick", "goldenrod", "green", "hotpink", "orangered", "red", "seagreen", "springgreen", "yellowgreen"],
            u = /^\/color\s+(#[A-Fa-f0-9]{6}|[A-Za-z]+)$/;
        var m = /^[/.]([a-z0-9]+)(.+)?$/i
    },
    O9wU: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.room_message = 2] = "room_message", e[e.viewer_list = 3] = "viewer_list", e[e.member_list = 4] = "member_list", e[e.test = 5] = "test"
            }(i || (i = {}))
    },
    OLKT: function(e, t) {},
    OLl6: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return i.__awaiter(this, void 0, void 0, function() {
                var t, n;
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, a.o.apollo.client.query({
                                query: r,
                                variables: {
                                    login: e
                                }
                            })];
                        case 2:
                            return t = i.sent(), [3, 4];
                        case 3:
                            return n = i.sent(), a.j.warn(n, "Failed to fetch user targeted by chat command.", {
                                userLogin: e
                            }), [3, 4];
                        case 4:
                            return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                    }
                })
            })
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("pV+t");
        n.n(r)
    },
    OcEY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "bitsOffersFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsOffer"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bits"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "InlineFragment",
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BitsBundleOffer"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "price"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "discount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPromo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "includesVAT"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "promotion"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 145
            }
        };
        n.loc.source = {
            body: "fragment bitsOffersFragment on BitsOffer {\nid\ntype\nbits\n... on BitsBundleOffer {\nprice\ndiscount\nisPromo\nurl\nincludesVAT\npromotion {\nid\ntype\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Oioc: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "JoinRoomsButton_JoinRooms"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "JoinChannelRoomsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "joinChannelRooms"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 143
            }
        };
        n.loc.source = {
            body: "mutation JoinRoomsButton_JoinRooms($input: JoinChannelRoomsInput!) {\njoinChannelRooms(input: $input) {\nchannel {\nself {\nisChannelMember\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ojfd: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelBanner"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 100
            }
        };
        n.loc.source = {
            body: "query ChannelBanner($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nlogin\nbannerImageURL\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ouuk: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            e || (e = navigator.userAgent);
            return !!i.exec(e)
        };
        var i = /\scurse\/\d/
    },
    P7hg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ActiveRoomButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sendMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 133
            }
        };
        n.loc.source = {
            body: "query ActiveRoomButton($id: ID!) {\nroom(id: $id) {\nid\nname\nisPreviewable\nminimumAllowedRole\nself {\npermissions {\nsendMessages\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    PPK2: function(e, t) {},
    PPNL: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("OAwv"),
            r = n("6sO2"),
            o = n("9u8h"),
            s = {
                en: "en_US",
                de: "de_DE",
                es: "es_ES",
                "es-mx": "es_ES",
                fr: "fr_FR",
                it: "it_IT",
                hu: "hu_HU",
                pl: "pl_PL",
                pt: "pt_BR",
                "pt-br": "pt_BR",
                vi: "vn_VN",
                tr: "tr_TR",
                ro: "ro_RO",
                cs: "cs_CZ",
                el: "el_GR",
                ru: "ru_RU",
                th: "th_TH",
                "zh-cn": "zh_CN",
                "zh-tw": "zh_TW",
                ja: "ja_JP",
                ko: "ko_KR"
            },
            l = function(e) {
                return e && s[e] || "en_US"
            },
            d = n("pqU3");
        t.a = function() {
            var e = this;
            return function(t) {
                clearTimeout(c), c = setTimeout(function() {
                    return i.__awaiter(e, void 0, void 0, function() {
                        var e, n, s, c, u, m;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    e = r.o.logger.withCategory("leagueoflegends-api"), t(Object(d.e)(!0)), i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), n = r.o.intl.getLanguageCode(), s = l(n), c = o.a.getAPIURL("/api/lol/champions?" + a.stringify({
                                        locale: s,
                                        on_site: 1
                                    })).toString(), [4, o.a.get(c)];
                                case 2:
                                    return (u = i.sent()).body ? t(Object(d.f)(u.body)) : (e.warn("LoL champion API response body was empty."), t(Object(d.d)(!0))), [3, 4];
                                case 3:
                                    throw m = i.sent(), t(Object(d.d)(!0)), e.error(m, "Failed to load LoL champion data"), m;
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, u)
            }
        };
        var c = 0,
            u = 350
    },
    PqoY: function(e, t) {},
    Ptqd: function(e, t) {
        e.exports = function() {
            var e = {
                lessThanXSeconds: {
                    one: "less than a second",
                    other: "less than {{count}} seconds"
                },
                xSeconds: {
                    one: "1 second",
                    other: "{{count}} seconds"
                },
                halfAMinute: "half a minute",
                lessThanXMinutes: {
                    one: "less than a minute",
                    other: "less than {{count}} minutes"
                },
                xMinutes: {
                    one: "1 minute",
                    other: "{{count}} minutes"
                },
                aboutXHours: {
                    one: "about 1 hour",
                    other: "about {{count}} hours"
                },
                xHours: {
                    one: "1 hour",
                    other: "{{count}} hours"
                },
                xDays: {
                    one: "1 day",
                    other: "{{count}} days"
                },
                aboutXMonths: {
                    one: "about 1 month",
                    other: "about {{count}} months"
                },
                xMonths: {
                    one: "1 month",
                    other: "{{count}} months"
                },
                aboutXYears: {
                    one: "about 1 year",
                    other: "about {{count}} years"
                },
                xYears: {
                    one: "1 year",
                    other: "{{count}} years"
                },
                overXYears: {
                    one: "over 1 year",
                    other: "over {{count}} years"
                },
                almostXYears: {
                    one: "almost 1 year",
                    other: "almost {{count}} years"
                }
            };
            return {
                localize: function(t, n, i) {
                    var a;
                    return i = i || {}, a = "string" == typeof e[t] ? e[t] : 1 === n ? e[t].one : e[t].other.replace("{{count}}", n), i.addSuffix ? i.comparison > 0 ? "in " + a : a + " ago" : a
                }
            }
        }
    },
    Q2rx: function(e, t, n) {
        var i = n("u/4p"),
            a = 6e4,
            r = 6048e5;
        e.exports = function(e, t, n) {
            var o = i(e, n),
                s = i(t, n),
                l = o.getTime() - o.getTimezoneOffset() * a,
                d = s.getTime() - s.getTimezoneOffset() * a;
            return Math.round((l - d) / r)
        }
    },
    QCOJ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Embed: "embed",
            Web: "web"
        }
    },
    QFW6: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("6sO2"),
            o = n("vH/s");
        ! function(e) {
            e.Everyone = "everyone", e.ModsOnly = "mod", e.StreamChat = "twitch_chat", e.SubsOnly = "sub"
        }(i || (i = {}));
        var s = n("gGMi");
        n.d(t, "a", function() {
            return l
        }), n.d(t, "b", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var l = function(e) {
                var t;
                switch (e.roomMinimumRole) {
                    case s.b.Everyone:
                        t = i.Everyone;
                        break;
                    case s.b.Moderator:
                        t = i.ModsOnly;
                        break;
                    case s.b.Subscriber:
                        t = i.SubsOnly;
                        break;
                    default:
                        t = i.StreamChat
                }
                var n = {
                    channel: e.channelLogin,
                    chatroom_type: t,
                    is_host_mode: e.isHostMode,
                    is_using_web_sockets: !0
                };
                return e.roomID && (n.chatroom_id = e.roomID), n
            },
            d = function(e) {
                r.n.track(o.SpadeEventType.ChatRoomJoined, l(e))
            },
            c = function(e) {
                r.n.track(o.SpadeEventType.ChatRoomWatched, a.__assign({}, l(e), {
                    channel_id: e.channelID,
                    client_time: Math.floor(e.clientTime / 1e3)
                }))
            }
    },
    "QKs+": function(e, t, n) {
        "use strict";
        t.a = function() {
            return Object(i.a)(a, {
                props: function(e) {
                    if (e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers) {
                        var t = e.data.currentUser.blockedUsers.reduce(function(e, t) {
                            return t && t.id && e.push(t.id), e
                        }, []);
                        return {
                            blockedUsers: t
                        }
                    }
                    return {
                        blockedUsers: []
                    }
                },
                skip: function(e) {
                    return !(e.isLoggedIn || e.authToken)
                }
            })
        };
        var i = n("7vx8"),
            a = n("vKYs");
        n.n(a)
    },
    QMHY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatRoom_AutohostPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "query ChatRoom_AutohostPrompt($login: String!) {\ncurrentUser {\nid\n}\nuser(login: $login) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QNxL: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SharePurchaseTokenInChat"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SharePurchaseTokenInChatInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sharePurchaseTokenInChat"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation SharePurchaseTokenInChat($input:SharePurchaseTokenInChatInput!) {\nsharePurchaseTokenInChat(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QRuM: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("GiK3"),
            o = n("6sO2");
        ! function(e) {
            e.On = "on", e.Off = "off", e.StaffOnly = "staff"
        }(i || (i = {}));
        var s = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = o.b.get(this.props.name, i.Off);
                    return e === i.On || e === i.StaffOnly && this.props.isStaff ? r.Children.only(this.props.children) : null
                }, t
            }(r.Component),
            l = s;
        n.d(t, "a", function() {
            return i
        }), n.d(t, "c", function() {
            return s
        }), n.d(t, "b", function() {
            return l
        })
    },
    QY1R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomPicker"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isBroadcaster"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "maxAllowedChannelRooms"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isBroadcaster"
                                            }
                                        }
                                    }]
                                }]
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channelRooms"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "topic"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPreviewable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumAllowedRole"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isArchived"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isMuted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isUnread"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unreadMentionCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 353
            }
        };
        n.loc.source = {
            body: "query RoomPicker ($id: ID! $isBroadcaster: Boolean!) {\nuser(id: $id) {\nid\ndisplayName\nmaxAllowedChannelRooms @include(if: $isBroadcaster)\nchannelRooms {\nname\nid\ntopic\nisPreviewable\nminimumAllowedRole\nself {\nisArchived\nisMuted\nisUnread\nunreadMentionCount\n}\n}\nself {\nisChannelMember\nisModerator\nsubscriptionBenefit {\nid\n}\n}\nsubscriptionProducts {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Qbo9: function(e, t, n) {
        var i = n("Moxe");
        e.exports = function(e) {
            return i(new Date, e)
        }
    },
    QsiC: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PinnedCheer_Cheers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "top"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isTopEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 275
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery PinnedCheer_Cheers($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\ntop {\n...chatMessage\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\nsettings {\nisRecentEnabled\nisTopEnabled\nrecentTimeoutMs\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("Mful").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    Qxz6: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getFullYear() === a.getFullYear()
        }
    },
    R9op: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (e.chat && e.chat.messages) return e.chat.messages[t] || [];
            return []
        }, t.c = function(e) {
            return e.chat.renderSent
        }, t.b = function(e) {
            var t = [];
            if (e.chat && e.chat.commandHandlers)
                for (var n in e.chat.commandHandlers) e.chat.commandHandlers[n] && t.push(n);
            return t.sort()
        };
        var i = n("TToO"),
            a = n("LIeg"),
            r = (n.n(a), n("6sO2")),
            o = n("vh75"),
            s = n("UzRK"),
            l = n("VsL1");
        r.o.store.registerReducer("chat", function(e, t) {
            var n, r;
            switch (void 0 === e && (n = Object(l.a)(), e = i.__assign({}, n, {
                commandHandlers: {},
                emoteSets: [],
                followerDuration: s.a,
                followerMode: !1,
                isHidden: !1,
                messages: {},
                slowMode: !1,
                subsOnlyMode: !1,
                renderSent: null
            })), t.type) {
                case o.d:
                    return i.__assign({}, e, {
                        isHidden: !0
                    });
                case o.e:
                    return i.__assign({}, e, {
                        emoteSets: [],
                        messages: {}
                    });
                case o.f:
                    return i.__assign({}, e, {
                        isHidden: !1
                    });
                case o.g:
                    return i.__assign({}, e, {
                        emoteSets: t.emoteSets
                    });
                case o.h:
                    return i.__assign({}, e, {
                        followerMode: !1
                    });
                case o.i:
                    return i.__assign({}, e, {
                        followerDuration: t.duration
                    });
                case o.j:
                    return i.__assign({}, e, {
                        lastUsedFollowerDurations: i.__assign({}, e.lastUsedFollowerDurations, (r = {}, r[t.channelLogin] = t.duration, r))
                    });
                case o.k:
                    return i.__assign({}, e, {
                        followerMode: !0
                    });
                case o.l:
                    return a(e, function(e) {
                        return e.messages
                    }, function(e) {
                        return e[t.channel] = t.messages.slice(), e
                    });
                case o.b:
                    return i.__assign({}, e, {
                        showAutoModActions: !1
                    });
                case o.c:
                    return i.__assign({}, e, {
                        showAutoModActions: !0
                    });
                case o.m:
                    return i.__assign({}, e, {
                        showModerationActions: !1
                    });
                case o.n:
                    return i.__assign({}, e, {
                        showModerationActions: !0
                    });
                case o.o:
                    return i.__assign({}, e, {
                        showModIcons: !1
                    });
                case o.p:
                    return i.__assign({}, e, {
                        showModIcons: !0
                    });
                case o.s:
                    return i.__assign({}, e, {
                        slowMode: !1
                    });
                case o.t:
                    return i.__assign({}, e, {
                        slowMode: !0
                    });
                case o.u:
                    return i.__assign({}, e, {
                        subsOnlyMode: !1
                    });
                case o.v:
                    return i.__assign({}, e, {
                        subsOnlyMode: !0
                    });
                case o.w:
                    return i.__assign({}, e, {
                        showTimestamps: !1
                    });
                case o.x:
                    return i.__assign({}, e, {
                        showTimestamps: !0
                    });
                case o.a:
                    return a(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return e[t.command] = t.handler, e
                    });
                case o.q:
                    return a(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return delete e[t.command], e
                    });
                case o.r:
                    return i.__assign({}, e, {
                        renderSent: t.customEvent
                    });
                default:
                    return e
            }
        })
    },
    RbGx: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("GiK3"),
            a = (n.n(i), n("mbxv")),
            r = function(e) {
                var t, n = e.badgesToRender,
                    r = e.badgeSets,
                    o = [];
                t = n, Array.isArray(t) ? o = n.map(function(e) {
                    var t = r.getBadge(e.setID, e.version);
                    return null === t ? null : i.createElement(a.a, {
                        key: t.setID + "/" + t.version,
                        badge: t
                    })
                }) : function(e) {
                    return !Array.isArray(e)
                }(n) && (o = Object.keys(n).map(function(e) {
                    var t = n[e],
                        o = r.getBadge(e, t);
                    return null === o ? null : i.createElement(a.a, {
                        key: o.setID + "/" + o.version,
                        badge: o
                    })
                }));
                var s = o.filter(function(e) {
                    return null !== e
                });
                return i.createElement("span", null, s)
            }
    },
    S20p: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ShareResub_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "resubNotification"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "months"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "query Chat_ShareResub_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nself {\nresubNotification {\nid\nmonths\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    S4DY: function(e, t) {},
    SHOI: function(e, t, n) {
        var i = n("xA5w"),
            a = n("Jvcu");
        e.exports = function(e, t, n) {
            var r = n && Number(n.weekStartsOn) || 0,
                o = i(e),
                s = Number(t),
                l = o.getDay();
            return a(o, ((s % 7 + 7) % 7 < r ? 7 : 0) + s - l)
        }
    },
    SI0h: function(e, t, n) {
        "use strict";
        var i = n("TPVZ");
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return i.b
        }), n.d(t, "a", function() {
            return i.a
        })
    },
    SJLv: function(e, t) {
        var n = ["M", "MM", "Q", "D", "DD", "DDD", "DDDD", "d", "E", "W", "WW", "YY", "YYYY", "GG", "GGGG", "H", "HH", "h", "hh", "m", "mm", "s", "ss", "S", "SS", "SSS", "Z", "ZZ", "X", "x"];
        e.exports = function(e) {
            var t = [];
            for (var i in e) e.hasOwnProperty(i) && t.push(i);
            var a = n.concat(t).sort().reverse();
            return new RegExp("(\\[[^\\[]*\\])|(\\\\)?(" + a.join("|") + "|.)", "g")
        }
    },
    SZZR: function(e, t, n) {
        var i = n("I7cV");
        e.exports = function(e) {
            return i(e, {
                weekStartsOn: 1
            })
        }
    },
    ScRf: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UpdateChatColor"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateChatColorInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateChatColor"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 117
            }
        };
        n.loc.source = {
            body: "mutation Chat_UpdateChatColor($input: UpdateChatColorInput!){\nupdateChatColor(input: $input) {\nuser {\nchatColor\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "T/Ln": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e),
                n = t.getMonth(),
                a = n - n % 3 + 3;
            return t.setMonth(a, 0), t.setHours(0, 0, 0, 0), t
        }
    },
    TCxx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UpdateRoomModes"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomModesInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoomModes"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "room"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "modes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "slowModeDurationSeconds"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "r9kModeEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emotesOnlyModeEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumSlowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maximumSlowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 254
            }
        };
        n.loc.source = {
            body: "mutation UpdateRoomModes($input: UpdateRoomModesInput!) {\nupdateRoomModes(input: $input) {\nroom {\nid\nmodes {\nslowModeDurationSeconds\nr9kModeEnabled\nemotesOnlyModeEnabled\n}\n}\nerror {\ncode\nminimumSlowModeDurationSeconds\nmaximumSlowModeDurationSeconds\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    TPVZ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("GiK3"),
            o = n("F8kA"),
            s = n("6sO2"),
            l = n("hdYS"),
            d = n("DtWM"),
            c = n("+Znq"),
            u = n("7vx8"),
            m = n("czpb"),
            p = n("RH2O"),
            h = n("Aj/L"),
            g = n("N221"),
            f = n("jF7o"),
            v = n("iMOk"),
            b = n("WVx7"),
            k = n("ySfT"),
            y = n("ZJYd"),
            _ = n("/LBW"),
            C = n("Odds"),
            S = (n("fHoP"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handlePromoBuy = function(e) {
                        var n = Object(y.b)({
                            trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                            channelID: t.props.channelID,
                            purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                            bitsAmount: e.currentTarget.dataset.bitsAmount,
                            location: _.b.GetBitsButton
                        });
                        n && t.props.onPromoBuyClose(n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = r.createElement(C._7, null, r.createElement(C._7, {
                        padding: {
                            x: 5,
                            y: 2
                        },
                        textAlign: C._40.Center
                    }, r.createElement(C.P, {
                        type: C._44.H4,
                        bold: !0
                    }, Object(s.d)("Cheer Bits for your Favorite Streamer!", "Bits--FirstTimeUserPrompt"))), r.createElement(C._7, {
                        padding: {
                            x: 2,
                            bottom: 1
                        }
                    }, r.createElement(C.P, {
                        type: C._44.Span,
                        color: C.J.Alt
                    }, Object(s.d)("Bits are fun, animated emotes. Cheering Bits celebrates moments you love with the community right in chat and similar to subscribing, helps support Partners and Affiliates.", "Bits--FirstTimeUserPrompt"), r.createElement(C._1, {
                        margin: {
                            left: .5
                        }
                    }, r.createElement("a", {
                        onClick: this.props.toggleShowTutorial
                    }, Object(s.d)("How do I cheer?", "Bits--FirstTimeUserPrompt"))))), r.createElement(C._7, {
                        padding: {
                            bottom: 2
                        },
                        textAlign: C._40.Center
                    }, r.createElement(C._1, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(C.P, {
                        type: C._44.H6,
                        bold: !0,
                        className: "bits-first-time-user-prompt__promo-header"
                    }, Object(s.d)("First Time Purchaser Discount Pack!", "Bits--FirstTimeUserPrompt"))), r.createElement(C.u, {
                        onClick: this.handlePromoBuy,
                        "data-purchase-url": this.props.promo.url,
                        "data-bits-amount": this.props.promo.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.promo.bits
                    }, Object(s.d)("{price} For {amount} Bits", {
                        price: this.props.promo.price,
                        amount: this.props.promo.bits
                    }, "Bits--FirstTimeUserPrompt"))));
                    return this.props.isShowingTutorial ? r.createElement(C._7, {
                        className: "bits-first-time-user-prompt",
                        fullWidth: !0
                    }, r.createElement(C._7, {
                        className: "bits-first-time-user-prompt__tutorial-back-button"
                    }, r.createElement(C.u, {
                        onClick: this.props.toggleShowTutorial,
                        type: C.A.Text
                    }, r.createElement(C._20, {
                        asset: C._21.Play,
                        height: 8
                    }), " ", Object(s.d)("Back", "Bits--FirstTimeUserPrompt"))), r.createElement(C._7, {
                        textAlign: C._40.Center,
                        padding: {
                            x: 2,
                            bottom: 2,
                            top: 5
                        },
                        fullHeight: !0
                    }, r.createElement(C.e, {
                        type: C.i.SlideInLeft,
                        duration: C.g.Long,
                        enabled: !0
                    }, r.createElement(k.a, null)))) : this.props.animateFirstTimeUserIntro ? r.createElement(C._1, {
                        className: "bits-first-time-user-prompt"
                    }, r.createElement(C.e, {
                        type: C.i.SlideInRight,
                        duration: C.g.Long,
                        enabled: this.props.animateFirstTimeUserIntro
                    }, e)) : r.createElement(C._7, {
                        className: "bits-first-time-user-prompt"
                    }, e)
                }, t
            }(r.Component)),
            E = n("jxGs"),
            N = n("bkpq"),
            w = n("CSlQ"),
            D = n("annQ"),
            O = (n("lGVF"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hideFirstTimeUserIntro: !1
                    }, t.trackBitsCardInteraction = function(e, n) {
                        var i = {
                            actionName: e,
                            emoteType: n && n.emoteType,
                            emoteLevel: n && n.emoteLevel,
                            location: _.b.GetBitsButton,
                            displayedBalance: t.props.bitsBalance || 0
                        };
                        Object(_.h)(i)
                    }, t.onClose = function() {}, t.onPromoBuyClose = function(e) {
                        Object(f.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.loading) return r.createElement(C._30, {
                        "data-a-target": "get-bits-button-content-loading",
                        display: C.Q.Flex,
                        flexDirection: C.S.Column,
                        alignItems: C.c.Center,
                        justifyContent: C._6.Center,
                        textAlign: C._40.Center,
                        padding: {
                            y: 5
                        }
                    }, r.createElement(C._9, {
                        delay: 0
                    }), r.createElement(C._7, {
                        padding: {
                            top: 2
                        }
                    }, r.createElement(C.P, {
                        italic: !0
                    }, Object(s.d)("Fetching bits", "Bits--GetBitsButtonContent"))));
                    var e = null;
                    if (this.props.bitsOffers) {
                        var t = this.props.bitsOffers.find(function(e) {
                            return Object(y.c)(e)
                        });
                        t && t.type === E.b && this.props.channelID && !this.state.hideFirstTimeUserIntro && (e = r.createElement(S, {
                            promo: t,
                            animateFirstTimeUserIntro: this.props.animateFirstTimeUserIntro,
                            isShowingTutorial: this.props.isShowingTutorial,
                            toggleShowTutorial: this.props.toggleShowTutorial,
                            trackBitsCardInteraction: this.trackBitsCardInteraction,
                            channelID: this.props.channelID,
                            onPromoBuyClose: this.onPromoBuyClose
                        }))
                    }
                    var n = null;
                    void 0 !== this.props.bitsBalance && this.props.bitsConfig ? n = r.createElement(C._30, {
                        borderBottom: !0,
                        textAlign: C._40.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, r.createElement(C.P, {
                        type: C._44.Span
                    }, Object(s.d)("You have {bitsBalance}", {
                        bitsBalance: r.createElement(v.a, {
                            withImage: !0,
                            withText: !0,
                            count: this.props.bitsBalance,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))) : void 0 === this.props.bitsBalance && this.props.bitsConfig && (n = r.createElement(C._30, {
                        borderBottom: !0,
                        textAlign: C._40.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, r.createElement(C.P, {
                        type: C._44.Span
                    }, Object(s.d)("{bitsGem} Log in to see your Bits balance", {
                        bitsGem: r.createElement(v.a, {
                            count: 100,
                            withImage: !0,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))));
                    var i = null;
                    return this.props.bitsConfig && this.props.channelLogin && (i = r.createElement(b.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.onClose,
                        onClose: this.onClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        location: _.b.GetBitsButton,
                        hidePromos: !0,
                        hideWateb: !0,
                        fullsize: !0
                    })), r.createElement(g.b, {
                        className: "get-bits-button-content"
                    }, r.createElement(C._7, null, n, e, i))
                }, t = i.__decorate([Object(w.d)("GetBitsButtonContent"), Object(u.a)(D, {
                    name: "data",
                    props: function(e) {
                        var t, n, i, a;
                        return e.data && e.data.user && e.data.user.cheer && (t = Object(N.a)(e.data.user.cheer.emotes), n = e.data.user.id), e.data && e.data.currentUser ? (a = e.data.currentUser.bitsBalance, i = e.data.currentUser.bitsOffers) : e.data && e.data.bitsOffers && (i = e.data.bitsOffers), {
                            loading: e.data && e.data.loading,
                            bitsOffers: i,
                            bitsBalance: a,
                            bitsConfig: t,
                            channelID: n
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(r.Component));
        var I = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isShowingTutorial: !1,
                        animateFirstTimeUserIntro: !1
                    }, t.toggleBalloon = function(e) {
                        t.setState({
                            animateFirstTimeUserIntro: !1
                        }), e || Object(_.h)({
                            actionName: _.a.BuyMain,
                            location: _.b.GetBitsButton,
                            displayedBalance: 0
                        })
                    }, t.toggleShowTutorial = function() {
                        t.setState({
                            isShowingTutorial: !t.state.isShowingTutorial,
                            animateFirstTimeUserIntro: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.channelLogin && (e = r.createElement(O, {
                        isLoggedIn: this.props.isLoggedIn,
                        channelLogin: this.props.channelLogin,
                        toggleShowTutorial: this.toggleShowTutorial,
                        isShowingTutorial: this.state.isShowingTutorial,
                        animateFirstTimeUserIntro: this.state.animateFirstTimeUserIntro
                    })), r.createElement(c.a, {
                        onToggle: this.toggleBalloon
                    }, r.createElement(C.u, {
                        dropdown: !0
                    }, Object(s.d)("Get Bits", "Bits--GetBitsButton")), r.createElement(C.p, {
                        direction: C.q.BottomRight,
                        size: C.r.Large
                    }, e))
                }, t = i.__decorate([Object(w.d)("GetBitsButton")], t)
            }(r.Component),
            T = Object(p.b)(function(e) {
                return {
                    isLoggedIn: Object(h.d)(e)
                }
            })(I),
            M = n("2KeS"),
            R = n("V5M+"),
            x = n("E9Qg"),
            L = n("ebTC"),
            A = n("4Q9N"),
            F = (n("4Jix"), n("Ojfd")),
            j = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.openModal = function() {
                        var e = t.props.data && t.props.data.user;
                        e && t.props.showModal(L.a, {
                            userID: e.id,
                            login: e.login,
                            displayName: e.displayName,
                            imageType: A.a.ProfileBanner,
                            showCloser: !0,
                            successCallback: t.imageUploaded
                        })
                    }, t.imageUploaded = function() {
                        t.props.data && t.props.data.refetch()
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t, n = {
                            "channel-banner--open": !this.props.collapsed
                        },
                        i = this.props.data;
                    if (i && i.loading || !this.props.firstPageLoaded) e = r.createElement(C._13, {
                        height: 380,
                        "data-test-selector": "channel-banner__placeholder"
                    });
                    else {
                        i && i.user && i.user.bannerImageURL ? t = {
                            backgroundImage: "url(" + i.user.bannerImageURL + ")"
                        } : (n["channel-banner--default"] = !0, t = {
                            backgroundImage: "url(" + x + ")"
                        });
                        var o = null;
                        this.props.canEdit && (o = r.createElement(C._30, {
                            className: "channel-banner__edit-overlay",
                            background: C.m.Overlay,
                            position: C._14.Absolute,
                            attachTop: !0,
                            attachLeft: !0,
                            fullWidth: !0
                        }, r.createElement("button", {
                            className: "channel-banner__edit-overlay__button",
                            "data-test-selector": "channel-banner__edit-overlay-interactable",
                            onClick: this.openModal
                        }, r.createElement(C._7, {
                            display: C.Q.Flex,
                            alignItems: C.c.Center,
                            flexDirection: C.S.Column,
                            justifyContent: C._6.Center
                        }, r.createElement(C._7, null, r.createElement(C._20, {
                            asset: C._21.Edit
                        })), Object(s.d)("Update Profile Banner", "ChannelBanner"))))), e = r.createElement("div", {
                            className: "channel-banner__image",
                            "data-test-selector": "channel-banner",
                            style: t
                        }, o)
                    }
                    return r.createElement("div", {
                        className: a("channel-banner", n),
                        onTransitionEnd: this.props.onTransitionEnd
                    }, r.createElement(C._1, {
                        fullWidth: !0
                    }, e))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.closeModal()
                }, t
            }(r.Component),
            U = Object(u.a)(F, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.channelLogin || !e.firstPageLoaded
                }
            })(j);
        var B = Object(p.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }, function(e) {
                return Object(M.b)({
                    closeModal: R.c,
                    showModal: R.d
                }, e)
            })(U),
            P = n("x9n8"),
            V = (n("WClm"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.openModal = function(e) {
                        e.stopPropagation(), t.props.showModal(P.a, {
                            userID: t.props.userID,
                            login: t.props.login,
                            displayName: t.props.displayName,
                            showCloser: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return r.createElement(C._7, {
                        className: "edit-profile-overlay",
                        display: C.Q.Flex,
                        justifyContent: C._6.Center,
                        alignContent: C.b.Center,
                        fullHeight: !0,
                        fullWidth: !0
                    }, r.createElement(C.v, {
                        overlay: !0,
                        ariaLabel: Object(s.d)("Edit Profile", "ChannelHeader"),
                        icon: C._21.Edit,
                        onClick: this.openModal
                    }))
                }, t = i.__decorate([Object(w.d)("EditProfileOverlay")], t)
            }(r.Component));
        var H = Object(p.b)(null, function(e) {
                return Object(M.b)({
                    showModal: R.d
                }, e)
            })(V),
            W = n("70dR"),
            G = (n("z4Db"), n("kOMe"));
        n.d(t, "b", function() {
            return Q
        }), n.d(t, "a", function() {
            return J
        });
        var Q, q = "channel-header__edit-profile-overlay",
            z = "channel-header__verified-badge",
            Y = "channel-header__live-indicator";
        ! function(e) {
            e[e.Channel = 1] = "Channel", e[e.Clips = 2] = "Clips", e[e.Collections = 3] = "Collections", e[e.Events = 4] = "Events", e[e.Success = 5] = "Success", e[e.Followers = 6] = "Followers", e[e.Following = 7] = "Following", e[e.Videos = 8] = "Videos"
        }(Q || (Q = {}));
        var J = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    live: !1,
                    bannerHidden: !0,
                    bannerSlideIn: !1
                }, t.verifiedBadgeElement = r.createElement(C._47, {
                    label: Object(s.d)("Verified", "ChannelHeader"),
                    direction: C._49.Right
                }, r.createElement(C._7, {
                    className: "channel-header__verified",
                    "data-target": z,
                    display: C.Q.Flex,
                    alignItems: C.c.Center,
                    margin: {
                        left: 1
                    }
                }, r.createElement(C._20, {
                    asset: C._21.Verified
                }))), t.ChannelStatusIndicatorElement = r.createElement(C._7, {
                    margin: {
                        left: 1
                    },
                    "data-target": Y
                }, r.createElement(C._47, {
                    label: Object(s.d)("Live Now", "ChannelHeader"),
                    direction: C._49.Right
                }, r.createElement(C.F, {
                    status: C.H.Live,
                    pulse: !0
                }))), t.renderAvatarEditButton = function() {
                    return t.props.data && t.props.data.user && t.isChannelEditor() ? r.createElement(C._30, {
                        className: q,
                        background: C.m.Overlay,
                        position: C._14.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        fullHeight: !0,
                        fullWidth: !0,
                        display: C.Q.InlineFlex,
                        alignItems: C.c.Center,
                        justifyContent: C._6.Center
                    }, r.createElement(H, {
                        userID: t.props.data.user.id,
                        login: t.props.data.user.login,
                        displayName: t.props.data.user.displayName
                    })) : null
                }, t.toggleChannelBanner = function() {
                    t.setState(function(e) {
                        var t = !e.bannerSlideIn;
                        return t ? {
                            bannerHidden: !e.bannerHidden,
                            bannerSlideIn: t
                        } : {
                            bannerSlideIn: t
                        }
                    })
                }, t.completedBannerAnimation = function() {
                    t.setState(function(e) {
                        return e.bannerSlideIn ? e : {
                            bannerHidden: !0
                        }
                    })
                }, t.onUpdateDebounce = function() {
                    if (!t.resizeAnimationFrame && t.channelHeader) {
                        var e = t.channelHeader.querySelector('[data-target="channel-header-left"]');
                        t.updateWidth(t.getWidth(e).width), t.resizeAnimationFrame = requestAnimationFrame(t.handleWindowResize)
                    }
                }, t.handleWindowResize = function() {
                    t.resizeAnimationFrame = null, t.getChannelHeaderSize()
                }, t.saveChannelHeaderRef = function(e) {
                    return t.channelHeader = e
                }, t
            }
            return i.__extends(t, e), t.prototype.componentWillMount = function() {
                this.updateLiveState(this.props)
            }, t.prototype.componentDidMount = function() {
                window.addEventListener("resize", this.onUpdateDebounce), !this.props.data || this.props.data.loading || this.props.data.error || this.getChannelHeaderSize(), this.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.updateLiveState(e)
            }, t.prototype.componentDidUpdate = function() {
                this.channelHeader && this.updateWidth(this.getWidth(this.channelHeader.querySelector('[data-target="channel-header-left"]')).width), this.onUpdateDebounce(), this.reportInteractive()
            }, t.prototype.componentWillUnmount = function() {
                this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.onUpdateDebounce), this.props.latencyTracking.reportInteractive()
            }, t.prototype.updateWidth = function(e) {
                var t = e !== this.width || this.width !== this.prevWidth;
                void 0 !== this.width && (this.prevWidth = this.width), this.width !== e && (this.width = e), t && (this.resizeAnimationFrame && (cancelAnimationFrame(this.resizeAnimationFrame), this.resizeAnimationFrame = null), this.onUpdateDebounce())
            }, t.prototype.render = function() {
                var e, t, n = 0,
                    i = 0,
                    u = 0,
                    m = s.a.defaultAvatarURL;
                this.props.data && this.props.data.user && !this.props.data.loading && !this.props.data.error && (n = this.props.data.user.videos.totalCount, i = this.props.data.user.followers.totalCount, u = this.props.data.user.follows.totalCount, m = this.props.data.user.profileImageURL, e = this.props.data.user.displayName, t = this.props.data.user.roles && this.props.data.user.roles.isPartner);
                var p = this.state.live && !this.isActiveTab(Q.Channel),
                    h = this.createChannelLinks(n, i, u),
                    g = {
                        "channel-header__user": !0,
                        "channel-header__user--selected": this.isActiveTab(Q.Channel)
                    },
                    f = null;
                this.canRenderBitsButton() && (f = r.createElement(C._7, {
                    margin: {
                        left: 1
                    }
                }, r.createElement(T, {
                    channelLogin: this.props.channelLogin
                })));
                var v, b = r.createElement(C._7, {
                    display: C.Q.Flex,
                    flexWrap: C.T.NoWrap,
                    alignItems: C.c.Center,
                    flexShrink: 0
                }, r.createElement(C._7, {
                    className: "channel-header__user-avatar channel-header__user-avatar--active",
                    margin: {
                        right: 1
                    },
                    display: C.Q.Flex,
                    flexShrink: 0,
                    alignItems: C.c.Stretch
                }, r.createElement(C._7, {
                    position: C._14.Relative
                }, r.createElement(C.l, {
                    size: 36,
                    src: m,
                    alt: e || ""
                }), this.renderAvatarEditButton())), e ? r.createElement(C.P, {
                    type: C._44.H5
                }, e) : r.createElement(C._7, {
                    alignItems: C.c.Center
                }, r.createElement(C._13, {
                    lineCount: 1,
                    width: 120
                })), p && this.ChannelStatusIndicatorElement, t && this.verifiedBadgeElement);
                v = this.isActiveTab(Q.Channel) ? r.createElement("div", {
                    className: "channel-header__banner-toggle",
                    onClick: this.toggleChannelBanner,
                    "data-target": "channel-header__channel-link",
                    "data-a-target": "user-channel-header-item"
                }, b) : this.props.data && this.props.data.user && this.props.data.user.login ? r.createElement(o.a, {
                    to: "/" + this.props.data.user.login,
                    "data-target": "channel-header__channel-link",
                    "data-a-target": "user-channel-header-item"
                }, b) : b;
                var k = this.state.bannerHidden ? C.Q.HideAccessible : C.Q.Block,
                    y = null;
                return this.isActiveTab(Q.Channel) && (y = r.createElement(C._7, {
                    display: k
                }, r.createElement(B, {
                    channelLogin: this.props.channelLogin,
                    canEdit: this.isChannelEditor(),
                    collapsed: !this.state.bannerSlideIn,
                    onTransitionEnd: this.completedBannerAnimation
                }))), r.createElement(C._7, {
                    className: "channel-header",
                    flexShrink: 0
                }, y, r.createElement(C._7, {
                    display: C.Q.Flex,
                    justifyContent: C._6.Between,
                    flexWrap: C.T.NoWrap,
                    fullHeight: !0,
                    refDelegate: this.saveChannelHeaderRef,
                    margin: {
                        x: 3
                    }
                }, r.createElement(C._7, {
                    display: C.Q.Flex,
                    alignItems: C.c.Stretch,
                    flexShrink: 0,
                    flexWrap: C.T.NoWrap,
                    "data-target": "channel-header-left"
                }, r.createElement(C._1, {
                    className: a(g),
                    padding: {
                        y: .5,
                        right: 2
                    },
                    display: C.Q.Flex,
                    flexWrap: C.T.NoWrap,
                    alignItems: C.c.Center,
                    flexShrink: 0
                }, v), this.renderTabs(h), r.createElement(C._7, {
                    className: "channel-header__item channel-header__item--no-underline",
                    padding: {
                        x: 1
                    },
                    flexShrink: 0,
                    alignSelf: C.d.Center,
                    "data-target": "channel-header-button"
                }, r.createElement(c.a, {
                    alwaysMountBalloonContent: !0
                }, r.createElement(C.v, {
                    icon: C._21.NavMore,
                    ariaLabel: Object(s.d)("More", "ChannelHeader")
                }), r.createElement(C.p, {
                    direction: C.q.Bottom,
                    noTail: !0
                }, r.createElement(C._7, {
                    padding: {
                        y: 1
                    }
                }, this.renderDropdown(h)))))), r.createElement(C._7, {
                    display: C.Q.Flex,
                    flexWrap: C.T.NoWrap,
                    flexShrink: 0,
                    alignItems: C.c.Center,
                    className: "channel-header__right",
                    "data-target": "channel-header-right"
                }, r.createElement(C._7, {
                    className: "channel-header__follow-button",
                    display: C.Q.Flex,
                    alignItems: C.c.Stretch,
                    margin: {
                        left: 1
                    }
                }, r.createElement(l.a, {
                    updateContainerWidth: this.onUpdateDebounce,
                    isHostedFollow: !1,
                    channelLogin: this.props.channelLogin,
                    followUIType: l.b.IconAndText,
                    unfollowUIType: l.b.IconOnly
                })), r.createElement(C._7, {
                    margin: {
                        left: 1
                    }
                }, r.createElement(W.a, {
                    updateContainerWidth: this.onUpdateDebounce,
                    channelLogin: this.props.channelLogin
                })), f)), r.createElement(d.a, {
                    onResize: this.onUpdateDebounce
                }))
            }, t.prototype.updateLiveState = function(e) {
                e.data && e.data.user && !e.data.loading && !e.data.error && this.setState({
                    live: !!e.data.user.stream && "" !== e.data.user.stream.id
                })
            }, t.prototype.generateUserLink = function(e, t) {
                void 0 === e && (e = ""), void 0 === t && (t = !1);
                var n = this.props.data && this.props.data.user && this.props.data.user.login;
                if (!n) return "#";
                var i = "/" + n + "/" + e;
                return t ? Object(m.a)(i) : i
            }, t.prototype.renderTabs = function(e) {
                var t = this;
                return e.map(function(e) {
                    var n = e.count ? r.createElement(C._7, {
                            className: "channel-header__item-count",
                            display: C.Q.Flex,
                            margin: {
                                left: .5
                            }
                        }, r.createElement(C.P, {
                            type: C._44.Span,
                            fontSize: C.U.Size5
                        }, e.count)) : null,
                        a = t.generateUserLink(e.pathSuffix, e.isExternal),
                        s = {};
                    return e.isExternal && (s.target = Object(m.b)() ? "_blank" : ""), r.createElement(C._1, {
                        key: "channel-header__item--" + e.label,
                        alignItems: C.c.Center,
                        flexShrink: 0
                    }, r.createElement(o.a, i.__assign({
                        className: "channel-header__item channel-header__item--hide " + (e.isSelected ? "channel-header__item--selected" : "")
                    }, s, {
                        to: a,
                        "data-target": "channel-header-item",
                        "data-a-target": e.label.toLowerCase() + "-channel-header-item"
                    }), r.createElement(C._7, {
                        padding: {
                            x: 2,
                            y: .5
                        },
                        display: C.Q.Flex
                    }, r.createElement(C.P, {
                        type: C._44.Span,
                        fontSize: C.U.Size5
                    }, e.label), n)))
                })
            }, t.prototype.renderDropdown = function(e) {
                var t = this;
                return e.map(function(e) {
                    var n = e.count ? r.createElement(C._7, {
                            className: "channel-header__item-count",
                            display: C.Q.Flex,
                            margin: {
                                left: .5
                            }
                        }, r.createElement(C.P, {
                            type: C._44.Span
                        }, e.count)) : null,
                        a = t.generateUserLink(e.pathSuffix, e.isExternal),
                        o = {};
                    return e.isExternal && (o.targetBlank = !0), r.createElement(C._7, {
                        key: "channel-header__dropdown-item--" + e.label,
                        "data-target": "channel-header-dropdown-item"
                    }, r.createElement(C._5, i.__assign({
                        linkTo: a,
                        disabled: "#" === a
                    }, o), r.createElement(C._7, {
                        className: "channel-header__dropdown-hover-target",
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: C.Q.Flex
                    }, r.createElement(C.P, {
                        type: C._44.Span
                    }, e.label), n)))
                })
            }, t.prototype.createChannelLinks = function(e, t, n) {
                return [{
                    label: Object(s.d)("Videos", "ChannelHeader"),
                    count: Object(s.e)(e),
                    pathSuffix: "videos/all",
                    isExternal: !1,
                    isSelected: this.isActiveTab(Q.Videos)
                }, {
                    label: Object(s.d)("Clips", "ChannelHeader"),
                    pathSuffix: "clips",
                    isExternal: !1,
                    isSelected: this.isActiveTab(Q.Clips)
                }, {
                    label: Object(s.d)("Collections", "ChannelHeader"),
                    pathSuffix: "collections",
                    isExternal: !1,
                    isSelected: this.isActiveTab(Q.Collections)
                }, {
                    label: Object(s.d)("Events", "ChannelHeader"),
                    pathSuffix: "events",
                    isExternal: !1,
                    isSelected: this.isActiveTab(Q.Events)
                }, {
                    label: Object(s.d)("Followers", "ChannelHeader"),
                    count: Object(s.e)(t),
                    pathSuffix: "followers",
                    isExternal: !1,
                    isSelected: this.isActiveTab(Q.Followers)
                }, {
                    label: Object(s.d)("Following", "ChannelHeader"),
                    count: Object(s.e)(n),
                    pathSuffix: "following",
                    isExternal: !1,
                    isSelected: this.isActiveTab(Q.Following)
                }]
            }, t.prototype.isActiveTab = function(e) {
                return Q[this.props.currentPage] === Q[e]
            }, t.prototype.isChannelEditor = function() {
                return !!this.props.data && !!this.props.data.currentUser && !!this.props.data.user && !!this.props.data.currentUser.roles && (this.props.data.currentUser.id === this.props.data.user.id || this.props.data.currentUser.roles.isStaff || this.props.data.currentUser.roles.isSiteAdmin)
            }, t.prototype.getChannelHeaderSize = function() {
                if (this.channelHeader) {
                    var e = this.channelHeader.querySelector('[data-target="channel-header-left"]'),
                        t = this.channelHeader.querySelector('[data-target="channel-header-right"]'),
                        n = this.channelHeader.querySelectorAll('[data-target="channel-header-item"]'),
                        i = this.channelHeader.querySelectorAll('[data-target="channel-header-dropdown-item"]');
                    if (n.length) {
                        var a = this.getWidth(this.channelHeader).width,
                            r = this.getWidth(e).width + this.getWidth(t).width + 20 - a;
                        if (r > 0)
                            for (var o = n.length - 1; o >= 0; o--) {
                                if (!(l = n[o]).classList.contains("channel-header__item--hide")) {
                                    var s = this.getWidth(l);
                                    if (l.classList.add("channel-header__item--hide"), i[o].classList.remove("channel-header__item--hide"), (r -= s.width) <= 0) break
                                }
                            } else
                                for (o = 0; o < n.length; o++) {
                                    var l;
                                    if ((l = n[o]).classList.contains("channel-header__item--hide")) {
                                        if (l.classList.remove("channel-header__item--hide"), (s = this.getWidth(l)).width >= Math.abs(r)) {
                                            l.classList.add("channel-header__item--hide");
                                            break
                                        }
                                        l.classList.remove("channel-header__item--hide"), i[o].classList.add("channel-header__item--hide"), r += s.width
                                    }
                                }
                        var d = this.channelHeader.querySelector('[data-target="channel-header-button"]');
                        if (d) {
                            var c = !this.channelHeader.querySelectorAll('[data-target="channel-header-item"].channel-header__item--hide').length;
                            d.classList.toggle("channel-header__item--hide", c)
                        }
                    }
                }
            }, t.prototype.canRenderBitsButton = function() {
                return this.props.data && !this.props.data.loading && this.props.currentPage !== Q.Clips && this.props.data.currentUser && this.props.data.user && this.props.data.user.cheer
            }, t.prototype.getWidth = function(e) {
                return e ? {
                    width: e.clientWidth
                } : {
                    width: 0
                }
            }, t.prototype.reportInteractive = function() {
                !this.props.data || this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
            }, t = i.__decorate([Object(u.a)(G, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.channelLogin
                }
            }), Object(w.d)("ChannelHeader")], t)
        }(r.Component)
    },
    "TT/W": function(e, t) {},
    Ta4Q: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UnmodUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnmodUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unmodUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "target"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 119
            }
        };
        n.loc.source = {
            body: "mutation UnmodUser($input: UnmodUserInput!){\nunmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\n}\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Ti/Y": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation DismissNewChatterToken($input: DismissRitualTokenInput!) {\ndismissRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    TnJK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            DarkMode: "darkMode",
            FollowerDuration: "followerDuration",
            FollowerMode: "followerMode",
            HideChat: "hideChat",
            ShowMessageFlags: "showMessageFlags",
            ShowAutoModActions: "showAutoModActions",
            ShowModActions: "showModerationActions",
            ShowModIcons: "showModIcons",
            ShowTimestamps: "showTimestamps",
            SlowMode: "slowMode"
        }
    },
    ToRI: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = Number(t);
            return n.setSeconds(a), n
        }
    },
    Tt3k: function(e, t, n) {
        "use strict";
        t.b = function(e, t, n) {
            var i = new FileReader;
            i.onloadend = function() {
                n && n(i.result)
            }, i.readAsDataURL(e);
            var a = new FileReader;
            a.onloadend = function() {
                t(a.result)
            }, a.readAsArrayBuffer(e)
        }, t.a = function(e) {
            var t = "";
            if (e && e.name) {
                var n = e.name;
                t = n.slice((Math.max(0, n.lastIndexOf(".")) || 1 / 0) + 1)
            }
            "" === t && (t = "png");
            return t
        }
    },
    Tur5: function(e, t, n) {
        "use strict";
        var i = n("bgpf");
        n.d(t, "RitualTokenMutationErrors", function() {
            return i.a
        }), n.d(t, "RitualTokenStatus", function() {
            return i.b
        }), n.d(t, "RitualTokenType", function() {
            return i.c
        });
        var a = n("AQmT"),
            r = (n.n(a), n("xfb5")),
            o = (n.n(r), n("6vcJ"));
        n.n(o)
    },
    Tv4R: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            if (!(t instanceof Array)) throw new TypeError(toString.call(t) + " is not an instance of Array");
            var n, a, r = i(e).getTime();
            return t.forEach(function(e) {
                var t = i(e),
                    o = Math.abs(r - t.getTime());
                (void 0 === n || o < a) && (n = t, a = o)
            }), n
        }
    },
    "U+9K": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RoomDetails_UpdateRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "room"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "topic"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPreviewable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumAllowedRole"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maxLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 179
            }
        };
        n.loc.source = {
            body: "mutation RoomDetails_UpdateRoom($input: UpdateRoomInput!) {\nupdateRoom(input: $input) {\nroom {\nname\ntopic\nisPreviewable\nminimumAllowedRole\n}\nerror {\ncode\nmaxLength\nminLength\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    UMQJ: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_Channels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sourceChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "sourceChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "sourceChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 268
            }
        };
        n.loc.source = {
            body: "query RaidNotification_Channels($sourceChannelID: ID! $targetChannelID: ID!) {\nsourceChannel: user(id: $sourceChannelID) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\ntargetChannel: user(id: $targetChannelID) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ucyv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UpdateLastReadAt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomViewInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoomView"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roomView"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMentionCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastReadAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation UpdateLastReadAt($input: UpdateRoomViewInput!) {\nupdateRoomView(input: $input) {\nroomView {\nunreadMentionCount\nlastReadAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    UiRd: function(e, t) {},
    Umoc: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("TnJK"),
            s = n("QFW6"),
            l = function(e) {
                a.n.track(r.SpadeEventType.ChatSettingsOpened, Object(s.a)(e))
            },
            d = function(e) {
                var t = i.__assign({}, Object(s.a)(e), {
                    setting_name: e.settingName,
                    new_value: e.newValue.toString()
                });
                a.n.track(r.SpadeEventType.ChatSettingsChanged, t)
            },
            c = function(e) {
                var t = i.__assign({}, Object(s.a)(e), {
                    setting_name: o.a.FollowerDuration,
                    new_value: e.newValue.toString(),
                    follower_mode_on: e.followerModeOn
                });
                a.n.track(r.SpadeEventType.ChatSettingsChanged, t)
            }
    },
    "Uu+E": function(e, t, n) {
        var i = n("xA5w"),
            a = n("iRXW"),
            r = n("nizW");
        e.exports = function(e, t) {
            var n = i(e),
                o = Number(t),
                s = r(n, a(n)),
                l = new Date(0);
            return l.setFullYear(o, 0, 4), l.setHours(0, 0, 0, 0), (n = a(l)).setDate(n.getDate() + s), n
        }
    },
    UzRK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        }), t.c = function(e) {
            switch (e) {
                case 0:
                    return Object(i.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                case 10:
                    return Object(i.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                case 30:
                    return Object(i.d)("30 minutes", "FollowersOnlyLabel");
                case 60:
                    return Object(i.d)("1 hour", "FollowersOnlyLabel");
                case 1440:
                    return Object(i.d)("1 day", "FollowersOnlyLabel");
                case 10080:
                    return Object(i.d)("1 week", "FollowersOnlyLabel");
                case 43200:
                    return Object(i.d)("1 month", "FollowersOnlyLabel");
                case 129600:
                    return Object(i.d)("3 months", "FollowersOnlyLabel");
                default:
                    return i.j.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
            }
        }, t.d = function(e) {
            switch (e) {
                case 0:
                    return Object(i.d)("0 min", "FollowersOnlyShorthand");
                case 10:
                    return Object(i.d)("10 min", "FollowersOnlyShorthand");
                case 30:
                    return Object(i.d)("30 min", "FollowersOnlyShorthand");
                case 60:
                    return Object(i.d)("1 hr", "FollowersOnlyShorthand");
                case 1440:
                    return Object(i.d)("1 day", "FollowersOnlyShorthand");
                case 10080:
                    return Object(i.d)("1 wk", "FollowersOnlyShorthand");
                case 43200:
                    return Object(i.d)("1 mo", "FollowersOnlyShorthand");
                case 129600:
                    return Object(i.d)("3 mo", "FollowersOnlyShorthand");
                default:
                    return Object(i.d)("custom", "FollowersOnlyShorthand")
            }
        };
        var i = n("6sO2"),
            a = 30,
            r = [0, 10, 30, 60, 1440, 10080, 43200, 129600]
    },
    V9YC: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            return {
                type: i,
                languagePreferences: e
            }
        };
        var i = "core.user-preferences.LANGUAGE_PREFERENCES_UPDATED"
    },
    "VB5+": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("QFW6"),
            s = function(e) {
                var t = i.__assign({}, Object(o.a)(e), {
                    mentioned_user_display_name: e.mentionedUserDisplayName,
                    user: e.userLogin
                });
                a.n.track(r.SpadeEventType.ChatMentionUsed, t)
            }
    },
    VDV3: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("GiK3"),
            o = n("6sO2"),
            s = n("6yQB"),
            l = n("+Znq"),
            d = n("6WAQ"),
            c = n("JpYe"),
            u = n("3yQz"),
            m = n("Odds"),
            p = (n("C2pI"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.sortChangeHandler = function(e) {
                        n.props.onVideoSortChange(e.target.value)
                    }, n.renderLanguageSelector = function() {
                        return n.props.hideLanguageSelector ? null : r.createElement(m._7, {
                            display: m.Q.InlineFlex,
                            margin: {
                                right: 1
                            }
                        }, r.createElement(s.a, null))
                    }, n.typeChangeHandler = function(e) {
                        if (n.balloonWrapperRef.toggleBalloon(!1), n.props.onVideoFilterChange) {
                            var t = e.currentTarget.getAttribute("data-filter-type");
                            t && n.props.onVideoFilterChange(t)
                        }
                    }, n.saveBalloonWrapperRef = function(e) {
                        n.balloonWrapperRef = e
                    }, n.state = {
                        isPremiereExperimentActive: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, o.o.experiments.getAssignment("TWILIGHT_PREMIERE_UPLOAD_FLOW")];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        isPremiereExperimentActive: "yes" === e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e, t = Object(o.d)("All Videos", "VideoFilter"),
                        n = Object(o.d)("Past Premieres", "VideoFilter"),
                        i = Object(o.d)("Past Broadcasts", "VideoFilter"),
                        s = Object(o.d)("Highlights", "VideoFilter"),
                        p = Object(o.d)("Uploads", "VideoFilter"),
                        h = this.props.selectedSort && Object(c.f)(this.props.selectedSort) || u.a;
                    switch (this.props.broadcastType) {
                        case d.a.PastPremiere:
                            e = n;
                            break;
                        case d.a.Archive:
                            e = i;
                            break;
                        case d.a.Highlight:
                            e = s;
                            break;
                        case d.a.Upload:
                            e = p;
                            break;
                        default:
                            e = t
                    }
                    var g = {
                            "video-filters": !0,
                            "video-filters--active": !0
                        },
                        f = {
                            "video-filters": !0
                        },
                        v = null;
                    return this.state.isPremiereExperimentActive && (v = r.createElement(m._5, {
                        onClick: this.typeChangeHandler,
                        "data-filter-type": d.a.PastPremiere,
                        "data-a-target": "video-type-filter-past-premieres"
                    }, r.createElement(m._7, {
                        className: a(this.props.broadcastType === d.a.PastPremiere ? g : f),
                        padding: {
                            y: .5,
                            x: 1
                        },
                        "data-test-selector": "filter-item-past-premiere"
                    }, n))), r.createElement(m._7, {
                        margin: {
                            bottom: 2
                        },
                        display: m.Q.Flex,
                        justifyContent: m._6.Between
                    }, r.createElement("div", null, this.renderLanguageSelector(), r.createElement(m._7, {
                        display: m.Q.InlineFlex
                    }, r.createElement(l.a, {
                        ref: this.saveBalloonWrapperRef
                    }, r.createElement(m.u, {
                        type: m.A.Hollow,
                        "data-test-selector": "filter-dropdown-button",
                        "data-a-target": "video-type-filter-dropdown",
                        dropdown: !0
                    }, e), r.createElement(m.p, {
                        direction: m.q.Bottom,
                        "data-a-target": "video-type-filter-balloon",
                        offsetX: "0",
                        noTail: !0
                    }, r.createElement(m._7, {
                        className: "layout",
                        padding: {
                            y: 1
                        }
                    }, r.createElement(m._5, {
                        onClick: this.typeChangeHandler,
                        "data-filter-type": "all",
                        "data-a-target": "video-type-filter-all"
                    }, r.createElement(m._7, {
                        className: a(this.props.broadcastType ? f : g),
                        padding: {
                            y: .5,
                            x: 1
                        },
                        "data-test-selector": "filter-item-all"
                    }, t)), v, r.createElement(m._5, {
                        onClick: this.typeChangeHandler,
                        "data-filter-type": d.a.Archive,
                        "data-a-target": "video-type-filter-past-broadcasts"
                    }, r.createElement(m._7, {
                        className: a(this.props.broadcastType === d.a.Archive ? g : f),
                        padding: {
                            y: .5,
                            x: 1
                        },
                        "data-test-selector": "filter-item-archive"
                    }, i)), r.createElement(m._5, {
                        onClick: this.typeChangeHandler,
                        "data-filter-type": d.a.Highlight,
                        "data-a-target": "video-type-filter-highlights"
                    }, r.createElement(m._7, {
                        className: a(this.props.broadcastType === d.a.Highlight ? g : f),
                        padding: {
                            y: .5,
                            x: 1
                        },
                        "data-test-selector": "filter-item-highlight"
                    }, s)), r.createElement(m._5, {
                        onClick: this.typeChangeHandler,
                        "data-filter-type": d.a.Upload,
                        "data-a-target": "video-type-filter-uploads"
                    }, r.createElement(m._7, {
                        className: a(this.props.broadcastType === d.a.Upload ? g : f),
                        padding: {
                            y: .5,
                            x: 1
                        },
                        "data-test-selector": "filter-item-upload"
                    }, p))))))), r.createElement("div", null, r.createElement(m._26, {
                        name: "sort",
                        onChange: this.sortChangeHandler,
                        value: h,
                        "data-a-target": "video-sort-select"
                    }, r.createElement("option", {
                        "data-test-selector": "sort-option-newest",
                        value: u.a,
                        "data-a-target": "video-sort-newest"
                    }, Object(o.d)("Newest", "VideoFilter")), r.createElement("option", {
                        "data-test-selector": "sort-option-popular",
                        value: u.b,
                        "data-a-target": "video-sort-popular"
                    }, Object(o.d)("Popular", "VideoFilter")))))
                }, t
            }(r.Component)),
            h = n("ISok");
        n.d(t, "a", function() {
            return p
        }), n.d(t, "b", function() {
            return h.a
        }), n.d(t, !1, function() {})
    },
    VSa1: function(e, t) {},
    VUr8: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ResumeWatchingVideoCarousel_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "viewedVideos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "30"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PreviewCardVideo"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 228
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/video-preview-card/models/preview-card-video-fragment.gql"\nquery ResumeWatchingVideoCarousel_CurrentUser {\ncurrentUser {\nid\nlogin\nviewedVideos (first: 30) {\nedges {\nnode {\n...PreviewCardVideo\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("qjMx").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    VaeB: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return t.setMilliseconds(0), t
        }
    },
    Vaxm: function(e, t) {},
    Vr3l: function(e, t, n) {
        e.exports = n.p + "assets/overwatch-chars-062a1df5ff2aaa76eb8e129940ef964a.png"
    },
    VsL1: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("6sO2"),
            r = "control";
        t.a = s, t.b = function(e, t) {
            var n = s();
            n[e] = t, a.l.set(o, n)
        }, t.c = function(e, t) {
            var n = s();
            n.lastUsedFollowerDurations[e] = t, a.l.set(o, n)
        };
        var o = "chatSettings";

        function s() {
            var e = a.l.get(o, {});
            return i.__assign({
                lastUsedFollowerDurations: {},
                showAutoModActions: !0,
                showMessageFlags: !0,
                showModerationActions: !0,
                showModIcons: !1,
                showTimestamps: !1,
                zachModeStatus: r
            }, e)
        }
    },
    "Vvm+": function(e, t) {},
    W266: function(e, t) {},
    W6ca: function(e, t, n) {
        "use strict";
        t.c = function(e, t) {
            if (!t) throw new Error("Attempted to upload an empty file object.");
            var n = decodeURI(e);
            return fetch(n, {
                method: "PUT",
                body: new Blob([t])
            })
        }, t.b = function(e, t, n) {
            if (void 0 === n) throw new Error("No default avatar selected.");
            return fetch(a.a.krakenEndpoint + "/users/" + e + "/default_images?client_id=" + a.a.authSettings.clientID + "&api_version=" + a.a.defaultAPIVersion, {
                method: "PUT",
                headers: {
                    Authorization: "OAuth " + t,
                    "Content-Type": "application/json",
                    Accept: "application/json"
                },
                body: JSON.stringify({
                    default_profile_image: r.b[n].id
                })
            })
        }, t.a = function(e, t, n, r) {
            return i.__awaiter(this, void 0, void 0, function() {
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, fetch(a.a.krakenEndpoint + "/users/" + e + "/upload_image?client_id=" + a.a.authSettings.clientID + "&api_version=" + a.a.defaultAPIVersion + "&image_type=" + n + "&format=" + r, {
                                method: "POST",
                                headers: {
                                    Authorization: "OAuth " + t
                                }
                            })];
                        case 1:
                            return [2, i.sent().json()]
                    }
                })
            })
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("puy8")
    },
    WClm: function(e, t) {},
    WNGz: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return t.setHours(0, 0, 0, 0), t
        }
    },
    WT1Y: function(e, t) {},
    WVx7: function(e, t, n) {
        "use strict";
        var i, a = n("RH2O"),
            r = n("V5M+"),
            o = n("Iw4B"),
            s = n("Aj/L"),
            l = n("TToO"),
            d = n("GiK3"),
            c = n("2KeS"),
            u = n("6sO2"),
            m = n("+8VM"),
            p = n("7vx8"),
            h = n("oIkB");
        ! function(e) {
            e[e.ExitEarly = 0] = "ExitEarly", e[e.Unknown = 1] = "Unknown", e[e.Adblock = 2] = "Adblock", e[e.LimitReached = 3] = "LimitReached"
        }(i || (i = {}));
        var g = n("4JjK"),
            f = n("/LBW"),
            v = n("Odds"),
            b = n("zzpv"),
            k = (n("x583"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.hasAwarded = !1, t.messageHandler = function(e) {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var t, n, a, r, o;
                            return l.__generator(this, function(s) {
                                switch (s.label) {
                                    case 0:
                                        if (e.origin !== window.location.origin) return [2];
                                        if (!(t = e.data) || "trueXAd" !== t.msgSrc) return [2];
                                        switch (t.type) {
                                            case g.a.Ready:
                                                return [3, 1];
                                            case g.a.RequestAd:
                                                return [3, 2];
                                            case g.a.Dimensions:
                                                return [3, 3];
                                            case g.a.OnStart:
                                                return [3, 4];
                                            case g.a.OnCredit:
                                                return [3, 5];
                                            case g.a.OnClose:
                                            case g.a.OnFinish:
                                            case g.a.LimitReached:
                                            case g.a.Adblock:
                                            case g.a.OnError:
                                                return [3, 9]
                                        }
                                        return [3, 10];
                                    case 1:
                                        return n = {
                                            msgSrc: "wateb-ad-modal",
                                            tuid: this.props.tuid
                                        }, e.source.postMessage(n, "*"), [2];
                                    case 2:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(f.g)({
                                                campaignID: a.campaign_id.toString(),
                                                requestID: t.requestID,
                                                requestMethod: this.props.requestRef
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 3:
                                        return t.height && t.width && this.setState({
                                            customDimensions: {
                                                height: t.height,
                                                width: t.width
                                            }
                                        }), [3, 10];
                                    case 4:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(f.f)({
                                                requestID: t.requestID,
                                                adblock: !1,
                                                campaignID: a.campaign_id.toString()
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 5:
                                        return s.trys.push([5, 7, , 8]), [4, this.props.redeemTrueXAd(Object(h.a)({
                                            args: t.engagement.signature_argument_string,
                                            signature: t.engagement.signature,
                                            trueXAd: {
                                                creativeID: t.engagement.ad.creative_id,
                                                campaignID: t.engagement.ad.campaign_id,
                                                name: t.engagement.ad.name,
                                                currencyAmount: t.engagement.ad.currency_amount
                                            },
                                            targetID: this.props.channelID
                                        }))];
                                    case 6:
                                        return r = s.sent(), this.hasAwarded = !0, this.props.onBitsAwarded && this.props.onBitsAwarded(r.data.redeemTrueXAd.grantedBits), [3, 8];
                                    case 7:
                                        return o = s.sent(), u.j.warn("Error while redeeming bits for truex ad", o), this.props.onError && this.props.onError(i.Unknown), [3, 8];
                                    case 8:
                                        return [3, 10];
                                    case 9:
                                        return this.props.onError && (t.type === g.a.LimitReached ? this.props.onError(i.LimitReached) : t.type === g.a.Adblock ? this.props.onError(i.Adblock) : t.type === g.a.OnError ? this.props.onError(i.Unknown) : this.hasAwarded || this.props.onError(i.ExitEarly)), this.props.closeModal(), [3, 10];
                                    case 10:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("message", this.messageHandler)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("message", this.messageHandler)
                }, t.prototype.render = function() {
                    return d.createElement(v._30, {
                        background: v.m.Base
                    }, d.createElement("div", {
                        className: "t-watch-ads-modal",
                        style: this.state.customDimensions
                    }, d.createElement(m.a, null), d.createElement("iframe", {
                        src: "/products/bits/ad"
                    })))
                }, t = l.__decorate([Object(p.a)(b, {
                    name: "redeemTrueXAd"
                })], t)
            }(d.Component));
        var y, _ = Object(a.b)(null, function(e) {
                return Object(c.b)({
                    closeModal: r.c
                }, e)
            })(k),
            C = n("HW6M"),
            S = n("3zLD"),
            E = n("jF7o"),
            N = n("w9tK"),
            w = n("zCIC");

        function D(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, r;
                return l.__generator(this, function(o) {
                    switch (o.label) {
                        case 0:
                            if (t = u.b.get("bits_truex_partner_hash", ""), !(n = u.b.get("bits_truex_api_url", "")) || !t) return u.j.warn("Truex API info missing from dynamic settings"), [2, y.Error];
                            o.label = 1;
                        case 1:
                            return o.trys.push([1, 5, , 6]), [4, fetch(n + "?placement.key=" + t + "&user.uid=" + e + "&max_activities=1")];
                        case 2:
                            return (i = o.sent()).ok ? [4, i.json()] : [3, 4];
                        case 3:
                            if ((a = o.sent()) && Array.isArray(a) && a.length) return [2, y.Available];
                            o.label = 4;
                        case 4:
                            return [2, y.Unavailable];
                        case 5:
                            return r = o.sent(), u.j.warn("Failed checking ad availability from TrueX, probably due to AdBlock", r), [2, y.AdBlocked];
                        case 6:
                            return [2]
                    }
                })
            })
        }! function(e) {
            e[e.Error = 0] = "Error", e[e.AdBlocked = 1] = "AdBlocked", e[e.Unavailable = 2] = "Unavailable", e[e.Available = 3] = "Available"
        }(y || (y = {}));
        var O, I = function(e) {
                var t = null;
                return e.disableWatchAd && (t = Object(u.d)("Try again later", "Bits--WatchAdOffer")), d.createElement(v._30, {
                    className: "bits-buy-card__offer-row",
                    display: v.Q.Flex,
                    flexShrink: 0,
                    borderBottom: !0,
                    justifyContent: v._6.Between,
                    flexWrap: v.T.NoWrap,
                    padding: {
                        x: 2,
                        y: 1
                    }
                }, d.createElement(v._7, {
                    padding: {
                        right: 4
                    }
                }, d.createElement("strong", null, Object(u.d)("Get {minBitsCount} or more Bits by watching short ads", {
                    minBitsCount: e.minPayout
                }, "Bits--WatchAdOffer"))), d.createElement(v._7, {
                    flexShrink: 0,
                    display: v.Q.Flex,
                    flexDirection: v.S.Column,
                    alignItems: v.c.End
                }, d.createElement(v.u, {
                    type: v.A.Hollow,
                    "data-a-target": "bits-watch-ad",
                    onClick: e.onWatchAdClick,
                    disabled: e.disableWatchAd
                }, Object(u.d)("Watch Ad", "Bits--WatchAdOffer")), t && d.createElement(v._7, {
                    className: "bits-buy-card__sub-text",
                    alignSelf: v.d.Stretch,
                    textAlign: v._40.Center,
                    margin: {
                        top: .5
                    }
                }, t)))
            },
            T = /version\/([\w\.]+).+?(mobile\s?safari|safari)/i,
            M = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        enableWatchAd: !0
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return l.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, D(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), Object(f.e)({
                                        channel: this.props.channelLogin,
                                        channelID: this.props.channelID,
                                        available: e === y.Available
                                    }), e !== y.Available && e !== y.AdBlocked && this.setState({
                                        enableWatchAd: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return T.test(navigator.userAgent) ? null : d.createElement(I, l.__assign({}, this.props, {
                        disableWatchAd: !this.state.enableWatchAd
                    }))
                }, t
            }(d.Component),
            R = n("jxGs"),
            x = n("3iBR"),
            L = n("iydZ"),
            A = n("ZJYd"),
            F = n("CFVp"),
            j = n("qe65"),
            U = (n("OLKT"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleBuyClick = function(e) {
                        var n = t.props.channelID || "",
                            i = Object(A.b)({
                                trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                                channelID: n,
                                purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                                bitsAmount: e.currentTarget.dataset.bitsAmount,
                                closeAllBits: t.props.closeAllBits,
                                location: t.props.location
                            });
                        i && (t.props.onBuyPopupClose(i), t.props.onClose())
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    if (this.props.offer.type === R.a) {
                        if (!this.props.channelLogin) return null;
                        var e = this.props.currentUserSHA || "";
                        return d.createElement(M, {
                            key: "wateb",
                            minPayout: this.props.offer.bits,
                            onWatchAdClick: this.props.handleWatchAdClick,
                            truexUserID: e,
                            channelID: this.props.channelID || "",
                            channelLogin: this.props.channelLogin
                        })
                    }
                    var t = null;
                    Object(A.c)(this.props.offer) ? t = d.createElement(v._7, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                        "data-test-selector": "first-time-promo-form"
                    }, d.createElement(v.P, {
                        type: v._44.Strong,
                        fontSize: v.U.Size6
                    }, Object(u.d)("Special Offer: 1st Time Buyers", "Bits--BuyCard"))) : Object(A.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === R.c ? t = d.createElement(v._7, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                        "data-test-selector": "black-friday-promo-form"
                    }, d.createElement(v.P, {
                        type: v._44.Strong,
                        fontSize: v.U.Size6
                    }, Object(u.d)("Flash Sale: Now thru Nov. 27!", "Bits--BuyCard"))) : Object(A.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === R.d && (t = d.createElement(v._7, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                        "data-test-selector": "prime-promo-promo-form"
                    }, d.createElement(v.P, {
                        type: v._44.Strong,
                        fontSize: v.U.Size6
                    }, Object(u.d)("Twitch Prime Bits Discount", "Bits--BuyCard"))));
                    var n = null;
                    this.props.offer.discount && (n = d.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text",
                        "data-test-selector": "discount-subtext-form"
                    }, Object(u.d)("{percentOff,number,percent} discount", {
                        percentOff: this.props.offer.discount
                    }, "Bits--BuyCard")));
                    var i = null;
                    (Object(A.c)(this.props.offer) || Object(A.e)(this.props.offer)) && (i = d.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text",
                        "data-test-selector": "one-per-account-form"
                    }, Object(u.d)("one per account", "Bits--BuyCard")));
                    var a = this.props.isLastRow ? v._30 : v._7;
                    return d.createElement(a, {
                        className: "bits-buy-card-offer-row",
                        flexShrink: 0,
                        display: v.Q.Flex,
                        justifyContent: v._6.Center,
                        borderBottom: this.props.isLastRow,
                        flexDirection: v.S.Column,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, t, d.createElement(v._7, {
                        display: v.Q.Flex,
                        justifyContent: v._6.Between,
                        alignItems: v.c.Center
                    }, d.createElement(v._7, {
                        flexGrow: 1
                    }, d.createElement(v.P, {
                        type: v._44.H5,
                        color: v.J.Base,
                        bold: !0
                    }, this.props.offer.bits, " Bits"), this.getAvailableTiers(this.props.offer.bits)), d.createElement(v._7, {
                        flexShrink: 0,
                        display: v.Q.Flex,
                        flexDirection: v.S.Column,
                        alignItems: v.c.End
                    }, d.createElement(v.u, {
                        onClick: this.handleBuyClick,
                        "data-purchase-url": this.props.offer.url,
                        "data-bits-amount": this.props.offer.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.offer.bits
                    }, this.props.offer.price), (n || i) && d.createElement(v._7, {
                        alignSelf: v.d.Stretch,
                        textAlign: v._40.Right,
                        margin: {
                            top: .5
                        }
                    }, n, i))))
                }, t.prototype.getAvailableTiers = function(e) {
                    var t = this.props.bitsConfig.indexedActions[x.g];
                    t || (t = Object(F.b)());
                    var n = t.orderedTiers.filter(function(t) {
                        return t.bits <= e
                    }).reverse();
                    return d.createElement(v._7, {
                        padding: {
                            top: .5
                        },
                        className: "bits-buy-card-offer-row__tier-bits-images"
                    }, n.map(function(e) {
                        return d.createElement(j.a, {
                            key: e.bits,
                            sources: Object(L.b)(e, 2, !1)
                        })
                    }))
                }, t
            }(d.Component)),
            B = (n("sgUC"), function(e) {
                var t = [],
                    n = [],
                    i = null;
                return e.offers.forEach(function(a, r) {
                    var o = d.createElement(U, {
                            key: a.id,
                            offer: a,
                            isLastRow: r + 1 < e.offers.length,
                            bitsConfig: e.bitsConfig,
                            channelID: e.channelID,
                            channelLogin: e.channelLogin,
                            currentUserSHA: e.currentUserSHA,
                            location: e.location,
                            onClose: e.onClose,
                            onBuyPopupClose: e.onBuyPopupClose,
                            handleWatchAdClick: e.handleWatchAdClick,
                            closeAllBits: e.closeAllBits,
                            trackBitsCardInteraction: e.trackBitsCardInteraction
                        }),
                        s = Object(A.d)(a),
                        l = Object(A.c)(a),
                        c = a.type === R.a;
                    l && !e.hidePromos ? t.push(o) : s && !l ? t.push(o) : c && !e.hideWateb ? i = o : c || s || n.push(o)
                }), e.fullsize ? d.createElement(v._7, {
                    className: "bits-buy-card-offers__full-size",
                    flexGrow: 1,
                    flexWrap: v.T.NoWrap,
                    display: v.Q.Flex,
                    flexDirection: v.S.Column
                }, i, t, n) : d.createElement(w.b, {
                    className: "bits-buy-card-offers__scroll-view"
                }, d.createElement(v._7, {
                    flexGrow: 1,
                    flexWrap: v.T.NoWrap,
                    display: v.Q.Flex,
                    flexDirection: v.S.Column
                }, i, t, n))
            }),
            P = function(e) {
                var t = null;
                e.pricesIncludeVAT && (t = d.createElement(v.P, {
                    italic: !0,
                    type: v._44.P,
                    color: v.J.Alt
                }, Object(u.d)("Prices include VAT", "Bits--BuyCard")));
                var n = null;
                e.minBitsToCheer && e.minBitsToCheer > 1 && (n = d.createElement(v.P, {
                    color: v.J.Alt
                }, Object(u.d)("{displayName} requires {minBits} Bits to Cheer in this channel.", {
                    displayName: e.displayName,
                    minBits: e.minBitsToCheer
                }, "Bits--BuyCard")));
                var i = null;
                return void 0 !== e.bitsBalance && null !== e.bitsBalance && (i = d.createElement(v.P, {
                    color: v.J.Alt
                }, Object(u.d)("You have {totalBits} Bits", {
                    totalBits: d.createElement("strong", {
                        "data-a-target": "buy-card-bits-count"
                    }, e.bitsBalance)
                }, "Bits--BuyCard"))), d.createElement(v._30, {
                    className: "bits-buy-card-header",
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    borderBottom: !0,
                    flexShrink: 0
                }, d.createElement(v._7, {
                    margin: {
                        bottom: 1
                    }
                }, d.createElement(v.P, {
                    type: v._44.H4,
                    color: v.J.Alt
                }, Object(u.d)("Purchase Bits", "Bits--BuyCard")), t), i, n)
            },
            V = n("nrdj"),
            H = function(e) {
                return d.createElement(v._7, {
                    display: v.Q.Flex,
                    flexGrow: 1,
                    flexDirection: v.S.Column,
                    alignItems: v.c.Center,
                    fullWidth: !0,
                    flexWrap: v.T.NoWrap,
                    padding: {
                        y: 1
                    }
                }, d.createElement(V.a, {
                    prefix: "cheer",
                    amount: e.amount,
                    bitsConfig: e.bitsConfig,
                    showAmount: !0,
                    showImage: !0
                }), d.createElement(v._7, {
                    display: v.Q.Flex,
                    padding: {
                        top: 1
                    },
                    flexGrow: 1,
                    flexDirection: v.S.Column,
                    alignItems: v.c.Center,
                    flexWrap: v.T.NoWrap
                }, d.createElement(v.P, {
                    type: v._44.H4,
                    bold: !0
                }, Object(u.d)("You got {bitsAmount,number} Bits!", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward")), d.createElement(v._1, {
                    padding: {
                        top: 1
                    }
                }, d.createElement(v.P, {
                    color: v.J.Alt2
                }, Object(u.d)("{bitsAmount,number} Bits were added to your Bit inventory.", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward"), d.createElement("br", null), Object(u.d)("You can use these Bits to Cheer!", "Bits--WatchAdAward")))), d.createElement(v._7, {
                    display: v.Q.Flex,
                    padding: {
                        x: 1,
                        top: 3
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._6.Between
                }, d.createElement(v.u, {
                    onClick: e.onStartCheering
                }, Object(u.d)("Start Cheering", "Bits--WatchAdAward")), d.createElement(v.u, {
                    type: v.A.Hollow,
                    onClick: e.onWatchAnother,
                    disabled: !e.hasAdAvailable
                }, Object(u.d)("Watch Another", "Bits--WatchAdAward"))))
            },
            W = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasAdAvailable: !0
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        return l.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, D(this.props.truexUserID)];
                                case 1:
                                    return e.sent() !== y.Available && this.setState({
                                        hasAdAvailable: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return d.createElement(H, l.__assign({}, this.props, {
                        hasAdAvailable: this.state.hasAdAvailable
                    }))
                }, t
            }(d.Component),
            G = (n("q8Cw"), function(e) {
                var t = Object(u.d)("Something's wrong!", "Bits--WatchAdError"),
                    n = Object(u.d)("Something went wrong. Wait a while and try again.", "Bits--WatchAdError"),
                    a = "adserrorgeneric";
                switch (e.type) {
                    case i.Adblock:
                        a = "adserroradblock", n = Object(u.d)("We can't load this Ad, probably because Ad Blocking software is running. To watch an ad and get Bits, please disable all Ad Blocking software.", "Bits--WatchAdError");
                        break;
                    case i.LimitReached:
                        a = "adserrorlimit", t = Object(u.d)("Ad Limit Reached", "Bits--WatchAdError"), n = Object(u.d)("That's all the Ads we have for now. Try again tomorrow!", "Bits--WatchAdError");
                        break;
                    case i.ExitEarly:
                        n = Object(u.d)("To get Bits, you must view and interact with the Ad for the minimum amount of time.", "Bits--WatchAdError")
                }
                var r = d.createElement(v._7, {
                    className: "watch-ad-error__footer",
                    display: v.Q.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._6.Center
                }, d.createElement(v.u, {
                    onClick: e.onTryAgain
                }, Object(u.d)("Try Again", "Bits--WatchAdError")));
                return e.type === i.LimitReached && (r = d.createElement(v._7, {
                    className: "watch-ad-error__footer",
                    display: v.Q.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._6.Between
                }, d.createElement(v.u, {
                    onClick: e.onClose
                }, Object(u.d)("Got It", "Bits--WatchAdError")), d.createElement(v.u, {
                    onClick: e.onTryAgain,
                    type: v.A.Hollow
                }, Object(u.d)("Buy Bits", "Bits--WatchAdError")))), d.createElement(v._7, {
                    padding: {
                        x: 1
                    },
                    display: v.Q.Flex,
                    flexGrow: 1,
                    flexDirection: v.S.Column,
                    alignItems: v.c.Center,
                    fullWidth: !0,
                    flexWrap: v.T.NoWrap
                }, d.createElement(v._7, {
                    padding: {
                        y: 2
                    }
                }, d.createElement("img", {
                    className: "watch-ad-error__error-image",
                    src: x.b + "/light/static/1/" + a + ".png"
                })), d.createElement(v._7, {
                    padding: {
                        bottom: 1
                    }
                }, d.createElement(v.P, {
                    type: v._44.H4,
                    bold: !0
                }, t)), d.createElement(v.P, {
                    color: v.J.Alt2
                }, n), r)
            }),
            Q = n("CSlQ"),
            q = n("aqNN"),
            z = (n("6Rwu"), "storage.wateb.agreedToWatebTerms.v1"),
            Y = "bits-show-wateb-terms",
            J = "bits-agree-wateb-terms";
        ! function(e) {
            e[e.Inactive = 0] = "Inactive", e[e.Error = 1] = "Error", e[e.Awarded = 2] = "Awarded"
        }(O || (O = {}));
        var $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        wateb: O.Inactive,
                        watebError: null,
                        bitsAwarded: 0,
                        showWatebTerms: !1,
                        agreedToWatebTerms: u.l.get(z, !1)
                    }, t.onBuyPopupClose = function(e) {
                        Object(E.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t.onAdBitsAwarded = function(e) {
                        t.props.data && !t.props.data.loading && t.props.data.refetch(), t.setState({
                            wateb: O.Awarded,
                            bitsAwarded: e
                        })
                    }, t.renderWatebTerms = function(e, n) {
                        return d.createElement(v._30, l.__assign({
                            className: C(e),
                            display: v.Q.Flex,
                            flexDirection: v.S.Column,
                            justifyContent: v._6.Center,
                            padding: {
                                bottom: 2,
                                x: 2
                            },
                            textAlign: v._40.Left,
                            "data-a-target": Y
                        }, n), d.createElement(v._30, {
                            margin: {
                                top: 2,
                                bottom: 2,
                                left: 0
                            },
                            alignItems: v.c.Baseline
                        }, d.createElement("div", {
                            key: "Bits--back-edit",
                            style: {
                                cursor: "pointer"
                            },
                            onClick: t.onCloseWatebTerms
                        }, d.createElement(v.P, {
                            color: v.J.Link,
                            type: v._44.Span
                        }, d.createElement(v._20, {
                            asset: v._21.ChatSettingsBack,
                            height: 10,
                            width: 10
                        }), Object(u.d)("Back", "Bits--Watch-Ad-Terms")))), d.createElement(v._7, {
                            padding: {
                                bottom: 2
                            }
                        }, d.createElement(v.P, {
                            type: v._44.Span
                        }, Object(u.d)("Before continuing to watch ads to earn Bits, we remind you that the <x:link>Bits Acceptable Use Policy</x:link> applies to your participation with this feature and any Bits you may obtain. As a reminder, you may not:", {
                            "x:link": function(e) {
                                return d.createElement("span", {
                                    key: "helplink"
                                }, d.createElement("a", {
                                    href: "https://www.twitch.tv/p/legal/bits-acceptable-use/",
                                    target: "_blank",
                                    rel: "noopener noreferrer"
                                }, e))
                            }
                        }, "Bits--Watch-Ad-Terms")), d.createElement(v._7, {
                            margin: {
                                y: 1
                            }
                        }, d.createElement("li", null, Object(u.d)("Obtain Bits to Cheer on your own channel via this feature", "Bits--Watch-Ad-Terms")), d.createElement("li", null, Object(u.d)("Collect Bits via this feature through the use of multiple accounts, robots, or other automated means", "Bits--Watch-Ad-Terms")))), d.createElement(v._7, {
                            display: v.Q.Flex,
                            justifyContent: v._6.Center
                        }, d.createElement(v.u, {
                            size: v.y.Small,
                            onClick: t.onAgreeToWatebTerms,
                            "data-a-target": J
                        }, Object(u.d)("Continue", "Bits--Watch-Ad-Terms"))))
                    }, t.onAgreeToWatebTerms = function() {
                        u.l.set(z, !0), t.setState({
                            agreedToWatebTerms: !0,
                            showWatebTerms: !1
                        }), t.showWatchAdModal()
                    }, t.onCloseWatebTerms = function() {
                        t.setState({
                            showWatebTerms: !1
                        })
                    }, t.handleWatchAdClick = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            return l.__generator(this, function(e) {
                                return this.state.agreedToWatebTerms ? (this.showWatchAdModal(), [2]) : (this.setState({
                                    showWatebTerms: !0
                                }), [2])
                            })
                        })
                    }, t.receiveAdErrorState = function(e) {
                        t.setState({
                            wateb: O.Error,
                            watebError: e
                        })
                    }, t.resetAdErrorState = function() {
                        t.state.wateb === O.Error && (t.setState({
                            wateb: O.Inactive
                        }), t.props.data && t.props.data.refetch())
                    }, t
                }
                return l.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return !e.adModalOpen
                }, t.prototype.render = function() {
                    var e = {
                            border: !0,
                            background: v.m.Base,
                            fullWidth: !0,
                            elevation: 3
                        },
                        t = C({
                            "bits-buy-card": !0,
                            "bits-buy-card__chat-tooltip": this.props.location === f.b.ChatTooltip
                        }),
                        n = null;
                    if (this.props.location === f.b.ChatTooltip && (n = d.createElement("button", {
                            className: "bits-buy-card__close",
                            onClick: this.props.onClose,
                            "data-a-target": "bits-buy-card-close-button"
                        }, d.createElement(v._20, {
                            asset: v._21.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return d.createElement(v._30, l.__assign({
                        className: t,
                        "data-a-target": "bits-buy-card-loading",
                        display: v.Q.Flex,
                        flexDirection: v.S.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._6.Center,
                        textAlign: v._40.Center
                    }, e), d.createElement(v._9, {
                        delay: 0
                    }), d.createElement(v._7, {
                        padding: {
                            top: 2
                        }
                    }, d.createElement(v.P, {
                        italic: !0
                    }, Object(u.d)("Fetching bits", "Bits--BuyCard"))));
                    if (this.props.data.error) return d.createElement(v._7, l.__assign({
                        className: C(t, "bits-buy-card--shorter"),
                        display: v.Q.Flex,
                        flexDirection: v.S.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._6.Center,
                        padding: 2,
                        textAlign: v._40.Center,
                        "data-a-target": "bits-buy-card-error"
                    }, e), n, d.createElement(v.P, {
                        italic: !0
                    }, Object(u.d)("Bits prices are unavailable right now. Check back again later.", "Bits--BuyCard")));
                    if (this.state.showWatebTerms) return this.renderWatebTerms(t, e);
                    var i = this.renderWatebCard();
                    if (i) return d.createElement(v._30, l.__assign({
                        className: C(t, "bits-buy-card--shorter"),
                        display: v.Q.Flex,
                        flexDirection: v.S.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._6.Center,
                        textAlign: v._40.Center,
                        padding: 1
                    }, e), n, i);
                    var a = [];
                    this.props.data.currentUser ? a = this.props.data.currentUser.bitsOffers : this.props.data.bitsOffers && (a = this.props.data.bitsOffers);
                    var r = a.filter(function(e) {
                            return e.type === R.b
                        }).some(function(e) {
                            return e.includesVAT
                        }),
                        o = this.props.data.user ? this.props.data.user.id : "",
                        s = d.createElement(B, {
                            offers: a,
                            fullsize: this.props.fullsize,
                            hidePromos: this.props.hidePromos,
                            hideWateb: this.props.hideWateb,
                            bitsConfig: this.props.bitsConfig,
                            channelID: o,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.closeAllBits,
                            currentUserSHA: this.props.data && this.props.data.currentUser && this.props.data.currentUser.idSHA1,
                            handleWatchAdClick: this.handleWatchAdClick,
                            location: this.props.location,
                            onBuyPopupClose: this.onBuyPopupClose,
                            onClose: this.props.onClose,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction
                        }),
                        c = null;
                    return this.props.location === f.b.ChatTooltip && (c = d.createElement(P, {
                        bitsBalance: this.props.data && this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        displayName: this.props.data && this.props.data.user && this.props.data.user.displayName || this.props.channelLogin || "",
                        minBitsToCheer: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.cheerMinimumBits,
                        pricesIncludeVAT: r
                    })), d.createElement(v._30, l.__assign({
                        className: t,
                        padding: {
                            top: 1
                        },
                        display: v.Q.Flex,
                        flexDirection: v.S.Column,
                        "data-a-target": "bits-buy-card"
                    }, e), n, c, s)
                }, t.prototype.renderWatebCard = function() {
                    if (this.props.data && this.props.data.currentUser) switch (this.state.wateb) {
                        case O.Awarded:
                            return d.createElement(W, {
                                bitsConfig: this.props.bitsConfig,
                                amount: this.state.bitsAwarded,
                                onStartCheering: this.props.onClose,
                                onWatchAnother: this.handleWatchAdClick,
                                truexUserID: this.props.data.currentUser.idSHA1
                            });
                        case O.Error:
                            return d.createElement(G, {
                                type: this.state.watebError || i.Unknown,
                                onClose: this.props.onClose,
                                onTryAgain: this.resetAdErrorState
                            });
                        default:
                            return !1
                    }
                }, t.prototype.showWatchAdModal = function() {
                    this.props.data && this.props.data.currentUser && this.props.data.user && this.props.showWatchAdModal({
                        tuid: this.props.data.currentUser.idSHA1,
                        onBitsAwarded: this.onAdBitsAwarded,
                        onError: this.receiveAdErrorState,
                        requestRef: f.c.ShowAdButton,
                        channelID: this.props.data.user.id
                    })
                }, t = l.__decorate([Object(p.a)(q, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(d.Component),
            K = Object(S.compose)(Object(Q.d)("BitsBuyCard", {
                autoReportInteractive: !0,
                destination: N.a.BitsBuyCard
            }))($);

        function Z(e) {
            return {
                adModalOpen: Object(o.b)(e, _),
                isLoggedIn: Object(s.d)(e)
            }
        }

        function X(e) {
            return {
                showWatchAdModal: function(t) {
                    return e(Object(r.d)(_, t))
                }
            }
        }
        var ee = Object(a.b)(Z, X)(K);
        n.d(t, !1, function() {
            return Z
        }), n.d(t, !1, function() {
            return X
        }), n.d(t, "a", function() {
            return ee
        })
    },
    WxKK: function(e, t, n) {
        "use strict";
        var i = n("7FW4");
        n.d(t, "a", function() {
            return i.a
        })
    },
    WzS7: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("3zLD"),
            o = n("6sO2"),
            s = n("vKFS"),
            l = n("7vx8"),
            d = n("vH/s"),
            c = n("CSlQ"),
            u = n("GJxf"),
            m = n("dc2a"),
            p = n("Odds"),
            h = n("+DHI"),
            g = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && !this.props.data.loading && !this.props.data.user) return null;
                    var e = null,
                        t = null;
                    if (this.props.data && this.props.data.user && this.props.data.user.collections) {
                        var n = this.props.data.user.collections.edges;
                        if (0 === n.length) return null;
                        if (e = n[0].node, 0 === (t = Object(m.a)(e.videos)).length) return null
                    }
                    return a.createElement("div", null, this.renderCarouselHeader(), a.createElement(p._7, {
                        padding: {
                            top: .5
                        }
                    }, a.createElement(u.a, {
                        collectionID: e ? e.id : void 0,
                        listContext: s.b.SingleChannelList,
                        tracking: {
                            content: d.PageviewContent.LatestCollection,
                            medium: this.props.tracking.medium,
                            location: this.props.tracking.location,
                            source: {
                                source_channel: this.props.userLogin,
                                source_item_type: d.TwitchDataType.Channel
                            }
                        },
                        videos: t
                    })))
                }, t.prototype.renderCarouselHeader = function() {
                    if (this.props.data && this.props.data.loading || !this.props.data.user || !this.props.data.user.collections) return a.createElement(p._13, {
                        width: 250,
                        lineCount: 1
                    });
                    var e = this.props.data.user.collections.edges[0].node,
                        t = e.videos ? e.videos.totalCount : 0,
                        n = Object(o.d)("Recently updated collection", "LatestCollectionCarousel"),
                        i = Object(o.d)("{videoCountText, plural, one {# video} other {# videos}}", {
                            videoCountText: t
                        }, "LatestCollectionCarousel");
                    return a.createElement(p._7, null, a.createElement(p._7, {
                        display: p.Q.Flex,
                        flexDirection: p.S.Row
                    }, a.createElement(p._7, {
                        margin: {
                            right: 1
                        }
                    }, a.createElement(p.P, {
                        type: p._44.H3,
                        "data-test-selector": "collection-title"
                    }, e.title || Object(o.d)("Latest Collection", "LatestCollectionCarousel"))), a.createElement(p.u, {
                        type: p.A.Hollow,
                        size: p.y.Small,
                        icon: p._21.Play,
                        linkTo: "/collections/" + e.id,
                        "data-test-selector": "play-all-button"
                    }, Object(o.d)("Play all", "LatestCollectionCarousel"))), a.createElement(p.P, {
                        color: p.J.Alt2,
                        type: p._44.Span,
                        "data-test-selector": "collection-metadata"
                    }, n, " · ", i))
                }, t
            }(a.Component),
            f = Object(r.compose)(Object(l.a)(h), Object(c.d)("LatestCollectionCarousel", {
                autoReportInteractive: !0
            }))(g),
            v = n("IwGL"),
            b = n("pXt7"),
            k = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.noGameSpecified) return null;
                    var e = this.props.data && !this.props.data.loading && this.props.data.game && Object(m.a)(this.props.data.game.videos) || null;
                    return !this.props.data || this.props.data.loading || e && 0 !== e.length ? a.createElement("div", null, a.createElement(p.P, {
                        type: p._44.H4,
                        transform: p._43.Uppercase,
                        color: p.J.Alt2
                    }, this.props.gameName ? Object(o.d)("Popular videos from {game}", {
                        game: this.props.gameName
                    }, "PopularVideosByGameCarousel") : a.createElement(p._13, {
                        width: 200
                    })), a.createElement(u.a, {
                        currentlyWatchingVideoID: this.props.currentlyWatchingVideoID,
                        listContext: s.b.SingleGameList,
                        tracking: {
                            content: d.PageviewContent.PopularVideos,
                            medium: this.props.tracking.medium,
                            location: this.props.tracking.location,
                            source: {
                                source_item_type: d.TwitchDataType.Game,
                                source_game: this.props.gameName || void 0
                            }
                        },
                        videos: e
                    })) : null
                }, t
            }(a.Component),
            y = Object(r.compose)(Object(c.d)("PopularVideosByGameCarousel", {
                autoReportInteractive: !0
            }), Object(l.a)(b, {
                skip: function(e) {
                    return !e.gameName
                }
            }))(k),
            _ = n("tKvs"),
            C = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    return !this.props.data || this.props.data.loading || this.props.data.videos ? this.props.data && this.props.data.videos && 0 === (e = Object(m.a)(this.props.data.videos)).length ? null : a.createElement("div", null, a.createElement(p.P, {
                        type: p._44.H4,
                        transform: p._43.Uppercase,
                        color: p.J.Alt2
                    }, Object(o.d)("Popular Videos On Twitch", "PopularVideosCarousel")), a.createElement(u.a, {
                        currentlyWatchingVideoID: this.props.currentlyWatchingVideoID,
                        listContext: s.b.MixedGameAndChannelList,
                        tracking: {
                            content: d.PageviewContent.PopularOverallVideos,
                            medium: this.props.tracking.medium,
                            location: this.props.tracking.location,
                            source: {}
                        },
                        videos: e
                    })) : null
                }, t = i.__decorate([Object(c.d)("PopularVideosCarousel", {
                    autoReportInteractive: !0
                }), Object(l.a)(_)], t)
            }(a.Component),
            S = n("FNUa"),
            E = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.error || !this.props.data.user)) return null;
                    var e = !this.props.data || this.props.data.loading ? null : Object(m.a)(this.props.data.user.videos);
                    return e && 0 === e.length ? null : a.createElement("div", null, a.createElement(p.P, {
                        type: p._44.H4,
                        transform: p._43.Uppercase,
                        color: p.J.Alt2
                    }, this.props.creatorDisplayName ? Object(o.d)("Recent videos from {displayName}", {
                        displayName: this.props.creatorDisplayName
                    }, "RecentCreatorVideosFromUserCarousel") : a.createElement(p._13, {
                        width: 200
                    })), a.createElement(u.a, {
                        currentlyWatchingVideoID: this.props.currentlyWatchingVideoID,
                        listContext: s.b.SingleChannelList,
                        videos: e,
                        tracking: {
                            content: d.PageviewContent.RecentVideos,
                            location: this.props.tracking.location,
                            medium: this.props.tracking.medium,
                            source: {
                                source_item_type: d.TwitchDataType.Channel,
                                source_channel: this.props.data ? this.props.data.user.login : ""
                            }
                        }
                    }))
                }, t
            }(a.Component),
            N = Object(r.compose)(Object(c.d)("RecentCreatorVideosCarousel", {
                autoReportInteractive: !0
            }), Object(l.a)(S, {
                skip: function(e) {
                    return !e.creatorID
                }
            }))(E),
            w = n("RH2O"),
            D = n("Aj/L"),
            O = n("pwi9"),
            I = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.isLoggedIn || !this.props.data || this.props.data.error) return null;
                    var e = this.props.data && this.props.data.currentUser && this.props.data.currentUser.recommendations && Object(m.a)(this.props.data.currentUser.recommendations.videos) || null;
                    if (this.props.data && !this.props.data.loading && (!e || 0 === e.length)) return null;
                    var t = this.props.data.currentUser ? this.props.data.currentUser.login : "";
                    return a.createElement("div", null, a.createElement(p.P, {
                        type: p._44.H4,
                        transform: p._43.Uppercase,
                        color: p.J.Alt2
                    }, Object(o.d)("Based On Your Viewing History", "RecommendedVideoCarousel")), a.createElement(u.a, {
                        currentlyWatchingVideoID: this.props.currentlyWatchingVideoID,
                        listContext: s.b.MixedGameAndChannelList,
                        tracking: {
                            content: d.PageviewContent.RecommendedVideos,
                            medium: this.props.tracking.medium,
                            location: this.props.tracking.location,
                            source: {
                                source_item_type: d.TwitchDataType.User,
                                source_channel: t
                            }
                        },
                        videos: e
                    }))
                }, t
            }(a.Component),
            T = Object(r.compose)(Object(c.d)("RecommendedVideoCarousel", {
                autoReportInteractive: !0
            }), Object(l.a)(O, {
                skip: function(e) {
                    return !e.isLoggedIn
                }
            }))(I);
        var M = Object(w.b)(function(e) {
                return {
                    isLoggedIn: Object(D.d)(e)
                }
            })(T),
            R = n("wuJz"),
            x = n("VUr8"),
            L = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.isLoggedIn || !this.props.data || this.props.data.error) return null;
                    var e = this.props.data && this.props.data.currentUser && Object(m.a)(this.props.data.currentUser.viewedVideos) || null;
                    if (!(!this.props.data || this.props.data.loading || e && 0 !== e.length)) return null;
                    e = (e || []).filter(function(e) {
                        if (!e.self || !e.self.viewingHistory || !e.self.viewingHistory.position) return !1;
                        var t = e.self.viewingHistory.position,
                            n = t / e.lengthSeconds;
                        return !(n <= .05 || n >= .95)
                    }).sort(function(e, t) {
                        return Object(R.compareDesc)(new Date(e.publishedAt), new Date(t.publishedAt))
                    });
                    var t = this.props.data.currentUser ? this.props.data.currentUser.login : "";
                    return a.createElement("div", null, a.createElement(p.P, {
                        type: p._44.H4,
                        transform: p._43.Uppercase,
                        color: p.J.Alt2
                    }, Object(o.d)("Finish Watching", "ResumeWatchingVideoCarousel")), a.createElement(u.a, {
                        currentlyWatchingVideoID: this.props.currentlyWatchingVideoID,
                        listContext: s.b.MixedGameAndChannelList,
                        tracking: {
                            content: d.PageviewContent.ResumeWatchingVideos,
                            location: this.props.tracking.location,
                            medium: this.props.tracking.medium,
                            source: {
                                source_item_type: d.TwitchDataType.User,
                                source_channel: t
                            }
                        },
                        videos: e
                    }))
                }, t
            }(a.Component);
        var A = Object(r.compose)(Object(l.a)(x, {
            skip: function(e) {
                return !e.isLoggedIn
            }
        }), Object(c.d)("ResumeWatchingVideoCarousel", {
            autoReportInteractive: !0
        }))(L);
        var F = Object(w.b)(function(e) {
            return {
                isLoggedIn: Object(D.d)(e)
            }
        })(A);
        n.d(t, "a", function() {
            return f
        }), n.d(t, !1, function() {
            return v.LatestVideosFromFollowedCarousel
        }), n.d(t, "b", function() {
            return y
        }), n.d(t, "c", function() {
            return C
        }), n.d(t, "d", function() {
            return N
        }), n.d(t, "e", function() {
            return M
        }), n.d(t, "f", function() {
            return F
        })
    },
    X7fs: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomMessages"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "first"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "last"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "before"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "after"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "last"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "last"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "before"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "before"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "after"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "RoomMessage"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "deletedAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sentAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "roomMessageContent"
                                                                },
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sender"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "chatColor"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayBadges"
                                                                        },
                                                                        arguments: [{
                                                                            kind: "Argument",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "channelID"
                                                                            },
                                                                            value: {
                                                                                kind: "Variable",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "channelID"
                                                                                }
                                                                            }
                                                                        }],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "setID"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "version"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 466
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/rooms/models/room-message-content-fragment.gql"\nquery RoomMessages($roomID: ID! $channelID: ID! $first: Int! $last: Int! $before: Cursor $after: Cursor) {\nroom(id: $roomID) {\nid\nmessages(first: $first last: $last before: $before after: $after) {\nedges {\ncursor\nnode {\n... on RoomMessage {\nid\ndeletedAt\nsentAt\n...roomMessageContent\nsender {\nid\nlogin\nchatColor\ndisplayName\ndisplayBadges(channelID: $channelID) {\nsetID\nversion\n}\n}\n}\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("2LJg").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    XFzU: function(e, t, n) {
        var i = n("GI7G");
        e.exports = function(e, t) {
            var n = i(e, t) / 3;
            return n > 0 ? Math.floor(n) : Math.ceil(n)
        }
    },
    XViT: function(e, t) {},
    XYVN: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, o) {
            return {
                topic: n ? Object(a.a)(n) : "",
                type: i.PubsubMessageType.BitsLeaderboardEvent,
                mutator: function(e, t) {
                    if (!t || !n) return t;
                    var i = e.top.map(function(e) {
                        return Object(r.b)(e, n.id)
                    });
                    if (t.user) {
                        if (t.user.tournament && t.user.tournament.teamLeaderboard && (t.user.tournament.teamLeaderboard.items.edges = i), t.user.tournament && t.user.tournament.globalLeaderboard && (t.user.tournament.globalLeaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.tournament.self && t.user.tournament.self.globalLeaderboardItem)) {
                            var a = Object(r.b)(e.entry_context.entry, n.id);
                            t.user.tournament.self.globalLeaderboardItem = a.node
                        }
                        if (t.user.cheer && t.user.cheer.leaderboard && (t.user.cheer.leaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.self && t.user.self.bitsLeaderboardItem)) {
                            var s = Object(r.b)(e.entry_context.entry, n.id);
                            t.user.self.bitsLeaderboardItem = s.node
                        }
                    }
                    return t
                },
                skip: !n,
                query: e,
                variables: {
                    channelID: t
                }
            }
        };
        var i = n("aMxy"),
            a = n("HZww"),
            r = n("bkpq")
    },
    XYqD: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("GiK3"),
            a = (n.n(i), n("Odds")),
            r = function() {
                return i.createElement(a.B, null, i.createElement(a.j, {
                    ratio: a.k.Aspect16x9
                }, i.createElement(a._13, null)), i.createElement(a.C, null, i.createElement(a._7, {
                    display: a.Q.Flex,
                    margin: {
                        bottom: 1
                    }
                }, i.createElement(a._7, {
                    display: a.Q.InlineBlock,
                    margin: {
                        top: 1,
                        right: 1
                    }
                }, i.createElement(a._13, {
                    width: 40,
                    height: 56
                })), i.createElement(a._7, {
                    display: a.Q.InlineBlock,
                    margin: {
                        top: 1
                    }
                }, i.createElement(a.P, null, i.createElement(a._13, {
                    width: 150
                })), i.createElement(a.P, {
                    fontSize: a.U.Size7
                }, i.createElement(a._13, {
                    width: 100
                }))))))
            }
    },
    XdSf: function(e, t, n) {
        "use strict";
        t.a = function() {
            var e = this;
            return Object(a.a)(r, {
                props: function(t) {
                    return {
                        updateChatColorMutation: function(n) {
                            return i.__awaiter(e, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        color: n
                                                    }
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return [2, e.sent().data];
                                        case 2:
                                            throw new Error("Update chat color mutation is not ready")
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i = n("TToO"),
            a = n("7vx8"),
            r = n("ScRf");
        n.n(r)
    },
    Y5T0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BitsCommandHandler_DismissPinnedCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPinnedCheerInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissPinnedCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation BitsCommandHandler_DismissPinnedCheer($input: DismissPinnedCheerInput!) {\ndismissPinnedCheer(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    YPf8: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return 5 === i(e).getDay()
        }
    },
    YPjl: function(e, t, n) {
        var i = n("xA5w"),
            a = n("Jvcu"),
            r = n("AZvW");
        e.exports = function(e, t) {
            var n = i(e),
                o = Number(t),
                s = r(n);
            return a(n, o - s)
        }
    },
    YRFD: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e).getTime(),
                a = i(t).getTime();
            return n > a ? -1 : n < a ? 1 : 0
        }
    },
    YUUt: function(e, t, n) {
        e.exports = n.p + "assets/counterstrike-skill-groups-24ec0fc40a78435bc37349dfbde7c720.png"
    },
    YVIF: function(e, t) {},
    Z3Cb: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("CIox"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("7vx8"),
            d = n("WIs4"),
            c = n("aMxy"),
            u = n("NXs7"),
            m = n("HZww"),
            p = n("vH/s"),
            h = n("9u8h"),
            g = function() {
                function e() {}
                return e.fetchChannelsList = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, h.a.get("/kraken/autohost/list")];
                                case 1:
                                    return e = n.sent(), [2, this.deserialize(e)];
                                case 2:
                                    return t = n.sent(), s.j.error(t, "Couldn't fetch autohost list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.setChannelsList = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, h.a.put("/kraken/autohost/list", {
                                        body: {
                                            targets: e.join(",")
                                        }
                                    })];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), s.j.error(n, "Couldn't update autohost list"), [2, e];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.deserialize = function(e) {
                    return e.body ? e.body.targets.map(function(e) {
                        return e._id.toString()
                    }) : []
                }, e
            }();
        var f, v, b = n("Odds"),
            k = (n("7X7f"), n("QMHY")),
            y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.dismiss = function() {
                        t.setState({
                            isDismissed: !0
                        }), t.track(p.SpadeEventType.AutohostChatDismiss);
                        var e = t.getAutohostNotificationsDismissed();
                        e[t.props.data.user.id] = {
                            dismissedDate: (new Date).getTime()
                        }, t.setAutohostNotificationsDismissed(e)
                    }, t.addChannelToAutohost = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, g.fetchChannelsList()];
                                    case 1:
                                        return e = t.sent().concat([this.props.data.user.id]), this.setState({
                                            autohostChannels: e
                                        }), g.setChannelsList(e), this.track(p.SpadeEventType.AutohostChatYes), [2]
                                }
                            })
                        })
                    }, t.trackSettingsClick = function() {
                        t.track(p.SpadeEventType.AutohostChatSettings)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, g.fetchChannelsList()];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        autohostChannels: e
                                    }), this.isShowing && this.track(p.SpadeEventType.AutohostChatImpression), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    if (!this.isShowing) return null;
                    var e = Object(s.d)("You are now hosting {channel}", {
                            channel: this.props.data.user.displayName
                        }, "AutohostPrompt"),
                        t = Object(s.d)("Auto host this channel whenever you're offline?", "AutohostPrompt"),
                        n = Object(s.d)("Yes", "AutohostPrompt"),
                        i = Object(s.d)("Settings", "AutohostPrompt");
                    return a.createElement(b._30, {
                        "data-target": "autohost-container",
                        "data-test-selector": "autohost_prompt",
                        background: b.m.Base,
                        className: "autohost-prompt",
                        margin: {
                            x: 2
                        },
                        position: b._14.Relative
                    }, a.createElement(b.p, {
                        size: b.r.Medium,
                        direction: b.q.TopLeft,
                        show: !0
                    }, a.createElement(b._30, {
                        alignItems: b.c.Center,
                        borderBottom: !0,
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        justifyContent: b._6.Around,
                        padding: 1
                    }, a.createElement(b._7, {
                        position: b._14.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, a.createElement(b.v, {
                        ariaLabel: Object(s.d)("Close", "AutohostPrompt"),
                        size: b.w.Small,
                        type: b.x.Secondary,
                        "data-test-selector": "autohost-dismiss-button",
                        icon: b._21.Close,
                        onClick: this.dismiss
                    })), a.createElement(b.l, {
                        alt: this.props.data.user.displayName,
                        src: this.props.data.user.profileImageURL,
                        size: 30
                    }), a.createElement(b._7, {
                        className: "autohost-prompt__hosting-message",
                        display: b.Q.Flex,
                        padding: {
                            top: .5
                        }
                    }, a.createElement(b._20, {
                        asset: b._21.Check
                    }), a.createElement(b._1, {
                        margin: {
                            left: .5
                        }
                    }, a.createElement(b.P, null, e)))), a.createElement(b._7, {
                        className: "autohost-prompt__prompt",
                        justifyContent: b._6.Center,
                        display: b.Q.Flex,
                        flexWrap: b.T.Wrap,
                        padding: 1
                    }, a.createElement(b.P, null, t), a.createElement(b._50, {
                        gutterSize: b._52.ExtraSmall,
                        childWidth: b._51.Large
                    }, a.createElement("div", null, a.createElement(b.u, {
                        "data-test-selector": "autohost-yes-button",
                        fullWidth: !0,
                        onClick: this.addChannelToAutohost
                    }, n)), a.createElement("div", null, a.createElement(b.u, {
                        "data-test-selector": "autohost-settings-button",
                        fullWidth: !0,
                        onClick: this.trackSettingsClick,
                        type: b.A.Hollow,
                        linkTo: "https://twitch.tv/settings/profile"
                    }, i))))))
                }, Object.defineProperty(t.prototype, "isShowing", {
                    get: function() {
                        return !this.state.isDismissed && !!this.props.hostedChannelLogin && !this.props.data.loading && !this.props.data.error && this.props.data.user && !!this.state.autohostChannels && !this.state.autohostChannels.includes(this.props.data.user.id) && !this.getAutohostNotificationsDismissed()[this.props.data.user.id]
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.track = function(e) {
                    ! function(e, t) {
                        s.n.track(e, i.__assign({
                            time: Date.now()
                        }, t))
                    }(e, {
                        user_id: this.props.data.currentUser.id,
                        hosting_channel_id: this.props.data.currentUser.id,
                        hosted_channel_id: this.props.data.user.id
                    })
                }, t.prototype.getAutohostNotificationsDismissed = function() {
                    return s.l.get("autohost-notifications-dismissed", {})
                }, t.prototype.setAutohostNotificationsDismissed = function(e) {
                    return s.l.set("autohost-notifications-dismissed", e)
                }, t = i.__decorate([Object(l.a)(k, {
                    skip: function(e) {
                        return !e.hostedChannelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.hostedChannelLogin
                            }
                        }
                    }
                })], t)
            }(a.Component),
            _ = n("3T7g"),
            C = n("J4ib"),
            S = n("QsiC"),
            E = n("HW6M"),
            N = n("zCIC");
        n("bL99");
        ! function(e) {
            e[e.Gold = 0] = "Gold", e[e.Silver = 1] = "Silver", e[e.Bronze = 2] = "Bronze", e[e.Default = 3] = "Default"
        }(f || (f = {})),
        function(e) {
            e[e.Big = 0] = "Big", e[e.Small = 1] = "Small"
        }(v || (v = {}));
        var w, D = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.renderMedalSVG(this.props.medal, this.props.size),
                        t = E("bits-leaderboard-medal__profile-image", {
                            "bits-leaderboard-medal__profile-image--big": this.props.size === v.Big
                        }, {
                            "bits-leaderboard-medal__profile-image--small": this.props.size === v.Small
                        }),
                        n = null;
                    return this.props.profileImageUrl && (n = a.createElement(b._1, {
                        position: b._14.Absolute
                    }, a.createElement("img", {
                        className: t,
                        src: this.props.profileImageUrl
                    }))), a.createElement(b._7, {
                        className: "bits-leaderboard-medal",
                        display: b.Q.Flex,
                        position: b._14.Relative
                    }, e, n)
                }, t.prototype.renderMedalSVG = function(e, t) {
                    var n = t === v.Big ? "bits-leaderboard-medal__big" : "bits-leaderboard-medal__small";
                    return e === f.Gold ? a.createElement("svg", {
                        className: n,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, a.createElement("defs", null, a.createElement("linearGradient", {
                        x1: "15.783%",
                        y1: "9.653%",
                        x2: "82.407%",
                        y2: "91.627%",
                        id: "bits-leaderboard-gold-linearGradient-1"
                    }, a.createElement("stop", {
                        stopColor: "#D8B258",
                        offset: "0%"
                    }), a.createElement("stop", {
                        stopColor: "#A4770E",
                        offset: "100%"
                    })), a.createElement("path", {
                        id: "bits-leaderboard-gold-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), a.createElement("linearGradient", {
                        x1: "17.025%",
                        y1: "7.356%",
                        x2: "84.092%",
                        y2: "91.769%",
                        id: "bits-leaderboard-gold-linearGradient-3"
                    }, a.createElement("stop", {
                        stopColor: "#E5B561",
                        offset: "0%"
                    }), a.createElement("stop", {
                        stopColor: "#EEC05F",
                        offset: "12.638%"
                    }), a.createElement("stop", {
                        stopColor: "#FFECB9",
                        offset: "20.419%"
                    }), a.createElement("stop", {
                        stopColor: "#DCB35E",
                        offset: "30.58%"
                    }), a.createElement("stop", {
                        stopColor: "#E0B55B",
                        offset: "45.279%"
                    }), a.createElement("stop", {
                        stopColor: "#CDA148",
                        offset: "62.771%"
                    }), a.createElement("stop", {
                        stopColor: "#E9CC8F",
                        offset: "76.584%"
                    }), a.createElement("stop", {
                        stopColor: "#ECBE5D",
                        offset: "83.038%"
                    }), a.createElement("stop", {
                        stopColor: "#C09A4C",
                        offset: "100%"
                    })), a.createElement("linearGradient", {
                        x1: "83.2%",
                        y1: "89.733%",
                        x2: "12.813%",
                        y2: "3.179%",
                        id: "bits-leaderboard-gold-linearGradient-4"
                    }, a.createElement("stop", {
                        stopColor: "#9A790A",
                        offset: "0%"
                    }), a.createElement("stop", {
                        stopColor: "#FFEFB9",
                        offset: "87.642%"
                    }), a.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "100%"
                    })), a.createElement("circle", {
                        id: "bits-leaderboard-gold-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), a.createElement("g", {
                        id: "bits-leaderboard-gold-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, a.createElement("g", {
                        id: "bits-leaderboard-gold-Medal-1-gold-lg"
                    }, a.createElement("g", {
                        id: "bits-leaderboard-gold-Star"
                    }, a.createElement("use", {
                        fill: "#D6A94C",
                        xlinkHref: "#bits-leaderboard-gold-path-2"
                    }), a.createElement("path", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), a.createElement("path", {
                        id: "bits-leaderboard-gold-Star",
                        fill: "url(#bits-leaderboard-gold-linearGradient-3)",
                        d: "M16 28.58l-2.469 2.215-1.615-2.897-3.055 1.294-.587-3.265-3.31.232.505-3.279-3.206-.855 1.543-2.937-2.755-1.85 2.413-2.277-2.005-2.643 3.021-1.371-1.037-3.151 3.302-.316.042-3.317 3.226.774 1.117-3.124 2.8 1.78L16 1l2.07 2.592 2.8-1.78 1.117 3.125 3.226-.774.042 3.317 3.302.316-1.037 3.151 3.021 1.37-2.005 2.644 2.413 2.278-2.755 1.849 1.543 2.937-3.206.855.505 3.28-3.31-.233-.587 3.265-3.055-1.294-1.615 2.897z"
                    }), a.createElement("g", {
                        id: "bits-leaderboard-gold-Oval"
                    }, a.createElement("use", {
                        fill: "#BE912A",
                        xlinkHref: "#bits-leaderboard-gold-path-5"
                    }), a.createElement("circle", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    }))))) : e === f.Silver ? a.createElement("svg", {
                        className: n,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, a.createElement("defs", null, a.createElement("linearGradient", {
                        x1: "18.738%",
                        y1: "20.297%",
                        x2: "79.716%",
                        y2: "88.714%",
                        id: "bits-leaderboard-silver-linearGradient-1"
                    }, a.createElement("stop", {
                        stopColor: "#D0D8DB",
                        offset: "0%"
                    }), a.createElement("stop", {
                        stopColor: "#7E848A",
                        offset: "100%"
                    })), a.createElement("path", {
                        id: "bits-leaderboard-silver-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), a.createElement("linearGradient", {
                        x1: "19.638%",
                        y1: "10.855%",
                        x2: "81.99%",
                        y2: "89.124%",
                        id: "bits-leaderboard-silver-linearGradient-3"
                    }, a.createElement("stop", {
                        stopColor: "#202020",
                        offset: "0%"
                    }), a.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), a.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.779%"
                    }), a.createElement("stop", {
                        stopColor: "#313131",
                        offset: "30.58%"
                    }), a.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), a.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "61.521%"
                    }), a.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "74.572%"
                    }), a.createElement("stop", {
                        stopColor: "#656565",
                        offset: "87.343%"
                    }), a.createElement("stop", {
                        stopColor: "#C4C4C4",
                        offset: "100%"
                    })), a.createElement("linearGradient", {
                        x1: "0%",
                        y1: "0%",
                        x2: "99.438%",
                        y2: "96.312%",
                        id: "bits-leaderboard-silver-linearGradient-4"
                    }, a.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "3.677%"
                    }), a.createElement("stop", {
                        offset: "100%"
                    })), a.createElement("linearGradient", {
                        x1: "8.437%",
                        y1: "13.448%",
                        x2: "86.525%",
                        y2: "83.33%",
                        id: "bits-leaderboard-silver-linearGradient-5"
                    }, a.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "0%"
                    }), a.createElement("stop", {
                        stopColor: "#EAEEF2",
                        offset: "9.632%"
                    }), a.createElement("stop", {
                        stopColor: "#686C71",
                        offset: "100%"
                    })), a.createElement("circle", {
                        id: "bits-leaderboard-silver-path-6",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), a.createElement("g", {
                        id: "bits-leaderboard-silver-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, a.createElement("g", {
                        id: "bits-leaderboard-silver-Medal-2-silver-lg"
                    }, a.createElement("g", {
                        id: "bits-leaderboard-silver-Star-Copy-2"
                    }, a.createElement("use", {
                        fill: "#CBC8D0",
                        xlinkHref: "#bits-leaderboard-silver-path-2"
                    }), a.createElement("path", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), a.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-3",
                        fill: "url(#bits-leaderboard-silver-linearGradient-3)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), a.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-4-grad",
                        fill: "url(#bits-leaderboard-silver-linearGradient-4)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), a.createElement("g", {
                        id: "bits-leaderboard-silver-Oval-Copy"
                    }, a.createElement("use", {
                        fill: "#A3A7AA",
                        xlinkHref: "#bits-leaderboard-silver-path-6"
                    }), a.createElement("circle", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-5)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    }))))) : e === f.Bronze ? a.createElement("svg", {
                        className: n,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, a.createElement("defs", null, a.createElement("linearGradient", {
                        x1: "14.834%",
                        y1: "10.25%",
                        x2: "82.068%",
                        y2: "89.469%",
                        id: "bits-leaderboard-bronze-linearGradient-1"
                    }, a.createElement("stop", {
                        stopColor: "#DF904C",
                        offset: "0%"
                    }), a.createElement("stop", {
                        stopColor: "#A65611",
                        offset: "100%"
                    })), a.createElement("path", {
                        id: "bits-leaderboard-bronze-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), a.createElement("linearGradient", {
                        x1: "19.142%",
                        y1: "10.021%",
                        x2: "79.509%",
                        y2: "86.458%",
                        id: "bits-leaderboard-bronze-linearGradient-3"
                    }, a.createElement("stop", {
                        offset: "0%"
                    }), a.createElement("stop", {
                        stopColor: "#494949",
                        offset: "9.355%"
                    }), a.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), a.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.419%"
                    }), a.createElement("stop", {
                        stopColor: "#818181",
                        offset: "25.723%"
                    }), a.createElement("stop", {
                        stopColor: "#5D5D5D",
                        offset: "39.965%"
                    }), a.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), a.createElement("stop", {
                        stopColor: "#7A7A7A",
                        offset: "50.012%"
                    }), a.createElement("stop", {
                        stopColor: "#717171",
                        offset: "57.677%"
                    }), a.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "63.526%"
                    }), a.createElement("stop", {
                        stopColor: "#888",
                        offset: "69.88%"
                    }), a.createElement("stop", {
                        stopColor: "#F1F1F1",
                        offset: "75.215%"
                    }), a.createElement("stop", {
                        stopColor: "#B9B9B9",
                        offset: "79.325%"
                    }), a.createElement("stop", {
                        stopColor: "#545454",
                        offset: "92.875%"
                    }), a.createElement("stop", {
                        offset: "100%"
                    })), a.createElement("linearGradient", {
                        x1: "19.604%",
                        y1: "10.043%",
                        x2: "84.81%",
                        y2: "89.074%",
                        id: "bits-leaderboard-bronze-linearGradient-4"
                    }, a.createElement("stop", {
                        stopColor: "#F2C6A5",
                        offset: "0%"
                    }), a.createElement("stop", {
                        stopColor: "#864223",
                        offset: "100%"
                    })), a.createElement("circle", {
                        id: "bits-leaderboard-bronze-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), a.createElement("g", {
                        id: "bits-leaderboard-bronze-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, a.createElement("g", {
                        id: "bits-leaderboard-bronze-Medal-3-bronze-lg"
                    }, a.createElement("g", {
                        id: "bits-leaderboard-bronze-Star-Copy-2B"
                    }, a.createElement("use", {
                        fill: "#DE9572",
                        xlinkHref: "#bits-leaderboard-bronze-path-2"
                    }), a.createElement("path", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), a.createElement("path", {
                        id: "bits-leaderboard-bronze-Star-Copy-3B",
                        fill: "url(#bits-leaderboard-bronze-linearGradient-3)",
                        opacity: ".4",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), a.createElement("g", {
                        id: "bits-leaderboard-bronze-Oval-Copy-B"
                    }, a.createElement("use", {
                        fill: "#A96643",
                        xlinkHref: "#bits-leaderboard-bronze-path-5"
                    }), a.createElement("circle", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    }))))) : e === f.Default ? a.createElement("svg", {
                        className: n,
                        viewBox: "0 0 20 20",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, a.createElement("defs", null, a.createElement("path", {
                        id: "bits-leaderboard-default-path-1",
                        d: "M10 16.88l-1.31676 1.01089-.91717-1.38367-1.57365.52857-.4182-1.6065-1.66001-.01104.12608-1.65525-1.56648-.54944.65672-1.52462-1.3032-1.0283L3.1435 9.43184l-.8987-1.39573 1.45468-.79978-.39681-1.61193 1.63555-.2841.14808-1.65343 1.63918.26234.67692-1.51576 1.46519.78037L10 2l1.13241 1.21383 1.46519-.78037.67692 1.51576 1.63918-.26234.14808 1.65342 1.63555.28411-.3968 1.61193 1.45467.79978-.8987 1.39573 1.11618 1.22878-1.3032 1.02831.6567 1.52462-1.56647.54944.12608 1.65525-1.66.01104-.41821 1.6065-1.57365-.52857-.91717 1.38367z"
                    })), a.createElement("g", {
                        id: "bits-leaderboard-default-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, a.createElement("g", {
                        id: "bits-leaderboard-default-bitbadge/blank"
                    }, a.createElement("g", {
                        id: "bits-leaderboard-default-Star"
                    }, a.createElement("use", {
                        fill: "#D7CCEB",
                        xlinkHref: "#bits-leaderboard-default-path-1"
                    }), a.createElement("path", {
                        stroke: "#D7CCEB",
                        d: "M10 17.51035l-1.4374 1.10351-1.0012-1.51044-1.71783.577-.45652-1.7537-1.8121-.01204.13763-1.8069-1.71-.59979.71688-1.6643-1.4226-1.12253L2.5153 9.3798l-.98104-1.52362 1.58796-.87305-.43317-1.75961 1.7854-.31014.16165-1.80492 1.78937.28638.73894-1.65463 1.59943.85187L10 1.26703l1.23616 1.32505 1.59943-.85187.73894 1.65463 1.78937-.28638.16165 1.80492 1.7854.31014-.43317 1.7596 1.58796.87306-.98104 1.52362 1.21844 1.34136-1.4226 1.12252.71688 1.66431-1.71.59978.13763 1.8069-1.8121.01205-.45652 1.7537-1.71782-.577-1.00121 1.51044L10 17.51036z"
                    })), a.createElement("circle", {
                        id: "bits-leaderboard-default-Oval-2",
                        fill: "#EEE9F6",
                        cx: "10",
                        cy: "10",
                        r: "6"
                    })))) : null
                }, t
            }(a.Component),
            O = n("nrdj"),
            I = n("5Dex"),
            T = n("CFVp"),
            M = (n("mmly"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return a.createElement(b._7, {
                        display: b.Q.InlineFlex,
                        alignItems: b.c.Center,
                        flexGrow: 1
                    });
                    var e = this.props.bitsConfig ? this.props.bitsConfig : Object(T.a)(),
                        t = null,
                        n = "";
                    if (this.props.data && this.props.data.user) {
                        n = this.props.data.user.displayName || this.props.data.user.login;
                        var i = a.createElement(b.P, {
                            ellipsis: !0
                        }, n);
                        this.props.selfId && this.props.selfId === this.props.id && (i = a.createElement(b.P, {
                            ellipsis: !0,
                            color: b.J.Link,
                            bold: !0
                        }, n)), t = a.createElement(b._7, {
                            ellipsis: !0,
                            className: "bits-leaderboard-expanded-leaderboard-entry__username",
                            margin: {
                                x: 1
                            },
                            display: b.Q.InlineBlock
                        }, i)
                    }
                    var r, o = null;
                    o = this.props.selfId && this.props.selfId === this.props.value ? a.createElement(b._11, {
                        label: this.props.rank.toString(),
                        type: b._12.Brand
                    }) : a.createElement(b.P, {
                        color: b.J.Link,
                        bold: !0
                    }, this.props.rank);
                    var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || s.a.defaultAvatarURL;
                    return r = a.createElement(b._7, {
                        overflow: b._10.Hidden,
                        display: b.Q.InlineFlex,
                        flexGrow: 1,
                        fullWidth: !0,
                        alignItems: b.c.Center
                    }, a.createElement(b._7, {
                        className: "bits-leaderboard-expanded-leaderboard-entry__rank",
                        padding: {
                            right: .5
                        }
                    }, o), a.createElement("img", {
                        src: l,
                        className: "bits-leaderboard-expanded-leaderboard-entry__avatar"
                    }), t, a.createElement(b._7, {
                        flexShrink: 0,
                        className: "bits-leaderboard-expanded-leaderboard-entry__score",
                        margin: {
                            left: "auto"
                        },
                        display: b.Q.InlineBlock
                    }, a.createElement(O.a, {
                        animated: !1,
                        showImage: !0,
                        showAmount: !0,
                        prefix: "Cheer",
                        bitsConfig: e,
                        size: O.b.ExtremelySmall,
                        display: b.Q.InlineFlex,
                        amount: this.props.score,
                        formattedNumber: !0,
                        alignItems: b.c.Center
                    }))), a.createElement(b._7, {
                        className: "bits-leaderboard-expanded-leaderboard-entry",
                        display: b.Q.Block,
                        alignItems: b.c.Center
                    }, r)
                }, t
            }(a.Component)),
            R = Object(o.d)(Object(l.a)(I, {
                name: "data",
                skip: function(e) {
                    return !e.id
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.value,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(M),
            x = (n("2ZhA"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return a.createElement(b._7, {
                        display: b.Q.InlineFlex,
                        alignItems: b.c.Center,
                        flexGrow: 1
                    });
                    var e = this.props.bitsConfig ? this.props.bitsConfig : Object(T.a)(),
                        t = null,
                        n = "";
                    if (this.props.data && this.props.data.user) {
                        n = this.props.data.user.displayName || this.props.data.user.login;
                        var i = a.createElement(b.P, {
                            ellipsis: !0,
                            bold: !0
                        }, n);
                        this.props.selfId && this.props.selfId === this.props.value && (i = a.createElement(b.P, {
                            ellipsis: !0,
                            color: b.J.Link,
                            bold: !0
                        }, n)), t = a.createElement(b._7, {
                            ellipsis: !0,
                            className: "bits-leaderboard-expanded-top-three-entry__username",
                            margin: {
                                x: .5
                            },
                            display: b.Q.InlineBlock
                        }, i)
                    }
                    var r, o = null;
                    o = this.props.selfId && this.props.selfId === this.props.value ? a.createElement(b._11, {
                        label: this.props.rank.toString(),
                        type: b._12.Brand
                    }) : a.createElement(b.P, {
                        color: b.J.Link,
                        bold: !0
                    }, this.props.rank);
                    var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || s.a.defaultAvatarURL;
                    return r = a.createElement(b._7, {
                        overflow: b._10.Hidden,
                        display: b.Q.InlineFlex,
                        flexGrow: 1,
                        fullWidth: !0,
                        alignItems: b.c.Center
                    }, a.createElement(b._7, {
                        className: "bits-leaderboard-expanded-top-three-entry__rank"
                    }, o), a.createElement(D, {
                        size: v.Big,
                        medal: this.props.medal,
                        profileImageUrl: l
                    }), t, a.createElement(b._7, {
                        flexShrink: 0,
                        className: "bits-leaderboard-expanded-top-three-entry__score",
                        margin: {
                            left: "auto"
                        },
                        display: b.Q.InlineBlock
                    }, a.createElement(O.a, {
                        animated: !1,
                        showImage: !0,
                        showAmount: !0,
                        prefix: "Cheer",
                        bitsConfig: e,
                        size: O.b.ExtremelySmall,
                        display: b.Q.InlineFlex,
                        amount: this.props.score,
                        formattedNumber: !0,
                        alignItems: b.c.Center
                    }))), a.createElement(b._7, {
                        className: "bits-leaderboard-expanded-top-three-entry",
                        display: b.Q.Block
                    }, r)
                }, t
            }(a.Component)),
            L = Object(o.d)(Object(l.a)(I, {
                name: "data",
                skip: function(e) {
                    return !e.id
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.value,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(x);
        ! function(e) {
            e.Weekly = "WEEK", e.AllTime = "ALLTIME", e.Monthly = "MONTH"
        }(w || (w = {}));
        n("GuSj");
        var A = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.renderExpandArrow = function() {
                    return a.createElement(b._7, {
                        position: b._14.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        className: "bits-leaderboard-expanded__arrow",
                        display: b.Q.Flex,
                        alignItems: b.c.Stretch
                    }, a.createElement(b.u, {
                        size: b.y.Small,
                        fullWidth: !0,
                        type: b.A.Text,
                        onClick: t.props.toggleExpand
                    }, a.createElement(b._20, {
                        asset: b._21.AngleUp,
                        height: 12,
                        width: 12
                    })))
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this.shouldRenderBottomContent(),
                    t = this.renderTopThreeEntries(),
                    n = this.renderTopTenEntries(),
                    i = this.renderExpandArrow(),
                    r = this.renderTopSection(),
                    o = null,
                    s = null;
                e && ((o = this.renderUserPlaceEntry()) || (s = this.renderBottomSection()));
                var l = {
                        "bits-leaderboard-expanded__top-three-break": !!this.props.topEdges && this.props.topEdges.length > 3
                    },
                    d = {
                        "bits-leaderboard-expanded__top-ten-break": !!this.props.topEdges && this.props.topEdges.length > 0
                    };
                return a.createElement(b._30, {
                    background: b.m.Base,
                    padding: {
                        top: 1
                    },
                    position: b._14.Relative
                }, r, a.createElement(N.b, {
                    className: "bits-leaderboard-expanded__scrollable",
                    suppressScrollX: !0
                }, a.createElement(b._7, null, a.createElement("ul", null, t, a.createElement(b._7, {
                    className: E(l)
                }), n, a.createElement(b._7, {
                    className: E(d)
                }), o), s)), i)
            }, t.prototype.renderTopThreeEntries = function() {
                if (!this.props.topEdges) return null;
                var e = [];
                return this.props.topEdges[0] && e.push(this.renderTopThreeEntry(this.props.topEdges[0], f.Gold)), this.props.topEdges[1] && e.push(this.renderTopThreeEntry(this.props.topEdges[1], f.Silver)), this.props.topEdges[2] && e.push(this.renderTopThreeEntry(this.props.topEdges[2], f.Bronze)), e
            }, t.prototype.renderTopSection = function() {
                var e = Object(s.d)("Weekly Top Cheerers", "Bits--PinnedCheerV2"),
                    t = this.props.secondsRemaining ? this.props.secondsRemaining : 0,
                    n = Math.floor(t / 86400),
                    i = a.createElement(b.P, {
                        type: b._44.Span
                    }, Object(s.d)("Resets in {time} days", {
                        time: n
                    }, "Bits--PinnedCheerV2"));
                return n < 1 && (i = a.createElement(b.P, {
                    type: b._44.Span
                }, Object(s.d)("Resets in less than a day", "Bits--PinnedCheerV2"))), this.props.leaderboardMode === w.AllTime ? (e = Object(s.d)("All-time Top Cheerers", "Bits--PinnedCheerV2"), i = null) : this.props.leaderboardMode === w.Monthly && (e = Object(s.d)("Monthly Top Cheerers", "Bits--PinnedCheerV2")), a.createElement(b._7, {
                    display: b.Q.Flex,
                    alignItems: b.c.Center,
                    flexDirection: b.S.Column
                }, a.createElement(b.P, {
                    type: b._44.H5,
                    bold: !0
                }, e), i, a.createElement(b._7, {
                    className: "bits-leaderboard-expanded__section-break",
                    margin: {
                        y: 1
                    }
                }))
            }, t.prototype.renderBottomSection = function() {
                var e = !!this.props.topEdges && this.props.topEdges.length > 0;
                return a.createElement(b._7, {
                    padding: {
                        bottom: 1
                    }
                }, a.createElement(b._30, {
                    borderTop: e
                }, a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexDirection: b.S.Column,
                    alignItems: b.c.Center,
                    margin: {
                        top: 1
                    }
                }, a.createElement(b._20, {
                    asset: b._21.Bits,
                    type: b._22.Brand
                }), a.createElement(b.P, {
                    type: b._44.Span,
                    bold: !0
                }, Object(s.d)("Cheer your way to the top!", "Bits--PinnedCheersV2")), a.createElement(b.N, {
                    to: "https://blog.twitch.tv/earn-new-rewards-for-supporting-your-favorite-creators-da6b34a98827",
                    targetBlank: !0,
                    hoverUnderlineNone: !1
                }, a.createElement(b.P, {
                    bold: !0
                }, Object(s.d)("Learn More", "Bits--PinnedCheersV2"))))))
            }, t.prototype.renderTopThreeEntry = function(e, t) {
                return a.createElement(b._7, {
                    key: e.node.id,
                    padding: {
                        x: 1,
                        top: .5
                    }
                }, a.createElement(L, {
                    id: e.node.id,
                    value: e.node.entryKey,
                    score: e.node.score,
                    bitsConfig: this.props.bitsConfig,
                    medal: t,
                    selfId: this.props.selfId,
                    rank: e.node.rank
                }))
            }, t.prototype.renderTopTenEntries = function() {
                var e = this;
                return this.props.topEdges ? this.props.topEdges.slice(3, 10).map(function(t) {
                    return e.renderTopTenEntry(t.node)
                }) : null
            }, t.prototype.renderTopTenEntry = function(e) {
                return a.createElement(b._7, {
                    key: e.id,
                    padding: {
                        x: 1,
                        top: .5
                    }
                }, a.createElement(R, {
                    id: e.id,
                    value: e.entryKey,
                    score: e.score,
                    bitsConfig: this.props.bitsConfig,
                    selfId: this.props.selfId,
                    rank: e.rank
                }))
            }, t.prototype.shouldRenderBottomContent = function() {
                var e = this;
                if (!this.props.topEdges) return !1;
                var t = !0;
                return this.props.topEdges.forEach(function(n) {
                    n.node.entryKey === e.props.selfId && (t = !1)
                }), t
            }, t.prototype.renderUserPlaceEntry = function() {
                if (!this.props.userPlaceEdge) return null;
                var e = this.renderTopTenEntry(this.props.userPlaceEdge);
                return a.createElement(b._7, {
                    padding: {
                        top: .5
                    }
                }, a.createElement(b._30, {
                    borderTop: !0
                }, a.createElement(b._7, {
                    padding: {
                        y: .5
                    }
                }, e)))
            }, t
        }(a.Component);

        function F(e) {
            switch (e) {
                case 1:
                    return Object(s.d)("Cheer now to be #1!", "Bits--PinnedCheerV2");
                case 2:
                    return Object(s.d)("Cheer to take #2!", "Bits--PinnedCheerV2");
                case 3:
                    return Object(s.d)("Cheer to take #3!", "Bits--PinnedCheerV2");
                default:
                    return Object(s.d)("...", "Bits--PinnedCheerV2")
            }
        }
        n("iqz2");
        var j = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return a.createElement(b._7, {
                        display: b.Q.InlineBlock,
                        alignItems: b.c.Center,
                        flexGrow: 1
                    });
                    var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(T.a)(),
                        n = null,
                        i = "";
                    if (this.props.data && this.props.data.user) {
                        i = this.props.data.user.displayName || this.props.data.user.login;
                        var r = a.createElement(b.P, {
                            ellipsis: !0,
                            bold: !0
                        }, i);
                        this.props.selfId && this.props.selfId === this.props.entryKey && (r = a.createElement(b._11, {
                            label: i,
                            type: b._12.Brand
                        })), n = a.createElement(b._7, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-first-entry__username"
                        }, r)
                    }
                    if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                        var o = F(1);
                        e = a.createElement(b._7, {
                            className: "bits-leaderboard-header-first-entry__container",
                            overflow: b._10.Hidden,
                            display: b.Q.InlineFlex,
                            alignItems: b.c.Center,
                            flexGrow: 1
                        }, a.createElement(b._7, {
                            flexShrink: 0
                        }, a.createElement(D, {
                            size: v.Big,
                            medal: f.Default
                        })), a.createElement(b._7, {
                            className: "bits-leaderboard-header-first-entry__text",
                            margin: {
                                left: .5
                            }
                        }, a.createElement(b.P, {
                            color: b.J.Link,
                            bold: !0
                        }, o)))
                    } else {
                        var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || s.a.defaultAvatarURL;
                        e = a.createElement(b._7, {
                            className: "bits-leaderboard-header-first-entry__container",
                            overflow: b._10.Hidden,
                            display: b.Q.InlineFlex,
                            alignItems: b.c.Center,
                            flexGrow: 1
                        }, a.createElement(b._7, {
                            flexShrink: 0
                        }, a.createElement(D, {
                            size: v.Big,
                            medal: f.Gold,
                            profileImageUrl: l
                        })), a.createElement(b._7, {
                            className: "bits-leaderboard-header-first-entry__text",
                            margin: {
                                left: .5
                            }
                        }, n, a.createElement(b._7, {
                            className: "bits-leaderboard-header-first-entry__score"
                        }, a.createElement(O.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: t,
                            size: O.b.ExtremelySmall,
                            display: b.Q.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: b.c.Center
                        }))))
                    }
                    this.props.isEmpty || (e = a.createElement(b._47, {
                        label: i,
                        direction: b._49.Bottom
                    }, e));
                    var d = {
                        "bits-leaderboard-header-first-entry": !0,
                        "bits-leaderboard-header-first-entry__empty": this.props.isEmpty
                    };
                    return a.createElement(b._7, {
                        className: E(d),
                        flexShrink: 0
                    }, e)
                }, t
            }(a.Component),
            U = Object(o.d)(Object(l.a)(I, {
                name: "data",
                skip: function(e) {
                    return !e.id || !e.entryKey
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.entryKey,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(j),
            B = (n("x8iQ"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return a.createElement(b._7, {
                        display: b.Q.InlineFlex,
                        alignItems: b.c.Center,
                        flexGrow: 1
                    });
                    var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(T.a)(),
                        n = null,
                        i = "";
                    if (this.props.data && this.props.data.user) {
                        i = this.props.data.user.displayName || this.props.data.user.login;
                        var r = a.createElement(b.P, {
                            ellipsis: !0,
                            bold: !0
                        }, i);
                        this.props.selfId && this.props.selfId === this.props.entryKey && (r = a.createElement(b._11, {
                            label: i,
                            type: b._12.Brand
                        })), n = a.createElement(b._7, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-runner-up-entry__username",
                            flexShrink: 1,
                            margin: {
                                x: .5
                            }
                        }, r)
                    }
                    if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                        var o = F(this.props.rank ? this.props.rank : 0);
                        e = a.createElement(b._7, {
                            overflow: b._10.Hidden,
                            display: b.Q.Flex,
                            alignItems: b.c.Center,
                            flexGrow: 0,
                            fullWidth: !0
                        }, a.createElement(b._7, {
                            flexShrink: 0
                        }, a.createElement(D, {
                            size: v.Small,
                            medal: f.Default
                        })), a.createElement(b._7, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-runner-up-entry__username",
                            flexShrink: 1,
                            margin: {
                                x: .5
                            }
                        }, a.createElement(b.P, {
                            color: b.J.Link,
                            bold: !0
                        }, o)))
                    } else {
                        var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || s.a.defaultAvatarURL;
                        e = a.createElement(b._7, {
                            overflow: b._10.Hidden,
                            display: b.Q.Flex,
                            alignItems: b.c.Center,
                            flexGrow: 0,
                            fullWidth: !0
                        }, a.createElement(b._7, {
                            flexShrink: 0
                        }, a.createElement(D, {
                            size: v.Small,
                            medal: this.props.medal,
                            profileImageUrl: l
                        })), n, a.createElement(b._7, {
                            flexShrink: 0,
                            className: "bits-leaderboard-header-runner-up-entry__score",
                            margin: {
                                left: "auto"
                            }
                        }, a.createElement(O.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: t,
                            size: O.b.ExtremelySmall,
                            display: b.Q.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: b.c.Center
                        })))
                    }
                    return this.props.isEmpty || (e = a.createElement(b._47, {
                        label: i,
                        direction: b._49.Bottom
                    }, e)), a.createElement(b._7, {
                        className: "bits-leaderboard-header-runner-up-entry",
                        display: b.Q.Flex,
                        alignItems: b.c.Center
                    }, e)
                }, t
            }(a.Component)),
            P = Object(o.d)(Object(l.a)(I, {
                name: "data",
                skip: function(e) {
                    return !e.id || !e.entryKey
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.entryKey,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(B),
            V = (n("LM6T"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderFirstPlaceEntry = function() {
                        var e, n = null;
                        return t.props.topEdges && t.props.topEdges[0] && (n = t.props.topEdges[0]), e = n ? a.createElement(U, {
                            selfId: t.props.selfId,
                            id: n.node.id,
                            entryKey: n.node.entryKey,
                            score: n.node.score,
                            bitsConfig: t.props.bitsConfig
                        }) : a.createElement(U, {
                            isEmpty: !0
                        }), a.createElement(b._1, {
                            key: 1
                        }, e)
                    }, t.renderExpandArrow = function() {
                        return a.createElement(b._7, {
                            className: "pinned-cheer-v2-header--arrow",
                            alignItems: b.c.Stretch,
                            fullHeight: !0,
                            display: b.Q.InlineFlex,
                            attachTop: !0,
                            position: b._14.Absolute
                        }, a.createElement(b.u, {
                            size: b.y.Small,
                            fullWidth: !0,
                            type: b.A.Text,
                            onClick: t.props.toggleExpand
                        }, a.createElement(b._20, {
                            asset: b._21.AngleDown,
                            height: 12,
                            width: 12
                        })))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.renderFirstPlaceEntry(),
                        t = null,
                        n = null,
                        i = this.renderExpandArrow();
                    if (this.props.topEdges && this.props.topEdges[0]) {
                        t = this.renderRunnerUpEntry(2, f.Silver);
                        var r = this.props.topEdges[1] ? 3 : 0;
                        n = this.renderRunnerUpEntry(r, f.Bronze)
                    }
                    return a.createElement(b._30, {
                        className: "pinned-cheer-v2-header",
                        background: b.m.Base,
                        position: b._14.Relative
                    }, a.createElement(b._7, {
                        className: "pinned-cheer-v2-header__users",
                        display: b.Q.InlineFlex,
                        flexWrap: b.T.NoWrap,
                        justifyContent: b._6.Between,
                        fullHeight: !0
                    }, e, a.createElement(b._7, {
                        className: "pinned-cheer-v2-header__runner-up-entries",
                        display: b.Q.Flex,
                        flexShrink: 1,
                        flexWrap: b.T.NoWrap,
                        justifyContent: b._6.Between,
                        flexDirection: b.S.Column
                    }, t, n)), i)
                }, t.prototype.renderRunnerUpEntry = function(e, t) {
                    var n, i = null;
                    return e > 0 && this.props.topEdges && this.props.topEdges[e - 1] && (i = this.props.topEdges[e - 1]), n = i ? a.createElement(P, {
                        selfId: this.props.selfId,
                        id: i.node.id,
                        entryKey: i.node.entryKey,
                        score: i.node.score,
                        medal: t,
                        bitsConfig: this.props.bitsConfig
                    }) : a.createElement(P, {
                        isEmpty: !0,
                        medal: f.Default,
                        rank: e
                    }), a.createElement(b._1, {
                        key: e
                    }, n)
                }, t
            }(a.Component)),
            H = n("4Q5V"),
            W = n("mwvJ"),
            G = (n("1vwK"), "pinned-cheer--collapse"),
            Q = /(\d+)$/,
            q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1
                    }, t.collapseCheer = !0, t.root = null, t.renderedMessage = null, t.saveRenderedMessageRef = function(e) {
                        t.renderedMessage = e
                    }, t.saveRootRef = function(e) {
                        t.root = e
                    }, t.handleHeadlineClick = function() {
                        t.collapseCheer = !t.collapseCheer, t.root && t.root.classList.toggle(G, t.collapseCheer)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    if (this.renderedMessage) {
                        var e = this.renderedMessage.getElementsByClassName("pinned-cheer__rendered-message-inner");
                        if (e.length) {
                            var t = e[0].getBoundingClientRect().height > 42;
                            this.state.cheerIsTall !== t && this.setState({
                                cheerIsTall: t
                            })
                        }
                    }
                }, t.prototype.render = function() {
                    if (!this.props.recentCheer) return null;
                    for (var e = "", t = 0, n = this.props.recentCheer.messageParts; t < n.length; t++) {
                        var i = n[t];
                        if (i.type === W.a.Emote && i.content.cheerAmount && i.content.alt) {
                            var r = i.content.alt.replace(Q, "").toLowerCase();
                            e ? e !== r && (e = "cheer") : e = r
                        }
                    }
                    var o, l, d = this.state.cheerIsTall,
                        c = a.createElement("div", {
                            ref: this.saveRenderedMessageRef,
                            className: E({
                                "pinned-cheer__rendered-message": !0,
                                "pinned-cheer__rendered-message--recent": !0
                            })
                        }, a.createElement(b._30, {
                            margin: {
                                x: 2
                            },
                            borderTop: !0
                        }), a.createElement(b._7, {
                            padding: {
                                y: .5
                            },
                            className: "pinned-cheer__rendered-message-inner"
                        }, a.createElement(H.a, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeData,
                            showAutoModActions: !1,
                            showModerationActions: !1,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isCurrentUserModerator: !1,
                            isCurrentUserStaff: !1,
                            message: this.props.recentCheer,
                            showModerationIcons: !1,
                            showTimestamps: !1
                        }))),
                        u = a.createElement(b.P, {
                            type: b._44.Strong
                        }, Object(s.d)("Recent Cheer", "Bits--PinnedCheers")),
                        m = ((l = {
                            "pinned-cheer__bounding-box": !0
                        })[G] = this.collapseCheer, l),
                        p = {
                            "pinned-cheer__headline": !0,
                            "pinned-cheer__headline--clickable": d
                        },
                        h = this.props.recentCheerMsRemaining ? this.props.recentCheerMsRemaining : 0;
                    return o = a.createElement(b._7, {
                        className: "pinned-cheer__progress-bar-placeholder"
                    }, a.createElement(b._7, {
                        className: "pinned-cheer__progress-bar",
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        justifyContent: b._6.End
                    }, a.createElement(b._17, {
                        key: this.props.recentCheer.id,
                        countdown: h / 1e3,
                        size: b._18.ExtraSmall
                    }))), a.createElement(b._7, {
                        className: "pinned-cheer",
                        flexGrow: 0,
                        flexShrink: 0,
                        zIndex: b._57.Default
                    }, a.createElement("div", {
                        className: E(m),
                        ref: this.saveRootRef
                    }, a.createElement(b._1, {
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: b.Q.Flex,
                        flexDirection: b.S.Row,
                        flexWrap: b.T.NoWrap
                    }, a.createElement("div", {
                        className: E(p),
                        onClick: d ? this.handleHeadlineClick : void 0
                    }, a.createElement(b._7, {
                        flexGrow: 1,
                        flexShrink: 1,
                        display: b.Q.Flex,
                        alignItems: b.c.Center,
                        flexWrap: b.T.Wrap
                    }, a.createElement(b._20, {
                        asset: b._21.HourGlass,
                        height: 18,
                        width: 18
                    }), a.createElement(b._7, {
                        margin: {
                            left: .5
                        },
                        display: b.Q.Inline
                    }, u), null), a.createElement(b._7, {
                        className: "pinned-cheer__expand-caret",
                        flexShrink: 0,
                        flexGrow: 0,
                        display: b.Q.Flex,
                        justifyContent: b._6.Between,
                        alignItems: b.c.Center
                    }, d ? a.createElement(b._20, {
                        asset: b._21.AngleLeft
                    }) : null))), c, o))
                }, t
            }(a.Component),
            z = n("XYVN"),
            Y = n("dQj3"),
            J = n("eMi+"),
            $ = (n("zbFZ"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isExpanded: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null
                    }, t.recentCheerTimeout = 0, t.toggleIsExpanded = function() {
                        t.setState(function(e) {
                            return {
                                isExpanded: !e.isExpanded
                            }
                        })
                    }, t.handleProgressExpired = function() {
                        C.k.debug("setTimeout expired, forcing re-render"), t.forceUpdate()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.calcRecentCheerExpiry(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.calcRecentCheerExpiry(e)
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.recentCheerTimeout)
                }, t.prototype.shouldComponentUpdate = function(e, t) {
                    var n = this.getRecentCheerInfo(this.props, this.state),
                        i = this.getRecentCheerInfo(e, t);
                    if (!n.shouldRender && !n.recentCheer) return !0;
                    var a = n.recentCheer ? n.recentCheer.id : 0,
                        r = i.recentCheer ? i.recentCheer.id : 0;
                    return n.shouldRender !== i.shouldRender || n.recentCheer !== i.recentCheer || a !== r
                }, t.prototype.componentDidUpdate = function() {
                    var e = this.getRecentCheerInfo(this.props, this.state),
                        t = 0;
                    this.state.recentCheerExpireTime && (t = Math.max(0, this.state.recentCheerExpireTime - Date.now())), e.shouldRender && (clearTimeout(this.recentCheerTimeout), this.recentCheerTimeout = setTimeout(this.handleProgressExpired, t + 100))
                }, t.prototype.render = function() {
                    var e = null,
                        t = this.renderRecentCheer();
                    return null === t && (e = this.renderLeaderboard()), a.createElement(b._7, {
                        zIndex: b._57.Default
                    }, e, t)
                }, t.prototype.renderLeaderboard = function() {
                    if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.leaderboard)) return null;
                    if (!this.props.data.user.cheer.settings || !this.props.data.user.cheer.settings.leaderboard || !this.props.data.user.cheer.settings.leaderboard.isEnabled) return null;
                    var e = this.props.data.user.cheer.leaderboard.items.edges.slice(0, 10),
                        t = null,
                        n = this.props.data.user.cheer.settings.leaderboard.timePeriodType ? this.props.data.user.cheer.settings.leaderboard.timePeriodType : w.AllTime;
                    this.props.data.user.self && this.props.data.user.self.bitsLeaderboardItem && (t = this.props.data.user.self.bitsLeaderboardItem);
                    var i = null;
                    this.state.isExpanded && (i = a.createElement(A, {
                        topEdges: e,
                        userPlaceEdge: t,
                        toggleExpand: this.toggleIsExpanded,
                        selfId: this.props.userID,
                        bitsConfig: this.props.bitsConfig,
                        leaderboardMode: n,
                        secondsRemaining: this.props.data.user.cheer.leaderboard.secondsRemaining
                    }));
                    var r = null;
                    return this.state.isExpanded || (r = a.createElement(V, {
                        topEdges: e,
                        toggleExpand: this.toggleIsExpanded,
                        selfId: this.props.userID,
                        bitsConfig: this.props.bitsConfig
                    })), a.createElement(b._7, {
                        className: "pinned-cheer-v2",
                        zIndex: b._57.Default
                    }, a.createElement(b._30, {
                        borderBottom: !0
                    }, r, i))
                }, t.prototype.getRecentCheerInfo = function(e, t) {
                    var n = !1,
                        i = void 0;
                    this.state.isExpanded || !e.data.error && e.data.user && e.data.user.cheer && e.data.user.cheer.recent && e.data.user.cheer.settings.isRecentEnabled && t.recentCheerExpireTime && 0 !== Math.max(0, t.recentCheerExpireTime - Date.now()) && (n = !0, i = Object(Y.a)(e.data.user.cheer.recent, this.props.bitsConfig, this.props.blockLinks) || void 0);
                    return {
                        shouldRender: n,
                        recentCheer: i
                    }
                }, t.prototype.renderRecentCheer = function() {
                    if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.recent)) return null;
                    var e = this.getRecentCheerInfo(this.props, this.state);
                    return e.shouldRender ? a.createElement(q, {
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelID: this.props.channelID,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        recentCheer: e.recentCheer,
                        recentCheerMsRemaining: this.props.data.user.cheer.settings.recentTimeoutMs
                    }) : null
                }, t.prototype.calcRecentCheerExpiry = function(e) {
                    if (e.data.user && e.data.user.cheer && e.data.user.cheer.recentTimeoutMs && e.data.user.cheer.recent) {
                        var t = Object(Y.a)(e.data.user.cheer.recent, this.props.bitsConfig, this.props.blockLinks),
                            n = t ? t.id : null;
                        this.state.recentCheerID !== n && this.setState({
                            recentCheerID: n,
                            recentCheerExpireTime: n ? Date.now() + e.data.user.cheer.recentTimeoutMs : null
                        })
                    }
                }, t
            }(a.Component)),
            K = Object(o.d)(Object(l.a)(J, {
                name: "data",
                options: function(e) {
                    return {
                        variables: {
                            channelID: e.channelID
                        }
                    }
                }
            }), Object(d.a)(function(e) {
                return {
                    query: S,
                    variables: {
                        channelID: e.channelID
                    },
                    topic: Object(m.b)(e.channelID),
                    type: c.PubsubMessageType.BitsPinEvent,
                    mutator: function(t, n) {
                        if (n && n.user && n.user.cheer) {
                            var i = JSON.parse(t.msg);
                            if (i.channel_id === e.channelID) return C.k.debug("Received pubsub update", {
                                hasRecentCheer: !!i.recent && i.recent.has_recent_event,
                                hasNewRecentCheer: !n.user.cheer.recent || null !== i.recent.tags && n.user.cheer.recent.id !== i.recent.tags.msg_id
                            }), i.recent && (i.recent.has_recent_event || "dismiss" === i.action) ? (!n.user.cheer.recent || null !== i.recent.tags && n.user.cheer.recent.id !== i.recent.tags.msg_id || "dismiss" === i.action) && (n.user.cheer.recent = Object(Y.c)(i.recent), n.user.cheer.recentTimeoutMs = n.user.cheer.settings.recentTimeoutMs) : n.user.cheer.recent = null, n
                        }
                    }
                }
            }), Object(d.a)(function(e) {
                return Object(z.a)(J, e.channelID, e.data.user && e.data.user.cheer && e.data.user.cheer.leaderboard, e.userID)
            }))($),
            Z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null,
                        pcheersV2Enabled: !1
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(K, {
                        channelID: this.props.channelID,
                        userID: this.props.userID,
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin
                    })
                }, t
            }(a.Component),
            X = n("RH2O"),
            ee = n("Aj/L");
        var te, ne, ie = Object(X.b)(function(e) {
            var t = Object(ee.c)(e);
            return {
                isStaff: t && t.roles && t.roles.isStaff
            }
        })(Z);
        ! function(e) {
            e.Bits = "bits", e.Leaderboard = "bits-leader"
        }(te || (te = {})),
        function(e) {
            e.Badge = "badge_update", e.Balance = "balance_update"
        }(ne || (ne = {}));
        var ae, re = n("3zLD"),
            oe = n("6BvN"),
            se = n("+xm8"),
            le = n("HM6l"),
            de = n("f2i/"),
            ce = n("ZVME"),
            ue = n("c3pS"),
            me = n("iMOk"),
            pe = (n("56e8"), function(e) {
                var t = void 0 !== e.progress,
                    n = a.createElement("img", {
                        className: "cheer-badge__image",
                        src: e.badge.image1x,
                        alt: e.badge.title,
                        srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                    });
                if (!t) return n;
                var i = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                return a.createElement("div", {
                    className: "cheer-badge__progress-container"
                }, n, a.createElement("div", {
                    className: "cheer-badge__progress-overlay",
                    style: {
                        width: i + "px"
                    },
                    "data-test-selector": "cheer-progress"
                }))
            }),
            he = n("3iBR"),
            ge = function(e) {
                var t;
                e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = a.createElement(b._7, {
                    padding: {
                        bottom: .5
                    }
                }, e.selfBitsBadge.current && a.createElement(b._7, {
                    display: b.Q.Inline,
                    margin: {
                        right: .5
                    }
                }, a.createElement(pe, {
                    badge: e.selfBitsBadge.current
                })), e.selfBitsBadge.next && a.createElement(pe, {
                    badge: e.selfBitsBadge.next,
                    progress: e.selfBitsBadge.progress
                }), e.selfBitsBadge.nextBits && Object(s.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                    bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                }, "Bits--BalanceFooter")));
                var n = Object(s.d)("{bitsGem} Log in to see your Bits balance", {
                    bitsGem: a.createElement(me.a, {
                        count: 100,
                        withImage: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: u.a.Dark
                    })
                }, "Bits--BalanceFooter");
                return void 0 !== e.balance && null !== e.balance && (n = Object(s.d)("You have {currentBits}", {
                    currentBits: a.createElement(me.a, {
                        count: e.balance,
                        withImage: !0,
                        withText: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: u.a.Dark
                    })
                }, "Bits--BalanceFooter")), a.createElement(b._7, {
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-balance-footer"
                }, t, a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexGrow: 1,
                    alignItems: b.c.Center,
                    justifyContent: b._6.Between
                }, a.createElement("div", null, n), a.createElement(b.u, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > he.i,
                    onClick: e.onClickGetBits,
                    "data-test-selector": "get-bits-button",
                    "data-a-target": "get-bits-button"
                }, Object(s.d)("Get Bits", "Bits--BalanceFooter"))))
            },
            fe = function() {
                return a.createElement(b._30, {
                    className: "t-bits-card",
                    display: b.Q.Flex,
                    flexDirection: b.S.Column,
                    alignItems: b.c.Center,
                    justifyContent: b._6.Center,
                    textAlign: b._40.Center,
                    padding: 1,
                    border: !0,
                    background: b.m.Base,
                    elevation: 3,
                    fullWidth: !0
                }, a.createElement(b.P, {
                    italic: !0
                }, Object(s.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
            },
            ve = n("QRuM"),
            be = n("ySfT"),
            ke = function(e) {
                return a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexGrow: 1,
                    flexDirection: b.S.Column,
                    justifyContent: b._6.Center,
                    alignItems: b.c.Center,
                    padding: 1
                }, a.createElement(b._7, {
                    padding: {
                        top: 2,
                        bottom: 2
                    }
                }, a.createElement(b.P, {
                    type: b._44.H5,
                    color: b.J.Link,
                    bold: !0
                }, Object(s.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), a.createElement(b.P, null, Object(s.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), a.createElement(b._7, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, a.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(s.d)("How do I cheer?", "Bits--CheermoteIntro"))))
            },
            ye = function(e) {
                var t = e.headline || e.prefix + (e.tier || "");
                if (e.tournament && e.tier <= 0) {
                    var n = e.tournament.teams.find(function(t) {
                        return t.id === e.prefix
                    });
                    n && (t = n.name + " - " + e.prefix)
                }
                return a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexDirection: b.S.Column,
                    alignItems: b.c.Center,
                    padding: 1
                }, a.createElement(b.P, {
                    type: b._44.H4,
                    bold: !0
                }, t), a.createElement(O.a, {
                    prefix: e.prefix,
                    amount: e.tier,
                    bitsConfig: e.bitsConfig,
                    showImage: !0,
                    showAmount: e.tier > 0
                }))
            },
            _e = (n("DVR9"), function(e) {
                var t = null;
                e.minToCheer > 1 && (t = a.createElement(b.P, {
                    color: b.J.Alt2,
                    italic: !0
                }, Object(s.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                    minToCheer: e.minToCheer
                }, "Bits--CheermoteTierIntro")));
                var n = null;
                return e.minToPin > 0 && (n = a.createElement(b.P, {
                    color: b.J.Alt2,
                    italic: !0
                }, Object(s.d)("Pinning your Cheer is a minimum of {minToPin} Bits", {
                    minToPin: e.minToPin
                }, "Bits--CheermoteTierIntro"))), a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexGrow: 1,
                    flexDirection: b.S.Column,
                    alignItems: b.c.Center,
                    justifyContent: b._6.Center,
                    padding: 1,
                    className: "cheermote-tier-intro"
                }, a.createElement(b._7, {
                    padding: {
                        x: 4
                    },
                    margin: {
                        bottom: 1
                    }
                }, a.createElement(b.P, {
                    color: b.J.Alt2
                }, Object(s.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t, n)
            }),
            Ce = n("1bR2"),
            Se = n.n(Ce),
            Ee = n("vDGQ"),
            Ne = (n("CGWe"), function(e) {
                return Object(Ee.d)({
                    action: Ee.a.View,
                    type: Ee.c.BitsIntro,
                    channelId: e.channelID
                }), a.createElement(b._7, {
                    "data-test-selector": "crate-intro"
                }, a.createElement(b._7, {
                    padding: {
                        x: 1,
                        top: 2,
                        bottom: 1
                    }
                }, a.createElement(b.P, {
                    fontSize: b.U.Size4,
                    bold: !0
                }, Object(s.d)("Share the Holiday Cheer!", "Crates"))), a.createElement(b._30, {
                    className: "crates-holiday-background",
                    background: b.m.Alt,
                    padding: 1,
                    margin: {
                        y: 1
                    },
                    display: b.Q.Flex,
                    justifyContent: b._6.Around,
                    alignItems: b.c.End,
                    borderTop: !0,
                    borderBottom: !0
                }, a.createElement(b.e, {
                    type: b.i.BounceIn,
                    delay: b.f.Long,
                    enabled: !0
                }, a.createElement(b._47, {
                    label: "XmasRaid"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633161/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/3.0 3.0x",
                    alt: "XmasRaid"
                }))), a.createElement(b.e, {
                    type: b.i.BounceIn,
                    delay: b.f.Medium,
                    enabled: !0
                }, a.createElement(b._47, {
                    label: "MerryPurple"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633177/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/3.0 3.0x",
                    alt: "MerryPurple"
                }))), a.createElement(b.e, {
                    type: b.i.BounceIn,
                    delay: b.f.Short,
                    enabled: !0
                }, a.createElement(b._47, {
                    label: "GiftRage"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/634141/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/3.0 3.0x",
                    alt: "GiftRage"
                }))), a.createElement("img", {
                    src: Se.a,
                    height: "50",
                    width: "50"
                }), a.createElement(b.e, {
                    type: b.i.BounceIn,
                    delay: b.f.Short,
                    enabled: !0
                }, a.createElement(b._47, {
                    label: "RudolphWhoa"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633166/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/3.0 3.0x",
                    alt: "RudolphWhoa"
                }))), a.createElement(b.e, {
                    type: b.i.BounceIn,
                    delay: b.f.Medium,
                    enabled: !0
                }, a.createElement(b._47, {
                    label: "FeelsGingerMan"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633171/1.0 1x,https://static-cdn.jtvnw.net/emoticons/v1/633171/2.0 2x,https://static-cdn.jtvnw.net/emoticons/v1/633171/3.0 4x",
                    alt: "FeelsGingerMan"
                }))), a.createElement(b.e, {
                    type: b.i.BounceIn,
                    delay: b.f.Long,
                    enabled: !0
                }, a.createElement(b._47, {
                    label: "OrnaMental"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633170/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/3.0 3.0x",
                    alt: "OrnaMental"
                })))), a.createElement(b._7, {
                    padding: 1
                }, a.createElement(b.P, {
                    type: b._44.P
                }, Object(s.d)("Cheer any amount to support your streamer, and get a holiday gift! Cheer {minBits, number} Bits or more, and others in chat can get a gift too!", {
                    minBits: 250
                }, "Crates")), a.createElement(b.P, {
                    type: b._44.Strong
                }, a.createElement("a", {
                    href: "http://link.twitch.tv/holiday-emotes",
                    target: "_blank",
                    rel: "noreferrer noopener"
                }, Object(s.d)("Details", "Crates")))))
            }),
            we = (n("kjfG"), function() {
                return a.createElement(b._7, {
                    className: "owl-2018-introduction"
                }, a.createElement(b._7, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, a.createElement(b.P, {
                    fontSize: b.U.Size5,
                    bold: !0
                }, Object(s.d)("Cheer with Bits and unlock loot!", "OWL2018Introduction"))), a.createElement(b._7, {
                    className: "owl-2018-introduction__banner-background",
                    padding: {
                        top: 1
                    }
                }, a.createElement("img", {
                    className: "owl-2018-introduction__banner-image",
                    src: he.c + "/owl-2017/overwatch-wide.png"
                })), a.createElement(b._7, {
                    padding: {
                        x: 2,
                        top: 1,
                        bottom: .5
                    }
                }, a.createElement(b.P, null, Object(s.d)("Cheer 150 Bits or more to hype your team and get a team emote! Cheer along with your fellow fans to unlock in-game skins based on everyone’s Cheers!", "OWL2018Introduction"))), a.createElement(b._7, {
                    padding: {
                        bottom: 1
                    }
                }, a.createElement(b.N, {
                    to: "http://link.twitch.tv/owl-drops-onsite-bitscard-blogus",
                    targetBlank: !0,
                    hoverUnderlineNone: !1
                }, Object(s.d)("Details", "OWL2018Introduction"))))
            });
        ! function(e) {
            e.CratesChristmas = "CratesChristmas", e.OWL2018 = "owl2018"
        }(ae || (ae = {}));
        var De = function(e) {
                switch (e.event) {
                    case ae.OWL2018:
                        return a.createElement(we, null);
                    case ae.CratesChristmas:
                        return a.createElement(Ne, {
                            onClickHelp: e.onClickHelp,
                            channelID: e.channelID
                        });
                    default:
                        return a.createElement(ke, {
                            onClickHelp: e.onClickHelp
                        })
                }
            },
            Oe = n("N221"),
            Ie = n("cv4W"),
            Te = n.n(Ie),
            Me = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = "";
                    if (this.props.amount < 250) {
                        var t = 250 - this.props.amount;
                        e = Object(s.d)("{bitsToGo, plural, one {Cheer # more Bit to share gifts with chat!} other {Cheer # more Bits to share gifts with chat!}}", {
                            bitsToGo: t
                        }, "Crates")
                    } else e = Object(s.d)("Your Cheer will share gifts with chat!", "Crates");
                    return a.createElement(b._30, {
                        className: "crate-christmas-2017-reminder",
                        background: b.m.Alt,
                        borderTop: !0,
                        padding: 1
                    }, a.createElement(b._7, {
                        display: b.Q.Inline,
                        margin: {
                            right: .5
                        }
                    }, a.createElement("img", {
                        src: Te.a,
                        height: "22",
                        width: "22"
                    })), a.createElement(b.P, {
                        type: b._44.Strong
                    }, e))
                }, t
            }(a.Component),
            Re = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    switch (this.props.event) {
                        case ae.CratesChristmas:
                            return a.createElement(Me, {
                                amount: this.props.amount
                            });
                        default:
                            return null
                    }
                }, t
            }(a.Component),
            xe = (n("WT1Y"), function(e) {
                var t = e.prefixes.map(function(t, n) {
                    if (t.alt && t.cheerAmount) return a.createElement(b._1, {
                        className: "pending-cheer-list__list-item",
                        key: n,
                        padding: {
                            x: 1
                        }
                    }, a.createElement("li", null, a.createElement(O.a, {
                        prefix: t.alt,
                        amount: t.cheerAmount > he.k ? he.k : t.cheerAmount,
                        bitsConfig: e.bitsConfig,
                        size: O.b.Small,
                        showAmount: !0,
                        showImage: !0
                    })))
                });
                return a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexDirection: b.S.Row,
                    alignItems: b.c.End,
                    justifyContent: b._6.Center,
                    flexWrap: b.T.Wrap,
                    margin: {
                        top: 1
                    },
                    className: "pending-cheer-list"
                }, t)
            }),
            Le = (n("KWLn"), function(e) {
                var t;
                if (e.prefixes && 1 === e.prefixes.length) {
                    var n = e.prefixes[0].alt;
                    n && (t = a.createElement(b._7, {
                        padding: {
                            top: 2
                        }
                    }, a.createElement(O.a, {
                        prefix: n,
                        amount: e.amount > he.k ? he.k : e.amount,
                        bitsConfig: e.bitsConfig,
                        showImage: !0,
                        showAmount: !0
                    })))
                } else if (e.prefixes) t = a.createElement(b._7, {
                    margin: {
                        top: 1
                    }
                }, a.createElement(Oe.b, {
                    className: "pending-cheer__scroll-container"
                }, a.createElement(xe, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = Object(s.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                        totalBits: a.createElement("strong", null, e.amount),
                        channelName: e.channelDisplayName
                    }, "Bits--PendingCheer");
                    t = a.createElement(b._7, {
                        padding: {
                            top: 2,
                            x: 5
                        }
                    }, a.createElement(b.P, {
                        color: b.J.Alt2,
                        "data-a-target": "total-bits-message"
                    }, i))
                }
                var r = null;
                e.purchaseMore && e.purchaseMore > 0 && (r = a.createElement(b.P, {
                    "data-a-target": "need-more-bits-error"
                }, Object(s.d)("Please purchase {neededBits} more Bits to Cheer", {
                    neededBits: e.purchaseMore
                }, "Bits--PendingCheer")));
                var o = null;
                if (e.largestCheermote > he.k) {
                    var l = Object(s.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                        maximumCheerSize: he.k
                    }, "Bits--PendingCheer");
                    r = a.createElement(b.P, {
                        "data-a-target": "max-cheer-bits-error"
                    }, l)
                }
                if (e.amount < e.minToCheer) {
                    var d = Object(s.d)("Add {moreBitsAmount} Bits to reach this channel's minimum Cheer.", {
                        moreBitsAmount: e.minToCheer - e.amount
                    }, "Bits--PendingCheer");
                    r = a.createElement(b.P, {
                        "data-a-target": "min-cheer-bits-error"
                    }, d)
                }
                if (e.smallestCheermote < e.minPerEmote) {
                    var c = Object(s.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                        minPerEmote: e.minPerEmote
                    }, "Bits--PendingCheer");
                    o = a.createElement(b.P, {
                        color: b.J.Alt2,
                        italic: !0,
                        "data-a-target": "min-emote-bits-error"
                    }, c)
                }
                var u = a.createElement(O.a, {
                    amount: e.amount,
                    prefix: he.g,
                    bitsConfig: e.bitsConfig,
                    display: b.Q.Inline,
                    showImage: !1,
                    showAmount: !0,
                    size: O.b.Medium
                });
                return a.createElement(b._7, null, a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexDirection: b.S.Column,
                    alignItems: b.c.Center,
                    padding: 1,
                    className: "pending-cheer"
                }, a.createElement(b.P, {
                    fontSize: b.U.Size4,
                    bold: !0
                }, Object(s.d)("Cheering {totalBits} Bits", {
                    totalBits: u
                }, "Bits--PendingCheer")), !o && t, !o && r && a.createElement(b._7, {
                    padding: {
                        top: 1
                    }
                }, r), o && a.createElement(b._7, {
                    padding: {
                        top: 3,
                        x: 3
                    }
                }, o)), !o && !r && a.createElement(Re, {
                    event: e.event,
                    amount: e.amount
                }))
            }),
            Ae = n("qe65"),
            Fe = (n("f1ZS"), {
                themed: !0,
                dark: {
                    "1x": he.b + "/dark/animated/promo/intro.gif"
                },
                light: {
                    "1x": he.b + "/light/animated/promo/intro.gif"
                }
            }),
            je = function() {
                return a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexDirection: b.S.Column,
                    alignItems: b.c.Center,
                    justifyContent: b._6.Center,
                    flexGrow: 1,
                    className: "bits-sending"
                }, a.createElement(b._7, {
                    padding: {
                        bottom: 1
                    }
                }, a.createElement(Ae.a, {
                    sources: Fe
                })), a.createElement(b.P, {
                    italic: !0
                }, Object(s.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
            },
            Ue = (n("ZoRy"), function(e) {
                var t = Object(s.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                        totalBits: e.totalBits,
                        channelName: e.channelDisplayName
                    }, "Bits--UndoPrompt"),
                    n = null;
                if (e.prefixes && e.prefixes.length > 1) n = a.createElement(Oe.b, {
                    className: "bits-undo-prompt__scroll-container"
                }, a.createElement(b._7, {
                    margin: {
                        top: 1
                    }
                }, a.createElement(xe, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = e.prefixes[0].alt;
                    i && (n = a.createElement(b._7, {
                        padding: {
                            bottom: 1
                        }
                    }, a.createElement(O.a, {
                        prefix: i,
                        amount: e.totalBits,
                        bitsConfig: e.bitsConfig,
                        showAmount: !0,
                        showImage: !0
                    })))
                }
                return a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexDirection: b.S.Column,
                    alignItems: b.c.Center,
                    justifyContent: b._6.Center,
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-undo-prompt"
                }, n, a.createElement(b.P, null, t))
            }),
            Be = function(e) {
                var t = s.b.get("crate_snowman_launch", ve.a.Off),
                    n = t === ve.a.On || t === ve.a.StaffOnly && e.isStaff ? ae.CratesChristmas : null,
                    i = e.event || n;
                if (e.isSending) return e.totalBits < he.l ? a.createElement(je, null) : a.createElement(Ue, {
                    bitsConfig: e.bitsConfig,
                    channelDisplayName: e.displayName,
                    prefixes: e.currentCheers,
                    totalBits: e.totalBits
                });
                if (e.hoveredCheermote) return a.createElement(ye, {
                    event: e.event,
                    tournament: e.tournament,
                    bitsConfig: e.bitsConfig,
                    prefix: e.hoveredCheermote,
                    tier: e.hoveredTier
                });
                if (e.totalBits) return a.createElement(Le, {
                    bitsConfig: e.bitsConfig,
                    prefixes: e.currentCheers,
                    amount: e.totalBits,
                    channelDisplayName: e.displayName,
                    purchaseMore: e.bitsBalance && e.totalBits - e.bitsBalance,
                    largestCheermote: e.largestCheermote,
                    smallestCheermote: e.smallestCheermote,
                    minPerEmote: e.emoteMinimumBits,
                    minToCheer: e.cheerMinimumBits,
                    event: i
                });
                if (e.helpRequested) return a.createElement(be.a, null);
                if (e.chosenCheermote) {
                    var r = e.recentMinimumBits,
                        o = e.cheerMinimumBits;
                    return a.createElement(_e, {
                        minToPin: r,
                        minToCheer: o
                    })
                }
                return i ? a.createElement(De, {
                    event: i,
                    onClickHelp: e.showHelp,
                    channelID: e.channelID
                }) : a.createElement(ke, {
                    onClickHelp: e.showHelp
                })
            },
            Pe = n("WVx7"),
            Ve = n("0nzt"),
            He = n("w9tK"),
            We = n("CSlQ"),
            Ge = (n("9uTb"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        startingIndex: 0
                    }, t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (this.props.hide) return null;
                    var t = this.props.cheermotes.map(function(t, n) {
                            if (!t) return a.createElement("li", {
                                key: "null-cheermote-" + n
                            }, a.createElement("button", {
                                className: "cheermote-list__item-button",
                                disabled: !0
                            }, a.createElement("div", {
                                className: "cheermote-list__placeholder"
                            })));
                            var i = "";
                            t.key && (i = t.key.replace(":", ""));
                            var r = null;
                            e.props.showCheermoteAmount && t.key && (r = a.createElement(O.a, {
                                bitsConfig: e.props.bitsConfig,
                                prefix: "",
                                amount: +t.key.split(":")[1],
                                showImage: !1,
                                showAmount: !0,
                                size: O.b.Small
                            }));
                            var o = a.createElement("li", {
                                key: t.key,
                                className: "cheermote-list__cheermote"
                            }, a.createElement("button", {
                                className: "cheermote-list__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + i
                            }, a.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })), r);
                            return e.props.showCheermoteAmount ? o : a.createElement(b._1, {
                                key: t.key,
                                margin: {
                                    bottom: 1
                                }
                            }, o)
                        }),
                        n = null;
                    this.props.showCheermoteAmount && (n = a.createElement(b._7, {
                        padding: {
                            right: 2
                        },
                        fullWidth: !0,
                        className: "cheermote-list__back-button"
                    }, a.createElement(b.u, {
                        "data-a-target": "bits-card-back-button",
                        type: b.A.Text,
                        fullWidth: !0,
                        onClick: this.props.onClose
                    }, Object(s.d)("Show All Cheermotes", "CheermoteCarousel"))));
                    var i = a.createElement(b._1, {
                            className: "cheermote-list__cheermotes",
                            display: b.Q.Flex,
                            flexWrap: b.T.Wrap,
                            flexDirection: b.S.Row,
                            justifyContent: this.props.showCheermoteAmount ? b._6.Between : b._6.Start,
                            alignItems: b.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, a.createElement("ul", null, t, n)),
                        r = E("cheermote-list", {
                            "cheermote-list__tier-selection": this.props.showCheermoteAmount
                        }, {
                            "cheermote-list__cheermote-selection": !this.props.showCheermoteAmount
                        });
                    return this.props.showCheermoteAmount ? a.createElement(b._7, {
                        flexGrow: 1,
                        overflow: b._10.Hidden,
                        className: r
                    }, i) : a.createElement(b._7, {
                        flexGrow: 1,
                        overflow: b._10.Hidden,
                        className: r
                    }, a.createElement(Oe.b, null, i))
                }, t
            }(a.Component)),
            Qe = Object(re.compose)(Object(We.d)("CheermoteCarousel", {
                autoReportInteractive: !0,
                destination: He.a.CheermoteCarousel
            }))(Ge);
        var qe, ze = Object(X.b)(function(e) {
                return {
                    darkModeEnabled: Object(Ve.a)(e) === u.a.Dark
                }
            })(Qe),
            Ye = function(e) {
                return e.event, a.createElement(ge, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance,
                    selfBitsBadge: e.selfBitsBadge
                })
            },
            Je = function(e) {
                return a.createElement(b._7, {
                    flexGrow: 1
                }, a.createElement(b._7, {
                    className: "undo-prompt__footer",
                    padding: 1,
                    display: b.Q.Flex,
                    justifyContent: b._6.Between
                }, a.createElement(b.u, {
                    onClick: e.onCancel || void 0,
                    type: b.A.Hollow,
                    overlay: !0,
                    "data-test-selector": "cancel-button"
                }, Object(s.d)("Cancel", "Bits--UndoPrompt")), a.createElement(b.u, {
                    onClick: e.onConfirm || void 0,
                    "data-test-selector": "confirm-button"
                }, Object(s.d)("Send", "Bits--UndoPrompt"))), a.createElement(b._17, {
                    size: b._18.ExtraSmall,
                    countdown: he.m.UNDO_PROMPT_DURATION / 1e3
                }))
            },
            $e = n("ZJYd"),
            Ke = n("/LBW"),
            Ze = n("iWdz"),
            Xe = (n("2B/Z"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        chosenCheermote: null,
                        hoveredCheermote: null,
                        hoveredTier: 0,
                        helpRequested: !1,
                        totalBits: 0,
                        largestCheermote: 0,
                        smallestCheermote: 0,
                        buyingBits: !1
                    }, t.unhoverTimeout = 0, t.lastRefetchTime = 0, t.handleTierHover = function(e) {
                        clearTimeout(t.unhoverTimeout);
                        var n = e.split(":");
                        n.length < 2 || (t.setState({
                            hoveredTier: +n[1],
                            hoveredCheermote: n[0]
                        }), t.props.trackBitsCardInteraction(Ke.a.PreviewEmote, {
                            emoteType: n[0],
                            emoteLevel: +n[1]
                        }))
                    }, t.handleUnhover = function() {
                        t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                    }, t.clearHovered = function() {
                        t.setState({
                            hoveredTier: 0,
                            hoveredCheermote: null
                        })
                    }, t.handleTierClick = function(e) {
                        t.props.onClickCheermote(e.split(":").join(""))
                    }, t.handleCheermoteHover = function(e) {
                        clearTimeout(t.unhoverTimeout), t.setState({
                            hoveredCheermote: e,
                            hoveredTier: 0
                        }), t.props.trackBitsCardInteraction(Ke.a.PreviewEmote, {
                            emoteType: e,
                            emoteLevel: 100
                        })
                    }, t.handleCheermoteClick = function(e) {
                        t.setState({
                            chosenCheermote: e,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.clearChosenCheermote = function() {
                        t.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.showHelp = function(e) {
                        e.preventDefault(), t.setState({
                            helpRequested: !0
                        })
                    }, t.closeHelp = function() {
                        return t.setState({
                            helpRequested: !1
                        })
                    }, t.handleClickBuy = function() {
                        t.setState({
                            buyingBits: !0
                        }), t.props.trackBitsCardInteraction(Ke.a.BuyMain)
                    }, t.handleCloseBuy = function() {
                        return t.setState({
                            buyingBits: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.visible || !!this.props.currentCheers.length,
                        n = e.visible || !!e.currentCheers.length;
                    if (!t && n) {
                        var i = Date.now();
                        i - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = i, e.data.refetch())
                    }
                    if (t && !n && this.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            buyingBits: !1
                        }), this.props.currentCheers !== e.currentCheers) {
                        var a = Object($e.a)(e.currentCheers),
                            r = a.total,
                            o = a.largestCheermote,
                            s = a.smallestCheermote;
                        this.setState({
                            totalBits: r,
                            largestCheermote: o,
                            smallestCheermote: s
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.props.visible && !this.props.currentCheers.length) return null;
                    var e, t = {
                        border: !0,
                        background: b.m.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    if (this.props.currentCheers.length || (e = a.createElement("button", {
                            className: "t-bits-card__close t-bits-card__top-controls",
                            onClick: this.props.onUserClose,
                            "data-test-selector": "cancel-button",
                            "data-a-target": "bits-card-close-button"
                        }, a.createElement(b._20, {
                            asset: b._21.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return a.createElement(b._30, i.__assign({
                        className: "t-bits-card",
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        alignItems: b.c.Center,
                        justifyContent: b._6.Center
                    }, t), a.createElement(b._9, {
                        delay: 0
                    }), a.createElement(b._7, {
                        padding: {
                            top: 2
                        }
                    }, a.createElement(b.P, {
                        italic: !0
                    }, Object(s.d)("Fetching Bits", "BitsCard"))));
                    if (this.props.data.error || !this.props.bitsConfig) return a.createElement(fe, null);
                    if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return a.createElement(b._30, i.__assign({
                        className: "t-bits-card",
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        alignItems: b.c.Center,
                        justifyContent: b._6.Center,
                        textAlign: b._40.Center,
                        padding: {
                            top: 2,
                            x: 1,
                            bottom: 1
                        }
                    }, t), e, a.createElement(b.P, {
                        color: b.J.Error,
                        italic: !0
                    }, Object(s.d)("You cannot Cheer in your own channel.", "BitsCard")));
                    if (this.state.buyingBits) return a.createElement(Pe.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.props.onUserClose,
                        onClose: this.handleCloseBuy,
                        trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                        location: Ke.b.ChatTooltip
                    });
                    var n = null,
                        r = this.state.helpRequested && !this.props.currentCheers.length,
                        o = null;
                    if (this.props.data.user.cheer.settings.event && (o = this.props.data.user.cheer.settings.event.toLowerCase().replace("_", "-")), this.state.chosenCheermote) {
                        var l = this.props.bitsConfig.indexedActions[this.state.chosenCheermote.toLowerCase()];
                        if (l) {
                            var d = l.orderedTiers.filter(function(e) {
                                return e.bits <= he.k
                            }).map(function(e) {
                                return {
                                    imgSrc: e.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: e.indexedImages.DARK.static.get(2),
                                    key: l.prefix + ":" + e.bits
                                }
                            }).reverse();
                            n = a.createElement(ze, {
                                bitsConfig: this.props.bitsConfig,
                                hide: r,
                                cheermotes: d,
                                showCheermoteAmount: !0,
                                event: o,
                                onHover: this.handleTierHover,
                                onHoverLeave: this.handleUnhover,
                                onClick: this.handleTierClick,
                                onClose: this.clearChosenCheermote
                            })
                        }
                    }
                    if (!n) {
                        d = this.props.bitsConfig.orderedActions.filter(function(e) {
                            return e.type !== he.e
                        }).map(function(e) {
                            var t = e.indexedTiers.get(he.h);
                            return t ? {
                                imgSrc: t.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: t.indexedImages.DARK.static.get(2),
                                key: e.prefix
                            } : null
                        });
                        n = a.createElement(ze, {
                            bitsConfig: this.props.bitsConfig,
                            hide: r,
                            cheermotes: d,
                            event: o,
                            onHover: this.handleCheermoteHover,
                            onHoverLeave: this.handleUnhover,
                            onClick: this.handleCheermoteClick
                        })
                    }
                    var c, u = null;
                    this.props.isSending ? this.state.totalBits >= he.l && (u = a.createElement(Je, {
                        onCancel: this.props.onCancelSend,
                        onConfirm: this.props.onConfirmSend
                    })) : u = o ? a.createElement(Ye, {
                        event: o,
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    }) : a.createElement(ge, {
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    }), r && (c = a.createElement("button", {
                        className: "t-bits-card__go-back t-bits-card__top-controls",
                        onClick: this.closeHelp,
                        "data-a-target": "bits-card-back-button"
                    }, a.createElement(b._20, {
                        asset: b._21.Play,
                        height: 8
                    }), " ", Object(s.d)("Back", "BitsCard")));
                    var m = E("t-bits-card", {
                        "t-bits-card--tall": !this.props.isSending
                    });
                    return a.createElement(b._30, i.__assign({
                        className: m,
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        "data-a-target": "bits-card"
                    }, t), !this.props.isSending && c, e, a.createElement(b._30, {
                        className: "t-bits-card__contents",
                        display: b.Q.Flex,
                        flexGrow: 0,
                        flexDirection: b.S.Column,
                        alignContent: b.b.Stretch,
                        textAlign: b._40.Center,
                        borderBottom: !this.props.isSending
                    }, a.createElement(Be, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        displayName: this.props.data.user.displayName,
                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                        event: o,
                        helpRequested: this.state.helpRequested,
                        hoveredCheermote: this.state.hoveredCheermote,
                        hoveredTier: this.state.hoveredTier,
                        isSending: this.props.isSending,
                        largestCheermote: this.state.largestCheermote,
                        recentMinimumBits: this.props.data.user.cheer.settings.recentMinimumBits,
                        smallestCheermote: this.state.smallestCheermote,
                        totalBits: this.state.totalBits,
                        tournament: this.props.data.user.tournament,
                        channelID: this.props.channelID,
                        showHelp: this.showHelp,
                        isStaff: this.props.isStaff
                    })), !this.props.isSending && n, u && a.createElement(b._7, {
                        className: "t-bits-card__footer",
                        display: b.Q.Flex
                    }, u))
                }, t = i.__decorate([Object(l.a)(Ze, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                name: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                })], t)
            }(a.Component)),
            et = n("KSGD"),
            tt = n("2emZ"),
            nt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = tt.a.Hashtag, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith("#") && null !== t.props.hashTags.edges ? t.props.hashTags.edges.filter(function(t) {
                            return t.node.id.includes(e)
                        }).map(function(n) {
                            return {
                                current: e,
                                replacement: n.node.id,
                                element: t.genearateHashtagDisplay(n.node.id)
                            }
                        }) : null
                    }, t.genearateHashtagDisplay = function(e) {
                        return a.createElement(b._7, {
                            padding: {
                                right: .5
                            },
                            key: "hashtag:" + e
                        }, a.createElement(b.P, null, e))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: et.func
                }, t
            }(a.Component),
            it = n("iydZ"),
            at = n("Lx+S"),
            rt = n("vh75"),
            ot = n("SZoP"),
            st = n("Bir6"),
            lt = 5,
            dt = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = tt.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var i = t ? e : e.substring(1),
                            a = new RegExp("^" + Object(st.a)(i), "i");
                        return n.state.sortedChatMembers.filter(function(e) {
                            return a.test(e.login) || e.displayName && a.test(e.displayName)
                        }).slice(0, lt).map(function(i) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + (i.displayName || i.login),
                                element: n.renderMention(i)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return a.createElement("span", null, Object(ot.a)(e.login, e.displayName || null))
                    }, n.sortChatMembers = function(e) {
                        var t = [{
                                login: e.channelLogin,
                                displayName: e.channelDisplayName
                            }],
                            n = e.chatMembers;
                        return n.sort(function(e, t) {
                            return e.login < t.login ? -1 : e.login > t.login ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedChatMembers: n.sortChatMembers(t)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.chatMembers === e.chatMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin || this.setState({
                        sortedChatMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: et.func
                }, t
            }(a.Component),
            ct = function() {
                return a.createElement(b.p, {
                    direction: b.q.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, a.createElement(b._7, {
                    padding: 1,
                    "data-test-selector": "raids-settings-tooltip"
                }, Object(s.d)("If a raid is offensive, moderate in chat settings.", "RaidReportingChat")))
            },
            ut = n("QCOJ"),
            mt = n("O0Qc"),
            pt = n("l21v"),
            ht = n("hcyD"),
            gt = n("VB5+"),
            ft = n("Umoc"),
            vt = n("ieBa"),
            bt = n("ACWz"),
            kt = n("2I50"),
            yt = /\S/,
            _t = 3;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(qe || (qe = {}));
        var Ct = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.syncMembers = function() {
                    n.props.activeChatters.isDirty && n.setState({
                        chatMembers: n.props.activeChatters.getActiveChatters()
                    })
                }, n.setChatInputRef = function(e) {
                    return n.chatInputRef = e
                }, n.setAutocompleteInputRef = function(e) {
                    return n.autocompleteInputRef = e
                }, n.onChatSettingsToggle = function(e) {
                    n.handleRaidReportingToggle(e), e || Object(ft.b)({
                        channelLogin: n.props.channelLogin,
                        isHostMode: n.props.isHostMode
                    })
                }, n.handleRaidReportingToggle = function(e) {
                    n.props.raidReceived && (n.state.showRaidsSettingsTooltip && (n.setState({
                        showRaidsSettingsTooltip: !1
                    }), s.l.set("raidsModerationTooltipsSeenNumTimes", _t)), e && n.setState({
                        showRaidsFollowerOnlyTooltip: !1
                    }))
                }, n.onKeyDown = function(e) {
                    var t = e.charCode || e.keyCode;
                    switch (n.props.onKeyDown && t !== oe.a.Enter && n.props.onKeyDown(e), t) {
                        case oe.a.Enter:
                            return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                        case oe.a.Esc:
                            return void(n.state.showCard === qe.Bits && n.setState({
                                showCard: qe.None
                            }));
                        default:
                            return
                    }
                }, n.onMessageValueUpdate = function(e) {
                    n.setState({
                        value: e
                    })
                }, n.onInputFocus = function() {
                    n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                        hasInteractedOrPageload: !0
                    })
                }, n.onMouseEnterInput = function() {
                    n.state.hasInteractedOrPageload || n.setState({
                        hasInteractedOrPageload: !0
                    })
                }, n.onChatCommand = function(e) {
                    n.props.onChatCommand(e), n.trackChatEvent()
                }, n.confirmEmbedAction = function(e, t, i) {
                    var a = n,
                        r = a.hasConfirmedInEmbed;
                    if (a.hasSeenConfirmationPrompt) return r;
                    var o = window.confirm(n.confirmationMessage(e, t, i));
                    return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = o, n.setState({
                        hasSeenAndRejectedEmbedPrompt: !o
                    }), o
                }, n.confirmationMessage = function(e, t, n) {
                    return Object(s.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                        displayName: e,
                        message: t,
                        channelLogin: n
                    }, "ChatInput")
                }, n.onMessageSend = function() {
                    return i.__awaiter(n, void 0, void 0, function() {
                        var e, t, n, a, r = this;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return this.props.authToken ? this.props.channelID ? (e = yt.test(this.state.value)) ? this.state.isSendingBits ? (s.j.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (s.j.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : (this.resetAndUpdateRenderSentChatMessageEvent(), this.props.data && this.props.data.currentUser ? 0 === (t = Object($e.a)(this.state.messageCheers)).total ? (this.sendRegularMessage(), [2]) : this.props.data.user ? this.props.data.user.cheer ? this.props.data.user.cheer.settings ? (n = Object($e.f)({
                                        messageBits: t,
                                        balance: this.props.data.currentUser.bitsBalance,
                                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                                        inputValue: this.state.value
                                    })).canSpend ? this.props.sendCheer ? (this.setState({
                                        isSendingBits: !0
                                    }), t.total >= he.l ? [4, new Promise(function(e) {
                                        var t = setTimeout(e, he.m.UNDO_PROMPT_DURATION),
                                            n = function(n) {
                                                void 0 === n && (n = !1), clearTimeout(t), r.cancelDelayedSend = null, r.confirmDelayedSend = null, e(n)
                                            };
                                        r.cancelDelayedSend = function() {
                                            return n(!0)
                                        }, r.confirmDelayedSend = function() {
                                            return n(!1)
                                        }
                                    })] : [3, 2]) : (s.j.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (s.j.warn("[Chat Input] Spending bits forbidden.", n), [2]) : (s.j.warn("[Chat Input] Cheer Settings are undefined."), [2]) : (s.j.warn("[Chat Input] Cheer is null."), [2]) : (s.j.warn("[Chat Input] User is null."), [2]) : (this.sendRegularMessage(), [2])) : (s.j.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                        hasSendableInput: e,
                                        value: this.state.value
                                    }), [2]) : (s.j.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.props.login(), [2]);
                                case 1:
                                    if (i.sent()) return this.setState({
                                        isSendingBits: !1
                                    }), this.chatInputRef.focus(), [2];
                                    i.label = 2;
                                case 2:
                                    a = Object(le.a)(), i.label = 3;
                                case 3:
                                    return i.trys.push([3, 5, , 6]), [4, this.props.sendCheer({
                                        variables: {
                                            input: {
                                                id: a,
                                                targetID: this.props.channelID,
                                                bits: t.total,
                                                content: this.state.value
                                            }
                                        }
                                    })];
                                case 4:
                                    return i.sent(), [3, 6];
                                case 5:
                                    return i.sent(), this.setState({
                                        isSendingBits: !1
                                    }), this.chatInputRef.focus(), [2];
                                case 6:
                                    return this.setState({
                                        isSendingBits: !1,
                                        showCard: qe.None,
                                        value: ""
                                    }), this.chatInputRef.focus(), this.autocompleteInputRef.setValue(""), [2]
                            }
                        })
                    })
                }, n.onEmotePickerToggle = function() {
                    n.setState(function(e) {
                        return e.messageCheers.length ? e : {
                            showCard: e.showCard === qe.Emotes ? qe.None : qe.Emotes
                        }
                    })
                }, n.onBitsIconClick = function() {
                    n.state.showCard === qe.Bits ? n.trackBitsCardInteraction(Ke.a.CloseCard) : n.trackBitsCardInteraction(Ke.a.OpenCard), n.setState({
                        showCard: n.state.showCard === qe.Bits ? qe.None : qe.Bits
                    })
                }, n.onShowViewersList = function() {
                    n.state.showCard !== qe.None && n.setState({
                        showCard: qe.None
                    }), n.props.showViewersList()
                }, n.onBitsClose = function() {
                    n.state.showCard === qe.Bits && n.setState({
                        showCard: qe.None
                    }), n.trackBitsCardInteraction(Ke.a.CloseCard)
                }, n.onClickEmote = function(e) {
                    var t = n.state.value;
                    n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef.setValue(t)
                }, n.onEmotePickerDataLoaded = function(e) {
                    e && n.setState({
                        showEmotePickerButton: !0
                    })
                }, n.trackBitsCardInteraction = function(e, t) {
                    var i = {
                        actionName: e,
                        emoteType: t && t.emoteType,
                        emoteLevel: t && t.emoteLevel,
                        location: t && t.location,
                        displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                    };
                    Object(Ke.h)(i)
                }, n.resetAndUpdateRenderSentChatMessageEvent = function() {
                    n.props.latencyTracking.resetCustomEvents(ce.a.Chat);
                    var e = n.props.latencyTracking.registerCustomEvent({
                        benchmark: 400,
                        group: ce.a.Chat,
                        key: ce.b.ChatRenderSent,
                        label: ce.c.RenderSent,
                        start: ce.d.Registration
                    });
                    n.props.updateRenderSentChatMessageEvent(e)
                }, n.state = {
                    chatMembers: t.activeChatters.getActiveChatters(),
                    hasInteractedOrPageload: t.firstPageLoaded,
                    hasSeenAndRejectedEmbedPrompt: !1,
                    isSendingBits: !1,
                    messageCheers: [],
                    showBuyBits: !1,
                    showCard: qe.None,
                    showEmotePickerButton: !!t.authToken,
                    showRaidsSettingsTooltip: !1,
                    showRaidsFollowerOnlyTooltip: !1,
                    value: ""
                }, n
            }
            return i.__extends(t, e), t.prototype.componentWillMount = function() {
                this.syncMembersHandle = setInterval(this.syncMembers, 250)
            }, t.prototype.componentWillUpdate = function(e, t) {
                if (t.value !== this.state.value && this.props.bitsConfig) {
                    var n = [];
                    Object(it.c)(t.value, this.props.bitsConfig).forEach(function(e) {
                        e.type === W.a.Emote && n.push(e.content)
                    }), n.length && t.showCard === qe.Emotes && this.setState({
                        showCard: qe.None
                    }), this.setState({
                        messageCheers: n
                    })
                }
            }, t.prototype.componentWillReceiveProps = function(e) {
                var t = this;
                !this.props.firstPageLoaded && e.firstPageLoaded && this.setState({
                    hasInteractedOrPageload: !0
                }), this.props.isCurrentUserModerator && !this.props.raidReceived && e.raidReceived && s.l.get("raidsModerationTooltipsSeenNumTimes", 0) < _t && this.setState({
                    showRaidsSettingsTooltip: !0,
                    showRaidsFollowerOnlyTooltip: !0
                }, function() {
                    setTimeout(function() {
                        var e = s.l.get("raidsModerationTooltipsSeenNumTimes", 0) + 1;
                        s.l.set("raidsModerationTooltipsSeenNumTimes", e), t.setState({
                            showRaidsSettingsTooltip: !1
                        })
                    }, 2e4)
                })
            }, t.prototype.componentWillUnmount = function() {
                this.syncMembersHandle && (clearInterval(this.syncMembersHandle), this.syncMembersHandle = 0)
            }, t.prototype.render = function() {
                if (this.props.hidden) return null;
                if (this.state.hasSeenAndRejectedEmbedPrompt) return a.createElement(b._7, {
                    className: "chat-input",
                    padding: {
                        x: 2,
                        bottom: 2
                    }
                }, a.createElement(b.P, {
                    "data-test-selector": "chat-embed-denied-text"
                }, Object(s.d)("You rejected the prompt to send messages in this embedded version of Twitch Chat. If this was done in error, please refresh the page.", "ChatInput")), this.renderButtonContainer(!0));
                var e = [];
                this.props.bitsConfig && e.push(a.createElement(b.v, {
                    key: "bits",
                    icon: b._21.Bits,
                    ariaLabel: Object(s.d)("Bits", "ChatInput"),
                    type: b.x.Secondary,
                    onClick: this.onBitsIconClick,
                    "data-a-target": "bits-button"
                })), this.state.showEmotePickerButton && e.push(a.createElement(vt.b, {
                    key: "emote-picker",
                    onClick: this.onEmotePickerToggle
                }));
                var t = null;
                this.state.hasInteractedOrPageload && (t = a.createElement(vt.c, {
                    channelOwnerID: this.props.channelID,
                    onClickEmote: this.onClickEmote,
                    onLoad: this.onEmotePickerDataLoaded,
                    toggleVisibility: this.onEmotePickerToggle,
                    visible: this.state.showCard === qe.Emotes
                }));
                var n = null;
                this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = a.createElement(Xe, {
                    bitsConfig: this.props.bitsConfig,
                    channelID: this.props.channelID,
                    channelLogin: this.props.channelLogin,
                    currentCheers: this.state.messageCheers,
                    isSending: this.state.isSendingBits,
                    isStaff: this.props.isStaff,
                    onCancelSend: this.cancelDelayedSend,
                    onClickCheermote: this.onClickEmote,
                    onConfirmSend: this.confirmDelayedSend,
                    onUserClose: this.onBitsClose,
                    trackBitsCardInteraction: this.trackBitsCardInteraction,
                    visible: this.state.showCard === qe.Bits
                }));
                var i = null;
                return this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.hashtags && this.state.messageCheers.length > 0 && (i = a.createElement(nt, {
                    hashTags: this.props.data.user.cheer.hashtags
                })), a.createElement(b._7, {
                    className: "chat-input",
                    padding: {
                        x: 2,
                        bottom: 2
                    }
                }, a.createElement(b._1, {
                    position: b._14.Relative,
                    zIndex: b._57.Default
                }, a.createElement("div", {
                    onMouseEnter: this.onMouseEnterInput
                }, t, n, a.createElement(ue.b, {
                    componentType: ue.a.TextArea,
                    suggestionSource: ue.c.Chat,
                    onValueUpdate: this.onMessageValueUpdate,
                    onFocus: this.onInputFocus,
                    onKeyDown: this.onKeyDown,
                    componentRefDelegate: this.setChatInputRef,
                    refDelegate: this.setAutocompleteInputRef,
                    paddingRight: 30 * e.length,
                    placeholder: Object(s.d)("Send a message", "ChatInput"),
                    noResize: !0,
                    "data-a-target": "chat-input",
                    "data-test-selector": "chat-input",
                    disabled: this.state.isSendingBits,
                    containerElement: this.props.containerElement
                }, a.createElement(ue.d, {
                    emotes: this.props.emotes
                }), a.createElement(dt, {
                    channelDisplayName: this.props.channelDisplayName,
                    channelLogin: this.props.channelLogin,
                    chatMembers: this.state.chatMembers
                }), i), a.createElement(b._7, {
                    position: b._14.Absolute,
                    attachRight: !0,
                    attachTop: !0
                }, e))), this.renderButtonContainer(!1))
            }, t.prototype.renderButtonContainer = function(e) {
                return void 0 === e && (e = !1), a.createElement(b._7, {
                    className: "chat-input__buttons-container",
                    display: b.Q.Flex,
                    justifyContent: b._6.Between,
                    margin: {
                        top: 1
                    }
                }, a.createElement(b._7, {
                    display: b.Q.Flex,
                    flexDirection: b.S.Row
                }, a.createElement(b._7, {
                    position: b._14.Relative
                }, a.createElement(at.a, {
                    onToggle: this.onChatSettingsToggle,
                    channelLogin: this.props.channelLogin,
                    isHostMode: this.props.isHostMode,
                    authToken: this.props.authToken,
                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                    onChatCommand: this.onChatCommand,
                    isPopout: this.props.isPopout,
                    isEmbedded: this.props.isEmbedded,
                    channelID: this.props.channelID,
                    sawFirstRaidPrompt: this.state.showRaidsFollowerOnlyTooltip,
                    containerElement: this.props.containerElement
                }), this.state.showRaidsSettingsTooltip ? a.createElement(ct, null) : null), a.createElement(b.v, {
                    ariaLabel: Object(s.d)("Viewer list", "ChatInput"),
                    "data-a-target": "chat-viewer-list",
                    "data-test-selector": "chat-viewer-list",
                    icon: b._21.ViewerList,
                    onClick: this.onShowViewersList
                })), this.renderSendButton(e))
            }, t.prototype.renderSendButton = function(e) {
                var t;
                return void 0 === e && (e = !1), t = this.state.value && null !== Object(mt.q)(this.state.value) ? Object(s.d)("Whisper", "ChatInput") : Object(s.d)("Chat", "ChatInput"), a.createElement(b.u, {
                    onClick: this.onMessageSend,
                    "data-a-target": "chat-send-button",
                    "data-test-selector": "chat-send-button",
                    disabled: this.state.isSendingBits || e
                }, t)
            }, t.prototype.sendRegularMessage = function() {
                this.props.onSendMessage && this.props.onSendMessage(this.state.value) && (this.trackChatEvent(), this.trackMentions(), this.autocompleteInputRef.setValue(""), this.setState({
                    showCard: qe.None
                }))
            }, t.prototype.trackChatEvent = function() {
                Object(ht.a)({
                    channelID: this.props.channelID,
                    channelLogin: this.props.channelLogin,
                    isHostMode: this.props.isHostMode,
                    player: this.props.isPopout ? ut.a.Embed : ut.a.Web,
                    subOnlyMode: this.props.isSubsOnlyModeEnabled
                })
            }, t.prototype.trackMentions = function() {
                if (this.state.value && this.props.sessionUser)
                    for (var e = 0, t = Object(pt.c)(this.state.value, this.props.sessionUser.displayName, !1); e < t.length; e++) {
                        var n = t[e];
                        n.type === W.a.Mention && n.content.recipient !== n.content.sender && Object(gt.a)({
                            channelLogin: this.props.channelLogin,
                            isHostMode: this.props.isHostMode,
                            mentionedUserDisplayName: n.content.recipient,
                            userLogin: this.props.sessionUser.login
                        })
                    } else s.j.warn("[ChatInput] trackMentions was called in a nonsensical state.")
            }, t
        }(a.Component);
        var St = Object(re.compose)(Object(l.a)(kt, {
                name: "sendCheer"
            }), Object(l.a)(bt), Object(We.d)("ChatInput", {
                autoReportInteractive: !0
            }), Object(X.b)(function(e) {
                return {
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode,
                    sessionUser: Object(ee.c)(e)
                }
            }, function(e) {
                return Object(o.b)({
                    login: function() {
                        return Object(de.f)(se.a.Chat)
                    },
                    updateRenderSentChatMessageEvent: rt.U
                }, e)
            }))(Ct),
            Et = n("kpSd"),
            Nt = (n("HuX0"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onClickConfirm = function() {
                        n.markRoomSeen(), n.setState({
                            showRules: !1
                        })
                    };
                    var i = n.getRoomsSeen();
                    return n.state = {
                        showRules: n.props.chatRules && n.props.chatRules.length > 0 && !i[n.props.channelLogin]
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.state.showRules ? a.createElement(b._7, {
                        className: "chat-rules",
                        position: b._14.Relative
                    }, a.createElement(b._30, {
                        border: !0,
                        background: b.m.Base,
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(b._7, {
                        padding: 1
                    }, a.createElement(b._7, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(b.P, {
                        type: b._44.H6
                    }, Object(s.d)("Chat Rules:", "ChatRules"))), a.createElement(b._7, null, a.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                        return a.createElement("li", {
                            key: t
                        }, e)
                    }))), a.createElement(b._7, {
                        margin: {
                            top: 1
                        },
                        display: b.Q.Flex,
                        justifyContent: b._6.Center
                    }, a.createElement(b.u, {
                        size: b.y.Small,
                        onClick: this.onClickConfirm
                    }, Object(s.d)("Ok, got it!", "ChatRules")))))) : null
                }, t.prototype.getRoomsSeen = function() {
                    return s.l.get("chat_rules_shown", {})
                }, t.prototype.markRoomSeen = function() {
                    var e = this.getRoomsSeen();
                    e[this.props.channelLogin] = !0, s.l.set("chat_rules_shown", e)
                }, t
            }(a.Component)),
            wt = n("ass3"),
            Dt = 3;
        var Ot = n("O9wU"),
            It = (n("Bsuy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, Ot.a.viewer_list, "", e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        i = t.header,
                        r = n.map(function(t, n) {
                            return a.createElement("div", {
                                key: "chat-viewers-list-item-" + t,
                                role: "listitem",
                                "aria-setsize": -1,
                                "aria-posinset": n + 1
                            }, a.createElement("button", {
                                className: "chat-viewers-list__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, a.createElement(b.P, {
                                transform: b._43.Capitalize
                            }, t)))
                        }),
                        o = "chat-viewers-list-header-" + i;
                    return a.createElement(b._7, {
                        className: "chat-viewers-list",
                        padding: {
                            bottom: 2
                        }
                    }, a.createElement("div", {
                        id: o
                    }, a.createElement(b.P, {
                        transform: b._43.Uppercase
                    }, i)), a.createElement("div", {
                        role: "list",
                        "aria-labelledby": o
                    }, r))
                }, t
            }(a.Component)),
            Tt = (n("gwjw"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        filter: "",
                        inputValue: "",
                        filteredViewers: {},
                        viewersPage: 0,
                        renderedViewers: [],
                        isLoading: !1
                    }, t.filterTimeout = 0, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.loadMore = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e = this;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, new Promise(function(t) {
                                            e.setState(function(t) {
                                                return {
                                                    renderedViewers: e.getRenderedViewers(t.filteredViewers.viewers, t.viewersPage + 1),
                                                    viewersPage: t.viewersPage + 1
                                                }
                                            }, function() {
                                                t()
                                            })
                                        })];
                                    case 1:
                                        return t.sent(), [2]
                                }
                            })
                        })
                    }, t.getRenderedViewers = function(e, t) {
                        return e ? e.slice(0, 100 * (t || 1)) : []
                    }, t.handleFilter = function(e, n) {
                        var i = function(e, t) {
                                if (!t) return e;
                                var n = Object.assign({}, e);
                                return Object.keys(n).forEach(function(e) {
                                    var i = n[e];
                                    Array.isArray(i) && (n[e] = i.filter(function(e) {
                                        return -1 !== e.toLowerCase().indexOf(t)
                                    }))
                                }), n
                            }(n, e),
                            a = t.getRenderedViewers(i.viewers, 1);
                        t.scroll && t.scroll.scrollToTop(), t.setState({
                            filteredViewers: i,
                            isLoading: !1,
                            renderedViewers: a,
                            viewersPage: 1
                        })
                    }, t.handleFilterChange = function(e) {
                        var n = e.target.value,
                            i = n.toLowerCase().trim();
                        t.setState({
                            filter: i,
                            inputValue: n,
                            isLoading: !0
                        }), clearTimeout(t.filterTimeout), t.filterTimeout = setTimeout(function() {
                            t.handleFilter(i, t.props.viewers)
                        }, 350)
                    }, t.onKeyDown = function(e) {
                        e.keyCode === oe.a.Esc && t.props.closeViewersList()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.handleFilter(this.state.filter, e.viewers)
                }, t.prototype.render = function() {
                    var e = [],
                        t = this.state.filteredViewers;
                    t.staff && t.staff.length > 0 && e.push(a.createElement(It, {
                        key: "chat-viewers-list-staff",
                        header: Object(s.d)("Staff", "ChatViewers"),
                        viewers: t.staff,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.admins && t.admins.length > 0 && e.push(a.createElement(It, {
                        key: "chat-viewers-list-admins",
                        header: Object(s.d)("Admins", "ChatViewers"),
                        viewers: t.admins,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.global_mods && t.global_mods.length > 0 && e.push(a.createElement(It, {
                        key: "chat-viewers-list-global-mods",
                        header: Object(s.d)("Global Moderators", "ChatViewers"),
                        viewers: t.global_mods,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.moderators && t.moderators.length > 0 && e.push(a.createElement(It, {
                        key: "chat-viewers-list-moderators",
                        header: Object(s.d)("Moderators", "ChatViewers"),
                        viewers: t.moderators,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.viewers && t.viewers.length > 0 && e.push(a.createElement(It, {
                        key: "chat-viewers-list-viewers",
                        "data-test-selector": "chat-viewers-list-viewers",
                        header: Object(s.d)("Viewers", "ChatViewers"),
                        viewers: this.state.renderedViewers,
                        onUsernameClick: this.props.onShowViewerCard
                    }));
                    var n = this.props.isLoading || this.state.isLoading,
                        i = n && a.createElement(b._7, {
                            className: "chat-viewers__loading",
                            display: b.Q.Flex,
                            alignItems: b.c.Center,
                            justifyContent: b._6.Center,
                            zIndex: b._57.Above,
                            position: b._14.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, a.createElement(b._9, null));
                    return a.createElement(b._1, {
                        className: "chat-viewers__container",
                        fullWidth: !0,
                        fullHeight: !0,
                        flexShrink: 0,
                        zIndex: b._57.Default
                    }, a.createElement("section", {
                        "aria-labelledby": "chat-viewers__header"
                    }, a.createElement(b._7, {
                        className: "chat-viewers__pane",
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        flexWrap: b.T.NoWrap,
                        position: b._14.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0
                    }, a.createElement(b._7, {
                        className: "chat-viewers__header",
                        display: b.Q.Flex,
                        justifyContent: b._6.Center,
                        alignItems: b.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, a.createElement(b._7, {
                        position: b._14.Absolute,
                        attachLeft: !0,
                        margin: {
                            left: 1
                        }
                    }, a.createElement(b.v, {
                        icon: b._21.Close,
                        ariaLabel: Object(s.d)("Close", "ChatViewers"),
                        "data-a-target": "chat-viewer-list",
                        onClick: this.props.closeViewersList
                    })), a.createElement("p", {
                        "data-a-target": "chat-viewers_header-channel-name",
                        id: "chat-viewers__header"
                    }, Object(s.d)("Viewer List", "ChatViewers"))), a.createElement(b._7, {
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        flexWrap: b.T.NoWrap,
                        fullHeight: !0
                    }, a.createElement(b._7, {
                        className: "chat-viewers__filter",
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }, a.createElement(b._3, {
                        type: b._4.Search,
                        name: "viewers-filter",
                        placeholder: Object(s.d)("Filter Viewers", "ChatViewers"),
                        readOnly: this.props.isLoading,
                        onChange: this.handleFilterChange,
                        value: this.state.inputValue,
                        autoFocus: !0,
                        onKeyDown: this.onKeyDown
                    })), a.createElement(N.b, {
                        className: "chat-viewers__list",
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0,
                        scrollContentClassName: "chat-viewers__scroll-container"
                    }, a.createElement(b._7, {
                        padding: {
                            x: 2
                        }
                    }, e, a.createElement(N.a, {
                        key: this.state.filter,
                        enabled: !n,
                        loadMore: this.loadMore
                    }))), i))))
                }, t
            }(a.Component)),
            Mt = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        viewers: {},
                        viewerCount: 0,
                        isLoading: !1
                    }, n.logger = s.j.withCategory("chat-viewers"), n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.channelLogin !== e.channelLogin && this.updateViewers(e.channelLogin)
                }, t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            return this.updateViewers(this.props.channelLogin), [2]
                        })
                    })
                }, t.prototype.render = function() {
                    return a.createElement(Tt, {
                        channelLogin: this.props.channelLogin,
                        closeViewersList: this.props.closeViewersList,
                        viewers: this.state.viewers,
                        viewerCount: this.state.viewerCount,
                        isLoading: this.state.isLoading,
                        onShowViewerCard: this.props.onShowViewerCard
                    })
                }, t.prototype.updateViewers = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a, r;
                        return i.__generator(this, function(o) {
                            switch (o.label) {
                                case 0:
                                    return this.props.latencyTracking.resetCustomEvents(ce.a.ViewersList), t = this.props.latencyTracking.registerCustomEvent({
                                        benchmark: 3e3,
                                        group: ce.a.ViewersList,
                                        key: ce.b.ViewersListUpdated,
                                        label: ce.c.Updated,
                                        start: ce.d.Registration
                                    }), this.setState({
                                        isLoading: !0
                                    }), [4, function(e) {
                                        return i.__awaiter(this, void 0, void 0, function() {
                                            var t, n, a, r;
                                            return i.__generator(this, function(i) {
                                                switch (i.label) {
                                                    case 0:
                                                        t = "https://tmi.twitch.tv/group/user/" + e.toLowerCase() + "/chatters", n = 1, i.label = 1;
                                                    case 1:
                                                        if (!(n <= Dt)) return [3, 7];
                                                        i.label = 2;
                                                    case 2:
                                                        return i.trys.push([2, 5, , 6]), [4, fetch(t, {
                                                            method: "GET",
                                                            headers: {
                                                                Accept: "application/json; charset=UTF-8",
                                                                "content-type": "application/json; charset=UTF-8"
                                                            }
                                                        })];
                                                    case 3:
                                                        return [4, i.sent().json()];
                                                    case 4:
                                                        return a = i.sent(), s.j.debug("[update] getViewers done."), [2, a];
                                                    case 5:
                                                        if (r = i.sent(), n === Dt) throw r;
                                                        return [3, 6];
                                                    case 6:
                                                        return ++n, [3, 1];
                                                    case 7:
                                                        return [2]
                                                }
                                            })
                                        })
                                    }(e)];
                                case 1:
                                    return n = o.sent(), a = n ? n.chatters : {}, r = n ? n.chatter_count : 0, this.logger.debug("Updated viewers list with " + r + " viewers"), this.setState({
                                        viewers: a,
                                        viewerCount: r,
                                        isLoading: !1
                                    }), this.props.latencyTracking.reportCustomEvent(t), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(We.d)("ViewersList", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component);
        var Rt = Object(X.b)(null, function(e) {
                return Object(o.b)({
                    onShowViewerCard: wt.d
                }, e)
            })(Mt),
            xt = n("tjbt"),
            Lt = n("ZiSq"),
            At = (n("jIAO"), n("vLl9"));
        n("dVd7");
        n.d(t, "a", function() {
            return Ft
        }), n.d(t, "b", function() {
            return Bt
        });
        var Ft = "chat-room-header-label",
            jt = s.j.withCategory("chat-room"),
            Ut = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.closeViewersList = function() {
                        n.setState({
                            showViewersList: !1
                        })
                    }, n.showViewersList = function() {
                        n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                            showViewersList: !0
                        })
                    }, n.onChatInputFocus = function() {
                        n.props.authToken && !n.state.showChatRules && n.setState({
                            showChatRules: !0
                        })
                    }, n.setChatListElement = function(e) {
                        n.setState({
                            chatListElement: e
                        })
                    }, n.shouldHideChatInput = function() {
                        return n.state.showViewersList
                    };
                    var i = new _.c([], [], n.props.channelLogin);
                    return n.state = {
                        showChatRules: !1,
                        showViewersList: !1,
                        badgeSets: i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.isBackground) return null;
                    if (this.props.isHidden && !this.props.isPopout) return a.createElement(b._30, {
                        alignItems: b.c.Center,
                        background: b.m.Alt2,
                        borderLeft: !0,
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: b._6.Center,
                        color: b.J.Base,
                        position: b._14.Relative
                    }, a.createElement(b._7, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(b.P, {
                        fontSize: b.U.Size5
                    }, Object(s.d)("Chat is hidden.", "ChatRoom"))), a.createElement(b.u, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(s.d)("Show Chat", "ChatRoom")));
                    var e = this.props.bitsConfig && this.props.firstPageLoaded && a.createElement(ie, {
                            badgeData: this.state.badgeSets,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelID: this.props.channelID,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            userID: this.props.userID
                        }),
                        t = this.state.showViewersList && a.createElement(Rt, {
                            channelLogin: this.props.channelLogin,
                            closeViewersList: this.closeViewersList
                        }),
                        n = !!this.props.authToken && !this.props.isEmbedded,
                        i = null;
                    return this.state.showChatRules && (i = a.createElement(b._7, {
                        padding: {
                            x: 2
                        }
                    }, a.createElement(Nt, {
                        chatRules: this.props.chatRules,
                        channelLogin: this.props.channelLogin
                    }))), a.createElement(b._1, {
                        "data-test-selector": "chat-room-component-layout",
                        "data-a-target": this.props.theme === u.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                        flexShrink: 1,
                        flexGrow: 1,
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        overflow: b._10.Hidden,
                        fullWidth: !0,
                        fullHeight: !0
                    }, a.createElement("section", {
                        role: "complementary",
                        "aria-labelledby": Ft
                    }, a.createElement(b._30, {
                        background: b.m.Alt2,
                        borderLeft: !0,
                        display: b.Q.Flex,
                        flexDirection: b.S.Column,
                        flexWrap: b.T.NoWrap,
                        position: b._14.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: b._10.Hidden,
                        color: b.J.Base
                    }, this.props.chatRoomHeader, e, a.createElement(Et.a, {
                        badgeSets: this.state.badgeSets,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        isEmbedded: this.props.isEmbedded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isCurrentUserStaff: this.props.isStaff,
                        onPushMessage: this.props.onPushMessage,
                        containerRef: this.setChatListElement
                    }), a.createElement(b._7, {
                        className: "chat-room__notifications",
                        position: b._14.Absolute,
                        zIndex: b._57.Default,
                        fullWidth: !0
                    }, this.props.children), i, this.props.isOwnChannel && !this.props.isEmbedded && a.createElement(y, {
                        hostedChannelLogin: this.props.hostedChannelLogin
                    }), t, a.createElement(xt.a, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        onPushMessage: this.props.onPushMessage,
                        onSendMessage: this.props.onSendMessage
                    }), a.createElement(St, {
                        activeChatters: this.props.activeChatters,
                        authToken: this.props.authToken,
                        bitsConfig: n ? this.props.bitsConfig : void 0,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hidden: this.shouldHideChatInput(),
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        isStaff: this.props.isStaff,
                        onChatCommand: this.props.onSendMessage,
                        badgeSets: this.state.badgeSets,
                        userBadges: this.props.userBadges,
                        showViewersList: this.showViewersList,
                        raidReceived: this.props.raidReceived,
                        onSendMessage: this.props.onSendMessage,
                        onInputFocus: this.onChatInputFocus,
                        containerElement: this.state.chatListElement
                    }), a.createElement(b._7, {
                        className: "chat-room__viewer-card",
                        fullHeight: !0,
                        fullWidth: !0,
                        position: b._14.Absolute,
                        "data-a-target": "chat-user-card"
                    }, a.createElement(Lt.a, {
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        onSendMessage: this.props.onSendMessage,
                        channelID: this.props.channelID
                    })))))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && this.setState({
                            badgeSets: new _.c(e.data.badges, e.data.user.broadcastBadges, e.channelLogin)
                        }), e.data && e.data.user && e.data.user.self && e.data.user.self.displayBadges) {
                        var t = {};
                        e.data.user.self.displayBadges.forEach(function(e) {
                            t[e.setID] = e.version
                        }), s.o.tmi.client.updateChannelBadges(e.channelLogin, t)
                    }
                }, t
            }(a.Component),
            Bt = Object(o.d)(Object(l.a)(At, {
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(d.a)(function(e) {
                return {
                    query: At,
                    variables: {
                        channelLogin: e.channelLogin
                    },
                    topic: Object(m.t)(e.userID),
                    type: c.PubsubMessageType.UserBitsBadgeUpdate,
                    skip: !e.userID,
                    mutator: function(t, n) {
                        if (jt.debug("Received bits-user-update-v1 pubsub update", {
                                data: n,
                                event: t
                            }), !n.badges || t.message_type === ne.Balance || null === t.data.newest_version || t.data.channel_id !== e.channelID) return n;
                        var i = n.badges.find(function(e) {
                            return e.setID === t.data.set_id && e.version === t.data.newest_version
                        });
                        return void 0 !== i && n.user.self.displayBadges && (n.user.self.displayBadges = n.user.self.displayBadges.map(function(e) {
                            return e.setID === i.setID && e.version !== i.version ? i : e
                        }), (!n.user.self.selectedBadge || i.setID === te.Bits && n.user.self.selectedBadge.setID === te.Bits) && (n.user.self.selectedBadge = i), n.user.self.selectedBadge && (i.setID !== te.Leaderboard || n.user.self.selectedBadge.setID !== te.Bits && n.user.self.selectedBadge.setID !== te.Leaderboard) || (n.user.self.selectedBadge = i)), n
                    }
                }
            }), r.f)(Ut)
    },
    ZJYd: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            if (e.type === r.a) return !1;
            return l(e) && null !== e.promotion && e.promotion.type === r.e
        }, t.e = function(e) {
            if (e.type === r.a) return !1;
            return l(e) && null !== e.promotion && (e.promotion.type === r.g || e.promotion.type === r.f)
        }, t.d = l, t.a = function(e) {
            var t = 0,
                n = 0,
                i = 0;
            return e.forEach(function(e) {
                e.cheerAmount && (t = Math.max(t, e.cheerAmount), n = n ? Math.min(n, e.cheerAmount) : e.cheerAmount, i += e.cheerAmount)
            }), {
                total: i,
                smallestCheermote: n,
                largestCheermote: t
            }
        }, t.f = function(e) {
            var t = e.messageBits,
                n = t.total,
                a = t.largestCheermote,
                r = t.smallestCheermote;
            if (n) {
                var s = {
                        cheerAboveMaxBitsPerEmote: a > o.k,
                        totalAboveBalance: n > e.balance,
                        totalBelowCheerMinimum: n < e.cheerMinimumBits,
                        totalBelowEmoteMinimum: r < e.emoteMinimumBits,
                        inputLongerThanMaxBitsMessage: e.inputValue.length > o.j,
                        inputStartsWithCommand: e.inputValue.startsWith("/")
                    },
                    l = Object.keys(s).some(function(e) {
                        return s[e]
                    });
                if (l) return i.__assign({
                    canSpend: !1
                }, s)
            }
            return {
                canSpend: !0
            }
        }, t.b = function(e) {
            var t = e.purchaseUrl;
            if (!t) return;
            e.trackBitsCardInteraction(Object(s.d)(e.bitsAmount), {
                location: e.location
            });
            var n = t.replace("{channelID}", e.channelID),
                i = window.open(n, "Twitch", "width=1024,height=600,scrollbars=yes");
            if (!i || Object(a.a)()) return e.closeAllBits && e.closeAllBits(), void e.trackBitsCardInteraction(s.a.CloseCard, {
                location: e.location
            });
            return i.focus(), i
        };
        var i = n("TToO"),
            a = n("Ouuk"),
            r = n("jxGs"),
            o = n("3iBR"),
            s = n("/LBW");

        function l(e) {
            return e.type === r.b && null !== e.promotion && !!e.promotion
        }
    },
    ZUMa: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return 0 === i(e).getDay()
        }
    },
    ZiSq: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("RH2O"),
            o = n("2KeS"),
            s = n("+xm8"),
            l = n("V5M+"),
            d = n("f2i/"),
            c = n("Aj/L"),
            u = n("ass3"),
            m = n("oSFp"),
            p = n("HW6M"),
            h = n("GiK3");
        ! function(e) {
            e[e.None = 0] = "None", e[e.Left = 1] = "Left", e[e.Middle = 2] = "Middle", e[e.Right = 3] = "Right"
        }(i || (i = {}));
        var g = n("6sO2"),
            f = n("E9Qg"),
            v = n("+Znq"),
            b = n("5s0/"),
            k = n("7vx8"),
            y = n("Odds");
        n("fbnZ");

        function _(e) {
            e.stopPropagation()
        }
        var C, S = function(e) {
                return h.createElement(y._1, {
                    display: y.Q.InlineBlock
                }, h.createElement("div", {
                    className: "viewer-card-drag-cancel",
                    onMouseDown: _
                }, e.children))
            },
            E = n("O0Qc"),
            N = n("CSlQ"),
            w = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isIgnored: !1
                    }, t.ignoreUser = function() {
                        t.props.sendMessageToTMI(Object(E.h)(t.props.targetLogin)), t.setState({
                            isIgnored: !0
                        })
                    }, t.unignoreUser = function() {
                        t.props.sendMessageToTMI(Object(E.j)(t.props.targetLogin)), t.setState({
                            isIgnored: !1
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isIgnored) {
                        var e = Object(g.d)("Unblock User", "ViewerCardIgnoreAction");
                        return h.createElement(y._47, {
                            key: "Ignore",
                            label: e,
                            direction: y._49.Top,
                            align: y._48.Right,
                            offsetX: "15%"
                        }, h.createElement(y.v, {
                            icon: y._21.Unignore,
                            ariaLabel: Object(g.d)("Unblock {displayName}", {
                                displayName: this.props.targetDisplayName
                            }, "ViewerCardIgnoreAction"),
                            onClick: this.unignoreUser,
                            overlay: !0
                        }))
                    }
                    var t = Object(g.d)("Block User", "ViewerCardIgnoreAction");
                    return h.createElement(y._47, {
                        key: "Ignore",
                        label: t,
                        direction: y._49.Top,
                        align: y._48.Right,
                        offsetX: "15%"
                    }, h.createElement(y.v, {
                        icon: y._21.Ignore,
                        ariaLabel: Object(g.d)("Block {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.ignoreUser,
                        overlay: !0
                    }))
                }, t = a.__decorate([Object(N.d)("ViewerCardIgnoreAction")], t)
            }(h.Component),
            D = n("oIkB"),
            O = n("Dc1A"),
            I = n("1Eny"),
            T = n("zVM8"),
            M = "10 minutes",
            R = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(D.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t.onTimeoutClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(D.a)({
                            channelID: i,
                            bannedUserLogin: a,
                            expiresIn: M
                        }))
                    }, t.onUnbanClick = function() {
                        var e = t.props,
                            n = e.unbanUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(D.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return h.createElement(y._7, {
                        display: y.Q.InlineFlex
                    }, this.getContent())
                }, t.prototype.getContent = function() {
                    return this.props.data.loading || this.props.data.error ? [this.renderBanAction(!0), this.renderTimeoutAction(!0)] : this.props.data.chatRoomBanStatus ? this.props.data.chatRoomBanStatus.isPermanent ? [this.renderUnbanAction(), this.renderTimeoutAction(!0)] : [this.renderBanAction(), this.renderUntimeoutAction()] : [this.renderBanAction(), this.renderTimeoutAction()]
                }, t.prototype.renderTimeoutAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(g.d)("Timeout User", "ViewerCardModActions");
                    return h.createElement(y._7, {
                        key: "Timeout",
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._47, {
                        label: t,
                        direction: y._49.Top,
                        align: y._48.Left,
                        offsetX: "20%"
                    }, h.createElement(y.v, {
                        icon: y._21.Timeout,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onTimeoutClick
                    })))
                }, t.prototype.renderUntimeoutAction = function() {
                    var e = Object(g.d)("Untimeout User", "ViewerCardModActions");
                    return h.createElement(y._7, {
                        key: "Untimeout",
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._47, {
                        label: e,
                        direction: y._49.Top,
                        align: y._48.Left,
                        offsetX: "20%"
                    }, h.createElement(y.v, {
                        icon: y._21.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t.prototype.renderBanAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(g.d)("Ban User", "ViewerCardModActions");
                    return h.createElement(y._7, {
                        key: "Ban",
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._47, {
                        label: t,
                        direction: y._49.Top,
                        align: y._48.Left,
                        offsetX: "20%"
                    }, h.createElement(y.v, {
                        icon: y._21.Ban,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onBanClick
                    })))
                }, t.prototype.renderUnbanAction = function() {
                    var e = Object(g.d)("Unban User", "ViewerCardModActions");
                    return h.createElement(y._7, {
                        key: "Unban",
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._47, {
                        label: e,
                        direction: y._49.Top,
                        align: y._48.Left,
                        offsetX: "20%"
                    }, h.createElement(y.v, {
                        icon: y._21.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t = a.__decorate([Object(N.d)("ViewerCardModActions"), Object(k.a)(T, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.userID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(k.a)(O, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var i = e.readQuery({
                                        query: T,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        }
                                    });
                                    i && (t && t.data && (i.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: T,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        },
                                        data: i
                                    }))
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(k.a)(I, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                        query: T,
                                        variables: {
                                            targetUserID: t.userID,
                                            channelID: t.channelID
                                        }
                                    });
                                    if (n) {
                                        var i = a.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                        e.writeQuery({
                                            query: T,
                                            variables: {
                                                targetUserID: t.userID,
                                                channelID: t.channelID
                                            },
                                            data: i
                                        })
                                    }
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(h.Component),
            x = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.modUser = function() {
                        n.props.sendMessageToTMI(Object(E.i)(n.props.targetLogin)), n.setState({
                            isModerator: !0
                        })
                    }, n.unmodUser = function() {
                        n.props.sendMessageToTMI(Object(E.k)(n.props.targetLogin)), n.setState({
                            isModerator: !1
                        })
                    }, n.state = {
                        isModerator: !1
                    }, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isModerator) {
                        var e = Object(g.d)("Unmod User", "ViewerCardOwnerActions");
                        return h.createElement(y._7, {
                            key: "OP",
                            display: y.Q.InlineFlex,
                            padding: {
                                right: 1
                            }
                        }, h.createElement(y._47, {
                            label: e,
                            direction: y._49.Top,
                            align: y._48.Center
                        }, h.createElement(y.v, {
                            icon: y._21.FollowCheck,
                            ariaLabel: e,
                            onClick: this.unmodUser
                        })))
                    }
                    e = Object(g.d)("Mod User", "ViewerCardOwnerActions");
                    return h.createElement(y._7, {
                        key: "OP",
                        display: y.Q.InlineFlex,
                        padding: {
                            right: 1
                        }
                    }, h.createElement(y._47, {
                        label: e,
                        direction: y._49.Top,
                        align: y._48.Center
                    }, h.createElement(y.v, {
                        icon: y._21.OP,
                        ariaLabel: e,
                        onClick: this.modUser
                    })))
                }, t = a.__decorate([Object(N.d)("ViewerCardOwnerActions")], t)
            }(h.Component),
            L = n("O9wU"),
            A = n("O1nh"),
            F = n("mw/a"),
            j = n("daN3"),
            U = n("YH6m"),
            B = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onGiftSelect = function() {
                        t.props.onGiftSelect && t.props.onGiftSelect()
                    }, t.onSelectTierTab = function(e) {
                        t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return h.createElement(y._7, null, h.createElement(y._7, {
                        display: y.Q.Flex,
                        justifyContent: y._6.Between,
                        alignItems: y.c.Center,
                        fullWidth: !0
                    }, h.createElement(y.P, {
                        bold: !0,
                        type: y._44.H5
                    }, Object(g.d)("Choose A Gift Subscription", "GiftTierTabs")), h.createElement(y.u, {
                        type: y.A.Text,
                        icon: y._21.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, h.createElement(y._7, {
                        alignItems: y.c.Center,
                        display: y.Q.InlineFlex
                    }, h.createElement(y.P, null, Object(g.d)("Back", "GiftTierTabs"))))), h.createElement(U.a, {
                        canPrimeSubscribe: !1,
                        channelDisplayName: this.props.channelDisplayName,
                        giftRecipient: this.props.giftRecipient,
                        isGift: !0,
                        isSubscribed: !1,
                        onGiftSelect: this.onGiftSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        userHasPrime: !1
                    }))
                }, t
            }(h.Component),
            P = n("pQNb"),
            V = n("CwIZ"),
            H = n("m4HT"),
            W = (n("VSa1"), n("BBNG"));
        ! function(e) {
            e[e.ActionsPage = 0] = "ActionsPage", e[e.SubGiftSelectPage = 1] = "SubGiftSelectPage"
        }(C || (C = {}));
        var G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: C.ActionsPage
                    }, t.getContent = function() {
                        if (t.props.data.loading || t.props.data.error) return t.renderHideButton();
                        var e = {
                                backgroundImage: "url(" + (t.props.data.targetUser.bannerImageURL || f) + ")"
                            },
                            n = t.state.currentPage === C.ActionsPage ? t.renderActions() : t.renderSubGiftSelect();
                        return h.createElement(y._30, {
                            border: !0,
                            className: "viewer-card",
                            elevation: 1,
                            "data-a-target": "viewer-card"
                        }, h.createElement(y._2, {
                            background: y.m.AccentAlt2
                        }, h.createElement("div", {
                            className: "viewer-card__background",
                            style: e
                        }, h.createElement(y._7, {
                            display: y.Q.Flex,
                            flexDirection: y.S.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            className: "viewer-card__overlay"
                        }, h.createElement(y._30, {
                            alignItems: y.c.Start,
                            background: y.m.Overlay,
                            className: "viewer-card__banner",
                            display: y.Q.Flex,
                            flexDirection: y.S.Row,
                            flexGrow: 1,
                            fullWidth: !0,
                            justifyContent: y._6.Start,
                            padding: 1,
                            position: y._14.Relative,
                            textAlign: y._40.Center
                        }, h.createElement(S, null, h.createElement(y.l, {
                            src: t.props.data.targetUser.profileImageURL,
                            size: 50,
                            alt: t.props.data.targetUser.displayName
                        })), h.createElement(S, null, h.createElement(y._7, {
                            alignItems: y.c.Center,
                            margin: 1,
                            className: "viewer-card__display-name",
                            ellipsis: !0
                        }, h.createElement(y.P, {
                            color: y.J.Overlay,
                            type: y._44.H4
                        }, h.createElement(y.N, {
                            hoverUnderlineNone: !0,
                            targetBlank: !0,
                            to: "/" + t.props.targetLogin,
                            type: y.O.Inherit
                        }, t.props.data.targetUser.displayName)))), h.createElement(S, null, t.renderHideButton()), h.createElement(S, null, t.renderIgnoreButton()))))), n)
                    }, t.toggleGiftPage = function() {
                        var e = t.state.currentPage === C.ActionsPage ? C.SubGiftSelectPage : C.ActionsPage;
                        e === C.SubGiftSelectPage && t.trackGiftEvent(), t.setState({
                            currentPage: e
                        })
                    }, t.onWhisperButtonClick = function() {
                        t.props.hideViewerCard()
                    }, t.handleReportUserClick = function() {
                        if (!t.props.isLoggedIn) return t.props.login();
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: t.reportContentTypeFromSourceType(t.props.sourceType),
                                targetUserID: t.props.data.targetUser.id,
                                contentID: t.props.sourceID,
                                extra: JSON.stringify({
                                    channel_id: t.props.channelID.toString()
                                }),
                                additionalTrackingID: t.props.channelID
                            },
                            title: Object(g.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.data.targetUser.displayName
                            }, "ReportUserModalTitle")
                        })
                    }, t.trackBuyGiftSubEvent = function(e) {
                        Object(V.b)(a.__assign({}, e, {
                            action: V.a.BuyGiftSub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        }))
                    }, t.trackGiftEvent = function() {
                        Object(V.b)({
                            action: V.a.GiftASub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.error ? null : this.getContent()
                }, t.prototype.renderIgnoreButton = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : h.createElement(y._7, {
                        key: "Ignore",
                        position: y._14.Absolute,
                        attachRight: !0,
                        attachBottom: !0,
                        margin: {
                            bottom: .5,
                            right: .5
                        }
                    }, h.createElement(w, {
                        targetDisplayName: this.props.data.targetUser.displayName,
                        targetLogin: this.props.targetLogin,
                        sendMessageToTMI: this.props.sendMessageToTMI
                    }))
                }, t.prototype.renderHideButton = function() {
                    return h.createElement(y._7, {
                        className: "viewer-card__hide",
                        position: y._14.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        margin: {
                            top: .5,
                            right: .5
                        },
                        "data-a-target": "viewer-card-close-button"
                    }, h.createElement(y.v, {
                        icon: y._21.Close,
                        onClick: this.props.hideViewerCard,
                        ariaLabel: Object(g.d)("Hide", "ViewerCard"),
                        overlay: !0
                    }))
                }, t.prototype.renderActions = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : h.createElement(y._30, {
                        className: "viewer-card__actions",
                        "data-test-selector": "viewer-card-actions",
                        attachBottom: !0
                    }, this.renderSocialActions(), this.renderChatActions())
                }, t.prototype.renderSocialActions = function() {
                    return h.createElement(y._30, {
                        display: y.Q.Flex,
                        background: y.m.Base,
                        flexDirection: y.S.Row,
                        fullWidth: !0,
                        padding: {
                            y: 1,
                            left: 1,
                            right: .5
                        }
                    }, h.createElement(y._7, {
                        margin: {
                            right: .5
                        }
                    }, h.createElement(S, null, h.createElement(A.a, {
                        channelID: this.props.data.targetUser.id
                    }))), h.createElement(y._7, {
                        margin: {
                            right: .5
                        }
                    }, h.createElement(S, null, this.renderWhisperButton())), h.createElement(y._7, {
                        margin: {
                            right: .5
                        }
                    }, h.createElement(S, null, this.renderGiftSubscriptionButton())), h.createElement(y._7, {
                        flexGrow: 1,
                        textAlign: y._40.Right
                    }, h.createElement(S, null, h.createElement(v.a, {
                        key: "MoreOptionsButton"
                    }, h.createElement(y.v, {
                        ariaLabel: Object(g.d)("More options", "ViewerCard"),
                        icon: y._21.More,
                        "data-a-target": "viewer-card-more-button"
                    }), h.createElement(y.p, {
                        direction: y.q.BottomRight,
                        "data-a-target": "viewer-card-more-balloon"
                    }, h.createElement(y._7, {
                        padding: {
                            y: 1
                        }
                    }, h.createElement(y._5, {
                        onClick: this.handleReportUserClick,
                        "data-a-target": "viewer-card-report-button"
                    }, h.createElement(y._7, {
                        padding: {
                            x: 1
                        }
                    }, Object(g.d)("Report {user}", {
                        user: this.props.targetLogin
                    }, "ViewerCard")))))))))
                }, t.prototype.renderWhisperButton = function() {
                    if (!this.props.data.currentUser || !this.props.data.targetUser) return null;
                    var e = Object(H.a)(this.props.data.currentUser.id, this.props.data.targetUser.id);
                    return h.createElement(b.a, {
                        onClick: this.onWhisperButtonClick,
                        isPopout: this.props.isPopout,
                        threadID: e
                    })
                }, t.prototype.renderGiftSubscriptionButton = function() {
                    return !this.props.data.channelUser || !this.props.data.channelUser.subscriptionProducts || this.props.data.channelUser.subscriptionProducts.length < 1 ? null : h.createElement(j.a, {
                        onClick: this.toggleGiftPage,
                        subProductId: this.props.data.channelUser.subscriptionProducts[0].id,
                        giftRecipient: this.props.targetLogin
                    })
                }, t.prototype.renderSubGiftSelect = function() {
                    return h.createElement(y._7, null, h.createElement(P.a, {
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        isGift: !0
                    }), h.createElement(y._30, {
                        background: y.m.Base,
                        attachBottom: !0,
                        display: y.Q.Flex,
                        flexDirection: y.S.Row,
                        justifyContent: y._6.Between,
                        fullWidth: !0,
                        flexGrow: 0,
                        padding: 2
                    }, h.createElement(B, {
                        onBack: this.toggleGiftPage,
                        channelDisplayName: this.props.data.channelUser.displayName,
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        giftRecipient: this.props.data.targetUser.login,
                        reportSubMenuAction: this.trackBuyGiftSubEvent
                    })))
                }, t.prototype.renderChatActions = function() {
                    var e = [];
                    return this.isModeratorOrHigher() && e.push(h.createElement(R, {
                        key: "ModActions",
                        channelID: this.props.data.channelUser.id,
                        userID: this.props.data.targetUser.id,
                        userLogin: this.props.targetLogin
                    })), this.isOwnerOrHigher() && e.push(h.createElement(x, {
                        key: "OwnerActions",
                        sendMessageToTMI: this.props.sendMessageToTMI,
                        targetLogin: this.props.targetLogin
                    })), e.length ? h.createElement(y._30, {
                        display: y.Q.Flex,
                        background: y.m.Alt2,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, h.createElement(S, null, e)) : null
                }, t.prototype.isOwnerOrHigher = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && (e.currentUser.roles.isGlobalMod || e.currentUser.roles.isSiteAdmin || e.currentUser.roles.isStaff || this.isOwner())
                }, t.prototype.isModeratorOrHigher = function() {
                    return this.isOwnerOrHigher() || this.props.data.channelUser.self && this.props.data.channelUser.self.isModerator
                }, t.prototype.isOwner = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && e.currentUser.id === e.channelUser.id
                }, t.prototype.reportContentTypeFromSourceType = function(e) {
                    switch (e) {
                        case L.a.chat_message:
                            return F.a.Chat;
                        case L.a.room_message:
                            return F.a.Room;
                        case L.a.recent_raids:
                            return F.a.Raid;
                        case L.a.viewer_list:
                        default:
                            return F.a.User
                    }
                }, t = a.__decorate([Object(N.d)("ViewerCard"), Object(k.a)(W, {
                    options: function(e) {
                        return {
                            variables: {
                                targetLogin: e.targetLogin,
                                channelID: e.channelID
                            }
                        }
                    }
                })], t)
            }(h.Component),
            Q = (n("PqoY"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        dragging: !1
                    }, t.onDragStart = function(e) {
                        t.cardContainerRef && t.layerRef && e.nativeEvent.which === i.Left && (t.layerRef.addEventListener("mousemove", t.onDrag), window.addEventListener("mouseup", t.onDragEnd), window.addEventListener("selectstart", t.cancelSelection), t.setState({
                            dragging: !0
                        }), t.initCardX = t.cardContainerRef.offsetLeft, t.initCardY = t.cardContainerRef.offsetTop, t.initMouseX = e.clientX, t.initMouseY = e.clientY)
                    }, t.onDrag = function(e) {
                        t.nextTop = t.initCardY + e.clientY - t.initMouseY, t.nextLeft = t.initCardX + e.clientX - t.initMouseX, t.rafHandle || (t.rafHandle = requestAnimationFrame(function() {
                            t.rafHandle = 0, t.cardContainerRef && (t.cardContainerRef.style.top = t.nextTop + "px", t.cardContainerRef.style.left = t.nextLeft + "px")
                        }))
                    }, t.onDragEnd = function() {
                        t.removeDragListeners(), t.setState({
                            dragging: !1
                        })
                    }, t.removeDragListeners = function() {
                        t.layerRef && t.layerRef.removeEventListener("mousemove", t.onDrag), window.removeEventListener("mouseup", t.onDragEnd), window.removeEventListener("selectstart", t.cancelSelection)
                    }, t.cancelSelection = function(e) {
                        e.preventDefault()
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.hideViewerCard(), this.rafHandle && cancelAnimationFrame(this.rafHandle), this.removeDragListeners()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.viewerCardOptions && e.viewerCardOptions && (e.viewerCardOptions.targetLogin === this.props.viewerCardOptions.targetLogin && e.viewerCardOptions.initialTopOffset === this.props.viewerCardOptions.initialTopOffset || this.cardContainerRef && (this.cardContainerRef.style.left = "0px"))
                }, t.prototype.render = function() {
                    var e = this,
                        t = {
                            "viewer-card-layer": !0,
                            "viewer-card-layer--dragging": this.state.dragging
                        },
                        n = {
                            "viewer-card-layer__draggable": !0,
                            "viewer-card-layer__draggable--dragging": this.state.dragging
                        },
                        i = null;
                    if (this.props.viewerCardOptions) {
                        var a = {};
                        if (this.layerRef) {
                            var r = this.layerRef.getBoundingClientRect();
                            a = {
                                top: Math.max(this.props.viewerCardOptions.initialTopOffset - r.top, 0) + "px"
                            }
                        }
                        i = h.createElement(y._1, {
                            className: p(n),
                            position: y._14.Absolute
                        }, h.createElement("div", {
                            onMouseDown: this.onDragStart,
                            ref: function(t) {
                                e.cardContainerRef = t
                            },
                            style: a,
                            "data-a-target": "viewer-card-positioner"
                        }, h.createElement(G, {
                            channelID: this.props.channelID,
                            hideViewerCard: this.props.hideViewerCard,
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            sendMessageToTMI: this.props.onSendMessage,
                            showReportUserModal: this.props.showReportUserModal,
                            sourceID: this.props.viewerCardOptions.sourceID,
                            sourceType: this.props.viewerCardOptions.sourceType,
                            targetLogin: this.props.viewerCardOptions.targetLogin,
                            isLoggedIn: this.props.isLoggedIn,
                            login: this.props.login
                        })))
                    }
                    return h.createElement(y._1, {
                        className: p(t),
                        fullHeight: !0,
                        fullWidth: !0,
                        position: y._14.Relative,
                        zIndex: y._57.Default
                    }, h.createElement("div", {
                        onMouseUp: this.onDragEnd,
                        ref: function(t) {
                            e.layerRef = t
                        }
                    }, i))
                }, t
            }(h.Component));
        var q = Object(r.b)(function(e) {
            return {
                viewerCardOptions: e.viewerCard.viewerCardOptions,
                isLoggedIn: Object(c.d)(e)
            }
        }, function(e) {
            return Object(o.b)({
                hideViewerCard: u.c,
                login: function() {
                    return Object(d.f)(s.a.ViewerCard)
                },
                showReportUserModal: function(e) {
                    var t = a.__rest(e, []);
                    return Object(l.d)(m.a, t)
                }
            }, e)
        })(Q);
        n.d(t, "a", function() {
            return q
        })
    },
    ZoRy: function(e, t) {},
    a0ve: function(e, t) {},
    a4C9: function(e, t) {},
    a7Cs: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = Number(t);
            return n.setFullYear(a), n
        }
    },
    aBed: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return y
        });
        var i = n("TToO"),
            a = n("HW6M"),
            r = (n.n(a), n("OAwv")),
            o = (n.n(r), n("GiK3")),
            s = (n.n(o), n("F8kA")),
            l = n("6sO2"),
            d = n("iOr9"),
            c = n("vKFS"),
            u = n("SZoP"),
            m = n("mi6k"),
            p = n("CSlQ"),
            h = n("81qH"),
            g = n("Odds"),
            f = n("a0ve"),
            v = (n.n(f), "video-view-count"),
            b = "video-length",
            k = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hovered: !1,
                        didAnimatedPreviewLoad: !1,
                        didAnimatedPreviewFailToLoad: !1
                    }, t.renderVariation = function() {
                        return o.createElement(c.a, {
                            context: t.props.context,
                            title: t.props.video.title,
                            linkTo: {
                                pathname: "/videos/" + t.props.video.id,
                                state: t.getLinkState(),
                                search: t.generateSearchString()
                            },
                            thumbnailImageProps: {
                                src: t.props.video.previewThumbnailURL,
                                alt: t.props.video.title
                            },
                            channelLogin: t.props.video.owner && t.props.video.owner.login || "",
                            channelLoginLinkTo: {
                                pathname: "/" + (t.props.video.owner ? t.props.video.owner.login : ""),
                                state: t.getLinkState()
                            },
                            channelImageProps: {
                                src: t.props.video.owner && t.props.video.owner.profileImageURL || "",
                                alt: t.props.video.owner ? t.props.video.owner.displayName : ""
                            },
                            gameTitle: t.props.video.game && t.props.video.game.name || "",
                            gameTitleLinkTo: {
                                pathname: "/directory/game/" + encodeURI(t.props.video.game && t.props.video.game.name || ""),
                                state: t.getLinkState()
                            },
                            gameBoxArtImageProps: {
                                src: t.props.video.game && t.props.video.game.boxArtURL || "",
                                alt: t.props.video.game ? t.props.video.game.displayName : ""
                            },
                            datePublished: t.props.video.publishedAt,
                            viewCount: t.props.video.viewCount,
                            durationInSeconds: t.props.video.lengthSeconds,
                            animatedImageProps: t.props.video.animatedPreviewURL ? {
                                src: t.props.video.animatedPreviewURL,
                                alt: ""
                            } : void 0,
                            watchedProgressPercent: t.getVideoPreviousWatchPercentage() || 0
                        })
                    }, t.renderFallback = function() {
                        var e = null,
                            n = t.getVideoPreviousWatchPercentage();
                        return null !== n && (e = o.createElement(g._7, {
                            position: g._14.Absolute,
                            attachBottom: !0,
                            fullWidth: !0
                        }, o.createElement(g._17, {
                            size: g._18.Small,
                            value: n,
                            mask: !0
                        }))), o.createElement("div", i.__assign({
                            onClick: t.onClickHandler,
                            onMouseEnter: t.onMouseEnterHandler,
                            onMouseLeave: t.onMouseLeaveHandler
                        }, Object(g._58)(t.props)), o.createElement(g.B, null, o.createElement(g._7, {
                            fullWidth: !0
                        }, o.createElement(g.j, {
                            overflow: !0
                        }, o.createElement("div", null, o.createElement(g._30, {
                            display: g.Q.InlineFlex,
                            position: g._14.Absolute,
                            attachTop: !0,
                            attachLeft: !0,
                            margin: .5,
                            zIndex: g._57.Default,
                            fontSize: g.U.Size6,
                            background: g.m.Overlay,
                            color: g.J.Overlay,
                            className: "video-preview-card__preview-overlay-stat"
                        }, o.createElement(g._29, {
                            "data-test-selector": v,
                            icon: g._21.GlyphViews,
                            label: Object(l.d)("views", "VideoPreviewCard"),
                            value: Object(l.f)(t.props.video.viewCount)
                        })), o.createElement(g._30, {
                            display: g.Q.InlineFlex,
                            position: g._14.Absolute,
                            attachTop: !0,
                            attachRight: !0,
                            margin: .5,
                            zIndex: g._57.Default,
                            fontSize: g.U.Size6,
                            background: g.m.Overlay,
                            color: g.J.Overlay,
                            className: "video-preview-card__preview-overlay-stat"
                        }, o.createElement(g._29, {
                            "data-test-selector": b,
                            icon: g._21.GlyphLength,
                            label: Object(l.d)("length", "VideoPreviewCard"),
                            value: Object(m.a)(t.props.video.lengthSeconds)
                        })), t.videoPreviewImage(), e))), o.createElement(g.C, null, o.createElement(g._7, {
                            display: g.Q.Flex,
                            flexDirection: g.S.Row,
                            flexWrap: g.T.NoWrap,
                            padding: {
                                top: .5
                            }
                        }, t.props.hideGameArt ? null : t.gameBoxArt(), t.videoMetaData()))))
                    }, t.onClickHandler = function() {
                        t.props.onClick && t.props.onClick(t.props.tracking.content_index)
                    }, t.onMouseEnterHandler = function() {
                        t.setState({
                            hovered: !0
                        })
                    }, t.onMouseLeaveHandler = function() {
                        t.setState({
                            hovered: !1
                        })
                    }, t.onPreviewImageLoad = function(e) {
                        t.props.latencyTracking.reportInteractive(), e.currentTarget.src === t.props.video.animatedPreviewURL && t.setState({
                            didAnimatedPreviewLoad: !0
                        })
                    }, t.onPreviewImageLoadError = function(e) {
                        e.currentTarget.src === t.props.video.animatedPreviewURL && t.setState({
                            didAnimatedPreviewFailToLoad: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.overrideImageInteractivity && this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = {
                        assignments: {
                            fallback: this.renderFallback,
                            variation: this.renderVariation
                        },
                        loader: function() {
                            return o.createElement(h.VideoPreviewCardPlaceholder, null)
                        },
                        name: "TWILIGHT_VIDEO_CARD_UPDATES"
                    };
                    return o.createElement(d.a, i.__assign({}, e))
                }, t.prototype.generateSearchString = function() {
                    var e = {};
                    this.props.collectionID && (e.collection = this.props.collectionID);
                    var t = r.stringify(e);
                    return t ? "?" + t : ""
                }, t.prototype.videoPreviewImage = function() {
                    var e = this.state.hovered && !this.state.didAnimatedPreviewFailToLoad ? this.props.video.animatedPreviewURL : this.props.video.previewThumbnailURL,
                        t = a("video-preview-card__image-wrapper", {
                            "video-preview-card__image-wrapper--watched": null !== this.getVideoPreviousWatchPercentage() && !this.state.hovered
                        }),
                        n = a("video-preview-card__preview-image", {
                            "video-preview-card__preview-image--animated": this.state.hovered && this.state.didAnimatedPreviewLoad
                        });
                    return o.createElement(g.j, {
                        overflow: !0
                    }, o.createElement(s.a, {
                        to: {
                            pathname: "/videos/" + this.props.video.id,
                            state: this.getLinkState(),
                            search: this.generateSearchString()
                        },
                        title: this.props.video.title,
                        "data-a-target": "video-preview-card-image-link",
                        "data-test-selector": "preview-image-link"
                    }, o.createElement("div", {
                        className: t,
                        "data-test-selector": "preview-image-wrapper"
                    }, o.createElement(g._1, {
                        flexShrink: 0
                    }, o.createElement("figure", null, o.createElement(g.j, {
                        ratio: g.k.Aspect16x9
                    }, o.createElement("img", {
                        alt: this.props.video.title,
                        className: n,
                        "data-test-selector": "preview-image",
                        onLoad: this.onPreviewImageLoad,
                        onError: this.onPreviewImageLoadError,
                        src: e || ""
                    })))))))
                }, t.prototype.gameBoxArt = function() {
                    if (!this.showGameArt() || !this.props.video.game) return null;
                    var e = this.props.video.game,
                        t = {
                            pathname: "/directory/game/" + encodeURI(e.name),
                            state: this.getLinkState()
                        },
                        n = a("video-preview-card__image-wrapper", {
                            "video-preview-card__image-wrapper--watched": null !== this.getVideoPreviousWatchPercentage() && !this.state.hovered
                        });
                    return o.createElement(g._7, {
                        "data-test-selector": "game-box-art",
                        display: g.Q.InlineFlex,
                        flexShrink: 0,
                        padding: {
                            bottom: .5
                        }
                    }, o.createElement(s.a, {
                        to: t,
                        title: e.name,
                        "data-a-target": "video-preview-card-boxart-link"
                    }, o.createElement(g._1, {
                        margin: {
                            right: 1
                        }
                    }, o.createElement("figure", {
                        className: "video-preview-card__game-art"
                    }, o.createElement(g._47, {
                        display: g.Q.Block,
                        direction: g._49.Bottom,
                        label: e.name
                    }, o.createElement("div", {
                        className: n,
                        "data-test-selector": "game-box-art-wrapper"
                    }, o.createElement(g.D, {
                        aspect: g.k.BoxArt,
                        alt: e.name,
                        src: e.boxArtURL || l.a.defaultBoxArtURL
                    })))))))
                }, t.prototype.videoMetaData = function() {
                    var e = Object(l.c)(new Date(this.props.video.publishedAt), "medium"),
                        t = null;
                    if (this.props.video.owner) {
                        var n = {
                            pathname: "/" + this.props.video.owner.login,
                            state: this.getLinkState()
                        };
                        t = o.createElement(s.a, {
                            to: n,
                            className: "video-preview-card__owner-display-name",
                            "data-a-target": "video-preview-card-channel-link",
                            "data-test-selector": "video-owner",
                            title: Object(u.a)(this.props.video.owner.login, this.props.video.owner.displayName, !0)
                        }, Object(u.a)(this.props.video.owner.login, this.props.video.owner.displayName))
                    }
                    return o.createElement(g._7, {
                        display: g.Q.Flex,
                        flexDirection: g.S.Column,
                        overflow: g._10.Hidden
                    }, o.createElement(g._7, {
                        "data-test-selector": "video-title",
                        overflow: g._10.Hidden,
                        position: g._14.Relative
                    }, o.createElement(g.P, {
                        color: g.J.Base,
                        fontSize: g.U.Size5,
                        lineHeight: g._8.Heading
                    }, o.createElement(s.a, {
                        className: "video-preview-card__video-title",
                        to: {
                            pathname: "/videos/" + this.props.video.id,
                            state: this.getLinkState(),
                            search: this.generateSearchString()
                        },
                        title: this.props.video.title,
                        "data-a-target": "video-preview-card-title-link"
                    }, this.props.video.title))), o.createElement(g._7, {
                        flexShrink: 0,
                        flexGrow: 0,
                        ellipsis: !0
                    }, o.createElement(g.P, {
                        type: g._44.Span,
                        color: g.J.Alt2,
                        ellipsis: !0,
                        title: this.formatTitle(e)
                    }, e, o.createElement(g._1, {
                        padding: {
                            x: .5
                        }
                    }, o.createElement("span", null, "·")), t)))
                }, t.prototype.getVideoPreviousWatchPercentage = function() {
                    return this.props.video && this.props.video.self && this.props.video.self.viewingHistory && null !== this.props.video.self.viewingHistory.position ? 0 === this.props.video.lengthSeconds || 0 === this.props.video.self.viewingHistory.position ? null : this.props.video.self.viewingHistory.position / this.props.video.lengthSeconds * 100 : null
                }, t.prototype.showGameArt = function() {
                    return !this.props.hideGameArt && this.props.video.game && "" !== this.props.video.game.name
                }, t.prototype.formatTitle = function(e) {
                    if (this.props.video.owner) return e + " · " + Object(u.a)(this.props.video.owner.login, this.props.video.owner.displayName, !0)
                }, t.prototype.getLinkState = function() {
                    return {
                        content: this.props.tracking.content,
                        content_index: this.props.tracking.content_index,
                        medium: this.props.tracking.medium
                    }
                }, t
            }(o.Component),
            y = Object(p.d)("VideoPreviewCard")(k)
    },
    aHtT: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function() {
            var e = Array.prototype.slice.call(arguments).map(function(e) {
                    return i(e)
                }),
                t = Math.min.apply(null, e);
            return new Date(t)
        }
    },
    aSvS: function(e, t, n) {
        "use strict";
        var i, a;
        n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return a
            }),
            function(e) {
                e.DismissToken = "token_dismissed", e.RedeemToken = "token_redeemed", e.RequestEligibility = "eligibility_requested", e.RequestToken = "token_requested"
            }(i || (i = {})),
            function(e) {
                e.Click = "clicked_manage_in_dashboards", e.Dismiss = "dismissed"
            }(a || (a = {}))
    },
    aUOx: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return {
                type: i.b.Info,
                id: Object(a.a)("info"),
                message: e
            }
        };
        var i = n("qkCi"),
            a = n("INp2")
    },
    annQ: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GetBitsButton_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 748
            }
        };
        i.loc.source = {
            body: '# Documentation about how to use GraphQL is located in the Data Access Guide:\n# https://git-aws.internal.justin.tv/pages/twilight/twilight-docs/docs/guides/data-access.html\n# Additionally use the GraphQL explorer (https://api.twitch.tv/gql/explore) to browse\n# available GraphQL data and construct your query.\n#import "twilight/features/bits/models/bits-offers-fragment.gql"\n#import "twilight/features/chat/models/cheer-fragment.gql"\nquery GetBitsButton_Bits($isLoggedIn: Boolean! $withChannel: Boolean! $login: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $login) @include(if: $withChannel) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};

        function r(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(r(n("OcEY").definitions)), i.definitions = i.definitions.concat(r(n("576g").definitions)), e.exports = i
    },
    aqNN: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Bits_BuyCard_Offers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 440
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-offers-fragment.gql"\nquery Bits_BuyCard_Offers($withChannel: Boolean! $isLoggedIn: Boolean! $channelLogin: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $channelLogin) @include(if: $withChannel) {\nid\ndisplayName\ncheer {\nid\nsettings {\ncheerMinimumBits\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("OcEY").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    ass3: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), t.c = function() {
            return {
                type: i
            }
        }, t.d = function(e, t, n, i) {
            void 0 === i && (i = 0);
            return {
                type: a,
                viewerCardOptions: {
                    initialTopOffset: i,
                    sourceID: n,
                    sourceType: t,
                    targetLogin: e
                }
            }
        };
        var i = "viewer-card.VIEWER_CARD_HIDDEN",
            a = "viewer-card.VIEWER_CARD_SHOWN"
    },
    b7g8: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e).getFullYear();
            return t % 400 == 0 || t % 4 == 0 && t % 100 != 0
        }
    },
    bL99: function(e, t) {},
    bQ8d: function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (void 0 === t && (t = 0), t > e) {
                var n = t;
                t = e, e = n
            }
            return t + Math.floor(Math.random() * (e - t + 1))
        }
        t.a = i, t.b = function(e) {
            return e[i(e.length - 1)]
        }, t.c = function(e, t) {
            var n = 0,
                i = [];
            for (; n < e;) i.push(t(n)), n += 1;
            return i
        }
    },
    balU: function(e, t, n) {
        var i = n("xA5w"),
            a = n("Mdww");
        e.exports = function(e, t) {
            var n = i(e),
                r = Number(t),
                o = n.getFullYear(),
                s = n.getDate(),
                l = new Date(0);
            l.setFullYear(o, r, 15), l.setHours(0, 0, 0, 0);
            var d = a(l);
            return n.setMonth(r, Math.min(s, d)), n
        }
    },
    bbdo: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return t.setMinutes(59, 59, 999), t
        }
    },
    bgpf: function(e, t, n) {
        "use strict";
        var i, a, r;
        n.d(t, "c", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.NewChatter = "NEW_CHATTER"
            }(i || (i = {})),
            function(e) {
                e.Available = "AVAILABLE", e.Dismissed = "DISMISSED", e.Eligible = "ELIGIBLE", e.Redeemed = "REDEEMED"
            }(a || (a = {})),
            function(e) {
                e.TokenNotAvailable = "TOKEN_NOT_AVAILABLE", e.TokenNotFound = "TOKEN_NOT_FOUND", e.UserBanned = "USER_CHAT_BANNED", e.UserNotFollowing = "FOLLOWER_ONLY_MODE_ENFORCEMENT_FAILED", e.UserNotSubbed = "SUB_ONLY_MODE_ENFORCEMENT_FAILED", e.UserTimedOut = "USER_CHAT_TIMED_OUT"
            }(r || (r = {}))
    },
    bkpq: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = [],
                n = {};
            return e.forEach(function(e) {
                var s, l, d, c = e.tiers.map(function(e) {
                    return o(e)
                });
                "Cheer" === e.prefix && c.push((s = ["DARK", "LIGHT"], l = ["static", "animated"], d = [], [1, 1.5, 2, 3, 4].forEach(function(e) {
                    s.forEach(function(t) {
                        l.forEach(function(n) {
                            d.push({
                                url: r.a + "/cheer/" + t.toLowerCase() + "/" + n + "/100000/" + e + "." + ("static" === n ? "png" : "gif"),
                                isAnimated: "animated" === n,
                                theme: t,
                                dpiScale: e
                            })
                        })
                    })
                }), o({
                    id: "Cheer:100000",
                    bits: 1e5,
                    color: r.f[a.a.Yellow],
                    images: d
                }))), c.sort(function(e, t) {
                    return t.bits - e.bits
                });
                var u = i.__assign({}, e, {
                    indexedTiers: new Map(c.map(function(e) {
                        return [e.bits, e]
                    })),
                    orderedTiers: c
                });
                t.push(u), n[u.prefix.toLowerCase()] = u
            }), {
                indexedActions: n,
                orderedActions: t
            }
        }, t.b = function(e, t) {
            return {
                cursor: "" + e.rank,
                node: {
                    id: t + "_" + e.entry_key,
                    entryKey: e.entry_key,
                    rank: e.rank,
                    score: e.score,
                    __typename: "BitsLeaderboardItem"
                },
                __typename: "BitsLeaderboardItemEdge"
            }
        };
        var i = n("TToO"),
            a = n("I89S"),
            r = n("3iBR");

        function o(e) {
            var t = new Map,
                n = new Map,
                a = new Map,
                r = new Map;
            return e.images.forEach(function(e) {
                "LIGHT" === e.theme ? e.isAnimated ? n.set(e.dpiScale, e.url) : t.set(e.dpiScale, e.url) : e.isAnimated ? r.set(e.dpiScale, e.url) : a.set(e.dpiScale, e.url)
            }), i.__assign({
                indexedImages: {
                    LIGHT: {
                        static: t,
                        animated: n
                    },
                    DARK: {
                        static: a,
                        animated: r
                    }
                }
            }, e)
        }
    },
    c8Oh: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.userPreferences.languagePreferences
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("V9YC"),
            o = n("iJpA");
        a.o.store.registerReducer("userPreferences", function(e, t) {
            switch (void 0 === e && (e = {
                languagePreferences: Object(o.b)()
            }), t.type) {
                case r.a:
                    return i.__assign({}, e, {
                        languagePreferences: t.languagePreferences
                    });
                default:
                    return e
            }
        })
    },
    "cA+x": function(e, t, n) {
        var i = n("Jvcu");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    cONr: function(e, t, n) {
        var i = n("f+sD");
        e.exports = function(e) {
            return i(new Date, e)
        }
    },
    cv4W: function(e, t, n) {
        e.exports = n.p + "assets/gift3-03f7dd6edab76b3567ff92bba447d5cb.png"
    },
    cw9o: function(e, t, n) {
        var i = n("7EGB");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    cwv1: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getTime()
        }
    },
    cxb0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "JoinRoomsButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 193
            }
        };
        n.loc.source = {
            body: "query JoinRoomsButton($channelID: ID! $userID: ID!) {\nuser(id: $channelID) {\nid\ndisplayName\nself {\nisChannelMember\n}\n}\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    cxe8: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_SharePurchase_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isCommerceRevShareEnabled"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "purchaseTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "asin"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "imageThumbnail"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "40"
                                                    }
                                                }],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteSets"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteSet"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "token"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "badges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "badge"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "quantity"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "inGameContents"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "imageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "30"
                                                            }
                                                        }],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 433
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery Chat_SharePurchase_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nsettings {\nisCommerceRevShareEnabled\n}\nself {\npurchaseTokens {\nid\ntitle\nasin\nimageThumbnail: imageURL(width: 40)\nimageURL\nemoteSets {\nid\nemoteSet {\nid\nemotes {\nid\ntoken\n}\n}\n}\nbadges {\nid\nbadge{\n...badge\n}\n}\nbits {\nid\nquantity\n}\ninGameContents {\nid\nimageURL(width: 30)\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    d7Cs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "LeaveRoomsPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "query LeaveRoomsPrompt($id: ID!) {\nuser(id: $id) {\nid\ndisplayName\nself {\nisChannelMember\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    dH3X: function(e, t, n) {
        var i = n("607n");
        e.exports = function(e) {
            if (i(e)) return !isNaN(e);
            throw new TypeError(toString.call(e) + " is not an instance of Date")
        }
    },
    dQj3: function(e, t, n) {
        "use strict";
        t.b = l, t.a = function(e, t, n) {
            if (!e.author) return null;
            var d = l(e.body.emotes),
                c = e.badges.reduce(function(e, t) {
                    return e[t.setID] = t.version, e
                }, {});
            return {
                type: r.b.Message,
                messageType: r.c.Post,
                id: e.id,
                badges: c,
                bits: e.bitsUsed,
                timestamp: 0,
                deleted: !1,
                user: i.__assign({
                    userID: e.author.id,
                    userLogin: e.author.login,
                    userType: a.a.User,
                    color: e.authorColor
                }, Object(s.a)(e.authorName, e.author.login)),
                messageParts: Object(o.g)(e.body.content, d, e.bitsUsed, t, n, e.authorName)
            }
        }, t.c = function(e) {
            if (null === e.tags || null === e.message || null === e.bits_used) return null;
            var t = "ChatMessage:" + e.tags.msg_id;
            return {
                __typename: "ChatMessage",
                "Symbol(id)": t,
                id: e.tags.msg_id,
                authorName: e.tags.display_name,
                authorColor: e.tags.color,
                author: {
                    __typename: "User",
                    "Symbol(id)": "User:" + e.user_id,
                    id: e.user_id,
                    login: e.username
                },
                body: {
                    __typename: "MessageBody",
                    "Symbol(id)": "$" + t + ".body",
                    content: e.message,
                    emotes: e.tags.emotes.map(function(e, n) {
                        return {
                            __typename: "EmbeddedEmote",
                            "Symbol(id)": t + ".body.emotes." + n,
                            emoteID: e.id.toString(),
                            from: e.start,
                            to: e.end,
                            setID: e.set
                        }
                    })
                },
                badges: e.tags.badges.map(function(e, n) {
                    return {
                        __typename: "Badge",
                        "Symbol(id)": t + ".badges." + n,
                        setID: e.badge_set_id,
                        version: e.badge_set_version
                    }
                }),
                bitsUsed: e.bits_used
            }
        };
        var i = n("TToO"),
            a = n("6Agf"),
            r = n("qkCi"),
            o = n("l21v"),
            s = n("e1CU");

        function l(e) {
            var t = [];
            return e.forEach(function(e) {
                t[e.from] = {
                    startIndex: e.from,
                    endIndex: e.to + 1,
                    data: {
                        images: {
                            themed: !1,
                            sources: {
                                "1x": Object(o.f)(e.emoteID, 1),
                                "2x": Object(o.f)(e.emoteID, 2),
                                "4x": Object(o.f)(e.emoteID, 4)
                            }
                        }
                    }
                }
            }), t
        }
    },
    dVd7: function(e, t) {},
    danj: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = Number(t);
            return n.setMinutes(a), n
        }
    },
    dc2a: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            if (!e || 0 === e.edges.length) return [];
            var t = [];
            return e.edges.forEach(function(e) {
                e.node.id && t.push(e.node)
            }), t
        }
    },
    "e/EH": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return 3 === i(e).getDay()
        }
    },
    e9ZN: function(e, t) {},
    eCZG: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getTime() < (new Date).getTime()
        }
    },
    eDxU: function(e, t) {},
    eKpK: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getSeconds()
        }
    },
    "eMi+": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsPinnedCheerV2_Leaderboards"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "leaderboard"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "10"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "leaderboardItem"
                                                },
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "secondsRemaining"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "leaderboard"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isEnabled"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "timePeriodType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsLeaderboardItem"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "rank"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entryKey"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 490
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-leaderboard-item-fragment.gql"\n#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery BitsPinnedCheerV2_Leaderboards($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\nleaderboard (first: 10) {\nid\n...leaderboardItem\nsecondsRemaining\n}\nsettings {\nleaderboard {\nisEnabled\ntimePeriodType\n}\nisRecentEnabled\nrecentTimeoutMs\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\n}\nself {\nbitsLeaderboardItem {\nid\nrank\nscore\nentryKey\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};

        function r(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(r(n("+po9").definitions)), i.definitions = i.definitions.concat(r(n("Mful").definitions)), e.exports = i
    },
    ea7N: function(e, t) {},
    ebTC: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("V5M+"),
            o = n("Aj/L"),
            s = n("TToO"),
            l = n("GiK3"),
            d = n("6sO2"),
            c = n("J8WN"),
            u = n("+8VM"),
            m = n("7vx8"),
            p = n("HZww"),
            h = n("4Q9N"),
            g = n("Tt3k"),
            f = n("W6ca"),
            v = n("xgnX"),
            b = n("CSlQ"),
            k = n("Odds"),
            y = (n("+Aaf"), n("0H+u")),
            _ = ["image/*"],
            C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        statusMessage: null,
                        imageUpdated: !1,
                        loading: !1
                    }, t.currentImage = null, t.logger = d.j.withCategory("UserImageUploader"), t.onImageInputChange = function(e) {
                        var n;
                        if (null !== e) {
                            t.setState({
                                loading: !0
                            }), n = e[0];
                            var i = Object(g.a)(n),
                                a = (n.size / 1024 / 1024).toFixed(4);
                            parseInt(a, 10) > 10 ? t.setState({
                                statusMessage: v.b.BadSizeError
                            }) : Object(g.b)(n, function(e) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    var t, n, a, r, o = this;
                                    return s.__generator(this, function(s) {
                                        switch (s.label) {
                                            case 0:
                                                this.currentImage = e, s.label = 1;
                                            case 1:
                                                return s.trys.push([1, 3, , 4]), [4, Object(f.a)(this.props.userID, this.props.authToken, this.props.imageType, i)];
                                            case 2:
                                                return t = s.sent(), n = t.upload_url, a = t.upload_id, [3, 4];
                                            case 3:
                                                return r = s.sent(), this.logger.error(r, "Request for upload ID failed to get expected response from server."), this.setState({
                                                    statusMessage: v.b.UnexpectedError
                                                }), [2];
                                            case 4:
                                                return this.unsubscribe = d.k.subscribe({
                                                    topic: Object(p.j)(this.props.userID),
                                                    success: function() {
                                                        try {
                                                            Object(f.c)(n, o.currentImage)
                                                        } catch (e) {
                                                            o.logger.error(e, "Image upload failed."), o.unsubscribe(), o.setState({
                                                                statusMessage: v.b.UnexpectedError,
                                                                loading: !1
                                                            })
                                                        }
                                                        o.timeoutHandle = setTimeout(function() {
                                                            return o.handlePubSubTimeout()
                                                        }, 1e4)
                                                    },
                                                    failure: function() {
                                                        o.setState({
                                                            statusMessage: v.b.UnexpectedError,
                                                            loading: !1
                                                        })
                                                    },
                                                    onMessage: function(e) {
                                                        if (e.upload_id === a) {
                                                            clearTimeout(o.timeoutHandle);
                                                            var t = null;
                                                            e.status === v.a.Success ? t = v.b.Success : e.status === v.a.BadSize ? (t = v.b.BadSizeError, o.currentImage = null) : e.status === v.a.NonImage ? (t = v.b.NonImageError, o.currentImage = null) : e.status === v.a.WrongFormat ? (t = v.b.WrongFormatError, o.currentImage = null) : (t = v.b.UnexpectedError, o.currentImage = null), o.unsubscribe && o.unsubscribe(), o.setState({
                                                                statusMessage: t,
                                                                loading: !1,
                                                                imageUpdated: e.status === v.a.Success
                                                            })
                                                        }
                                                    }
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        } else t.setState({
                            statusMessage: v.b.ImageNotSelected
                        })
                    }, t.handlePubSubTimeout = function() {
                        t.unsubscribe(), t.setState({
                            statusMessage: v.b.TimeoutError
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    void 0 !== this.unsubscribe && this.unsubscribe(), this.timeoutHandle && clearTimeout(this.timeoutHandle)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this;
                    this.state.imageUpdated && setTimeout(function() {
                        e.props.data && e.props.data.refetch(), e.setState({
                            imageUpdated: !1
                        }), e.props.closeModal()
                    }, 1e3)
                }, t.prototype.render = function() {
                    var e = this.props.login;
                    this.props.displayName && (e = this.props.displayName);
                    var t = Object(d.d)("Editing profile banner for {userName}", {
                        userName: e
                    }, "UserImageUploader");
                    this.props.imageType === h.a.ChannelOfflineImage && (t = Object(d.d)("Editing video banner for {userName}", {
                        userName: e
                    }, "UserImageUploader"));
                    var n = null;
                    if (this.state.loading) n = l.createElement(k._7, {
                        className: "user-image-uploader__upload-svg--anim-fill",
                        position: k._14.Relative,
                        "data-test-selector": "loading-status"
                    }, l.createElement(k._20, {
                        asset: k._21.Upload,
                        type: k._22.Brand,
                        width: 99,
                        height: 76
                    }));
                    else {
                        var i = Object(d.d)("Recommended image size: 1200x380 and less than 10MB.", "UserImageUploader");
                        this.props.imageType === h.a.ChannelOfflineImage && (i = Object(d.d)("Recommended image size: 1920x1080 and less than 10MB.", "UserImageUploader")), n = l.createElement(k._7, null, l.createElement(k._7, {
                            className: "user-image-uploader__upload-info"
                        }, l.createElement(k._7, null, l.createElement(k._20, {
                            asset: k._21.Plus,
                            type: k._22.Alt2,
                            height: 20,
                            width: 20
                        })), l.createElement(k.P, {
                            type: k._44.H3,
                            color: k.J.Alt2,
                            fontSize: k.U.Size4
                        }, Object(d.d)("Upload a Photo", "User Image Uploader"))), l.createElement(k._7, {
                            className: "user-image-uploader__upload-recommendation",
                            position: k._14.Absolute,
                            textAlign: k._40.Left,
                            attachLeft: !0,
                            attachBottom: !0,
                            margin: {
                                left: 3,
                                bottom: 1
                            }
                        }, l.createElement(k.P, {
                            type: k._44.H6,
                            color: k.J.Alt2,
                            fontSize: k.U.Size8,
                            align: k._54.TextBottom
                        }, i)))
                    }
                    var a = null;
                    this.props.showCloser && (a = l.createElement(u.a, null));
                    var r = null;
                    if (null !== this.state.statusMessage) {
                        var o = Object(v.c)(this.state.statusMessage);
                        r = l.createElement(k._11, {
                            label: o.message,
                            type: o.type
                        })
                    }
                    return l.createElement(k._7, {
                        className: "user-image-uploader",
                        position: k._14.Relative,
                        fullHeight: !0
                    }, l.createElement(k._30, {
                        className: "user-image-uploader__background-container",
                        background: k.m.Base,
                        fullWidth: !0
                    }, l.createElement(k._7, {
                        padding: 2,
                        display: k.Q.InlineBlock,
                        position: k._14.Relative,
                        textAlign: k._40.Center,
                        fullWidth: !0
                    }, l.createElement(k._30, {
                        borderBottom: !0,
                        margin: {
                            bottom: 2
                        }
                    }, l.createElement(k.P, {
                        type: k._44.H3,
                        fontSize: k.U.Size4
                    }, t)), l.createElement(k._7, {
                        className: "user-image-uploader__upload-container",
                        display: k.Q.InlineBlock,
                        position: k._14.Relative,
                        textAlign: k._40.Center,
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(k._7, {
                        className: "user-image-uploader__upload",
                        display: k.Q.InlineBlock,
                        position: k._14.Relative,
                        textAlign: k._40.Center
                    }, l.createElement(c.a, {
                        allowedFileTypes: _,
                        onFilesSubmitted: this.onImageInputChange
                    }, n))), l.createElement(k._30, {
                        "data-test-selector": "status-message",
                        fontSize: k.U.Size4,
                        position: k._14.Relative,
                        textAlign: k._40.Center,
                        className: "user-image-uploader__status-message"
                    }, r))), a)
                }, t = s.__decorate([Object(m.a)(y, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.login
                            }
                        }
                    }
                })], t)
            }(l.Component),
            S = Object(b.d)("User Image Upload")(C);
        var E = Object(i.b)(function(e) {
            return {
                authToken: Object(o.a)(e)
            }
        }, function(e, t) {
            return Object(a.b)({
                closeModal: function() {
                    return t.successCallback && t.successCallback(), Object(r.c)()
                }
            }, e)
        })(S);
        n.d(t, "a", function() {
            return E
        })
    },
    "f+sD": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getFullYear() === a.getFullYear() && n.getMonth() === a.getMonth()
        }
    },
    f1ZS: function(e, t) {},
    f4ga: function(e, t, n) {
        var i = n("WNGz");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() === a.getTime()
        }
    },
    fHoP: function(e, t) {},
    fK0I: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() > a.getTime()
        }
    },
    fNhT: function(e, t) {},
    fUo1: function(e, t, n) {
        var i = n("iRXW"),
            a = n("7EGB"),
            r = 6048e5;
        e.exports = function(e) {
            var t = i(e),
                n = i(a(t, 60)).valueOf() - t.valueOf();
            return Math.round(n / r)
        }
    },
    fbnZ: function(e, t) {},
    fo7E: function(e, t, n) {
        var i = n("w4by");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    g7wA: function(e, t, n) {
        "use strict";
        t.g = function() {
            return i.createElement("span", {
                key: "thankyou"
            }, Object(a.d)("Thank you for your feedback!", "ChatLine"))
        }, t.j = function(e, t, n) {
            var a = null,
                o = e.reduce(function(o, s, l) {
                    switch (s.type) {
                        case p.a.Text:
                            var m = l > 0;
                            return o.concat(function(e, t, n, a, r) {
                                var o = [],
                                    s = "";
                                a && (s = s.concat(" "));
                                var l = e.content.split(/\s+/);
                                return l.forEach(function(e, a) {
                                    if ("" !== e) {
                                        var r = a < l.length - 1 ? e + " " : e;
                                        (t || n) && function(e, t, n) {
                                            var i = e.trim().toLowerCase();
                                            return t && i === t.toLowerCase() || n && i === n.toLowerCase()
                                        }(e, t, n) ? (o = (o = o.concat(s)).concat(i.createElement(h._7, {
                                            className: "chat-line__message--mention-recipient",
                                            display: h.Q.InlineFlex,
                                            key: "" + e + a,
                                            "data-a-target": "chat-message-mention"
                                        }, r)), s = "") : s = s.concat(r)
                                    }
                                }), o = o.concat(s), i.createElement("span", {
                                    key: "chat-line__message-text-" + r,
                                    "data-a-target": "chat-message-text"
                                }, o)
                            }(s, t, n, m, l));
                        case p.a.Mention:
                            var f = "";
                            return function(e) {
                                return e.content && e.content.sender
                            }(s) && t && s.content.sender.toLowerCase() === t.toLowerCase() ? f = "chat-line__message--mention-sender" : function(e) {
                                return e.content && e.content.recipient
                            }(s) && t && s.content.recipient.toLowerCase() === t.toLowerCase() && (f = "chat-line__message--mention-recipient"), o.concat(i.createElement(h._7, {
                                className: f,
                                display: h.Q.InlineFlex,
                                key: l,
                                "data-a-target": "chat-message-mention"
                            }, "@" + s.content.recipient));
                        case p.a.Link:
                            return o = o.concat(g(l, s)), e.length > l + 1 && e[l + 1].type === p.a.Link && o.push(" "), o;
                        case p.a.Emote:
                            return o = o.concat(i.createElement(d.a, {
                                key: l,
                                emote: s.content
                            })), e.length > l + 1 && e[l + 1].type === p.a.Emote && o.push(" "), o;
                        case p.a.ClipLink:
                            return a ? o.concat(g(l, s)) : (a = i.createElement(r.a, {
                                key: l
                            }, i.createElement(c.a, {
                                slug: s.content.slug
                            })), o);
                        case p.a.VideoLink:
                            return a ? o.concat(g(l, s)) : (a = i.createElement(u.a, {
                                key: l,
                                id: s.content.id,
                                url: s.content.url
                            }), o);
                        default:
                            return o.concat(i.createElement("span", {
                                key: l
                            }))
                    }
                }, []);
            a && (o = o.concat(a));
            return o
        }, t.k = function(e) {
            if (e.moderationType === m.e.Ban) return e.reason ? i.createElement("span", {
                className: "chat-line__moderation--ban-with-reason"
            }, Object(a.d)("{userLogin} has been banned. Reason: {reason}", {
                userLogin: e.userLogin,
                reason: e.reason
            }, "ChatLine")) : i.createElement("span", {
                className: "chat-line__moderation--ban"
            }, Object(a.d)("{userLogin} is now banned from this channel.", {
                userLogin: e.userLogin
            }, "ChatLine"));
            if (e.reason && e.duration) {
                var t = Object(a.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                    duration: e.duration,
                    reason: e.reason,
                    userLogin: e.userLogin
                }, "ChatLine");
                return i.createElement("span", {
                    className: "chat-line__moderation--timeout-with-reason"
                }, t)
            }
            if (e.duration) return i.createElement("span", {
                className: "chat-line__moderation--timeout"
            }, Object(a.d)("{userLogin} has been timed out for {duration} seconds.", {
                userLogin: e.userLogin,
                duration: e.duration
            }, "ChatLine"))
        }, t.t = f, t.a = b, t.b = k, t.q = function(e) {
            if (e.isPrime) return i.createElement(h.P, {
                color: h.J.Alt2,
                type: h._44.Span
            }, b(e.user.displayName, f(e.channel)));
            return i.createElement(h.P, {
                color: h.J.Alt2,
                type: h._44.Span
            }, k(e.user.displayName, e.tier))
        }, t.p = function(e) {
            if ("custom" === e.tier) return i.createElement(h.P, {
                color: h.J.Alt2,
                type: h._44.Span
            }, (t = e.user.displayName, n = e.recipient, 1 === (r = e.senderCount) ? Object(a.d)("{userLogin} gifted a Sub to {recipient}! It's their first Gift Sub in the channel!", {
                userLogin: t,
                recipient: n
            }, "ChatLine") : r > 1 ? Object(a.d)("{userLogin} gifted a Sub to {recipient}! They've given {senderCount} Gift Subs in the channel!", {
                userLogin: t,
                recipient: n,
                senderCount: r
            }, "ChatLine") : Object(a.d)("{userLogin} gifted a subscription to {recipient}!", {
                userLogin: t,
                recipient: n
            }, "ChatLine")));
            var t, n, r;
            return i.createElement(h.P, {
                color: h.J.Alt2,
                type: h._44.Span
            }, function(e, t, n, i) {
                var r = v(t);
                return 1 === i ? Object(a.d)("{userLogin} gifted a {subTier} Sub to {recipient}! It's their first Gift Sub in the channel!", {
                    userLogin: e,
                    subTier: r,
                    recipient: n
                }, "ChatLine") : i > 1 ? Object(a.d)("{userLogin} gifted a {subTier} Sub to {recipient}! They've given {senderCount} Gift Subs in the channel!", {
                    userLogin: e,
                    subTier: r,
                    recipient: n,
                    senderCount: i
                }, "ChatLine") : Object(a.d)("{userLogin} gifted a {subTier} Sub to {recipient}!", {
                    userLogin: e,
                    subTier: r,
                    recipient: n
                }, "ChatLine")
            }(e.user.displayName, e.tier, e.recipient, e.senderCount))
        }, t.d = function(e) {
            var t = e.daysLeft;
            0 === t && (t = e.hoursLeft);
            var n = {
                bitsTotal: i.createElement("strong", null, Object(l.e)(e.total, {
                    style: "currency",
                    currency: "USD"
                })),
                charityName: i.createElement("strong", null, e.charityName),
                learnMoreURL: i.createElement("a", {
                    href: e.learnMore,
                    target: "_blank"
                }, e.learnMore),
                hashtag: i.createElement("strong", null, e.hashtag),
                timeRemaining: Object(l.e)(t)
            };
            return i.createElement("span", null, 0 === e.daysLeft ? (r = n, Object(a.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more hours to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                bitsTotal: r.bitsTotal,
                charityName: r.charityName,
                timeRemaining: r.timeRemaining,
                hashtag: r.hashtag,
                learnMoreURL: r.learnMoreURL
            }, "ChatLine")) : function(e) {
                return Object(a.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more days to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                    bitsTotal: e.bitsTotal,
                    charityName: e.charityName,
                    timeRemaining: e.timeRemaining,
                    hashtag: e.hashtag,
                    learnMoreURL: e.learnMoreURL
                }, "ChatLine")
            }(n));
            var r
        }, t.n = function(e) {
            var t = e.enabled ? Object(a.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                length: e.length
            }, "ChatLine") : Object(a.d)("This room is no longer in slow mode.", "ChatLine");
            return i.createElement("span", null, t)
        }, t.l = function(e) {
            return i.createElement("span", null, e.message)
        }, t.i = function(e) {
            return i.createElement("span", null, e.message)
        }, t.m = function(e) {
            var t;
            if (e.length > 0) {
                var n = e.join(", ");
                t = Object(a.d)("The moderators of this channel are: {moderatorList}", {
                    moderatorList: n
                }, "ChatLine")
            } else t = Object(a.d)("There are no moderators of this channel.", "ChatLine");
            return i.createElement("span", null, t)
        }, t.h = function(e) {
            if (e.enabled) {
                var t = 0 === e.length ? Object(a.d)("This room is in followers-only mode.", "ChatLine") : Object(a.d)("This room is now in {length} followers-only mode.", {
                    length: Object(o.a)(60 * e.length)
                }, "ChatLine");
                return i.createElement("span", null, t)
            }
            return i.createElement("span", null, Object(a.d)("This room is no longer in followers-only mode.", "ChatLine"))
        }, t.f = function(e) {
            return e.enabled ? i.createElement("span", null, Object(a.d)("This room is now in emote-only mode.", "ChatLine")) : i.createElement("span", null, Object(a.d)("This room is no longer in emote-only mode.", "ChatLine"))
        }, t.o = function(e) {
            var t = e.enabled ? Object(a.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(a.d)("This room is no longer in subscriber-only mode.", "ChatLine");
            return i.createElement("span", null, t)
        }, t.e = function() {
            return i.createElement("span", null, Object(a.d)("Chat was cleared by a moderator", "ChatLine"))
        }, t.c = y, t.r = function(e) {
            return i.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, y(new Date(e)))
        }, t.s = function(e) {
            return i.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, function(e, t) {
                void 0 === t && (t = {});
                var n = a.o.intl.getLanguageCode() || "en";
                return Intl.DateTimeFormat(n, t).format(e)
            }(new Date(e), {
                hour: "numeric",
                minute: "numeric"
            }))
        }, t.u = function() {
            return i.createElement("span", null, Object(a.d)("The raid has been cancelled.", "RaidCancelMessage"))
        };
        var i = n("GiK3"),
            a = (n.n(i), n("6sO2")),
            r = n("o5l+"),
            o = n("FsFC"),
            s = n("yDzg"),
            l = n("J4ib"),
            d = n("hXeO"),
            c = n("5vPJ"),
            u = n("kBA+"),
            m = n("qkCi"),
            p = n("mwvJ"),
            h = n("Odds");

        function g(e, t) {
            return i.createElement("a", {
                key: e,
                className: "chat-line__message--link",
                href: t.content.url,
                target: "_blank",
                rel: "noreferrer noopener"
            }, t.content.displayText)
        }

        function f(e) {
            var t = Object(s.a)("https://twitch.amazon.com/prime", {
                ref: "subscriptionMessage",
                channel: e
            });
            return i.createElement("a", {
                className: "chat-line__message--link",
                href: t,
                target: "_blank",
                rel: "noopener"
            }, Object(a.d)("Twitch Prime", "ChatLine"))
        }

        function v(e) {
            switch (e) {
                case "Tier 2":
                    return Object(a.d)("Tier 2", "ChatLine");
                case "Tier 3":
                    return Object(a.d)("Tier 3", "ChatLine");
                default:
                    return Object(a.d)("Tier 1", "ChatLine")
            }
        }

        function b(e, t) {
            return Object(a.d)("{userLogin} just subscribed with {service}!", {
                userLogin: e,
                service: t
            }, "ChatLine")
        }

        function k(e, t) {
            var n = v(t);
            return Object(a.d)("{userLogin} just subscribed with a {subTier} sub!", {
                userLogin: e,
                subTier: n
            }, "ChatLine")
        }

        function y(e) {
            var t = e.getHours() % 12;
            0 === t && (t = 12);
            var n = e.getMinutes(),
                i = n.toString();
            return n < 10 && (i = "0" + i), t + ":" + i
        }
    },
    g8mI: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("3zLD"),
            o = n("6sO2"),
            s = n("yWCw"),
            l = n("vKFS"),
            d = n("zCIC"),
            c = n("j7/Y"),
            u = n("oIkB"),
            m = n("JpYe"),
            p = n("w9tK"),
            h = n("vH/s"),
            g = n("n2E0"),
            f = n("TPVZ"),
            v = n("CSlQ"),
            b = n("RxMT"),
            k = n("4d+L"),
            y = n("WzS7"),
            _ = n("VDV3"),
            C = n("3yQz"),
            S = n("Ic9h"),
            E = n("Odds"),
            N = (n("5Kla"), n("JWRd")),
            w = C.a,
            D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hostedChannelDisplayName: null
                    }, t.onVideoSortChange = function(e) {
                        Object(m.e)("/" + t.props.match.params.channelLogin + "/videos", t.props, void 0, e)
                    }, t.onVideoFilterChange = function(e) {
                        Object(m.e)("/" + t.props.match.params.channelLogin + "/videos", t.props, e)
                    }, t.handleHostingChange = function(e) {
                        null === e ? t.setState({
                            hostedChannelDisplayName: null
                        }) : t.props.data.user && e !== t.props.data.user.hosting.login ? t.refetchTimer = setTimeout(function() {
                            return t.props.data.refetch({
                                currentChannelLogin: t.props.match.params.channelLogin
                            })
                        }, o.o.config.hostingCacheDelay) : t.props.data.user && t.props.data.user.hosting.login && t.setState({
                            hostedChannelDisplayName: t.props.data.user.hosting.displayName
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.onRender()
                }, t.prototype.componentDidUpdate = function() {
                    this.onRender()
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.refetchTimer)
                }, t.prototype.render = function() {
                    var e, t = Object(m.d)(this.props) || C.a,
                        n = Object(m.c)(this.props);
                    if (this.props.data.error) e = a.createElement(s.a, {
                        "data-test-selector": "video-error",
                        message: Object(o.d)("These videos are temporarily unavailable.", "ChannelVideosPage")
                    });
                    else {
                        var i = !this.props.data.loading && this.props.data.user && this.props.data.user.videos ? this.props.data.user.videos.edges.map(function(e) {
                            return e.node
                        }) : null;
                        if (i && 0 === i.length) e = a.createElement(E._30, {
                            color: E.J.Alt2,
                            textAlign: E._40.Center,
                            key: "no-videos"
                        }, a.createElement(E.P, {
                            type: E._44.H4,
                            italic: !0,
                            "data-test-selector": "no-videos"
                        }, Object(o.d)("No videos found.", "ChannelVideosPage")));
                        else {
                            var r = !(this.props.data.loading || this.props.data.error || !this.props.data.user || !this.props.data.user.videos || !this.props.data.user.videos.pageInfo.hasNextPage);
                            e = a.createElement("div", null, a.createElement(_.b, {
                                videos: i,
                                listContext: l.b.SingleChannelList,
                                trackingContent: Object(g.a)(t),
                                trackingMedium: h.PageviewMedium.ChannelVideos
                            }), a.createElement(d.a, {
                                enabled: r,
                                key: "channel-videos-page-" + n + "-" + t,
                                loadMore: this.props.loadMore
                            }))
                        }
                    }
                    return a.createElement(E._7, {
                        className: "videos-page",
                        overflow: E._10.Hidden,
                        display: E.Q.Flex,
                        flexDirection: E.S.Column,
                        flexWrap: E.T.NoWrap,
                        fullHeight: !0,
                        "data-test-selector": "qa-videos-page"
                    }, a.createElement(S.a, {
                        currentPage: f.b.Videos,
                        ownerLogin: this.props.match.params.channelLogin
                    }, a.createElement(E._7, {
                        padding: {
                            top: 3
                        }
                    }, a.createElement(y.a, {
                        userLogin: this.props.match.params.channelLogin,
                        tracking: {
                            location: h.PageviewLocation.ChannelVideos,
                            medium: h.PageviewMedium.ChannelVideos
                        }
                    })), a.createElement(_.a, {
                        hideLanguageSelector: !0,
                        onVideoSortChange: this.onVideoSortChange,
                        onVideoFilterChange: this.onVideoFilterChange,
                        selectedSort: t,
                        broadcastType: n
                    }), e), a.createElement(b.b, null, a.createElement(E._30, {
                        className: "channel-videos__right-column",
                        background: E.m.Alt2,
                        display: E.Q.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        overflow: E._10.Hidden,
                        fullHeight: !0
                    }, a.createElement(k.a, {
                        channelLogin: this.props.match.params.channelLogin,
                        onHostingChange: this.handleHostingChange,
                        hostedChannelDisplayName: this.state.hostedChannelDisplayName || void 0
                    }))))
                }, t.prototype.onRender = function() {
                    this.props.data.loading || (this.props.data.user && o.o.setPageTitle(Object(o.d)("{channelDisplayName} - Videos", {
                        channelDisplayName: this.props.data.user.displayName
                    }, "ChannelVideosPage")), this.props.latencyTracking.reportInteractive())
                }, t
            }(a.Component),
            O = {
                options: function(e) {
                    return {
                        variables: {
                            limit: 30,
                            channelOwnerLogin: e.match.params.channelLogin,
                            broadcastType: e.match.params.filter && "all" !== e.match.params.filter ? e.match.params.filter : null,
                            videoSort: Object(m.d)(e) || w
                        }
                    }
                },
                props: function(e) {
                    return i.__assign({}, e, {
                        loadMore: function() {
                            var t = e.data.user && e.data.user.videos ? e.data.user.videos.edges : [],
                                n = t.length > 0 ? t[t.length - 1].cursor : void 0;
                            return e.data.fetchMore({
                                query: N,
                                variables: i.__assign({}, e.data.variables, {
                                    cursor: n
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult;
                                    if (!n.user || !n.user.videos) return e;
                                    var a = e.user && e.user.videos ? e.user.videos.edges : [];
                                    return {
                                        user: i.__assign({}, n.user, {
                                            videos: i.__assign({}, n.user.videos, {
                                                edges: Object(u.b)(a, n.user.videos.edges)
                                            })
                                        })
                                    }
                                }
                            })
                        }
                    })
                }
            },
            I = Object(r.compose)(Object(r.graphql)(N, O), Object(v.d)("ChannelVideosPage", {
                destination: p.a.VideosPage
            }), Object(c.a)({
                location: h.PageviewLocation.ChannelVideos,
                properties: function(e) {
                    var t = null;
                    return e.data.user && e.data.user.id && (t = Number(e.data.user.id)), {
                        channel: e.match.params.channelLogin,
                        channel_id: t
                    }
                },
                skip: function(e) {
                    return e.data.loading
                }
            }))(D);
        n.d(t, "ChannelVideosPage", function() {
            return I
        })
    },
    gAt4: function(e, t, n) {
        var i = n("xA5w"),
            a = n("nizW"),
            r = n("NKE6");
        e.exports = function(e, t) {
            var n = i(e),
                o = i(t),
                s = r(n, o),
                l = Math.abs(a(n, o));
            return n.setDate(n.getDate() - s * l), s * (l - (r(n, o) === -s))
        }
    },
    gDPd: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() < a.getTime()
        }
    },
    gGMi: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.Everyone = "EVERYONE", e.Moderator = "MODERATOR", e.Subscriber = "SUBSCRIBER"
            }(i || (i = {}));
        var a, r = ((a = {})[i.Everyone] = "Everyone", a[i.Moderator] = "Mods", a[i.Subscriber] = "Subs", a)
    },
    gUEJ: function(e, t) {
        e.exports = function() {
            var e = new Date,
                t = e.getFullYear(),
                n = e.getMonth(),
                i = e.getDate(),
                a = new Date(0);
            return a.setFullYear(t, n, i + 1), a.setHours(0, 0, 0, 0), a
        }
    },
    go0B: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomSelector"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channelRooms"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "topic"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPreviewable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumAllowedRole"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isArchived"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isMuted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isUnread"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unreadMentionCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 280
            }
        };
        n.loc.source = {
            body: "query RoomSelector ($login: String!) {\nuser(login: $login) {\nid\nchannelRooms {\nname\nid\ntopic\nisPreviewable\nminimumAllowedRole\nself {\nisArchived\nisMuted\nisUnread\nunreadMentionCount\n}\n}\nhosting {\nid\n}\nself {\nisChannelMember\nisModerator\nsubscriptionBenefit {\nid\n}\n}\nstream {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    gv4B: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomPane"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topic"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastReadAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMentionCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "broadcastBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "cheer"
                                        },
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isLoggedIn"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isModerator"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "channelID"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "setID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "version"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 581
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n#import "twilight/features/chat/models/cheer-fragment.gql"\nquery RoomPane($roomID: ID! $isLoggedIn: Boolean! $userID: ID $channelID: ID!) {\nbadges {\n...badge\n}\nroom(id: $roomID) {\nid\ntopic\nminimumAllowedRole\nself {\nlastReadAt\nunreadMentionCount\n}\nowner {\nid\ndisplayName\nlogin\nbroadcastBadges {\n...badge\n}\n...cheer\nself @include(if: $isLoggedIn) {\nisModerator\n}\n}\n}\nuser(id: $userID) @include(if: $isLoggedIn) {\nid\nlogin\ndisplayBadges(channelID: $channelID) {\nsetID\nversion\n}\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};

        function r(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(r(n("QU+n").definitions)), i.definitions = i.definitions.concat(r(n("576g").definitions)), e.exports = i
    },
    gwjw: function(e, t) {},
    hUHO: function(e, t, n) {
        var i = n("4LxA");
        e.exports = function(e) {
            return i(new Date, e)
        }
    },
    hXeO: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("GiK3"),
            a = (n.n(i), n("8RKZ")),
            r = function(e) {
                var t, n = e.emote,
                    r = n.alt || "";
                return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = i.createElement("strong", {
                    className: "chat-line__message--cheer-amount",
                    style: {
                        color: n.cheerColor
                    }
                }, n.cheerAmount)), i.createElement(a.a, {
                    alt: r,
                    cheerText: t,
                    className: "chat-line__message--emote",
                    srcKey: "1x",
                    srcSet: n.images
                })
            }
    },
    hcyD: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return d
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("l7/s"),
            s = (n.n(o), n("QFW6")),
            l = this,
            d = function(e) {
                return i.__awaiter(l, void 0, void 0, function() {
                    var t, n, l, d;
                    return i.__generator(this, function(c) {
                        switch (c.label) {
                            case 0:
                                t = null, c.label = 1;
                            case 1:
                                return c.trys.push([1, 3, , 4]), [4, a.o.apollo.client.query({
                                    query: o,
                                    variables: {
                                        id: e.channelID
                                    }
                                })];
                            case 2:
                                return t = c.sent(), [3, 4];
                            case 3:
                                return n = c.sent(), a.j.error(n, "ChatEvent query failed."), [3, 4];
                            case 4:
                                return t && t.data || a.j.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), l = t && t.data && t.data.user || null, d = i.__assign({}, Object(s.a)(e), {
                                    broadcast_id: a.n.getVideoPlayerTrackingData().broadcastID,
                                    channel_id: e.channelID,
                                    game: l && l.stream && l.stream.game && l.stream.game.name,
                                    live: !!(l && l.stream && l.stream.id.length > 0),
                                    partner: l && l.isPartner || !1,
                                    play_session_id: a.n.getVideoPlayerTrackingData().playSessionID,
                                    player: e.player,
                                    ritual_nca: e.fromNewChatterRitual || !1,
                                    sub_only_mode: e.subOnlyMode
                                }), a.n.track(r.SpadeEventType.Chat, d), [2]
                        }
                    })
                })
            }
    },
    hico: function(e, t, n) {
        var i = n("zZbG"),
            a = n("3znZ");
        e.exports = function(e) {
            var t = i(e),
                n = new Date(0);
            n.setFullYear(t + 1, 0, 4), n.setHours(0, 0, 0, 0);
            var r = a(n);
            return r.setDate(r.getDate() - 1), r
        }
    },
    hj5Y: function(e, t, n) {
        var i = n("5qwL");
        e.exports = function(e) {
            return i(new Date, e)
        }
    },
    hmtx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "MuteButton_MuteRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomViewInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoomView"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roomView"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 117
            }
        };
        n.loc.source = {
            body: "mutation MuteButton_MuteRoom($input: UpdateRoomViewInput!) {\nupdateRoomView(input: $input) {\nroomView {\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    iJpA: function(e, t, n) {
        "use strict";
        t.c = function(e, t) {
            var n = this;
            return function(r) {
                return i.__awaiter(n, void 0, void 0, function() {
                    var n, d;
                    return i.__generator(this, function(i) {
                        return n = new Set(l()), t ? n.add(e) : n.delete(e), d = Array.from(n), a.l.set(s, d), r(Object(o.b)(d)), [2]
                    })
                })
            }
        }, t.a = function() {
            var e = this;
            return function(t) {
                return i.__awaiter(e, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        return a.l.set(s, []), t(Object(o.b)([])), [2]
                    })
                })
            }
        }, t.b = l;
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("D9fv"),
            o = n("V9YC"),
            s = "languageDirectoryFilters";

        function l() {
            return a.l.get(s, []).filter(function(e) {
                return r.a.has(e)
            })
        }
    },
    iMOk: function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            a = n("6sO2"),
            r = n("NXs7"),
            o = n("3iBR"),
            s = n("iydZ"),
            l = n("CFVp"),
            d = n("qe65");
        n("1pvm");

        function c(e) {
            var t, n = Object(a.d)("{bitsAmount} Bits", {
                bitsAmount: e.count.toString()
            }, "Bits--BitsCount");
            if (e.withImage) {
                var c = e.bitsConfig.indexedActions[o.g];
                c || (c = Object(l.b)());
                var u = c.orderedTiers.find(function(t) {
                    return t.bits <= e.count
                });
                if (u) {
                    var m = Object(s.b)(u, void 0, e.animated);
                    return void 0 !== e.themeOverride && (e.themeOverride === r.a.Light ? m.dark = m.light : m.light = m.dark), t = i.createElement(d.a, {
                        className: "bits-count--img",
                        sources: m
                    }), i.createElement("strong", {
                        className: "bits-count",
                        "data-a-target": "bits-count"
                    }, i.createElement("span", null, t, " ", e.withText ? n : ""))
                }
            }
            return i.createElement("strong", {
                className: "bits-count",
                "data-a-target": "bits-count"
            }, i.createElement("span", null, n))
        }
        n.d(t, "a", function() {
            return c
        })
    },
    iRXW: function(e, t, n) {
        var i = n("zZbG"),
            a = n("3znZ");
        e.exports = function(e) {
            var t = i(e),
                n = new Date(0);
            return n.setFullYear(t, 0, 4), n.setHours(0, 0, 0, 0), a(n)
        }
    },
    iWdz: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsCard_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "totalBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nextBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "progress"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "current"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "next"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "teams"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 381
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery BitsCard_Bits($name: ID!) {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\nuser(id: $name) {\nid\ndisplayName\ncheer {\nid\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nrecentMinimumBits\nevent\n}\n}\nself {\nbitsBadge {\nid\ntotalBits\nnextBits\nprogress\ncurrent {\n...badge\n}\nnext {\n...badge\n}\n}\n}\ntournament {\nid\nteams {\nid\nname\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    imaO: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RedeemNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "redeemRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 182
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RedeemNewChatterToken($input: RedeemRitualTokenInput!) {\nredeemRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    iqz2: function(e, t) {},
    "j/3B": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualToken"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "RitualToken"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "expiresAt"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "status"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 64
            }
        };
        n.loc.source = {
            body: "fragment ritualToken on RitualToken {\nid\nexpiresAt\nstatus\ntype\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jF7o: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (!e) return void i.j.warn("[onPopupClose] Attempted to observe a window that failed to open.");
            var n = setInterval(function() {
                var i = !1,
                    a = !1;
                try {
                    i = e.closed, a = !!e.success
                } catch (e) {}
                if (i || a) {
                    t(a);
                    try {
                        e.close()
                    } catch (e) {}
                    clearInterval(n)
                }
            }, 500)
        };
        var i = n("6sO2")
    },
    jIAO: function(e, t, n) {
        "use strict";
        n("R9op");
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("ass3");
        a.o.store.registerReducer("viewerCard", function(e, t) {
            switch (void 0 === e && (e = {
                viewerCardOptions: null
            }), t.type) {
                case r.a:
                    return i.__assign({}, e, {
                        viewerCardOptions: null
                    });
                case r.b:
                    return t.viewerCardOptions ? i.__assign({}, e, {
                        viewerCardOptions: i.__assign({}, t.viewerCardOptions)
                    }) : e;
                default:
                    return e
            }
        })
    },
    jML9: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 43
            }
        };
        n.loc.source = {
            body: "query RaidNotification_User {\nuser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jPU6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jQas: function(e, t, n) {
        var i = n("SJLv");
        e.exports = function() {
            var e = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                t = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                n = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
                a = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                r = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                o = ["AM", "PM"],
                s = ["am", "pm"],
                l = ["a.m.", "p.m."],
                d = {
                    MMM: function(t) {
                        return e[t.getMonth()]
                    },
                    MMMM: function(e) {
                        return t[e.getMonth()]
                    },
                    dd: function(e) {
                        return n[e.getDay()]
                    },
                    ddd: function(e) {
                        return a[e.getDay()]
                    },
                    dddd: function(e) {
                        return r[e.getDay()]
                    },
                    A: function(e) {
                        return e.getHours() / 12 >= 1 ? o[1] : o[0]
                    },
                    a: function(e) {
                        return e.getHours() / 12 >= 1 ? s[1] : s[0]
                    },
                    aa: function(e) {
                        return e.getHours() / 12 >= 1 ? l[1] : l[0]
                    }
                };
            return ["M", "D", "DDD", "d", "Q", "W"].forEach(function(e) {
                d[e + "o"] = function(t, n) {
                    return function(e) {
                        var t = e % 100;
                        if (t > 20 || t < 10) switch (t % 10) {
                            case 1:
                                return e + "st";
                            case 2:
                                return e + "nd";
                            case 3:
                                return e + "rd"
                        }
                        return e + "th"
                    }(n[e](t))
                }
            }), {
                formatters: d,
                formattingTokensRegExp: i(d)
            }
        }
    },
    jpZi: function(e, t) {},
    jxGs: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "e", function() {
            return r
        }), n.d(t, "g", function() {
            return o
        }), n.d(t, "f", function() {
            return s
        }), n.d(t, "c", function() {
            return l
        }), n.d(t, "d", function() {
            return d
        });
        var i = "AD",
            a = "BUNDLE",
            r = "first_time_purchase",
            o = "single_purchase",
            s = "prime_single_purchase",
            l = "black_friday_2017",
            d = "twitch_prime_2018"
    },
    jy2q: function(e, t, n) {
        var i = n("xA5w"),
            a = n("balU");
        e.exports = function(e, t) {
            var n = i(e),
                r = Number(t) - (Math.floor(n.getMonth() / 3) + 1);
            return a(n, n.getMonth() + 3 * r)
        }
    },
    "kBA+": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("SZoP"),
            l = n("GxDs"),
            d = n("Odds"),
            c = n("s+oZ"),
            u = {
                ERROR: "video-chat-card-error"
            },
            m = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.video,
                        n = e.error,
                        i = e.loading;
                    if (n || t && !t.owner) return a.createElement(l.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "VideoChatCard"),
                            description: Object(r.d)("We couldn't find that video", "VideoChatCard")
                        }
                    });
                    if (i || !t) return a.createElement(l.a, null);
                    var o = a.createElement(d.P, null, Object(r.c)(new Date(t.publishedAt), "medium"), a.createElement("span", null, " · "), Object(s.a)(t.owner.login, t.owner.displayName));
                    return a.createElement(l.a, {
                        data: {
                            title: t.title,
                            description: o,
                            previewImageURL: t.previewThumbnailURL,
                            contentURL: this.props.url
                        }
                    })
                }, t
            }(a.Component),
            p = function(e) {
                return {
                    variables: {
                        videoID: e.id
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: "cache-first"
                }
            },
            h = Object(o.a)(c, {
                options: p
            })(m);
        n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return h
        })
    },
    kDuD: function(e, t, n) {
        var i = n("xA5w"),
            a = n("MIQa"),
            r = n("xKy+");
        e.exports = function(e) {
            var t = i(e);
            return a(t).getTime() === r(t).getTime()
        }
    },
    kIFi: function(e, t, n) {
        var i = n("NSOL");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    kOMe: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_ChannelHeader"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPartner"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follows"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 290
            }
        };
        n.loc.source = {
            body: "query ChannelPage_ChannelHeader($login: String!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\nroles {\nisPartner\n}\nstream {\nid\n}\nvideos {\ntotalCount\n}\nfollowers {\ntotalCount\n}\nfollows {\ntotalCount\n}\ncheer {\nid\n}\n}\ncurrentUser {\nid\nroles {\nisStaff\nisSiteAdmin\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    kRs6: function(e, t, n) {
        var i = n("Qxz6");
        e.exports = function(e) {
            return i(new Date, e)
        }
    },
    kjfG: function(e, t) {},
    kjlQ: function(e, t, n) {
        var i = n("G7No"),
            a = 36e5;
        e.exports = function(e, t) {
            var n = i(e, t) / a;
            return n > 0 ? Math.floor(n) : Math.ceil(n)
        }
    },
    kkVd: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return 1 === i(e).getDay()
        }
    },
    kpSd: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("RweG"),
            d = n("aMxy"),
            c = n("HZww"),
            u = n("pexS"),
            m = n("R9op"),
            p = n("DtWM"),
            h = n("zCIC"),
            g = n("4Q5V"),
            f = n("CSlQ"),
            v = n("Odds"),
            b = (n("rMeN"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            k = 10,
            y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type) && (t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= k ? t.setState({
                            isAutoScrolling: !0
                        }) : t.setState({
                            isAutoScrolling: !1
                        }))
                    }, t.handleResize = function() {
                        t.state.isAutoScrolling && t.scrollToBottom()
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom)
                    }, t.scrollToBottom = function() {
                        t.scroll && t.scroll.scrollContent && (t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight)
                    }, t.reportChatRenderSent = function() {
                        t.props.chatRenderSentEvent && t.props.latencyTracking.reportCustomEvent(t.props.chatRenderSentEvent)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    b.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    b.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this,
                        t = this.props.messages.map(function(t) {
                            return a.createElement(g.a, {
                                badgeSets: e.props.badgeSets,
                                channelID: e.props.channelID,
                                isCurrentUserModerator: e.props.isCurrentUserModerator,
                                isCurrentUserStaff: e.props.isCurrentUserStaff,
                                message: t,
                                key: t.id,
                                showAutoModActions: e.props.showAutoModActions,
                                showModerationActions: e.props.showModerationActions,
                                showModerationIcons: e.props.showModerationIcons && !e.props.isEmbedded,
                                showTimestamps: e.props.showTimestamps,
                                currentUserDisplayName: e.props.currentUserDisplayName,
                                currentUserLogin: e.props.currentUserLogin,
                                onPushMessage: e.props.onPushMessage,
                                doesNotUpdate: !0,
                                onRenderReportChatSent: e.reportChatRenderSent
                            })
                        });
                    return a.createElement(v._7, {
                        refDelegate: this.props.containerRef,
                        className: "chat-list",
                        display: v.Q.Flex,
                        flexDirection: v.S.Column,
                        flexWrap: v.T.NoWrap,
                        overflow: v._10.Hidden,
                        flexGrow: 1
                    }, a.createElement(p.a, {
                        onResize: this.handleResize
                    }), a.createElement(v._1, {
                        flexGrow: 1
                    }, a.createElement(h.b, {
                        className: "chat-list__lines",
                        scrollRef: this.saveScrollRef,
                        "data-a-target": "chat-scroller"
                    }, a.createElement(v._1, {
                        flexGrow: 1,
                        fullHeight: !0,
                        padding: {
                            bottom: 1
                        }
                    }, a.createElement("div", {
                        role: "log"
                    }, t)))), a.createElement(v._7, {
                        className: "chat-list__more-messages-placeholder",
                        position: v._14.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : a.createElement(v._1, {
                        display: v.Q.Flex,
                        justifyContent: v._6.Center,
                        alignItems: v.c.Center,
                        position: v._14.Absolute,
                        padding: .5,
                        attachBottom: !0,
                        fullWidth: !0
                    }, a.createElement("div", {
                        className: "chat-list__more-messages",
                        onClick: this.handleClickMoreMessages
                    }, Object(s.d)("More messages below.", "ChatList")))
                }, t = i.__decorate([Object(f.d)("ChatListPresentation", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component),
            _ = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t, n, i = e.pubsub.messages.chatRichEmbedInfo;
                    i && this.props.pubsub.messages.chatRichEmbedInfo !== i && s.o.apollo.client.writeQuery({
                        query: u,
                        variables: {
                            slug: i.data.twitch_metadata.clip_metadata.slug
                        },
                        data: (t = i, n = t.data.twitch_metadata.clip_metadata, {
                            clip: {
                                slug: n.slug,
                                id: n.id,
                                url: t.data.request_url,
                                title: t.data.title,
                                thumbnailURL: t.data.thumbnail_url,
                                curator: n.curator_id ? {
                                    displayName: t.data.author_name,
                                    id: n.curator_id,
                                    __typename: "User"
                                } : null,
                                broadcaster: n.channel_display_name ? {
                                    displayName: n.channel_display_name,
                                    id: n.broadcaster_id,
                                    __typename: "User"
                                } : null,
                                __typename: "Clip"
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return a.createElement(y, {
                        channelID: this.props.channelID,
                        badgeSets: this.props.badgeSets,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        channelLogin: this.props.channelLogin,
                        onPushMessage: this.props.onPushMessage,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isCurrentUserStaff: this.props.isCurrentUserStaff,
                        isEmbedded: this.props.isEmbedded,
                        messages: this.props.messages,
                        showAutoModActions: this.props.showAutoModActions,
                        showModerationActions: this.props.showModerationActions,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        currentUserLogin: this.props.currentUserLogin,
                        containerRef: this.props.containerRef,
                        chatRenderSentEvent: this.props.chatRenderSentEvent
                    })
                }, t
            }(a.Component);
        var C, S = Object(o.d)(Object(r.b)(function(e, t) {
            return {
                chatRenderSentEvent: Object(m.c)(e),
                messages: Object(m.a)(e, t.channelLogin),
                showAutoModActions: e.chat.showAutoModActions,
                showModerationActions: e.chat.showModerationActions,
                showModerationIcons: e.chat.showModIcons,
                showTimestamps: e.chat.showTimestamps
            }
        }), Object(l.a)([{
            skip: function(e) {
                return !e.channelID
            },
            topic: function(e) {
                return e.channelID ? Object(c.p)(e.channelID) : ""
            },
            mapMessageTypesToProps: (C = {}, C[d.PubsubMessageType.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", C)
        }]))(_);
        n.d(t, !1, function() {
            return _
        }), n.d(t, "a", function() {
            return S
        })
    },
    kvxA: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomDetails"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topic"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "query RoomDetails($id: ID!) {\nroom(id: $id) {\nid\nname\ntopic\nisPreviewable\nminimumAllowedRole\nowner {\nid\nself {\nisChannelMember\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    l669: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UnbanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 132
            }
        };
        n.loc.source = {
            body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "l7/s": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_ChatEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 116
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    l85J: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getMonth()
        }
    },
    lGVF: function(e, t) {},
    lQzg: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e);
            return Math.floor(t.getMonth() / 3) + 1
        }
    },
    "mR/9": function(e, t) {},
    mSFb: function(e, t) {
        e.exports = function() {
            var e = new Date,
                t = e.getFullYear(),
                n = e.getMonth(),
                i = e.getDate(),
                a = new Date(0);
            return a.setFullYear(t, n, i - 1), a.setHours(0, 0, 0, 0), a
        }
    },
    mXYp: function(e, t, n) {
        var i = n("YRFD"),
            a = n("xA5w"),
            r = n("25hp"),
            o = n("GI7G"),
            s = n("uyaC"),
            l = 1440,
            d = 2520,
            c = 43200,
            u = 86400;
        e.exports = function(e, t, n) {
            var m = n || {},
                p = i(e, t),
                h = m.locale,
                g = s.distanceInWords.localize;
            h && h.distanceInWords && h.distanceInWords.localize && (g = h.distanceInWords.localize);
            var f, v, b = {
                addSuffix: Boolean(m.addSuffix),
                comparison: p
            };
            p > 0 ? (f = a(e), v = a(t)) : (f = a(t), v = a(e));
            var k, y = r(v, f),
                _ = v.getTimezoneOffset() - f.getTimezoneOffset(),
                C = Math.round(y / 60) - _;
            if (C < 2) return m.includeSeconds ? y < 5 ? g("lessThanXSeconds", 5, b) : y < 10 ? g("lessThanXSeconds", 10, b) : y < 20 ? g("lessThanXSeconds", 20, b) : y < 40 ? g("halfAMinute", null, b) : g(y < 60 ? "lessThanXMinutes" : "xMinutes", 1, b) : 0 === C ? g("lessThanXMinutes", 1, b) : g("xMinutes", C, b);
            if (C < 45) return g("xMinutes", C, b);
            if (C < 90) return g("aboutXHours", 1, b);
            if (C < l) return g("aboutXHours", Math.round(C / 60), b);
            if (C < d) return g("xDays", 1, b);
            if (C < c) return g("xDays", Math.round(C / l), b);
            if (C < u) return g("aboutXMonths", k = Math.round(C / c), b);
            if ((k = o(v, f)) < 12) return g("xMonths", Math.round(C / c), b);
            var S = k % 12,
                E = Math.floor(k / 12);
            return S < 3 ? g("aboutXYears", E, b) : S < 9 ? g("overXYears", E, b) : g("almostXYears", E + 1, b)
        }
    },
    mbxv: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("+V/3"),
            o = n("Odds"),
            s = (n("2IkU"), n("6sO2")),
            l = n("vH/s"),
            d = function(e) {
                var t = Date.now() / 1e3;
                e.badge_type = e.badge_type.toLowerCase().replace(/( |\s)/g, "_"), s.o.tracking.track(l.SpadeEventType.ChatBadgeClick, Object.assign({
                    client_time: t
                }, e))
            };
        n.d(t, "a", function() {
            return c
        });
        var c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isHovering: !1
                }, t.onMouseOver = function() {
                    t.setState({
                        isHovering: !0
                    })
                }, t.onMouseOut = function() {
                    t.setState({
                        isHovering: !1
                    })
                }, t.onBadgeClickHandler = function() {
                    d({
                        badge_type: t.props.badge.title,
                        badge_url_target: t.targetURL
                    })
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this.props.badge,
                    t = e.title,
                    n = e.image1x,
                    i = e.image2x,
                    r = e.image4x,
                    l = a.createElement("img", {
                        alt: t,
                        "aria-label": Object(s.d)("{badgeTitle} badge", {
                            badgeTitle: t
                        }, "Badge"),
                        className: "chat-badge",
                        src: n,
                        srcSet: n + " 1x, " + i + " 2x, " + r + " 4x",
                        onMouseOver: this.onMouseOver,
                        onMouseOut: this.onMouseOut
                    });
                return this.targetURL = this.getTargetURL(), "" !== this.targetURL && (l = a.createElement("a", {
                    href: this.targetURL,
                    onClick: this.onBadgeClickHandler,
                    target: "_blank",
                    "data-a-target": "chat-badge"
                }, l)), this.state.isHovering ? a.createElement(o._47, {
                    align: o._48.Left,
                    "data-a-target": "chat-badge",
                    display: o.Q.Inline,
                    key: n,
                    label: t,
                    offsetY: "0.9rem"
                }, l) : l
            }, t.prototype.getTargetURL = function() {
                var e = this.props.badge;
                switch (e.clickAction) {
                    case r.d:
                        return e.clickURL;
                    case r.b:
                        return e.channelName ? this.getSubscriberLink() : "";
                    case r.c:
                        return "https://www.twitch.tv/products/turbo?ref=chat_badge";
                    default:
                        return ""
                }
            }, t.prototype.getSubscriberLink = function() {
                return "https://www.twitch.tv/" + this.props.badge.channelName + "/subscribe?ref=in_chat_subscriber_link"
            }, t
        }(a.Component)
    },
    mmly: function(e, t) {},
    n2E0: function(e, t, n) {
        "use strict";
        t.b = function(e) {
            switch (e) {
                case i.a.Archive:
                    return a.SpadeVideoBroadcastType.Archive;
                case i.a.Highlight:
                    return a.SpadeVideoBroadcastType.Highlight;
                case i.a.Upload:
                    return a.SpadeVideoBroadcastType.Upload;
                case i.a.WatchParty:
                    return a.SpadeVideoBroadcastType.WatchParty;
                case i.a.PastPremiere:
                    return a.SpadeVideoBroadcastType.PastPremiere;
                case i.a.PremiereUpload:
                    return a.SpadeVideoBroadcastType.PremiereUpload;
                default:
                    var t = e;
                    return t
            }
        }, t.a = function(e) {
            switch (e) {
                case r.b:
                    return a.PageviewContent.PopularVideos;
                case r.a:
                    return a.PageviewContent.RecentVideos;
                default:
                    var t = e;
                    return t
            }
        };
        var i = n("6WAQ"),
            a = n("vH/s"),
            r = n("3yQz")
    },
    nUXg: function(e, t) {},
    nZeo: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return i(e).getFullYear()
        }
    },
    nfOx: function(e, t, n) {
        var i = n("6Zhv");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, 1e3 * n)
        }
    },
    nhCy: function(e, t) {},
    nizW: function(e, t, n) {
        var i = n("WNGz"),
            a = 6e4,
            r = 864e5;
        e.exports = function(e, t) {
            var n = i(e),
                o = i(t),
                s = n.getTime() - n.getTimezoneOffset() * a,
                l = o.getTime() - o.getTimezoneOffset() * a;
            return Math.round((s - l) / r)
        }
    },
    nk30: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = t && Number(t.weekStartsOn) || 0,
                a = i(e),
                r = a.getDay(),
                o = 6 + (r < n ? -7 : 0) - (r - n);
            return a.setHours(0, 0, 0, 0), a.setDate(a.getDate() + o), a
        }
    },
    nmDn: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserProfileEditor"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 104
            }
        };
        n.loc.source = {
            body: "query UserProfileEditor($login: String!) {\nuser(login: $login) {\nid\nlogin\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    nrdj: function(e, t, n) {
        "use strict";
        var i, a = n("HW6M"),
            r = n("GiK3"),
            o = n("6sO2"),
            s = n("iydZ"),
            l = n("CFVp"),
            d = n("qe65"),
            c = n("Odds");
        n("PPK2");
        ! function(e) {
            e[e.Large = 4] = "Large", e[e.Medium = 3] = "Medium", e[e.Small = 2] = "Small", e[e.ExtraSmall = 1.5] = "ExtraSmall", e[e.ExtremelySmall = 1] = "ExtremelySmall"
        }(i || (i = {}));
        var u = function(e) {
            var t = e.bitsConfig.indexedActions[e.prefix.toLowerCase()];
            t || (t = Object(l.b)());
            var n = t.orderedTiers.find(function(t) {
                return t.bits <= (e.amount || 100)
            });
            n || (n = t.orderedTiers[0]);
            var u = e.display === c.Q.Inline || e.display === c.Q.InlineFlex || e.display === c.Q.InlineBlock,
                m = null,
                p = a("cheermote-for-amount__cheer-amount", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer-amount--medium": e.size === i.Medium
                }, {
                    "cheermote-for-amount__cheer-amount--small": e.size === i.Small || e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-amount--extremely-small": e.size === i.ExtremelySmall
                });
            if (void 0 !== e.amount && e.showAmount) {
                var h = e.formattedNumber ? Object(o.e)(e.amount) : e.amount;
                m = r.createElement(c._1, {
                    padding: e.size === i.Small ? 0 : void 0,
                    textAlign: e.size === i.Small ? c._40.Center : void 0
                }, r.createElement("strong", {
                    className: p,
                    style: {
                        color: n.color
                    }
                }, h))
            }
            var g = a("cheermote-for-amount__cheer-image", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer--inline": u
                }, {
                    "cheermote-for-amount__cheer-image--small": e.size === i.Small
                }, {
                    "cheermote-for-amount__cheer-image--extra-small": e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-image--extremely-small": e.size === i.ExtremelySmall
                }),
                f = r.createElement(d.a, {
                    className: g,
                    sources: Object(s.b)(n, e.size || i.Large, e.animated)
                });
            return e.showImage || (f = null), r.createElement(c._1, {
                className: "cheermote-for-amount",
                alignItems: e.alignItems,
                display: e.display
            }, r.createElement("span", null, f, m))
        };
        n.d(t, "a", function() {
            return u
        }), n.d(t, "b", function() {
            return i
        })
    },
    nyge: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.CounterStrike = "counter-strike: global offensive", e.Hearthstone = "hearthstone", e.LeagueOfLegends = "league of legends", e.Overwatch = "overwatch"
            }(i || (i = {}))
    },
    oHn4: function(e, t) {},
    oNnY: function(e, t, n) {
        var i = n("zZbG"),
            a = n("Uu+E");
        e.exports = function(e, t) {
            var n = Number(t);
            return a(e, i(e) + n)
        }
    },
    oke8: function(e, t, n) {
        var i = n("1rLR");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    orNa: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return 12 * (n.getFullYear() - a.getFullYear()) + (n.getMonth() - a.getMonth())
        }
    },
    "pV+t": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 62
            }
        };
        n.loc.source = {
            body: "query ChatUser($login: String!) {\nuser(login: $login) {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pXt7: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PopularVideosByGameCarousel_Game"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "gameName"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "game"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "gameName"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "30"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "sort"
                                    },
                                    value: {
                                        kind: "EnumValue",
                                        value: "VIEWS"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "PreviewCardVideo"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 250
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/video-preview-card/models/preview-card-video-fragment.gql"\nquery PopularVideosByGameCarousel_Game($gameName: String!) {\ngame(name: $gameName) {\nid\nvideos(first: 30 sort: VIEWS) {\nedges {\nnode {\n...PreviewCardVideo\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("qjMx").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    pe3h: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomPickerOption"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isUnread"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMentionCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sendMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 313
            }
        };
        n.loc.source = {
            body: "query RoomPickerOption ($channelID: ID! $userID: ID! $roomID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\nroom(id: $roomID) {\nid\nisPreviewable\nminimumAllowedRole\nowner {\nid\nself {\nisChannelMember\n}\n}\nself {\nisMuted\nisUnread\nunreadMentionCount\npermissions {\nsendMessages\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pe7V: function(e, t, n) {
        var i = n("8KV+");
        e.exports = function(e, t) {
            return i(new Date, e, t)
        }
    },
    pexS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsChatCard_Clip"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "slug"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clip"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thumbnailURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "curator"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcaster"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "query ClipsChatCard_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nthumbnailURL\ntitle\nslug\nurl\ncurator {\nid\ndisplayName\n}\nbroadcaster {\nid\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pg5l: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 236
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_CurrentUser($channelLogin: String!) {\ncurrentUser {\nid\nlogin\ndisplayName\nchatColor\n}\nuser(login: $channelLogin) {\nid\nself {\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    pqU3: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        }), t.d = function(e) {
            return {
                type: r,
                leagueOfLegendsChampionsErrored: e
            }
        }, t.e = function(e) {
            return {
                type: a,
                leagueOfLegendsChampionsLoading: e
            }
        }, t.f = function(e) {
            var t = {},
                n = e.data;
            for (var a in n) n.hasOwnProperty(a) && (t[n[a].id] = n[a]);
            return {
                type: i,
                apiData: e,
                championsMap: t,
                apiVersion: e.version
            }
        };
        var i = "directory.LOL_CHAMPIONS_CHANGED",
            a = "directory.LOL_CHAMPIONS_LOADING",
            r = "directory.LOL_CHAMPIONS_ERRORED"
    },
    pwi9: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecommendedVideoCarousel_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recommendations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "videos"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "30"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "edges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "node"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "PreviewCardVideo"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 238
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/video-preview-card/models/preview-card-video-fragment.gql"\nquery RecommendedVideoCarousel_CurrentUser {\ncurrentUser {\nid\nlogin\nrecommendations {\nvideos(first: 30) {\nedges {\nnode {\n...PreviewCardVideo\n}\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("qjMx").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "q+qZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "CreateRoomButton_CreateRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maxLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 131
            }
        };
        n.loc.source = {
            body: "mutation CreateRoomButton_CreateRoom($input: CreateRoomInput!) {\ncreateRoom(input: $input) {\nerror {\ncode\nminLength\nmaxLength\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    q4rf: function(e, t) {},
    q8Cw: function(e, t) {},
    qDcU: function(e, t) {},
    qNYo: function(e, t, n) {
        var i = n("xA5w"),
            a = n("9Jn5"),
            r = n("NKE6"),
            o = n("MKc+");
        e.exports = function(e, t) {
            var n = i(e),
                s = i(t),
                l = r(n, s),
                d = Math.abs(a(n, s));
            return n = o(n, l * d), l * (d - (r(n, s) === -l))
        }
    },
    qPxx: function(e, t, n) {
        var i = n("LLTj");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() === a.getTime()
        }
    },
    qjMx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "PreviewCardVideo"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Video"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "animatedPreviewURL"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "game"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "boxArtURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "40"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "56"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "lengthSeconds"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "owner"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "50"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "previewThumbnailURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "width"
                            },
                            value: {
                                kind: "IntValue",
                                value: "320"
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "height"
                            },
                            value: {
                                kind: "IntValue",
                                value: "180"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "publishedAt"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "self"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "viewingHistory"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "position"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "title"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "viewCount"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 302
            }
        };
        n.loc.source = {
            body: "fragment PreviewCardVideo on Video {\nanimatedPreviewURL\ngame {\nboxArtURL(width: 40 height: 56)\nid\ndisplayName\nname\n}\nid\nlengthSeconds\nowner {\ndisplayName\nid\nlogin\nprofileImageURL(width: 50)\n}\npreviewThumbnailURL(width: 320 height: 180)\npublishedAt\nself {\nviewingHistory {\nposition\n}\n}\ntitle\nviewCount\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    qkCi: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "e", function() {
            return r
        }), n.d(t, "a", function() {
            return o
        });
        var i, a, r, o, s = n("aMxy");
        n.o(s, "ModerationActions") && n.d(t, "d", function() {
                return s.ModerationActions
            }),
            function(e) {
                e[e.Message = 0] = "Message", e[e.Moderation = 1] = "Moderation", e[e.ModerationAction = 2] = "ModerationAction", e[e.TargetedModerationAction = 3] = "TargetedModerationAction", e[e.AutoMod = 4] = "AutoMod", e[e.Connected = 5] = "Connected", e[e.Disconnected = 6] = "Disconnected", e[e.Reconnect = 7] = "Reconnect", e[e.Hosting = 8] = "Hosting", e[e.Unhost = 9] = "Unhost", e[e.Hosted = 10] = "Hosted", e[e.Subscription = 11] = "Subscription", e[e.Resubscription = 12] = "Resubscription", e[e.SubGift = 13] = "SubGift", e[e.Clear = 14] = "Clear", e[e.SubscriberOnlyMode = 15] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 16] = "FollowerOnlyMode", e[e.SlowMode = 17] = "SlowMode", e[e.EmoteOnlyMode = 18] = "EmoteOnlyMode", e[e.RoomMods = 19] = "RoomMods", e[e.RoomState = 20] = "RoomState", e[e.Raid = 21] = "Raid", e[e.Unraid = 22] = "Unraid", e[e.Ritual = 23] = "Ritual", e[e.Notice = 24] = "Notice", e[e.Info = 25] = "Info", e[e.BadgesUpdated = 26] = "BadgesUpdated", e[e.Purchase = 27] = "Purchase", e[e.BitsCharity = 28] = "BitsCharity", e[e.CrateGift = 29] = "CrateGift"
            }(i || (i = {})),
            function(e) {
                e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention"
            }(a || (a = {})),
            function(e) {
                e[e.Ban = 0] = "Ban", e[e.Timeout = 1] = "Timeout"
            }(r || (r = {})),
            function(e) {
                e[e.MessageRejectedPrompt = 0] = "MessageRejectedPrompt", e[e.MessageRejected = 1] = "MessageRejected", e[e.MessageAllowed = 2] = "MessageAllowed", e[e.MessageDenied = 3] = "MessageDenied"
            }(o || (o = {}))
    },
    rBmI: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e),
                n = t.getMonth(),
                a = n - n % 3;
            return t.setMonth(a, 1), t.setHours(0, 0, 0, 0), t
        }
    },
    rIzn: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i = n("6sO2"),
            a = function() {
                return i.l.get("ritualsFeatureFlagOverride", i.b.get("viewer_milestones_enabled", !1))
            }
    },
    rMeN: function(e, t) {},
    rO5X: function(e, t, n) {
        var i = n("xA5w"),
            a = n("Bb5e"),
            r = n("NKE6");
        e.exports = function(e, t) {
            var n = i(e),
                o = i(t),
                s = r(n, o),
                l = Math.abs(a(n, o));
            return n.setFullYear(n.getFullYear() - s * l), s * (l - (r(n, o) === -s))
        }
    },
    "s+oZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "VideoChatCard_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "previewThumbnailURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "90"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "51"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "publishedAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 162
            }
        };
        n.loc.source = {
            body: "query VideoChatCard_Video($videoID: ID!) {\nvideo(id: $videoID) {\nid\ntitle\npreviewThumbnailURL(width: 90 height: 51)\npublishedAt\nowner {\nid\nlogin\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    sdTe: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = i(t);
            return n.getTime() === a.getTime()
        }
    },
    sgUC: function(e, t) {},
    ssrl: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "NewChatterRitual_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ritualTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "ritualToken"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 167
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nquery NewChatterRitual_Channel($id: ID!) {\nchannel: user(id: $id) {\nid\nself {\nritualTokens {\n...ritualToken\n}\n}\nstream {\nid\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    t6pj: function(e, t, n) {
        var i = n("YRFD"),
            a = n("xA5w"),
            r = n("25hp"),
            o = n("uyaC"),
            s = 1440,
            l = 43200,
            d = 525600;
        e.exports = function(e, t, n) {
            var c = n || {},
                u = i(e, t),
                m = c.locale,
                p = o.distanceInWords.localize;
            m && m.distanceInWords && m.distanceInWords.localize && (p = m.distanceInWords.localize);
            var h, g, f, v = {
                addSuffix: Boolean(c.addSuffix),
                comparison: u
            };
            u > 0 ? (h = a(e), g = a(t)) : (h = a(t), g = a(e));
            var b = Math[c.partialMethod ? String(c.partialMethod) : "floor"],
                k = r(g, h),
                y = g.getTimezoneOffset() - h.getTimezoneOffset(),
                _ = b(k / 60) - y;
            if ("s" === (f = c.unit ? String(c.unit) : _ < 1 ? "s" : _ < 60 ? "m" : _ < s ? "h" : _ < l ? "d" : _ < d ? "M" : "Y")) return p("xSeconds", k, v);
            if ("m" === f) return p("xMinutes", _, v);
            if ("h" === f) return p("xHours", b(_ / 60), v);
            if ("d" === f) return p("xDays", b(_ / s), v);
            if ("M" === f) return p("xMonths", b(_ / l), v);
            if ("Y" === f) return p("xYears", b(_ / d), v);
            throw new Error("Unknown unit: " + f)
        }
    },
    t8zS: function(e, t, n) {
        var i = n("nk30");
        e.exports = function(e) {
            return i(e, {
                weekStartsOn: 1
            })
        }
    },
    tKvs: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PopularVideosCarousel_Videos"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "videos"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "first"
                            },
                            value: {
                                kind: "IntValue",
                                value: "30"
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "edges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "node"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "PreviewCardVideo"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/video-preview-card/models/preview-card-video-fragment.gql"\nquery PopularVideosCarousel_Videos {\nvideos(first: 30) {\nedges {\nnode {\n...PreviewCardVideo\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("qjMx").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    tQTt: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "MuteButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 106
            }
        };
        n.loc.source = {
            body: "query MuteButton($id: ID!) {\nroom(id: $id) {\nid\nowner {\nid\nself {\nisChannelMember\n}\n}\nself {\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    thJT: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RequestNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RequestRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RequestNewChatterToken($input: RequestRitualTokenInput!) {\nrequestRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    tjbt: function(e, t, n) {
        "use strict";
        (function(e) {
            n.d(t, "a", function() {
                return T
            });
            var i = n("TToO"),
                a = n("GiK3"),
                r = (n.n(a), n("3zLD")),
                o = (n.n(r), n("RH2O")),
                s = n("6sO2"),
                l = n("7vx8"),
                d = n("RweG"),
                c = n("WIs4"),
                u = n("aMxy"),
                m = n("oIkB"),
                p = n("HZww"),
                h = n("Aj/L"),
                g = n("aUOx"),
                f = n("QCOJ"),
                v = n("rIzn"),
                b = n("hcyD"),
                k = n("KfLc"),
                y = n("yqxY"),
                _ = n("Tur5"),
                C = n("ssrl"),
                S = (n.n(C), n("Ti/Y")),
                E = (n.n(S), n("imaO")),
                N = (n.n(E), n("thJT")),
                w = (n.n(N), 3e5),
                D = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            closedByError: !1,
                            isLive: !1
                        }, t.eligibilityTimeouts = {}, t.expirationTimeouts = {}, t.getBannerMessage = function() {
                            return Object(s.d)("Click an emote to say hello!", "NewChatterRitual")
                        }, t.getLiveStatus = function(e) {
                            var t = e.pubsub.messages.streamDown ? e.pubsub.messages.streamDown.server_time : 0,
                                n = e.pubsub.messages.streamUp ? e.pubsub.messages.streamUp.server_time : 0;
                            return t || n ? n > t : e.data && e.data.channel && !!e.data.channel.stream.id || !1
                        }, t.setEligibilityTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), i = 0, a = Object.keys(t.eligibilityTimeouts); i < a.length; i++) {
                                var r = a[i];
                                n.has(r) || (clearTimeout(t.eligibilityTimeouts[r]), delete t.eligibilityTimeouts[r])
                            }
                            n.forEach(function(e) {
                                t.eligibilityTimeouts[e] || (t.eligibilityTimeouts[e] = setTimeout(function() {
                                    delete t.eligibilityTimeouts[e], t.isEligible = !0, t.state.isLive && t.requestRitualToken()
                                }, w))
                            })
                        }, t.requestRitualToken = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            Object(k.e)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), e = i.__assign({}, Object(m.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            })), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.requestToken(e)];
                                        case 2:
                                            return n.sent(), this.isEligible = !1, [3, 4];
                                        case 3:
                                            return t = n.sent(), s.j.error(t, "Failed to request new chatter ritual token."), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.setExpirationTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), i = 0, a = Object.keys(t.expirationTimeouts); i < a.length; i++) {
                                var r = a[i];
                                n.has(r) || (clearTimeout(t.expirationTimeouts[r]), delete t.expirationTimeouts[r])
                            }
                            e.forEach(function(e) {
                                if (!t.expirationTimeouts[e.id] && e.expiresAt && new Date(e.expiresAt).valueOf() > Date.now()) {
                                    var n = new Date(e.expiresAt).valueOf() - Date.now();
                                    t.expirationTimeouts[e.id] = setTimeout(t.expireRitualToken.bind(e.id), n)
                                }
                            })
                        }, t.expireRitualToken = function(e) {
                            delete t.expirationTimeouts[e];
                            Object(m.d)(C, {
                                id: t.props.channelID
                            }, function(t) {
                                return t.channel && t.channel.self && t.channel.self.ritualTokens && (t.channel.self.ritualTokens = t.channel.self.ritualTokens.filter(function(t) {
                                    return t.id === e
                                })), t
                            })
                        }, t.redeemRitualToken = function(e, n) {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var t, a, r;
                                return i.__generator(this, function(o) {
                                    switch (o.label) {
                                        case 0:
                                            Object(b.a)({
                                                channelID: this.props.channelID,
                                                channelLogin: this.props.channelLogin,
                                                isHostMode: this.props.isHostMode,
                                                fromNewChatterRitual: !0,
                                                subOnlyMode: this.props.isSubsOnlyModeEnabled,
                                                player: this.props.isEmbedded || this.props.isPopout ? f.a.Embed : f.a.Web
                                            }), Object(k.d)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID,
                                                userMessage: n
                                            }), t = i.__assign({}, Object(m.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter,
                                                messageText: n
                                            }), {
                                                optimisticResponse: {
                                                    redeemRitualToken: {
                                                        __typename: "RedeemRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Redeemed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), a = null, o.label = 1;
                                        case 1:
                                            return o.trys.push([1, 3, , 4]), [4, this.props.redeemToken(t)];
                                        case 2:
                                            return a = o.sent(), [3, 4];
                                        case 3:
                                            return r = o.sent(), s.j.error(r, "Failed to redeem new chatter ritual."), this.handleGenericError(), [2];
                                        case 4:
                                            if (a.data.redeemRitualToken.error) switch (a.data.redeemRitualToken.error.code) {
                                                case _.RitualTokenMutationErrors.UserBanned:
                                                case _.RitualTokenMutationErrors.UserNotFollowing:
                                                case _.RitualTokenMutationErrors.UserNotSubbed:
                                                case _.RitualTokenMutationErrors.UserTimedOut:
                                                    return this.props.onSendMessage(n), this.setState({
                                                        closedByError: !0
                                                    }), [2];
                                                default:
                                                    return this.handleGenericError(), [2]
                                            }
                                            return a.data.redeemRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.dismissRitualToken = function(e) {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var t, n, a;
                                return i.__generator(this, function(r) {
                                    switch (r.label) {
                                        case 0:
                                            Object(k.a)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), t = i.__assign({}, Object(m.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            }), {
                                                optimisticResponse: {
                                                    dismissRitualToken: {
                                                        __typename: "DismissRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Dismissed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), n = null, r.label = 1;
                                        case 1:
                                            return r.trys.push([1, 3, , 4]), [4, this.props.dismissToken(t)];
                                        case 2:
                                            return n = r.sent(), [3, 4];
                                        case 3:
                                            return a = r.sent(), s.j.error(a, "Failed to redeem new chatter ritual."), [3, 4];
                                        case 4:
                                            return n && n.data.dismissRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.handleGenericError = function() {
                            t.props.onPushMessage(Object(g.a)(Object(s.d)("Something went wrong.", "NewChatterRitual"))), t.setState({
                                closedByError: !0
                            })
                        }, t.clearAllTimers = function() {
                            for (var e = 0, n = Object.keys(t.eligibilityTimeouts); e < n.length; e++) {
                                var i = n[e];
                                clearTimeout(t.eligibilityTimeouts[i])
                            }
                            t.eligibilityTimeouts = {};
                            for (var a = 0, r = Object.keys(t.expirationTimeouts); a < r.length; a++) {
                                i = r[a];
                                clearTimeout(t.expirationTimeouts[i])
                            }
                            t.expirationTimeouts = {}
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        this.props.data && this.props.data.loading || !e.data || !e.data.loading || Object(k.b)({
                            channelID: this.props.channelID
                        });
                        var t = this.getLiveStatus(e);
                        if (this.state.isLive !== t && (this.setState({
                                isLive: t
                            }), t && this.isEligible && this.requestRitualToken()), e.data && e.data.channel && e.data.channel.self && e.data.channel.self.ritualTokens) {
                            var n = e.data.channel.self.ritualTokens;
                            this.setEligibilityTimeouts(n.filter(function(e) {
                                return e.status === _.RitualTokenStatus.Eligible
                            })), this.setExpirationTimeouts(n.filter(function(e) {
                                return !!e.expiresAt
                            }))
                        } else this.clearAllTimers()
                    }, t.prototype.componentWillUnmount = function() {
                        this.clearAllTimers()
                    }, t.prototype.render = function() {
                        return this.props.data && this.props.data.channel ? this.state.closedByError || !this.state.isLive ? null : a.createElement(y.a, {
                            bannerMessage: this.getBannerMessage(),
                            onRitualDismissed: this.dismissRitualToken,
                            onRitualRedeemed: this.redeemRitualToken,
                            ritualTokens: this.props.data.channel.self && this.props.data.channel.self.ritualTokens ? this.props.data.channel.self.ritualTokens : []
                        }) : null
                    }, t
                }(a.Component);

            function O(e) {
                return !e.firstPageLoaded || !Object(v.a)() || !e.isLoggedIn || e.isEmbedded || e.isPopout
            }
            var I, T = Object(r.compose)(Object(o.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isLoggedIn: Object(h.d)(e),
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode
                }
            }, null), Object(l.a)(C, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: O
            }), Object(c.a)(function(t) {
                return {
                    query: C,
                    variables: {
                        id: t.channelID
                    },
                    topic: Object(p.p)(t.channelID),
                    type: u.PubsubMessageType.UpdatedChannelChatProperty,
                    mutator: function(n, i) {
                        return n.data.is_rituals_enabled ? e(function() {
                            t.data && t.data.refetch && t.data.refetch()
                        }) : i.channel && i.channel.self && (i.channel.self.ritualTokens = []), i
                    },
                    skip: O(t)
                }
            }), Object(d.a)([{
                topic: function(e) {
                    return Object(p.y)(e.channelID)
                },
                mapMessageTypesToProps: (I = {}, I[u.PubsubMessageType.ChannelStreamUp] = "streamUp", I[u.PubsubMessageType.ChannelStreamDown] = "streamDown", I),
                skip: O
            }]), Object(l.a)(S, {
                name: "dismissToken"
            }), Object(l.a)(E, {
                name: "redeemToken"
            }), Object(l.a)(N, {
                name: "requestToken"
            }))(D)
        }).call(t, n("162o").setImmediate)
    },
    "u/4p": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = t && Number(t.weekStartsOn) || 0,
                a = i(e),
                r = a.getDay(),
                o = (r < n ? 7 : 0) + r - n;
            return a.setDate(a.getDate() - o), a.setHours(0, 0, 0, 0), a
        }
    },
    uLsu: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("3zLD"),
            o = n("6sO2"),
            s = n("1F7R"),
            l = n("7vx8"),
            d = n("u8SD"),
            c = n("Kxgf"),
            u = n("djIP"),
            m = n("OLl6"),
            p = n("pV+t"),
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getInvalidUserMessage = function() {
                        return Object(o.d)("No user matching that login.", "IgnoreCommandHandler")
                    }, t.blockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("You cannot ignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: Object(m.a)(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.blockUserMutation(e, u.b.Other, u.a.Chat, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(o.d)("Unable to ignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(o.d)("User successfully ignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("Please specify a user to ignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t.unblockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("You cannot unignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: Object(m.a)(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.unblockUserMutation(e, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(o.d)("Unable to unignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(o.d)("User successfully unignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("Please specify a user to unignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, a.createElement(s.a, {
                        command: "ignore",
                        handler: this.blockUser
                    }), a.createElement(s.a, {
                        command: "unignore",
                        handler: this.unblockUser
                    }))
                }, t
            }(a.Component),
            g = Object(r.compose)(Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.currentUserLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.currentUserLogin
                }
            }), Object(c.a)(), Object(d.a)())(h);
        n.d(t, "a", function() {
            return g
        })
    },
    uwZN: function(e, t, n) {
        var i = n("7yyf");
        e.exports = function(e) {
            return i(new Date, e)
        }
    },
    uyaC: function(e, t, n) {
        var i = n("Ptqd"),
            a = n("jQas");
        e.exports = {
            distanceInWords: i(),
            format: a()
        }
    },
    v2Uk: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualsEnabled"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "settings"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isRitualsEnabled"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isRitualsWhitelisted"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "fragment ritualsEnabled on User {\nid\nsettings {\nisRitualsEnabled\nisRitualsWhitelisted\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    v4vD: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomSettings"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isModerator"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "modes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 262
            }
        };
        n.loc.source = {
            body: "query RoomSettings($roomID: ID! $userID: ID $isLoggedIn: Boolean!) {\nroom(id: $roomID) {\nid\nowner {\nid\nlogin\nself {\nisModerator\n}\n}\nmodes {\nslowModeDurationSeconds\n}\n}\nuser(id: $userID) @include(if: $isLoggedIn) {\nid\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vBvW: function(e, t, n) {
        var i = n("mXYp");
        e.exports = function(e, t) {
            return i(Date.now(), e, t)
        }
    },
    vDGQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), t.d = function(e) {
            if (!e.action || !e.userId) return;
            var t = {
                location: s.PageviewLocation.Channel,
                action: e.action,
                target: e.target,
                type: e.type,
                channel_id: e.channelId,
                reward_id: e.rewardID,
                user_id: e.userId,
                time: Date.now()
            };
            o.o.tracking.track(s.SpadeEventType.CrateNotificationAction, t)
        };
        var i, a, r, o = n("6sO2"),
            s = n("vH/s");
        ! function(e) {
            e.Close = "close", e.DontShowThis = "dont_show_this", e.LearnMore = "learn_more", e.OpenLater = "open_later", e.OpenNow = "open_now", e.Timeout = "timeout", e.TryBeta = "try_beta", e.View = "view"
        }(i || (i = {})),
        function(e) {
            e.Inventory = "inventory", e.OpenCrate = "open_crate"
        }(a || (a = {})),
        function(e) {
            e.Ftue = "ftue", e.ReceiveCrate = "receive_crate", e.ReceiveGift = "receive_giveaway_item", e.BitsIntro = "bits_intro"
        }(r || (r = {}))
    },
    vKFS: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("RH2O"),
            s = n("HW6M"),
            l = n("nyge"),
            d = n("Odds"),
            c = (n("Lwev"), function(e) {
                var t, n = e.spriteDetails,
                    i = e.game.toLowerCase(),
                    r = s("metadata-icon__appendage", ((t = {})["metadata-icon__appendage--csgo-skill"] = i === l.a.CounterStrike, t)),
                    o = i === l.a.CounterStrike ? 40 : 20;
                return a.createElement(d._7, {
                    className: r
                }, a.createElement("div", {
                    style: {
                        backgroundImage: "url(" + n.spriteURL + ")",
                        backgroundPositionX: n.spriteOffsetX ? -1 * n.spriteOffsetX : 0,
                        backgroundPositionY: n.spriteOffsetY ? -1 * n.spriteOffsetY : 0,
                        width: n.imageWidth ? n.imageWidth + "px" : "2rem",
                        height: n.imageWidth ? n.imageHeight + "px" : "2rem",
                        transform: "scale(" + (n.imageWidth > 0 ? o / n.imageWidth : 1) + ")",
                        transformOrigin: "0 0"
                    }
                }))
            }),
            u = n("YUUt"),
            m = n.n(u),
            p = n("/SNv"),
            h = n.n(p),
            g = n("Vr3l"),
            f = n.n(g),
            v = n("PPNL"),
            b = n("EOpv"),
            k = n("LgcN"),
            y = this,
            _ = r.o.logger.withCategory("metadata-info"),
            C = function(e, t) {
                return i.__awaiter(y, void 0, void 0, function() {
                    var n, a, o, s, d, c;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return n = t.toLowerCase(), a = e.counterStrikeGlobalOffensive && e.counterStrikeGlobalOffensive.skill, o = e.hearthstone && e.hearthstone.broadcasterHeroClass, s = e.leagueOfLegends && e.leagueOfLegends.championID, d = e.overwatch && e.overwatch.broadcasterCharacter, a && n === l.a.CounterStrike ? [4, S(a)] : [3, 2];
                            case 1:
                                return [2, i.sent()];
                            case 2:
                                return o && n === l.a.Hearthstone ? [4, E(o)] : [3, 4];
                            case 3:
                                return [2, i.sent()];
                            case 4:
                                return d && n === l.a.Overwatch ? [4, N(d)] : [3, 6];
                            case 5:
                                return [2, i.sent()];
                            case 6:
                                if (s && n === l.a.LeagueOfLegends && (c = r.o.store.getState()).directory)
                                    if (c.directory.leagueOfLegends.championsMap) {
                                        if (c.directory.leagueOfLegends.championsMap) return [2, w(s, c.directory.leagueOfLegends.championsMap, c.directory.leagueOfLegends.version)]
                                    } else r.o.store.dispatch(Object(v.a)());
                                i.label = 7;
                            case 7:
                                return [2, null]
                        }
                    })
                })
            },
            S = function(e) {
                return i.__awaiter(y, void 0, void 0, function() {
                    var t, n, a;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return i.trys.push([0, 2, , 3]), [4, Object(k.a)()];
                            case 1:
                                return t = i.sent(), (n = {})[e] = t[0]["Skill Group"][e - 1], [2, {
                                    name: n[e].display_name,
                                    label: Object(b.b)(b.a.CSGOSkillGroup),
                                    spriteDetails: {
                                        imageWidth: n[e].image_width,
                                        imageHeight: n[e].image_height,
                                        spriteOffsetX: n[e].sprite_x_offset,
                                        spriteOffsetY: n[e].sprite_y_offset,
                                        spriteURL: m.a
                                    }
                                }];
                            case 2:
                                return a = i.sent(), _.error(a, "Failed to load Counter-Strike skill group data"), [2, null];
                            case 3:
                                return [2]
                        }
                    })
                })
            },
            E = function(e) {
                return i.__awaiter(y, void 0, void 0, function() {
                    var t, n, a;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return i.trys.push([0, 2, , 3]), [4, Object(k.b)()];
                            case 1:
                                return t = i.sent(), n = {}, t[0].Class.forEach(function(e) {
                                    n[e.class] = e
                                }), [2, {
                                    name: n[e].display_name,
                                    label: Object(b.b)(b.a.HearthstoneClass),
                                    spriteDetails: {
                                        imageWidth: n[e].image_width,
                                        imageHeight: n[e].image_height,
                                        spriteOffsetX: n[e].sprite_x_offset,
                                        spriteOffsetY: n[e].sprite_y_offset,
                                        spriteURL: h.a
                                    }
                                }];
                            case 2:
                                return a = i.sent(), _.error(a, "Failed to load Hearthstone class data"), [2, null];
                            case 3:
                                return [2]
                        }
                    })
                })
            },
            N = function(e) {
                return i.__awaiter(y, void 0, void 0, function() {
                    var t, n, a, r, o, s, l, d, c, u, m, p;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return i.trys.push([0, 2, , 3]), [4, Object(k.d)()];
                            case 1:
                                for (t = i.sent(), n = void 0, a = 0, r = t; a < r.length; a++)
                                    for (o in n = r[a])
                                        if (n.hasOwnProperty(o))
                                            for (s = n[o], l = 0, d = s; l < d.length; l++)
                                                if ((c = d[l]).character === e) return (p = {})[c.character] = c, [2, {
                                                    name: (u = p)[e].display_name,
                                                    label: Object(b.b)(b.a.OverwatchCharacter),
                                                    spriteDetails: {
                                                        imageWidth: u[e].image_width,
                                                        imageHeight: u[e].image_height,
                                                        spriteOffsetX: u[e].sprite_x_offset,
                                                        spriteOffsetY: u[e].sprite_y_offset,
                                                        spriteURL: f.a
                                                    }
                                                }];
                                return [2, null];
                            case 2:
                                return m = i.sent(), _.error(m, "Failed to load Overwatch character data"), [2, null];
                            case 3:
                                return [2]
                        }
                    })
                })
            },
            w = function(e, t, n) {
                if (!t || !e) return null;
                var i = t[e],
                    a = "https://ddragon.leagueoflegends.com/cdn/" + n + "/img/sprite/" + i.image.sprite;
                return {
                    name: i.name,
                    label: Object(b.b)(b.a.LeagueChampion),
                    spriteDetails: {
                        imageWidth: i.image.w,
                        imageHeight: i.image.h,
                        spriteOffsetX: i.image.x,
                        spriteOffsetY: i.image.y,
                        spriteURL: a
                    }
                }
            },
            D = (n("nUXg"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        metadataDetails: null
                    }, t.didUnmount = !1, t.loadStreamMetadataDetails = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (!this.props.streamMetadata || !this.props.game) return [3, 4];
                                        n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, C(this.props.streamMetadata, this.props.game)];
                                    case 2:
                                        if (e = n.sent()) {
                                            if (this.didUnmount) return [2];
                                            this.setState({
                                                metadataDetails: e
                                            })
                                        }
                                        return [3, 4];
                                    case 3:
                                        return t = n.sent(), r.j.error(t, "Failed to get metadata details."), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.loadStreamMetadataDetails()
                }, t.prototype.componentDidUpdate = function(e) {
                    !e.leagueOfLegends.championsMap && this.props.leagueOfLegends.championsMap && this.loadStreamMetadataDetails()
                }, t.prototype.componentWillUnmount = function() {
                    this.didUnmount = !0
                }, t.prototype.render = function() {
                    return this.props.streamMetadata && this.props.game && this.state.metadataDetails ? a.createElement(d._7, {
                        className: "preview-card-appendage",
                        display: d.Q.Flex
                    }, a.createElement(d._7, {
                        className: "preview-card-appendage__image-wrapper",
                        flexGrow: 0,
                        flexShrink: 0,
                        display: d.Q.Flex,
                        alignItems: d.c.Center,
                        justifyContent: d._6.End
                    }, a.createElement("div", null, a.createElement(c, {
                        game: this.props.game,
                        spriteDetails: this.state.metadataDetails.spriteDetails
                    }))), a.createElement(d._30, {
                        flexGrow: 1,
                        flexShrink: 1,
                        borderTop: !0,
                        padding: {
                            y: .5
                        },
                        margin: {
                            left: 1
                        },
                        display: d.Q.Flex,
                        overflow: d._10.Hidden
                    }, a.createElement(d._7, {
                        flexGrow: 1,
                        flexShrink: 1,
                        overflow: d._10.Hidden
                    }, a.createElement(d.P, {
                        ellipsis: !0
                    }, this.state.metadataDetails.name)), a.createElement(d._7, {
                        flexGrow: 0,
                        flexShrink: 0
                    }, a.createElement(d.P, null, this.state.metadataDetails.label)))) : null
                }, t
            }(a.Component));
        var O, I = Object(o.b)(function(e) {
                return {
                    leagueOfLegends: {
                        championsMap: e.directory.leagueOfLegends.championsMap
                    }
                }
            })(D),
            T = (n("YVIF"), function(e) {
                var t = a.createElement(d._30, {
                    className: "preview-card-iconic-image__wrapper",
                    borderRadius: d.s.Small,
                    overflow: d._10.Hidden
                }, a.createElement(d.j, {
                    ratio: e.aspect || d.k.BoxArt,
                    align: d.a.Center
                }, a.createElement(d.M, i.__assign({}, e.imageProps))));
                return e.linkTo && (t = a.createElement(d.N, {
                    to: e.linkTo
                }, t)), t
            }),
            M = (n("IJO1"), function(e) {
                var t = .5,
                    n = null;
                return "number" == typeof e.progressBarPercent && e.progressBarPercent > 0 && (n = a.createElement(d._7, {
                    position: d._14.Absolute,
                    attachBottom: !0,
                    fullWidth: !0
                }, a.createElement(d._17, {
                    size: d._18.Small,
                    value: e.progressBarPercent,
                    mask: !0
                })), t = 1), a.createElement(d._7, {
                    position: d._14.Absolute,
                    attachTop: !0,
                    attachLeft: !0,
                    fullWidth: !0,
                    fullHeight: !0,
                    className: "preview-card-overlay"
                }, n, a.createElement(d._7, {
                    position: d._14.Absolute,
                    attachTop: !0,
                    attachLeft: !0,
                    margin: 1,
                    "data-test-selector": "top-left-selector"
                }, e.topLeft), a.createElement(d._7, {
                    position: d._14.Absolute,
                    attachTop: !0,
                    attachRight: !0,
                    margin: 1,
                    "data-test-selector": "top-right-selector"
                }, e.topRight), a.createElement(d._7, {
                    position: d._14.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    margin: {
                        x: .5,
                        y: t
                    },
                    "data-test-selector": "bottom-left-selector"
                }, e.bottomLeft), a.createElement(d._7, {
                    position: d._14.Absolute,
                    attachBottom: !0,
                    attachRight: !0,
                    margin: {
                        x: .5,
                        y: t
                    },
                    "data-test-selector": "bottom-right-selector"
                }, e.bottomRight))
            }),
            R = (n("BJwU"), function(e) {
                var t = e.icon && a.createElement(d._7, {
                    display: d.Q.Flex
                }, a.createElement(d._20, {
                    asset: e.icon,
                    width: 14,
                    height: 14
                }));
                return e.withBackground ? a.createElement(d._30, {
                    alignItems: d.c.Center,
                    background: d.m.Overlay,
                    borderRadius: d.s.Small,
                    className: "preview-card-stat",
                    color: d.J.Overlay,
                    display: d.Q.Flex,
                    fontSize: d.U.Size6,
                    justifyContent: d._6.Center
                }, t, a.createElement(d.P, null, e.value)) : a.createElement(d._30, {
                    className: "preview-card-stat",
                    color: d.J.Overlay,
                    display: d.Q.Flex,
                    padding: {
                        x: .5
                    }
                }, t, a.createElement(d.P, null, e.value))
            }),
            x = n("vKYI"),
            L = (n("jpZi"), 300),
            A = 5e3,
            F = "preview-card-thumbnail__image-selector",
            j = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        didAnimatedPreviewLoad: !1,
                        didAnimatedPreviewFailToLoad: !1,
                        isLiveVideoPreviewLoaded: !1,
                        isLiveVideoPreviewLoading: !1,
                        isLiveVideoPreviewTimedOut: !1,
                        isHovered: !1
                    }, t.onImageLoad = function(e) {
                        void 0 !== t.props.animatedImageProps && e.currentTarget.src === t.props.animatedImageProps.src && t.setState({
                            didAnimatedPreviewLoad: !0
                        })
                    }, t.onImageLoadError = function(e) {
                        void 0 !== t.props.animatedImageProps && e.currentTarget.src === t.props.animatedImageProps.src && t.setState({
                            didAnimatedPreviewFailToLoad: !0
                        })
                    }, t.handleFocus = function() {
                        t.clearTimeouts(), t.setState({
                            isHovered: !0
                        }, function() {
                            t.hoverTimeout = setTimeout(function() {
                                t.state.isHovered && t.setState({
                                    isLiveVideoPreviewLoaded: !1,
                                    isLiveVideoPreviewLoading: !0,
                                    isLiveVideoPreviewTimedOut: !1
                                })
                            }, L)
                        })
                    }, t.handleBlur = function() {
                        t.clearTimeouts(), t.setState({
                            isHovered: !1,
                            isLiveVideoPreviewLoaded: !1,
                            isLiveVideoPreviewLoading: !1,
                            isLiveVideoPreviewTimedOut: !1
                        })
                    }, t.onLivePreviewLoaded = function() {
                        t.clearTimeouts(), t.state.isHovered && (t.setState({
                            isLiveVideoPreviewLoaded: !0,
                            isLiveVideoPreviewLoading: !1
                        }), t.createPreviewTimeout())
                    }, t.createPreviewTimeout = function() {
                        t.previewTimeout && window.clearTimeout(t.previewTimeout), t.previewTimeout = setTimeout(function() {
                            t.state.isHovered && t.setState({
                                isLiveVideoPreviewLoaded: !1,
                                isLiveVideoPreviewLoading: !1,
                                isLiveVideoPreviewTimedOut: !0
                            })
                        }, A)
                    }, t.clearTimeouts = function() {
                        t.hoverTimeout && window.clearTimeout(t.hoverTimeout), t.createPreviewTimeout && window.clearTimeout(t.previewTimeout)
                    }, t.shouldShowLiveVideoPreview = function() {
                        return !!t.props.liveChannelLogin && t.state.isHovered && (t.state.isLiveVideoPreviewLoaded || t.state.isLiveVideoPreviewLoading) && !t.state.isLiveVideoPreviewTimedOut
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.clearTimeouts()
                }, t.prototype.render = function() {
                    var e = {};
                    return (this.props.animatedImageProps || this.props.liveChannelLogin) && (e = {
                        onMouseEnter: this.handleFocus,
                        onMouseLeave: this.handleBlur,
                        onFocus: this.handleFocus,
                        onBlur: this.handleBlur
                    }), a.createElement("div", i.__assign({}, e), this.renderLoadingSpinner(), a.createElement(d._30, {
                        background: d.m.Alt2
                    }, a.createElement(d.j, {
                        ratio: this.props.aspectRatio
                    }, this.renderImage())))
                }, t.prototype.renderImage = function() {
                    var e, t, n = !(!this.props.animatedImageProps || !this.state.isHovered || this.state.didAnimatedPreviewFailToLoad),
                        r = s("preview-card-thumbnail__image", ((e = {})["preview-card-thumbnail__image--animated"] = this.state.isHovered && this.state.didAnimatedPreviewLoad, e["preview-card-thumbnail__image--hidden"] = this.shouldShowLiveVideoPreview() && this.state.isLiveVideoPreviewLoaded, e));
                    return this.shouldShowLiveVideoPreview() ? [a.createElement("div", {
                        key: "player-key",
                        className: s((t = {}, t["preview-card-thumbnail__image--hidden"] = !this.state.isLiveVideoPreviewLoaded, t))
                    }, a.createElement(x.a, {
                        channelLogin: this.props.liveChannelLogin,
                        onPlayerPlaying: this.onLivePreviewLoaded
                    })), a.createElement("div", {
                        key: "image-key",
                        className: r
                    }, a.createElement(d.M, i.__assign({}, this.props.staticImageProps, {
                        "data-test-selector": F
                    })))] : n && void 0 !== this.props.animatedImageProps ? a.createElement("div", {
                        className: r
                    }, a.createElement(d.M, i.__assign({}, this.props.animatedImageProps, {
                        onLoad: this.onImageLoad,
                        onError: this.onImageLoadError,
                        "data-test-selector": F
                    }))) : a.createElement("div", {
                        className: r
                    }, a.createElement(d.M, i.__assign({}, this.props.staticImageProps, {
                        "data-test-selector": F
                    })))
                }, t.prototype.renderLoadingSpinner = function() {
                    if (this.shouldShowLiveVideoPreview() && !this.state.isLiveVideoPreviewLoaded) return a.createElement(d._30, {
                        attachRight: !0,
                        attachTop: !0,
                        background: d.m.Overlay,
                        borderRadius: d.s.Small,
                        color: d.J.OverlayAlt,
                        margin: .5,
                        padding: .5,
                        position: d._14.Absolute,
                        zIndex: d._57.Above
                    }, a.createElement(d._9, {
                        fillContent: !0,
                        inheritColor: !0,
                        size: d._28.Small,
                        delay: 0
                    }))
                }, t
            }(a.Component),
            U = (n("ea7N"), function(e) {
                var t = null;
                return e.subtitles && e.subtitles.length > 0 && (t = e.subtitles.map(function(e, t) {
                    return a.createElement(d._7, {
                        key: t,
                        "data-test-selector": "preview-card-titles__subtitle"
                    }, a.createElement(d.P, {
                        color: d.J.Alt
                    }, "string" == typeof e ? e : a.createElement(d.N, {
                        to: e.linkTo,
                        type: d.O.Inherit
                    }, e.text)))
                })), a.createElement("div", null, a.createElement(d.N, {
                    to: e.linkTo,
                    onClick: e.onClick,
                    type: d.O.Inherit,
                    "data-test-selector": "preview-card-titles__primary-link"
                }, a.createElement(d.P, {
                    type: d._44.H3,
                    fontSize: d.U.Size5,
                    lines: 1,
                    bold: !0,
                    ellipsis: !0
                }, e.title)), a.createElement(d._7, {
                    className: "preview-card-titles__subtitle-wrapper"
                }, t))
            }),
            B = n("IOwa"),
            P = n("mi6k");

        function V(e) {
            return void 0 !== e.streamType
        }

        function H(e) {
            return void 0 !== e.watchedProgressPercent
        }

        function W(e) {
            return void 0 !== e.clipCreatedByChannelLogin
        }! function(e) {
            e[e.SingleGameList = 1] = "SingleGameList", e[e.SingleChannelList = 2] = "SingleChannelList", e[e.MixedGameAndChannelList = 3] = "MixedGameAndChannelList"
        }(O || (O = {}));
        var G = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return i.__extends(t, e), t.prototype.render = function() {
                return a.createElement("div", {
                    className: "preview-card"
                }, a.createElement(d._7, {
                    position: d._14.Relative
                }, a.createElement(d.N, {
                    to: this.props.linkTo,
                    onClick: this.props.onClick
                }, a.createElement(j, {
                    staticImageProps: this.props.thumbnailImageProps,
                    animatedImageProps: H(this.props) && this.props.animatedImageProps || void 0,
                    liveChannelLogin: V(this.props) && this.props.enableLivePreview ? this.props.channelLogin : void 0
                }), this.renderOverlay())), a.createElement(d._7, {
                    display: d.Q.Flex,
                    flexWrap: d.T.NoWrap,
                    margin: {
                        top: 1
                    }
                }, a.createElement(d._7, {
                    flexGrow: 0,
                    flexShrink: 0,
                    padding: {
                        right: 1
                    }
                }, this.renderIconicImage()), a.createElement(d._7, {
                    flexGrow: 1,
                    flexShrink: 1,
                    overflow: d._10.Hidden
                }, this.renderTitles())), this.renderAppendages())
            }, t.prototype.renderOverlay = function() {
                return V(this.props) ? a.createElement(M, {
                    topLeft: a.createElement(B.a, {
                        type: this.props.streamType,
                        hosting: !!this.props.hostedByChannelLogin
                    }),
                    topRight: void 0,
                    bottomLeft: a.createElement(R, {
                        value: Object(r.d)("{viewerCount, plural, one {# viewer} other {# viewers}}", {
                            viewerCount: this.props.currentViewerCount
                        }, "VideoPreviewCard")
                    }),
                    bottomRight: void 0
                }) : H(this.props) ? a.createElement(M, {
                    topLeft: a.createElement(R, {
                        value: Object(P.a)(this.props.durationInSeconds),
                        icon: d._21.GlyphArrRight,
                        withBackground: !0
                    }),
                    topRight: void 0,
                    bottomLeft: a.createElement(R, {
                        value: this.getViewCountLabel()
                    }),
                    bottomRight: a.createElement(R, {
                        value: Object(r.c)(new Date(this.props.datePublished), "medium")
                    }),
                    progressBarPercent: this.props.watchedProgressPercent
                }) : W(this.props) ? a.createElement(M, {
                    topLeft: a.createElement(R, {
                        value: Object(P.a)(this.props.durationInSeconds),
                        icon: d._21.Clip,
                        withBackground: !0
                    }),
                    topRight: void 0,
                    bottomLeft: a.createElement(R, {
                        value: this.getViewCountLabel()
                    }),
                    bottomRight: a.createElement(R, {
                        value: Object(r.c)(new Date(this.props.datePublished), "medium")
                    })
                }) : void 0
            }, t.prototype.getViewCountLabel = function() {
                return H(this.props) || W(this.props) ? Object(r.d)("{viewerCount, plural, one {# view} other {# views}}", {
                    viewerCount: this.props.viewCount
                }, "VideoPreviewCard") : ""
            }, t.prototype.renderIconicImage = function() {
                return this.props.context === O.SingleChannelList && this.props.gameBoxArtImageProps && this.props.gameTitleLinkTo ? a.createElement(T, {
                    imageProps: this.props.gameBoxArtImageProps,
                    linkTo: this.props.gameTitleLinkTo,
                    aspect: d.k.BoxArt
                }) : a.createElement(T, {
                    imageProps: this.props.channelImageProps,
                    linkTo: this.props.channelLoginLinkTo,
                    aspect: d.k.Aspect1x1
                })
            }, t.prototype.renderTitles = function() {
                var e = [{
                    text: this.props.channelLogin,
                    linkTo: this.props.channelLoginLinkTo
                }];
                return W(this.props) ? e.push({
                    text: Object(r.d)("Clipped by {userName}", {
                        userName: this.props.clipCreatedByChannelLogin
                    }, "VideoPreviewCard"),
                    linkTo: this.props.clipCreatedByChannelLoginLinkTo
                }) : this.props.context !== O.SingleGameList && this.props.gameTitle && this.props.gameTitleLinkTo && e.push({
                    text: this.props.gameTitle,
                    linkTo: this.props.gameTitleLinkTo
                }), a.createElement(U, {
                    title: this.props.title,
                    linkTo: this.props.linkTo,
                    subtitles: e
                })
            }, t.prototype.renderAppendages = function() {
                if (this.props.playerMetadata && this.props.playerMetadataGame) return a.createElement(I, {
                    streamMetadata: this.props.playerMetadata,
                    game: this.props.playerMetadataGame
                })
            }, t
        }(a.Component);
        n.d(t, "b", function() {
            return O
        }), n.d(t, "a", function() {
            return G
        })
    },
    vKYI: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("BwgW"),
            r = n("GiK3"),
            o = n("CSlQ"),
            s = n("fc0G"),
            l = n("L3z0"),
            d = n("5MsU"),
            c = {
                autoplay: !0,
                branding: !1,
                channelInfo: !1,
                controls: !1,
                height: "100%",
                playsinline: !0,
                player: s.b.AnimatedThumbnails,
                showInfo: !1,
                trackingProperties: {
                    client_app: "twilight"
                },
                width: "100%",
                oauth_token: ""
            };

        function u() {
            return !!window.Twitch && !!window.Twitch.Player
        }
        var m = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.checkPlayerDependencyStatus = function() {
                    u() ? (n.setState({
                        canInitializePlayer: !0
                    }), n.checkPlayerDependencyAnimationFrame = null) : n.checkPlayerDependencyAnimationFrame = requestAnimationFrame(n.checkPlayerDependencyStatus)
                }, n.attachRef = function(e) {
                    return n.playerRef = e
                }, n.onPlayerReady = function() {
                    n.player && n.setState({
                        playerInitialized: !0
                    })
                }, n.onPlayerPlay = function() {
                    n.player.setVolume(0)
                }, n.onPlayerPlaying = function() {
                    n.player.setQuality("160p30"), n.props.onPlayerPlaying && n.props.onPlayerPlaying()
                }, n.state = {
                    canInitializePlayer: u(),
                    playerInitialized: !1
                }, n
            }
            return i.__extends(t, e), n = t, t.prototype.componentDidMount = function() {
                var e = this;
                if (this.userVolumeSetting = window.localStorage.getItem("volume"), this.userMuteSetting = window.localStorage.getItem("muted"), window.addEventListener("beforeunload", function() {
                        return e.resetVolume()
                    }), this.state.canInitializePlayer ? this.initializePlayer() : this.checkPlayerDependencyAnimationFrame = window.requestAnimationFrame(this.checkPlayerDependencyStatus), window.__playerScriptChunk && !n.tagInjected) {
                    var t = document.createElement("script");
                    t.async = !0, t.crossOrigin = "anonymous", t.src = window.__playerScriptChunk, document.body.appendChild(t);
                    var i = document.createElement("link");
                    i.href = window.__playerStyleChunk, i.media = "screen", i.rel = "stylesheet", i.type = "text/css", document.body.appendChild(i), n.tagInjected = !0
                }
            }, t.prototype.componentWillUpdate = function(e, t) {
                this.state.canInitializePlayer || !t.canInitializePlayer ? t.canInitializePlayer && t.playerInitialized : this.initializePlayer()
            }, t.prototype.render = function() {
                return r.createElement("div", {
                    className: "video-player",
                    "data-test-selector": "thumbnail-video-player"
                }, r.createElement("div", {
                    className: "video-player__container",
                    ref: this.attachRef
                }))
            }, t.prototype.componentWillUnmount = function() {
                var e = this;
                this.checkPlayerDependencyAnimationFrame && cancelAnimationFrame(this.checkPlayerDependencyAnimationFrame), window.removeEventListener("beforeunload", function() {
                    return e.resetVolume()
                }), this.resetVolume(), this.player && (this.player.removeEventListener(d.a.PlayerReady, this.onPlayerReady), this.player.removeEventListener(l.a.Play, this.onPlayerPlay), this.player.removeEventListener(l.a.Playing, this.onPlayerPlaying), a.extensionService.unregisterPlayer(), this.player.destroy())
            }, t.prototype.initializePlayer = function() {
                var e = c;
                this.props.channelLogin && (e.channel = this.props.channelLogin);
                var t = new window.Twitch.Player(this.playerRef, e);
                this.player = t, t.addEventListener(d.a.PlayerReady, this.onPlayerReady), t.addEventListener(l.a.Play, this.onPlayerPlay), t.addEventListener(l.a.Playing, this.onPlayerPlaying), a.extensionService.registerPlayer(this.player)
            }, t.prototype.resetVolume = function() {
                this.userVolumeSetting && window.localStorage.setItem("volume", this.userVolumeSetting), this.userMuteSetting && window.localStorage.setItem("muted", this.userMuteSetting)
            }, t.tagInjected = !1, t = n = i.__decorate([Object(o.d)("LiveChannelPreviewCard")], t);
            var n
        }(r.Component);
        n.d(t, !1, function() {
            return "thumbnail-video-player"
        }), n.d(t, !1, function() {
            return c
        }), n.d(t, "a", function() {
            return m
        })
    },
    vKYs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BlockedUsers"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 61
            }
        };
        n.loc.source = {
            body: "query BlockedUsers {\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vLl9: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 256
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatList_Badges($channelLogin: String!) {\nbadges {\n...badge\n}\nuser(login: $channelLogin) {\nid\nbroadcastBadges {\n...badge\n}\nself {\nselectedBadge {\n...badge\n}\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    vQzq: function(e, t) {},
    vadT: function(e, t) {},
    ve2D: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return 2 === i(e).getDay()
        }
    },
    vh75: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return i
        }), n.d(t, "e", function() {
            return a
        }), n.d(t, "f", function() {
            return r
        }), n.d(t, "g", function() {
            return o
        }), n.d(t, "k", function() {
            return s
        }), n.d(t, "h", function() {
            return l
        }), n.d(t, "i", function() {
            return d
        }), n.d(t, "j", function() {
            return c
        }), n.d(t, "l", function() {
            return u
        }), n.d(t, "c", function() {
            return m
        }), n.d(t, "b", function() {
            return p
        }), n.d(t, "n", function() {
            return h
        }), n.d(t, "m", function() {
            return g
        }), n.d(t, "p", function() {
            return f
        }), n.d(t, "o", function() {
            return v
        }), n.d(t, "t", function() {
            return b
        }), n.d(t, "s", function() {
            return k
        }), n.d(t, "v", function() {
            return y
        }), n.d(t, "u", function() {
            return _
        }), n.d(t, "x", function() {
            return C
        }), n.d(t, "w", function() {
            return S
        }), n.d(t, "a", function() {
            return E
        }), n.d(t, "q", function() {
            return N
        }), n.d(t, "r", function() {
            return w
        }), t.R = function(e, t) {
            return {
                type: u,
                channel: e,
                messages: t
            }
        }, t.B = function() {
            return {
                type: a
            }
        }, t.P = function() {
            return {
                type: C
            }
        }, t.I = function() {
            return {
                type: S
            }
        }, t.T = function() {
            return {
                type: r
            }
        }, t.Q = function() {
            return {
                type: i
            }
        }, t.L = function() {
            return {
                type: m
            }
        }, t.E = function() {
            return {
                type: p
            }
        }, t.M = function() {
            return {
                type: h
            }
        }, t.F = function() {
            return {
                type: g
            }
        }, t.K = function() {
            return {
                type: f
            }
        }, t.D = function() {
            return {
                type: v
            }
        }, t.J = function() {
            return {
                type: s
            }
        }, t.A = function(e, t) {
            return {
                type: c,
                channelLogin: e,
                duration: t
            }
        }, t.z = function(e) {
            return {
                type: d,
                duration: e
            }
        }, t.C = function() {
            return {
                type: l
            }
        }, t.N = function() {
            return {
                type: b
            }
        }, t.G = function() {
            return {
                type: k
            }
        }, t.O = function() {
            return {
                type: y
            }
        }, t.H = function() {
            return {
                type: _
            }
        }, t.y = function(e, t) {
            return {
                type: E,
                command: e.toLowerCase(),
                handler: t
            }
        }, t.S = function(e) {
            return {
                type: N,
                command: e.toLowerCase()
            }
        }, t.U = function(e) {
            return {
                type: w,
                customEvent: e
            }
        };
        var i = "chat.CHAT_HIDDEN",
            a = "chat.CHAT_RESET",
            r = "chat.CHAT_SHOWN",
            o = "chat.EMOTE_SETS_UPDATED",
            s = "chat.FOLLOWER_MODE_ENABLED",
            l = "chat.FOLLOWER_MODE_DISABLED",
            d = "chat.FOLLOWER_MODE_DURATION_CHANGED",
            c = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
            u = "chat.MESSAGES_UPDATED",
            m = "chat.AUTOMOD_ACTIONS_ENABLED",
            p = "chat.AUTOMOD_ACTIONS_DISABLED",
            h = "chat.MODERATION_ACTIONS_ENABLED",
            g = "chat.MODERATION_ACTIONS_DISABLED",
            f = "chat.MOD_ICONS_ENABLED",
            v = "chat.MOD_ICONS_DISABLED",
            b = "chat.SLOW_MODE_ENABLED",
            k = "chat.SLOW_MODE_DISABLED",
            y = "chat.SUBS_ONLY_MODE_ENABLED",
            _ = "chat.SUBS_ONLY_MODE_DISABLED",
            C = "chat.TIMESTAMPS_ENABLED",
            S = "chat.TIMESTAMPS_DISABLED",
            E = "chat.ADD_COMMAND",
            N = "chat.REMOVE_COMMAND",
            w = "chat.RENDER_SENT_CHAT_MESSAGE"
    },
    w0qa: function(e, t) {},
    w4by: function(e, t, n) {
        var i = n("6Zhv"),
            a = 36e5;
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, n * a)
        }
    },
    wAFH: function(e, t, n) {
        var i = n("6Zhv");
        e.exports = function(e, t) {
            var n = Number(t);
            return i(e, -n)
        }
    },
    wPo5: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            var n = i(e),
                a = Number(t);
            return n.setHours(a), n
        }
    },
    wajf: function(e, t, n) {
        var i = n("xA5w"),
            a = n("D6ie");
        e.exports = function(e, t) {
            var n = i(e),
                r = Number(t),
                o = a(n) - r;
            return n.setDate(n.getDate() - 7 * o), n
        }
    },
    weaG: function(e, t) {},
    wiYS: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e, t) {
            if (!(t instanceof Array)) throw new TypeError(toString.call(t) + " is not an instance of Array");
            var n, a, r = i(e).getTime();
            return t.forEach(function(e, t) {
                var o = i(e),
                    s = Math.abs(r - o.getTime());
                (void 0 === n || s < a) && (n = t, a = s)
            }), n
        }
    },
    wuJz: function(e, t, n) {
        e.exports = {
            addDays: n("Jvcu"),
            addHours: n("w4by"),
            addISOYears: n("oNnY"),
            addMilliseconds: n("6Zhv"),
            addMinutes: n("NSOL"),
            addMonths: n("3EIC"),
            addQuarters: n("1rLR"),
            addSeconds: n("nfOx"),
            addWeeks: n("7EGB"),
            addYears: n("4Z4o"),
            areRangesOverlapping: n("2lB6"),
            closestIndexTo: n("wiYS"),
            closestTo: n("Tv4R"),
            compareAsc: n("NKE6"),
            compareDesc: n("YRFD"),
            differenceInCalendarDays: n("nizW"),
            differenceInCalendarISOWeeks: n("0aH9"),
            differenceInCalendarISOYears: n("9Jn5"),
            differenceInCalendarMonths: n("orNa"),
            differenceInCalendarQuarters: n("Jtuq"),
            differenceInCalendarWeeks: n("Q2rx"),
            differenceInCalendarYears: n("Bb5e"),
            differenceInDays: n("gAt4"),
            differenceInHours: n("kjlQ"),
            differenceInISOYears: n("qNYo"),
            differenceInMilliseconds: n("G7No"),
            differenceInMinutes: n("3nPg"),
            differenceInMonths: n("GI7G"),
            differenceInQuarters: n("XFzU"),
            differenceInSeconds: n("25hp"),
            differenceInWeeks: n("6SO/"),
            differenceInYears: n("rO5X"),
            distanceInWords: n("mXYp"),
            distanceInWordsStrict: n("t6pj"),
            distanceInWordsToNow: n("vBvW"),
            eachDay: n("M9Ev"),
            endOfDay: n("MIQa"),
            endOfHour: n("bbdo"),
            endOfISOWeek: n("SZZR"),
            endOfISOYear: n("K7ZZ"),
            endOfMinute: n("LU20"),
            endOfMonth: n("xKy+"),
            endOfQuarter: n("zQFw"),
            endOfSecond: n("+sSA"),
            endOfToday: n("0LAu"),
            endOfTomorrow: n("HXCM"),
            endOfWeek: n("I7cV"),
            endOfYear: n("Epw6"),
            endOfYesterday: n("0YGC"),
            format: n("Eoz/"),
            getDate: n("3g9B"),
            getDay: n("Mbb9"),
            getDayOfYear: n("ymQ7"),
            getDaysInMonth: n("Mdww"),
            getDaysInYear: n("Javx"),
            getHours: n("8Gpr"),
            getISODay: n("AZvW"),
            getISOWeek: n("D6ie"),
            getISOWeeksInYear: n("fUo1"),
            getISOYear: n("zZbG"),
            getMilliseconds: n("024F"),
            getMinutes: n("JNsx"),
            getMonth: n("l85J"),
            getOverlappingDaysInRanges: n("8QR2"),
            getQuarter: n("lQzg"),
            getSeconds: n("eKpK"),
            getTime: n("cwv1"),
            getYear: n("nZeo"),
            isAfter: n("fK0I"),
            isBefore: n("gDPd"),
            isDate: n("607n"),
            isEqual: n("sdTe"),
            isFirstDayOfMonth: n("6udH"),
            isFriday: n("YPf8"),
            isFuture: n("6CZb"),
            isLastDayOfMonth: n("kDuD"),
            isLeapYear: n("b7g8"),
            isMonday: n("kkVd"),
            isPast: n("eCZG"),
            isSameDay: n("f4ga"),
            isSameHour: n("qPxx"),
            isSameISOWeek: n("Be26"),
            isSameISOYear: n("4LxA"),
            isSameMinute: n("Moxe"),
            isSameMonth: n("f+sD"),
            isSameQuarter: n("7yyf"),
            isSameSecond: n("5qwL"),
            isSameWeek: n("8KV+"),
            isSameYear: n("Qxz6"),
            isSaturday: n("6axH"),
            isSunday: n("ZUMa"),
            isThisHour: n("z3wv"),
            isThisISOWeek: n("A2zO"),
            isThisISOYear: n("hUHO"),
            isThisMinute: n("Qbo9"),
            isThisMonth: n("cONr"),
            isThisQuarter: n("uwZN"),
            isThisSecond: n("hj5Y"),
            isThisWeek: n("pe7V"),
            isThisYear: n("kRs6"),
            isThursday: n("yu3m"),
            isToday: n("GvNH"),
            isTomorrow: n("0oN5"),
            isTuesday: n("ve2D"),
            isValid: n("dH3X"),
            isWednesday: n("e/EH"),
            isWeekend: n("4OFc"),
            isWithinRange: n("4zIR"),
            isYesterday: n("1gtq"),
            lastDayOfISOWeek: n("t8zS"),
            lastDayOfISOYear: n("hico"),
            lastDayOfMonth: n("Akl5"),
            lastDayOfQuarter: n("T/Ln"),
            lastDayOfWeek: n("nk30"),
            lastDayOfYear: n("xLg3"),
            max: n("11Bn"),
            min: n("aHtT"),
            parse: n("xA5w"),
            setDate: n("/dIK"),
            setDay: n("SHOI"),
            setDayOfYear: n("CVNg"),
            setHours: n("wPo5"),
            setISODay: n("YPjl"),
            setISOWeek: n("wajf"),
            setISOYear: n("Uu+E"),
            setMilliseconds: n("+/J2"),
            setMinutes: n("danj"),
            setMonth: n("balU"),
            setQuarter: n("jy2q"),
            setSeconds: n("ToRI"),
            setYear: n("a7Cs"),
            startOfDay: n("WNGz"),
            startOfHour: n("LLTj"),
            startOfISOWeek: n("3znZ"),
            startOfISOYear: n("iRXW"),
            startOfMinute: n("M5Oo"),
            startOfMonth: n("7Xwz"),
            startOfQuarter: n("rBmI"),
            startOfSecond: n("VaeB"),
            startOfToday: n("1udo"),
            startOfTomorrow: n("gUEJ"),
            startOfWeek: n("u/4p"),
            startOfYear: n("JURy"),
            startOfYesterday: n("mSFb"),
            subDays: n("cA+x"),
            subHours: n("fo7E"),
            subISOYears: n("MKc+"),
            subMilliseconds: n("wAFH"),
            subMinutes: n("kIFi"),
            subMonths: n("7Swd"),
            subQuarters: n("oke8"),
            subSeconds: n("9r5b"),
            subWeeks: n("cw9o"),
            subYears: n("0UyA")
        }
    },
    x583: function(e, t) {},
    x8iQ: function(e, t) {},
    x9n8: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("V5M+"),
            o = n("Aj/L"),
            s = n("TToO"),
            l = n("HW6M"),
            d = n("GiK3"),
            c = n("6sO2"),
            u = n("J8WN"),
            m = n("+8VM"),
            p = n("7vx8"),
            h = n("puy8"),
            g = n("HZww"),
            f = n("Odds"),
            v = (n("weaG"), function(e) {
                var t = {
                    "default-avatar__selected": e.selected,
                    "default-avatar": !0
                };
                return d.createElement(f._7, {
                    padding: {
                        bottom: 1
                    }
                }, d.createElement("div", {
                    onClick: function() {
                        e.onSelect(e.index)
                    },
                    "aria-label": Object(c.d)("Click to select Default Avatar Number {index, number}", {
                        index: e.index
                    }, "Default Avatar")
                }, d.createElement(f._30, {
                    fullHeight: !0,
                    fullWidth: !0,
                    position: f._14.Relative,
                    className: l(t)
                }, d.createElement("img", {
                    alt: Object(c.d)("Default Avatar Number {index, number}", {
                        index: e.index
                    }, "Default Avatar"),
                    src: e.imageSrc
                }))))
            }),
            b = n("4Q9N"),
            k = n("Tt3k"),
            y = n("W6ca"),
            _ = n("xgnX"),
            C = n("CSlQ"),
            S = (n("AL3x"), n("nmDn")),
            E = ["image/*"],
            N = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        statusMessage: null,
                        imagePreviewURL: "",
                        profileUpdated: !1,
                        currentImageHasTallAspectRatio: !1,
                        imageFormat: ""
                    }, t.currentImage = null, t.logger = c.j.withCategory("ProfileImagePicker"), t.onImageInputChange = function(e) {
                        var n;
                        if (null !== e) {
                            n = e[0];
                            var i = Object(k.a)(n),
                                a = (n.size / 1024 / 1024).toFixed(4);
                            parseInt(a, 10) > 10 ? t.setState({
                                statusMessage: _.b.BadSizeError
                            }) : (t.setState({
                                selectedImageIndex: void 0,
                                imagePreviewURL: "",
                                imageFormat: "",
                                currentImageHasTallAspectRatio: !1
                            }), Object(k.b)(n, function(e) {
                                t.currentImage = e, t.setState({
                                    statusMessage: null
                                })
                            }, function(e) {
                                var n = new Image,
                                    a = !1;
                                n.onload = function() {
                                    n.width < n.height && (a = !0), t.setState({
                                        currentImageHasTallAspectRatio: a
                                    })
                                }, n.src = e, t.setState({
                                    imagePreviewURL: e,
                                    imageFormat: i
                                })
                            }))
                        } else t.setState({
                            statusMessage: _.b.ImageNotSelected
                        })
                    }, t.onUpdateButtonClick = function(e) {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var t, n, i, a, r = this;
                            return s.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        if (e.preventDefault(), void 0 !== this.state.selectedImageIndex) return this.setDefaultAvatar(), [2];
                                        if (!this.currentImage) return this.setState({
                                            statusMessage: _.b.ImageNotSelected
                                        }), [2];
                                        this.setState({
                                            statusMessage: _.b.Uploading
                                        }), o.label = 1;
                                    case 1:
                                        return o.trys.push([1, 3, , 4]), [4, Object(y.a)(this.props.userID, this.props.authToken, b.a.ProfileImage, this.state.imageFormat)];
                                    case 2:
                                        return t = o.sent(), n = t.upload_url, i = t.upload_id, [3, 4];
                                    case 3:
                                        return a = o.sent(), this.logger.error(a, "Request for upload ID failed to get expected response from server."), this.setState({
                                            statusMessage: _.b.UnexpectedError
                                        }), [2];
                                    case 4:
                                        return this.unsubscribe = c.k.subscribe({
                                            topic: Object(g.j)(this.props.userID),
                                            success: function() {
                                                try {
                                                    Object(y.c)(n, r.currentImage)
                                                } catch (e) {
                                                    r.logger.error(e, "Profile Image upload failed."), r.unsubscribe(), r.setState({
                                                        statusMessage: _.b.UnexpectedError,
                                                        selectedImageIndex: void 0,
                                                        imagePreviewURL: "",
                                                        imageFormat: "",
                                                        currentImageHasTallAspectRatio: !1
                                                    })
                                                }
                                                r.timeoutHandle = setTimeout(function() {
                                                    return r.handlePubSubTimeout()
                                                }, 1e4)
                                            },
                                            failure: function() {
                                                r.setState({
                                                    statusMessage: _.b.UnexpectedError,
                                                    selectedImageIndex: void 0,
                                                    imagePreviewURL: "",
                                                    currentImageHasTallAspectRatio: !1
                                                })
                                            },
                                            onMessage: function(e) {
                                                if (e.upload_id === i) {
                                                    clearTimeout(r.timeoutHandle);
                                                    var t = null;
                                                    t = e.status === _.a.Success ? _.b.Success : e.status === _.a.BadSize ? _.b.BadSizeError : e.status === _.a.NonImage ? _.b.NonImageError : e.status === _.a.WrongFormat ? _.b.WrongFormatError : _.b.UnexpectedError, r.unsubscribe && r.unsubscribe(), r.setState({
                                                        statusMessage: t
                                                    }), r.state.statusMessage === _.b.Success ? r.setState({
                                                        profileUpdated: !0
                                                    }) : (r.setState({
                                                        profileUpdated: !1,
                                                        imagePreviewURL: "",
                                                        imageFormat: ""
                                                    }), r.currentImage = null)
                                                }
                                            }
                                        }), [2]
                                }
                            })
                        })
                    }, t.onDefaultImageSelected = function(e) {
                        t.setState({
                            selectedImageIndex: e,
                            imagePreviewURL: Object(h.a)(h.b[e], 300)
                        })
                    }, t.handlePubSubTimeout = function() {
                        t.unsubscribe(), t.setState({
                            statusMessage: _.b.TimeoutError
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    void 0 !== this.unsubscribe && this.unsubscribe(), this.timeoutHandle && clearTimeout(this.timeoutHandle)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this;
                    this.state.profileUpdated && setTimeout(function() {
                        e.props.data && e.props.data.refetch(), e.props.closeModal()
                    }, 1e3)
                }, t.prototype.render = function() {
                    var e = this,
                        t = h.b.map(function(t, n) {
                            return d.createElement(v, {
                                key: t.id,
                                imageSrc: Object(h.a)(t, 300),
                                index: n,
                                onSelect: e.onDefaultImageSelected,
                                selected: e.state.selectedImageIndex === n
                            })
                        }),
                        n = null;
                    if ("" !== this.state.imagePreviewURL) {
                        var i = {
                            "profile-edit__image-preview": !0,
                            "profile-edit__image-preview-tall": this.state.currentImageHasTallAspectRatio
                        };
                        n = d.createElement(f._7, {
                            className: l(i),
                            "data-test-selector": "preview-image",
                            position: f._14.Relative
                        }, d.createElement("img", {
                            src: "" + this.state.imagePreviewURL
                        }))
                    }
                    var a = null;
                    "" === this.state.imagePreviewURL && (a = d.createElement(f._7, {
                        className: "profile-edit__upload-info"
                    }, d.createElement(f._7, null, d.createElement(f._20, {
                        asset: f._21.Plus,
                        type: f._22.Alt2,
                        height: 20,
                        width: 20
                    })), d.createElement(f.P, {
                        type: f._44.H3,
                        color: f.J.Alt2,
                        fontSize: f.U.Size4
                    }, Object(c.d)("Upload a Photo", "Profile Edit"))));
                    var r = null;
                    this.props.showCloser && (r = d.createElement(m.a, null));
                    var o = null;
                    if (null !== this.state.statusMessage) {
                        var s = Object(_.c)(this.state.statusMessage),
                            p = s.message,
                            g = s.type;
                        o = d.createElement(f._11, {
                            label: p,
                            type: g
                        })
                    }
                    var b = this.props.login;
                    return this.props.displayName && (b = this.props.displayName), d.createElement(f._7, {
                        className: "profile-edit",
                        position: f._14.Relative,
                        fullHeight: !0
                    }, d.createElement(f._30, {
                        className: "profile-edit__background-container",
                        background: f.m.Base,
                        fullWidth: !0
                    }, d.createElement(f._7, {
                        padding: 2,
                        display: f.Q.InlineBlock,
                        position: f._14.Relative,
                        textAlign: f._40.Center,
                        fullWidth: !0
                    }, d.createElement(f._30, {
                        textAlign: f._40.Left,
                        borderBottom: !0,
                        padding: {
                            bottom: 1
                        },
                        margin: {
                            bottom: 2
                        }
                    }, d.createElement(f.P, {
                        type: f._44.H3,
                        color: f.J.Alt2,
                        fontSize: f.U.Size4
                    }, Object(c.d)("Edit Profile Picture for {userName}", {
                        userName: b
                    }, "Profile Edit"), " ")), d.createElement(f._7, {
                        className: "profile-edit__upload-container",
                        display: f.Q.InlineBlock,
                        position: f._14.Relative,
                        textAlign: f._40.Center,
                        margin: {
                            bottom: 1
                        }
                    }, d.createElement(f._7, {
                        className: "profile-edit__upload",
                        display: f.Q.InlineBlock,
                        position: f._14.Relative,
                        textAlign: f._40.Center
                    }, d.createElement(u.a, {
                        allowedFileTypes: E,
                        onFilesSubmitted: this.onImageInputChange
                    }, a), n)), d.createElement(f._30, {
                        "data-test-selector": "status-message",
                        fontSize: f.U.Size4,
                        position: f._14.Relative,
                        textAlign: f._40.Center,
                        className: "profile-edit__status-message"
                    }, o), d.createElement(f._30, {
                        borderBottom: !0,
                        padding: {
                            bottom: .5
                        },
                        margin: {
                            bottom: 2
                        }
                    }, d.createElement(f._7, {
                        textAlign: f._40.Left,
                        margin: {
                            bottom: 1
                        }
                    }, d.createElement(f.P, {
                        type: f._44.H3,
                        color: f.J.Alt2,
                        fontSize: f.U.Size5
                    }, Object(c.d)("Or select one of these", "Profile Edit"))), d.createElement(f._50, {
                        childWidth: f._51.ExtraSmall,
                        gutterSize: f._52.ExtraSmall,
                        placeholderItems: 3
                    }, t)), d.createElement(f._7, {
                        display: f.Q.Flex,
                        justifyContent: f._6.Center
                    }, d.createElement(f.u, {
                        "data-test-selector": "update-button",
                        onClick: this.onUpdateButtonClick,
                        size: f.y.Large
                    }, Object(c.d)("Update", "Profile Edit"))))), r)
                }, t.prototype.setDefaultAvatar = function() {
                    return s.__awaiter(this, void 0, void 0, function() {
                        var e, t, n;
                        return s.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    this.setState({
                                        statusMessage: _.b.Uploading
                                    }), e = _.b.UnexpectedError, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, Object(y.b)(this.props.userID, this.props.authToken, this.state.selectedImageIndex)];
                                case 2:
                                    return 204 === (t = i.sent()).status || 200 === t.status ? e = _.b.Success : this.logger.error(new Error("Default Avatar PUT failed. Fetch returned non-200 status: " + t.status), "Default Avatar PUT failed. Fetch returned non-200 status: " + t.status), [3, 4];
                                case 3:
                                    return n = i.sent(), this.logger.error(n, "Default Avatar PUT failed."), [3, 4];
                                case 4:
                                    return this.setState({
                                        statusMessage: e,
                                        profileUpdated: e === _.b.Success
                                    }), [2]
                            }
                        })
                    })
                }, t = s.__decorate([Object(p.a)(S, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.login
                            }
                        }
                    }
                })], t)
            }(d.Component),
            w = Object(C.d)("Profile Edit")(N);
        var D = Object(i.b)(function(e) {
            return {
                authToken: Object(o.a)(e)
            }
        }, function(e, t) {
            return Object(a.b)({
                closeModal: function() {
                    return t.successCallback && t.successCallback(), Object(r.c)()
                }
            }, e)
        })(w);
        n.d(t, "a", function() {
            return D
        })
    },
    xA5w: function(e, t, n) {
        var i = n("607n"),
            a = 36e5,
            r = 6e4,
            o = 2,
            s = /[T ]/,
            l = /:/,
            d = /^(\d{2})$/,
            c = [/^([+-]\d{2})$/, /^([+-]\d{3})$/, /^([+-]\d{4})$/],
            u = /^(\d{4})/,
            m = [/^([+-]\d{4})/, /^([+-]\d{5})/, /^([+-]\d{6})/],
            p = /^-(\d{2})$/,
            h = /^-?(\d{3})$/,
            g = /^-?(\d{2})-?(\d{2})$/,
            f = /^-?W(\d{2})$/,
            v = /^-?W(\d{2})-?(\d{1})$/,
            b = /^(\d{2}([.,]\d*)?)$/,
            k = /^(\d{2}):?(\d{2}([.,]\d*)?)$/,
            y = /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,
            _ = /([Z+-].*)$/,
            C = /^(Z)$/,
            S = /^([+-])(\d{2})$/,
            E = /^([+-])(\d{2}):?(\d{2})$/;

        function N(e, t, n) {
            t = t || 0, n = n || 0;
            var i = new Date(0);
            i.setUTCFullYear(e, 0, 4);
            var a = 7 * t + n + 1 - (i.getUTCDay() || 7);
            return i.setUTCDate(i.getUTCDate() + a), i
        }
        e.exports = function(e, t) {
            if (i(e)) return new Date(e.getTime());
            if ("string" != typeof e) return new Date(e);
            var n = (t || {}).additionalDigits;
            n = null == n ? o : Number(n);
            var w = function(e) {
                    var t, n = {},
                        i = e.split(s);
                    if (l.test(i[0]) ? (n.date = null, t = i[0]) : (n.date = i[0], t = i[1]), t) {
                        var a = _.exec(t);
                        a ? (n.time = t.replace(a[1], ""), n.timezone = a[1]) : n.time = t
                    }
                    return n
                }(e),
                D = function(e, t) {
                    var n, i = c[t],
                        a = m[t];
                    if (n = u.exec(e) || a.exec(e)) {
                        var r = n[1];
                        return {
                            year: parseInt(r, 10),
                            restDateString: e.slice(r.length)
                        }
                    }
                    if (n = d.exec(e) || i.exec(e)) {
                        var o = n[1];
                        return {
                            year: 100 * parseInt(o, 10),
                            restDateString: e.slice(o.length)
                        }
                    }
                    return {
                        year: null
                    }
                }(w.date, n),
                O = D.year,
                I = function(e, t) {
                    if (null === t) return null;
                    var n, i, a, r;
                    if (0 === e.length) return (i = new Date(0)).setUTCFullYear(t), i;
                    if (n = p.exec(e)) return i = new Date(0), a = parseInt(n[1], 10) - 1, i.setUTCFullYear(t, a), i;
                    if (n = h.exec(e)) {
                        i = new Date(0);
                        var o = parseInt(n[1], 10);
                        return i.setUTCFullYear(t, 0, o), i
                    }
                    if (n = g.exec(e)) {
                        i = new Date(0), a = parseInt(n[1], 10) - 1;
                        var s = parseInt(n[2], 10);
                        return i.setUTCFullYear(t, a, s), i
                    }
                    if (n = f.exec(e)) return r = parseInt(n[1], 10) - 1, N(t, r);
                    if (n = v.exec(e)) {
                        r = parseInt(n[1], 10) - 1;
                        var l = parseInt(n[2], 10) - 1;
                        return N(t, r, l)
                    }
                    return null
                }(D.restDateString, O);
            if (I) {
                var T, M = I.getTime(),
                    R = 0;
                return w.time && (R = function(e) {
                    var t, n, i;
                    if (t = b.exec(e)) return (n = parseFloat(t[1].replace(",", "."))) % 24 * a;
                    if (t = k.exec(e)) return n = parseInt(t[1], 10), i = parseFloat(t[2].replace(",", ".")), n % 24 * a + i * r;
                    if (t = y.exec(e)) {
                        n = parseInt(t[1], 10), i = parseInt(t[2], 10);
                        var o = parseFloat(t[3].replace(",", "."));
                        return n % 24 * a + i * r + 1e3 * o
                    }
                    return null
                }(w.time)), w.timezone ? (x = w.timezone, T = (L = C.exec(x)) ? 0 : (L = S.exec(x)) ? (A = 60 * parseInt(L[2], 10), "+" === L[1] ? -A : A) : (L = E.exec(x)) ? (A = 60 * parseInt(L[2], 10) + parseInt(L[3], 10), "+" === L[1] ? -A : A) : 0) : (T = new Date(M + R).getTimezoneOffset(), T = new Date(M + R + T * r).getTimezoneOffset()), new Date(M + R + T * r)
            }
            var x, L, A;
            return new Date(e)
        }
    },
    "xKy+": function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e),
                n = t.getMonth();
            return t.setFullYear(t.getFullYear(), n + 1, 0), t.setHours(23, 59, 59, 999), t
        }
    },
    xLg3: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e),
                n = t.getFullYear();
            return t.setFullYear(n + 1, 0, 0), t.setHours(0, 0, 0, 0), t
        }
    },
    xZvS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissPurchaseToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPurchaseTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissPurchaseToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 113
            }
        };
        n.loc.source = {
            body: "mutation DismissPurchaseToken($input:DismissPurchaseTokenInput!) {\ndismissPurchaseToken(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xfb5: function(e, t) {},
    xgnX: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), t.c = function(e) {
            switch (e) {
                case a.Success:
                    return {
                        message: Object(r.d)("Success!", "Profile Edit"),
                        type: o._12.Success
                    };
                case a.UnexpectedError:
                    return {
                        message: Object(r.d)("Unexpected error, please try again.", "Profile Edit"),
                        type: o._12.Alert
                    };
                case a.BadSizeError:
                    return {
                        message: Object(r.d)("Image might exceed 10MB.", "Profile Edit"),
                        type: o._12.Alert
                    };
                case a.NonImageError:
                    return {
                        message: Object(r.d)("You must upload an image.", "Profile Edit"),
                        type: o._12.Alert
                    };
                case a.WrongFormatError:
                    return {
                        message: Object(r.d)("You must select a valid image type.", "Profile Edit"),
                        type: o._12.Alert
                    };
                case a.TimeoutError:
                    return {
                        message: Object(r.d)("Upload timed-out. Please try again.", "Profile Edit"),
                        type: o._12.Alert
                    };
                case a.Uploading:
                    return {
                        message: Object(r.d)("Uploading....", "Profile Edit"),
                        type: o._12.Brand
                    };
                case a.ImageNotSelected:
                    return {
                        message: Object(r.d)("Select a image first.", "Profile Edit"),
                        type: o._12.Alert
                    };
                default:
                    return {
                        message: Object(r.d)("Please try again.", "Profile Edit"),
                        type: o._12.Alert
                    }
            }
        };
        var i, a, r = n("6sO2"),
            o = n("Odds");
        ! function(e) {
            e.Success = "SUCCESS", e.NonImage = "IS_IMAGE_VALIDATION_FAILED", e.WrongFormat = "IMAGE_FORMAT_VALIDATION_FAILED", e.BadSize = "FILE_SIZE_VALIDATION_FAILED"
        }(i || (i = {})),
        function(e) {
            e[e.Success = 0] = "Success", e[e.UnexpectedError = 1] = "UnexpectedError", e[e.BadSizeError = 2] = "BadSizeError", e[e.NonImageError = 3] = "NonImageError", e[e.WrongFormatError = 4] = "WrongFormatError", e[e.TimeoutError = 5] = "TimeoutError", e[e.Uploading = 6] = "Uploading", e[e.ImageNotSelected = 7] = "ImageNotSelected"
        }(a || (a = {}))
    },
    "y0i/": function(e, t) {},
    "y1/w": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 190
            }
        };
        n.loc.source = {
            body: "query RecentRaidsModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yF7E: function(e, t) {},
    ySfT: function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            a = n("6sO2"),
            r = n("3iBR"),
            o = n("qe65"),
            s = n("Odds"),
            l = (n("6lb1"), {
                themed: !0,
                dark: {
                    "1x": r.b + "/dark/animated/1/cheertutorial.gif"
                },
                light: {
                    "1x": r.b + "/light/animated/1/cheertutorial.gif"
                }
            }),
            d = function() {
                return i.createElement(s._7, {
                    display: s.Q.Flex,
                    padding: {
                        top: 5
                    },
                    flexGrow: 1,
                    flexDirection: s.S.Column,
                    justifyContent: s._6.Center,
                    alignItems: s.c.Center
                }, i.createElement(s.P, {
                    type: s._44.H4,
                    bold: !0
                }, i.createElement(o.a, {
                    className: "cheermote-help__tutorial-image",
                    sources: l
                }), Object(a.d)("How to Cheer", "Bits--CheermoteHelp")), i.createElement("p", {
                    className: "t-bits-card__contents-body t-bits-card__contents-body--narrow"
                }, Object(a.d)('Type "cheer" + the number of Bits you want to Cheer.', "Bits--CheermoteHelp")))
            };
        n.d(t, "a", function() {
            return d
        })
    },
    yU6t: function(e, t) {},
    ymQ7: function(e, t, n) {
        var i = n("xA5w"),
            a = n("JURy"),
            r = n("nizW");
        e.exports = function(e) {
            var t = i(e);
            return r(t, a(t)) + 1
        }
    },
    yqxY: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return u
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = (n.n(a), n("6sO2")),
            o = n("l21v"),
            s = n("Odds"),
            l = n("Tur5"),
            d = n("qDcU"),
            c = (n.n(d), [{
                id: "30259",
                alt: "HeyGuys"
            }, {
                id: "81274",
                alt: "VoHiYo"
            }, {
                id: "64138",
                alt: "SeemsGood"
            }]),
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onEmoteClick = function(e) {
                        if (n.renderedTokenID) {
                            var t = e.currentTarget.dataset.emoteString;
                            t ? n.props.onRitualRedeemed(n.renderedTokenID, t) : r.j.warn("[NewChatterRitual] Could not find clicked emote ID.")
                        } else r.j.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.onCloseButtonClick = function() {
                        n.renderedTokenID ? n.props.onRitualDismissed(n.renderedTokenID) : r.j.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.getAvailableToken = function() {
                        return n.props.ritualTokens.find(function(e) {
                            return e.type === l.RitualTokenType.NewChatter && e.status === l.RitualTokenStatus.Available && (!e.expiresAt || Date.now() < new Date(e.expiresAt).valueOf())
                        }) || null
                    }, n.renderedTokenID = null, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.getAvailableToken();
                    if (this.renderedTokenID = t ? t.id : null, !t) return null;
                    var n = c.map(function(t) {
                        return a.createElement(s._7, {
                            key: t.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, a.createElement(s._47, {
                            label: t.alt
                        }, a.createElement(s._5, {
                            alpha: !0,
                            onClick: e.onEmoteClick,
                            "data-emote-string": t.alt,
                            "data-test-selector": "emote-button"
                        }, a.createElement(s._7, {
                            padding: .5
                        }, a.createElement("img", {
                            className: "new-chatter-ritual__emote",
                            src: Object(o.f)(t.id, 3)
                        })))))
                    });
                    return a.createElement(s._30, {
                        background: s.m.Base,
                        border: !0,
                        className: "new-chatter-ritual",
                        margin: {
                            x: 2,
                            bottom: .5
                        },
                        padding: {
                            left: .5,
                            y: .5
                        }
                    }, a.createElement(s._7, {
                        alignItems: s.c.Center,
                        display: s.Q.Flex,
                        flexWrap: s.T.NoWrap
                    }, a.createElement(s._7, {
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, this.props.bannerMessage), n, a.createElement(s._30, {
                        borderLeft: !0,
                        flexShrink: 0
                    }, a.createElement(s.v, {
                        ariaLabel: "close",
                        icon: s._21.Close,
                        onClick: this.onCloseButtonClick,
                        size: s.w.Large,
                        "data-test-selector": "dismiss-button"
                    }))))
                }, t
            }(a.Component)
    },
    yu3m: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            return 4 === i(e).getDay()
        }
    },
    z3wv: function(e, t, n) {
        var i = n("qPxx");
        e.exports = function(e) {
            return i(new Date, e)
        }
    },
    z4Db: function(e, t) {},
    z7Cp: function(e, t) {},
    zLjL: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Mods"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "mods"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "query Mods($id: ID!) {\nuser(id: $id) {\nid\nmods(first: 100) {\nedges {\nnode {\nid\nlogin\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zMie: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomInteractionPane"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 96
            }
        };
        n.loc.source = {
            body: "query RoomInteractionPane($id: ID!) {\nroom(id: $id) {\nid\nname\nowner {\nid\ndisplayName\nlogin\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zQFw: function(e, t, n) {
        var i = n("xA5w");
        e.exports = function(e) {
            var t = i(e),
                n = t.getMonth(),
                a = n - n % 3 + 3;
            return t.setMonth(a, 0), t.setHours(23, 59, 59, 999), t
        }
    },
    zVM8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "query ViewerCardModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zZbG: function(e, t, n) {
        var i = n("xA5w"),
            a = n("3znZ");
        e.exports = function(e) {
            var t = i(e),
                n = t.getFullYear(),
                r = new Date(0);
            r.setFullYear(n + 1, 0, 4), r.setHours(0, 0, 0, 0);
            var o = a(r),
                s = new Date(0);
            s.setFullYear(n, 0, 4), s.setHours(0, 0, 0, 0);
            var l = a(s);
            return t.getTime() >= o.getTime() ? n + 1 : t.getTime() >= l.getTime() ? n : n - 1
        }
    },
    zbFZ: function(e, t) {},
    zzpv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WatchAdModal_Redeeem"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemTrueXAdInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "redeemTrueXAd"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "grantedBits"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 105
            }
        };
        n.loc.source = {
            body: "mutation WatchAdModal_Redeeem($input:RedeemTrueXAdInput!) {\nredeemTrueXAd(input:$input) {\ngrantedBits\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    }
});
//# sourceMappingURL=pages.channel-videos-c133fb0c39562978b8a958e5afda8f5d.js.map