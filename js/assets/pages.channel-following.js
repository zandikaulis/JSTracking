webpackJsonp([43], {
    "+5Qw": function(e, t) {},
    "+Aaf": function(e, t) {},
    "+V/3": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "a", function() {
            return o
        });
        var i = "subscribe_to_channel",
            a = "turbo",
            r = "visit_url",
            o = "broadcaster"
    },
    "+WrY": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("1F7R"),
            d = n("O0Qc"),
            c = n("OLl6"),
            u = n("uXDg"),
            m = n("qzJ+"),
            p = n("m4HT"),
            h = n("QPF3"),
            g = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleWhisperCommand = function(e) {
                        var n = Object(d.r)(e),
                            i = n.recipientLogin,
                            a = n.body;
                        return i && a ? t.props.isEmbedded || t.props.isPopout ? {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("Please use the whisper window for whispers.", "WhisperCommandHandler")
                            })
                        } : i.toLowerCase() === t.props.userLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("You cannot whisper to yourself.", "WhisperCommandHandler")
                            })
                        } : t.props.userID ? t.initiateWhisper(i, a) : void 0 : {
                            preserveInput: !0,
                            deferred: Promise.resolve({
                                notice: Object(s.d)('Usage: "/w [login] [message]"', "WhisperCommandHandler")
                            })
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(l.a, {
                        command: "w",
                        handler: this.handleWhisperCommand
                    })
                }, t.prototype.initiateWhisper = function(e, t) {
                    var n = this;
                    return {
                        deferred: new Promise(function(a, r) {
                            return i.__awaiter(n, void 0, void 0, function() {
                                var n, o, l, d;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            return i.trys.push([0, 2, , 3]), [4, Object(c.a)(e)];
                                        case 1:
                                            return n = i.sent(), [3, 3];
                                        case 2:
                                            return o = i.sent(), s.j.warn(o, "Failed to fetch user targeted by whisper command.", {
                                                recipientLogin: e
                                            }), [2, r(o)];
                                        case 3:
                                            return n ? [3, 4] : [2, a({
                                                notice: Object(s.d)("No user matching that login.", "WhisperCommandHandler")
                                            })];
                                        case 4:
                                            return i.trys.push([4, 6, , 7]), [4, Object(m.a)({
                                                currentUserID: this.props.userID,
                                                emotes: this.props.emoteMap || {},
                                                message: t,
                                                recipientUserID: n
                                            })];
                                        case 5:
                                            return i.sent(), [3, 7];
                                        case 6:
                                            return l = i.sent(), s.j.error(l, "Failed to send whisper using whisper command.", {
                                                currentUserID: this.props.userID,
                                                recipientUserID: n
                                            }), [2, a({
                                                notice: Object(s.d)("Unable to send Whisper at this moment.", "WhisperCommandHandler")
                                            })];
                                        case 7:
                                            return d = Object(p.a)(this.props.userID, n), this.props.openThread(d), [2, a({})]
                                    }
                                })
                            })
                        })
                    }
                }, t
            }(a.Component);
        var f = Object(r.b)(null, function(e) {
            return Object(o.b)({
                openThread: function(e) {
                    return Object(u.l)({
                        threadID: e,
                        collapsed: !0
                    }, Object(h.a)())
                }
            }, e)
        })(g);
        n.d(t, "a", function() {
            return f
        })
    },
    "+po9": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "leaderboardItem"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsLeaderboard"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "items"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "edges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "node"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entryKey"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "rank"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 106
            }
        };
        n.loc.source = {
            body: "fragment leaderboardItem on BitsLeaderboard {\nitems {\nedges {\ncursor\nnode {\nid\nentryKey\nrank\nscore\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "/LBW": function(e, t, n) {
        "use strict";
        t.h = function(e) {
            var t = {
                action_name: e.actionName,
                action_type: "click",
                client_time: (new Date).getTime(),
                displayed_balance: e.displayedBalance,
                emote_level: e.emoteLevel,
                emote_type: e.emoteType,
                bits_location: e.location || o.ChatTooltip
            };
            i.n.track(a.SpadeEventType.BitsCardInteraction, t)
        }, n.d(t, "b", function() {
            return o
        }), n.d(t, "a", function() {
            return s
        }), t.d = function(e) {
            if (e && l[e]) return l[e];
            return i.j.error(new Error('Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), 'Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), s.Buy100
        }, t.e = function(e) {
            var t = {
                channel: e.channel,
                channel_id: e.channelID,
                available: e.available,
                host: "twitch.tv"
            };
            i.n.track(a.SpadeEventType.BitsAdsAvailability, t)
        }, t.f = function(e) {
            var t = {
                distinct_id: i.o.session.deviceID,
                host: "twitch.tv",
                request_id: e.requestID,
                campaign_id: e.campaignID,
                adblock: e.adblock
            };
            i.n.track(a.SpadeEventType.BitsAdsImpression, t)
        }, n.d(t, "c", function() {
            return r
        }), t.g = function(e) {
            var t = i.n.getLastPageview(),
                n = {
                    location: t && t.location || "",
                    ad_returned: null,
                    campaign_id: e.campaignID,
                    distinct_id: i.o.session.deviceID,
                    host: "twitch.tv",
                    request_id: e.requestID,
                    request_method: e.requestMethod
                };
            i.n.track(a.SpadeEventType.BitsAdsRequest, n)
        };
        var i = n("6sO2"),
            a = n("vH/s");
        var r, o = {
                ChatTooltip: "card",
                GetBitsButton: "get_bits_button",
                BitsLandingPage: "bits_landing_page"
            },
            s = {
                BuyMain: "buy_main",
                Buy100: "buy_100",
                Buy500: "buy_500",
                Buy1000: "buy_1000",
                Buy1500: "buy_1500",
                Buy5000: "buy_5000",
                Buy10000: "buy_10000",
                Buy25000: "buy_25000",
                CloseCard: "menu_close",
                OpenCard: "menu_open",
                PreviewEmote: "emote_preview",
                WatchAd: "watch_ad",
                WatchAnotherAd: "watch_another_ad",
                CheeringInRoom: "cheering_in_room"
            },
            l = {
                100: s.Buy100,
                500: s.Buy500,
                1000: s.Buy1000,
                1500: s.Buy1500,
                5000: s.Buy5000,
                10000: s.Buy10000,
                25000: s.Buy25000
            };
        ! function(e) {
            e.ShowAdButton = "show_ad_button"
        }(r || (r = {}))
    },
    "/eFD": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatSettings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "blockLinks"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rules"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatDelayMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "query Chat_ChannelData($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nlogin\ndisplayName\nchatSettings {\nblockLinks\nrules\nchatDelayMs\n}\nself {\nisModerator\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "/eRw": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RoomPane_SendRoomMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendRoomMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendRoomMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "roomMessageContent"
                                        },
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sender"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatColor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "remainingDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 338
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/rooms/models/room-message-content-fragment.gql"\nmutation RoomPane_SendRoomMessage($input: SendRoomMessageInput!) {\nsendRoomMessage(input: $input) {\nmessage {\nid\ndeletedAt\nsentAt\n...roomMessageContent\nsender {\nid\nlogin\nchatColor\ndisplayName\n}\n}\nerror {\ncode\nslowModeDurationSeconds\nremainingDurationSeconds\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("2LJg").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "0H+u": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserImageUploader"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "offlineImageURL"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 108
            }
        };
        n.loc.source = {
            body: "query UserImageUploader($login: String!) {\nuser(login: $login) {\nid\nlogin\nbannerImageURL\nofflineImageURL\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0ImK": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "embeddedEmote"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "EmbeddedEmote"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "emoteID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "from"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "to"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 65
            }
        };
        n.loc.source = {
            body: "fragment embeddedEmote on EmbeddedEmote {\nemoteID\nsetID\nfrom\nto\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "11M/": function(e, t, n) {
        "use strict";
        n("R9op");
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("ass3");
        a.o.store.registerReducer("viewerCard", function(e, t) {
            switch (void 0 === e && (e = {
                viewerCardOptions: null
            }), t.type) {
                case r.a:
                    return i.__assign({}, e, {
                        viewerCardOptions: null
                    });
                case r.b:
                    return t.viewerCardOptions ? i.__assign({}, e, {
                        viewerCardOptions: i.__assign({}, t.viewerCardOptions)
                    }) : e;
                default:
                    return e
            }
        });
        var o, s = n("RH2O"),
            l = n("Aj/L"),
            d = n("GiK3"),
            c = n("7vx8"),
            u = n("3zLD"),
            m = n("2KeS"),
            p = n("NXs7"),
            h = n("QKs+"),
            g = n("Ldv2"),
            f = n("NikC"),
            v = n("ZVME"),
            b = n("0nzt"),
            k = n("1F7R"),
            y = n("J4ib"),
            _ = n("Y5T0");
        ! function(e) {
            e.Recent = "RECENT", e.Top = "TOP"
        }(o || (o = {}));
        var C, S = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.unpinRecentCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return i.__awaiter(t, void 0, void 0, function() {
                                    return i.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: o.Recent
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(y.d)("Recent cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t.resetTopCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return i.__awaiter(t, void 0, void 0, function() {
                                    return i.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: o.Top
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(y.d)("Top cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return d.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, d.createElement(k.a, {
                        command: "unpin",
                        handler: this.unpinRecentCheer
                    }), d.createElement(k.a, {
                        command: "reset",
                        handler: this.resetTopCheer
                    }))
                }, t = i.__decorate([Object(c.a)(_, {
                    name: "dismissPinnedCheer"
                })], t)
            }(d.Component),
            E = n("iydZ"),
            N = n("bkpq"),
            w = n("uLsu"),
            D = n("+WrY"),
            O = n("HW6M"),
            I = n("RweG"),
            R = n("aMxy"),
            T = n("oIkB"),
            M = n("HZww"),
            L = n("vH/s"),
            x = n("iMOk"),
            A = n("Odds"),
            F = (n("y0i/"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        formInputValue: "",
                        sharing: !1
                    }, t.hasUnmounted = !1, t.handleShareClick = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            return i.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            sharing: !0
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, , 3, 4]), [4, this.props.onShare(this.state.formInputValue)];
                                    case 2:
                                        return e.sent(), [3, 4];
                                    case 3:
                                        return this.hasUnmounted || this.setState({
                                            sharing: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.onInputChange = function(e) {
                        t.setState({
                            formInputValue: e.currentTarget.value
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.hasUnmounted = !1
                }, t.prototype.componentWillUnmount = function() {
                    this.hasUnmounted = !0
                }, t.prototype.render = function() {
                    var e = O("share-input", {
                            "share-input--hidden": this.props.hide
                        }),
                        t = this.state.formInputValue.length > 255,
                        n = t ? "-" + (this.state.formInputValue.length - 255) : Object(a.d)("Share", "ChatResubNotification"),
                        i = Object(a.d)("Close", "ChatResubNotification"),
                        r = Object(a.d)("Add a message to the streamer", "ChatResubNotification"),
                        o = this.state.sharing ? A.z.Loading : A.z.Default;
                    return d.createElement(A._4, {
                        className: e,
                        padding: 1,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: A._11.Absolute
                    }, d.createElement(A._27, {
                        className: "share-input__container",
                        position: A._11.Relative,
                        border: !0,
                        background: A.m.Base,
                        padding: 1
                    }, d.createElement(A._4, {
                        position: A._11.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, d.createElement(A.v, {
                        ariaLabel: i,
                        onClick: this.props.onClose,
                        type: A.x.Secondary,
                        icon: A._18.Close,
                        "data-a-target": "resub-notification-close-form-btn",
                        "data-test-selector": "share-input__close-form-btn"
                    })), d.createElement(A._4, {
                        textAlign: A._37.Center,
                        padding: {
                            top: 1,
                            bottom: 2
                        }
                    }, this.props.children), d.createElement(A._4, {
                        display: A.P.Flex,
                        flexWrap: A.S.NoWrap
                    }, d.createElement(A._4, {
                        fullWidth: !0
                    }, d.createElement(A._0, {
                        autoFocus: !0,
                        type: A._1.Text,
                        value: this.state.formInputValue,
                        onChange: this.onInputChange,
                        placeholder: r,
                        "data-a-target": "resub-notification-share-message-input",
                        "data-test-selector": "share-input__share-message-input"
                    })), d.createElement(A.u, {
                        disabled: t,
                        onClick: this.handleShareClick,
                        "data-a-target": "resub-notification-send-msg-btn",
                        "data-test-selector": "share-input__send-msg-btn",
                        state: o
                    }, n))))
                }, t
            }(d.Component)),
            j = (n("54rb"), function(e) {
                var t = Object(a.d)("Share", "Chat--SharePrompt"),
                    n = Object(a.d)("Close", "Chat--SharePrompt"),
                    i = O("chat-share-prompt", {
                        "chat-share-prompt--hidden": e.hide || !e.children
                    });
                return d.createElement(A._4, {
                    position: A._11.Absolute,
                    fullWidth: !0,
                    className: i,
                    padding: {
                        y: .5,
                        left: .5
                    }
                }, d.createElement(A._4, {
                    display: A.P.Flex,
                    padding: 1,
                    justifyContent: A._3.Between,
                    alignItems: A.c.Center,
                    flexWrap: A.S.NoWrap
                }, d.createElement(A.O, {
                    "data-a-target": "resub-notification-months-subbed-text",
                    "data-test-selector": "share-prompt__text"
                }, e.children), d.createElement(A._4, {
                    display: A.P.Flex,
                    flexWrap: A.S.NoWrap,
                    alignItems: A.c.Center,
                    flexShrink: 0,
                    padding: {
                        left: .5
                    }
                }, d.createElement(A._4, {
                    display: A.P.Inline,
                    padding: {
                        right: .5
                    },
                    flexShrink: 0
                }, d.createElement(A.u, {
                    onClick: e.onClickShare,
                    size: A.y.Small,
                    "data-a-target": "resub-notification-share-notification-btn",
                    "data-test-selector": "share-prompt__share-btn"
                }, t)), d.createElement(A._4, {
                    flexShrink: 0
                }, d.createElement(A.v, {
                    ariaLabel: n,
                    onClick: e.onClickClose,
                    type: A.x.Secondary,
                    icon: A._18.Close,
                    "data-a-target": "resub-notification-close-notification-btn",
                    "data-test-selector": "share-prompt__close-btn"
                })))))
            }),
            B = n("Tzcg"),
            U = n("xZvS"),
            P = n("cxe8"),
            V = n("QNxL"),
            H = (n("BTUa"), "chat_dismiss"),
            W = "chat_share",
            G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.purchaseTokensExist = function(e) {
                        return e.data.user.self && e.data.user.self.purchaseTokens.length > 0
                    }, t.manageParentSpace = function(e) {
                        t.dataIsReady(e) && t.purchaseTokensExist(e) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissPurchaseToken = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), e = this.props.data.user.self.purchaseTokens[0], t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(T.d)(P, {
                                            channelLogin: this.props.channelLogin
                                        }, t), a.n.track(L.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: e.asin,
                                            item_name: e.title,
                                            context: H,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), [4, this.props.dismissPurchaseToken(Object(T.a)({
                                            token: e.id,
                                            channelID: this.props.data.user.id
                                        }))];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.sharePurchase = function(e) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, , 3, 4]), t = this.props.data.user.self.purchaseTokens[0], [4, this.props.sharePurchaseTokenInChat(Object(T.a)({
                                            token: t.id,
                                            channelID: this.props.data.user.id,
                                            message: e
                                        }))];
                                    case 2:
                                        return i.sent(), a.n.track(L.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: t.asin,
                                            item_name: t.title,
                                            context: W,
                                            context_details: e,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), n = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(T.d)(P, {
                                            channelLogin: this.props.channelLogin
                                        }, n), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.dataIsReady(e)) {
                        var t = e.pubsub.messages.userCommerceUpdateEvent,
                            n = this.props.pubsub.messages.userCommerceUpdateEvent,
                            i = !n && t,
                            a = n && t && n.time !== t.time;
                        (i || a) && this.props.data && this.props.data.refetch()
                    }
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.purchaseTokensExist(this.props) && this.props.data.user.self ? this.renderPurchaseToken(this.props.data.user.self.purchaseTokens[0]) : null
                }, t.prototype.renderPurchaseToken = function(e) {
                    var t, n;
                    t = this.props.data.user.settings.isCommerceRevShareEnabled ? Object(a.d)("You bought {product} and supported {channelName}!", {
                        product: d.createElement("strong", null, e.title),
                        channelName: d.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat") : Object(a.d)("You bought {product} while watching {channelName}!", {
                        product: d.createElement("strong", null, e.title),
                        channelName: d.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat");
                    var i = e.inGameContents.map(this.renderLootInGameContent),
                        r = e.badges.map(this.renderLootBadge),
                        o = e.emoteSets.map(this.renderLootEmoteSet),
                        s = e.bits.map(this.renderLootBits, this);
                    return (i.length || r.length || o.length || s.length) && (n = d.createElement(A._4, {
                        "data-test-selector": "share-purchase__loot",
                        padding: {
                            bottom: 1
                        },
                        display: A.P.Flex,
                        justifyContent: A._3.Center
                    }, i, r, o, s), t = Object(a.d)("You bought {product} and opened a Twitch Crate! Let {channelName} know you shared the love.", {
                        product: d.createElement("strong", null, e.title),
                        channelName: d.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat")), d.createElement(A._4, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: A._11.Absolute
                    }, d.createElement(j, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissPurchaseToken
                    }, t), d.createElement(F, {
                        hide: !this.state.showMessageInput,
                        onShare: this.sharePurchase,
                        onClose: this.toggleContentShown
                    }, d.createElement(A._4, {
                        padding: {
                            bottom: 1
                        }
                    }, d.createElement("figure", null, d.createElement("img", {
                        width: 40,
                        height: 40,
                        src: e.imageThumbnail
                    }))), n, d.createElement(A.O, null, Object(a.d)("Score! Give a shout out to {channelName} in Chat about all your sweet loot!", {
                        channelName: d.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat"))))
                }, t.prototype.renderLootInGameContent = function(e) {
                    return d.createElement(A._4, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__igc"
                    }, d.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.imageURL
                    }))
                }, t.prototype.renderLootEmoteSet = function(e) {
                    return Object(B.b)(e.emoteSet.emotes).map(function(e) {
                        return d.createElement(A._4, {
                            key: e.id,
                            margin: {
                                top: .5,
                                right: 1
                            },
                            "data-test-selector": "share-purchase__emoticon"
                        }, d.createElement("img", {
                            className: "share-to-chat__loot",
                            srcSet: e.srcSet,
                            alt: e.displayName
                        }))
                    })
                }, t.prototype.renderLootBadge = function(e) {
                    return d.createElement(A._4, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__badge"
                    }, d.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.badge.image2x
                    }))
                }, t.prototype.renderLootBits = function(e) {
                    if (this.props.bitsConfig) return d.createElement(A._4, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__bits"
                    }, d.createElement(x.a, {
                        count: e.quantity,
                        bitsConfig: this.props.bitsConfig,
                        withImage: !0
                    }))
                }, t = i.__decorate([Object(c.a)(P, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(I.a)([{
                    topic: function(e) {
                        return Object(M.u)(e.currentUserID)
                    },
                    mapMessageTypesToProps: (C = {}, C[R.PubsubMessageType.ChatNotification] = "userCommerceUpdateEvent", C)
                }])], t)
            }(d.Component),
            q = Object(c.a)(U, {
                name: "dismissPurchaseToken"
            })(Object(c.a)(V, {
                name: "sharePurchaseTokenInChat"
            })(G));
        var z = Object(s.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            })(q),
            $ = (n("e9ZN"), function(e) {
                var t = O("rare-emote__face", {
                        "rare-emote__face--animate": !!e.animate
                    }),
                    n = O("rare-emote__neck", {
                        "rare-emote__neck--animate": !!e.animate
                    });
                return d.createElement(A._4, {
                    overflow: A._7.Hidden,
                    className: "rare-emote"
                }, d.createElement(A.Y, {
                    zIndex: A._53.Above,
                    position: A._11.Relative
                }, d.createElement("img", {
                    className: t,
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.emoteID + "/2.0"
                })), d.createElement(A._4, {
                    position: A._11.Relative,
                    zIndex: A._53.Default,
                    className: n
                }, d.createElement(A._17, {
                    width: 28,
                    height: 28,
                    asset: A._18.Neck
                })))
            }),
            J = 3;
        var Q, Y = n("nEoF"),
            K = n("S20p"),
            Z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        resubDismissed: !1,
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.randomEmoteId = t.getRandomEmoteId(), t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.resubExists = function(e, t) {
                        return e.data.user.self && e.data.user.self.resubNotification && !t.resubDismissed
                    }, t.manageParentSpace = function() {
                        t.dataIsReady(t.props) && t.resubExists(t.props, t.state) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissResubNotification = function() {
                        t.setState({
                            resubDismissed: !0
                        })
                    }, t.shareResub = function(e) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.resubNotification) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 4, 5, 6]), this.props.authToken ? [4, function(e, t, n, r) {
                                            return i.__awaiter(this, void 0, void 0, function() {
                                                var o, s, l;
                                                return i.__generator(this, function(i) {
                                                    switch (i.label) {
                                                        case 0:
                                                            o = "https://api.twitch.tv/api/channels/" + e + "/use_chat_notification_token", s = 1, i.label = 1;
                                                        case 1:
                                                            if (!(s <= J)) return [3, 7];
                                                            i.label = 2;
                                                        case 2:
                                                            return i.trys.push([2, 5, , 6]), [4, fetch(o, {
                                                                body: JSON.stringify({
                                                                    token_id: t,
                                                                    custom_message: n
                                                                }),
                                                                method: "POST",
                                                                headers: {
                                                                    "Client-ID": a.o.config.legacyClientID,
                                                                    Accept: "application/json; charset=UTF-8",
                                                                    "content-type": "application/json; charset=UTF-8",
                                                                    Authorization: "OAuth " + r
                                                                }
                                                            })];
                                                        case 3:
                                                            return [4, i.sent().json()];
                                                        case 4:
                                                            return [2, i.sent()];
                                                        case 5:
                                                            if (l = i.sent(), s === J) throw l;
                                                            return [3, 6];
                                                        case 6:
                                                            return ++s, [3, 1];
                                                        case 7:
                                                            return [2]
                                                    }
                                                })
                                            })
                                        }(this.props.channelLogin, this.props.data.user.self.resubNotification.token, e, this.props.authToken)] : [3, 3];
                                    case 2:
                                        r.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.resubNotification = null), e
                                        }, Object(T.d)(K, {
                                            channelLogin: this.props.channelLogin
                                        }, t), this.dismissResubNotification(), r.label = 3;
                                    case 3:
                                        return [3, 6];
                                    case 4:
                                        return n = r.sent(), a.j.error(n, "Failed to post resub message"), [3, 6];
                                    case 5:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 6:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace()
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.dataIsReady(e) && e.data.user.self && e.data.user.self.resubNotification && !this.randomEmoteId && (this.randomEmoteId = this.getRandomEmoteId())
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.resubExists(this.props, this.state) && this.props.data.user.self && this.props.data.user.self.resubNotification ? this.renderResubToken(this.props.data.user.self.resubNotification) : null
                }, t.prototype.renderResubToken = function(e) {
                    return d.createElement(A._4, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: A._11.Absolute
                    }, d.createElement(j, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissResubNotification
                    }, Object(a.d)("It's your {monthsSubbed, number} month anniversary!", {
                        monthsSubbed: e.months
                    }, "ChatResubNotification")), d.createElement(F, {
                        hide: !this.state.showMessageInput,
                        onShare: this.shareResub,
                        onClose: this.toggleContentShown
                    }, d.createElement($, {
                        emoteID: this.randomEmoteId,
                        animate: this.state.showMessageInput
                    }), d.createElement(A.O, null, Object(a.d)("Hooray! Let {channelName} know it's your {monthsSubbed, number} month anniversary.", {
                        channelName: d.createElement("strong", null, this.props.channelDisplayName),
                        monthsSubbed: e.months
                    }, "ChatResubNotification"))))
                }, t.prototype.getRandomEmoteId = function() {
                    var e = Math.floor(Math.random() * Y.a.length);
                    return Y.a[e]
                }, t = i.__decorate([Object(c.a)(K, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                })], t)
            }(d.Component);
        n("NZkJ");
        ! function(e) {
            e[e.Resub = 1] = "Resub", e[e.Purchase = 2] = "Purchase"
        }(Q || (Q = {}));
        var X = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestedSpaces: new Set
                    }, t.addSpace = function(e) {
                        t.state.requestedSpaces.has(e) || t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.add(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.removeSpace = function(e) {
                        t.state.requestedSpaces.has(e) && t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.delete(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.requestResubSpace = function() {
                        t.addSpace(Q.Resub)
                    }, t.dismissResubSpace = function() {
                        t.removeSpace(Q.Resub)
                    }, t.requestPurchaseSpace = function() {
                        t.addSpace(Q.Purchase)
                    }, t.dismissPurchaseSpace = function() {
                        t.removeSpace(Q.Purchase)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    this.state.requestedSpaces.size && (e = Array.from(this.state.requestedSpaces.values()).sort()[0]);
                    var t = O({
                            "share-to-chat__space--hidden": e !== Q.Resub
                        }),
                        n = O({
                            "share-to-chat__space--hidden": e !== Q.Purchase
                        });
                    return d.createElement(A._4, null, d.createElement(A._4, {
                        className: t
                    }, d.createElement(Z, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        requestSpace: this.requestResubSpace,
                        dismissSpace: this.dismissResubSpace
                    })), d.createElement(A._4, {
                        className: n
                    }, d.createElement(z, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig,
                        requestSpace: this.requestPurchaseSpace,
                        dismissSpace: this.dismissPurchaseSpace
                    })))
                }, t
            }(d.Component),
            ee = n("vh75"),
            te = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        show: !0
                    }, t.dismiss = function() {
                        t.setState({
                            show: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                        show: !0
                    })
                }, t.prototype.render = function() {
                    return this.state.show ? d.createElement(A._27, {
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        background: A.m.AccentAlt2,
                        color: A.J.Overlay,
                        position: A._11.Absolute,
                        className: "hosting-notification",
                        padding: {
                            y: .5,
                            left: .5
                        },
                        "data-a-target": "hosting-notification-container"
                    }, d.createElement(A._4, {
                        display: A.P.Flex,
                        padding: 1,
                        justifyContent: A._3.Between,
                        alignItems: A.c.Center,
                        flexWrap: A.S.NoWrap
                    }, d.createElement(A._4, {
                        display: A.P.Flex,
                        flexWrap: A.S.NoWrap
                    }, d.createElement(A._4, {
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, d.createElement(A.O, null, Object(a.d)("Hosting", "ChatHostingNotification"))), d.createElement(A._4, {
                        ellipsis: !0,
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, d.createElement(A.O, {
                        type: A._41.Strong,
                        "data-test-selector": "hosting-notification__text",
                        "data-a-target": "hosting-notification-channel-name"
                    }, "" + this.props.hostedChannelDisplayName))), d.createElement(A._4, {
                        display: A.P.Flex,
                        flexWrap: A.S.NoWrap,
                        flexShrink: 0
                    }, d.createElement(A._4, {
                        display: A.P.Inline,
                        padding: {
                            right: .5
                        }
                    }, d.createElement(A.u, {
                        linkTo: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                content: "host_channel",
                                medium: "chat_bar_notification"
                            }
                        },
                        size: A.y.Small,
                        "data-a-target": "hosting-notification-gotochannel-button"
                    }, Object(a.d)("Go to Channel", "ChatHostingNotification"))), d.createElement(A.v, {
                        onClick: this.dismiss,
                        ariaLabel: Object(a.d)("Close", "HostingNotification"),
                        size: A.w.Small,
                        overlay: !0,
                        icon: A._18.Close,
                        "data-a-target": "hosting-notification-close-button"
                    })))) : null
                }, t
            }(d.Component),
            ne = n("F8kA"),
            ie = (n("W266"), "nativeBroadcastNotifDismissed"),
            ae = [{
                title: "English",
                login: "esamarathon"
            }, {
                title: "Français",
                login: "LeFrenchRestream"
            }, {
                title: "Deutsch",
                login: "GermenchRestream"
            }, {
                title: "Русский",
                login: "SpeedrunsRussia"
            }],
            re = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isClosed: !1
                    }, t.getChannelLinks = function() {
                        var e = y.b.get("native_broadcast_blacklist", []);
                        return ae.filter(function(t) {
                            return e.indexOf(t.login.toLowerCase()) < 0
                        }).filter(function(e) {
                            return e.login.toLowerCase() !== t.props.channelLogin.toLowerCase()
                        }).map(function(e) {
                            var t = e.title + " (" + e.login + ")";
                            return d.createElement("li", {
                                key: e.login
                            }, d.createElement(ne.a, {
                                className: "native-broadcast-notification__link",
                                to: "/" + e.login.toLowerCase()
                            }, t))
                        })
                    }, t.onDismiss = function() {
                        t.setState({
                            isClosed: !0
                        });
                        var e, n = i.__assign({}, a.l.get(ie, {}), ((e = {})[t.props.channelLogin.toLowerCase()] = Date.now(), e));
                        a.l.set(ie, n)
                    }, t.onExpire = function() {
                        t.setState({
                            isClosed: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.channelLogin.toLowerCase() !== this.props.channelLogin.toLowerCase() && this.setState({
                        isClosed: !1
                    })
                }, t.prototype.render = function() {
                    if (this.state.isClosed) return null;
                    if (!this.isEventChannel(this.props.channelLogin)) return null;
                    if (this.hasDismissedForChannel(this.props.channelLogin)) return null;
                    var e = Date.now();
                    if (e < 15191352e5 || e >= 15195132e5) return null;
                    var t = this.getChannelLinks();
                    return t.length ? d.createElement(A._27, {
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        background: A.m.AccentAlt2,
                        color: A.J.Overlay,
                        padding: 1,
                        position: A._11.Absolute
                    }, d.createElement(A._4, {
                        margin: {
                            bottom: 1
                        }
                    }, d.createElement(A.O, {
                        type: A._41.H4
                    }, Object(a.d)("ESA Winter 2018", "NativeBroadcastNotification"))), d.createElement(A._4, {
                        margin: {
                            bottom: 1
                        }
                    }, d.createElement(A.O, {
                        color: A.J.OverlayAlt
                    }, Object(a.d)("Want to watch ESA in you local language? Try one of these international broadcasts!", "NativeBroadcastNotification"))), d.createElement("ul", null, t), d.createElement(A._4, {
                        attachRight: !0,
                        attachTop: !0,
                        margin: 1,
                        position: A._11.Absolute
                    }, d.createElement(A.v, {
                        ariaLabel: Object(a.d)("Close", "NativeBroadcastNotification"),
                        icon: A._18.Close,
                        onClick: this.onDismiss,
                        overlay: !0,
                        size: A.w.Small,
                        "data-a-target": "native-broadcast-notification-close-button"
                    })), d.createElement(A._4, {
                        margin: {
                            top: .5
                        }
                    }, d.createElement(A._14, {
                        countdown: 30,
                        onCountdownEnd: this.onExpire,
                        size: A._15.ExtraSmall
                    }))) : null
                }, t.prototype.isEventChannel = function(e) {
                    return ae.map(function(e) {
                        return e.login.toLowerCase()
                    }).includes(e.toLowerCase())
                }, t.prototype.hasDismissedForChannel = function(e) {
                    var t = a.l.get(ie, {})[e.toLowerCase()];
                    return !!t && t >= 15191352e5
                }, t
            }(d.Component),
            oe = n("+Znq"),
            se = n("9u8h"),
            le = (n("q4rf"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestFailed: !1
                    }, t.logger = a.o.logger.withCategory("orbis"), t.onClickInteraction = function(e) {
                        t.props.sendMessage(":act " + e.currentTarget.getAttribute("data-action")), t.toggleBalloonRef.toggleBalloon()
                    }, t.setToggleBalloonRef = function(e) {
                        return t.toggleBalloonRef = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.isLoggedIn && this.props.firstPageLoaded && this.getChatProperties()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.isLoggedIn && !this.props.firstPageLoaded && e.firstPageLoaded && this.getChatProperties()
                }, t.prototype.render = function() {
                    return this.props.isLoggedIn && !this.state.requestFailed && this.hasInteractions() ? d.createElement(A._27, {
                        className: "orbis",
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        alignItems: A.c.Stretch,
                        background: A.m.Base,
                        flexShrink: 0,
                        borderBottom: !0
                    }, d.createElement(oe.a, {
                        ref: this.setToggleBalloonRef
                    }, d.createElement("div", {
                        className: "orbis__dropdown-container",
                        "data-test-selector": "orbis-dropdown-container"
                    }, d.createElement(A._4, {
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: A.P.Flex,
                        justifyContent: A._3.Between,
                        flexWrap: A.S.NoWrap
                    }, d.createElement(A._4, {
                        ellipsis: !0,
                        padding: {
                            right: 1
                        }
                    }, d.createElement(A.O, {
                        type: A._41.Span
                    }, Object(a.d)("Interactions Available", "Orbis"))), d.createElement(A._4, {
                        display: A.P.Flex,
                        justifyContent: A._3.Between,
                        alignItems: A.c.Center,
                        flexShrink: 0
                    }, d.createElement(A._4, {
                        className: "orbis__dropdown-icon",
                        display: A.P.Flex,
                        justifyContent: A._3.Between,
                        alignItems: A.c.Center
                    }, d.createElement(A._17, {
                        asset: A._18.AngleRight
                    }))))), d.createElement(A.p, {
                        offsetY: "1px",
                        noTail: !0
                    }, d.createElement(A._4, {
                        className: "orbis__dropdown-content",
                        padding: 1
                    }, this.renderInteractions())))) : null
                }, t.prototype.renderInteractions = function() {
                    return this.state.chatProperties ? [this.renderInteraction(this.state.chatProperties.sce_title_preset_text_1), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_2), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_3), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_4), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_5)] : null
                }, t.prototype.renderInteraction = function(e) {
                    return e ? d.createElement(A._2, {
                        onClick: this.onClickInteraction,
                        key: e,
                        "data-action": e,
                        "data-test-selector": "orbis-interaction"
                    }, d.createElement(A.Y, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, d.createElement(A.O, {
                        ellipsis: !0
                    }, e))) : null
                }, t.prototype.getChatProperties = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, se.a.get("/api/channels/" + this.props.channelLogin + "/chat_properties?on_site=1")];
                                case 1:
                                    return (e = n.sent()).requestError ? (this.logger.error(e.requestError, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.error ? (this.logger.error(new Error("Chat Properties Error"), "The API returned a non-200 response", e.error), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.body ? (this.setState({
                                        chatProperties: e.body
                                    }), [3, 3]) : (this.logger.error(new Error("Chat Properties Error"), "Body is undefined"), this.setState({
                                        requestFailed: !0
                                    }), [2]);
                                case 2:
                                    return t = n.sent(), this.logger.error(t, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.hasInteractions = function() {
                    return !!this.state.chatProperties && !!(this.state.chatProperties.sce_title_preset_text_1 || this.state.chatProperties.sce_title_preset_text_2 || this.state.chatProperties.sce_title_preset_text_3 || this.state.chatProperties.sce_title_preset_text_4 || this.state.chatProperties.sce_title_preset_text_5)
                }, t
            }(d.Component));
        var de = Object(s.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isLoggedIn: Object(l.d)(e)
                }
            })(le),
            ce = n("BMQ2"),
            ue = n("WIs4"),
            me = n("aSvS"),
            pe = n("rIzn"),
            he = n("J7iJ"),
            ge = n("KfLc"),
            fe = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return d.createElement(A._27, {
                        background: A.m.Base,
                        color: A.J.Alt
                    }, d.createElement(A._4, {
                        padding: {
                            bottom: .5,
                            top: 1,
                            x: 1
                        }
                    }, d.createElement(A._4, {
                        margin: {
                            bottom: .5
                        }
                    }, d.createElement(A.O, {
                        bold: !0,
                        type: A._41.H5
                    }, Object(a.d)("Introducing: New Chatter Announcements!", "RitualsOnboardingSticky"))), d.createElement(A._4, {
                        margin: {
                            bottom: .5
                        }
                    }, d.createElement(A.O, {
                        type: A._41.Span
                    }, Object(a.d)("New chatter announcements are now active in your channel, making it easier to welcome new people.", "RitualsOnboardingSticky")), d.createElement(A.O, null, d.createElement(ne.a, {
                        onClick: this.props.onClick,
                        to: "/" + this.props.channelLogin + "/dashboard/settings",
                        "data-test-selector": "rituals-sticky-link"
                    }, Object(a.d)("Manage in Dashboard", "RitualsOnboardingSticky"))))), d.createElement(A._27, {
                        alignItems: A.c.Center,
                        background: A.m.Alt2,
                        borderBottom: !0,
                        color: A.J.Alt2,
                        display: A.P.Flex,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, d.createElement(A._17, {
                        asset: A._18.Lock,
                        height: 12,
                        width: 12
                    }), d.createElement(A._4, {
                        display: A.P.Inline,
                        margin: {
                            left: .5
                        }
                    }, d.createElement(A.O, {
                        fontSize: A.T.Size8,
                        type: A._41.Span
                    }, Object(a.d)("You see this because you own this channel", "RitualsOnboardingSticky")))), d.createElement(A._27, {
                        attachRight: !0,
                        attachTop: !0,
                        padding: {
                            x: .5,
                            top: 1
                        },
                        position: A._11.Absolute
                    }, d.createElement(A.v, {
                        ariaLabel: Object(a.d)("Close", "RitualsOnboardingSticky"),
                        icon: A._18.Close,
                        onClick: this.props.onDismiss,
                        size: A.w.Small,
                        type: A.x.Secondary,
                        "data-test-selector": "rituals-sticky-dismiss-button"
                    })))
                }, t
            }(d.PureComponent),
            ve = "seenNewChatterAnnouncementSticky",
            be = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isDismissed: !1
                    }, n.onClick = function() {
                        Object(ge.c)({
                            action: me.a.Click,
                            channelID: n.props.channelID
                        })
                    }, n.onDismiss = function() {
                        a.l.set(ve, !0), n.setState({
                            isDismissed: !0
                        }), Object(ge.c)({
                            action: me.a.Dismiss,
                            channelID: n.props.channelID
                        })
                    }, n.state.isDismissed = a.l.get(ve, !1), n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return !this.props.data || this.props.data.loading || this.props.data.error ? null : this.props.data.channel.settings.isRitualsEnabled ? this.state.isDismissed ? null : d.createElement(fe, {
                        channelLogin: this.props.channelLogin,
                        onClick: this.onClick,
                        onDismiss: this.onDismiss
                    }) : null
                }, t
            }(d.Component);

        function ke(e) {
            return e.currentUserID !== e.channelID || !Object(pe.a)()
        }
        var ye = Object(u.compose)(Object(s.b)(function(e) {
                var t = Object(l.c)(e);
                return {
                    currentUserID: t && t.id
                }
            }, null), Object(c.a)(he, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: ke
            }), Object(ue.a)(function(e) {
                return {
                    query: he,
                    variables: {
                        id: e.channelID
                    },
                    topic: Object(M.o)(e.channelID),
                    type: R.PubsubMessageType.UpdatedChannelChatProperty,
                    mutator: function(e, t) {
                        return t.channel.settings.isRitualsEnabled = e.data.is_rituals_enabled, t
                    },
                    skip: ke(e)
                }
            }))(be),
            _e = n("qkCi"),
            Ce = 200,
            Se = function() {
                return function(e) {
                    var t = this;
                    this.resetWithChannelID = function(e) {
                        t.activeChatterIDs = new Set, t.activeChatters = {}, t.channelID = e, t.currentUserID = null, t.isDirty = !0
                    }, this.getActiveChatters = function() {
                        return t.isDirty = !1, Object.keys(t.activeChatters).map(function(e) {
                            return t.activeChatters[e]
                        })
                    }, this.setCurrentUserID = function(e) {
                        t.currentUserID = e, t.activeChatterIDs.has(e) && (t.isDirty = !0, t.removeActiveChatter(e))
                    }, this.consumeChatEvent = function(e) {
                        switch (e.type) {
                            case _e.b.Message:
                            case _e.b.Resubscription:
                            case _e.b.Subscription:
                                var n = e;
                                t.handleActiveChatter(n.user);
                                break;
                            case _e.b.Ritual:
                                var i = e.message;
                                t.handleActiveChatter(i.user)
                        }
                    }, this.handleActiveChatter = function(e) {
                        e.userID && e.userID !== t.channelID && e.userID !== t.currentUserID && (t.activeChatterIDs.has(e.userID) ? (t.activeChatterIDs.delete(e.userID), t.addActiveChatter(e)) : (t.addActiveChatter(e), t.trimActiveChatters(), t.isDirty = !0))
                    }, this.addActiveChatter = function(e) {
                        e.userID && (t.activeChatterIDs.add(e.userID), t.activeChatters[e.userID] = e)
                    }, this.removeActiveChatter = function(e) {
                        t.activeChatterIDs.delete(e), delete t.activeChatters[e]
                    }, this.trimActiveChatters = function() {
                        if (!(t.activeChatterIDs.size <= Ce))
                            for (var e = t.activeChatterIDs.size - Ce, n = t.activeChatterIDs.values(), i = 0; i < e; i++) {
                                var a = n.next().value;
                                t.removeActiveChatter(a)
                            }
                    }, this.resetWithChannelID(e)
                }
            }(),
            Ee = n("mwvJ"),
            Ne = 1e3,
            we = 1e3,
            De = 250,
            Oe = 0,
            Ie = 200,
            Re = function() {
                function e(e, t) {
                    void 0 === e && (e = De), void 0 === t && (t = function() {});
                    var n = this;
                    this.maxSize = e, this.onBufferUpdate = t, this.delayedMessageBuffer = [], this.setDelay = function(e) {
                        n.delayDuration = e
                    }, this.setCurrentUserLogin = function(e) {
                        n.currentUserLogin = e
                    }, this.consumeChatEvent = function(e) {
                        var t = !1;
                        switch (e.type) {
                            case _e.b.Message:
                                if (n.uncountedMessages++, e.user.userID && n.blockedUsers.has(e.user.userID)) return;
                                var i = e.messageParts[0];
                                if (i && i.type === Ee.a.Text && i.content.startsWith(":act ")) return;
                                t = !n.isOwnMessage(e);
                                break;
                            case _e.b.Resubscription:
                                t = !n.isOwnMessage(e) && void 0 !== e.messageParts;
                                break;
                            case _e.b.Moderation:
                                var a = e.userLogin;
                                if (n.moderatedUsers.has(a)) return;
                                [n.buffer, n.delayedMessageBuffer.map(function(e) {
                                    return e.event
                                })].forEach(function(e) {
                                    e.forEach(function(e) {
                                        switch (e.type) {
                                            case _e.b.Message:
                                            case _e.b.Resubscription:
                                                e.user && a === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0);
                                                break;
                                            case _e.b.Ritual:
                                                a !== e.message.user.userLogin || e.message.deleted || (e.message.deleted = !0)
                                        }
                                    })
                                }), n.moderatedUsers.add(a), setTimeout(n.unmoderateUser(a), Ne);
                                break;
                            case _e.b.Disconnected:
                                return;
                            case _e.b.Reconnect:
                                if (n.buffer.find(function(t) {
                                        return t.id === e.id
                                    }) || n.delayedMessageBuffer.find(function(t) {
                                        return t.event.id === e.id
                                    })) return;
                                break;
                            case _e.b.Clear:
                                n.clear();
                                break;
                            case _e.b.ModerationAction:
                                if (n.currentUserLogin && e.createdByLogin === n.currentUserLogin) return
                        }
                        n.delayedMessageBuffer.push({
                            event: e,
                            time: Date.now(),
                            shouldDelay: t
                        })
                    }, this.unmoderateUser = function(e) {
                        return function() {
                            n.moderatedUsers.delete(e)
                        }
                    }, this.isOwnMessage = function(e) {
                        var t = e.user;
                        return !(!n.currentUserLogin || !t || t.userLogin !== n.currentUserLogin)
                    }, this.currentUserLogin = null, this.delayedMessageBuffer = [], this.buffer = [], this._isDirty = !1, this.moderatedUsers = new Set, this.blockedUsers = new Set, this.delayDuration = Oe, this.throttlingDuration = Ie, this.flushInterval = setInterval(function() {
                        return n.flushRawMessages()
                    }, this.throttlingDuration), this.uncountedMessages = 0, this.chatRateMeasurements = [], this.chatRateMeasurementInterval = setInterval(function() {
                        return n.measureChatRate()
                    }, we), this.setBlockedUsers = this.setBlockedUsers.bind(this)
                }
                return e.prototype.shutdown = function() {
                    this.flushInterval && (clearInterval(this.flushInterval), clearInterval(this.chatRateMeasurementInterval))
                }, e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e.prototype.toArray = function() {
                    return this.buffer = this.buffer.slice(-this.maxSize), this._isDirty = !1, this.buffer
                }, e.prototype.clear = function(e) {
                    if (void 0 === e && (e = 0), e <= 0) return this.buffer = [], void(this.delayedMessageBuffer = []);
                    this.buffer = this.buffer.slice(-e)
                }, e.prototype.isDeletable = function(e) {
                    return void 0 !== e.deleted
                }, e.prototype.flushRawMessages = function() {
                    var e = this,
                        t = [],
                        n = Date.now();
                    this.delayedMessageBuffer.forEach(function(i) {
                        var a = i.event,
                            r = i.time,
                            o = i.shouldDelay;
                        r <= n - e.delayDuration || !o ? e.isDeletable(a) && a.deleted || (e.buffer.push(a), e._isDirty = !0, e.onBufferUpdate()) : t.push({
                            event: a,
                            time: r,
                            shouldDelay: o
                        })
                    }), this.delayedMessageBuffer = t
                }, e.prototype.measureChatRate = function() {
                    3 === this.chatRateMeasurements.length && this.chatRateMeasurements.shift(), this.chatRateMeasurements.push(this.uncountedMessages), this.uncountedMessages = 0
                }, Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "moderatedUserCount", {
                    get: function() {
                        return this.moderatedUsers.size
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "chatRate", {
                    get: function() {
                        return 0 === this.chatRateMeasurements.length ? 0 : this.chatRateMeasurements.reduce(function(e, t) {
                            return e + t
                        }) / this.chatRateMeasurements.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), e
            }(),
            Te = n("INp2");
        var Me = n("6Agf");
        var Le = n("aUOx"),
            xe = n("l21v");

        function Ae(e, t, n, a, r, o, s) {
            return void 0 === s && (s = !1), i.__assign({}, Object(xe.a)(t, n, a, r, o, s), {
                type: _e.b.Message,
                messageType: e,
                id: n.id || Object(Te.a)(n.username)
            })
        }
        var Fe = n("Ncf8");

        function je(e, t, n, a, r, o, s, l) {
            var d = o && s ? Object(xe.a)(o, s, E.a, !1, l) : function(e) {
                return {
                    user: {
                        userDisplayName: e,
                        userLogin: e,
                        userID: null,
                        userType: Me.a.User,
                        color: void 0,
                        isIntl: !1
                    }
                }
            }(t);
            return i.__assign({}, d, {
                type: _e.b.Resubscription,
                id: Object(Te.a)(t + "-sub"),
                channel: e.slice(1),
                isPrime: n,
                months: a,
                tier: r
            })
        }
        var Be = n("O0Qc"),
            Ue = n("YhVV"),
            Pe = function() {
                function e(e, t, n) {
                    var r = this;
                    this.onJoinedEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, {
                            type: _e.b.Connected,
                            id: Object(Te.a)("connected")
                        })
                    }, this.onDisconnectedEvent = function(e) {
                        return r.postMessage((t = e.reason, {
                            type: _e.b.Disconnected,
                            id: Object(Te.a)("disconnected"),
                            reason: t
                        }));
                        var t
                    }, this.onReconnectingEvent = function(e) {
                        return r.postMessage({
                            type: _e.b.Reconnect,
                            id: Object(Te.a)("reconnect")
                        })
                    }, this.onHostedEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.from, n = e.isAuto, i = e.viewers, {
                            type: _e.b.Hosted,
                            id: Object(Te.a)("hosted-" + t),
                            hostingChannel: t,
                            isAutohost: n,
                            viewerCount: i
                        }));
                        var t, n, i
                    }, this.onHostingEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.target, {
                            type: _e.b.Hosting,
                            id: Object(Te.a)("hosting"),
                            hostedChannel: t
                        }));
                        var t
                    }, this.onUnhostEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.channel, {
                            type: _e.b.Unhost,
                            id: Object(Te.a)("unhost-" + t)
                        }));
                        var t
                    }, this.onChatMessageEvent = function(e) {
                        r.postMessageToCurrentChannel(e, r.convertMessage(e))
                    }, this.onChatActionEvent = function(e) {
                        var t = r.bitsConfig || E.a,
                            n = e.message.user.username === r.userLogin ? r.selfEmotes : void 0,
                            i = Ae(_e.c.Action, e.action, e.message.user, t, r.shouldBlockLinks(e.message.user), n);
                        r.postMessageToCurrentChannel(e, i)
                    }, this.onChatNoticeEvent = function(e) {
                        if ("msg_rejected" !== e.msgid) {
                            var t = (n = e.channel, i = e.msgid, a = e.body, {
                                type: _e.b.Notice,
                                id: Object(Te.a)("notice"),
                                channel: n,
                                msgid: i,
                                message: a
                            });
                            r.postMessageToCurrentChannel(e, t)
                        }
                        var n, i, a
                    }, this.onTimeoutEvent = function(e) {
                        r.onModerationEvent(_e.e.Timeout, e)
                    }, this.onBanEvent = function(e) {
                        r.onModerationEvent(_e.e.Ban, e)
                    }, this.onModerationEvent = function(e, t) {
                        r.postMessageToCurrentChannel(t, Object(Fe.a)(e, t.userLogin, t.reason, t.duration))
                    }, this.onSubscriptionEvent = function(e) {
                        var t, n, a, o, s, l, d;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "Tier 1"
                        }
                        r.postMessageToCurrentChannel(e, (n = e.channel, a = e.user.displayName, o = e.methods.prime, s = t, l = e.user, d = Object(xe.a)("", l, E.a, !1), i.__assign({}, d, {
                            type: _e.b.Subscription,
                            id: Object(Te.a)(a + "-sub"),
                            channel: n.slice(1),
                            isPrime: o,
                            userLogin: a,
                            tier: s
                        })))
                    }, this.onSubscriptionGiftEvent = function(e) {
                        var t, n, i, a, o, s;
                        switch (e.methods.plan) {
                            case "1000":
                                t = "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "custom"
                        }
                        r.postMessageToCurrentChannel(e, (n = e.channel, i = e.user.displayName, a = e.methods.prime, o = t, s = e.recipientName, {
                            type: _e.b.SubGift,
                            id: Object(Te.a)(i + "-sub"),
                            channel: n.slice(1),
                            isPrime: a,
                            userLogin: i,
                            tier: o,
                            recipient: s
                        }))
                    }, this.onBitsCharityEvent = function(e) {
                        var t, n, i, a, o, s;
                        r.postMessage((t = e.total, n = e.charityName, i = e.daysLeft, a = e.hoursLeft, o = e.hashtag, s = e.learnMore, {
                            type: _e.b.BitsCharity,
                            id: Object(Te.a)("charity"),
                            total: t,
                            charityName: n,
                            daysLeft: i,
                            hoursLeft: a,
                            hashtag: o,
                            learnMore: s
                        }))
                    }, this.onResubscriptionEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "Tier 1"
                        }
                        r.postMessageToCurrentChannel(e, je(e.channel, e.user.displayName, e.methods.prime, e.months, t, e.body, e.user))
                    }, this.onRoomModsEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.usernames, {
                            type: _e.b.RoomMods,
                            id: Object(Te.a)("roommods"),
                            moderatorLogins: t
                        }));
                        var t
                    }, this.onRoomStateEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.state, {
                            type: _e.b.RoomState,
                            id: Object(Te.a)("roomstate"),
                            state: t
                        }));
                        var t
                    }, this.onSlowModeEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.enabled, n = e.length, {
                            type: _e.b.SlowMode,
                            id: Object(Te.a)("slowmode"),
                            enabled: t,
                            length: n
                        }));
                        var t, n
                    }, this.onEmoteOnlyModeEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.enabled, {
                            type: _e.b.EmoteOnlyMode,
                            id: Object(Te.a)("emoteonlymode"),
                            enabled: t
                        }));
                        var t
                    }, this.onFollowerOnlyModeEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.enabled, n = e.length, {
                            type: _e.b.FollowerOnlyMode,
                            id: Object(Te.a)("follower-only"),
                            enabled: t,
                            length: n
                        }));
                        var t, n
                    }, this.onSubscriberOnlyModeEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.enabled, {
                            type: _e.b.SubscriberOnlyMode,
                            id: Object(Te.a)("subscriber-only"),
                            enabled: t
                        }));
                        var t
                    }, this.onClearChatEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, {
                            type: _e.b.Clear,
                            id: Object(Te.a)("clear")
                        })
                    }, this.onRaidEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.channel, n = e.userLogin, i = e.params, {
                            type: _e.b.Raid,
                            id: Object(Te.a)("raid"),
                            channel: t,
                            userLogin: n,
                            params: i
                        }));
                        var t, n, i
                    }, this.onUnraidEvent = function(e) {
                        return r.postMessageToCurrentChannel(e, (t = e.channel, n = e.userLogin, i = e.message, {
                            type: _e.b.Unraid,
                            id: Object(Te.a)("unraid"),
                            channel: t,
                            userLogin: n,
                            message: i
                        }));
                        var t, n, i
                    }, this.onRitualEvent = function(e) {
                        var t, n;
                        r.postMessage((t = e.type, n = r.convertMessage(e), {
                            type: _e.b.Ritual,
                            id: Object(Te.a)(n.user.userLogin + "-" + t + "-ritual"),
                            ritualType: t,
                            message: n
                        }))
                    }, this.onBadgesUpdatedEvent = function(e) {
                        return r.postMessage((t = e.username, n = e.badges, {
                            type: _e.b.BadgesUpdated,
                            id: Object(Te.a)("updateBadges"),
                            userName: t,
                            badges: n
                        }));
                        var t, n
                    }, this.onPurchaseEvent = function(e) {
                        var t = r.bitsConfig || E.a;
                        r.postMessage(function(e, t, n, i) {
                            return {
                                bitsConfig: i,
                                message: t,
                                purchase: e,
                                timestamp: n,
                                id: Object(Te.a)(t.user.userLogin + "-purchase"),
                                type: _e.b.Purchase
                            }
                        }(e.purchase, r.convertMessage(e), e.timestamp, t))
                    }, this.onCrateEvent = function(e) {
                        var t, n;
                        r.postMessage((t = r.convertMessage(e), n = e.selectedCount, {
                            type: _e.b.CrateGift,
                            id: Object(Te.a)("crate"),
                            message: t,
                            selectedCount: n
                        }))
                    }, this.convertMessage = function(e) {
                        var t = r.bitsConfig || E.a,
                            n = e.message.user.username === r.userLogin ? r.selfEmotes : void 0;
                        return Ae(_e.c.Post, e.message.body, e.message.user, t, r.shouldBlockLinks(e.message.user), n)
                    }, this.logger = a.j.withCategory("chat-service"), this.logger.debug("Created"), this.userLogin = e, this.channelLogin = t, this.service = a.o.tmi, this.client = a.o.tmi.client, this.postMessage = n, this.disabled = a.o.tmi.disabled
                }
                return e.prototype.join = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Joining channel and binding all event listeners", this.channelLogin), this.connectHandlers(), [4, this.service.join(this.channelLogin)];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.part = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Parting channel and unbinding all event listeners", this.channelLogin), this.client.events.removeAll(), [4, this.service.part()];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.sendMessage = function(e) {
                    var t = this,
                        n = Object(Be.l)(e, this.channelLogin);
                    return n.handled ? n.result && n.result.deferred && n.result.deferred.then(function(e) {
                        var n = e.notice;
                        n && t.postMessage(Object(Le.a)(n))
                    }) : this.client.sendCommand(this.channelLogin, e).catch(function(e) {
                        a.j.warn("Failed to send message, or message timeout", e)
                    }), n.result
                }, e.prototype.updateEmotes = function(e) {
                    this.selfEmotes = Object(Ue.b)(e), this.client.updateEmoteSets(e)
                }, e.prototype.updateChannelBadges = function(e) {
                    this.client.updateChannelBadges(this.channelLogin, e)
                }, e.prototype.updateBitsConfig = function(e) {
                    this.bitsConfig = e
                }, e.prototype.updateBlockLinks = function(e) {
                    this.blockLinks = e
                }, e.prototype.connectHandlers = function() {
                    this.client.events.removeAll(), this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosted(this.onHostedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.crate(this.onCrateEvent), this.client.events.ritual(this.onRitualEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.followersonly(this.onFollowerOnlyModeEvent), this.client.events.slowmode(this.onSlowModeEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent), this.client.events.emoteonlymode(this.onEmoteOnlyModeEvent), this.client.events.charity(this.onBitsCharityEvent)
                }, e.prototype.shouldBlockLinks = function(e) {
                    return e.username !== this.channelLogin && e.userType !== Me.a.Staff && e.userType !== Me.a.GlobalMod && e.userType !== Me.a.Moderator && this.blockLinks
                }, e.prototype.postMessageToCurrentChannel = function(e, t) {
                    e.channel.toLowerCase().replace("#", "") === this.channelLogin.toLowerCase() && this.postMessage(t)
                }, e
            }(),
            Ve = n("H/22"),
            He = function() {
                return function(e, t, n) {
                    this.channelID = e, this.sessionUserID = t, this.unsubscribe = a.k.subscribe({
                        topic: Object(M.j)(this.sessionUserID, this.channelID),
                        onMessage: function(e) {
                            switch (e.data.moderation_action) {
                                case R.ModerationActions.AutoModRejected:
                                    var t = Object(Ve.e)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    n(t);
                                    break;
                                case R.TargetedModerationActions.AutoModMessageRejected:
                                    n(Object(Ve.d)());
                                    break;
                                case R.TargetedModerationActions.AutoModMessageApproved:
                                    n(Object(Ve.b)());
                                    break;
                                case R.TargetedModerationActions.AutoModMessageDenied:
                                    n(Object(Ve.c)());
                                    break;
                                case R.ModerationActions.Ban:
                                    n(Object(Ve.g)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], void 0, e.data.args[1]));
                                    break;
                                case R.ModerationActions.Unban:
                                case R.ModerationActions.Timeout:
                                case R.ModerationActions.Untimeout:
                                case R.ModerationActions.Mod:
                                case R.ModerationActions.Unmod:
                                    n(Object(Ve.g)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], e.data.args[1], e.data.args[2]));
                                    break;
                                case R.ModerationActions.AutoModEnabled:
                                case R.ModerationActions.Clear:
                                case R.ModerationActions.EmoteOnly:
                                case R.ModerationActions.EmoteOnlyOff:
                                case R.ModerationActions.FollowersOnly:
                                case R.ModerationActions.FollowersOnlyOff:
                                case R.ModerationActions.Host:
                                case R.ModerationActions.R9kBeta:
                                case R.ModerationActions.R9kBetaOff:
                                case R.ModerationActions.Raid:
                                case R.ModerationActions.Slow:
                                case R.ModerationActions.SlowOff:
                                case R.ModerationActions.SubsBeta:
                                case R.ModerationActions.SubscribersOnly:
                                case R.ModerationActions.SubscribersOnlyOff:
                                case R.ModerationActions.Unhost:
                                case R.ModerationActions.Unraid:
                                    n(Object(Ve.f)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.args));
                                    break;
                                default:
                                    a.j.warn("Unknown moderation action type", e.data.moderation_action)
                            }
                        }
                    })
                }
            }(),
            We = n("QFW6"),
            Ge = n("CSlQ"),
            qe = n("9fnI"),
            ze = n("CIox"),
            $e = function() {
                function e() {}
                return e.fetchChannelsList = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, se.a.get("/kraken/autohost/list")];
                                case 1:
                                    return e = n.sent(), [2, this.deserialize(e)];
                                case 2:
                                    return t = n.sent(), a.j.error(t, "Couldn't fetch autohost list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.setChannelsList = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, se.a.put("/kraken/autohost/list", {
                                        body: {
                                            targets: e.join(",")
                                        }
                                    })];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), a.j.error(n, "Couldn't update autohost list"), [2, e];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.deserialize = function(e) {
                    return e.body ? e.body.targets.map(function(e) {
                        return e._id.toString()
                    }) : []
                }, e
            }();
        n("7X7f");
        var Je, Qe, Ye = n("QMHY"),
            Ke = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.dismiss = function() {
                        t.setState({
                            isDismissed: !0
                        }), t.track(L.SpadeEventType.AutohostChatDismiss);
                        var e = t.getAutohostNotificationsDismissed();
                        e[t.props.data.user.id] = {
                            dismissedDate: (new Date).getTime()
                        }, t.setAutohostNotificationsDismissed(e)
                    }, t.addChannelToAutohost = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, $e.fetchChannelsList()];
                                    case 1:
                                        return e = t.sent().concat([this.props.data.user.id]), this.setState({
                                            autohostChannels: e
                                        }), $e.setChannelsList(e), this.track(L.SpadeEventType.AutohostChatYes), [2]
                                }
                            })
                        })
                    }, t.trackSettingsClick = function() {
                        t.track(L.SpadeEventType.AutohostChatSettings)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, $e.fetchChannelsList()];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        autohostChannels: e
                                    }), this.isShowing && this.track(L.SpadeEventType.AutohostChatImpression), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    if (!this.isShowing) return null;
                    var e = Object(a.d)("You are now hosting {channel}", {
                            channel: this.props.data.user.displayName
                        }, "AutohostPrompt"),
                        t = Object(a.d)("Auto host this channel whenever you're offline?", "AutohostPrompt"),
                        n = Object(a.d)("Yes", "AutohostPrompt"),
                        i = Object(a.d)("Settings", "AutohostPrompt");
                    return d.createElement(A._27, {
                        "data-target": "autohost-container",
                        "data-test-selector": "autohost_prompt",
                        background: A.m.Base,
                        className: "autohost-prompt",
                        margin: {
                            x: 2
                        },
                        position: A._11.Relative
                    }, d.createElement(A.p, {
                        size: A.r.Medium,
                        direction: A.q.TopLeft,
                        show: !0
                    }, d.createElement(A._27, {
                        alignItems: A.c.Center,
                        borderBottom: !0,
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        justifyContent: A._3.Around,
                        padding: 1
                    }, d.createElement(A._4, {
                        position: A._11.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, d.createElement(A.v, {
                        ariaLabel: Object(a.d)("Close", "AutohostPrompt"),
                        size: A.w.Small,
                        type: A.x.Secondary,
                        "data-test-selector": "autohost-dismiss-button",
                        icon: A._18.Close,
                        onClick: this.dismiss
                    })), d.createElement(A.l, {
                        alt: this.props.data.user.displayName,
                        src: this.props.data.user.profileImageURL,
                        size: 30
                    }), d.createElement(A._4, {
                        className: "autohost-prompt__hosting-message",
                        display: A.P.Flex,
                        padding: {
                            top: .5
                        }
                    }, d.createElement(A._17, {
                        asset: A._18.Check
                    }), d.createElement(A.Y, {
                        margin: {
                            left: .5
                        }
                    }, d.createElement(A.O, null, e)))), d.createElement(A._4, {
                        className: "autohost-prompt__prompt",
                        justifyContent: A._3.Center,
                        display: A.P.Flex,
                        flexWrap: A.S.Wrap,
                        padding: 1
                    }, d.createElement(A.O, null, t), d.createElement(A._47, {
                        gutterSize: A._49.ExtraSmall,
                        childWidth: A._48.Large
                    }, d.createElement("div", null, d.createElement(A.u, {
                        "data-test-selector": "autohost-yes-button",
                        fullWidth: !0,
                        onClick: this.addChannelToAutohost
                    }, n)), d.createElement("div", null, d.createElement(A.u, {
                        "data-test-selector": "autohost-settings-button",
                        fullWidth: !0,
                        onClick: this.trackSettingsClick,
                        type: A.A.Hollow,
                        linkTo: "https://twitch.tv/settings/profile"
                    }, i))))))
                }, Object.defineProperty(t.prototype, "isShowing", {
                    get: function() {
                        return !this.state.isDismissed && !!this.props.hostedChannelLogin && !this.props.data.loading && !this.props.data.error && this.props.data.user && !!this.state.autohostChannels && !this.state.autohostChannels.includes(this.props.data.user.id) && !this.getAutohostNotificationsDismissed()[this.props.data.user.id]
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.track = function(e) {
                    ! function(e, t) {
                        a.n.track(e, i.__assign({
                            time: Date.now()
                        }, t))
                    }(e, {
                        user_id: this.props.data.currentUser.id,
                        hosting_channel_id: this.props.data.currentUser.id,
                        hosted_channel_id: this.props.data.user.id
                    })
                }, t.prototype.getAutohostNotificationsDismissed = function() {
                    return a.l.get("autohost-notifications-dismissed", {})
                }, t.prototype.setAutohostNotificationsDismissed = function(e) {
                    return a.l.set("autohost-notifications-dismissed", e)
                }, t = i.__decorate([Object(c.a)(Ye, {
                    skip: function(e) {
                        return !e.hostedChannelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.hostedChannelLogin
                            }
                        }
                    }
                })], t)
            }(d.Component),
            Ze = n("3T7g"),
            Xe = n("QsiC"),
            et = n("zCIC");
        n("bL99");
        ! function(e) {
            e[e.Gold = 0] = "Gold", e[e.Silver = 1] = "Silver", e[e.Bronze = 2] = "Bronze", e[e.Default = 3] = "Default"
        }(Je || (Je = {})),
        function(e) {
            e[e.Big = 0] = "Big", e[e.Small = 1] = "Small"
        }(Qe || (Qe = {}));
        var tt, nt = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.renderMedalSVG(this.props.medal, this.props.size),
                        t = O("bits-leaderboard-medal__profile-image", {
                            "bits-leaderboard-medal__profile-image--big": this.props.size === Qe.Big
                        }, {
                            "bits-leaderboard-medal__profile-image--small": this.props.size === Qe.Small
                        }),
                        n = null;
                    return this.props.profileImageUrl && (n = d.createElement(A.Y, {
                        position: A._11.Absolute
                    }, d.createElement("img", {
                        className: t,
                        src: this.props.profileImageUrl
                    }))), d.createElement(A._4, {
                        className: "bits-leaderboard-medal",
                        display: A.P.Flex,
                        position: A._11.Relative
                    }, e, n)
                }, t.prototype.renderMedalSVG = function(e, t) {
                    var n = t === Qe.Big ? "bits-leaderboard-medal__big" : "bits-leaderboard-medal__small";
                    return e === Je.Gold ? d.createElement("svg", {
                        className: n,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, d.createElement("defs", null, d.createElement("linearGradient", {
                        x1: "15.783%",
                        y1: "9.653%",
                        x2: "82.407%",
                        y2: "91.627%",
                        id: "bits-leaderboard-gold-linearGradient-1"
                    }, d.createElement("stop", {
                        stopColor: "#D8B258",
                        offset: "0%"
                    }), d.createElement("stop", {
                        stopColor: "#A4770E",
                        offset: "100%"
                    })), d.createElement("path", {
                        id: "bits-leaderboard-gold-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), d.createElement("linearGradient", {
                        x1: "17.025%",
                        y1: "7.356%",
                        x2: "84.092%",
                        y2: "91.769%",
                        id: "bits-leaderboard-gold-linearGradient-3"
                    }, d.createElement("stop", {
                        stopColor: "#E5B561",
                        offset: "0%"
                    }), d.createElement("stop", {
                        stopColor: "#EEC05F",
                        offset: "12.638%"
                    }), d.createElement("stop", {
                        stopColor: "#FFECB9",
                        offset: "20.419%"
                    }), d.createElement("stop", {
                        stopColor: "#DCB35E",
                        offset: "30.58%"
                    }), d.createElement("stop", {
                        stopColor: "#E0B55B",
                        offset: "45.279%"
                    }), d.createElement("stop", {
                        stopColor: "#CDA148",
                        offset: "62.771%"
                    }), d.createElement("stop", {
                        stopColor: "#E9CC8F",
                        offset: "76.584%"
                    }), d.createElement("stop", {
                        stopColor: "#ECBE5D",
                        offset: "83.038%"
                    }), d.createElement("stop", {
                        stopColor: "#C09A4C",
                        offset: "100%"
                    })), d.createElement("linearGradient", {
                        x1: "83.2%",
                        y1: "89.733%",
                        x2: "12.813%",
                        y2: "3.179%",
                        id: "bits-leaderboard-gold-linearGradient-4"
                    }, d.createElement("stop", {
                        stopColor: "#9A790A",
                        offset: "0%"
                    }), d.createElement("stop", {
                        stopColor: "#FFEFB9",
                        offset: "87.642%"
                    }), d.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "100%"
                    })), d.createElement("circle", {
                        id: "bits-leaderboard-gold-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), d.createElement("g", {
                        id: "bits-leaderboard-gold-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, d.createElement("g", {
                        id: "bits-leaderboard-gold-Medal-1-gold-lg"
                    }, d.createElement("g", {
                        id: "bits-leaderboard-gold-Star"
                    }, d.createElement("use", {
                        fill: "#D6A94C",
                        xlinkHref: "#bits-leaderboard-gold-path-2"
                    }), d.createElement("path", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), d.createElement("path", {
                        id: "bits-leaderboard-gold-Star",
                        fill: "url(#bits-leaderboard-gold-linearGradient-3)",
                        d: "M16 28.58l-2.469 2.215-1.615-2.897-3.055 1.294-.587-3.265-3.31.232.505-3.279-3.206-.855 1.543-2.937-2.755-1.85 2.413-2.277-2.005-2.643 3.021-1.371-1.037-3.151 3.302-.316.042-3.317 3.226.774 1.117-3.124 2.8 1.78L16 1l2.07 2.592 2.8-1.78 1.117 3.125 3.226-.774.042 3.317 3.302.316-1.037 3.151 3.021 1.37-2.005 2.644 2.413 2.278-2.755 1.849 1.543 2.937-3.206.855.505 3.28-3.31-.233-.587 3.265-3.055-1.294-1.615 2.897z"
                    }), d.createElement("g", {
                        id: "bits-leaderboard-gold-Oval"
                    }, d.createElement("use", {
                        fill: "#BE912A",
                        xlinkHref: "#bits-leaderboard-gold-path-5"
                    }), d.createElement("circle", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    }))))) : e === Je.Silver ? d.createElement("svg", {
                        className: n,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, d.createElement("defs", null, d.createElement("linearGradient", {
                        x1: "18.738%",
                        y1: "20.297%",
                        x2: "79.716%",
                        y2: "88.714%",
                        id: "bits-leaderboard-silver-linearGradient-1"
                    }, d.createElement("stop", {
                        stopColor: "#D0D8DB",
                        offset: "0%"
                    }), d.createElement("stop", {
                        stopColor: "#7E848A",
                        offset: "100%"
                    })), d.createElement("path", {
                        id: "bits-leaderboard-silver-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), d.createElement("linearGradient", {
                        x1: "19.638%",
                        y1: "10.855%",
                        x2: "81.99%",
                        y2: "89.124%",
                        id: "bits-leaderboard-silver-linearGradient-3"
                    }, d.createElement("stop", {
                        stopColor: "#202020",
                        offset: "0%"
                    }), d.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), d.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.779%"
                    }), d.createElement("stop", {
                        stopColor: "#313131",
                        offset: "30.58%"
                    }), d.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), d.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "61.521%"
                    }), d.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "74.572%"
                    }), d.createElement("stop", {
                        stopColor: "#656565",
                        offset: "87.343%"
                    }), d.createElement("stop", {
                        stopColor: "#C4C4C4",
                        offset: "100%"
                    })), d.createElement("linearGradient", {
                        x1: "0%",
                        y1: "0%",
                        x2: "99.438%",
                        y2: "96.312%",
                        id: "bits-leaderboard-silver-linearGradient-4"
                    }, d.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "3.677%"
                    }), d.createElement("stop", {
                        offset: "100%"
                    })), d.createElement("linearGradient", {
                        x1: "8.437%",
                        y1: "13.448%",
                        x2: "86.525%",
                        y2: "83.33%",
                        id: "bits-leaderboard-silver-linearGradient-5"
                    }, d.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "0%"
                    }), d.createElement("stop", {
                        stopColor: "#EAEEF2",
                        offset: "9.632%"
                    }), d.createElement("stop", {
                        stopColor: "#686C71",
                        offset: "100%"
                    })), d.createElement("circle", {
                        id: "bits-leaderboard-silver-path-6",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), d.createElement("g", {
                        id: "bits-leaderboard-silver-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, d.createElement("g", {
                        id: "bits-leaderboard-silver-Medal-2-silver-lg"
                    }, d.createElement("g", {
                        id: "bits-leaderboard-silver-Star-Copy-2"
                    }, d.createElement("use", {
                        fill: "#CBC8D0",
                        xlinkHref: "#bits-leaderboard-silver-path-2"
                    }), d.createElement("path", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), d.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-3",
                        fill: "url(#bits-leaderboard-silver-linearGradient-3)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), d.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-4-grad",
                        fill: "url(#bits-leaderboard-silver-linearGradient-4)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), d.createElement("g", {
                        id: "bits-leaderboard-silver-Oval-Copy"
                    }, d.createElement("use", {
                        fill: "#A3A7AA",
                        xlinkHref: "#bits-leaderboard-silver-path-6"
                    }), d.createElement("circle", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-5)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    }))))) : e === Je.Bronze ? d.createElement("svg", {
                        className: n,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, d.createElement("defs", null, d.createElement("linearGradient", {
                        x1: "14.834%",
                        y1: "10.25%",
                        x2: "82.068%",
                        y2: "89.469%",
                        id: "bits-leaderboard-bronze-linearGradient-1"
                    }, d.createElement("stop", {
                        stopColor: "#DF904C",
                        offset: "0%"
                    }), d.createElement("stop", {
                        stopColor: "#A65611",
                        offset: "100%"
                    })), d.createElement("path", {
                        id: "bits-leaderboard-bronze-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), d.createElement("linearGradient", {
                        x1: "19.142%",
                        y1: "10.021%",
                        x2: "79.509%",
                        y2: "86.458%",
                        id: "bits-leaderboard-bronze-linearGradient-3"
                    }, d.createElement("stop", {
                        offset: "0%"
                    }), d.createElement("stop", {
                        stopColor: "#494949",
                        offset: "9.355%"
                    }), d.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), d.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.419%"
                    }), d.createElement("stop", {
                        stopColor: "#818181",
                        offset: "25.723%"
                    }), d.createElement("stop", {
                        stopColor: "#5D5D5D",
                        offset: "39.965%"
                    }), d.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), d.createElement("stop", {
                        stopColor: "#7A7A7A",
                        offset: "50.012%"
                    }), d.createElement("stop", {
                        stopColor: "#717171",
                        offset: "57.677%"
                    }), d.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "63.526%"
                    }), d.createElement("stop", {
                        stopColor: "#888",
                        offset: "69.88%"
                    }), d.createElement("stop", {
                        stopColor: "#F1F1F1",
                        offset: "75.215%"
                    }), d.createElement("stop", {
                        stopColor: "#B9B9B9",
                        offset: "79.325%"
                    }), d.createElement("stop", {
                        stopColor: "#545454",
                        offset: "92.875%"
                    }), d.createElement("stop", {
                        offset: "100%"
                    })), d.createElement("linearGradient", {
                        x1: "19.604%",
                        y1: "10.043%",
                        x2: "84.81%",
                        y2: "89.074%",
                        id: "bits-leaderboard-bronze-linearGradient-4"
                    }, d.createElement("stop", {
                        stopColor: "#F2C6A5",
                        offset: "0%"
                    }), d.createElement("stop", {
                        stopColor: "#864223",
                        offset: "100%"
                    })), d.createElement("circle", {
                        id: "bits-leaderboard-bronze-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), d.createElement("g", {
                        id: "bits-leaderboard-bronze-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, d.createElement("g", {
                        id: "bits-leaderboard-bronze-Medal-3-bronze-lg"
                    }, d.createElement("g", {
                        id: "bits-leaderboard-bronze-Star-Copy-2B"
                    }, d.createElement("use", {
                        fill: "#DE9572",
                        xlinkHref: "#bits-leaderboard-bronze-path-2"
                    }), d.createElement("path", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), d.createElement("path", {
                        id: "bits-leaderboard-bronze-Star-Copy-3B",
                        fill: "url(#bits-leaderboard-bronze-linearGradient-3)",
                        opacity: ".4",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), d.createElement("g", {
                        id: "bits-leaderboard-bronze-Oval-Copy-B"
                    }, d.createElement("use", {
                        fill: "#A96643",
                        xlinkHref: "#bits-leaderboard-bronze-path-5"
                    }), d.createElement("circle", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    }))))) : e === Je.Default ? d.createElement("svg", {
                        className: n,
                        viewBox: "0 0 20 20",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, d.createElement("defs", null, d.createElement("path", {
                        id: "bits-leaderboard-default-path-1",
                        d: "M10 16.88l-1.31676 1.01089-.91717-1.38367-1.57365.52857-.4182-1.6065-1.66001-.01104.12608-1.65525-1.56648-.54944.65672-1.52462-1.3032-1.0283L3.1435 9.43184l-.8987-1.39573 1.45468-.79978-.39681-1.61193 1.63555-.2841.14808-1.65343 1.63918.26234.67692-1.51576 1.46519.78037L10 2l1.13241 1.21383 1.46519-.78037.67692 1.51576 1.63918-.26234.14808 1.65342 1.63555.28411-.3968 1.61193 1.45467.79978-.8987 1.39573 1.11618 1.22878-1.3032 1.02831.6567 1.52462-1.56647.54944.12608 1.65525-1.66.01104-.41821 1.6065-1.57365-.52857-.91717 1.38367z"
                    })), d.createElement("g", {
                        id: "bits-leaderboard-default-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, d.createElement("g", {
                        id: "bits-leaderboard-default-bitbadge/blank"
                    }, d.createElement("g", {
                        id: "bits-leaderboard-default-Star"
                    }, d.createElement("use", {
                        fill: "#D7CCEB",
                        xlinkHref: "#bits-leaderboard-default-path-1"
                    }), d.createElement("path", {
                        stroke: "#D7CCEB",
                        d: "M10 17.51035l-1.4374 1.10351-1.0012-1.51044-1.71783.577-.45652-1.7537-1.8121-.01204.13763-1.8069-1.71-.59979.71688-1.6643-1.4226-1.12253L2.5153 9.3798l-.98104-1.52362 1.58796-.87305-.43317-1.75961 1.7854-.31014.16165-1.80492 1.78937.28638.73894-1.65463 1.59943.85187L10 1.26703l1.23616 1.32505 1.59943-.85187.73894 1.65463 1.78937-.28638.16165 1.80492 1.7854.31014-.43317 1.7596 1.58796.87306-.98104 1.52362 1.21844 1.34136-1.4226 1.12252.71688 1.66431-1.71.59978.13763 1.8069-1.8121.01205-.45652 1.7537-1.71782-.577-1.00121 1.51044L10 17.51036z"
                    })), d.createElement("circle", {
                        id: "bits-leaderboard-default-Oval-2",
                        fill: "#EEE9F6",
                        cx: "10",
                        cy: "10",
                        r: "6"
                    })))) : null
                }, t
            }(d.Component),
            it = n("nrdj"),
            at = n("5Dex"),
            rt = n("CFVp"),
            ot = (n("mmly"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return d.createElement(A._4, {
                        display: A.P.InlineFlex,
                        alignItems: A.c.Center,
                        flexGrow: 1
                    });
                    var e = this.props.bitsConfig ? this.props.bitsConfig : Object(rt.a)(),
                        t = null,
                        n = "";
                    if (this.props.data && this.props.data.user) {
                        n = this.props.data.user.displayName || this.props.data.user.login;
                        var i = d.createElement(A.O, {
                            ellipsis: !0
                        }, n);
                        this.props.selfId && this.props.selfId === this.props.id && (i = d.createElement(A.O, {
                            ellipsis: !0,
                            color: A.J.Link,
                            bold: !0
                        }, n)), t = d.createElement(A._4, {
                            ellipsis: !0,
                            className: "bits-leaderboard-expanded-leaderboard-entry__username",
                            margin: {
                                x: 1
                            },
                            display: A.P.InlineBlock
                        }, i)
                    }
                    var r, o = null;
                    o = this.props.selfId && this.props.selfId === this.props.value ? d.createElement(A._8, {
                        label: this.props.rank.toString(),
                        type: A._9.Brand
                    }) : d.createElement(A.O, {
                        color: A.J.Link,
                        bold: !0
                    }, this.props.rank);
                    var s = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || a.a.defaultAvatarURL;
                    return r = d.createElement(A._4, {
                        overflow: A._7.Hidden,
                        display: A.P.InlineFlex,
                        flexGrow: 1,
                        fullWidth: !0,
                        alignItems: A.c.Center
                    }, d.createElement(A._4, {
                        className: "bits-leaderboard-expanded-leaderboard-entry__rank",
                        padding: {
                            right: .5
                        }
                    }, o), d.createElement("img", {
                        src: s,
                        className: "bits-leaderboard-expanded-leaderboard-entry__avatar"
                    }), t, d.createElement(A._4, {
                        flexShrink: 0,
                        className: "bits-leaderboard-expanded-leaderboard-entry__score",
                        margin: {
                            left: "auto"
                        },
                        display: A.P.InlineBlock
                    }, d.createElement(it.a, {
                        animated: !1,
                        showImage: !0,
                        showAmount: !0,
                        prefix: "Cheer",
                        bitsConfig: e,
                        size: it.b.ExtremelySmall,
                        display: A.P.InlineFlex,
                        amount: this.props.score,
                        formattedNumber: !0,
                        alignItems: A.c.Center
                    }))), d.createElement(A._4, {
                        className: "bits-leaderboard-expanded-leaderboard-entry",
                        display: A.P.Block,
                        alignItems: A.c.Center
                    }, r)
                }, t
            }(d.Component)),
            st = Object(m.d)(Object(c.a)(at, {
                name: "data",
                skip: function(e) {
                    return !e.id
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.value,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(ot),
            lt = (n("2ZhA"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return d.createElement(A._4, {
                        display: A.P.InlineFlex,
                        alignItems: A.c.Center,
                        flexGrow: 1
                    });
                    var e = this.props.bitsConfig ? this.props.bitsConfig : Object(rt.a)(),
                        t = null,
                        n = "";
                    if (this.props.data && this.props.data.user) {
                        n = this.props.data.user.displayName || this.props.data.user.login;
                        var i = d.createElement(A.O, {
                            ellipsis: !0,
                            bold: !0
                        }, n);
                        this.props.selfId && this.props.selfId === this.props.value && (i = d.createElement(A.O, {
                            ellipsis: !0,
                            color: A.J.Link,
                            bold: !0
                        }, n)), t = d.createElement(A._4, {
                            ellipsis: !0,
                            className: "bits-leaderboard-expanded-top-three-entry__username",
                            margin: {
                                x: .5
                            },
                            display: A.P.InlineBlock
                        }, i)
                    }
                    var r, o = null;
                    o = this.props.selfId && this.props.selfId === this.props.value ? d.createElement(A._8, {
                        label: this.props.rank.toString(),
                        type: A._9.Brand
                    }) : d.createElement(A.O, {
                        color: A.J.Link,
                        bold: !0
                    }, this.props.rank);
                    var s = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || a.a.defaultAvatarURL;
                    return r = d.createElement(A._4, {
                        overflow: A._7.Hidden,
                        display: A.P.InlineFlex,
                        flexGrow: 1,
                        fullWidth: !0,
                        alignItems: A.c.Center
                    }, d.createElement(A._4, {
                        className: "bits-leaderboard-expanded-top-three-entry__rank"
                    }, o), d.createElement(nt, {
                        size: Qe.Big,
                        medal: this.props.medal,
                        profileImageUrl: s
                    }), t, d.createElement(A._4, {
                        flexShrink: 0,
                        className: "bits-leaderboard-expanded-top-three-entry__score",
                        margin: {
                            left: "auto"
                        },
                        display: A.P.InlineBlock
                    }, d.createElement(it.a, {
                        animated: !1,
                        showImage: !0,
                        showAmount: !0,
                        prefix: "Cheer",
                        bitsConfig: e,
                        size: it.b.ExtremelySmall,
                        display: A.P.InlineFlex,
                        amount: this.props.score,
                        formattedNumber: !0,
                        alignItems: A.c.Center
                    }))), d.createElement(A._4, {
                        className: "bits-leaderboard-expanded-top-three-entry",
                        display: A.P.Block
                    }, r)
                }, t
            }(d.Component)),
            dt = Object(m.d)(Object(c.a)(at, {
                name: "data",
                skip: function(e) {
                    return !e.id
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.value,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(lt);
        ! function(e) {
            e.Weekly = "WEEK", e.AllTime = "ALLTIME", e.Monthly = "MONTH"
        }(tt || (tt = {}));
        n("GuSj");
        var ct = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.renderExpandArrow = function() {
                    return d.createElement(A._4, {
                        position: A._11.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        className: "bits-leaderboard-expanded__arrow",
                        display: A.P.Flex,
                        alignItems: A.c.Stretch
                    }, d.createElement(A.u, {
                        size: A.y.Small,
                        fullWidth: !0,
                        type: A.A.Text,
                        onClick: t.props.toggleExpand
                    }, d.createElement(A._17, {
                        asset: A._18.AngleUp,
                        height: 12,
                        width: 12
                    })))
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this.shouldRenderBottomContent(),
                    t = this.renderTopThreeEntries(),
                    n = this.renderTopTenEntries(),
                    i = this.renderExpandArrow(),
                    a = this.renderTopSection(),
                    r = null,
                    o = null;
                e && ((r = this.renderUserPlaceEntry()) || (o = this.renderBottomSection()));
                var s = {
                        "bits-leaderboard-expanded__top-three-break": !!this.props.topEdges && this.props.topEdges.length > 3
                    },
                    l = {
                        "bits-leaderboard-expanded__top-ten-break": !!this.props.topEdges && this.props.topEdges.length > 0
                    };
                return d.createElement(A._27, {
                    background: A.m.Base,
                    padding: {
                        top: 1
                    },
                    position: A._11.Relative
                }, a, d.createElement(et.b, {
                    className: "bits-leaderboard-expanded__scrollable",
                    suppressScrollX: !0
                }, d.createElement(A._4, null, d.createElement("ul", null, t, d.createElement(A._4, {
                    className: O(s)
                }), n, d.createElement(A._4, {
                    className: O(l)
                }), r), o)), i)
            }, t.prototype.renderTopThreeEntries = function() {
                if (!this.props.topEdges) return null;
                var e = [];
                return this.props.topEdges[0] && e.push(this.renderTopThreeEntry(this.props.topEdges[0], Je.Gold)), this.props.topEdges[1] && e.push(this.renderTopThreeEntry(this.props.topEdges[1], Je.Silver)), this.props.topEdges[2] && e.push(this.renderTopThreeEntry(this.props.topEdges[2], Je.Bronze)), e
            }, t.prototype.renderTopSection = function() {
                var e = Object(a.d)("Weekly Top Cheerers", "Bits--PinnedCheerV2"),
                    t = this.props.secondsRemaining ? this.props.secondsRemaining : 0,
                    n = Math.floor(t / 86400),
                    i = d.createElement(A.O, {
                        type: A._41.Span
                    }, Object(a.d)("Resets in {time} days", {
                        time: n
                    }, "Bits--PinnedCheerV2"));
                return n < 1 && (i = d.createElement(A.O, {
                    type: A._41.Span
                }, Object(a.d)("Resets in less than a day", "Bits--PinnedCheerV2"))), this.props.leaderboardMode === tt.AllTime ? (e = Object(a.d)("All-time Top Cheerers", "Bits--PinnedCheerV2"), i = null) : this.props.leaderboardMode === tt.Monthly && (e = Object(a.d)("Monthly Top Cheerers", "Bits--PinnedCheerV2")), d.createElement(A._4, {
                    display: A.P.Flex,
                    alignItems: A.c.Center,
                    flexDirection: A.R.Column
                }, d.createElement(A.O, {
                    type: A._41.H5,
                    bold: !0
                }, e), i, d.createElement(A._4, {
                    className: "bits-leaderboard-expanded__section-break",
                    margin: {
                        y: 1
                    }
                }))
            }, t.prototype.renderBottomSection = function() {
                var e = !!this.props.topEdges && this.props.topEdges.length > 0;
                return d.createElement(A._4, {
                    padding: {
                        bottom: 1
                    }
                }, d.createElement(A._27, {
                    borderTop: e
                }, d.createElement(A._4, {
                    display: A.P.Flex,
                    flexDirection: A.R.Column,
                    alignItems: A.c.Center,
                    margin: {
                        top: 1
                    }
                }, d.createElement(A._17, {
                    asset: A._18.Bits,
                    type: A._19.Brand
                }), d.createElement(A.O, {
                    type: A._41.Span,
                    bold: !0
                }, Object(a.d)("Cheer your way to the top!", "Bits--PinnedCheersV2")), d.createElement(A.M, {
                    to: "https://blog.twitch.tv/earn-new-rewards-for-supporting-your-favorite-creators-da6b34a98827",
                    targetBlank: !0,
                    hoverUnderlineNone: !1
                }, d.createElement(A.O, {
                    bold: !0
                }, Object(a.d)("Learn More", "Bits--PinnedCheersV2"))))))
            }, t.prototype.renderTopThreeEntry = function(e, t) {
                return d.createElement(A._4, {
                    key: e.node.id,
                    padding: {
                        x: 1,
                        top: .5
                    }
                }, d.createElement(dt, {
                    id: e.node.id,
                    value: e.node.entryKey,
                    score: e.node.score,
                    bitsConfig: this.props.bitsConfig,
                    medal: t,
                    selfId: this.props.selfId,
                    rank: e.node.rank
                }))
            }, t.prototype.renderTopTenEntries = function() {
                var e = this;
                return this.props.topEdges ? this.props.topEdges.slice(3, 10).map(function(t) {
                    return e.renderTopTenEntry(t.node)
                }) : null
            }, t.prototype.renderTopTenEntry = function(e) {
                return d.createElement(A._4, {
                    key: e.id,
                    padding: {
                        x: 1,
                        top: .5
                    }
                }, d.createElement(st, {
                    id: e.id,
                    value: e.entryKey,
                    score: e.score,
                    bitsConfig: this.props.bitsConfig,
                    selfId: this.props.selfId,
                    rank: e.rank
                }))
            }, t.prototype.shouldRenderBottomContent = function() {
                var e = this;
                if (!this.props.topEdges) return !1;
                var t = !0;
                return this.props.topEdges.forEach(function(n) {
                    n.node.entryKey === e.props.selfId && (t = !1)
                }), t
            }, t.prototype.renderUserPlaceEntry = function() {
                if (!this.props.userPlaceEdge) return null;
                var e = this.renderTopTenEntry(this.props.userPlaceEdge);
                return d.createElement(A._4, {
                    padding: {
                        top: .5
                    }
                }, d.createElement(A._27, {
                    borderTop: !0
                }, d.createElement(A._4, {
                    padding: {
                        y: .5
                    }
                }, e)))
            }, t
        }(d.Component);

        function ut(e) {
            switch (e) {
                case 1:
                    return Object(a.d)("Cheer now to be #1!", "Bits--PinnedCheerV2");
                case 2:
                    return Object(a.d)("Cheer to take #2!", "Bits--PinnedCheerV2");
                case 3:
                    return Object(a.d)("Cheer to take #3!", "Bits--PinnedCheerV2");
                default:
                    return Object(a.d)("...", "Bits--PinnedCheerV2")
            }
        }
        n("iqz2");
        var mt = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return d.createElement(A._4, {
                        display: A.P.InlineBlock,
                        alignItems: A.c.Center,
                        flexGrow: 1
                    });
                    var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(rt.a)(),
                        n = null,
                        i = "";
                    if (this.props.data && this.props.data.user) {
                        i = this.props.data.user.displayName || this.props.data.user.login;
                        var r = d.createElement(A.O, {
                            ellipsis: !0,
                            bold: !0
                        }, i);
                        this.props.selfId && this.props.selfId === this.props.entryKey && (r = d.createElement(A._8, {
                            label: i,
                            type: A._9.Brand
                        })), n = d.createElement(A._4, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-first-entry__username"
                        }, r)
                    }
                    if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                        var o = ut(1);
                        e = d.createElement(A._4, {
                            className: "bits-leaderboard-header-first-entry__container",
                            overflow: A._7.Hidden,
                            display: A.P.InlineFlex,
                            alignItems: A.c.Center,
                            flexGrow: 1
                        }, d.createElement(A._4, {
                            flexShrink: 0
                        }, d.createElement(nt, {
                            size: Qe.Big,
                            medal: Je.Default
                        })), d.createElement(A._4, {
                            className: "bits-leaderboard-header-first-entry__text",
                            margin: {
                                left: .5
                            }
                        }, d.createElement(A.O, {
                            color: A.J.Link,
                            bold: !0
                        }, o)))
                    } else {
                        var s = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || a.a.defaultAvatarURL;
                        e = d.createElement(A._4, {
                            className: "bits-leaderboard-header-first-entry__container",
                            overflow: A._7.Hidden,
                            display: A.P.InlineFlex,
                            alignItems: A.c.Center,
                            flexGrow: 1
                        }, d.createElement(A._4, {
                            flexShrink: 0
                        }, d.createElement(nt, {
                            size: Qe.Big,
                            medal: Je.Gold,
                            profileImageUrl: s
                        })), d.createElement(A._4, {
                            className: "bits-leaderboard-header-first-entry__text",
                            margin: {
                                left: .5
                            }
                        }, n, d.createElement(A._4, {
                            className: "bits-leaderboard-header-first-entry__score"
                        }, d.createElement(it.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: t,
                            size: it.b.ExtremelySmall,
                            display: A.P.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: A.c.Center
                        }))))
                    }
                    this.props.isEmpty || (e = d.createElement(A._44, {
                        label: i,
                        direction: A._46.Bottom
                    }, e));
                    var l = {
                        "bits-leaderboard-header-first-entry": !0,
                        "bits-leaderboard-header-first-entry__empty": this.props.isEmpty
                    };
                    return d.createElement(A._4, {
                        className: O(l),
                        flexShrink: 0
                    }, e)
                }, t
            }(d.Component),
            pt = Object(m.d)(Object(c.a)(at, {
                name: "data",
                skip: function(e) {
                    return !e.id || !e.entryKey
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.entryKey,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(mt),
            ht = (n("x8iQ"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return d.createElement(A._4, {
                        display: A.P.InlineFlex,
                        alignItems: A.c.Center,
                        flexGrow: 1
                    });
                    var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(rt.a)(),
                        n = null,
                        i = "";
                    if (this.props.data && this.props.data.user) {
                        i = this.props.data.user.displayName || this.props.data.user.login;
                        var r = d.createElement(A.O, {
                            ellipsis: !0,
                            bold: !0
                        }, i);
                        this.props.selfId && this.props.selfId === this.props.entryKey && (r = d.createElement(A._8, {
                            label: i,
                            type: A._9.Brand
                        })), n = d.createElement(A._4, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-runner-up-entry__username",
                            flexShrink: 1,
                            margin: {
                                x: .5
                            }
                        }, r)
                    }
                    if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                        var o = ut(this.props.rank ? this.props.rank : 0);
                        e = d.createElement(A._4, {
                            overflow: A._7.Hidden,
                            display: A.P.Flex,
                            alignItems: A.c.Center,
                            flexGrow: 0,
                            fullWidth: !0
                        }, d.createElement(A._4, {
                            flexShrink: 0
                        }, d.createElement(nt, {
                            size: Qe.Small,
                            medal: Je.Default
                        })), d.createElement(A._4, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-runner-up-entry__username",
                            flexShrink: 1,
                            margin: {
                                x: .5
                            }
                        }, d.createElement(A.O, {
                            color: A.J.Link,
                            bold: !0
                        }, o)))
                    } else {
                        var s = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || a.a.defaultAvatarURL;
                        e = d.createElement(A._4, {
                            overflow: A._7.Hidden,
                            display: A.P.Flex,
                            alignItems: A.c.Center,
                            flexGrow: 0,
                            fullWidth: !0
                        }, d.createElement(A._4, {
                            flexShrink: 0
                        }, d.createElement(nt, {
                            size: Qe.Small,
                            medal: this.props.medal,
                            profileImageUrl: s
                        })), n, d.createElement(A._4, {
                            flexShrink: 0,
                            className: "bits-leaderboard-header-runner-up-entry__score",
                            margin: {
                                left: "auto"
                            }
                        }, d.createElement(it.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: t,
                            size: it.b.ExtremelySmall,
                            display: A.P.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: A.c.Center
                        })))
                    }
                    return this.props.isEmpty || (e = d.createElement(A._44, {
                        label: i,
                        direction: A._46.Bottom
                    }, e)), d.createElement(A._4, {
                        className: "bits-leaderboard-header-runner-up-entry",
                        display: A.P.Flex,
                        alignItems: A.c.Center
                    }, e)
                }, t
            }(d.Component)),
            gt = Object(m.d)(Object(c.a)(at, {
                name: "data",
                skip: function(e) {
                    return !e.id || !e.entryKey
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.entryKey,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(ht),
            ft = (n("LM6T"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderFirstPlaceEntry = function() {
                        var e, n = null;
                        return t.props.topEdges && t.props.topEdges[0] && (n = t.props.topEdges[0]), e = n ? d.createElement(pt, {
                            selfId: t.props.selfId,
                            id: n.node.id,
                            entryKey: n.node.entryKey,
                            score: n.node.score,
                            bitsConfig: t.props.bitsConfig
                        }) : d.createElement(pt, {
                            isEmpty: !0
                        }), d.createElement(A.Y, {
                            key: 1
                        }, e)
                    }, t.renderExpandArrow = function() {
                        return d.createElement(A._4, {
                            className: "pinned-cheer-v2-header--arrow",
                            alignItems: A.c.Stretch,
                            fullHeight: !0,
                            display: A.P.InlineFlex,
                            attachTop: !0,
                            position: A._11.Absolute
                        }, d.createElement(A.u, {
                            size: A.y.Small,
                            fullWidth: !0,
                            type: A.A.Text,
                            onClick: t.props.toggleExpand
                        }, d.createElement(A._17, {
                            asset: A._18.AngleDown,
                            height: 12,
                            width: 12
                        })))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.renderFirstPlaceEntry(),
                        t = null,
                        n = null,
                        i = this.renderExpandArrow();
                    if (this.props.topEdges && this.props.topEdges[0]) {
                        t = this.renderRunnerUpEntry(2, Je.Silver);
                        var a = this.props.topEdges[1] ? 3 : 0;
                        n = this.renderRunnerUpEntry(a, Je.Bronze)
                    }
                    return d.createElement(A._27, {
                        className: "pinned-cheer-v2-header",
                        background: A.m.Base,
                        position: A._11.Relative
                    }, d.createElement(A._4, {
                        className: "pinned-cheer-v2-header__users",
                        display: A.P.InlineFlex,
                        flexWrap: A.S.NoWrap,
                        justifyContent: A._3.Between,
                        fullHeight: !0
                    }, e, d.createElement(A._4, {
                        className: "pinned-cheer-v2-header__runner-up-entries",
                        display: A.P.Flex,
                        flexShrink: 1,
                        flexWrap: A.S.NoWrap,
                        justifyContent: A._3.Between,
                        flexDirection: A.R.Column
                    }, t, n)), i)
                }, t.prototype.renderRunnerUpEntry = function(e, t) {
                    var n, i = null;
                    return e > 0 && this.props.topEdges && this.props.topEdges[e - 1] && (i = this.props.topEdges[e - 1]), n = i ? d.createElement(gt, {
                        selfId: this.props.selfId,
                        id: i.node.id,
                        entryKey: i.node.entryKey,
                        score: i.node.score,
                        medal: t,
                        bitsConfig: this.props.bitsConfig
                    }) : d.createElement(gt, {
                        isEmpty: !0,
                        medal: Je.Default,
                        rank: e
                    }), d.createElement(A.Y, {
                        key: e
                    }, n)
                }, t
            }(d.Component)),
            vt = n("4Q5V"),
            bt = (n("1vwK"), "pinned-cheer--collapse"),
            kt = /(\d+)$/,
            yt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1
                    }, t.collapseCheer = !0, t.root = null, t.renderedMessage = null, t.saveRenderedMessageRef = function(e) {
                        t.renderedMessage = e
                    }, t.saveRootRef = function(e) {
                        t.root = e
                    }, t.handleHeadlineClick = function() {
                        t.collapseCheer = !t.collapseCheer, t.root && t.root.classList.toggle(bt, t.collapseCheer)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    if (this.renderedMessage) {
                        var e = this.renderedMessage.getElementsByClassName("pinned-cheer__rendered-message-inner");
                        if (e.length) {
                            var t = e[0].getBoundingClientRect().height > 42;
                            this.state.cheerIsTall !== t && this.setState({
                                cheerIsTall: t
                            })
                        }
                    }
                }, t.prototype.render = function() {
                    if (!this.props.recentCheer) return null;
                    for (var e = "", t = 0, n = this.props.recentCheer.messageParts; t < n.length; t++) {
                        var i = n[t];
                        if (i.type === Ee.a.Emote && i.content.cheerAmount && i.content.alt) {
                            var r = i.content.alt.replace(kt, "").toLowerCase();
                            e ? e !== r && (e = "cheer") : e = r
                        }
                    }
                    var o, s, l = this.state.cheerIsTall,
                        c = d.createElement("div", {
                            ref: this.saveRenderedMessageRef,
                            className: O({
                                "pinned-cheer__rendered-message": !0,
                                "pinned-cheer__rendered-message--recent": !0
                            })
                        }, d.createElement(A._27, {
                            margin: {
                                x: 2
                            },
                            borderTop: !0
                        }), d.createElement(A._4, {
                            padding: {
                                y: .5
                            },
                            className: "pinned-cheer__rendered-message-inner"
                        }, d.createElement(vt.a, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeData,
                            showAutoModActions: !1,
                            showModerationActions: !1,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isCurrentUserModerator: !1,
                            message: this.props.recentCheer,
                            showModerationIcons: !1,
                            showTimestamps: !1
                        }))),
                        u = d.createElement(A.O, {
                            type: A._41.Strong
                        }, Object(a.d)("Recent Cheer", "Bits--PinnedCheers")),
                        m = ((s = {
                            "pinned-cheer__bounding-box": !0
                        })[bt] = this.collapseCheer, s),
                        p = {
                            "pinned-cheer__headline": !0,
                            "pinned-cheer__headline--clickable": l
                        },
                        h = this.props.recentCheerMsRemaining ? this.props.recentCheerMsRemaining : 0;
                    return o = d.createElement(A._4, {
                        className: "pinned-cheer__progress-bar-placeholder"
                    }, d.createElement(A._4, {
                        className: "pinned-cheer__progress-bar",
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        justifyContent: A._3.End
                    }, d.createElement(A._14, {
                        key: this.props.recentCheer.id,
                        countdown: h / 1e3,
                        size: A._15.ExtraSmall
                    }))), d.createElement(A._4, {
                        className: "pinned-cheer",
                        flexGrow: 0,
                        flexShrink: 0,
                        zIndex: A._53.Default
                    }, d.createElement("div", {
                        className: O(m),
                        ref: this.saveRootRef
                    }, d.createElement(A.Y, {
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: A.P.Flex,
                        flexDirection: A.R.Row,
                        flexWrap: A.S.NoWrap
                    }, d.createElement("div", {
                        className: O(p),
                        onClick: l ? this.handleHeadlineClick : void 0
                    }, d.createElement(A._4, {
                        flexGrow: 1,
                        flexShrink: 1,
                        display: A.P.Flex,
                        alignItems: A.c.Center,
                        flexWrap: A.S.Wrap
                    }, d.createElement(A._17, {
                        asset: A._18.HourGlass,
                        height: 18,
                        width: 18
                    }), d.createElement(A._4, {
                        margin: {
                            left: .5
                        },
                        display: A.P.Inline
                    }, u), null), d.createElement(A._4, {
                        className: "pinned-cheer__expand-caret",
                        flexShrink: 0,
                        flexGrow: 0,
                        display: A.P.Flex,
                        justifyContent: A._3.Between,
                        alignItems: A.c.Center
                    }, l ? d.createElement(A._17, {
                        asset: A._18.AngleLeft
                    }) : null))), c, o))
                }, t
            }(d.Component),
            _t = n("XYVN"),
            Ct = n("dQj3"),
            St = n("eMi+"),
            Et = (n("zbFZ"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isExpanded: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null
                    }, t.recentCheerTimeout = 0, t.toggleIsExpanded = function() {
                        t.setState(function(e) {
                            return {
                                isExpanded: !e.isExpanded
                            }
                        })
                    }, t.handleProgressExpired = function() {
                        y.k.debug("setTimeout expired, forcing re-render"), t.forceUpdate()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.calcRecentCheerExpiry(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.calcRecentCheerExpiry(e)
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.recentCheerTimeout)
                }, t.prototype.shouldComponentUpdate = function(e, t) {
                    var n = this.getRecentCheerInfo(this.props, this.state),
                        i = this.getRecentCheerInfo(e, t);
                    if (!n.shouldRender && !n.recentCheer) return !0;
                    var a = n.recentCheer ? n.recentCheer.id : 0,
                        r = i.recentCheer ? i.recentCheer.id : 0;
                    return n.shouldRender !== i.shouldRender || n.recentCheer !== i.recentCheer || a !== r
                }, t.prototype.componentDidUpdate = function() {
                    var e = this.getRecentCheerInfo(this.props, this.state),
                        t = 0;
                    this.state.recentCheerExpireTime && (t = Math.max(0, this.state.recentCheerExpireTime - Date.now())), e.shouldRender && (clearTimeout(this.recentCheerTimeout), this.recentCheerTimeout = setTimeout(this.handleProgressExpired, t + 100))
                }, t.prototype.render = function() {
                    var e = null,
                        t = this.renderRecentCheer();
                    return null === t && (e = this.renderLeaderboard()), d.createElement(A._4, {
                        zIndex: A._53.Default
                    }, e, t)
                }, t.prototype.renderLeaderboard = function() {
                    if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.leaderboard)) return null;
                    if (!this.props.data.user.cheer.settings || !this.props.data.user.cheer.settings.leaderboard || !this.props.data.user.cheer.settings.leaderboard.isEnabled) return null;
                    var e = this.props.data.user.cheer.leaderboard.items.edges.slice(0, 10),
                        t = null,
                        n = this.props.data.user.cheer.settings.leaderboard.timePeriodType ? this.props.data.user.cheer.settings.leaderboard.timePeriodType : tt.AllTime;
                    this.props.data.user.self && this.props.data.user.self.bitsLeaderboardItem && (t = this.props.data.user.self.bitsLeaderboardItem);
                    var i = null;
                    this.state.isExpanded && (i = d.createElement(ct, {
                        topEdges: e,
                        userPlaceEdge: t,
                        toggleExpand: this.toggleIsExpanded,
                        selfId: this.props.userID,
                        bitsConfig: this.props.bitsConfig,
                        leaderboardMode: n,
                        secondsRemaining: this.props.data.user.cheer.leaderboard.secondsRemaining
                    }));
                    var a = null;
                    return this.state.isExpanded || (a = d.createElement(ft, {
                        topEdges: e,
                        toggleExpand: this.toggleIsExpanded,
                        selfId: this.props.userID,
                        bitsConfig: this.props.bitsConfig
                    })), d.createElement(A._4, {
                        className: "pinned-cheer-v2",
                        zIndex: A._53.Default
                    }, d.createElement(A._27, {
                        borderBottom: !0
                    }, a, i))
                }, t.prototype.getRecentCheerInfo = function(e, t) {
                    var n = !1,
                        i = void 0;
                    this.state.isExpanded || !e.data.error && e.data.user && e.data.user.cheer && e.data.user.cheer.recent && e.data.user.cheer.settings.isRecentEnabled && t.recentCheerExpireTime && 0 !== Math.max(0, t.recentCheerExpireTime - Date.now()) && (n = !0, i = Object(Ct.a)(e.data.user.cheer.recent, this.props.bitsConfig, this.props.blockLinks) || void 0);
                    return {
                        shouldRender: n,
                        recentCheer: i
                    }
                }, t.prototype.renderRecentCheer = function() {
                    if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.recent)) return null;
                    var e = this.getRecentCheerInfo(this.props, this.state);
                    return e.shouldRender ? d.createElement(yt, {
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelID: this.props.channelID,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        recentCheer: e.recentCheer,
                        recentCheerMsRemaining: this.props.data.user.cheer.settings.recentTimeoutMs
                    }) : null
                }, t.prototype.calcRecentCheerExpiry = function(e) {
                    if (e.data.user && e.data.user.cheer && e.data.user.cheer.recentTimeoutMs && e.data.user.cheer.recent) {
                        var t = Object(Ct.a)(e.data.user.cheer.recent, this.props.bitsConfig, this.props.blockLinks),
                            n = t ? t.id : null;
                        this.state.recentCheerID !== n && this.setState({
                            recentCheerID: n,
                            recentCheerExpireTime: n ? Date.now() + e.data.user.cheer.recentTimeoutMs : null
                        })
                    }
                }, t
            }(d.Component)),
            Nt = Object(m.d)(Object(c.a)(St, {
                name: "data",
                options: function(e) {
                    return {
                        variables: {
                            channelID: e.channelID
                        }
                    }
                }
            }), Object(ue.a)(function(e) {
                return {
                    query: Xe,
                    variables: {
                        channelID: e.channelID
                    },
                    topic: Object(M.b)(e.channelID),
                    type: R.PubsubMessageType.BitsPinEvent,
                    mutator: function(t, n) {
                        if (n && n.user && n.user.cheer) {
                            var i = JSON.parse(t.msg);
                            if (i.channel_id === e.channelID) return y.k.debug("Received pubsub update", {
                                hasRecentCheer: !!i.recent && i.recent.has_recent_event,
                                hasNewRecentCheer: !n.user.cheer.recent || null !== i.recent.tags && n.user.cheer.recent.id !== i.recent.tags.msg_id
                            }), i.recent && (i.recent.has_recent_event || "dismiss" === i.action) ? (!n.user.cheer.recent || null !== i.recent.tags && n.user.cheer.recent.id !== i.recent.tags.msg_id || "dismiss" === i.action) && (n.user.cheer.recent = Object(Ct.c)(i.recent), n.user.cheer.recentTimeoutMs = n.user.cheer.settings.recentTimeoutMs) : n.user.cheer.recent = null, n
                        }
                    }
                }
            }), Object(ue.a)(function(e) {
                return Object(_t.a)(St, e.channelID, e.data.user && e.data.user.cheer && e.data.user.cheer.leaderboard, e.userID)
            }))(Et),
            wt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null,
                        pcheersV2Enabled: !1
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return d.createElement(Nt, {
                        channelID: this.props.channelID,
                        userID: this.props.userID,
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin
                    })
                }, t
            }(d.Component);
        var Dt, Ot, It = Object(s.b)(function(e) {
            var t = Object(l.c)(e);
            return {
                isStaff: t && t.roles && t.roles.isStaff
            }
        })(wt);
        ! function(e) {
            e.Bits = "bits", e.Leaderboard = "bits-leader"
        }(Dt || (Dt = {})),
        function(e) {
            e.Badge = "badge_update", e.Balance = "balance_update"
        }(Ot || (Ot = {}));
        var Rt, Tt = n("6BvN"),
            Mt = n("+xm8"),
            Lt = n("HM6l"),
            xt = n("f2i/"),
            At = n("c3pS"),
            Ft = (n("56e8"), function(e) {
                var t = void 0 !== e.progress,
                    n = d.createElement("img", {
                        className: "cheer-badge__image",
                        src: e.badge.image1x,
                        alt: e.badge.title,
                        srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                    });
                if (!t) return n;
                var i = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                return d.createElement("div", {
                    className: "cheer-badge__progress-container"
                }, n, d.createElement("div", {
                    className: "cheer-badge__progress-overlay",
                    style: {
                        width: i + "px"
                    },
                    "data-test-selector": "cheer-progress"
                }))
            }),
            jt = n("3iBR"),
            Bt = function(e) {
                var t;
                e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = d.createElement(A._4, {
                    padding: {
                        bottom: .5
                    }
                }, e.selfBitsBadge.current && d.createElement(A._4, {
                    display: A.P.Inline,
                    margin: {
                        right: .5
                    }
                }, d.createElement(Ft, {
                    badge: e.selfBitsBadge.current
                })), e.selfBitsBadge.next && d.createElement(Ft, {
                    badge: e.selfBitsBadge.next,
                    progress: e.selfBitsBadge.progress
                }), e.selfBitsBadge.nextBits && Object(a.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                    bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                }, "Bits--BalanceFooter")));
                var n = Object(a.d)("{bitsGem} Log in to see your Bits balance", {
                    bitsGem: d.createElement(x.a, {
                        count: 100,
                        withImage: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: p.a.Dark
                    })
                }, "Bits--BalanceFooter");
                return void 0 !== e.balance && null !== e.balance && (n = Object(a.d)("You have {currentBits}", {
                    currentBits: d.createElement(x.a, {
                        count: e.balance,
                        withImage: !0,
                        withText: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: p.a.Dark
                    })
                }, "Bits--BalanceFooter")), d.createElement(A._4, {
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-balance-footer"
                }, t, d.createElement(A._4, {
                    display: A.P.Flex,
                    flexGrow: 1,
                    alignItems: A.c.Center,
                    justifyContent: A._3.Between
                }, d.createElement("div", null, n), d.createElement(A.u, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > jt.i,
                    onClick: e.onClickGetBits,
                    "data-test-selector": "get-bits-button",
                    "data-a-target": "get-bits-button"
                }, Object(a.d)("Get Bits", "Bits--BalanceFooter"))))
            },
            Ut = function() {
                return d.createElement(A._27, {
                    className: "t-bits-card",
                    display: A.P.Flex,
                    flexDirection: A.R.Column,
                    alignItems: A.c.Center,
                    justifyContent: A._3.Center,
                    textAlign: A._37.Center,
                    padding: 1,
                    border: !0,
                    background: A.m.Base,
                    elevation: 3,
                    fullWidth: !0
                }, d.createElement(A.O, {
                    italic: !0
                }, Object(a.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
            },
            Pt = n("QRuM"),
            Vt = n("ySfT"),
            Ht = function(e) {
                return d.createElement(A._4, {
                    display: A.P.Flex,
                    flexGrow: 1,
                    flexDirection: A.R.Column,
                    justifyContent: A._3.Center,
                    alignItems: A.c.Center,
                    padding: 1
                }, d.createElement(A._4, {
                    padding: {
                        top: 2,
                        bottom: 2
                    }
                }, d.createElement(A.O, {
                    type: A._41.H5,
                    color: A.J.Link,
                    bold: !0
                }, Object(a.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), d.createElement(A.O, null, Object(a.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), d.createElement(A._4, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, d.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(a.d)("How do I cheer?", "Bits--CheermoteIntro"))))
            },
            Wt = function(e) {
                var t = e.headline || e.prefix + (e.tier || "");
                if (e.tournament && e.tier <= 0) {
                    var n = e.tournament.teams.find(function(t) {
                        return t.id === e.prefix
                    });
                    n && (t = n.name + " - " + e.prefix)
                }
                var i = e.tier;
                return e.event && !e.tier && (i = 1), d.createElement(A._4, {
                    display: A.P.Flex,
                    flexDirection: A.R.Column,
                    alignItems: A.c.Center,
                    padding: 1
                }, d.createElement(A.O, {
                    type: A._41.H4,
                    bold: !0
                }, t), d.createElement(it.a, {
                    prefix: e.prefix,
                    amount: i,
                    bitsConfig: e.bitsConfig,
                    showImage: !0,
                    showAmount: !(e.event && !e.tier)
                }))
            },
            Gt = (n("DVR9"), function(e) {
                var t = null;
                e.minToCheer > 1 && (t = d.createElement(A.O, {
                    color: A.J.Alt2,
                    italic: !0
                }, Object(a.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                    minToCheer: e.minToCheer
                }, "Bits--CheermoteTierIntro")));
                var n = null;
                return e.minToPin > 0 && (n = d.createElement(A.O, {
                    color: A.J.Alt2,
                    italic: !0
                }, Object(a.d)("Pinning your Cheer is a minimum of {minToPin} Bits", {
                    minToPin: e.minToPin
                }, "Bits--CheermoteTierIntro"))), d.createElement(A._4, {
                    display: A.P.Flex,
                    flexGrow: 1,
                    flexDirection: A.R.Column,
                    alignItems: A.c.Center,
                    justifyContent: A._3.Center,
                    padding: 1,
                    className: "cheermote-tier-intro"
                }, d.createElement(A._4, {
                    padding: {
                        x: 4
                    },
                    margin: {
                        bottom: 1
                    }
                }, d.createElement(A.O, {
                    color: A.J.Alt2
                }, Object(a.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t, n)
            }),
            qt = n("1bR2"),
            zt = n.n(qt),
            $t = n("vDGQ"),
            Jt = (n("CGWe"), function(e) {
                return Object($t.d)({
                    action: $t.a.View,
                    type: $t.c.BitsIntro,
                    channelId: e.channelID
                }), d.createElement(A._4, {
                    "data-test-selector": "crate-intro"
                }, d.createElement(A._4, {
                    padding: {
                        x: 1,
                        top: 2,
                        bottom: 1
                    }
                }, d.createElement(A.O, {
                    fontSize: A.T.Size4,
                    bold: !0
                }, Object(a.d)("Share the Holiday Cheer!", "Crates"))), d.createElement(A._27, {
                    className: "crates-holiday-background",
                    background: A.m.Alt,
                    padding: 1,
                    margin: {
                        y: 1
                    },
                    display: A.P.Flex,
                    justifyContent: A._3.Around,
                    alignItems: A.c.End,
                    borderTop: !0,
                    borderBottom: !0
                }, d.createElement(A.e, {
                    type: A.i.BounceIn,
                    delay: A.f.Long,
                    enabled: !0
                }, d.createElement(A._44, {
                    label: "XmasRaid"
                }, d.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633161/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/3.0 3.0x",
                    alt: "XmasRaid"
                }))), d.createElement(A.e, {
                    type: A.i.BounceIn,
                    delay: A.f.Medium,
                    enabled: !0
                }, d.createElement(A._44, {
                    label: "MerryPurple"
                }, d.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633177/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/3.0 3.0x",
                    alt: "MerryPurple"
                }))), d.createElement(A.e, {
                    type: A.i.BounceIn,
                    delay: A.f.Short,
                    enabled: !0
                }, d.createElement(A._44, {
                    label: "GiftRage"
                }, d.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/634141/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/3.0 3.0x",
                    alt: "GiftRage"
                }))), d.createElement("img", {
                    src: zt.a,
                    height: "50",
                    width: "50"
                }), d.createElement(A.e, {
                    type: A.i.BounceIn,
                    delay: A.f.Short,
                    enabled: !0
                }, d.createElement(A._44, {
                    label: "RudolphWhoa"
                }, d.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633166/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/3.0 3.0x",
                    alt: "RudolphWhoa"
                }))), d.createElement(A.e, {
                    type: A.i.BounceIn,
                    delay: A.f.Medium,
                    enabled: !0
                }, d.createElement(A._44, {
                    label: "FeelsGingerMan"
                }, d.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633171/1.0 1x,https://static-cdn.jtvnw.net/emoticons/v1/633171/2.0 2x,https://static-cdn.jtvnw.net/emoticons/v1/633171/3.0 4x",
                    alt: "FeelsGingerMan"
                }))), d.createElement(A.e, {
                    type: A.i.BounceIn,
                    delay: A.f.Long,
                    enabled: !0
                }, d.createElement(A._44, {
                    label: "OrnaMental"
                }, d.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633170/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/3.0 3.0x",
                    alt: "OrnaMental"
                })))), d.createElement(A._4, {
                    padding: 1
                }, d.createElement(A.O, {
                    type: A._41.P
                }, Object(a.d)("Cheer any amount to support your streamer, and get a holiday gift! Cheer {minBits, number} Bits or more, and others in chat can get a gift too!", {
                    minBits: 250
                }, "Crates")), d.createElement(A.O, {
                    type: A._41.Strong
                }, d.createElement("a", {
                    href: "http://link.twitch.tv/holiday-emotes",
                    target: "_blank",
                    rel: "noreferrer noopener"
                }, Object(a.d)("Details", "Crates")))))
            }),
            Qt = (n("kjfG"), function() {
                return d.createElement(A._4, {
                    className: "owl-2018-introduction"
                }, d.createElement(A._4, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, d.createElement(A.O, {
                    fontSize: A.T.Size5,
                    bold: !0
                }, Object(a.d)("Cheer with Bits and unlock loot!", "OWL2018Introduction"))), d.createElement(A._4, {
                    className: "owl-2018-introduction__banner-background",
                    padding: {
                        top: 1
                    }
                }, d.createElement("img", {
                    className: "owl-2018-introduction__banner-image",
                    src: jt.c + "/owl-2017/overwatch-wide.png"
                })), d.createElement(A._4, {
                    padding: {
                        x: 2,
                        top: 1,
                        bottom: .5
                    }
                }, d.createElement(A.O, null, Object(a.d)("Cheer 150 Bits or more to hype your team and get a team emote! Cheer along with your fellow fans to unlock in-game skins based on everyone’s Cheers!", "OWL2018Introduction"))), d.createElement(A._4, {
                    padding: {
                        bottom: 1
                    }
                }, d.createElement(A.M, {
                    to: "http://link.twitch.tv/owl-drops-onsite-bitscard-blogus",
                    targetBlank: !0,
                    hoverUnderlineNone: !1
                }, Object(a.d)("Details", "OWL2018Introduction"))))
            });
        ! function(e) {
            e.CratesChristmas = "CratesChristmas", e.OWL2018 = "owl2018"
        }(Rt || (Rt = {}));
        var Yt = function(e) {
                switch (e.event) {
                    case Rt.OWL2018:
                        return d.createElement(Qt, null);
                    case Rt.CratesChristmas:
                        return d.createElement(Jt, {
                            onClickHelp: e.onClickHelp,
                            channelID: e.channelID
                        });
                    default:
                        return d.createElement(Ht, {
                            onClickHelp: e.onClickHelp
                        })
                }
            },
            Kt = n("N221"),
            Zt = n("cv4W"),
            Xt = n.n(Zt),
            en = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = "";
                    if (this.props.amount < 250) {
                        var t = 250 - this.props.amount;
                        e = Object(a.d)("{bitsToGo, plural, one {Cheer # more Bit to share gifts with chat!} other {Cheer # more Bits to share gifts with chat!}}", {
                            bitsToGo: t
                        }, "Crates")
                    } else e = Object(a.d)("Your Cheer will share gifts with chat!", "Crates");
                    return d.createElement(A._27, {
                        className: "crate-christmas-2017-reminder",
                        background: A.m.Alt,
                        borderTop: !0,
                        padding: 1
                    }, d.createElement(A._4, {
                        display: A.P.Inline,
                        margin: {
                            right: .5
                        }
                    }, d.createElement("img", {
                        src: Xt.a,
                        height: "22",
                        width: "22"
                    })), d.createElement(A.O, {
                        type: A._41.Strong
                    }, e))
                }, t
            }(d.Component),
            tn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    switch (this.props.event) {
                        case Rt.CratesChristmas:
                            return d.createElement(en, {
                                amount: this.props.amount
                            });
                        default:
                            return null
                    }
                }, t
            }(d.Component),
            nn = (n("WT1Y"), function(e) {
                var t = e.prefixes.map(function(t, n) {
                    if (t.alt && t.cheerAmount) return d.createElement(A.Y, {
                        className: "pending-cheer-list__list-item",
                        key: n,
                        padding: {
                            x: 1
                        }
                    }, d.createElement("li", null, d.createElement(it.a, {
                        prefix: t.alt,
                        amount: t.cheerAmount > jt.k ? jt.k : t.cheerAmount,
                        bitsConfig: e.bitsConfig,
                        size: it.b.Small,
                        showAmount: !0,
                        showImage: !0
                    })))
                });
                return d.createElement(A._4, {
                    display: A.P.Flex,
                    flexDirection: A.R.Row,
                    alignItems: A.c.End,
                    justifyContent: A._3.Center,
                    flexWrap: A.S.Wrap,
                    margin: {
                        top: 1
                    },
                    className: "pending-cheer-list"
                }, t)
            }),
            an = (n("KWLn"), function(e) {
                var t;
                if (e.prefixes && 1 === e.prefixes.length) {
                    var n = e.prefixes[0].alt;
                    n && (t = d.createElement(A._4, {
                        padding: {
                            top: 2
                        }
                    }, d.createElement(it.a, {
                        prefix: n,
                        amount: e.amount > jt.k ? jt.k : e.amount,
                        bitsConfig: e.bitsConfig,
                        showImage: !0,
                        showAmount: !0
                    })))
                } else if (e.prefixes) t = d.createElement(A._4, {
                    margin: {
                        top: 1
                    }
                }, d.createElement(Kt.b, {
                    className: "pending-cheer__scroll-container"
                }, d.createElement(nn, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = Object(a.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                        totalBits: d.createElement("strong", null, e.amount),
                        channelName: e.channelDisplayName
                    }, "Bits--PendingCheer");
                    t = d.createElement(A._4, {
                        padding: {
                            top: 2,
                            x: 5
                        }
                    }, d.createElement(A.O, {
                        color: A.J.Alt2,
                        "data-a-target": "total-bits-message"
                    }, i))
                }
                var r = null;
                e.purchaseMore && e.purchaseMore > 0 && (r = d.createElement(A.O, {
                    "data-a-target": "need-more-bits-error"
                }, Object(a.d)("Please purchase {neededBits} more Bits to Cheer", {
                    neededBits: e.purchaseMore
                }, "Bits--PendingCheer")));
                var o = null;
                if (e.largestCheermote > jt.k) {
                    var s = Object(a.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                        maximumCheerSize: jt.k
                    }, "Bits--PendingCheer");
                    r = d.createElement(A.O, {
                        "data-a-target": "max-cheer-bits-error"
                    }, s)
                }
                if (e.amount < e.minToCheer) {
                    var l = Object(a.d)("Add {moreBitsAmount} Bits to reach this channel's minimum Cheer.", {
                        moreBitsAmount: e.minToCheer - e.amount
                    }, "Bits--PendingCheer");
                    r = d.createElement(A.O, {
                        "data-a-target": "min-cheer-bits-error"
                    }, l)
                }
                if (e.smallestCheermote < e.minPerEmote) {
                    var c = Object(a.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                        minPerEmote: e.minPerEmote
                    }, "Bits--PendingCheer");
                    o = d.createElement(A.O, {
                        color: A.J.Alt2,
                        italic: !0,
                        "data-a-target": "min-emote-bits-error"
                    }, c)
                }
                var u = d.createElement(it.a, {
                    amount: e.amount,
                    prefix: jt.g,
                    bitsConfig: e.bitsConfig,
                    display: A.P.Inline,
                    showImage: !1,
                    showAmount: !0,
                    size: it.b.Medium
                });
                return d.createElement(A._4, null, d.createElement(A._4, {
                    display: A.P.Flex,
                    flexDirection: A.R.Column,
                    alignItems: A.c.Center,
                    padding: 1,
                    className: "pending-cheer"
                }, d.createElement(A.O, {
                    fontSize: A.T.Size4,
                    bold: !0
                }, Object(a.d)("Cheering {totalBits} Bits", {
                    totalBits: u
                }, "Bits--PendingCheer")), !o && t, !o && r && d.createElement(A._4, {
                    padding: {
                        top: 1
                    }
                }, r), o && d.createElement(A._4, {
                    padding: {
                        top: 3,
                        x: 3
                    }
                }, o)), !o && !r && d.createElement(tn, {
                    event: e.event,
                    amount: e.amount
                }))
            }),
            rn = n("qe65"),
            on = (n("f1ZS"), {
                themed: !0,
                dark: {
                    "1x": jt.b + "/dark/animated/promo/intro.gif"
                },
                light: {
                    "1x": jt.b + "/light/animated/promo/intro.gif"
                }
            }),
            sn = function() {
                return d.createElement(A._4, {
                    display: A.P.Flex,
                    flexDirection: A.R.Column,
                    alignItems: A.c.Center,
                    justifyContent: A._3.Center,
                    flexGrow: 1,
                    className: "bits-sending"
                }, d.createElement(A._4, {
                    padding: {
                        bottom: 1
                    }
                }, d.createElement(rn.a, {
                    sources: on
                })), d.createElement(A.O, {
                    italic: !0
                }, Object(a.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
            },
            ln = (n("ZoRy"), function(e) {
                var t = Object(a.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                        totalBits: e.totalBits,
                        channelName: e.channelDisplayName
                    }, "Bits--UndoPrompt"),
                    n = null;
                if (e.prefixes && e.prefixes.length > 1) n = d.createElement(Kt.b, {
                    className: "bits-undo-prompt__scroll-container"
                }, d.createElement(A._4, {
                    margin: {
                        top: 1
                    }
                }, d.createElement(nn, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = e.prefixes[0].alt;
                    i && (n = d.createElement(A._4, {
                        padding: {
                            bottom: 1
                        }
                    }, d.createElement(it.a, {
                        prefix: i,
                        amount: e.totalBits,
                        bitsConfig: e.bitsConfig,
                        showAmount: !0,
                        showImage: !0
                    })))
                }
                return d.createElement(A._4, {
                    display: A.P.Flex,
                    flexDirection: A.R.Column,
                    alignItems: A.c.Center,
                    justifyContent: A._3.Center,
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-undo-prompt"
                }, n, d.createElement(A.O, null, t))
            }),
            dn = function(e) {
                var t = a.b.get("crate_snowman_launch", Pt.a.Off),
                    n = t === Pt.a.On || t === Pt.a.StaffOnly && e.isStaff ? Rt.CratesChristmas : null,
                    i = e.event || n;
                if (e.isSending) return e.totalBits < jt.l ? d.createElement(sn, null) : d.createElement(ln, {
                    bitsConfig: e.bitsConfig,
                    channelDisplayName: e.displayName,
                    prefixes: e.currentCheers,
                    totalBits: e.totalBits
                });
                if (e.hoveredCheermote) return d.createElement(Wt, {
                    event: e.event,
                    tournament: e.tournament,
                    bitsConfig: e.bitsConfig,
                    prefix: e.hoveredCheermote,
                    tier: e.hoveredTier
                });
                if (e.totalBits) return d.createElement(an, {
                    bitsConfig: e.bitsConfig,
                    prefixes: e.currentCheers,
                    amount: e.totalBits,
                    channelDisplayName: e.displayName,
                    purchaseMore: e.bitsBalance && e.totalBits - e.bitsBalance,
                    largestCheermote: e.largestCheermote,
                    smallestCheermote: e.smallestCheermote,
                    minPerEmote: e.emoteMinimumBits,
                    minToCheer: e.cheerMinimumBits,
                    event: i
                });
                if (e.helpRequested) return d.createElement(Vt.a, null);
                if (e.chosenCheermote) {
                    var r = e.recentMinimumBits,
                        o = e.cheerMinimumBits;
                    return d.createElement(Gt, {
                        minToPin: r,
                        minToCheer: o
                    })
                }
                return i ? d.createElement(Yt, {
                    event: i,
                    onClickHelp: e.showHelp,
                    channelID: e.channelID
                }) : d.createElement(Ht, {
                    onClickHelp: e.showHelp
                })
            },
            cn = n("WVx7"),
            un = n("w9tK"),
            mn = (n("9uTb"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        startingIndex: 0
                    }, t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (this.props.hide) return null;
                    var t = this.props.cheermotes.map(function(t, n) {
                            if (!t) return d.createElement("li", {
                                key: "null-cheermote-" + n
                            }, d.createElement("button", {
                                className: "cheermote-list__item-button",
                                disabled: !0
                            }, d.createElement("div", {
                                className: "cheermote-list__placeholder"
                            })));
                            var i = "";
                            t.key && (i = t.key.replace(":", ""));
                            var a = null;
                            e.props.showCheermoteAmount && t.key && (a = d.createElement(it.a, {
                                bitsConfig: e.props.bitsConfig,
                                prefix: "",
                                amount: +t.key.split(":")[1],
                                showImage: !1,
                                showAmount: !0,
                                size: it.b.Small
                            }));
                            var r = d.createElement("li", {
                                key: t.key,
                                className: "cheermote-list__cheermote"
                            }, d.createElement("button", {
                                className: "cheermote-list__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + i
                            }, d.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })), a);
                            return e.props.showCheermoteAmount ? r : d.createElement(A.Y, {
                                key: t.key,
                                margin: {
                                    bottom: 1
                                }
                            }, r)
                        }),
                        n = null;
                    this.props.showCheermoteAmount && (n = d.createElement(A._4, {
                        padding: {
                            right: 2
                        },
                        fullWidth: !0,
                        className: "cheermote-list__back-button"
                    }, d.createElement(A.u, {
                        "data-a-target": "bits-card-back-button",
                        type: A.A.Text,
                        fullWidth: !0,
                        onClick: this.props.onClose
                    }, Object(a.d)("Show All Cheermotes", "CheermoteCarousel"))));
                    var i = d.createElement(A.Y, {
                            className: "cheermote-list__cheermotes",
                            display: A.P.Flex,
                            flexWrap: A.S.Wrap,
                            flexDirection: A.R.Row,
                            justifyContent: this.props.showCheermoteAmount ? A._3.Between : A._3.Start,
                            alignItems: A.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, d.createElement("ul", null, t, n)),
                        r = O("cheermote-list", {
                            "cheermote-list__tier-selection": this.props.showCheermoteAmount
                        }, {
                            "cheermote-list__cheermote-selection": !this.props.showCheermoteAmount
                        });
                    return this.props.showCheermoteAmount ? d.createElement(A._4, {
                        flexGrow: 1,
                        overflow: A._7.Hidden,
                        className: r
                    }, i) : d.createElement(A._4, {
                        flexGrow: 1,
                        overflow: A._7.Hidden,
                        className: r
                    }, d.createElement(Kt.b, null, i))
                }, t
            }(d.Component)),
            pn = Object(u.compose)(Object(Ge.d)("CheermoteCarousel", {
                autoReportInteractive: !0,
                destination: un.a.CheermoteCarousel
            }))(mn);
        var hn, gn = Object(s.b)(function(e) {
                return {
                    darkModeEnabled: Object(b.a)(e) === p.a.Dark
                }
            })(pn),
            fn = function(e) {
                return e.event, d.createElement(Bt, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance,
                    selfBitsBadge: e.selfBitsBadge
                })
            },
            vn = function(e) {
                return d.createElement(A._4, {
                    flexGrow: 1
                }, d.createElement(A._4, {
                    className: "undo-prompt__footer",
                    padding: 1,
                    display: A.P.Flex,
                    justifyContent: A._3.Between
                }, d.createElement(A.u, {
                    onClick: e.onCancel || void 0,
                    type: A.A.Hollow,
                    overlay: !0,
                    "data-test-selector": "cancel-button"
                }, Object(a.d)("Cancel", "Bits--UndoPrompt")), d.createElement(A.u, {
                    onClick: e.onConfirm || void 0,
                    "data-test-selector": "confirm-button"
                }, Object(a.d)("Send", "Bits--UndoPrompt"))), d.createElement(A._14, {
                    size: A._15.ExtraSmall,
                    countdown: jt.m.UNDO_PROMPT_DURATION / 1e3
                }))
            },
            bn = n("ZJYd"),
            kn = n("/LBW"),
            yn = n("iWdz"),
            _n = (n("2B/Z"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        chosenCheermote: null,
                        hoveredCheermote: null,
                        hoveredTier: 0,
                        helpRequested: !1,
                        totalBits: 0,
                        largestCheermote: 0,
                        smallestCheermote: 0,
                        buyingBits: !1
                    }, t.unhoverTimeout = 0, t.lastRefetchTime = 0, t.handleTierHover = function(e) {
                        clearTimeout(t.unhoverTimeout);
                        var n = e.split(":");
                        n.length < 2 || (t.setState({
                            hoveredTier: +n[1],
                            hoveredCheermote: n[0]
                        }), t.props.trackBitsCardInteraction(kn.a.PreviewEmote, {
                            emoteType: n[0],
                            emoteLevel: +n[1]
                        }))
                    }, t.handleUnhover = function() {
                        t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                    }, t.clearHovered = function() {
                        t.setState({
                            hoveredTier: 0,
                            hoveredCheermote: null
                        })
                    }, t.handleTierClick = function(e) {
                        t.props.onClickCheermote(e.split(":").join(""))
                    }, t.handleCheermoteHover = function(e) {
                        clearTimeout(t.unhoverTimeout), t.setState({
                            hoveredCheermote: e,
                            hoveredTier: 0
                        }), t.props.trackBitsCardInteraction(kn.a.PreviewEmote, {
                            emoteType: e,
                            emoteLevel: 100
                        })
                    }, t.handleCheermoteClick = function(e) {
                        t.setState({
                            chosenCheermote: e,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.clearChosenCheermote = function() {
                        t.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.showHelp = function(e) {
                        e.preventDefault(), t.setState({
                            helpRequested: !0
                        })
                    }, t.closeHelp = function() {
                        return t.setState({
                            helpRequested: !1
                        })
                    }, t.handleClickBuy = function() {
                        t.setState({
                            buyingBits: !0
                        }), t.props.trackBitsCardInteraction(kn.a.BuyMain)
                    }, t.handleCloseBuy = function() {
                        return t.setState({
                            buyingBits: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.visible || !!this.props.currentCheers.length,
                        n = e.visible || !!e.currentCheers.length;
                    if (!t && n) {
                        var i = Date.now();
                        i - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = i, e.data.refetch())
                    }
                    if (t && !n && this.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            buyingBits: !1
                        }), this.props.currentCheers !== e.currentCheers) {
                        var a = Object(bn.a)(e.currentCheers),
                            r = a.total,
                            o = a.largestCheermote,
                            s = a.smallestCheermote;
                        this.setState({
                            totalBits: r,
                            largestCheermote: o,
                            smallestCheermote: s
                        })
                    }
                }, t.prototype.render = function() {
                    var e = this;
                    if (!this.props.visible && !this.props.currentCheers.length) return null;
                    var t, n = {
                        border: !0,
                        background: A.m.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    if (this.props.currentCheers.length || (t = d.createElement("button", {
                            className: "t-bits-card__close t-bits-card__top-controls",
                            onClick: this.props.onUserClose,
                            "data-test-selector": "cancel-button",
                            "data-a-target": "bits-card-close-button"
                        }, d.createElement(A._17, {
                            asset: A._18.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return d.createElement(A._27, i.__assign({
                        className: "t-bits-card",
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        alignItems: A.c.Center,
                        justifyContent: A._3.Center
                    }, n), d.createElement(A._6, {
                        delay: 0
                    }), d.createElement(A._4, {
                        padding: {
                            top: 2
                        }
                    }, d.createElement(A.O, {
                        italic: !0
                    }, Object(a.d)("Fetching Bits", "BitsCard"))));
                    if (this.props.data.error || !this.props.bitsConfig) return d.createElement(Ut, null);
                    if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return d.createElement(A._27, i.__assign({
                        className: "t-bits-card",
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        alignItems: A.c.Center,
                        justifyContent: A._3.Center,
                        textAlign: A._37.Center,
                        padding: {
                            top: 2,
                            x: 1,
                            bottom: 1
                        }
                    }, n), t, d.createElement(A.O, {
                        color: A.J.Error,
                        italic: !0
                    }, Object(a.d)("You cannot Cheer in your own channel.", "BitsCard")));
                    if (this.state.buyingBits) return d.createElement(cn.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.props.onUserClose,
                        onClose: this.handleCloseBuy,
                        trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                        location: kn.b.ChatTooltip
                    });
                    var r = null,
                        o = this.state.helpRequested && !this.props.currentCheers.length,
                        s = null;
                    if (this.props.data.user.cheer.settings.event && (s = this.props.data.user.cheer.settings.event.toLowerCase().replace("_", "-")), this.state.chosenCheermote) {
                        var l = this.props.bitsConfig.indexedActions[this.state.chosenCheermote.toLowerCase()];
                        if (l) {
                            var c = l.orderedTiers.filter(function(e) {
                                return e.bits <= jt.k
                            }).map(function(e) {
                                return {
                                    imgSrc: e.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: e.indexedImages.DARK.static.get(2),
                                    key: l.prefix + ":" + e.bits
                                }
                            }).reverse();
                            r = d.createElement(gn, {
                                bitsConfig: this.props.bitsConfig,
                                hide: o,
                                cheermotes: c,
                                showCheermoteAmount: !0,
                                event: s,
                                onHover: this.handleTierHover,
                                onHoverLeave: this.handleUnhover,
                                onClick: this.handleTierClick,
                                onClose: this.clearChosenCheermote
                            })
                        }
                    }
                    if (!r) {
                        c = this.props.bitsConfig.orderedActions.filter(function(e) {
                            return e.type !== jt.e
                        }).map(function(t) {
                            var n = jt.h;
                            e.props.data && e.props.data.user.cheer.settings.event && (n = 1);
                            var i = t.indexedTiers.get(n);
                            return i ? {
                                imgSrc: i.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: i.indexedImages.DARK.static.get(2),
                                key: t.prefix
                            } : null
                        });
                        r = d.createElement(gn, {
                            bitsConfig: this.props.bitsConfig,
                            hide: o,
                            cheermotes: c,
                            event: s,
                            onHover: this.handleCheermoteHover,
                            onHoverLeave: this.handleUnhover,
                            onClick: this.handleCheermoteClick
                        })
                    }
                    var u, m = null;
                    this.props.isSending ? this.state.totalBits >= jt.l && (m = d.createElement(vn, {
                        onCancel: this.props.onCancelSend,
                        onConfirm: this.props.onConfirmSend
                    })) : m = s ? d.createElement(fn, {
                        event: s,
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    }) : d.createElement(Bt, {
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    }), o && (u = d.createElement("button", {
                        className: "t-bits-card__go-back t-bits-card__top-controls",
                        onClick: this.closeHelp,
                        "data-a-target": "bits-card-back-button"
                    }, d.createElement(A._17, {
                        asset: A._18.Play,
                        height: 8
                    }), " ", Object(a.d)("Back", "BitsCard")));
                    var p = O("t-bits-card", {
                        "t-bits-card--tall": !this.props.isSending
                    });
                    return d.createElement(A._27, i.__assign({
                        className: p,
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        "data-a-target": "bits-card"
                    }, n), !this.props.isSending && u, t, d.createElement(A._27, {
                        className: "t-bits-card__contents",
                        display: A.P.Flex,
                        flexGrow: 0,
                        flexDirection: A.R.Column,
                        alignContent: A.b.Stretch,
                        textAlign: A._37.Center,
                        borderBottom: !this.props.isSending
                    }, d.createElement(dn, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        displayName: this.props.data.user.displayName,
                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                        event: s,
                        helpRequested: this.state.helpRequested,
                        hoveredCheermote: this.state.hoveredCheermote,
                        hoveredTier: this.state.hoveredTier,
                        isSending: this.props.isSending,
                        largestCheermote: this.state.largestCheermote,
                        recentMinimumBits: this.props.data.user.cheer.settings.recentMinimumBits,
                        smallestCheermote: this.state.smallestCheermote,
                        totalBits: this.state.totalBits,
                        tournament: this.props.data.user.tournament,
                        channelID: this.props.channelID,
                        showHelp: this.showHelp,
                        isStaff: this.props.isStaff
                    })), !this.props.isSending && r, m && d.createElement(A._4, {
                        className: "t-bits-card__footer",
                        display: A.P.Flex
                    }, m))
                }, t = i.__decorate([Object(c.a)(yn, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                name: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                })], t)
            }(d.Component)),
            Cn = n("KSGD"),
            Sn = n("2emZ"),
            En = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = Sn.a.Hashtag, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith("#") && null !== t.props.hashTags.edges ? t.props.hashTags.edges.filter(function(t) {
                            return t.node.id.includes(e)
                        }).map(function(n) {
                            return {
                                current: e,
                                replacement: n.node.id,
                                element: t.genearateHashtagDisplay(n.node.id)
                            }
                        }) : null
                    }, t.genearateHashtagDisplay = function(e) {
                        return d.createElement(A._4, {
                            padding: {
                                right: .5
                            },
                            key: "hashtag:" + e
                        }, d.createElement(A.O, null, e))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: Cn.func
                }, t
            }(d.Component),
            Nn = n("Lx+S"),
            wn = n("SZoP"),
            Dn = n("Bir6"),
            On = n("e1CU"),
            In = 5,
            Rn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = Sn.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var i = t ? e : e.substring(1),
                            a = new RegExp("^" + Object(Dn.a)(i), "i");
                        return n.state.sortedChatMembers.filter(function(e) {
                            return a.test(e.userLogin) || a.test(e.userDisplayName)
                        }).slice(0, In).map(function(i) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + i.userDisplayName,
                                element: n.renderMention(i)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return d.createElement("span", null, Object(wn.a)(e.userLogin, e.userDisplayName))
                    }, n.sortChatMembers = function(e) {
                        var t = [i.__assign({}, Object(On.a)(e.channelDisplayName, e.channelLogin), {
                                userID: e.channelID,
                                userLogin: e.channelLogin,
                                userType: Me.a.Owner
                            })],
                            n = e.chatMembers;
                        return n.sort(function(e, t) {
                            return e.userLogin < t.userLogin ? -1 : e.userLogin > t.userLogin ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedChatMembers: n.sortChatMembers(t)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.chatMembers === e.chatMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin && this.props.channelID === e.channelID || this.setState({
                        sortedChatMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: Cn.func
                }, t
            }(d.Component),
            Tn = function() {
                return d.createElement(A.p, {
                    direction: A.q.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, d.createElement(A._4, {
                    padding: 1,
                    "data-test-selector": "raids-settings-tooltip"
                }, Object(a.d)("If a raid is offensive, moderate in chat settings.", "RaidReportingChat")))
            },
            Mn = n("QCOJ"),
            Ln = n("hcyD"),
            xn = n("VB5+"),
            An = n("Umoc"),
            Fn = n("ieBa"),
            jn = n("ACWz"),
            Bn = n("2I50"),
            Un = /\S/,
            Pn = 3;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(hn || (hn = {}));
        var Vn = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.syncMembers = function() {
                    n.props.activeChatters.isDirty && n.setState({
                        chatMembers: n.props.activeChatters.getActiveChatters()
                    })
                }, n.setChatInputRef = function(e) {
                    return n.chatInputRef = e
                }, n.setAutocompleteInputRef = function(e) {
                    return n.autocompleteInputRef = e
                }, n.onChatSettingsToggle = function(e) {
                    n.handleRaidReportingToggle(e), e || Object(An.b)({
                        channelLogin: n.props.channelLogin,
                        isHostMode: n.props.isHostMode
                    })
                }, n.handleRaidReportingToggle = function(e) {
                    n.props.raidReceived && (n.state.showRaidsSettingsTooltip && (n.setState({
                        showRaidsSettingsTooltip: !1
                    }), a.l.set("raidsModerationTooltipsSeenNumTimes", Pn)), e && n.setState({
                        showRaidsFollowerOnlyTooltip: !1
                    }))
                }, n.onKeyDown = function(e) {
                    var t = e.charCode || e.keyCode;
                    switch (n.props.onKeyDown && t !== Tt.a.Enter && n.props.onKeyDown(e), t) {
                        case Tt.a.Enter:
                            return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                        case Tt.a.Esc:
                            return void(n.state.showCard === hn.Bits && n.setState({
                                showCard: hn.None
                            }));
                        default:
                            return
                    }
                }, n.onMessageValueUpdate = function(e) {
                    n.setState({
                        value: e
                    })
                }, n.onInputFocus = function() {
                    n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                        hasInteractedOrPageload: !0
                    })
                }, n.onMouseEnterInput = function() {
                    n.state.hasInteractedOrPageload || n.setState({
                        hasInteractedOrPageload: !0
                    })
                }, n.onChatCommand = function(e) {
                    n.props.onChatCommand(e), n.trackChatEvent()
                }, n.confirmEmbedAction = function(e, t, i) {
                    var a = n,
                        r = a.hasConfirmedInEmbed;
                    if (a.hasSeenConfirmationPrompt) return r;
                    var o = window.confirm(n.confirmationMessage(e, t, i));
                    return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = o, o
                }, n.confirmationMessage = function(e, t, n) {
                    return Object(a.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                        displayName: e,
                        message: t,
                        channelLogin: n
                    }, "ChatInput")
                }, n.onMessageSend = function() {
                    return i.__awaiter(n, void 0, void 0, function() {
                        var e, t, n, r, o = this;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return this.props.authToken ? this.props.channelID ? (e = Un.test(this.state.value)) ? this.state.isSendingBits ? (a.j.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (a.j.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : (this.resetAndUpdateRenderSentChatMessageEvent(), this.props.data && this.props.data.currentUser ? 0 === (t = Object(bn.a)(this.state.messageCheers)).total ? (this.sendRegularMessage(), [2]) : this.props.data.user ? this.props.data.user.cheer ? this.props.data.user.cheer.settings ? (n = Object(bn.f)({
                                        messageBits: t,
                                        balance: this.props.data.currentUser.bitsBalance,
                                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                                        inputValue: this.state.value
                                    })).canSpend ? this.props.sendCheer ? (this.setState({
                                        isSendingBits: !0
                                    }), t.total >= jt.l ? [4, new Promise(function(e) {
                                        var t = setTimeout(e, jt.m.UNDO_PROMPT_DURATION),
                                            n = function(n) {
                                                void 0 === n && (n = !1), clearTimeout(t), o.cancelDelayedSend = null, o.confirmDelayedSend = null, e(n)
                                            };
                                        o.cancelDelayedSend = function() {
                                            return n(!0)
                                        }, o.confirmDelayedSend = function() {
                                            return n(!1)
                                        }
                                    })] : [3, 2]) : (a.j.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (a.j.warn("[Chat Input] Spending bits forbidden.", n), [2]) : (a.j.warn("[Chat Input] Cheer Settings are undefined."), [2]) : (a.j.warn("[Chat Input] Cheer is null."), [2]) : (a.j.warn("[Chat Input] User is null."), [2]) : (this.sendRegularMessage(), [2])) : (a.j.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                        hasSendableInput: e,
                                        value: this.state.value
                                    }), [2]) : (a.j.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.props.login(), [2]);
                                case 1:
                                    if (i.sent()) return this.setState({
                                        isSendingBits: !1
                                    }), this.chatInputRef.focus(), [2];
                                    i.label = 2;
                                case 2:
                                    r = Object(Lt.a)(), i.label = 3;
                                case 3:
                                    return i.trys.push([3, 5, , 6]), [4, this.props.sendCheer({
                                        variables: {
                                            input: {
                                                id: r,
                                                targetID: this.props.channelID,
                                                bits: t.total,
                                                content: this.state.value
                                            }
                                        }
                                    })];
                                case 4:
                                    return i.sent(), [3, 6];
                                case 5:
                                    return i.sent(), this.setState({
                                        isSendingBits: !1
                                    }), this.chatInputRef.focus(), [2];
                                case 6:
                                    return this.setState({
                                        isSendingBits: !1,
                                        showCard: hn.None,
                                        value: ""
                                    }), this.chatInputRef.focus(), this.autocompleteInputRef.setValue(""), [2]
                            }
                        })
                    })
                }, n.onEmotePickerToggle = function() {
                    n.setState(function(e) {
                        return e.messageCheers.length ? e : {
                            showCard: e.showCard === hn.Emotes ? hn.None : hn.Emotes
                        }
                    })
                }, n.onBitsIconClick = function() {
                    n.state.showCard === hn.Bits ? n.trackBitsCardInteraction(kn.a.CloseCard) : n.trackBitsCardInteraction(kn.a.OpenCard), n.setState({
                        showCard: n.state.showCard === hn.Bits ? hn.None : hn.Bits
                    })
                }, n.onShowViewersList = function() {
                    n.state.showCard !== hn.None && n.setState({
                        showCard: hn.None
                    }), n.props.showViewersList()
                }, n.onBitsClose = function() {
                    n.state.showCard === hn.Bits && n.setState({
                        showCard: hn.None
                    }), n.trackBitsCardInteraction(kn.a.CloseCard)
                }, n.onClickEmote = function(e) {
                    var t = n.state.value;
                    n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef.setValue(t)
                }, n.onEmotePickerDataLoaded = function(e) {
                    e && n.setState({
                        showEmotePickerButton: !0
                    })
                }, n.trackBitsCardInteraction = function(e, t) {
                    var i = {
                        actionName: e,
                        emoteType: t && t.emoteType,
                        emoteLevel: t && t.emoteLevel,
                        location: t && t.location,
                        displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                    };
                    Object(kn.h)(i)
                }, n.resetAndUpdateRenderSentChatMessageEvent = function() {
                    n.props.latencyTracking.resetCustomEvents(v.a.Chat);
                    var e = n.props.latencyTracking.registerCustomEvent({
                        benchmark: 400,
                        group: v.a.Chat,
                        key: v.b.ChatRenderSent,
                        label: v.c.RenderSent,
                        start: v.d.Registration
                    });
                    n.props.updateRenderSentChatMessageEvent(e)
                }, n.state = {
                    chatMembers: t.activeChatters.getActiveChatters(),
                    hasInteractedOrPageload: t.firstPageLoaded,
                    isSendingBits: !1,
                    messageCheers: [],
                    showBuyBits: !1,
                    showCard: hn.None,
                    showEmotePickerButton: !!t.authToken,
                    showRaidsSettingsTooltip: !1,
                    showRaidsFollowerOnlyTooltip: !1,
                    value: ""
                }, n
            }
            return i.__extends(t, e), t.prototype.componentWillMount = function() {
                this.syncMembersHandle = setInterval(this.syncMembers, 250)
            }, t.prototype.componentWillUpdate = function(e, t) {
                if (t.value !== this.state.value && this.props.bitsConfig) {
                    var n = [];
                    Object(E.c)(t.value, this.props.bitsConfig).forEach(function(e) {
                        e.type === Ee.a.Emote && n.push(e.content)
                    }), n.length && t.showCard === hn.Emotes && this.setState({
                        showCard: hn.None
                    }), this.setState({
                        messageCheers: n
                    })
                }
            }, t.prototype.componentWillReceiveProps = function(e) {
                var t = this;
                !this.props.firstPageLoaded && e.firstPageLoaded && this.setState({
                    hasInteractedOrPageload: !0
                }), this.props.isCurrentUserModerator && !this.props.raidReceived && e.raidReceived && a.l.get("raidsModerationTooltipsSeenNumTimes", 0) < Pn && this.setState({
                    showRaidsSettingsTooltip: !0,
                    showRaidsFollowerOnlyTooltip: !0
                }, function() {
                    setTimeout(function() {
                        var e = a.l.get("raidsModerationTooltipsSeenNumTimes", 0) + 1;
                        a.l.set("raidsModerationTooltipsSeenNumTimes", e), t.setState({
                            showRaidsSettingsTooltip: !1
                        })
                    }, 2e4)
                })
            }, t.prototype.componentWillUnmount = function() {
                this.syncMembersHandle && (clearInterval(this.syncMembersHandle), this.syncMembersHandle = 0)
            }, t.prototype.render = function() {
                if (this.props.hidden) return null;
                var e = [];
                this.props.bitsConfig && e.push(d.createElement(A.v, {
                    key: "bits",
                    icon: A._18.Bits,
                    ariaLabel: Object(a.d)("Bits", "ChatInput"),
                    type: A.x.Secondary,
                    onClick: this.onBitsIconClick,
                    "data-a-target": "bits-button"
                })), this.state.showEmotePickerButton && e.push(d.createElement(Fn.b, {
                    key: "emote-picker",
                    onClick: this.onEmotePickerToggle
                }));
                var t = null;
                this.state.hasInteractedOrPageload && (t = d.createElement(Fn.c, {
                    channelOwnerID: this.props.channelID,
                    onClickEmote: this.onClickEmote,
                    onLoad: this.onEmotePickerDataLoaded,
                    toggleVisibility: this.onEmotePickerToggle,
                    visible: this.state.showCard === hn.Emotes
                }));
                var n = null;
                this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = d.createElement(_n, {
                    bitsConfig: this.props.bitsConfig,
                    channelID: this.props.channelID,
                    channelLogin: this.props.channelLogin,
                    currentCheers: this.state.messageCheers,
                    isSending: this.state.isSendingBits,
                    isStaff: this.props.isStaff,
                    onCancelSend: this.cancelDelayedSend,
                    onClickCheermote: this.onClickEmote,
                    onConfirmSend: this.confirmDelayedSend,
                    onUserClose: this.onBitsClose,
                    trackBitsCardInteraction: this.trackBitsCardInteraction,
                    visible: this.state.showCard === hn.Bits
                }));
                var i = null;
                return this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.hashtags && this.state.messageCheers.length > 0 && (i = d.createElement(En, {
                    hashTags: this.props.data.user.cheer.hashtags
                })), d.createElement(A._4, {
                    className: "chat-input",
                    padding: {
                        x: 2,
                        bottom: 2
                    }
                }, d.createElement(A.Y, {
                    position: A._11.Relative,
                    zIndex: A._53.Default
                }, d.createElement("div", {
                    onMouseEnter: this.onMouseEnterInput
                }, t, n, d.createElement(At.b, {
                    componentType: At.a.TextArea,
                    suggestionSource: At.c.Chat,
                    onValueUpdate: this.onMessageValueUpdate,
                    onFocus: this.onInputFocus,
                    onKeyDown: this.onKeyDown,
                    componentRefDelegate: this.setChatInputRef,
                    refDelegate: this.setAutocompleteInputRef,
                    paddingRight: 30 * e.length,
                    placeholder: Object(a.d)("Send a message", "ChatInput"),
                    noResize: !0,
                    "data-a-target": "chat-input",
                    "data-test-selector": "chat-input",
                    disabled: this.state.isSendingBits,
                    containerElement: this.props.containerElement
                }, d.createElement(At.d, {
                    emotes: this.props.emotes
                }), d.createElement(Rn, {
                    channelDisplayName: this.props.channelDisplayName,
                    channelID: this.props.channelID,
                    channelLogin: this.props.channelLogin,
                    chatMembers: this.state.chatMembers
                }), i), d.createElement(A._4, {
                    position: A._11.Absolute,
                    attachRight: !0,
                    attachTop: !0
                }, e))), d.createElement(A._4, {
                    className: "chat-input__buttons-container",
                    display: A.P.Flex,
                    justifyContent: A._3.Between,
                    margin: {
                        top: 1
                    }
                }, d.createElement(A._4, {
                    display: A.P.Flex,
                    flexDirection: A.R.Row
                }, d.createElement(A._4, {
                    position: A._11.Relative
                }, d.createElement(Nn.a, {
                    disabled: this.props.isEmbedded,
                    onToggle: this.onChatSettingsToggle,
                    channelLogin: this.props.channelLogin,
                    isHostMode: this.props.isHostMode,
                    authToken: this.props.authToken,
                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                    onChatCommand: this.onChatCommand,
                    isPopout: this.props.isPopout,
                    channelID: this.props.channelID,
                    sawFirstRaidPrompt: this.state.showRaidsFollowerOnlyTooltip,
                    containerElement: this.props.containerElement
                }), this.state.showRaidsSettingsTooltip ? d.createElement(Tn, null) : null), d.createElement(A.v, {
                    ariaLabel: Object(a.d)("Viewer list", "ChatInput"),
                    "data-a-target": "chat-viewer-list",
                    "data-test-selector": "chat-viewer-list",
                    icon: A._18.ViewerList,
                    onClick: this.onShowViewersList
                })), this.renderSendButton()))
            }, t.prototype.renderSendButton = function() {
                var e;
                return e = this.state.value && null !== Object(Be.q)(this.state.value) ? Object(a.d)("Whisper", "ChatInput") : Object(a.d)("Chat", "ChatInput"), d.createElement(A.u, {
                    onClick: this.onMessageSend,
                    "data-a-target": "chat-send-button",
                    "data-test-selector": "chat-send-button",
                    disabled: this.state.isSendingBits
                }, e)
            }, t.prototype.sendRegularMessage = function() {
                this.props.onSendMessage && this.props.onSendMessage(this.state.value) && (this.trackChatEvent(), this.trackMentions(), this.autocompleteInputRef.setValue(""), this.setState({
                    showCard: hn.None
                }))
            }, t.prototype.trackChatEvent = function() {
                Object(Ln.a)({
                    channelID: this.props.channelID,
                    channelLogin: this.props.channelLogin,
                    isHostMode: this.props.isHostMode,
                    player: this.props.isPopout ? Mn.a.Embed : Mn.a.Web,
                    subOnlyMode: this.props.isSubsOnlyModeEnabled
                })
            }, t.prototype.trackMentions = function() {
                if (this.state.value && this.props.sessionUser)
                    for (var e = 0, t = Object(xe.c)(this.state.value, this.props.sessionUser.displayName, !1); e < t.length; e++) {
                        var n = t[e];
                        n.type === Ee.a.Mention && n.content.recipient !== n.content.sender && Object(xn.a)({
                            channelLogin: this.props.channelLogin,
                            isHostMode: this.props.isHostMode,
                            mentionedUserDisplayName: n.content.recipient,
                            userLogin: this.props.sessionUser.login
                        })
                    } else a.j.warn("[ChatInput] trackMentions was called in a nonsensical state.")
            }, t
        }(d.Component);
        var Hn = Object(u.compose)(Object(c.a)(Bn, {
                name: "sendCheer"
            }), Object(c.a)(jn), Object(Ge.d)("ChatInput", {
                autoReportInteractive: !0
            }), Object(s.b)(function(e) {
                return {
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode,
                    sessionUser: Object(l.c)(e)
                }
            }, function(e) {
                return Object(m.b)({
                    login: function() {
                        return Object(xt.f)(Mt.a.Chat)
                    },
                    updateRenderSentChatMessageEvent: ee.U
                }, e)
            }))(Vn),
            Wn = n("kpSd"),
            Gn = (n("HuX0"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onClickConfirm = function() {
                        n.markRoomSeen(), n.setState({
                            showRules: !1
                        })
                    };
                    var i = n.getRoomsSeen();
                    return n.state = {
                        showRules: n.props.chatRules && n.props.chatRules.length > 0 && !i[n.props.channelLogin]
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.state.showRules ? d.createElement(A._4, {
                        className: "chat-rules",
                        position: A._11.Relative
                    }, d.createElement(A._27, {
                        border: !0,
                        background: A.m.Base,
                        margin: {
                            bottom: 1
                        }
                    }, d.createElement(A._4, {
                        padding: 1
                    }, d.createElement(A._4, {
                        margin: {
                            bottom: 1
                        }
                    }, d.createElement(A.O, {
                        type: A._41.H6
                    }, Object(a.d)("Chat Rules:", "ChatRules"))), d.createElement(A._4, null, d.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                        return d.createElement("li", {
                            key: t
                        }, e)
                    }))), d.createElement(A._4, {
                        margin: {
                            top: 1
                        },
                        display: A.P.Flex,
                        justifyContent: A._3.Center
                    }, d.createElement(A.u, {
                        size: A.y.Small,
                        onClick: this.onClickConfirm
                    }, Object(a.d)("Ok, got it!", "ChatRules")))))) : null
                }, t.prototype.getRoomsSeen = function() {
                    return a.l.get("chat_rules_shown", {})
                }, t.prototype.markRoomSeen = function() {
                    var e = this.getRoomsSeen();
                    e[this.props.channelLogin] = !0, a.l.set("chat_rules_shown", e)
                }, t
            }(d.Component)),
            qn = 3;
        var zn = n("O9wU"),
            $n = (n("Bsuy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, zn.a.viewer_list, "", e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        i = t.header,
                        a = n.map(function(t) {
                            return d.createElement("div", {
                                key: "chat-viewers-list-item-" + t
                            }, d.createElement("button", {
                                className: "chat-viewers-list__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, d.createElement(A.O, {
                                transform: A._40.Capitalize
                            }, t)))
                        });
                    return d.createElement(A._4, {
                        className: "chat-viewers-list",
                        padding: {
                            bottom: 2
                        }
                    }, d.createElement("div", null, d.createElement(A.O, {
                        transform: A._40.Uppercase
                    }, i)), a)
                }, t
            }(d.Component)),
            Jn = (n("gwjw"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        filter: "",
                        inputValue: "",
                        filteredViewers: {},
                        viewersPage: 0,
                        renderedViewers: [],
                        isLoading: !1
                    }, t.filterTimeout = 0, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.loadMore = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e = this;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, new Promise(function(t) {
                                            e.setState(function(t) {
                                                return {
                                                    renderedViewers: e.getRenderedViewers(t.filteredViewers.viewers, t.viewersPage + 1),
                                                    viewersPage: t.viewersPage + 1
                                                }
                                            }, function() {
                                                t()
                                            })
                                        })];
                                    case 1:
                                        return t.sent(), [2]
                                }
                            })
                        })
                    }, t.getRenderedViewers = function(e, t) {
                        return e ? e.slice(0, 100 * (t || 1)) : []
                    }, t.handleFilter = function(e, n) {
                        var i = function(e, t) {
                                if (!t) return e;
                                var n = Object.assign({}, e);
                                return Object.keys(n).forEach(function(e) {
                                    var i = n[e];
                                    Array.isArray(i) && (n[e] = i.filter(function(e) {
                                        return -1 !== e.toLowerCase().indexOf(t)
                                    }))
                                }), n
                            }(n, e),
                            a = t.getRenderedViewers(i.viewers, 1);
                        t.scroll && t.scroll.scrollToTop(), t.setState({
                            filteredViewers: i,
                            isLoading: !1,
                            renderedViewers: a,
                            viewersPage: 1
                        })
                    }, t.handleFilterChange = function(e) {
                        var n = e.target.value,
                            i = n.toLowerCase().trim();
                        t.setState({
                            filter: i,
                            inputValue: n,
                            isLoading: !0
                        }), clearTimeout(t.filterTimeout), t.filterTimeout = setTimeout(function() {
                            t.handleFilter(i, t.props.viewers)
                        }, 350)
                    }, t.onKeyDown = function(e) {
                        e.keyCode === Tt.a.Esc && t.props.closeViewersList()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.handleFilter(this.state.filter, e.viewers)
                }, t.prototype.render = function() {
                    var e = [],
                        t = this.state.filteredViewers;
                    t.staff && t.staff.length > 0 && e.push(d.createElement($n, {
                        key: "chat-viewers-list-staff",
                        header: Object(a.d)("Staff", "ChatViewers"),
                        viewers: t.staff,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.admins && t.admins.length > 0 && e.push(d.createElement($n, {
                        key: "chat-viewers-list-admins",
                        header: Object(a.d)("Admins", "ChatViewers"),
                        viewers: t.admins,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.global_mods && t.global_mods.length > 0 && e.push(d.createElement($n, {
                        key: "chat-viewers-list-global-mods",
                        header: Object(a.d)("Global Moderators", "ChatViewers"),
                        viewers: t.global_mods,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.moderators && t.moderators.length > 0 && e.push(d.createElement($n, {
                        key: "chat-viewers-list-moderators",
                        header: Object(a.d)("Moderators", "ChatViewers"),
                        viewers: t.moderators,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.viewers && t.viewers.length > 0 && e.push(d.createElement($n, {
                        key: "chat-viewers-list-viewers",
                        "data-test-selector": "chat-viewers-list-viewers",
                        header: Object(a.d)("Viewers", "ChatViewers"),
                        viewers: this.state.renderedViewers,
                        onUsernameClick: this.props.onShowViewerCard
                    }));
                    var n = this.props.isLoading || this.state.isLoading,
                        i = n && d.createElement(A._4, {
                            className: "chat-viewers__loading",
                            display: A.P.Flex,
                            alignItems: A.c.Center,
                            justifyContent: A._3.Center,
                            zIndex: A._53.Above,
                            position: A._11.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, d.createElement(A._6, null));
                    return d.createElement(A._4, {
                        className: "chat-viewers__container",
                        fullWidth: !0,
                        fullHeight: !0,
                        flexShrink: 0,
                        zIndex: A._53.Default
                    }, d.createElement(A._4, {
                        className: "chat-viewers__pane",
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        flexWrap: A.S.NoWrap,
                        position: A._11.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0
                    }, d.createElement(A._4, {
                        className: "chat-viewers__header",
                        display: A.P.Flex,
                        justifyContent: A._3.Center,
                        alignItems: A.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, d.createElement(A._4, {
                        position: A._11.Absolute,
                        attachLeft: !0,
                        margin: {
                            left: 1
                        }
                    }, d.createElement(A.v, {
                        icon: A._18.Close,
                        ariaLabel: Object(a.d)("Close", "ChatViewers"),
                        "data-a-target": "chat-viewer-list",
                        onClick: this.props.closeViewersList
                    })), d.createElement("p", {
                        "data-a-target": "chat-viewers_header-channel-name"
                    }, Object(a.d)("Viewer List", "ChatViewers"))), d.createElement(A._4, {
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        flexWrap: A.S.NoWrap,
                        fullHeight: !0
                    }, d.createElement(A._4, {
                        className: "chat-viewers__filter",
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }, d.createElement(A._0, {
                        type: A._1.Search,
                        name: "viewers-filter",
                        placeholder: Object(a.d)("Filter Viewers", "ChatViewers"),
                        readOnly: this.props.isLoading,
                        onChange: this.handleFilterChange,
                        value: this.state.inputValue,
                        autoFocus: !0,
                        onKeyDown: this.onKeyDown
                    })), d.createElement(et.b, {
                        className: "chat-viewers__list",
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0,
                        scrollContentClassName: "chat-viewers__scroll-container"
                    }, d.createElement(A._4, {
                        padding: {
                            x: 2
                        }
                    }, e, d.createElement(et.a, {
                        key: this.state.filter,
                        enabled: !n,
                        loadMore: this.loadMore
                    })))), i))
                }, t
            }(d.Component)),
            Qn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        viewers: {},
                        viewerCount: 0,
                        isLoading: !1
                    }, n.logger = a.j.withCategory("chat-viewers"), n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.channelLogin !== e.channelLogin && this.updateViewers(e.channelLogin)
                }, t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            return this.updateViewers(this.props.channelLogin), [2]
                        })
                    })
                }, t.prototype.render = function() {
                    return d.createElement(Jn, {
                        channelLogin: this.props.channelLogin,
                        closeViewersList: this.props.closeViewersList,
                        viewers: this.state.viewers,
                        viewerCount: this.state.viewerCount,
                        isLoading: this.state.isLoading,
                        onShowViewerCard: this.props.onShowViewerCard
                    })
                }, t.prototype.updateViewers = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, r, o;
                        return i.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    return this.props.latencyTracking.resetCustomEvents(v.a.ViewersList), t = this.props.latencyTracking.registerCustomEvent({
                                        benchmark: 3e3,
                                        group: v.a.ViewersList,
                                        key: v.b.ViewersListUpdated,
                                        label: v.c.Updated,
                                        start: v.d.Registration
                                    }), this.setState({
                                        isLoading: !0
                                    }), [4, function(e) {
                                        return i.__awaiter(this, void 0, void 0, function() {
                                            var t, n, r, o;
                                            return i.__generator(this, function(i) {
                                                switch (i.label) {
                                                    case 0:
                                                        t = "https://tmi.twitch.tv/group/user/" + e.toLowerCase() + "/chatters", n = 1, i.label = 1;
                                                    case 1:
                                                        if (!(n <= qn)) return [3, 7];
                                                        i.label = 2;
                                                    case 2:
                                                        return i.trys.push([2, 5, , 6]), [4, fetch(t, {
                                                            method: "GET",
                                                            headers: {
                                                                Accept: "application/json; charset=UTF-8",
                                                                "content-type": "application/json; charset=UTF-8"
                                                            }
                                                        })];
                                                    case 3:
                                                        return [4, i.sent().json()];
                                                    case 4:
                                                        return r = i.sent(), a.j.debug("[update] getViewers done."), [2, r];
                                                    case 5:
                                                        if (o = i.sent(), n === qn) throw o;
                                                        return [3, 6];
                                                    case 6:
                                                        return ++n, [3, 1];
                                                    case 7:
                                                        return [2]
                                                }
                                            })
                                        })
                                    }(e)];
                                case 1:
                                    return n = s.sent(), r = n ? n.chatters : {}, o = n ? n.chatter_count : 0, a.j.debug("Updated viewers list with " + o + " viewers"), this.setState({
                                        viewers: r,
                                        viewerCount: o,
                                        isLoading: !1
                                    }), this.props.latencyTracking.reportCustomEvent(t), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(Ge.d)("ViewersList", {
                    autoReportInteractive: !0
                })], t)
            }(d.Component);
        var Yn = Object(s.b)(null, function(e) {
                return Object(m.b)({
                    onShowViewerCard: r.d
                }, e)
            })(Qn),
            Kn = n("tjbt"),
            Zn = n("ZiSq"),
            Xn = n("vLl9"),
            ei = (n("dVd7"), a.j.withCategory("chat-room")),
            ti = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.closeViewersList = function() {
                        n.setState({
                            showViewersList: !1
                        })
                    }, n.showViewersList = function() {
                        n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                            showViewersList: !0
                        })
                    }, n.onChatInputFocus = function() {
                        n.props.authToken && !n.state.showChatRules && n.setState({
                            showChatRules: !0
                        })
                    }, n.setChatListElement = function(e) {
                        n.setState({
                            chatListElement: e
                        })
                    }, n.shouldHideChatInput = function() {
                        return n.state.showViewersList
                    };
                    var i = new Ze.c([], [], n.props.channelLogin);
                    return n.state = {
                        showChatRules: !1,
                        showViewersList: !1,
                        badgeSets: i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.isBackground) return null;
                    if (this.props.isHidden && !this.props.isPopout) return d.createElement(A._27, {
                        alignItems: A.c.Center,
                        background: A.m.Alt2,
                        borderLeft: !0,
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: A._3.Center,
                        color: A.J.Base,
                        position: A._11.Relative
                    }, d.createElement(A._4, {
                        margin: {
                            bottom: 1
                        }
                    }, d.createElement(A.O, {
                        fontSize: A.T.Size5
                    }, Object(a.d)("Chat is hidden.", "ChatRoom"))), d.createElement(A.u, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(a.d)("Show Chat", "ChatRoom")));
                    var e = this.props.bitsConfig && this.props.firstPageLoaded && d.createElement(It, {
                            badgeData: this.state.badgeSets,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelID: this.props.channelID,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            userID: this.props.userID
                        }),
                        t = this.state.showViewersList && d.createElement(Yn, {
                            channelLogin: this.props.channelLogin,
                            closeViewersList: this.closeViewersList
                        }),
                        n = !!this.props.authToken && !this.props.isEmbedded,
                        i = null;
                    return this.state.showChatRules && (i = d.createElement(A._4, {
                        padding: {
                            x: 2
                        }
                    }, d.createElement(Gn, {
                        chatRules: this.props.chatRules,
                        channelLogin: this.props.channelLogin
                    }))), d.createElement(A._4, {
                        "data-test-selector": "chat-room-component-layout",
                        "data-a-target": this.props.theme === p.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                        flexShrink: 1,
                        flexGrow: 1,
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        overflow: A._7.Hidden,
                        fullWidth: !0,
                        fullHeight: !0
                    }, d.createElement(A._27, {
                        background: A.m.Alt2,
                        borderLeft: !0,
                        display: A.P.Flex,
                        flexDirection: A.R.Column,
                        flexWrap: A.S.NoWrap,
                        position: A._11.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: A._7.Hidden,
                        color: A.J.Base
                    }, this.props.chatRoomHeader, e, d.createElement(Wn.a, {
                        badgeSets: this.state.badgeSets,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        isEmbedded: this.props.isEmbedded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onPushMessage: this.props.onPushMessage,
                        containerRef: this.setChatListElement
                    }), d.createElement(A._4, {
                        className: "chat-room__notifications",
                        position: A._11.Absolute,
                        zIndex: A._53.Default,
                        fullWidth: !0
                    }, this.props.children), i, this.props.isOwnChannel && !this.props.isEmbedded && d.createElement(Ke, {
                        hostedChannelLogin: this.props.hostedChannelLogin
                    }), t, d.createElement(Kn.a, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        onPushMessage: this.props.onPushMessage,
                        onSendMessage: this.props.onSendMessage
                    }), d.createElement(Hn, {
                        activeChatters: this.props.activeChatters,
                        authToken: this.props.authToken,
                        bitsConfig: n ? this.props.bitsConfig : void 0,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hidden: this.shouldHideChatInput(),
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        isStaff: this.props.isStaff,
                        onChatCommand: this.props.onSendMessage,
                        badgeSets: this.state.badgeSets,
                        userBadges: this.props.userBadges,
                        showViewersList: this.showViewersList,
                        raidReceived: this.props.raidReceived,
                        onSendMessage: this.props.onSendMessage,
                        onInputFocus: this.onChatInputFocus,
                        containerElement: this.state.chatListElement
                    }), d.createElement(A._4, {
                        className: "chat-room__viewer-card",
                        fullHeight: !0,
                        fullWidth: !0,
                        position: A._11.Absolute,
                        "data-a-target": "chat-user-card"
                    }, d.createElement(Zn.a, {
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        onSendMessage: this.props.onSendMessage,
                        channelID: this.props.channelID
                    }))))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && this.setState({
                            badgeSets: new Ze.c(e.data.badges, e.data.user.broadcastBadges, e.channelLogin)
                        }), e.data && e.data.user && e.data.user.self && e.data.user.self.displayBadges) {
                        var t = {};
                        e.data.user.self.displayBadges.forEach(function(e) {
                            t[e.setID] = e.version
                        }), a.o.tmi.client.updateChannelBadges(e.channelLogin, t)
                    }
                }, t
            }(d.Component),
            ni = Object(m.d)(Object(c.a)(Xn, {
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(ue.a)(function(e) {
                return {
                    query: Xn,
                    variables: {
                        channelLogin: e.channelLogin
                    },
                    topic: Object(M.s)(e.userID),
                    type: R.PubsubMessageType.UserBitsBadgeUpdate,
                    skip: !e.userID,
                    mutator: function(t, n) {
                        if (ei.debug("Received bits-user-update-v1 pubsub update", {
                                data: n,
                                event: t
                            }), !n.badges || t.message_type === Ot.Balance || null === t.data.newest_version || t.data.channel_id !== e.channelID) return n;
                        var i = n.badges.find(function(e) {
                            return e.setID === t.data.set_id && e.version === t.data.newest_version
                        });
                        return void 0 !== i && n.user.self.displayBadges && (n.user.self.displayBadges = n.user.self.displayBadges.map(function(e) {
                            return e.setID === i.setID && e.version !== i.version ? i : e
                        }), (!n.user.self.selectedBadge || i.setID === Dt.Bits && n.user.self.selectedBadge.setID === Dt.Bits) && (n.user.self.selectedBadge = i), n.user.self.selectedBadge && (i.setID !== Dt.Leaderboard || n.user.self.selectedBadge.setID !== Dt.Bits && n.user.self.selectedBadge.setID !== Dt.Leaderboard) || (n.user.self.selectedBadge = i)), n
                    }
                }
            }), ze.e)(ti),
            ii = "(?:\\W|^)",
            ai = "(?:$|\\W)",
            ri = 150,
            oi = "PowerUpL DarkMode PowerUpR",
            si = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        hasEnteredChatRoom: !1,
                        hostedChannelLogin: null,
                        raidReceived: !1,
                        userBadges: null
                    }, n.sendMessage = function(e) {
                        if (!e || 0 === e.length || !n.props.authToken) return !1;
                        var t = n.chatService.sendMessage(e);
                        return (!t || !t.preserveInput) && (n.parseOutgoingMessage(e), !0)
                    }, n.pushMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e)
                    }, n.onChatMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e), n.onChatEvent(e)
                    }, n.connect = function(e) {
                        n.logger.debug("Connect", n.props.channelLogin), n.setState({
                            hasEnteredChatRoom: !1
                        }), e.userID && e.channelID && (n.moderationActionService = new He(e.channelID, e.userID, n.chatBuffer.consumeChatEvent)), n.chatService.join()
                    }, n.disconnect = function() {
                        n.logger.debug("Disconnect", n.props.channelLogin), n.clearBufferHandle(), n.moderationActionService && n.moderationActionService.unsubscribe(), n.chatService.part()
                    }, n.updateBitsConfig = function(e) {
                        void 0 === e && (e = E.a), n.chatService.updateBitsConfig(e)
                    }, n.updateBlockLinks = function(e) {
                        n.chatService.updateBlockLinks(e)
                    }, n.onChatBufferUpdate = function() {
                        n.syncBufferHandle || n.props.isBackground || (n.syncBufferHandle = setTimeout(n.syncBufferedMessages, 0))
                    }, n.syncBufferedMessages = function() {
                        n.chatBuffer && n.chatBuffer.isDirty && n.props.onChatMessagesUpdate(n.chatBuffer.toArray()), n.clearBufferHandle()
                    }, n.onChatEvent = function(e) {
                        switch (e.type) {
                            case _e.b.Hosting:
                                n.hostingHandler(e.hostedChannel);
                                break;
                            case _e.b.Unhost:
                                n.hostingHandler(null);
                                break;
                            case _e.b.Connected:
                                n.onConnected();
                                break;
                            case _e.b.RoomState:
                                n.roomStateHandler(e.state);
                                break;
                            case _e.b.BadgesUpdated:
                                n.onBadgesUpdated(e);
                                break;
                            case _e.b.Raid:
                                n.setState({
                                    raidReceived: !0
                                })
                        }
                    }, n.hostingHandler = function(e) {
                        n.setState({
                            hostedChannelLogin: e
                        }), n.props.onHostingChange && n.props.onHostingChange(e)
                    }, n.roomStateHandler = function(e) {
                        e.slowMode ? n.props.onSlowModeEnable() : n.props.onSlowModeDisable(), void 0 !== e.followersOnly && (e.followersOnly ? (n.props.onFollowerModeDurationChange(e.followersOnlyRequirement), n.props.onFollowerModeEnable()) : n.props.onFollowerModeDisable()), void 0 !== e.subsOnly && (e.subsOnly ? n.props.onSubsOnlyModeEnable() : n.props.onSubsOnlyModeDisable())
                    }, n.onConnected = function() {
                        n.logger.debug("Connected", n.props.channelLogin), n.chatConnected && n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.state.hasEnteredChatRoom || Object(We.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: !!n.state.hostedChannelLogin
                        }), n.setState({
                            hasEnteredChatRoom: !0
                        }), n.props.latencyTracking.reportInteractive()
                    }, n.createOutgoingTokenMatchers = function(e) {
                        n.outgoingTokenMatchers = e.map(function(e) {
                            return {
                                token: e,
                                regex: new RegExp("" + ii + e + ai)
                            }
                        })
                    }, n.parseOutgoingMessage = function(e) {
                        n.outgoingTokenMatchers.forEach(function(t) {
                            t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                        })
                    }, n.onOutgoingTokenMatch = function(e, t) {
                        switch (e) {
                            case oi:
                                var i = n.props.theme === p.a.Light ? p.a.Dark : p.a.Light;
                                n.props.onThemeChange(i);
                                break;
                            default:
                                return
                        }
                    }, n.onBadgesUpdated = function(e) {
                        n.setState({
                            userBadges: e.badges
                        })
                    }, n.clearBufferHandle = function() {
                        n.syncBufferHandle && (clearTimeout(n.syncBufferHandle), n.syncBufferHandle = 0)
                    }, n.chatService = new Pe(t.userLogin, t.channelLogin, n.onChatMessage), n.logger = a.j.withCategory("chat-room"), n.registerCustomLatencyEvents(), n.createOutgoingTokenMatchers([oi]), n.activeChatters = new Se(t.channelID), n.chatBuffer = new Re(ri, n.onChatBufferUpdate), n.chatBuffer.setBlockedUsers(t.blockedUsers), t.userLogin && n.chatBuffer.setCurrentUserLogin(t.userLogin), t.userID && n.activeChatters.setCurrentUserID(t.userID), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.shouldConnectOnMount() ? this.connect(this.props) : this.props.latencyTracking.reportInteractive(), this.props.bitsConfig && this.updateBitsConfig(this.props.bitsConfig), this.updateBlockLinks(this.props.blockLinks), this.props.emoteSetsData && this.props.emoteSetsData.emoteSets && (this.logger.debug("Updating emote sets after mount", {
                        emoteSets: this.props.emoteSetsData && this.props.emoteSetsData.emoteSets
                    }), this.chatService.updateEmotes(this.props.emoteSetsData.emoteSets))
                }, t.prototype.componentWillUnmount = function() {
                    this.disconnect(), this.chatBuffer && this.chatBuffer.shutdown(), this.props.onChatMessagesReset()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props,
                        n = !1;
                    if (e.isHidden && !t.isHidden || !e.rightColumnExpanded && t.rightColumnExpanded ? this.disconnect() : (n = e.channelLogin !== t.channelLogin || e.userLogin !== t.userLogin || e.authToken !== t.authToken || !e.isHidden && t.isHidden || e.rightColumnExpanded && !t.rightColumnExpanded) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.connect(e), this.setState({
                            hostedChannelLogin: null
                        })), this.props.isBackground && !e.isBackground) {
                        var i = a.l.getOptional("roomsFastChatThresholdOverride");
                        if (i || (i = 5), this.chatBuffer.chatRate > i) {
                            var r = a.l.getOptional("roomsClearedBufferSize");
                            r || (r = 20), this.chatBuffer.clear(r)
                        }
                        this.props.onChatMessagesUpdate(this.chatBuffer.toArray())
                    }
                    var o = e.emoteSetsData && e.emoteSetsData.emoteSets,
                        s = t.emoteSetsData && t.emoteSetsData.emoteSets;
                    o && (o !== s || n) && (this.logger.debug("Updating emote sets on props change", {
                        shouldReconnect: n,
                        prevEmoteSets: s,
                        nextEmoteSets: o
                    }), this.chatService.updateEmotes(o)), (e.bitsConfig !== t.bitsConfig || n) && this.updateBitsConfig(e.bitsConfig), (e.blockLinks !== t.blockLinks || n) && this.updateBlockLinks(e.blockLinks);
                    var l = e.isCurrentUserModerator ? 0 : e.chatDelayMS;
                    this.chatBuffer.setDelay(l), e.userLogin && t.userLogin !== e.userLogin && this.chatBuffer.setCurrentUserLogin(e.userLogin), e.userID && t.userID !== e.userID && this.activeChatters.setCurrentUserID(e.userID), t.channelID !== e.channelID && this.activeChatters.resetWithChannelID(e.channelID), t.blockedUsers !== e.blockedUsers && this.chatBuffer.setBlockedUsers(e.blockedUsers), !this.moderationActionService && e.userID && e.channelID && (this.moderationActionService = new He(e.channelID, e.userID, this.chatBuffer.consumeChatEvent))
                }, t.prototype.render = function() {
                    var e = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                        t = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {};
                    return d.createElement(ni, {
                        authToken: this.props.authToken,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        activeChatters: this.activeChatters,
                        chatRoomHeader: d.createElement(de, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        }),
                        chatRules: this.props.chatRules,
                        currentUserDisplayName: this.props.userDisplayName,
                        currentUserLogin: this.props.userLogin,
                        emotes: e,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hostedChannelLogin: this.state.hostedChannelLogin,
                        isBackground: this.props.isBackground,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHidden: this.props.isHidden,
                        isHostMode: !!this.state.hostedChannelLogin,
                        isOwnChannel: this.isOwnChannel,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.props.closeRoomPicker,
                        onChatUnhide: this.props.onChatUnhide,
                        onPushMessage: this.pushMessage,
                        onSendMessage: this.sendMessage,
                        raidReceived: this.state.raidReceived,
                        theme: this.props.theme,
                        isStaff: this.props.isStaff,
                        userBadges: this.state.userBadges,
                        userID: this.props.userID
                    }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && d.createElement(X, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig
                    }), this.props.hostedChannelDisplayName && !this.props.isPopout && d.createElement(te, {
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                        hostedChannelLogin: this.state.hostedChannelLogin || ""
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && d.createElement(ce.a, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && d.createElement(re, {
                        channelLogin: this.props.channelLogin
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && d.createElement(ye, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin
                    }), d.createElement(D.a, {
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        userLogin: this.props.userLogin,
                        userID: this.props.userID,
                        emoteMap: t
                    }), d.createElement(w.a, {
                        currentUserLogin: this.props.userLogin
                    }), d.createElement(S, {
                        channelID: this.props.channelID
                    }))
                }, t.prototype.shouldConnectOnMount = function() {
                    return (this.props.isEmbedded || this.props.isPopout || this.props.rightColumnExpanded) && !this.chatService.disabled
                }, t.prototype.registerCustomLatencyEvents = function() {
                    this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents(v.a.Chat), this.chatInitialized = this.registerInitEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized), this.shouldConnectOnMount() && (this.chatConnected = this.registerConnectedEvent())
                }, t.prototype.registerInitEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 3e3,
                        group: v.a.Chat,
                        key: v.b.ChatInit,
                        label: v.c.Init
                    })
                }, t.prototype.registerConnectedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 4e3,
                        group: v.a.Chat,
                        key: v.b.ChatConnected,
                        label: v.c.Connected
                    })
                }, Object.defineProperty(t.prototype, "isOwnChannel", {
                    get: function() {
                        return this.props.userID === this.props.channelID
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(d.Component);
        var li = Object(u.compose)(Object(s.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isHidden: e.chat.isHidden,
                    isLoggedIn: Object(l.d)(e),
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theme: Object(b.a)(e)
                }
            }, function(e, t) {
                return Object(m.b)({
                    onChatMessagesReset: function() {
                        return ee.B()
                    },
                    onChatMessagesUpdate: function(e) {
                        return ee.R(t.channelLogin, e)
                    },
                    onChatUnhide: function() {
                        return ee.T()
                    },
                    onFollowerModeDisable: function() {
                        return ee.C()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return ee.z(e)
                    },
                    onFollowerModeEnable: function() {
                        return ee.J()
                    },
                    onSlowModeDisable: function() {
                        return ee.G()
                    },
                    onSlowModeEnable: function() {
                        return ee.N()
                    },
                    onSubsOnlyModeDisable: function() {
                        return ee.H()
                    },
                    onSubsOnlyModeEnable: function() {
                        return ee.O()
                    },
                    onThemeChange: function(e) {
                        return Object(f.b)(e, f.a.TypedCommand)
                    }
                }, e)
            }), Object(Ge.d)("ChatRoom"), Object(c.a)(qe, {
                props: function(e) {
                    var t;
                    return e.data && e.data.user && e.data.user.cheer && e.data.user.cheer.emotes && (t = Object(N.a)(e.data.user.cheer.emotes)), {
                        bitsConfig: t
                    }
                },
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(h.a)(), Object(g.a)())(si),
            di = n("/eFD"),
            ci = n("KNSH"),
            ui = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.channelData.channel,
                        t = this.props.userData && this.props.userData.user,
                        n = !1,
                        i = !1;
                    if (t && e && e.self) {
                        var a = t.login === e.login,
                            r = t.roles.isGlobalMod || t.roles.isSiteAdmin || t.roles.isStaff;
                        n = e.self.isModerator || r || a, i = t.roles.isStaff
                    }
                    var o = e && e.chatSettings && e.chatSettings.rules,
                        s = e && e.chatSettings && e.chatSettings.chatDelayMs,
                        l = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                    return d.createElement(li, {
                        key: this.props.channelLogin,
                        authToken: this.props.user && this.props.user.authToken,
                        blockLinks: l,
                        channelDisplayName: e && e.displayName,
                        channelID: e && e.id,
                        channelLogin: this.props.channelLogin,
                        chatRules: o,
                        chatDelayMS: s,
                        clientID: this.props.clientID,
                        isBackground: this.props.isBackground,
                        isCurrentUserModerator: n,
                        isEmbedded: !!this.props.isEmbedded,
                        isPopout: !!this.props.isPopout,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                        closeRoomPicker: this.props.closeRoomPicker,
                        onHostingChange: this.props.onHostingChange,
                        userDisplayName: this.props.user && this.props.user.displayName,
                        userID: this.props.user && this.props.user.id.toString(),
                        userLogin: this.props.user && this.props.user.login,
                        isStaff: i
                    })
                }, t = i.__decorate([Object(c.a)(di, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(c.a)(ci, {
                    name: "userData",
                    skip: function(e) {
                        return !e.user
                    }
                }), Object(Ge.d)("Chat")], t)
            }(d.Component);
        var mi = Object(s.b)(function(e) {
            return {
                user: Object(l.c)(e)
            }
        })(ui);
        n.d(t, !1, function() {
            return ui
        }), n.d(t, "a", function() {
            return mi
        })
    },
    "1Eny": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1F7R": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("vh75"),
            o = n("TToO"),
            s = n("GiK3"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.props.addCommand(this.props.command, this.props.handler)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.command === e.command && this.props.handler === e.handler || (this.props.removeCommand(this.props.command), this.props.addCommand(e.command, e.handler))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.removeCommand(this.props.command)
                }, t.prototype.render = function() {
                    return null
                }, t
            }(s.PureComponent);
        var d = Object(i.b)(null, function(e) {
            return Object(a.b)({
                addCommand: r.y,
                removeCommand: r.S
            }, e)
        })(l);
        n.d(t, "a", function() {
            return d
        })
    },
    "1OO3": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("7vx8"),
            r = 60,
            o = 60 * r,
            s = 24 * o,
            l = 7 * s,
            d = 4 * l;
        var c, u = n("MApH");
        n.d(t, "a", function() {
                return c
            }), t.b = function(e) {
                var t = this;
                return Object(a.a)(u, {
                    props: function(n) {
                        return {
                            banUserMutation: function(a, c) {
                                return void 0 === c && (c = null), i.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: a,
                                                            expiresIn: c && function(e) {
                                                                if (!e) return "0s";
                                                                var t = e,
                                                                    n = "";
                                                                if (t > d) {
                                                                    var i = Math.floor(t / d);
                                                                    t -= i * d, n += i + "mo"
                                                                }
                                                                if (t > l) {
                                                                    var a = Math.floor(t / l);
                                                                    t -= a * l, n += a + "w"
                                                                }
                                                                if (t > s) {
                                                                    var c = Math.floor(t / s);
                                                                    t -= c * s, n += c + "d"
                                                                }
                                                                if (t > o) {
                                                                    var u = Math.floor(t / o);
                                                                    t -= u * o, n += u + "h"
                                                                }
                                                                if (t > r) {
                                                                    var m = Math.floor(t / r);
                                                                    t -= m * r, n += m + "m"
                                                                }
                                                                return t > 0 && (n += t + "s"), n
                                                            }(c)
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return [2, i.sent().data];
                                            case 3:
                                                throw i.sent(), new Error("Unable to ban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Ban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            },
            function(e) {
                e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetIsSelf = "TARGET_IS_SELF", e.TargetIsAnonymous = "TARGET_IS_ANONYMOUS", e.TargetIsMod = "TARGET_IS_MOD", e.TargetIsBroadcaster = "TARGET_IS_BROADCASTER", e.TargetIsStaff = "TARGET_IS_STAFF", e.TargetIsAdmin = "TARGET_IS_ADMIN", e.TargetIsGlobalMod = "TARGET_IS_GLOBAL_MOD", e.TargetIsAlreadyBanned = "TARGET_ALREADY_BANNED", e.DurationInvalid = "DURATION_INVALID"
            }(c || (c = {}))
    },
    "1bR2": function(e, t, n) {
        e.exports = n.p + "assets/gift1-8573b4d1700bd278971c52e7d077d1c4.png"
    },
    "1pvm": function(e, t) {},
    "1tZx": function(e, t) {},
    "1vwK": function(e, t) {},
    "2B/Z": function(e, t) {},
    "2I50": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChatInput_SendCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendCheerInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "currentUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsBalance"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\nsendCheer(input: $input) {\nid\ncurrentUser {\nid\nbitsBalance\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2IkU": function(e, t) {},
    "2LJg": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "roomMessageContent"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "RoomMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "content"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "fragments"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "Emote"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "token"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "User"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 183
            }
        };
        n.loc.source = {
            body: "fragment roomMessageContent on RoomMessage {\ncontent {\ntext\nfragments {\ntext\ncontent {\n... on Emote {\nemoteID: id\nsetID\ntoken\n}\n... on User {\nid\nlogin\ndisplayName\n}\n__typename\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2ZhA": function(e, t) {},
    "3LYq": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_AllowRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AllowRejectedChatMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "allowRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\nallowRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3T7g": function(e, t, n) {
        "use strict";
        var i = n("RbGx"),
            a = n("mbxv"),
            r = n("+V/3"),
            o = (n("AwFw"), n("TToO")),
            s = function() {
                function e(e, t, n) {
                    this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                }
                return e.prototype.getBadge = function(e, t) {
                    var n = this.channelsBySet.get(e);
                    return n && n.has(t) ? n.get(t) || null : void 0 !== (n = this.globalsBySet.get(e)) && n.get(t) || null
                }, e.prototype.indexBadges = function(e, t, n) {
                    e.forEach(function(e) {
                        n && e.clickAction === r.b && (e = o.__assign({}, e, {
                            channelName: n
                        }));
                        var i = t.get(e.setID);
                        i || (i = new Map, t.set(e.setID, i)), i.set(e.version, e)
                    })
                }, e
            }();
        new s([], [], "");
        n.d(t, "b", function() {
            return i.a
        }), n.d(t, "a", function() {
            return a.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return s
        })
    },
    "4Jix": function(e, t) {},
    "4JjK": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Ready = 0] = "Ready", e[e.Dimensions = 1] = "Dimensions", e[e.RequestAd = 2] = "RequestAd", e[e.OnStart = 3] = "OnStart", e[e.OnCredit = 4] = "OnCredit", e[e.OnFinish = 5] = "OnFinish", e[e.OnClose = 6] = "OnClose", e[e.OnError = 7] = "OnError", e[e.Adblock = 8] = "Adblock", e[e.LimitReached = 9] = "LimitReached"
            }(i || (i = {}))
    },
    "4Q5V": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("HW6M"),
            s = n("3zLD"),
            l = n("7vx8"),
            d = n("oIkB"),
            c = n("RbGx"),
            u = n("iydZ"),
            m = n("5Nu7"),
            p = n("RH2O"),
            h = n("2KeS"),
            g = n("3T7g"),
            f = n("ass3"),
            v = n("g7wA"),
            b = n("aUOx"),
            k = n("Ncf8"),
            y = n("qkCi"),
            _ = n("O9wU"),
            C = n("1OO3"),
            S = n("KBUQ"),
            E = n("JtUK"),
            N = n("Kthq"),
            w = n("Odds"),
            D = (n("B88H"), "chat-ban-button"),
            O = "chat-unban-button",
            I = "chat-timeout-button",
            R = "chat-deleted-message-placeholder",
            T = 600,
            M = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        alwaysShowMessage: !1
                    }, t.renderModerationIcons = function() {
                        if (!t.props.isCurrentUserModerator || !t.props.showModerationIcons) return null;
                        var e = t.onBanUser,
                            n = w._18.Ban,
                            i = Object(r.d)("Ban", "ChatMessageEvent"),
                            o = D;
                        return t.props.message.deleted && !t.state.alwaysShowMessage && (e = t.onUnbanUser, n = w._18.FollowCheck, i = Object(r.d)("Unban", "ChatMessageEvent"), o = O), a.createElement(w._4, {
                            display: w.P.Inline,
                            className: "chat-line__mod-icons"
                        }, a.createElement("button", {
                            className: "mod-icon",
                            onClick: e,
                            "data-a-target": o
                        }, a.createElement(w._44, {
                            label: i
                        }, a.createElement(w._17, {
                            width: 16,
                            height: 16,
                            type: w._19.Inherit,
                            asset: n
                        }))), a.createElement("button", {
                            className: "mod-icon",
                            onClick: t.timeoutUser,
                            "data-a-target": I
                        }, a.createElement(w._44, {
                            label: Object(r.d)("Timeout", "ChatMessageEvent")
                        }, a.createElement(w._17, {
                            width: 16,
                            height: 16,
                            type: w._19.Inherit,
                            asset: w._18.Timeout
                        }))))
                    }, t.renderMessageBody = function() {
                        if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                            var e = Object(r.d)("message deleted", "ChatLine");
                            return t.props.isCurrentUserModerator ? a.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": R
                            }, a.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + e + ">")) : a.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": R
                            }, "<" + e + ">")
                        }
                        return Object(v.k)(t.props.message.messageParts, t.props.currentUserDisplayName, t.props.currentUserLogin)
                    }, t.onBanUser = function() {
                        t.props.banUserMutation(t.props.message.user.userLogin).then(function(e) {
                            var n = e.banUserFromChatRoom;
                            if (t.props.onPushMessage)
                                if (n.error) {
                                    var i = Object(b.a)(Object(E.a)(t.props.message.user.userLogin, n.error.code));
                                    t.props.onPushMessage(i)
                                } else {
                                    var a = Object(k.a)(y.e.Ban, t.props.message.user.userLogin, null, null);
                                    t.props.onPushMessage(a)
                                }
                        }).catch(function() {
                            if (t.props.onPushMessage) {
                                var e = Object(b.a)(Object(r.d)("Unable to ban user.", "ChatMessageEvent"));
                                t.props.onPushMessage(e)
                            }
                        })
                    }, t.onUnbanUser = function() {
                        t.props.unbanUserMutation(t.props.message.user.userLogin).then(function(e) {
                            var n = e.unbanUserFromChatRoom;
                            if (t.props.onPushMessage)
                                if (n.error) {
                                    var i = Object(b.a)(Object(N.a)(t.props.message.user.userLogin, n.error.code));
                                    t.props.onPushMessage(i)
                                } else {
                                    i = Object(b.a)(Object(r.d)("{bannedUserLogin} is no longer banned from this channel.", {
                                        bannedUserLogin: t.props.message.user.userLogin
                                    }, "ChatMessageEvent"));
                                    t.props.onPushMessage(i)
                                }
                        }).catch(function() {
                            if (t.props.onPushMessage) {
                                var e = Object(b.a)(Object(r.d)("Unable to unban user.", "ChatMessageEvent"));
                                t.props.onPushMessage(e)
                            }
                        })
                    }, t.timeoutUser = function() {
                        t.props.banUserMutation(t.props.message.user.userLogin, T).then(function(e) {
                            var n = e.banUserFromChatRoom;
                            if (t.props.onPushMessage)
                                if (n.error) {
                                    var i = Object(b.a)(Object(E.a)(t.props.message.user.userLogin, n.error.code, !0));
                                    t.props.onPushMessage(i)
                                } else {
                                    var a = Object(k.a)(y.e.Timeout, t.props.message.user.userLogin, null, T);
                                    t.props.onPushMessage(a)
                                }
                        }).catch(function() {
                            if (t.props.onPushMessage) {
                                var e = Object(b.a)(Object(r.d)("Unable to timeout user.", "ChatMessageEvent"));
                                t.props.onPushMessage(e)
                            }
                        })
                    }, t.alwaysShowMessage = function(e) {
                        e && e.preventDefault(), t.setState({
                            alwaysShowMessage: !0
                        })
                    }, t.usernameClickHandler = function(e) {
                        t.props.onUsernameClick(t.props.message.user.userLogin, _.a.chat_message, t.props.message.id, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.badgeSets,
                        n = e.className,
                        i = e.message,
                        r = e.showTimestamps,
                        s = {},
                        l = ": ";
                    i.messageType === y.c.Action && (s = {
                        color: i.user.color
                    }, l = " ");
                    var d = null;
                    return r && (d = Object(v.t)(i.timestamp)), a.createElement("div", {
                        className: o(n, "chat-line__message"),
                        style: s,
                        "data-a-target": "chat-line-message"
                    }, d, this.renderModerationIcons(), a.createElement(g.b, {
                        badgeSets: t,
                        badgesToRender: i.badges
                    }), a.createElement("button", {
                        onClick: this.usernameClickHandler,
                        className: "chat-line__username"
                    }, a.createElement(m.a, {
                        userData: i.user
                    })), a.createElement("span", {
                        key: "separator"
                    }, l), this.renderMessageBody())
                }, t
            }(a.Component);
        var L = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            x = Object(s.compose)(Object(p.b)(void 0, function(e) {
                return Object(h.b)({
                    onUsernameClick: f.d
                }, e)
            }), Object(C.b)(L), Object(S.b)(L))(M),
            A = n("6Agf"),
            F = n("l21v"),
            j = n("3LYq"),
            B = n("IEOs"),
            U = {
                badges: {
                    twitchbot: "1"
                },
                bits: 0,
                color: "#6441A5",
                displayName: "AutoMod",
                id: "automod",
                userID: "automod",
                username: "automod",
                userType: A.a.GlobalMod,
                emotes: null
            },
            P = {
                VoHiYo: {
                    displayName: "VoHiYo",
                    id: "81274",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/81274/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/3.0 3.0x",
                    token: "VoHiYo"
                }
            };
        var V = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isResolved: !1
                    }, t.allowAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        });
                        var e = t.props.message;
                        e.autoModType === y.a.MessageRejectedPrompt && t.props.allowRejectedChatMessage && t.props.allowRejectedChatMessage(Object(d.a)({
                            id: e.rejectedMessage.id
                        }))
                    }, t.denyAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        });
                        var e = t.props.message;
                        e.autoModType === y.a.MessageRejectedPrompt && t.props.denyRejectedChatMessage && t.props.denyRejectedChatMessage(Object(d.a)({
                            id: e.rejectedMessage.id
                        }))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t = this.props.message;
                    switch (t.autoModType) {
                        case y.a.MessageRejectedPrompt:
                            e = function(e) {
                                var t;
                                switch (e) {
                                    case "aggressive":
                                        t = Object(r.d)("aggressive", "AutoModLine");
                                        break;
                                    case "sexual":
                                        t = Object(r.d)("sexual", "AutoModLine");
                                        break;
                                    case "profanity":
                                        t = Object(r.d)("profanity", "AutoModLine");
                                        break;
                                    case "identity":
                                        t = Object(r.d)("identity", "AutoModLine");
                                        break;
                                    default:
                                        return Object(r.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
                                }
                                return Object(r.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                                    category: t
                                }, "AutoModLine")
                            }(t.category);
                            break;
                        case y.a.MessageRejected:
                            e = Object(r.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                            break;
                        case y.a.MessageAllowed:
                            e = Object(r.d)("Mods have allowed your message. Happy chatting!", "AutoModLine"), e += " VoHiYo";
                            break;
                        case y.a.MessageDenied:
                            e = Object(r.d)("Mods have removed your message.", "AutoModLine");
                            break;
                        default:
                            throw new Error("Invalid message type")
                    }
                    var n = Object(F.a)(e, U, u.a, !1, P);
                    switch (t.autoModType) {
                        case y.a.MessageRejectedPrompt:
                            if (this.state.isResolved) return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.h)());
                            return a.createElement(w._4, {
                                className: "chat-line__message"
                            }, a.createElement(c.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: n.badges
                            }), a.createElement(m.a, {
                                userData: n.user
                            }), a.createElement("span", {
                                key: "separator"
                            }, ": "), Object(v.k)(n.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin), a.createElement(w._4, {
                                key: "automod-prompt",
                                className: "chat-line__nested-component--float-right"
                            }, a.createElement(w.u, {
                                size: w.y.Small,
                                onClick: this.allowAutoModRejectedMessage,
                                type: w.A.Text
                            }, Object(r.d)("Allow", "AutoModLine")), a.createElement(w.O, {
                                type: w._41.Span
                            }, "•"), a.createElement(w.u, {
                                size: w.y.Small,
                                onClick: this.denyAutoModRejectedMessage,
                                type: w.A.Text
                            }, Object(r.d)("Deny", "AutoModLine"))), a.createElement(x, i.__assign({}, this.props, {
                                isDeleted: !1,
                                showTimestamps: !1,
                                className: o(["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"]),
                                message: t.rejectedMessage
                            })));
                        case y.a.MessageRejected:
                        case y.a.MessageAllowed:
                        case y.a.MessageDenied:
                            return a.createElement(w._4, {
                                className: o(["chat-line__message", "chat-line__message--special", "chat-line__message--alert"])
                            }, a.createElement(c.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: n.badges
                            }), a.createElement(m.a, {
                                userData: n.user
                            }), a.createElement("span", {
                                key: "separator"
                            }, ": "), Object(v.k)(n.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin));
                        default:
                            throw new Error("Invalid message type")
                    }
                }, t
            }(a.Component),
            H = Object(s.compose)(Object(l.a)(j, {
                name: "allowRejectedChatMessage",
                options: {}
            }), Object(l.a)(B, {
                name: "denyRejectedChatMessage",
                options: {}
            }))(V),
            W = n("91zu"),
            G = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.params,
                        t = this.props.data,
                        n = t.channel,
                        i = t.loading,
                        o = t.error;
                    if (i || o) return null;
                    var s = Object(r.d)("{displayName} is raiding with a party of {viewerCount}.", {
                        displayName: a.createElement("strong", null, n.displayName),
                        viewerCount: a.createElement("strong", null, e.viewerCount)
                    }, "RaidIncomingMessage");
                    return a.createElement(w._4, {
                        className: "chat-line__raid",
                        "data-test-selector": "incoming-raid"
                    }, a.createElement(w._4, {
                        display: w.P.Flex,
                        alignItems: w.c.Center
                    }, a.createElement(w.l, {
                        alt: n.displayName,
                        src: n.profileImageURL,
                        size: 30
                    }), a.createElement(w._27, {
                        color: w.J.Base,
                        margin: {
                            left: 1
                        }
                    }, s)))
                }, t
            }(a.Component),
            q = Object(l.a)(W, {
                options: function(e) {
                    return {
                        variables: {
                            channelLogin: e.message.params.login
                        }
                    }
                }
            })(G),
            z = n("H/22"),
            $ = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.moderationActionEvent,
                        t = null;
                    if (e.moderationActionType === y.d.AutoModEnabled) t = Object(r.d)("AutoMod has been enabled for this channel.", "ModerationActionLine");
                    else if (e.level === z.a.Channel) {
                        var n = e.args && e.args.join(" ").trim(),
                            i = n && n.length > 0 ? "/" + e.moderationActionType + " " + n : "" + e.moderationActionType;
                        t = Object(r.d)("{user} used: {command}.", {
                            user: e.createdByLogin,
                            command: i
                        }, "ModerationActionLine")
                    } else {
                        var o = e.createdByLogin,
                            s = e.targetUserLogin,
                            l = e.duration,
                            d = e.reason;
                        switch (e.moderationActionType) {
                            case y.d.Timeout:
                                t = l && d ? Object(r.d)("{user} timed out {target} for {duration} seconds. Reason: {reason}.", {
                                    user: o,
                                    target: s,
                                    duration: l,
                                    reason: d
                                }, "ModerationActionLine") : l ? Object(r.d)("{user} timed out {target} for {duration} seconds.", {
                                    user: o,
                                    target: s,
                                    duration: l
                                }, "ModerationActionLine") : Object(r.d)("{user} timed out {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case y.d.Ban:
                                t = d ? Object(r.d)("{user} banned {target}. Reason: {reason}.", {
                                    user: o,
                                    target: s,
                                    reason: d
                                }, "ModerationActionLine") : Object(r.d)("{user} banned {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case y.d.Untimeout:
                                t = Object(r.d)("{user} removed time out on {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case y.d.Unban:
                                t = Object(r.d)("{user} removed ban on {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case y.d.Mod:
                                t = Object(r.d)("{user} granted moderator privileges to {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case y.d.Unmod:
                                t = Object(r.d)("{user} removed moderator privileges for {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            default:
                                return null
                        }
                    }
                    return t ? a.createElement(w._4, {
                        className: "chat-line__status"
                    }, a.createElement(w.O, {
                        type: w._41.Span
                    }, t)) : null
                }, t
            }(a.Component);

        function J() {
            return {
                raid_error_self: Object(r.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                raid_error_forbidden: Object(r.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                raid_error_already_raiding: Object(r.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                raid_error_too_many_viewers_to_raid: Object(r.d)("Sorry, raids can only support up to 20,000 viewers right now.", "RaidErrorTooManyViewersMessage"),
                raid_error_unexpected: Object(r.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                unraid_error_unexpected: Object(r.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                unraid_error_no_active_raid: Object(r.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                raid_notice_restricted_chat: Object(r.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                raid_notice_mature: Object(r.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                raid_notice_owner: Object(r.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                    unraidCommand: "/unraid"
                }, "RaidNoticeOwnerMessage")
            }
        }
        var Q = function(e) {
                return a.createElement("span", null, J()[e.message.msgid])
            },
            Y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        if (!t.props.event.user) return null;
                        t.props.onUsernameClick(t.props.event.user.userLogin, _.a.chat_message, t.props.event.id, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.event;
                    if (e.user) {
                        var t = null;
                        e.badges && (t = a.createElement(g.b, {
                            badgeSets: this.props.badgeSets,
                            badgesToRender: e.badges
                        }));
                        var n = e.isPrime ? Object(v.a)(e.user.userDisplayName, Object(v.v)(e.channel)) : Object(v.b)(e.user.userDisplayName, e.tier),
                            i = [a.createElement("span", {
                                key: "chat--resubbed"
                            }, n, a.createElement("span", {
                                key: "sub-separator"
                            }, " "), Object(r.d)("{userLogin} subscribed for {months} months in a row!", {
                                userLogin: e.user.userDisplayName,
                                months: e.months
                            }, "ChatLine"))];
                        if (e.messageParts && e.user && !this.props.isDeleted) {
                            var o = null;
                            this.props.showTimestamps && e.timestamp && (o = Object(v.t)(e.timestamp)), i.push(a.createElement("div", {
                                key: "resub-message",
                                className: "chat-line__subscribe--message"
                            }, o, t, a.createElement("button", {
                                className: "chat-line__username",
                                onClick: this.usernameClickHandler,
                                "data-test-selector": "resub-sender-login"
                            }, a.createElement(m.a, {
                                userData: e.user
                            })), a.createElement("span", {
                                key: "separator"
                            }, ": "), Object(v.k)(e.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin)))
                        }
                        return a.createElement(w._4, {
                            className: "chat-line__subscribe"
                        }, i)
                    }
                    return null
                }, t
            }(a.Component);
        var K, Z = Object(s.compose)(Object(p.b)(void 0, function(e) {
            return Object(h.b)({
                onUsernameClick: f.d
            }, e)
        }))(Y);
        ! function(e) {
            e.NewChatter = "new_chatter"
        }(K || (K = {}));
        var X = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.renderSystemText = function() {
                    if (t.props.event.ritualType === K.NewChatter) {
                        var e = t.props.event.message,
                            n = e.user.isIntl ? e.user.userDisplayName + " (" + e.user.userLogin + ")" : e.user.userDisplayName;
                        return Object(r.d)("{user} is new here. Say hello!", {
                            user: "@" + n
                        }, "NewChatterRitual")
                    }
                    return ""
                }, t.usernameClickHandler = function(e) {
                    var n = t.props.event.message.user.userLogin;
                    t.props.onUsernameClick(n, _.a.chat_message, t.props.event.message.id, e.currentTarget.getBoundingClientRect().bottom)
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this.props.event.message;
                if (e.user && !this.props.isDeleted) {
                    var t = null;
                    e.badges && (t = a.createElement(g.b, {
                        badgeSets: this.props.badgeSets,
                        badgesToRender: e.badges
                    }));
                    var n = null;
                    return this.props.showTimestamps && e.timestamp && (n = Object(v.t)(e.timestamp)), a.createElement("span", null, this.renderSystemText(), a.createElement("div", {
                        className: "chat-line__ritual--message"
                    }, n, t, a.createElement("button", {
                        className: "chat-line__username",
                        onClick: this.usernameClickHandler,
                        "data-test-selector": "ritual-sender-login"
                    }, a.createElement(m.a, {
                        userData: e.user
                    })), a.createElement("span", null, ": "), Object(v.k)(e.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin)))
                }
                return null
            }, t
        }(a.Component);
        var ee = Object(s.compose)(Object(p.b)(void 0, function(e) {
                return Object(h.b)({
                    onUsernameClick: f.d
                }, e)
            }))(X),
            te = n("iMOk"),
            ne = n("Cn8s"),
            ie = (n("RkXA"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        drawerOpen: !1
                    }, t.renderBitsLoot = function(e) {
                        return a.createElement(w._4, {
                            key: e.quantity,
                            className: "chat-line__purchase-loot"
                        }, a.createElement(te.a, {
                            bitsConfig: t.props.bitsConfig,
                            count: e.quantity,
                            withImage: !0
                        }))
                    }, t.toggleDrawer = function() {
                        t.setState(function(e) {
                            return {
                                drawerOpen: !e.drawerOpen
                            }
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t = this,
                        n = this.props.purchase,
                        i = n.crateLoot,
                        o = n.numCrates,
                        s = n.purchased;
                    if (o > 0) {
                        var l = Object(r.d)("{numCrates, plural, one {Plus # Twitch Crate with {lootCount} rewards!} other {Plus # Twitch Crates with {lootCount} rewards!}}", {
                            numCrates: o,
                            lootCount: i.length
                        }, "SharePurchaseLineRewardText");
                        e = a.createElement(w._4, {
                            className: "chat-line__purchase-reward-text",
                            margin: {
                                top: .5
                            }
                        }, l)
                    }
                    var d, c = i.map(function(e) {
                        switch (e.type) {
                            case ne.a.Badge:
                                return t.renderBadgeLoot(e);
                            case ne.a.Bits:
                                return t.renderBitsLoot(e);
                            case ne.a.Emote:
                                return t.renderEmoteLoot(e);
                            case ne.a.InGameContent:
                                return t.renderIGCLoot(e);
                            default:
                                return ""
                        }
                    });
                    if (i.length <= 2) d = 0 === i.length ? "" : a.createElement(w._27, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: w.c.Center,
                        borderLeft: !0,
                        display: w.P.Flex,
                        flexDirection: w.R.Row,
                        flexShrink: 0,
                        flexWrap: w.S.NoWrap,
                        justifyContent: w._3.Center,
                        padding: .5
                    }, c);
                    else if (this.state.drawerOpen) d = a.createElement("span", {
                        className: "chat-line__purchase-loot-toggle",
                        onClick: this.toggleDrawer,
                        "data-test-selector": "purchase-loot-toggle"
                    }, a.createElement(w._27, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: w.c.Center,
                        borderLeft: !0,
                        display: w.P.Flex,
                        flexDirection: w.R.Row,
                        flexShrink: 0,
                        flexWrap: w.S.NoWrap,
                        justifyContent: w._3.Center,
                        padding: .5
                    }, a.createElement(w._17, {
                        asset: w._18.GlyphArrUp
                    })));
                    else {
                        var u = "+" + (i.length - 1);
                        d = a.createElement("span", {
                            className: "chat-line__purchase-loot-toggle",
                            onClick: this.toggleDrawer,
                            "data-test-selector": "purchase-loot-toggle"
                        }, a.createElement(w._27, {
                            className: "chat-line__purchase-loot-box",
                            alignItems: w.c.Center,
                            borderLeft: !0,
                            display: w.P.Flex,
                            flexDirection: w.R.Row,
                            flexShrink: 0,
                            flexWrap: w.S.NoWrap,
                            justifyContent: w._3.Center,
                            padding: .5
                        }, c[0], a.createElement(w._8, {
                            label: u,
                            type: w._9.Notification
                        })))
                    }
                    var m = i.length <= 2 || !this.state.drawerOpen ? "" : a.createElement(w._27, {
                        className: "chat-line__purchase-loot-drawer",
                        alignItems: w.c.Center,
                        display: w.P.Flex,
                        flexDirection: w.R.Row,
                        flexShrink: 0,
                        flexWrap: w.S.NoWrap,
                        justifyContent: w._3.End,
                        padding: .5,
                        "data-test-selector": "purchase-loot-drawer"
                    }, c);
                    return a.createElement(w._27, {
                        className: "chat-line__purchase",
                        elevation: 1,
                        margin: {
                            bottom: .5,
                            left: 2,
                            right: 2,
                            top: 0
                        }
                    }, a.createElement(w._4, {
                        display: w.P.Flex,
                        flexDirection: w.R.Row,
                        flexWrap: w.S.NoWrap
                    }, a.createElement(w._4, {
                        flexGrow: 0,
                        flexShrink: 0,
                        margin: .5
                    }, a.createElement("img", {
                        className: "chat-line__purchase-boxart",
                        src: s.boxart
                    })), a.createElement(w._4, {
                        flexGrow: 1,
                        margin: .5
                    }, a.createElement(w._27, {
                        fontSize: w.T.Size4
                    }, s.title), e), d), m)
                }, t.prototype.renderBadgeLoot = function(e) {
                    return a.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t.prototype.renderEmoteLoot = function(e) {
                    var t = "//static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/2.0";
                    return a.createElement("img", {
                        key: e.id,
                        className: "chat-line__purchase-loot",
                        src: t
                    })
                }, t.prototype.renderIGCLoot = function(e) {
                    return a.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t
            }(a.Component)),
            ae = (n("+5Qw"), "timeout_success"),
            re = "ban_success",
            oe = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    if (!e.doesNotUpdate) return !0;
                    if (e.isCurrentUserModerator !== this.props.isCurrentUserModerator) return !0;
                    if (e.showModerationIcons !== this.props.showModerationIcons) return !0;
                    if (e.showTimestamps !== this.props.showTimestamps) return !0;
                    switch (e.message.type) {
                        case y.b.Message:
                        case y.b.Resubscription:
                            if (e.message.deleted) return !0;
                            break;
                        case y.b.Ritual:
                            if (e.message.message.deleted) return !0;
                            break;
                        case y.b.AutoMod:
                            if (e.message.autoModType === y.a.MessageRejectedPrompt && e.showAutoModActions !== this.props.showAutoModActions) return !0;
                            break;
                        case y.b.ModerationAction:
                            if (e.showModerationActions !== this.props.showModerationActions) return !0
                    }
                    return !1
                }, t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case y.b.AutoMod:
                            return e.autoModType !== y.a.MessageRejectedPrompt || this.props.isCurrentUserModerator && this.props.showAutoModActions ? a.createElement(H, {
                                channelID: this.props.channelID,
                                message: e,
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                showModerationIcons: this.props.showModerationIcons,
                                currentUserLogin: this.props.currentUserLogin
                            }) : null;
                        case y.b.ModerationAction:
                            return this.props.isCurrentUserModerator && this.props.showModerationActions ? a.createElement($, {
                                moderationActionEvent: e
                            }) : null;
                        case y.b.Connected:
                            return a.createElement(w._4, {
                                className: "chat-line__status",
                                "data-a-target": "chat-welcome-message"
                            }, a.createElement(w.O, {
                                type: w._41.Span
                            }, Object(r.d)("Welcome to the chat room!", "ChatLine")));
                        case y.b.Disconnected:
                            return e.reason ? a.createElement(w._4, {
                                className: "chat-line__status"
                            }, a.createElement(w.O, {
                                type: w._41.Span
                            }, Object(r.d)("You have been disconnected from chat for the following reason: {reason}", {
                                reason: e.reason
                            }, "ChatLine"))) : a.createElement(w._4, {
                                className: "chat-line__status"
                            }, a.createElement(w.O, {
                                type: w._41.Span
                            }, Object(r.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                        case y.b.Hosted:
                            var t = null;
                            return t = e.isAutohost ? Object(r.d)("{host} is now auto hosting you for up to {viewerCount, number} viewers.", {
                                host: e.hostingChannel,
                                viewerCount: e.viewerCount
                            }, "ChatLine") : e.viewerCount <= 2 ? Object(r.d)("{host} is now hosting you.", {
                                host: e.hostingChannel
                            }, "ChatLine") : Object(r.d)("{host} is now hosting you for up to {viewerCount, number} viewers.", {
                                host: e.hostingChannel,
                                viewerCount: e.viewerCount
                            }, "ChatLine"), a.createElement(w._4, {
                                className: "chat-line__status"
                            }, a.createElement(w.O, {
                                type: w._41.Span
                            }, t));
                        case y.b.Hosting:
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, a.createElement(w.O, {
                                type: w._41.Span
                            }, Object(r.d)("Now hosting {channel}", {
                                channel: e.hostedChannel
                            }, "ChatLine")));
                        case y.b.Unhost:
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, a.createElement(w.O, {
                                type: w._41.Span
                            }, Object(r.d)("No longer hosting.", "ChatLine")));
                        case y.b.Message:
                            return this.props.onRenderReportChatSent && e.user.userLogin === this.props.currentUserLogin && this.props.onRenderReportChatSent(), a.createElement(x, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e,
                                isDeleted: e.deleted,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            });
                        case y.b.Moderation:
                            return this.props.isCurrentUserModerator ? a.createElement(w._4, {
                                className: "chat-line__moderation"
                            }, Object(v.l)(e)) : null;
                        case y.b.Subscription:
                            return a.createElement(w._4, {
                                className: "chat-line__subscribe"
                            }, Object(v.s)(e));
                        case y.b.SubGift:
                            return a.createElement(w._4, {
                                className: "chat-line__subscribe"
                            }, Object(v.r)(e));
                        case y.b.BitsCharity:
                            return a.createElement(w._4, {
                                className: "chat-line__bits-charity",
                                padding: {
                                    right: 2,
                                    y: .5
                                }
                            }, Object(v.d)(e));
                        case y.b.Resubscription:
                            return a.createElement(Z, {
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                event: e,
                                isDeleted: e.deleted || !1,
                                showTimestamps: this.props.showTimestamps
                            });
                        case y.b.RoomMods:
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.o)(e.moderatorLogins));
                        case y.b.SlowMode:
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.p)(e));
                        case y.b.SubscriberOnlyMode:
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.q)(e));
                        case y.b.FollowerOnlyMode:
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.i)(e));
                        case y.b.EmoteOnlyMode:
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.g)(e));
                        case y.b.Clear:
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.e)());
                        case y.b.Notice:
                            if (function(e) {
                                    return e.msgid in J()
                                }(e)) return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, a.createElement(Q, {
                                message: e
                            }));
                            if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                case ae:
                                case re:
                                    return null
                            }
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.m)(e));
                        case y.b.Info:
                            return a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.j)(e));
                        case y.b.Purchase:
                            var n = e.message.user.isIntl ? e.message.user.userDisplayName + " (" + e.message.user.userLogin + ")" : e.message.user.userDisplayName;
                            return a.createElement(w._4, {
                                className: "chat-line__message--special"
                            }, a.createElement(w._4, {
                                className: "chat-line__status"
                            }, Object(v.n)(n, e.purchase.purchased.title, e.purchase.numCrates)), a.createElement(x, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e.message,
                                isDeleted: !1,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            }), a.createElement(ie, {
                                bitsConfig: e.bitsConfig,
                                purchase: e.purchase
                            }));
                        case y.b.Raid:
                            return a.createElement(q, {
                                message: e
                            });
                        case y.b.Unraid:
                            return a.createElement(w._4, {
                                className: "chat-line__raid"
                            }, Object(v.w)());
                        case y.b.CrateGift:
                            return Object(v.f)(e);
                        case y.b.Ritual:
                            return a.createElement(w._4, {
                                className: "chat-line__ritual"
                            }, a.createElement(ee, {
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                event: e,
                                isDeleted: e.message.deleted,
                                showTimestamps: this.props.showTimestamps
                            }));
                        default:
                            return null
                    }
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return oe
        })
    },
    "4Q9N": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.ProfileImage = "profile_image", e.ProfileBanner = "profile_banner", e.ChannelOfflineImage = "channel_offline_image"
            }(i || (i = {}))
    },
    "4Xyl": function(e, t) {},
    "4d+L": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("Aj/L"),
            o = n("vh75"),
            s = n("TToO"),
            l = n("GiK3"),
            d = n("3zLD"),
            c = n("6sO2"),
            u = n("zgdU"),
            m = n("7vx8"),
            p = n("WIs4"),
            h = n("aMxy"),
            g = n("HZww"),
            f = n("11M/"),
            v = n("l21v"),
            b = n("CSlQ"),
            k = n("+Znq"),
            y = n("+xm8"),
            _ = n("V5M+"),
            C = n("f2i/"),
            S = n("oIkB"),
            E = n("+8VM"),
            N = n("Odds"),
            w = n("F8t6"),
            D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.deleteRoom = function() {
                        t.props.deleteRoom(Object(S.a)({
                            roomID: t.props.roomID
                        })), t.props.onCloseModal()
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._27, {
                        background: N.m.Base,
                        className: "delete-room-modal",
                        position: N._11.Relative
                    }, l.createElement(N._4, {
                        padding: 2,
                        margin: {
                            top: 1
                        }
                    }, l.createElement(N._4, {
                        margin: {
                            bottom: 2
                        }
                    }, l.createElement(N.O, {
                        type: N._41.H4
                    }, Object(c.d)("Delete #{roomName}?", {
                        roomName: this.props.roomName
                    }, "DeleteRoomModal")), l.createElement(N._4, {
                        padding: {
                            top: 1
                        }
                    }, l.createElement(N.O, {
                        type: N._41.Span,
                        color: N.J.Alt2
                    }, Object(c.d)("This will remove all messages in this room permanently from your channel", "DeleteRoomModal")))), l.createElement(N._4, {
                        padding: {
                            top: 2
                        },
                        textAlign: N._37.Right
                    }, l.createElement(N._4, {
                        display: N.P.Inline,
                        margin: {
                            right: .5
                        }
                    }, l.createElement(N.u, {
                        type: N.A.Hollow,
                        onClick: this.props.onCloseModal,
                        "data-test-selector": "cancel-button"
                    }, Object(c.d)("No, keep this room", "DeleteRoomModal"))), l.createElement(N._4, {
                        display: N.P.Inline,
                        margin: {
                            left: .5
                        }
                    }, l.createElement(N.u, {
                        onClick: this.deleteRoom,
                        "data-test-selector": "confirm-button",
                        type: N.A.Alert
                    }, Object(c.d)("Yes, delete this room", "DeleteRoomModal"))))), l.createElement(E.a, {
                        closeOnBackdropClick: !0
                    }))
                }, t
            }(l.Component),
            O = Object(d.compose)(Object(m.a)(w, {
                name: "deleteRoom"
            }))(D);
        var I = Object(i.b)(null, function(e) {
                return Object(a.b)({
                    onCloseModal: _.c
                }, e)
            })(O),
            R = n("tQTt"),
            T = n("hmtx"),
            M = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.toggleMuteSetting = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i;
                            return s.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return e = this.props.data.room.self.isMuted, t = s.__assign({}, Object(S.a)({
                                            isMuted: !e,
                                            roomID: this.props.roomID
                                        }), {
                                            optimisticResponse: {
                                                updateRoomView: {
                                                    __typename: "UpdateRoomViewPayload",
                                                    roomView: {
                                                        isMuted: !e,
                                                        __typename: "RoomView"
                                                    }
                                                }
                                            }
                                        }), this.props.handleClick && this.props.handleClick(), [4, this.props.muteRoom(t)];
                                    case 1:
                                        return n = a.sent(), i = function(e) {
                                            return e.room.self.isMuted = n.data.updateRoomView.roomView.isMuted, e
                                        }, Object(S.d)(R, {
                                            id: this.props.roomID
                                        }, i), [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data.loading) return l.createElement(N._10, {
                        height: 30,
                        width: 160
                    });
                    if (this.props.data.error || !this.props.data.room.owner.self.isChannelMember) return null;
                    var e = Object(c.d)("Mute all notifications", "MuteButton");
                    return this.props.data.room.self.isMuted && (e = Object(c.d)("Unmute all notifications", "MuteButton")), l.createElement(N._2, {
                        alpha: !0,
                        "data-test-selector": "mute-room-button",
                        onClick: this.toggleMuteSetting
                    }, l.createElement(N._27, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, e))
                }, t = s.__decorate([Object(m.a)(R, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                }), Object(m.a)(T, {
                    name: "muteRoom"
                })], t)
            }(l.Component),
            L = n("CIox"),
            x = n("oSFp"),
            A = n("mw/a"),
            F = n("CIWf"),
            j = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.openReportModal = function() {
                        t.props.isLoggedIn ? t.props.onShowModal(x.a, {
                            reportContext: {
                                contentID: t.props.roomID,
                                contentType: A.a.Room,
                                targetUserID: t.props.data.room.owner.id
                            },
                            title: Object(c.d)("Report {roomName}", {
                                roomName: t.props.data.room.name
                            }, "ReportRoomButton")
                        }) : t.props.login()
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return this.props.data.loading ? l.createElement(N._10, null) : this.props.data.error ? l.createElement(N._4, null) : l.createElement(N._2, {
                        alpha: !0,
                        alert: !0,
                        "data-test-selector": "report-room-button-selector",
                        onClick: this.openReportModal
                    }, l.createElement(N._27, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, Object(c.d)("Report", "RoomReportButton")))
                }, t = s.__decorate([Object(m.a)(F, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                })], t)
            }(l.Component),
            B = Object(L.e)(j),
            U = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onRoomNameChange = function(e) {
                        t.props.updateRoomName(e.target.value)
                    }, t.onRoomTopicChange = function(e) {
                        t.props.updateRoomTopic && t.props.updateRoomTopic(e.target.value)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, null, l.createElement(N.U, {
                        label: Object(c.d)("Room name", "RoomLabelsEditor"),
                        error: !!this.props.editRoomNameError,
                        errorMessage: this.props.editRoomNameError
                    }, l.createElement(N._0, {
                        type: N._1.Text,
                        value: this.props.roomName,
                        onChange: this.onRoomNameChange,
                        "data-test-selector": "name-input",
                        placeholder: Object(c.d)("Enter Room name here", "RoomLabelsEditor")
                    })), this.renderRoomTopicEditor())
                }, t.prototype.renderRoomTopicEditor = function() {
                    if (void 0 !== this.props.roomTopic) return l.createElement(N._4, null, l.createElement(N._27, {
                        fullWidth: !0,
                        margin: {
                            top: 1,
                            bottom: 1
                        }
                    }), l.createElement(N.U, {
                        label: Object(c.d)("Room topic", "RoomLabelsEditor"),
                        error: !!this.props.editRoomTopicError,
                        errorMessage: this.props.editRoomTopicError
                    }, l.createElement(N._38, {
                        noResize: !0,
                        value: this.props.roomTopic,
                        onChange: this.onRoomTopicChange,
                        error: !!this.props.editRoomTopicError,
                        "data-test-selector": "topic-input",
                        placeholder: Object(c.d)("What do you want your community to talk about in this room?", "RoomLabelsEditor")
                    })))
                }, t
            }(l.Component),
            P = n("gGMi"),
            V = (n("Jy6n"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isPreviewable: void 0 === t.props.isPreviewable || t.props.isPreviewable,
                        minimumAllowedRole: t.props.minimumAllowedRole || P.b.Everyone
                    }, t.togglePreviewability = function() {
                        t.setState({
                            isPreviewable: !t.state.isPreviewable
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t.toggleSubRole = function() {
                        return t.state.minimumAllowedRole === P.b.Moderator ? t.setMinRoleSub() : t.setMinRoleMod()
                    }, t.toggleAllRole = function() {
                        return t.state.minimumAllowedRole === P.b.Everyone ? t.setMinRoleSub() : t.setMinRoleAll()
                    }, t.setMinRoleMod = function() {
                        t.setState({
                            isPreviewable: !1,
                            minimumAllowedRole: P.b.Moderator
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t.setMinRoleSub = function() {
                        t.setState({
                            isPreviewable: !0,
                            minimumAllowedRole: P.b.Subscriber
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t.setMinRoleAll = function() {
                        t.setState({
                            isPreviewable: !0,
                            minimumAllowedRole: P.b.Everyone
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, null, l.createElement(N._27, {
                        padding: {
                            top: 1,
                            bottom: .5,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(N.O, {
                        type: N._41.Span
                    }, Object(c.d)("Who can chat in this room?", "RoomPermissionsToggle"))), l.createElement(N._27, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            x: .5
                        },
                        display: N.P.Flex,
                        alignItems: N.c.Center
                    }, l.createElement(N.Y, {
                        flexGrow: 1,
                        display: N.P.Flex,
                        alignItems: N.c.Center,
                        className: "room-permissions-toggle__role-name"
                    }, l.createElement("label", {
                        htmlFor: "room-permissions-toggle__mods-permission"
                    }, l.createElement(N.O, {
                        type: N._41.Strong,
                        color: N.J.Alt
                    }, Object(c.d)("Mods", "RoomPermissionsToggle")))), l.createElement(N._43, {
                        id: "room-permissions-toggle__mods-permission",
                        disabled: !0,
                        checked: !0,
                        "data-test-selector": "moderator-role"
                    })), l.createElement(N._27, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            x: .5
                        },
                        display: N.P.Flex,
                        alignItems: N.c.Center
                    }, l.createElement(N.Y, {
                        flexGrow: 1,
                        display: N.P.Flex,
                        alignItems: N.c.Center,
                        className: "room-permissions-toggle__role-name"
                    }, l.createElement("label", {
                        htmlFor: "room-permissions-toggle__subs-permission"
                    }, l.createElement(N.O, {
                        type: N._41.Strong,
                        color: N.J.Alt
                    }, Object(c.d)("Subs", "RoomPermissionsToggle")))), l.createElement(N._43, {
                        id: "room-permissions-toggle__subs-permission",
                        checked: this.state.minimumAllowedRole !== P.b.Moderator,
                        onChange: this.toggleSubRole,
                        "data-test-selector": "subscriber-role"
                    })), l.createElement(N._27, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            x: .5
                        },
                        display: N.P.Flex,
                        alignItems: N.c.Center
                    }, l.createElement(N.Y, {
                        flexGrow: 1,
                        display: N.P.Flex,
                        alignItems: N.c.Center,
                        className: "room-permissions-toggle__role-name"
                    }, l.createElement("label", {
                        htmlFor: "room-permissions-toggle__everyone-permission"
                    }, l.createElement(N.O, {
                        type: N._41.Strong,
                        color: N.J.Alt
                    }, Object(c.d)("Everyone", "RoomPermissionsToggle")))), l.createElement(N._43, {
                        id: "room-permissions-toggle__everyone-permission",
                        checked: this.state.minimumAllowedRole === P.b.Everyone,
                        onChange: this.toggleAllRole,
                        "data-test-selector": "everyone-role"
                    })), l.createElement(N._4, {
                        padding: {
                            x: .5
                        }
                    }, l.createElement(N._27, {
                        borderTop: !0,
                        margin: {
                            top: .5,
                            bottom: 1,
                            x: 1
                        }
                    })), l.createElement(N._27, {
                        display: N.P.Flex,
                        justifyContent: N._3.Between,
                        alignItems: N.c.Center,
                        padding: {
                            bottom: .5,
                            x: 1
                        },
                        margin: {
                            bottom: 1,
                            x: .5
                        }
                    }, l.createElement(N.W, {
                        gutterSize: N.X.None
                    }, l.createElement(N.K, {
                        cols: 8
                    }, l.createElement(N.O, null, Object(c.d)("Allow others to read chat but not send messages", "RoomPermissionsToggle"))), l.createElement(N.K, {
                        cols: 4
                    }, l.createElement(N._4, {
                        display: N.P.Flex,
                        fullHeight: !0,
                        justifyContent: N._3.Center,
                        flexDirection: N.R.Column,
                        alignContent: N.b.End,
                        alignItems: N.c.End
                    }, this.renderPreviewabilityToggle())))))
                }, t.prototype.renderPreviewabilityToggle = function() {
                    var e = this.state.minimumAllowedRole !== P.b.Subscriber,
                        t = l.createElement(N._43, {
                            disabled: e,
                            checked: this.state.isPreviewable,
                            onChange: this.togglePreviewability,
                            "data-test-selector": "previewability-toggle"
                        });
                    return this.state.minimumAllowedRole === P.b.Moderator && (t = l.createElement(N._44, {
                        direction: N._46.Left,
                        width: 100,
                        label: Object(c.d)("This room is only for moderators", "RoomPermissionsToggle")
                    }, t)), t
                }, t
            }(l.Component)),
            H = {
                NAME_LENGTH_INVALID: function(e) {
                    var t = e.maxChars,
                        n = e.minChars;
                    return Object(c.d)("The name must be between {minChars} and {maxChars} characters.", {
                        minChars: n,
                        maxChars: t
                    }, "RoomErrorCodes")
                },
                SLOW_MODE_ENFORCEMENT_FAILED: function(e) {
                    var t = e.remainingDurationSeconds;
                    return Object(c.d)("This room is in slow mode and you are sending messages too quickly. You will be able to talk again in {remainingDurationSeconds} seconds.", {
                        remainingDurationSeconds: t
                    }, "RoomErrorCodes")
                },
                TOPIC_LENGTH_INVALID: function(e) {
                    var t = e.maxChars;
                    return Object(c.d)("The topic may not exceed {maxChars} characters.", {
                        maxChars: t
                    }, "RoomErrorCodes")
                },
                USER_CHAT_TIMED_OUT: function(e) {
                    var t = e.remainingDurationSeconds;
                    return Object(c.d)("You are timed out and cannot chat for {remainingDurationSeconds} seconds.", {
                        remainingDurationSeconds: t
                    }, "RoomErrorCodes")
                }
            },
            W = {
                AUTO_MOD_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("Your message contains inappropriate content.", "RoomErrorCodes")
                },
                EMOTE_ONLY_MODE_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("This Room is in emote-only mode and your message does not contain only emoticons.", "RoomErrorCodes")
                },
                NAME_CONTAINS_INVALID_CHARACTERS: function() {
                    return Object(c.d)("The name contains invalid characters.", "RoomErrorCodes")
                },
                NAME_NOT_UNIQUE: function() {
                    return Object(c.d)("There is already a room with this name.", "RoomErrorCodes")
                },
                NAME_INAPPROPRIATE: function() {
                    return Object(c.d)("The name contains inappropriate content.", "RoomErrorCodes")
                },
                R9K_MODE_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("This Room is in R9K mode and your message is not unique enough.", "RoomErrorCodes")
                },
                RATE_LIMIT_FAILED: function() {
                    return Object(c.d)("Your message was not sent because you are sending messages too quickly.", "RoomErrorCodes")
                },
                SPAM_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("This message has been flagged as spam.", "RoomErrorCodes")
                },
                TOPIC_INAPPROPRIATE: function() {
                    return Object(c.d)("The topic contains inappropriate content.", "RoomErrorCodes")
                },
                USER_SUSPENDED: function() {
                    return Object(c.d)("Your account has been suspended.", "RoomErrorCodes")
                }
            };

        function G(e, t) {
            return e in W ? W[e]() : e in H && t ? H[e](t) : Object(c.d)("Error", "RoomErrorCodes")
        }
        var q = /^([^\u0000-\u007F]|[a-z0-9_]|-)*$/,
            z = 25,
            $ = 3,
            J = 100;

        function Q(e) {
            return q.test(e)
        }

        function Y(e) {
            return e.length > z
        }

        function K(e) {
            return e.length <= z && e.length >= $
        }

        function Z(e) {
            return e.length <= J
        }
        var X = n("kvxA"),
            ee = (n("DY3c"), n("U+9K")),
            te = {
                OPTIONS: "OPTIONS",
                PERMISSIONS: "PERMISSIONS",
                LABELS: "LABELS"
            },
            ne = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentView: te.OPTIONS,
                        isSaveButtonStateSuccess: !1
                    }, t.updatePermissions = function(e) {
                        t.setState({
                            updatedPermissions: e,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.updateRoomName = function(e) {
                        var n;
                        if (Q(e = e.toLowerCase())) {
                            if (Y(e)) {
                                n = G("NAME_LENGTH_INVALID", {
                                    maxChars: z,
                                    minChars: $
                                })
                            }
                        } else n = G("NAME_CONTAINS_INVALID_CHARACTERS");
                        t.setState({
                            updatedRoomName: e,
                            editRoomNameError: n,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.updateRoomTopic = function(e) {
                        var n;
                        Z(e) || (n = G("TOPIC_LENGTH_INVALID", {
                            maxChars: J
                        }));
                        t.setState({
                            updatedRoomTopic: e,
                            editRoomTopicError: n,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.setOptionsView = function() {
                        t.setState({
                            editRoomNameError: void 0,
                            editRoomTopicError: void 0,
                            currentView: te.OPTIONS,
                            isSaveButtonStateSuccess: !1,
                            updatedRoomName: void 0,
                            updatedRoomTopic: void 0,
                            updatedPermissions: void 0
                        })
                    }, t.setPermissionsView = function() {
                        t.setState({
                            currentView: te.PERMISSIONS,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.setLabelsView = function() {
                        t.setState({
                            currentView: te.LABELS,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.saveUpdate = function() {
                        if (void 0 !== t.state.updatedRoomName || void 0 !== t.state.updatedRoomTopic || void 0 !== t.state.updatedPermissions)
                            if (t.state.updatedRoomName && !K(t.state.updatedRoomName)) {
                                var e = G("NAME_LENGTH_INVALID", {
                                    maxChars: z,
                                    minChars: $
                                });
                                t.setState({
                                    editRoomNameError: e
                                })
                            } else if (t.state.updatedRoomTopic && !Z(t.state.updatedRoomTopic)) {
                            e = G("TOPIC_LENGTH_INVALID", {
                                maxChars: J
                            });
                            t.setState({
                                editRoomTopicError: e
                            })
                        } else {
                            var n = s.__assign({
                                roomID: t.props.roomID,
                                name: t.state.updatedRoomName,
                                topic: t.state.updatedRoomTopic
                            }, t.state.updatedPermissions);
                            t.props.updateRoom(Object(S.a)(n)).then(function(e) {
                                if (e.data.updateRoom.error) {
                                    var n = e.data.updateRoom.error,
                                        i = n.code,
                                        a = n.minLength,
                                        r = G(i, {
                                            maxChars: n.maxLength,
                                            minChars: a
                                        });
                                    i.includes("NAME") ? t.setState({
                                        editRoomNameError: r
                                    }) : i.includes("TOPIC") && t.setState({
                                        editRoomTopicError: r
                                    })
                                } else {
                                    Object(S.d)(X, {
                                        id: t.props.roomID
                                    }, function(t) {
                                        return t.room.name = e.data.updateRoom.room.name, t.room.topic = e.data.updateRoom.room.topic, t.room.isPreviewable = e.data.updateRoom.room.isPreviewable, t.room.minimumAllowedRole = e.data.updateRoom.room.minimumAllowedRole, t
                                    }), t.setState({
                                        editRoomNameError: void 0,
                                        editRoomTopicError: void 0,
                                        isSaveButtonStateSuccess: !0,
                                        isTopicFocused: !1,
                                        updatedRoomName: void 0,
                                        updatedRoomTopic: void 0,
                                        updatedPermissions: void 0
                                    })
                                }
                            })
                        }
                    }, t.openDeleteRoomModal = function() {
                        t.props.onShowModal(I, {
                            roomID: t.props.roomID,
                            roomName: t.props.data.room.name
                        })
                    }, t.onRoomTopicChange = function(e) {
                        t.updateRoomTopic(e.target.value)
                    }, t.focusTopic = function() {
                        t.setState({
                            isSaveButtonStateSuccess: !1,
                            isTopicFocused: !0
                        })
                    }, t.blurTopic = function() {
                        t.setState({
                            updatedRoomTopic: void 0,
                            editRoomTopicError: void 0,
                            isSaveButtonStateSuccess: !1,
                            isTopicFocused: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data.loading) return l.createElement(N._10, null);
                    if (this.props.data.error || !this.props.data.room) return l.createElement(N._4, null);
                    var e;
                    switch (this.state.currentView) {
                        case te.OPTIONS:
                            e = this.getOptionsView();
                            break;
                        case te.PERMISSIONS:
                            e = this.getPermissionsView();
                            break;
                        case te.LABELS:
                            e = this.getLabelsView();
                            break;
                        default:
                            e = this.getOptionsView()
                    }
                    return l.createElement(N._4, null, e)
                }, t.prototype.getOptionsView = function() {
                    return this.props.sessionUser && this.props.sessionUser.id.toString() === this.props.data.room.owner.id ? this.getBroadcasterOptionsView() : this.getNonBroadcasterOptionsView()
                }, t.prototype.getBroadcasterOptionsView = function() {
                    return l.createElement(N._4, {
                        padding: {
                            y: .5
                        }
                    }, this.getEditLabelsSection(), l.createElement(N.Y, null, l.createElement(N._4, {
                        display: N.P.Flex
                    }, l.createElement(N._2, {
                        alpha: !0,
                        onClick: this.setPermissionsView,
                        "data-test-selector": "permissions-toggle"
                    }, l.createElement(N._27, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        },
                        display: N.P.Flex,
                        justifyContent: N._3.Between
                    }, Object(c.d)("Permissions", "RoomDetails"), l.createElement(N._4, {
                        display: N.P.Flex
                    }, l.createElement(N.O, {
                        color: N.J.Alt2
                    }, P.a[this.props.data.room.minimumAllowedRole]), l.createElement(N._27, {
                        className: "room-details__open-edit",
                        color: N.J.Link,
                        margin: {
                            left: .5
                        }
                    }, l.createElement(N._17, {
                        asset: N._18.GlyphArrDown,
                        height: 13
                    }))))))), l.createElement(N._2, {
                        alert: !0,
                        alpha: !0,
                        onClick: this.openDeleteRoomModal,
                        "data-test-selector": "delete-button"
                    }, l.createElement(N._27, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        }
                    }, Object(c.d)("Delete", "RoomDetails"))), l.createElement(N._4, {
                        padding: {
                            x: 1
                        }
                    }, l.createElement(N._27, {
                        borderTop: !0,
                        margin: {
                            y: .5,
                            x: .5
                        }
                    })), l.createElement(M, {
                        roomID: this.props.roomID
                    }))
                }, t.prototype.getNonBroadcasterOptionsView = function() {
                    return l.createElement(N._4, {
                        padding: {
                            y: .5
                        }
                    }, this.props.forActiveRoom && !!this.props.data.room.topic.length && l.createElement(N._4, {
                        padding: {
                            bottom: .5,
                            top: 1,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(N.O, {
                        className: "room-details__topic-description",
                        color: N.J.Alt2
                    }, this.props.data.room.topic), l.createElement(N._27, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })), this.props.data.room.owner.self.isChannelMember && l.createElement(M, {
                        roomID: this.props.roomID
                    }), l.createElement(B, {
                        roomID: this.props.roomID,
                        isLoggedIn: this.props.isLoggedIn,
                        login: this.props.login,
                        onShowModal: this.props.onShowModal
                    }))
                }, t.prototype.getEditLabelsSection = function() {
                    var e = Object(c.d)("Edit name or topic", "RoomDetails");
                    this.props.forActiveRoom && (e = Object(c.d)("Edit name", "RoomDetails"));
                    var t = l.createElement(N.Y, null, l.createElement(N._2, {
                        alpha: !0,
                        onClick: this.setLabelsView,
                        "data-test-selector": "edit-labels"
                    }, l.createElement(N._27, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        },
                        display: N.P.Flex,
                        justifyContent: N._3.Between
                    }, e, l.createElement(N._4, {
                        display: N.P.Flex
                    }, l.createElement(N._27, {
                        className: "room-details__open-edit",
                        color: N.J.Link,
                        margin: {
                            left: .5
                        }
                    }, l.createElement(N._17, {
                        asset: N._18.GlyphArrDown,
                        height: 13
                    }))))));
                    return this.props.forActiveRoom ? l.createElement(N._4, null, l.createElement(N._4, {
                        padding: {
                            top: 1,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(N.Y, {
                        position: N._11.Relative
                    }, this.getTopicField()), !this.state.isTopicHovered && l.createElement(N._27, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })), l.createElement(N._4, {
                        padding: {
                            top: .5
                        }
                    }, t)) : t
                }, t.prototype.getLabelsView = function() {
                    var e = void 0 !== this.state.updatedRoomName ? this.state.updatedRoomName : this.props.data.room.name,
                        t = void 0 !== this.state.updatedRoomTopic ? this.state.updatedRoomTopic : this.props.data.room.topic,
                        n = Object(c.d)("Edit name or topic", "RoomDetailsReturn");
                    return this.props.forActiveRoom && (n = Object(c.d)("Edit name", "RoomDetailsReturn")), l.createElement(N._4, null, l.createElement(N.Y, null, l.createElement(N._4, {
                        display: N.P.Flex,
                        padding: {
                            y: .5
                        }
                    }, l.createElement(N._2, {
                        alpha: !0,
                        onClick: this.setOptionsView
                    }, l.createElement(N._27, {
                        padding: {
                            y: .5
                        },
                        margin: {
                            left: 1
                        },
                        display: N.P.Flex
                    }, l.createElement(N._27, {
                        className: "room-details__close-edit",
                        color: N.J.Link,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(N._17, {
                        asset: N._18.GlyphArrDown,
                        height: 13
                    })), n)))), l.createElement(N._4, {
                        padding: {
                            x: .5
                        }
                    }, l.createElement(N._27, {
                        borderTop: !0,
                        margin: {
                            x: 1
                        }
                    })), l.createElement(N._4, {
                        padding: {
                            x: 1,
                            y: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(U, {
                        editRoomNameError: this.state.editRoomNameError,
                        editRoomTopicError: this.props.forActiveRoom ? void 0 : this.state.editRoomTopicError,
                        roomName: e,
                        updateRoomName: this.updateRoomName,
                        roomTopic: this.props.forActiveRoom ? void 0 : t,
                        updateRoomTopic: this.updateRoomTopic
                    })), l.createElement(N._27, {
                        margin: {
                            y: 1,
                            left: 1,
                            right: 3
                        },
                        padding: {
                            left: .5,
                            right: 5
                        }
                    }, this.getSaveButton()))
                }, t.prototype.getPermissionsView = function() {
                    return l.createElement(N._4, null, l.createElement(N.Y, null, l.createElement(N._4, {
                        display: N.P.Flex,
                        padding: {
                            y: .5
                        }
                    }, l.createElement(N._2, {
                        alpha: !0,
                        onClick: this.setOptionsView
                    }, l.createElement(N._27, {
                        padding: {
                            y: .5
                        },
                        margin: {
                            left: 1
                        },
                        display: N.P.Flex
                    }, l.createElement(N._27, {
                        className: "room-details__close-edit",
                        color: N.J.Link,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(N._17, {
                        asset: N._18.GlyphArrDown,
                        height: 13
                    })), Object(c.d)("Permissions", "RoomDetailsReturn"))))), l.createElement(N._4, {
                        padding: {
                            x: .5
                        }
                    }, l.createElement(N._27, {
                        borderTop: !0,
                        margin: {
                            x: 1
                        }
                    })), l.createElement(V, {
                        isPreviewable: this.props.data.room.isPreviewable,
                        minimumAllowedRole: this.props.data.room.minimumAllowedRole,
                        updatePermissions: this.updatePermissions
                    }), l.createElement(N._27, {
                        margin: {
                            y: 1,
                            left: 1
                        },
                        padding: {
                            left: .5
                        }
                    }, this.getSaveButton()))
                }, t.prototype.getSaveButton = function() {
                    return l.createElement(N.u, {
                        onClick: this.saveUpdate,
                        state: this.state.isSaveButtonStateSuccess ? N.z.Success : N.z.Default,
                        type: this.state.isSaveButtonStateSuccess ? N.A.Text : N.A.Default
                    }, Object(c.d)("Save", "RoomDetails"))
                }, t.prototype.getTopicField = function() {
                    var e, t = void 0 === this.state.updatedRoomTopic ? this.props.data.room.topic : this.state.updatedRoomTopic,
                        n = Object(c.d)("What do you want your community to talk about in this room?", "RoomDetails");
                    return e = this.state.isTopicFocused ? l.createElement(N._38, {
                        autoFocus: !0,
                        noResize: !0,
                        onChange: this.onRoomTopicChange,
                        value: t,
                        placeholder: n
                    }) : l.createElement(N.O, {
                        className: "room-details__topic-description",
                        color: N.J.Alt2,
                        italic: !t
                    }, t || n, l.createElement(N.M, {
                        onClick: this.focusTopic
                    }, l.createElement(N._4, {
                        padding: {
                            left: .5
                        },
                        className: "room-details__edit-topic"
                    }, Object(c.d)("Edit", "RoomDetails")))), l.createElement("div", null, e, this.state.editRoomTopicError && l.createElement(N.O, {
                        color: N.J.Error
                    }, this.state.editRoomTopicError), this.state.isTopicFocused && l.createElement(N._4, {
                        display: N.P.Flex,
                        justifyContent: N._3.End
                    }, !this.state.isSaveButtonStateSuccess && l.createElement(N._4, {
                        padding: {
                            top: .5
                        }
                    }, l.createElement(N.u, {
                        onClick: this.blurTopic,
                        type: N.A.Text
                    }, Object(c.d)("Cancel", "RoomDetails"))), l.createElement(N._4, {
                        padding: {
                            top: .5,
                            left: 1
                        }
                    }, this.getSaveButton())))
                }, t = s.__decorate([Object(m.a)(X, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                }), Object(m.a)(ee, {
                    name: "updateRoom"
                })], t)
            }(l.Component);
        var ie = Object(i.b)(function(e) {
            return {
                sessionUser: Object(r.c)(e),
                isLoggedIn: Object(r.d)(e)
            }
        }, function(e) {
            return Object(a.b)({
                login: function() {
                    return Object(C.f)(y.a.ReportChannel)
                },
                onShowModal: _.d
            }, e)
        })(ne);

        function ae(e, t) {
            return e.minimumAllowedRole === P.b.Everyone ? N._18.Hash : t ? N._18.Unlock : N._18.Lock
        }
        var re, oe = n("P7hg"),
            se = (n("Dr46"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading) return l.createElement(N.O, {
                        color: N.J.Alt,
                        "data-test-selector": "placeholder-text"
                    }, this.props.roomName);
                    if (this.props.data.error) return l.createElement(N._4, null);
                    var e = {
                        isPreviewable: this.props.data.room.isPreviewable,
                        minimumAllowedRole: this.props.data.room.minimumAllowedRole
                    };
                    return l.createElement(k.a, null, l.createElement("div", null, l.createElement(N._27, {
                        display: N.P.Flex,
                        alignItems: N.c.Center,
                        className: "active-room-button"
                    }, l.createElement(N._4, {
                        className: "active-room-button__states",
                        display: N.P.Flex
                    }, l.createElement(N._17, {
                        height: 14,
                        asset: ae(e, this.props.data.room.self.permissions.sendMessages)
                    })), l.createElement(N.O, {
                        color: N.J.Alt
                    }, this.props.data.room.name), l.createElement(N._4, {
                        className: "room-details__close-edit active-room-button__cch-dropdown"
                    }, l.createElement(N._17, {
                        asset: N._18.AngleRight,
                        type: N._19.Alt,
                        height: 11
                    })))), l.createElement(N.p, {
                        direction: N.q.BottomLeft,
                        size: N.r.Medium
                    }, l.createElement(ie, {
                        forActiveRoom: !0,
                        roomID: this.props.roomID
                    })))
                }, t = s.__decorate([Object(b.d)("ActiveRoomButton"), Object(m.a)(oe, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                })], t)
            }(l.Component)),
            le = n("Bh5x");
        n("4Xyl");
        ! function(e) {
            e[e.BadPermissions = 0] = "BadPermissions", e[e.Banned = 1] = "Banned", e[e.Deleted = 2] = "Deleted", e[e.NoPreview = 3] = "NoPreview"
        }(re || (re = {}));
        var de, ce = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && this.props.data.loading ? l.createElement(N._10, {
                        lineCount: 4,
                        width: 160
                    }) : this.props.data && this.props.data.error ? l.createElement(N._4, null) : l.createElement(N._27, {
                        borderLeft: !0,
                        fullHeight: !0,
                        fullWidth: !0,
                        className: "invalid-room-view"
                    }, l.createElement(N._4, {
                        display: N.P.Flex,
                        justifyContent: N._3.Center,
                        padding: 1
                    }, l.createElement("img", {
                        src: "https://static-cdn.jtvnw.net/emoticons/v1/86/3.0",
                        width: "54",
                        height: "45"
                    })), this.getCopy(), l.createElement(N._4, {
                        textAlign: N._37.Center,
                        padding: {
                            y: 3,
                            x: 2
                        }
                    }, l.createElement(N.u, {
                        type: N.A.Hollow,
                        onClick: this.props.handleStreamChatClick
                    }, Object(c.d)("Back to Stream Chat", "InvalidRoomView"))))
                }, t.prototype.getCopy = function() {
                    var e = null,
                        t = Object(c.d)("You don't have to go home, but you can't stay here. This room has been deleted.", "InvalidRoomView"),
                        n = Object(c.d)("The broadcaster's settings mean you can't participate in this room.", "InvalidRoomView");
                    switch (this.props.type) {
                        case re.Deleted:
                            e = l.createElement(N.O, null, t);
                            break;
                        case re.BadPermissions:
                            e = l.createElement(N.O, null, n);
                            break;
                        case re.Banned:
                            e = l.createElement(N.O, null, Object(c.d)("You are banned and can't rejoin Rooms", "InvalidRoomView"));
                            break;
                        case re.NoPreview:
                            var i = this.props.data.room.owner.displayName,
                                a = this.props.data.room.name,
                                r = Object(c.d)("You are viewing {displayName}’s #{roomName}. Chat participation is restricted to channel subscribers to chat or preview.", {
                                    displayName: i,
                                    roomName: a
                                }, "InvalidRoomView");
                            e = l.createElement(N.O, null, r);
                            break;
                        default:
                            e = l.createElement(N.O, null, n)
                    }
                    return l.createElement(N._4, {
                        textAlign: N._37.Center
                    }, l.createElement(N._4, {
                        padding: {
                            y: 1,
                            x: 2
                        }
                    }, e))
                }, t = s.__decorate([Object(m.a)(le, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    },
                    skip: function(e) {
                        return e.type !== re.NoPreview
                    }
                }), Object(b.d)("InvalidRoomView")], t)
            }(l.Component),
            ue = n("QKs+"),
            me = n("ass3"),
            pe = n("uekS");
        ! function(e) {
            e[e.RoomMessageEvent = 0] = "RoomMessageEvent", e[e.ModerationEvent = 1] = "ModerationEvent", e[e.SystemMessageEvent = 2] = "SystemMessageEvent", e[e.DeletedMessageEvent = 3] = "DeletedMessageEvent"
        }(de || (de = {}));
        var he = n("X7fs"),
            ge = n("INp2");

        function fe(e) {
            return s.__assign({}, e, {
                kind: de.RoomMessageEvent
            })
        }

        function ve(e) {
            return {
                kind: de.SystemMessageEvent,
                id: Object(ge.a)("roomSystemMessage"),
                text: e
            }
        }
        var be = 900,
            ke = 300,
            ye = 100,
            _e = function() {
                function e(e, t, n, i, a, r) {
                    void 0 === a && (a = ke), void 0 === r && (r = be);
                    var o = this;
                    this.roomID = e, this.channelID = t, this.onBufferUpdate = n, this.onInitialLoad = i, this.maxVisibleSize = a, this.maxBufferSize = r, this.consumeRoomEvent = function(e, t, n) {
                        if (o.processRoomEvent(e)) {
                            var i = !n && o.offset + o.maxVisibleSize === o.buffer.length,
                                a = !n && o.offset + o.maxVisibleSize >= o.buffer.length;
                            if (o.buffer.length >= o.maxBufferSize && i) {
                                var r = o.buffer.shift();
                                o.eventMap.delete(r.id), o._hasOlderLeft = !0, i = !1, o.oldestCursor = void 0;
                                for (var s = 0, l = o.buffer; s < l.length; s++) {
                                    var d = l[s];
                                    if (d && o.eventMap.get(d.id)) {
                                        o.oldestCursor = o.eventMap.get(d.id);
                                        break
                                    }
                                }
                            }
                            o.buffer.length < o.maxBufferSize && (o.addRoomEventToBuffer(e, t, n), o._isBulkLoad = !1, a && (i && (o.offset = o.offset + 1), o._isDirty = !0, o.onBufferUpdate()))
                        }
                    }, this.loadNewest = function() {
                        o._hasNewerLeft ? o.resetBufferState() : o.offset = Math.max(o.buffer.length - o.maxVisibleSize, 0), o._isDirty = !0, o.onBufferUpdate()
                    }, this.loadOlder = function() {
                        return s.__awaiter(o, void 0, void 0, function() {
                            return s.__generator(this, function(e) {
                                return this.offset > 0 ? (this.offset = Math.max(this.offset - ye, 0), this._isBulkLoad = !0, this._isDirty = !0, this.onBufferUpdate(), [2]) : [2, this.loadMore(!0)]
                            })
                        })
                    }, this.loadNewer = function() {
                        return s.__awaiter(o, void 0, void 0, function() {
                            return s.__generator(this, function(e) {
                                if (this.newestCursor) {
                                    if (this.offset + this.maxVisibleSize < this.buffer.length) return this.offset = Math.min(this.offset + ye, this.buffer.length - this.maxVisibleSize), this._isBulkLoad = !0, this._isDirty = !0, this.onBufferUpdate(), [2];
                                    if (this._hasNewerLeft) return [2, this.loadMore(!1)]
                                }
                                return [2]
                            })
                        })
                    }, this.resetBufferState = function() {
                        o.buffer = [], o.eventMap = new Map, o.offset = 0, o._isDirty = !1, o._hasNewerLeft = !0, o._hasOlderLeft = !0, o.newestCursor = void 0, o.oldestCursor = void 0
                    }, this.loadMore = function(e) {
                        return Object(pe.d)(Object(pe.c)(c.o.apollo.client.link, {
                            query: he,
                            variables: {
                                roomID: o.roomID,
                                channelID: o.channelID,
                                last: e ? ye : void 0,
                                before: e ? o.oldestCursor : void 0,
                                first: e ? void 0 : ye,
                                after: e ? void 0 : o.newestCursor
                            }
                        })).then(function(t) {
                            if (t.data && t.data.room.messages) {
                                var n = !1;
                                if (t.data.room.messages.edges.forEach(function(t) {
                                        if (!o.eventMap.has(t.node.id)) {
                                            var i = fe(t.node),
                                                a = o.processRoomEvent(i);
                                            a && (n = !0, o.addRoomEventToBuffer(a, t.cursor, e), o._isBulkLoad = !0)
                                        }
                                    }), e && o._hasOlderLeft && t.data.room.messages.edges.length < ye && (o._hasOlderLeft = !1, n = !0), !e && o._hasNewerLeft && t.data.room.messages.edges.length < ye && (o._hasNewerLeft = !1, n = !0), o.buffer.length > o.maxBufferSize) {
                                    if (e) {
                                        for (var i = 0, a = o.buffer.splice(o.maxBufferSize, o.buffer.length - o.maxBufferSize); i < a.length; i++) {
                                            l = a[i];
                                            o.eventMap.delete(l.id)
                                        }
                                        o._hasNewerLeft = !0, o.newestCursor = void 0;
                                        for (l = 0; l < o.buffer.length; l++) {
                                            if ((u = o.buffer[o.buffer.length - l - 1]) && o.eventMap.get(u.id)) {
                                                o.newestCursor = o.eventMap.get(u.id);
                                                break
                                            }
                                        }
                                    } else {
                                        for (var r = 0, s = o.buffer.splice(0, o.buffer.length - o.maxBufferSize); r < s.length; r++) {
                                            var l = s[r];
                                            o.eventMap.delete(l.id)
                                        }
                                        o._hasOlderLeft = !0, o.oldestCursor = void 0;
                                        for (var d = 0, c = o.buffer; d < c.length; d++) {
                                            var u;
                                            if ((u = c[d]) && o.eventMap.get(u.id)) {
                                                o.oldestCursor = o.eventMap.get(u.id);
                                                break
                                            }
                                        }
                                    }
                                }
                                n && (e || (o.offset = Math.max(o.buffer.length - o.maxVisibleSize, 0)), o._isDirty = !0, o.onBufferUpdate())
                            }
                            o._loadedOnce || (o._loadedOnce = !0, o.onInitialLoad())
                        })
                    }, this.addRoomEventToBuffer = function(e, t, n) {
                        t || (t = n ? o.oldestCursor : o.newestCursor), o.eventMap.has(e.id) || (n ? (o.oldestCursor = t, o.buffer.unshift(e)) : (o.newestCursor = t, o.buffer.push(e)), o.oldestCursor = o.oldestCursor || o.newestCursor, o.newestCursor = o.newestCursor || o.oldestCursor), o.eventMap.set(e.id, t || null)
                    }, this.processRoomEvent = function(e) {
                        switch (e.kind) {
                            case de.ModerationEvent:
                                for (var t = new Date(e.purgeAfter), n = 0; n < o.buffer.length; n++) {
                                    var i = o.buffer[n];
                                    i.kind === de.RoomMessageEvent && i.sender.id === e.userID && t <= new Date(i.sentAt) && (o.buffer[n] = s.__assign({}, i, {
                                        deletedAt: (new Date).toISOString()
                                    }), o._isDirty = !0, o.onBufferUpdate())
                                }
                                return null;
                            case de.DeletedMessageEvent:
                                var a = o.buffer.findIndex(function(t) {
                                    return t.kind === de.RoomMessageEvent && t.id === e.id
                                });
                                return a && (o.buffer[a] = s.__assign({}, o.buffer[a], {
                                    deletedAt: (new Date).toISOString()
                                }), o._isDirty = !0, o.onBufferUpdate()), null;
                            case de.RoomMessageEvent:
                                return e.sender.id && o.blockedUsers.has(e.sender.id) ? null : e;
                            case de.SystemMessageEvent:
                                return e;
                            default:
                                return null
                        }
                    }, this.resetBufferState(), this._loadedOnce = !1, this.blockedUsers = new Set
                }
                return e.prototype.toArray = function() {
                    this._isDirty = !1;
                    var e = Math.min(this.offset + this.maxVisibleSize, this.buffer.length);
                    return this.buffer.slice(this.offset, e)
                }, Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "isBulkLoad", {
                    get: function() {
                        return this._isBulkLoad
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "hasNewerLeft", {
                    get: function() {
                        return !!this.newestCursor && (this._hasNewerLeft || this.offset + this.maxVisibleSize < this.buffer.length)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "hasOlderLeft", {
                    get: function() {
                        return this._hasOlderLeft || this.offset > 0
                    },
                    enumerable: !0,
                    configurable: !0
                }), e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e
            }(),
            Ce = n("mwvJ"),
            Se = n("3KVC"),
            Ee = {
                EMOTE: "Emote",
                MENTION: "User"
            },
            Ne = "/me ";
        var we = function() {
                return function(e, t, n) {
                    var i = this;
                    this.roomID = e, this.channelID = t, this.consumeRoomEvent = n, this.unsubscribe = function() {
                        i.unsubscribeChatRoomTopic && i.unsubscribeChatRoomTopic(), i.unsubscribeChatRoomsChanneTopic && i.unsubscribeChatRoomsChanneTopic()
                    }, this.unsubscribeChatRoomTopic = c.k.subscribe({
                        topic: Object(g.d)(this.roomID),
                        onMessage: function(e) {
                            var t, n, a, r, o, s = (t = e.data, n = t.message, a = t.cursor, r = n.content.fragments.map(function(e) {
                                var t = {
                                        text: e.text,
                                        content: null,
                                        __typename: "RoomMessageFragment"
                                    },
                                    n = e.emoticon,
                                    i = e.mention,
                                    a = e.text;
                                return n && (t.content = {
                                    emoteID: n.id,
                                    setID: n.set_id,
                                    token: a,
                                    __typename: Ee.EMOTE
                                }), i && (t.content = {
                                    id: i.user_id,
                                    login: i.login,
                                    displayName: i.display_name,
                                    __typename: Ee.MENTION
                                }), t
                            }), o = n.sender.badges.map(function(e) {
                                return {
                                    setID: e.id,
                                    version: e.version,
                                    __typename: "Badge"
                                }
                            }), {
                                cursor: "" + a,
                                node: {
                                    id: n.id,
                                    deletedAt: null,
                                    sentAt: n.sent_at,
                                    content: {
                                        text: n.content.text,
                                        fragments: r,
                                        __typename: "RoomMessageContent"
                                    },
                                    sender: {
                                        id: n.sender.user_id,
                                        login: n.sender.login,
                                        chatColor: n.sender.chat_color,
                                        displayName: n.sender.display_name,
                                        displayBadges: o,
                                        __typename: "User"
                                    },
                                    __typename: "RoomMessage"
                                },
                                __typename: "RoomMessageEdge"
                            });
                            switch (e.type) {
                                case h.PubsubMessageType.ChatRoomMessageCreated:
                                    i.consumeRoomEvent(fe(s.node), s.cursor);
                                    break;
                                case h.PubsubMessageType.ChatRoomMessageDeleted:
                                    i.consumeRoomEvent(function(e) {
                                        return {
                                            kind: de.DeletedMessageEvent,
                                            id: e.id
                                        }
                                    }(s.node))
                            }
                        }
                    }), this.unsubscribeChatRoomsChanneTopic = c.k.subscribe({
                        topic: Object(g.e)(this.channelID),
                        onMessage: function(e) {
                            switch (e.type) {
                                case h.PubsubMessageType.PurgeMessageRequest:
                                    var t = e;
                                    i.consumeRoomEvent((n = t.data.channel_id, a = t.data.user_id, r = t.data.purge_after, {
                                        kind: de.ModerationEvent,
                                        id: Object(ge.a)(a + "-moderation-event"),
                                        channelID: n,
                                        userID: a,
                                        purgeAfter: r
                                    }))
                            }
                            var n, a, r
                        }
                    })
                }
            }(),
            De = n("Ldv2"),
            Oe = n("3T7g"),
            Ie = n("bkpq"),
            Re = n("1F7R"),
            Te = n("1OO3"),
            Me = n("KBUQ"),
            Le = n("O0Qc"),
            xe = n("JtUK"),
            Ae = n("Kthq"),
            Fe = 600,
            je = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.banUser = function(e) {
                        var n = Object(Le.n)("/ban " + e);
                        if (n && !n.duration) {
                            var i = n.bannedUserLogin;
                            return i ? {
                                deferred: t.props.banUserMutation(i).then(function(e) {
                                    var t = e.banUserFromChatRoom;
                                    return t.error ? {
                                        notice: Object(xe.a)(i, t.error.code)
                                    } : {
                                        notice: Object(c.d)("{userLogin} is now banned from this channel.", {
                                            userLogin: i
                                        }, "BanCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: Object(c.d)("Unable to ban user.", "BanCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(c.d)("Please specify a user to ban.", "BanCommandHandler")
                                })
                            }
                        }
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Usage: /ban [login]", "BanCommandHandler")
                            })
                        }
                    }, t.unbanUser = function(e) {
                        return e ? {
                            deferred: t.props.unbanUserMutation(e).then(function(t) {
                                var n = t.unbanUserFromChatRoom;
                                return n.error ? {
                                    notice: Object(Ae.a)(e, n.error.code)
                                } : {
                                    notice: Object(c.d)("{bannedUserLogin} is no longer banned from this channel.", {
                                        bannedUserLogin: e
                                    }, "BanCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unban user.", "BanCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Please specify a user to unban.", "BanCommandHandler")
                            })
                        }
                    }, t.timeoutUser = function(e) {
                        var n = Object(Le.n)("/ban " + e);
                        if (n) {
                            var i = n.bannedUserLogin,
                                a = n.duration || Fe;
                            return i ? {
                                deferred: t.props.banUserMutation(i, a).then(function(e) {
                                    var t = e.banUserFromChatRoom;
                                    return t.error ? {
                                        notice: Object(xe.a)(i, t.error.code, !0)
                                    } : {
                                        notice: Object(c.d)("{userLogin} has been timed out for {duration} seconds.", {
                                            userLogin: i,
                                            duration: a
                                        }, "BanCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: Object(c.d)("Unable to timeout user.", "BanCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(c.d)("Please specify a user to timeout.", "BanCommandHandler")
                                })
                            }
                        }
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Usage: /timeout [login] [duration in seconds]", "BanCommandHandler")
                            })
                        }
                    }, t.untimeoutUser = function(e) {
                        return e ? {
                            deferred: t.props.unbanUserMutation(e).then(function(t) {
                                var n = t.unbanUserFromChatRoom;
                                return n.error ? {
                                    notice: Object(Ae.a)(e, n.error.code, !0)
                                } : {
                                    notice: Object(c.d)("{login} is no longer timed out in this channel.", {
                                        login: e
                                    }, "BanCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to untimeout user.", "BanCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Please specify a user to untimeout.", "BanCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, {
                        display: N.P.Hide
                    }, l.createElement(Re.a, {
                        command: "ban",
                        handler: this.banUser
                    }), l.createElement(Re.a, {
                        command: "unban",
                        handler: this.unbanUser
                    }), l.createElement(Re.a, {
                        command: "timeout",
                        handler: this.timeoutUser
                    }), l.createElement(Re.a, {
                        command: "untimeout",
                        handler: this.untimeoutUser
                    }))
                }, t
            }(l.Component),
            Be = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            Ue = Object(d.compose)(Object(Me.b)(Be), Object(Te.b)(Be))(je),
            Pe = n("vSU7"),
            Ve = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.updateChatColor = function(e) {
                        var n = Object(Le.o)("/color " + e);
                        if (n && n.color) {
                            var i = n.color;
                            return {
                                deferred: t.props.updateChatColor({
                                    variables: {
                                        input: {
                                            color: i
                                        }
                                    }
                                }).then(function() {
                                    return {
                                        notice: Object(c.d)("Your color has been changed.", "ColorCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: Object(c.d)("Unable to change your color.", "ColorCommandHandler")
                                    }
                                })
                            }
                        }
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/color [color]" - Change your username color. Color must be in hex (#000000) or one of the following: Blue, BlueViolet, CadetBlue, Chocolate, Coral, DodgerBlue, Firebrick, GoldenRod, Green, HotPink, OrangeRed, Red, SeaGreen, SpringGreen, YellowGreen.', "ColorCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, {
                        display: N.P.Hide
                    }, l.createElement(Re.a, {
                        command: "color",
                        handler: this.updateChatColor
                    }))
                }, t
            }(l.Component),
            He = Object(m.a)(Pe, {
                name: "updateChatColor",
                options: {}
            })(Ve),
            We = n("TCxx"),
            Ge = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setEmoteOnlyMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/emoteonly" - Enables emote-only mode (only emoticons may be used in chat). Use "emoteonlyoff" to disable.', "EmoteOnlyCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableEmotesOnlyMode: !0
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("emote-only mode has been enabled for this room.", "EmoteOnlyCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to set emote-only mode.", "EmoteOnlyCommandHandler")
                                }
                            })
                        }
                    }, t.unsetEmoteOnlyMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/emoteonlyoff" - Disables emote-only mode.', "EmoteOnlyCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableEmotesOnlyMode: !1
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("emote-only mode has been disabled for this room.", "EmoteOnlyCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unset emote-only mode.", "EmoteOnlyCommandHandler")
                                }
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, {
                        display: N.P.Hide
                    }, l.createElement(Re.a, {
                        command: "emoteonly",
                        handler: this.setEmoteOnlyMode
                    }), l.createElement(Re.a, {
                        command: "emoteonlyoff",
                        handler: this.unsetEmoteOnlyMode
                    }))
                }, t
            }(l.Component),
            qe = Object(m.a)(We, {
                name: "updateRoomModes"
            })(Ge),
            ze = n("R9op"),
            $e = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.showHelp = function(e) {
                        var n = t.props.chatCommands.sort().map(function(e) {
                            return "/" + e
                        });
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Available commands: {commands}.", {
                                    commands: n.join(", ")
                                }, "HelpCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, {
                        display: N.P.Hide
                    }, l.createElement(Re.a, {
                        command: "help",
                        handler: this.showHelp
                    }))
                }, t
            }(l.Component);
        var Je, Qe = Object(i.b)(function(e) {
                return {
                    chatCommands: Object(ze.b)(e)
                }
            })($e),
            Ye = n("uLsu"),
            Ke = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.sendMessage = function(e) {
                        return t.props.sendMessage("/me " + e), {}
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, {
                        display: N.P.Hide
                    }, l.createElement(Re.a, {
                        command: "me",
                        handler: this.sendMessage
                    }))
                }, t
            }(l.Component),
            Ze = n("EsrG");
        ! function(e) {
            e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserAlreadyModded = "TARGET_ALREADY_MOD", e.UserBanned = "TARGET_IS_CHAT_BANNED", e.UserNotFound = "TARGET_NOT_FOUND"
        }(Je || (Je = {}));
        var Xe, et = n("Ta4Q");
        ! function(e) {
            e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserNotFound = "TARGET_NOT_FOUND", e.UserNotMod = "TARGET_NOT_MOD"
        }(Xe || (Xe = {}));
        var tt = n("zLjL"),
            nt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.modUser = function(e) {
                        var n = e.trim().split(/\s+/),
                            i = n[0];
                        return 1 === n.length && i && 0 !== i.length ? {
                            deferred: t.props.modUserMutation(i).then(function(e) {
                                if (e.modUser.error) switch (e.modUser.error.code) {
                                    case Je.Forbidden:
                                        return {
                                            notice: at()
                                        };
                                    case Je.UserAlreadyModded:
                                        return {
                                            notice: Object(c.d)("{login} is already a moderator of this channel.", {
                                                login: i
                                            }, "ModCommandHandler")
                                        };
                                    case Je.UserBanned:
                                        return {
                                            notice: Object(c.d)("{login} is banned in this channel. You must unban this user before granting mod status.", {
                                                login: i
                                            }, "ModCommandHandler")
                                        };
                                    case Je.UserNotFound:
                                        return {
                                            notice: it(i)
                                        };
                                    default:
                                        return {
                                            notice: rt()
                                        }
                                }
                                return {
                                    notice: Object(c.d)("You have added {login} as a moderator of this channel.", {
                                        login: i
                                    }, "ModCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: rt()
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/mod [login]" - Grant mod status to a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                            })
                        }
                    }, t.mods = function(e) {
                        return {
                            deferred: c.o.apollo.client.query({
                                query: tt,
                                fetchPolicy: "network-only",
                                variables: {
                                    id: t.props.channelID
                                }
                            }).then(function(e) {
                                if (!e.data.user) return {
                                    notice: ot()
                                };
                                if (0 === e.data.user.mods.edges.length) return {
                                    notice: Object(c.d)("There are no moderators of this channel.", "ModCommandHandler")
                                };
                                var t = e.data.user.mods.edges.map(function(e) {
                                    return e.node.login
                                }).join(", ");
                                return {
                                    notice: Object(c.d)("The moderators of this channel are: {mods}.", {
                                        mods: t
                                    }, "ModCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: ot()
                                }
                            })
                        }
                    }, t.unmodUser = function(e) {
                        var n = e.trim().split(/\s+/),
                            i = n[0];
                        return 1 === n.length && i && 0 !== i.length ? {
                            deferred: t.props.unmodUserMutation(i).then(function(e) {
                                if (e.unmodUser.error) switch (e.unmodUser.error.code) {
                                    case Xe.Forbidden:
                                        return {
                                            notice: at()
                                        };
                                    case Xe.UserNotFound:
                                        return {
                                            notice: it(i)
                                        };
                                    case Xe.UserNotMod:
                                        return {
                                            notice: Object(c.d)("{login} is currently not a moderator of this channel.", {
                                                login: i
                                            }, "ModCommandHandler")
                                        };
                                    default:
                                        return {
                                            notice: st()
                                        }
                                }
                                return {
                                    notice: Object(c.d)("You have removed {login} as a moderator of this channel.", {
                                        login: i
                                    }, "ModCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: st()
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/unmod [login]" - Revoke mod status from a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, {
                        display: N.P.Hide
                    }, l.createElement(Re.a, {
                        command: "mod",
                        handler: this.modUser
                    }), l.createElement(Re.a, {
                        command: "mods",
                        handler: this.mods
                    }), l.createElement(Re.a, {
                        command: "unmod",
                        handler: this.unmodUser
                    }))
                }, t
            }(l.Component);

        function it(e) {
            return Object(c.d)("Invalid username: {login}", {
                login: e
            }, "ModCommandHandler")
        }

        function at() {
            return Object(c.d)("You don't have permission to perform that action.", "ModCommandHandler")
        }

        function rt() {
            return Object(c.d)("Unable to add moderator.", "ModCommandHandler")
        }

        function ot() {
            return Object(c.d)("There was a problem fetching the list of mods.", "ModCommandHandler")
        }

        function st() {
            return Object(c.d)("Unable to remove moderator.", "ModCommandHandler")
        }
        var lt, dt = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            ct = Object(d.compose)(function(e) {
                var t = this;
                return Object(m.a)(et, {
                    props: function(n) {
                        return {
                            unmodUserMutation: function(i) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return s.__generator(this, function(a) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("unmodUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }(dt), function(e) {
                var t = this;
                return Object(m.a)(Ze, {
                    props: function(n) {
                        return {
                            modUserMutation: function(i) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return s.__generator(this, function(a) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("modUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }(dt))(nt),
            ut = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setR9kMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/r9k" - Enables r9k mode. See http://link.twitch.tv/r9k for details. Use "r9koff" to disable.', "R9kCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableR9KMode: !0
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("r9k mode has been enabled for this room.", "R9kCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to set r9k mode.", "R9kCommandHandler")
                                }
                            })
                        }
                    }, t.unsetR9kMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/r9koff" - Disables r9k mode.', "R9kCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableR9KMode: !1
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("r9k mode has been disabled for this room.", "R9kCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unset r9k mode.", "R9kCommandHandler")
                                }
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, {
                        display: N.P.Hide
                    }, l.createElement(Re.a, {
                        command: "r9k",
                        handler: this.setR9kMode
                    }), l.createElement(Re.a, {
                        command: "r9koff",
                        handler: this.unsetR9kMode
                    }))
                }, t
            }(l.Component),
            mt = Object(m.a)(We, {
                name: "updateRoomModes"
            })(ut),
            pt = 120,
            ht = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setSlowMode = function(e) {
                        var n = Object(Le.p)("/slow " + e);
                        return n ? {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableSlowMode: !0,
                                        slowModeDurationSeconds: n.duration || pt
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                                        length: n.duration || pt
                                    }, "SlowCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to set slow mode.", "SlowCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/slow [duration]" - Enables slow mode (limit how often users may send messages). Duration (optional, default=120) must be a positive number of seconds. Use "slowoff" to disable.', "SlowCommandHandler")
                            })
                        }
                    }, t.unsetSlowMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/slowoff" - Disables slow mode.', "SlowCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableSlowMode: !1
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("This room is no longer in slow mode.", "SlowCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unset slow mode.", "SlowCommandHandler")
                                }
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(N._4, {
                        display: N.P.Hide
                    }, l.createElement(Re.a, {
                        command: "slow",
                        handler: this.setSlowMode
                    }), l.createElement(Re.a, {
                        command: "slowoff",
                        handler: this.unsetSlowMode
                    }))
                }, t
            }(l.Component),
            gt = Object(m.a)(We, {
                name: "updateRoomModes"
            })(ht),
            ft = n("+WrY"),
            vt = n("BMQ2"),
            bt = n("ZiSq"),
            kt = n("QCOJ"),
            yt = n("hcyD"),
            _t = n("VB5+"),
            Ct = n("QFW6"),
            St = function() {
                var e = Array.from(Array(21).keys()).map(function(e) {
                    return Et(e)
                });
                return l.createElement(N._4, {
                    className: "fake-room-list",
                    display: N.P.Flex,
                    flexDirection: N.R.Column,
                    flexWrap: N.S.NoWrap,
                    overflow: N._7.Hidden,
                    flexGrow: 1
                }, l.createElement(N._4, {
                    className: "fake-room-list__lines"
                }, e))
            },
            Et = function(e) {
                return l.createElement(N._4, {
                    padding: {
                        x: 2,
                        y: .5
                    },
                    key: e
                }, l.createElement(N.Y, {
                    display: N.P.InlineBlock,
                    margin: {
                        right: 1
                    }
                }, l.createElement(N.O, {
                    type: N._41.Span
                }, l.createElement(N._10, {
                    width: 70
                }))), l.createElement(N.Y, {
                    display: N.P.InlineBlock
                }, l.createElement(N.O, {
                    type: N._41.Span
                }, l.createElement(N._10, {
                    width: 50 + 89 * e % 151
                }))))
            },
            Nt = n("zCIC"),
            wt = n("O9wU"),
            Dt = (n("UiRd"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, wt.a.member_list, "", e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        i = t.header,
                        a = n.map(function(t) {
                            return l.createElement("div", {
                                key: "member-list-group-item-" + t
                            }, l.createElement("button", {
                                className: "member-list-group__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, l.createElement(N.O, {
                                transform: N._40.Capitalize
                            }, t)))
                        });
                    return l.createElement(N._4, {
                        className: "member-list-group",
                        padding: {
                            bottom: 2
                        }
                    }, l.createElement(N.O, {
                        transform: N._40.Uppercase
                    }, i), a)
                }, t
            }(l.Component)),
            Ot = n("GS+L");
        n("Vvm+");
        ! function(e) {
            e.Admin = "ADMIN", e.GlobalMod = "GLOBALMOD", e.Moderator = "MOD", e.Broadcaster = "BROADCASTER", e.Staff = "STAFF", e.Regular = "REGULAR"
        }(lt || (lt = {}));
        var It = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {}, t
            }
            return s.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = this.props.data.loading && l.createElement(N._6, {
                    fillContent: !0
                });
                return l.createElement(N._4, {
                    className: "member-list",
                    fullWidth: !0,
                    fullHeight: !0,
                    flexShrink: 0,
                    zIndex: N._53.Default
                }, l.createElement(N._4, {
                    className: "member-list__pane",
                    display: N.P.Flex,
                    flexDirection: N.R.Column,
                    flexWrap: N.S.NoWrap,
                    position: N._11.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    attachRight: !0
                }, l.createElement(N._4, {
                    className: "member-list__header",
                    display: N.P.Flex,
                    justifyContent: N._3.Center,
                    alignItems: N.c.Center,
                    padding: {
                        y: 1
                    },
                    margin: {
                        bottom: 2
                    },
                    flexShrink: 0
                }, l.createElement(N._4, {
                    position: N._11.Absolute,
                    attachLeft: !0,
                    margin: {
                        left: 1
                    }
                }, l.createElement(N.v, {
                    icon: N._18.Close,
                    ariaLabel: Object(c.d)("Close", "MemberList"),
                    onClick: this.props.closeMemberList,
                    "data-test-selector": "member-list-close-button"
                })), l.createElement(N.O, null, Object(c.d)("Member List", "MemberList"))), this.renderMembers(), e))
            }, t.prototype.renderMembers = function() {
                if (this.props.data.loading || this.props.data.error) return null;
                var e = [],
                    t = this.props.data.room.members.edges,
                    n = this.props.onUsernameClick,
                    i = {
                        broadcaster: t.filter(function(e) {
                            return e.type === lt.Broadcaster
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        staff: t.filter(function(e) {
                            return e.type === lt.Staff
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        admin: t.filter(function(e) {
                            return e.type === lt.Admin
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        globalMod: t.filter(function(e) {
                            return e.type === lt.GlobalMod
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        moderator: t.filter(function(e) {
                            return e.type === lt.Moderator
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        member: t.filter(function(e) {
                            return e.type === lt.Regular
                        }).map(function(e) {
                            return e.node.displayName
                        })
                    };
                return i.broadcaster.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-broadcaster",
                    header: Object(c.d)("Broadcaster", "MemberList"),
                    viewers: i.broadcaster,
                    onUsernameClick: n
                })), i.staff.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-staff",
                    header: Object(c.d)("Staff", "MemberList"),
                    viewers: i.staff,
                    onUsernameClick: n
                })), i.admin.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-admins",
                    header: Object(c.d)("Admins", "MemberList"),
                    viewers: i.admin,
                    onUsernameClick: n
                })), i.globalMod.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-global-mods",
                    header: Object(c.d)("Global Moderators", "MemberList"),
                    viewers: i.globalMod,
                    onUsernameClick: n
                })), i.moderator.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-moderators",
                    header: Object(c.d)("Moderators", "MemberList"),
                    viewers: i.moderator,
                    onUsernameClick: n
                })), i.member.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-members",
                    header: Object(c.d)("Members", "MemberList"),
                    viewers: i.member,
                    onUsernameClick: n
                })), l.createElement(Nt.b, {
                    className: "member-list__list"
                }, l.createElement(N._4, {
                    padding: {
                        x: 2
                    }
                }, e))
            }, t = s.__decorate([Object(b.d)("MemberList"), Object(m.a)(Ot, {
                options: function(e) {
                    return {
                        variables: {
                            roomID: e.roomID
                        }
                    }
                }
            })], t)
        }(l.Component);
        var Rt = Object(i.b)(null, function(e) {
                return Object(a.b)({
                    onUsernameClick: me.d
                }, e)
            })(It),
            Tt = n("6BvN"),
            Mt = n("c3pS"),
            Lt = n("iydZ"),
            xt = n("/LBW"),
            At = n("ieBa"),
            Ft = n("KSGD"),
            jt = n("SZoP"),
            Bt = n("Bir6"),
            Ut = n("2emZ"),
            Pt = n("e1CU"),
            Vt = 5,
            Ht = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = Ut.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var i = t ? e : e.substring(1),
                            a = new RegExp("^" + Object(Bt.a)(i), "i");
                        return n.state.sortedRoomMembers.filter(function(e) {
                            return a.test(e.login) || a.test(e.displayName)
                        }).slice(0, Vt).map(function(i) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + i.displayName,
                                element: n.renderMention(i)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return l.createElement("span", null, Object(jt.a)(e.login, e.displayName))
                    }, n.sortChatMembers = function(e) {
                        var t = [{
                                id: e.channelID,
                                login: e.channelLogin,
                                chatColor: "",
                                displayName: Object(Pt.a)(e.channelDisplayName, e.channelLogin).userDisplayName,
                                displayBadges: [],
                                __typename: "User"
                            }],
                            n = e.roomMembers;
                        return n.sort(function(e, t) {
                            return e.login < t.login ? -1 : e.login > t.login ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedRoomMembers: n.sortChatMembers(t)
                    }, n
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.roomMembers === e.roomMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin && this.props.channelID === e.channelID || this.setState({
                        sortedRoomMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: Ft.func
                }, t
            }(l.Component),
            Wt = (n("KnZO"), function() {
                return l.createElement(N._4, {
                    fullWidth: !0,
                    position: N._11.Absolute,
                    className: "rooms-bits-prompt"
                }, l.createElement(N._27, {
                    border: !0,
                    background: N.m.Base,
                    elevation: 3,
                    fullWidth: !0,
                    padding: 1,
                    textAlign: N._37.Center,
                    className: "rooms-bits-prompt__content"
                }, l.createElement(N._4, {
                    padding: {
                        y: 1
                    }
                }, l.createElement(N.O, {
                    color: N.J.Link,
                    type: N._41.H4,
                    bold: !0
                }, Object(c.d)("Cheering is not available in Rooms", "DisabledBitsCard"))), l.createElement(N._4, {
                    display: N.P.Flex,
                    justifyContent: N._3.Center
                }, l.createElement("img", {
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/86/3.0",
                    width: "42",
                    height: "35"
                })), l.createElement(N._4, {
                    padding: {
                        y: 1
                    }
                }, l.createElement(N.O, null, Object(c.d)("To Cheer in this channel to support the streamer, please cheer in Stream Chat", "DisabledBitsCard")))))
            }),
            Gt = n("NXs7"),
            qt = n("NikC"),
            zt = n("0nzt"),
            $t = n("Ouuk"),
            Jt = n("jF7o"),
            Qt = n("VsL1"),
            Yt = n("v4vD"),
            Kt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? Gt.a.Light : Gt.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout)
                    }, t.onModIconsToggle = function() {
                        Object(Qt.b)("showModIcons", !t.props.showModerationIcons), t.props.showModerationIcons ? t.props.onModIconsDisable() : t.props.onModIconsEnable()
                    }, t.onSlowModeToggle = function() {
                        0 === t.props.data.room.modes.slowModeDurationSeconds ? t.props.sendMessage("/slow") : t.props.sendMessage("/slowoff")
                    }, t.onTimestampToggle = function() {
                        Object(Qt.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable()
                    }, t.onChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.data.room.owner.login + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object($t.a)() && (e.focus(), Object(Jt.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.hasModPermissions = function() {
                        var e = t.props.sessionUser,
                            n = t.props.data,
                            i = n.room,
                            a = n.user;
                        return !!e && (a.roles.isStaff || a.roles.isGlobalMod || a.roles.isSiteAdmin || e.id === i.owner.id || !!i.owner.self && i.owner.self.isModerator)
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.loading ? l.createElement(N._10, {
                        lineCount: 4
                    }) : this.props.data.error ? l.createElement(N._4, null) : l.createElement(Nt.b, {
                        className: "room-settings"
                    }, l.createElement(N._27, {
                        className: "room-settings__content",
                        background: N.m.Base,
                        color: N.J.Base,
                        padding: 2
                    }, this.renderChatOptions(), this.renderModTools()))
                }, t.prototype.renderChatOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && l.createElement(N.I, {
                        checked: this.props.darkModeEnabled,
                        "data-test-selector": "dark-mode-checkbox",
                        id: "room-settings-dark-mode",
                        label: Object(c.d)("Dark Mode", "RoomSettings"),
                        onChange: this.onDarkModeToggle
                    });
                    return l.createElement(N._4, null, l.createElement(N._27, {
                        padding: {
                            bottom: 2
                        }
                    }, l.createElement(N.O, {
                        color: N.J.Alt2,
                        transform: N._40.Uppercase
                    }, Object(c.d)("Chat Options", "RoomSettings"))), l.createElement(N._4, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(N.I, {
                        checked: this.props.showTimestamps,
                        "data-test-selector": "timestamps-selector",
                        id: "room-settings-timestamp",
                        label: Object(c.d)("Timestamps", "RoomSettings"),
                        onChange: this.onTimestampToggle
                    })), l.createElement(N._4, {
                        margin: {
                            bottom: 1
                        }
                    }, e), l.createElement(N._4, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement("button", {
                        onClick: this.onChatPopout,
                        "data-test-selector": "popout-button"
                    }, Object(c.d)("Popout", "RoomSettings"))))
                }, t.prototype.renderModTools = function() {
                    if (this.hasModPermissions()) return l.createElement(N._27, {
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, l.createElement(N._4, {
                        margin: {
                            bottom: 2
                        }
                    }, l.createElement(N.O, {
                        color: N.J.Alt2,
                        transform: N._40.Uppercase
                    }, Object(c.d)("Mod Tools", "RoomSettings"))), l.createElement(N._4, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(N.I, {
                        checked: this.props.showModerationIcons,
                        "data-test-selector": "mod-icons-checkbox",
                        id: "room-settings-mod-icons",
                        label: Object(c.d)("Mod Icons", "RoomSettings"),
                        onChange: this.onModIconsToggle
                    })), l.createElement(N._4, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(N.I, {
                        checked: 0 !== this.props.data.room.modes.slowModeDurationSeconds,
                        id: "room-settings-slow-mode",
                        label: Object(c.d)("Slow Mode", "RoomSettings"),
                        onChange: this.onSlowModeToggle
                    })))
                }, t = s.__decorate([Object(m.a)(Yt, {
                    options: function(e) {
                        return {
                            variables: {
                                roomID: e.roomID,
                                isLoggedIn: !!e.sessionUser,
                                userID: e.sessionUser && e.sessionUser.id
                            }
                        }
                    }
                }), Object(b.d)("RoomSettings")], t)
            }(l.Component);
        var Zt, Xt = Object(i.b)(function(e) {
                return {
                    darkModeEnabled: Object(zt.a)(e) === Gt.a.Dark,
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps,
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    sessionUser: Object(r.c)(e)
                }
            }, function(e) {
                return Object(a.b)({
                    onChatHide: function() {
                        return o.Q()
                    },
                    onChatUnhide: function() {
                        return o.T()
                    },
                    onModIconsDisable: function() {
                        return o.D()
                    },
                    onModIconsEnable: function() {
                        return o.K()
                    },
                    onTimestampsDisable: function() {
                        return o.I()
                    },
                    onTimestampsEnable: function() {
                        return o.P()
                    },
                    onThemeChanged: function(e) {
                        return Object(qt.b)(e, void 0, !1)
                    }
                }, e)
            })(Kt),
            en = /\S/;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(Zt || (Zt = {}));
        var tn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onKeyDown = function(e) {
                        switch (e.charCode || e.keyCode) {
                            case Tt.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.handleMessageSend()))
                        }
                    }, n.onMessageValueUpdate = function(e) {
                        n.setState({
                            currentMessageInput: e
                        })
                    }, n.handleMessageSend = function() {
                        en.test(n.state.currentMessageInput) && (n.props.sendMessage(n.state.currentMessageInput), n.setState({
                            currentMessageInput: ""
                        }), n.chatInputRef.focus(), n.autocompleteInputRef.setValue(""))
                    }, n.onClickEmote = function(e) {
                        var t = n.state.currentMessageInput;
                        n.state.currentMessageInput.length > 0 && !n.state.currentMessageInput.endsWith(" ") && (t += " "), t += e + " ", n.setState({
                            currentMessageInput: t
                        }), n.autocompleteInputRef.setValue(t)
                    }, n.onShowMemberList = function() {
                        n.state.showCard !== Zt.None && n.setState({
                            showCard: Zt.None
                        }), n.props.showMemberList()
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            return {
                                showCard: e.showCard !== Zt.Emotes ? Zt.Emotes : Zt.None
                            }
                        })
                    }, n.syncMembers = function() {
                        n.props.activeMembers.isDirty && n.setState({
                            roomMembers: n.props.activeMembers.getActiveMembers()
                        })
                    }, n.setChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInputRef = e
                    }, n.state = {
                        roomMembers: t.activeMembers.getActiveMembers(),
                        currentMessageInput: "",
                        showCard: Zt.None
                    }, n
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.syncMembersHandle = setInterval(this.syncMembers, 250)
                }, t.prototype.componentWillUnmount = function() {
                    this.syncMembersHandle && (clearInterval(this.syncMembersHandle), this.syncMembersHandle = 0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    if (t.currentMessageInput !== this.state.currentMessageInput && e.bitsConfig) {
                        var n = !1;
                        Object(Lt.c)(t.currentMessageInput, e.bitsConfig).forEach(function(e) {
                            e.type === Ce.a.Emote && (n = !0)
                        }), n ? (this.setState({
                            showCard: Zt.Bits
                        }), Object(xt.h)({
                            actionName: xt.a.CheeringInRoom,
                            displayedBalance: 0
                        })) : this.setState({
                            showCard: Zt.None
                        })
                    }
                }, t.prototype.render = function() {
                    var e = [l.createElement(At.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle
                    })];
                    return l.createElement(N._4, {
                        className: "room-input",
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, l.createElement(N._4, {
                        position: N._11.Relative,
                        zIndex: N._53.Default
                    }, this.state.showCard === Zt.Bits && l.createElement(Wt, null), l.createElement(At.c, {
                        channelOwnerID: this.props.channelID,
                        onClickEmote: this.onClickEmote,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === Zt.Emotes
                    }), l.createElement(Mt.b, {
                        componentType: Mt.a.TextArea,
                        suggestionSource: Mt.c.Chat,
                        onValueUpdate: this.onMessageValueUpdate,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setChatInputRef,
                        refDelegate: this.setAutocompleteInputRef,
                        noResize: !0,
                        paddingRight: 30 * e.length,
                        placeholder: Object(c.d)("Send a message", "RoomInput"),
                        "data-test-selector": "room-input-textarea"
                    }, l.createElement(Mt.d, {
                        emotes: this.props.emotes
                    }), l.createElement(Ht, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        roomMembers: this.state.roomMembers
                    })), l.createElement(N._4, {
                        position: N._11.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e)), l.createElement(N._4, {
                        display: N.P.Flex,
                        justifyContent: N._3.Between,
                        margin: {
                            top: 1
                        }
                    }, l.createElement(N._4, {
                        display: N.P.Flex,
                        flexDirection: N.R.Row
                    }, l.createElement(k.a, null, l.createElement(N.v, {
                        icon: N._18.Gear,
                        ariaLabel: Object(c.d)("Room Settings", "RoomInput")
                    }), l.createElement(N.p, {
                        direction: N.q.Top,
                        noTail: !0,
                        offsetY: "11px"
                    }, l.createElement(Xt, {
                        roomID: this.props.roomID,
                        isPopout: this.props.isPopout,
                        sendMessage: this.props.sendMessage
                    }))), l.createElement(N.v, {
                        ariaLabel: Object(c.d)("Member List", "RoomInput"),
                        icon: N._18.ViewerList,
                        onClick: this.onShowMemberList
                    })), l.createElement(N.u, {
                        onClick: this.handleMessageSend,
                        "data-test-selector": "room-input-button"
                    }, Object(c.d)("Chat", "RoomInput"))))
                }, t
            }(l.Component),
            nn = Object(d.compose)(Object(b.d)("RoomInput", {
                autoReportInteractive: !0
            }))(tn),
            an = n("zMie"),
            rn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data && this.props.data.loading) return l.createElement(N._4, null);
                    if (this.props.data && this.props.data.error) return l.createElement(N._4, null);
                    if (this.props.data && !this.props.allowedToChat) {
                        var e = this.props.data.room,
                            t = Object(c.d)("You are viewing {displayName}’s #{roomName}. You have to subscribe to chat here! Subscribe above the player.", {
                                displayName: e.owner.displayName,
                                roomName: e.name
                            }, "RoomInteractionPane");
                        return l.createElement(N._4, {
                            padding: {
                                bottom: 2,
                                x: 2
                            }
                        }, l.createElement(N._27, {
                            padding: {
                                bottom: 1,
                                x: 2
                            },
                            borderTop: !0
                        }), l.createElement(N._4, {
                            padding: {
                                bottom: 1
                            }
                        }, l.createElement(N._4, {
                            display: N.P.Flex,
                            flexDirection: N.R.Column,
                            fullHeight: !0,
                            justifyContent: N._3.Center
                        }, l.createElement(N.O, {
                            "data-test-selector": "subscription-upsell",
                            color: N.J.Alt
                        }, t))), l.createElement(N.u, {
                            type: N.A.Hollow,
                            onClick: this.props.handleStreamChatClick
                        }, Object(c.d)("Back to Stream Chat", "RoomInteractionPane")))
                    }
                    return l.createElement(N._4, {
                        "data-test-selector": "interaction-enabled"
                    }, l.createElement(nn, {
                        activeMembers: this.props.activeMembers,
                        bitsConfig: this.props.bitsConfig,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        isPopout: this.props.isPopout,
                        roomID: this.props.roomID,
                        sendMessage: this.props.sendMessage,
                        showMemberList: this.props.showMemberList
                    }))
                }, t = s.__decorate([Object(m.a)(an, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    },
                    skip: function(e) {
                        return e.allowedToChat
                    }
                }), Object(b.d)("RoomInteractionPane")], t)
            }(l.Component),
            on = n("Th9g"),
            sn = n("g7wA"),
            ln = (n("eDxU"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleUsernameClick = function(e) {
                        t.props.onUsernameClick(t.props.sender.login, wt.a.room_message, t.props.roomID, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.sender,
                        t = [l.createElement("span", {
                            key: "username-display",
                            className: "message-author__display-name",
                            "data-test-selector": "message-username",
                            style: {
                                color: e.chatColor
                            }
                        }, e.displayName)];
                    return Object(jt.b)(e.displayName) || t.push(l.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.chatColor
                        },
                        className: "message-author__intl-login",
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.login + ")")), l.createElement("button", {
                        onClick: this.handleUsernameClick,
                        className: "message-author__username"
                    }, l.createElement("span", {
                        key: e.id + "-messageauthor"
                    }, t))
                }, t
            }(l.Component)),
            dn = (n("G/62"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanUser = function() {
                        t.props.sendMessage("/ban " + t.props.message.sender.login)
                    }, t.onTimeoutUser = function() {
                        t.props.sendMessage("/timeout " + t.props.message.sender.login)
                    }, t.onUnbanUser = function() {
                        t.props.sendMessage("/unban " + t.props.message.sender.login)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.deletedAt,
                        t = this.onBanUser,
                        n = N._18.Ban,
                        i = Object(c.d)("Ban", "RoomMessageModIcons");
                    return e && (t = this.onUnbanUser, n = N._18.FollowCheck, i = Object(c.d)("Unban", "RoomMessageModIcons")), l.createElement(N._4, {
                        display: N.P.InlineFlex,
                        margin: {
                            right: .5
                        },
                        className: "room-message-mod-icons"
                    }, l.createElement(N.Z, {
                        color: N.J.Alt2,
                        display: N.P.InlineFlex
                    }, l.createElement("button", {
                        className: "room-message-mod-icons__mod-icon",
                        "data-test-selector": "default-action-button",
                        onClick: t
                    }, l.createElement(N._44, {
                        label: i
                    }, l.createElement(N._17, {
                        width: 16,
                        height: 16,
                        type: N._19.Inherit,
                        asset: n
                    })))), l.createElement(N.Z, {
                        color: N.J.Alt2,
                        display: N.P.InlineFlex
                    }, l.createElement("button", {
                        className: "room-message-mod-icons__mod-icon",
                        "data-test-selector": "timeout-action-button",
                        onClick: this.onTimeoutUser
                    }, l.createElement(N._44, {
                        label: Object(c.d)("Timeout", "RoomMessageModIcons")
                    }, l.createElement(N._17, {
                        width: 16,
                        height: 16,
                        type: N._19.Inherit,
                        asset: N._18.Timeout
                    })))))
                }, t
            }(l.Component)),
            cn = (n("Ecgh"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        shouldShowDeletedBody: !1
                    }, t.showDeleted = function(e) {
                        e && e.preventDefault(), t.setState({
                            shouldShowDeletedBody: !0
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.shouldComponentUpdate = function(e, t) {
                    return e.showModerationIcons !== this.props.showModerationIcons || (e.showTimestamps !== this.props.showTimestamps || (t.shouldShowDeletedBody !== this.state.shouldShowDeletedBody || (e.hasModPermissions !== this.props.hasModPermissions || e.message.deletedAt !== this.props.message.deletedAt)))
                }, t.prototype.render = function() {
                    var e = this.props.message.sender.displayBadges,
                        t = {},
                        n = ": ";
                    return this.props.message.content.text.startsWith(Ne) && (t = {
                        color: this.props.message.sender.chatColor
                    }, n = " "), l.createElement(N._4, {
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement("div", {
                        id: this.props.message.id,
                        className: "room-message",
                        style: t
                    }, this.renderTimestamp(), this.renderModerationIcons(), l.createElement(Oe.b, {
                        badgeSets: this.props.badgeSets,
                        badgesToRender: e
                    }), l.createElement(ln, {
                        roomID: this.props.roomID,
                        messageID: this.props.message.id,
                        sender: this.props.message.sender,
                        onUsernameClick: this.props.onUsernameClick
                    }), l.createElement("span", {
                        key: "separator"
                    }, n), this.renderMessageBody()))
                }, t.prototype.renderMessageBody = function() {
                    if (!this.props.message.deletedAt || this.state.shouldShowDeletedBody) return this.getMessageParts();
                    var e = Object(c.d)("message deleted", "RoomMessage"),
                        t = this.props.hasModPermissions ? l.createElement(N.M, {
                            onClick: this.showDeleted,
                            "data-test-selector": "show-deleted"
                        }, "<" + e + ">") : "<" + e + ">";
                    return l.createElement("span", {
                        key: "deleted",
                        className: "room-message--deleted",
                        "data-test-selector": "deleted-message"
                    }, t)
                }, t.prototype.getMessageParts = function() {
                    var e, t, n, i, a = this.props.message.sender,
                        r = a.displayName,
                        o = a.login;
                    return Object(sn.k)((e = this.props.message, t = e.content.text.startsWith(Ne), n = [], i = /^(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w./@#%&()\-+=:?~]*)?)$/g, e.content.fragments.forEach(function(a, r) {
                        var o = a.content;
                        if (o && o.__typename === Ee.EMOTE) {
                            var s = o;
                            n.push({
                                type: Ce.a.Emote,
                                content: {
                                    alt: a.text,
                                    images: {
                                        themed: !1,
                                        sources: {
                                            "1x": Object(v.e)(s.emoteID, 1),
                                            "2x": Object(v.e)(s.emoteID, 2),
                                            "4x": Object(v.e)(s.emoteID, 4)
                                        }
                                    }
                                }
                            })
                        } else if (o && o.__typename === Ee.MENTION) {
                            var l = o;
                            n.push({
                                type: Ce.a.Mention,
                                content: {
                                    sender: e.sender.login,
                                    recipient: l.login
                                }
                            })
                        } else if (i.test(a.text)) {
                            var d = a.text.split(/\s+/);
                            d.forEach(function(e, t) {
                                i.lastIndex = 0;
                                var a = i.exec(e);
                                if (a) {
                                    var r = a.index;
                                    0 !== r && n.push({
                                        type: Ce.a.Text,
                                        content: "" + e.slice(0, r)
                                    });
                                    var o = i.lastIndex,
                                        s = (a[1] ? "" : "https://") + e.slice(r, o);
                                    if (Object(Se.a)(s)) {
                                        var l = Object(Se.b)(s);
                                        n.push({
                                            type: Ce.a.VideoLink,
                                            content: {
                                                id: l,
                                                url: s,
                                                displayText: e.slice(r, o)
                                            }
                                        })
                                    } else n.push({
                                        type: Ce.a.Link,
                                        content: {
                                            displayText: e.slice(r, o),
                                            url: s
                                        }
                                    });
                                    var c = e.slice(o),
                                        u = "";
                                    t < d.length - 1 && (u = " "), c && n.push({
                                        type: Ce.a.Text,
                                        content: "" + c + u
                                    })
                                } else {
                                    var m = n.length && n[n.length - 1];
                                    if (u = "", t < d.length - 1 && (u = " "), m && m.type === Ce.a.Text) m.content += e + u;
                                    else {
                                        var p = "";
                                        t && (p = " "), n.push({
                                            type: Ce.a.Text,
                                            content: p + e + u
                                        })
                                    }
                                }
                            })
                        } else {
                            var c = a.text;
                            t && 0 === r && c.startsWith(Ne) && (c = c.substr(3)), n.push({
                                type: Ce.a.Text,
                                content: c
                            })
                        }
                    }), n), r, o)
                }, t.prototype.renderTimestamp = function() {
                    return this.props.showTimestamps ? l.createElement("span", {
                        key: "timestamp",
                        className: "room-message__timestamp",
                        "data-test-selector": "room-message-timestamp"
                    }, Object(sn.c)(new Date(this.props.message.sentAt))) : null
                }, t.prototype.renderModerationIcons = function() {
                    return this.props.showModerationIcons && this.props.hasModPermissions ? l.createElement(dn, {
                        channelID: this.props.channelID,
                        message: this.props.message,
                        sendMessage: this.props.sendMessage
                    }) : null
                }, t
            }(l.Component)),
            un = (n("DS3o"), function(e) {
                return l.createElement(N._27, {
                    className: "room-system-message",
                    color: N.J.Alt2,
                    key: e.message.id,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, l.createElement(N.O, null, e.message.text))
            }),
            mn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    switch (this.props.message.kind) {
                        case de.SystemMessageEvent:
                            return l.createElement(un, {
                                message: this.props.message
                            });
                        case de.RoomMessageEvent:
                            return l.createElement(cn, {
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                badgeSets: this.props.badgeSets,
                                channelID: this.props.channelID,
                                roomID: this.props.roomID,
                                hasModPermissions: this.props.hasModPermissions,
                                message: this.props.message,
                                sendMessage: this.props.sendMessage,
                                onUsernameClick: this.props.onUsernameClick
                            });
                        default:
                            return null
                    }
                }, t
            }(l.Component),
            pn = (n("AsjC"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            hn = 10,
            gn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0,
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        if (t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type)) {
                            var n = t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight;
                            n <= hn && !t.state.isAutoScrolling ? t.setState({
                                isAutoScrolling: !0
                            }) : n > hn && t.state.isAutoScrolling && t.setState({
                                isAutoScrolling: !1
                            })
                        }
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom), t.props.loadNewest()
                    }, t.loadOlder = function() {
                        return t.isLoadingOlder = !0, t.props.loadOlder()
                    }, t.loadNewer = function() {
                        return t.isLoadingOlder = !1, t.props.loadNewer()
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.setState({
                        disableInfiniteTrigger: !1
                    }), this.scroll && this.scroll.scrollContent && (this.scrollToBottom(), pn.forEach(function(t) {
                        e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    }))
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    pn.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.isBulkLoad && this.isLoadingOlder && this.scroll && this.scroll.scrollContent && (this.prevScrollTop = this.scroll.scrollContent.scrollTop), e.isBulkLoad && !this.isLoadingOlder && this.scroll && this.scroll.scrollContent) {
                        var t = this.props.messages[this.props.messages.length - 1] && this.props.messages[this.props.messages.length - 1].id;
                        if (t && document.getElementById(t)) {
                            var n = document.getElementById(t).offsetTop;
                            this.prevScrollTop = this.scroll.scrollContent.scrollTop - n
                        } else this.prevScrollTop = this.scroll.scrollContent.scrollTop
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    if (e.messages !== this.props.messages && (this.state.isAutoScrolling && this.scrollToBottom(), this.props.isBulkLoad && e.messages && this.props.messages))
                        if (this.isLoadingOlder) {
                            var t = e.messages[0] && e.messages[0].id,
                                n = this.props.messages[0] && this.props.messages[0].id;
                            if (t && n && t !== n) {
                                var i = document.getElementById(t);
                                if (i && this.scroll && this.scroll.scrollContent) {
                                    var a = i.offsetTop;
                                    this.scroll.scrollContent.scrollTop = this.prevScrollTop + a
                                }
                            }
                        } else {
                            var r = e.messages[e.messages.length - 1] && e.messages[e.messages.length - 1].id,
                                o = this.props.messages[this.props.messages.length - 1] && this.props.messages[this.props.messages.length - 1].id;
                            if (r && o && r !== o) {
                                var s = document.getElementById(r);
                                if (s && this.scroll && this.scroll.scrollContent) {
                                    a = s.offsetTop;
                                    this.scroll.scrollContent.scrollTop = this.prevScrollTop + a
                                }
                            }
                        }
                }, t.prototype.render = function() {
                    var e = this.getRoomLines();
                    return l.createElement(N._4, {
                        className: "room-list",
                        display: N.P.Flex,
                        flexDirection: N.R.Column,
                        flexWrap: N.S.NoWrap,
                        overflow: N._7.Hidden,
                        flexGrow: 1
                    }, l.createElement(Nt.b, {
                        className: "room-list__lines",
                        scrollRef: this.saveScrollRef
                    }, l.createElement(N._4, {
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: N._7.Hidden,
                        padding: {
                            bottom: 1
                        }
                    }, l.createElement(Nt.a, {
                        "data-test-selector": "backward-infinite-scroll",
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadOlder,
                        pixelThreshold: 400,
                        orientation: on.b.Down,
                        contentLength: e.length,
                        forceLoadMoreContent: this.props.hasOlderLeft,
                        requestCap: 2
                    }), e, l.createElement(Nt.a, {
                        "data-test-selector": "forward-infinite-scroll",
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadNewer,
                        pixelThreshold: 400,
                        orientation: on.b.Up,
                        contentLength: e.length,
                        forceLoadMoreContent: this.props.hasNewerLeft,
                        requestCap: 2
                    }))), l.createElement(N._4, {
                        className: "room-list__more-messages-placeholder",
                        position: N._11.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : l.createElement(N._27, {
                        alignItems: N.c.Center,
                        attachBottom: !0,
                        display: N.P.Flex,
                        fullWidth: !0,
                        background: N.m.Overlay,
                        justifyContent: N._3.Center,
                        position: N._11.Absolute
                    }, l.createElement(N.u, {
                        onClick: this.handleClickMoreMessages,
                        overlay: !0,
                        type: N.A.Text,
                        fullWidth: !0
                    }, Object(c.d)("More messages below.", "RoomList")))
                }, t.prototype.scrollToBottom = function() {
                    this.scroll.scrollToBottom()
                }, t.prototype.getRoomLines = function() {
                    var e = this,
                        t = this.props.messages;
                    return 0 === t.length && (t = [ve(Object(c.d)("Welcome to the chat room!", "RoomList"))]), t.map(function(t) {
                        return l.createElement(mn, {
                            key: t.id,
                            badgeSets: e.props.badgeSets,
                            channelID: e.props.channelID,
                            roomID: e.props.roomID,
                            hasModPermissions: e.props.hasModPermissions,
                            message: t,
                            showModerationIcons: e.props.showModerationIcons,
                            showTimestamps: e.props.showTimestamps,
                            sendMessage: e.props.sendMessage,
                            onUsernameClick: e.props.onUsernameClick
                        })
                    })
                }, t
            }(l.Component);
        var fn = n("Ucyv"),
            vn = 200,
            bn = function() {
                return function(e) {
                    var t = this;
                    this.resetWithRoomOwnerID = function(e) {
                        t.activeMemberIDs = new Set, t.activeMembers = {}, t.roomOwnerID = e, t.currentUserID = null, t.isDirty = !0
                    }, this.getActiveMembers = function() {
                        return t.isDirty = !1, Object.keys(t.activeMembers).map(function(e) {
                            return t.activeMembers[e]
                        })
                    }, this.setCurrentUserID = function(e) {
                        t.currentUserID = e, t.activeMemberIDs.has(e) && (t.isDirty = !0, t.removeActiveMember(e))
                    }, this.consumeRoomMessage = function(e) {
                        t.handleActiveMember(e.sender)
                    }, this.handleActiveMember = function(e) {
                        e.id !== t.roomOwnerID && e.id !== t.currentUserID && (t.activeMemberIDs.has(e.id) ? (t.activeMemberIDs.delete(e.id), t.addActiveMember(e)) : (t.addActiveMember(e), t.trimActiveMembers(), t.isDirty = !0))
                    }, this.addActiveMember = function(e) {
                        t.activeMemberIDs.add(e.id), t.activeMembers[e.id] = e
                    }, this.removeActiveMember = function(e) {
                        t.activeMemberIDs.delete(e), delete t.activeMembers[e]
                    }, this.trimActiveMembers = function() {
                        if (!(t.activeMemberIDs.size <= vn))
                            for (var e = t.activeMemberIDs.size - vn, n = t.activeMemberIDs.values(), i = 0; i < e; i++) {
                                var a = n.next().value;
                                t.removeActiveMember(a)
                            }
                    }, this.resetWithRoomOwnerID(e)
                }
            }(),
            kn = n("gv4B"),
            yn = n("/eRw"),
            _n = (n("TT/W"), 3e4),
            Cn = 6e4,
            Sn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        showMemberList: !1,
                        hasSeenFirstTimeRoomTopic: !1
                    }, n.hasQueuedUpdate = !1, n.isLastReadAtThrottled = !1, n.lastReadAtThrottleTimer = null, n.renderPlaceholders = function() {
                        return l.createElement(N._27, {
                            className: "room-pane",
                            display: N.P.Flex,
                            flexDirection: N.R.Column,
                            flexWrap: N.S.NoWrap,
                            position: N._11.Relative,
                            flexGrow: 1,
                            fullHeight: !0,
                            overflow: N._7.Hidden,
                            color: N.J.Base,
                            background: N.m.Alt2,
                            borderLeft: !0
                        }, l.createElement(St, null))
                    }, n.sendMessage = function(e) {
                        if (e && 0 !== e.length && n.props.sessionUser) {
                            var t = Object(Le.l)(e, n.props.channel.login);
                            if (t.command)
                                if (t.handled) t.result && t.result.deferred && t.result.deferred.then(function(e) {
                                    var t = e.notice;
                                    t && n.props.onRoomEvent(ve(t))
                                });
                                else {
                                    var i = Object(c.d)("Unrecognized command: /{command}", {
                                        command: t.command
                                    }, "RoomPane");
                                    n.props.onRoomEvent(ve(i))
                                }
                            else n.sendRoomMessage(e);
                            Object(yt.a)({
                                channelID: n.props.channelID,
                                channelLogin: n.props.channel.login,
                                isHostMode: n.props.isHostMode,
                                roomID: n.props.roomID,
                                roomMinimumRole: n.props.minimumAllowedRole,
                                player: n.props.isPopout ? kt.a.Embed : kt.a.Web,
                                subOnlyMode: n.props.minimumAllowedRole === P.b.Subscriber
                            });
                            for (var a = 0, r = Object(v.c)(e, n.props.sessionUser.displayName, !1); a < r.length; a++) {
                                var o = r[a];
                                o.type === Ce.a.Mention && o.content.recipient !== o.content.sender && Object(_t.a)({
                                    channelLogin: n.props.channel.login,
                                    isHostMode: n.props.isHostMode,
                                    mentionedUserDisplayName: o.content.recipient,
                                    roomID: n.props.roomID,
                                    roomMinimumRole: n.props.minimumAllowedRole,
                                    userLogin: n.props.sessionUser.login
                                })
                            }
                        }
                    }, n.sendRoomMessage = function(e) {
                        return s.__awaiter(n, void 0, void 0, function() {
                            var t, n, i, a, r, o, l, d, c;
                            return s.__generator(this, function(u) {
                                switch (u.label) {
                                    case 0:
                                        return [4, this.props.sendRoomMessage(Object(S.a)({
                                            roomID: this.props.roomID,
                                            message: e
                                        }))];
                                    case 1:
                                        return t = u.sent(), n = t.data.sendRoomMessage, i = n.message, a = n.error, null !== i ? (r = {
                                            sender: s.__assign({}, i.sender, {
                                                displayBadges: this.props.user.displayBadges
                                            })
                                        }, o = s.__assign({}, i, r), this.props.onRoomEvent(fe(o))) : null !== a && (l = a.code, d = a.remainingDurationSeconds, c = void 0, c = d ? G(l, {
                                            remainingDurationSeconds: d
                                        }) : G(l), this.props.onRoomEvent(ve(c))), [2]
                                }
                            })
                        })
                    }, n.showMemberList = function() {
                        n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                            showMemberList: !0
                        })
                    }, n.closeMemberList = function() {
                        n.setState({
                            showMemberList: !1
                        })
                    }, n.hasModPermissions = function() {
                        var e = n.props,
                            t = e.channel,
                            i = e.channelID,
                            a = e.sessionUser,
                            r = e.user;
                        return !!a && (r.roles.isStaff || r.roles.isGlobalMod || r.roles.isSiteAdmin || a.id === i || !!t.self && t.self.isModerator)
                    }, n.onUpdateLastReadAt = function() {
                        var e;
                        Object(pe.d)(Object(pe.c)(c.o.apollo.client.link, s.__assign({
                            query: fn
                        }, (e = n.props.roomID, s.__assign({}, Object(S.a)({
                            lastReadAt: (new Date).toISOString(),
                            roomID: e
                        }))))))
                    }, n.throttleLastReadAtUpdate = function() {
                        n.onUpdateLastReadAt(), n.isLastReadAtThrottled = !0, n.lastReadAtThrottleTimer = setTimeout(n.unthrottleLastReadAtUpdate, _n)
                    }, n.unthrottleLastReadAtUpdate = function() {
                        n.hasQueuedUpdate ? (n.throttleLastReadAtUpdate(), n.hasQueuedUpdate = !1) : n.isLastReadAtThrottled = !1
                    }, n.activeMembers = new bn(t.channelID), t.sessionUser && n.activeMembers.setCurrentUserID(t.sessionUser.id), n.trackingIntervalHandle = setInterval(function() {
                        Object(Ct.c)({
                            channelID: n.props.channelID,
                            channelLogin: n.props.channel.login,
                            clientTime: Date.now(),
                            isHostMode: n.props.isHostMode,
                            roomID: n.props.roomID,
                            roomMinimumRole: n.props.minimumAllowedRole
                        })
                    }, Cn), n
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t, n, i = this,
                        a = this.props;
                    !e.loading && (e.isFirstTimeVisit && e.roomTopic.length > 0 && !this.state.hasSeenFirstTimeRoomTopic || void 0 !== this.props.roomTopic && this.props.roomTopic !== e.roomTopic) && (this.setState({
                        hasSeenFirstTimeRoomTopic: !0
                    }), this.props.onRoomEvent((t = e.roomTopic, n = Object(c.d)('Broadcaster set this room\'s topic to "{topic}"', {
                        topic: t
                    }, "RoomTopic"), {
                        kind: de.SystemMessageEvent,
                        id: Object(ge.a)("initialRoomTopicMessage"),
                        text: n
                    }))), e.sessionUser && a.sessionUser !== e.sessionUser && this.activeMembers.setCurrentUserID(e.sessionUser.id), a.channelID !== e.channelID && this.activeMembers.resetWithRoomOwnerID(e.channelID);
                    var r = a.roomEvents.length;
                    (this.props.loading && !e.loading || r !== e.roomEvents.length) && a.roomEvents[r - 1] === e.roomEvents[r - 1] && e.roomEvents.slice(r).forEach(function(e) {
                        e.kind === de.RoomMessageEvent && i.activeMembers.consumeRoomMessage(fe(e))
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    (e.loading && !this.props.loading || e.roomEvents.length !== this.props.roomEvents.length) && (this.isLastReadAtThrottled ? this.hasQueuedUpdate = !0 : this.throttleLastReadAtUpdate())
                }, t.prototype.componentWillUnmount = function() {
                    this.lastReadAtThrottleTimer && clearTimeout(this.lastReadAtThrottleTimer), this.trackingIntervalHandle && clearInterval(this.trackingIntervalHandle)
                }, t.prototype.render = function() {
                    if (this.props.loading || !this.props.bufferLoaded) return this.renderPlaceholders();
                    if (this.props.error) return l.createElement(N._4, null);
                    var e = this.state.showMemberList && l.createElement(Rt, {
                            roomID: this.props.roomID,
                            closeMemberList: this.closeMemberList
                        }),
                        t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                        n = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {};
                    return l.createElement(N._27, {
                        className: "room-pane",
                        display: N.P.Flex,
                        flexDirection: N.R.Column,
                        flexWrap: N.S.NoWrap,
                        position: N._11.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: N._7.Hidden,
                        color: N.J.Base,
                        background: N.m.Alt2,
                        borderLeft: !0
                    }, l.createElement(Ue, {
                        channelID: this.props.channelID
                    }), l.createElement(He, null), l.createElement(qe, {
                        roomID: this.props.roomID
                    }), l.createElement(Qe, null), l.createElement(Ye.a, {
                        currentUserLogin: this.props.sessionUser && this.props.sessionUser.login
                    }), l.createElement(Ke, {
                        sendMessage: this.sendRoomMessage
                    }), l.createElement(ct, {
                        channelID: this.props.channelID
                    }), l.createElement(mt, {
                        roomID: this.props.roomID
                    }), l.createElement(gt, {
                        roomID: this.props.roomID
                    }), l.createElement(ft.a, {
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        userLogin: this.props.user.login,
                        userID: this.props.user.id,
                        emoteMap: n
                    }), l.createElement(vt.a, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }), l.createElement(gn, {
                        badgeSets: this.props.badgeSets,
                        channelID: this.props.channelID,
                        roomID: this.props.roomID,
                        hasModPermissions: this.hasModPermissions(),
                        isBulkLoad: this.props.isBulkLoad,
                        loadOlder: this.props.loadOlder,
                        loadNewer: this.props.loadNewer,
                        messages: this.props.roomEvents,
                        hasOlderLeft: this.props.hasOlderLeft,
                        hasNewerLeft: this.props.hasNewerLeft,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        sendMessage: this.sendMessage,
                        onUsernameClick: this.props.onUsernameClick,
                        loadNewest: this.props.loadNewest
                    }), e, l.createElement(rn, {
                        activeMembers: this.activeMembers,
                        allowedToChat: this.props.allowedToChat,
                        bitsConfig: this.props.bitsConfig,
                        channelDisplayName: this.props.channel.displayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channel.login,
                        emotes: t,
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        isPopout: this.props.isPopout,
                        roomID: this.props.roomID,
                        sendMessage: this.sendMessage,
                        showMemberList: this.showMemberList
                    }), l.createElement(N._4, {
                        className: "room-pane__viewer-card",
                        fullHeight: !0,
                        fullWidth: !0,
                        position: N._11.Absolute,
                        zIndex: N._53.Default
                    }, l.createElement(bt.a, {
                        isPopout: this.props.isPopout,
                        isEmbedded: !1,
                        onSendMessage: this.sendMessage,
                        channelID: this.props.channelID
                    })))
                }, t
            }(l.Component),
            En = Object(d.compose)(Object(m.a)(kn, {
                props: function(e) {
                    var t;
                    e.data && e.data.room && e.data.room.owner.cheer && (t = Object(Ie.a)(e.data.room.owner.cheer.emotes || []));
                    var n = new Oe.c([]);
                    return e.data && e.data.badges && e.data.room && e.data.room.owner.broadcastBadges && (n = new Oe.c(e.data.badges, e.data.room.owner.broadcastBadges, e.data.room.owner.login)), {
                        error: e.data && e.data.error,
                        loading: !e.data || e.data.loading,
                        badgeSets: n,
                        bitsConfig: t,
                        channel: e.data && e.data.room && e.data.room.owner,
                        roomTopic: e.data && e.data.room && e.data.room.topic,
                        user: e.data && e.data.user,
                        isFirstTimeVisit: e.data && e.data.room && null === e.data.room.self.lastReadAt,
                        minimumAllowedRole: e.data && e.data.room && e.data.room.minimumAllowedRole
                    }
                },
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            channelID: e.channelID,
                            roomID: e.roomID,
                            isLoggedIn: e.isLoggedIn,
                            userID: e.sessionUser && e.sessionUser.id
                        }
                    }
                }
            }), Object(De.a)(), Object(m.a)(yn, {
                name: "sendRoomMessage"
            }), Object(b.d)("RoomPane"))(Sn),
            Nn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onRoomBufferUpdate = function() {
                        n.syncBufferHandle || (n.syncBufferHandle = setTimeout(n.syncBufferedMessages, 0))
                    }, n.onInitialLoad = function() {
                        n.syncBufferedMessages(!0)
                    }, n.syncBufferedMessages = function(e) {
                        void 0 === e && (e = !1), n.roomBuffer && n.roomBuffer.isDirty && (n.state.bufferLoaded || e) && n.setState({
                            bufferLoaded: n.state.bufferLoaded || e,
                            roomEvents: n.roomBuffer.toArray(),
                            hasOlderLeft: n.roomBuffer.hasOlderLeft,
                            hasNewerLeft: n.roomBuffer.hasNewerLeft,
                            isBulkLoad: n.roomBuffer.isBulkLoad
                        }, function() {
                            n.clearBufferHandle()
                        })
                    }, n.clearBufferHandle = function() {
                        n.syncBufferHandle && (clearTimeout(n.syncBufferHandle), n.syncBufferHandle = 0)
                    }, n.roomBuffer = new _e(t.roomID, t.channelID, n.onRoomBufferUpdate, n.onInitialLoad), n.roomService = new we(t.roomID, t.channelID, n.roomBuffer.consumeRoomEvent), n.roomBuffer.setBlockedUsers(t.blockedUsers), n.state = {
                        roomEvents: [],
                        isBulkLoad: !1,
                        bufferLoaded: !1,
                        hasOlderLeft: !0,
                        hasNewerLeft: !0
                    }, n
                }
                return s.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.blockedUsers !== e.blockedUsers && this.roomBuffer.setBlockedUsers(e.blockedUsers)
                }, t.prototype.componentWillUnmount = function() {
                    this.roomService.unsubscribe(), this.clearBufferHandle()
                }, t.prototype.componentDidMount = function() {
                    this.roomBuffer.loadOlder()
                }, t.prototype.render = function() {
                    return l.createElement(En, s.__assign({}, this.props, {
                        hasOlderLeft: this.state.hasOlderLeft,
                        hasNewerLeft: this.state.hasNewerLeft,
                        isBulkLoad: this.state.isBulkLoad,
                        bufferLoaded: this.state.bufferLoaded,
                        loadNewer: this.roomBuffer.loadNewer,
                        loadOlder: this.roomBuffer.loadOlder,
                        onRoomEvent: this.roomBuffer.consumeRoomEvent,
                        roomEvents: this.state.roomEvents,
                        closeRoomPicker: this.props.closeRoomPicker,
                        loadNewest: this.roomBuffer.loadNewest
                    }))
                }, t
            }(l.Component);
        var wn = Object(d.compose)(Object(i.b)(function(e) {
                return {
                    sessionUser: Object(r.c)(e),
                    isLoggedIn: Object(r.d)(e),
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps
                }
            }, function(e) {
                return Object(a.b)({
                    onUsernameClick: me.d
                }, e)
            }), Object(ue.a)())(Nn),
            Dn = n("CHV0"),
            On = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    c.k.subscribe({
                        topic: Object(g.e)(this.props.channelID),
                        onMessage: function(t) {
                            t.type === h.PubsubMessageType.ChatRoomDeleted && e.props.roomID === t.data.room.room_id && e.props.onDelete && e.props.onDelete()
                        }
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.data;
                    !t || !e.data || t.loading || e.data.loading || e.data.room.isPreviewable === t.room.isPreviewable && e.data.room.minimumAllowedRole === t.room.minimumAllowedRole || t.refetch()
                }, t.prototype.render = function() {
                    return this.props.data ? this.props.data.loading ? l.createElement(N._4, null) : this.props.data.error || !this.props.data.room || this.props.data.room.minimumAllowedRole === P.b.Moderator && !this.props.data.room.self.permissions.readMessages ? l.createElement(ce, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: re.BadPermissions
                    }) : this.props.isDeleted ? l.createElement(ce, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: re.Deleted
                    }) : this.props.data.room.self.permissions.readMessages || this.props.data.room.minimumAllowedRole !== P.b.Subscriber ? this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? l.createElement(ce, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: re.Banned
                    }) : l.createElement(wn, {
                        key: this.props.roomID,
                        allowedToChat: this.props.data.room.self.permissions.sendMessages,
                        channelID: this.props.channelID,
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.props.closeRoomPicker,
                        isHostMode: this.props.isHostMode
                    }) : l.createElement(ce, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: re.NoPreview
                    }) : null
                }, t
            }(l.Component),
            In = Object(d.compose)(Object(m.a)(Dn, {
                options: function(e) {
                    return {
                        variables: {
                            roomID: e.roomID,
                            channelID: e.channelID,
                            userID: e.sessionUser && e.sessionUser.id
                        }
                    }
                },
                skip: function(e) {
                    return !e.sessionUser
                }
            }), Object(p.a)(function(e) {
                return {
                    query: Dn,
                    variables: {
                        roomID: e.roomID,
                        channelID: e.channelID,
                        userID: e.sessionUser && e.sessionUser.id
                    },
                    topic: Object(g.d)(e.roomID),
                    type: h.PubsubMessageType.ChatRoomUpdated,
                    mutator: function(e, t) {
                        return e.type === h.PubsubMessageType.ChatRoomUpdated && (t.room.name = e.data.room.name, t.room.topic = e.data.room.topic, t.room.isPreviewable = e.data.room.is_previewable, t.room.minimumAllowedRole = e.data.room.minimum_allowed_role), t
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: Dn,
                    variables: {
                        roomID: e.roomID,
                        channelID: e.channelID,
                        userID: e.sessionUser && e.sessionUser.id
                    },
                    topic: Object(g.f)("" + (e.sessionUser && e.sessionUser.id)),
                    type: h.PubsubMessageType.ChatRoomsRoomViewUpdated,
                    mutator: function(t, n) {
                        return t.data.room_view.room.room_id === e.roomID && (n.room.self.permissions.readMessages = t.data.room_view.permissions.read_messages, n.room.self.permissions.sendMessages = t.data.room_view.permissions.send_messages, n.user.self.isModerator = t.data.room_view.permissions.moderate), n
                    }
                }
            }), Object(b.d)("Room"))(On);
        var Rn = Object(i.b)(function(e) {
                return {
                    sessionUser: Object(r.c)(e)
                }
            })(In),
            Tn = n("M8zv"),
            Mn = n.n(Tn),
            Ln = n("cxb0"),
            xn = n("Oioc"),
            An = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        var e = s.__assign({}, Object(S.a)({
                            channelID: t.props.channelID
                        }), {
                            optimisticResponse: {
                                joinChannelRooms: {
                                    __typename: "JoinChannelRoomsPayload",
                                    channel: {
                                        self: {
                                            isChannelMember: !0,
                                            __typename: "UserSelfConnection"
                                        },
                                        __typename: "User"
                                    }
                                }
                            }
                        });
                        t.props.joinRooms(e).then(function(e) {
                            Object(S.d)(Ln, {
                                channelID: t.props.channelID,
                                userID: t.props.sessionUser && t.props.sessionUser.id
                            }, function(t) {
                                return t.user.self.isChannelMember = e.data.joinChannelRooms.channel.self.isChannelMember, t
                            })
                        }), t.props.handleJoinRooms && t.props.handleJoinRooms()
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.shouldRender() ? l.createElement(N._4, null, this.getButtonContent(), this.renderBanText()) : null
                }, t.prototype.shouldRender = function() {
                    return this.props.data && !this.props.data.error && this.props.data.user && this.props.sessionUser && this.props.sessionUser.id.toString() !== this.props.channelID && !this.props.data.user.self.isChannelMember
                }, t.prototype.getButtonContent = function() {
                    var e = this.props.data;
                    if (e && !e.loading) {
                        var t = e.user.displayName,
                            n = Object(c.d)("Join {displayName}'s Rooms", {
                                displayName: t
                            }, "JoinRoomsButton");
                        return l.createElement(N.u, {
                            "data-test-selector": "join-rooms-button",
                            disabled: e.chatRoomBanStatus && e.chatRoomBanStatus.isPermanent,
                            onClick: this.handleClick
                        }, n)
                    }
                    if (e && e.loading) return l.createElement(N._10, {
                        width: 160,
                        height: 30
                    })
                }, t.prototype.renderBanText = function() {
                    var e = this.props.data;
                    if (e && e.chatRoomBanStatus && e.chatRoomBanStatus.isPermanent) return l.createElement(N._4, {
                        padding: {
                            top: .5
                        }
                    }, l.createElement(N.O, {
                        "data-test-selector": "ban-status-text",
                        color: N.J.Error
                    }, Object(c.d)("You are banned and can't rejoin Rooms", "JoinRoomsButton")))
                }, t = s.__decorate([Object(m.a)(xn, {
                    name: "joinRooms"
                }), Object(m.a)(Ln, {
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID,
                                userID: e.sessionUser && e.sessionUser.id
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.sessionUser
                    }
                }), Object(b.d)("JoinRoomsButton")], t)
            }(l.Component);
        var Fn, jn = Object(i.b)(function(e) {
                return {
                    sessionUser: Object(r.c)(e)
                }
            })(An),
            Bn = n("q+qZ"),
            Un = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.createRoom = function() {
                        if (K(t.props.roomName)) t.props.createRoom(Object(S.a)({
                            name: t.props.roomName,
                            topic: t.props.roomTopic,
                            isPreviewable: t.props.isRoomPreviewable,
                            minimumAllowedRole: t.props.roomMinimumAllowedRole
                        })).then(function(e) {
                            if (e.data.createRoom.error && t.props.onCreateHandler) {
                                var n = e.data.createRoom.error,
                                    i = n.code,
                                    a = n.minLength,
                                    r = G(i, {
                                        maxChars: n.maxLength,
                                        minChars: a
                                    });
                                t.props.onCreateHandler(r)
                            } else t.props.onCreateHandler && t.props.onCreateHandler()
                        });
                        else if (t.props.onCreateHandler) {
                            var e = G("NAME_LENGTH_INVALID", {
                                maxChars: z,
                                minChars: $
                            });
                            t.props.onCreateHandler(e)
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.isPrimaryCTA ? N.A.Default : N.A.Hollow;
                    return l.createElement(N.u, {
                        onClick: this.createRoom,
                        type: e,
                        "data-test-selector": "create-room-button"
                    }, this.getButtonText())
                }, t.prototype.getButtonText = function() {
                    return Object(c.d)("Create", "CreateRoomButton")
                }, t = s.__decorate([Object(m.a)(Bn, {
                    name: "createRoom"
                })], t)
            }(l.Component),
            Pn = (n("E9JN"), {
                align: N._45.Right,
                direction: N._46.Top,
                label: "",
                offsetX: "-2%"
            }),
            Vn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onCreateHandler = function(e) {
                        e ? n.setState({
                            roomCreationError: e
                        }) : n.props.onCloseRoomCreator()
                    }, n.onRoomNameChange = function(e) {
                        var t, i = e.target.value.toLowerCase();
                        if (Q(i)) {
                            if (Y(i)) {
                                t = G("NAME_LENGTH_INVALID", {
                                    maxChars: z,
                                    minChars: $
                                })
                            }
                        } else t = G("NAME_CONTAINS_INVALID_CHARACTERS");
                        n.setState({
                            roomName: i,
                            roomCreationError: t
                        })
                    }, n.updatePermissions = function(e) {
                        n.setState({
                            isRoomPreviewable: e.isPreviewable,
                            roomMinimumAllowedRole: e.minimumAllowedRole
                        })
                    }, n.state = {
                        roomName: t.roomName || "",
                        roomTopic: "",
                        isRoomPreviewable: !0,
                        roomMinimumAllowedRole: P.b.Everyone
                    }, n
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = P.a[this.state.roomMinimumAllowedRole];
                    Pn.label = Object(c.d)("Chat Permission: {permissionRole}", {
                        permissionRole: e
                    }, "RoomCreator");
                    var t = {
                        isPreviewable: this.state.isRoomPreviewable,
                        minimumAllowedRole: this.state.roomMinimumAllowedRole
                    };
                    return l.createElement(N._4, {
                        className: "room-creator",
                        padding: {
                            y: 1,
                            x: 2
                        }
                    }, l.createElement(N._4, null, l.createElement(N._4, {
                        position: N._11.Relative
                    }, l.createElement(N._0, {
                        autoFocus: !0,
                        "data-test-selector": "room-creator-input",
                        error: !!this.state.roomCreationError,
                        icon: ae(t, !0),
                        type: N._1.Text,
                        value: this.state.roomName,
                        onChange: this.onRoomNameChange,
                        maxLength: 26,
                        placeholder: Object(c.d)("Enter Room name here", "RoomCreator")
                    }), this.renderRoomCreationError(), l.createElement(N._4, {
                        position: N._11.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        display: N.P.Flex,
                        className: "room-creator__permissions"
                    }, l.createElement(N._27, {
                        display: N.P.Flex,
                        alignItems: N.c.Center,
                        padding: {
                            right: 1
                        }
                    }, l.createElement(k.a, {
                        tooltipProps: Pn
                    }, l.createElement(N.M, null, l.createElement(N._4, {
                        display: N.P.Flex
                    }, l.createElement(N._4, {
                        padding: {
                            right: .5
                        }
                    }, Object(c.d)("{permissionRole}", {
                        permissionRole: e
                    }, "RoomCreator")), l.createElement(N._17, {
                        asset: N._18.GlyphArrDown
                    }))), l.createElement(N.p, {
                        direction: N.q.BottomRight,
                        size: N.r.Small,
                        noTail: !0,
                        offsetY: "0.5rem",
                        offsetX: "-1rem"
                    }, l.createElement(V, {
                        updatePermissions: this.updatePermissions
                    })))))), l.createElement(N._4, {
                        display: N.P.Flex,
                        margin: {
                            top: 1
                        },
                        justifyContent: N._3.End
                    }, l.createElement(N._4, {
                        padding: {
                            right: 1
                        }
                    }, l.createElement(N.u, {
                        onClick: this.props.onCloseRoomCreator,
                        type: N.A.Text
                    }, Object(c.d)("Cancel", "RoomCreator"))), l.createElement(Un, {
                        isPrimaryCTA: !0,
                        roomName: this.state.roomName,
                        roomTopic: this.state.roomTopic,
                        isRoomPreviewable: this.state.isRoomPreviewable,
                        roomMinimumAllowedRole: this.state.roomMinimumAllowedRole,
                        onCreateHandler: this.onCreateHandler,
                        "data-test-selector": "create-room-button"
                    })), l.createElement(N._27, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            y: 1
                        }
                    })))
                }, t.prototype.renderRoomCreationError = function() {
                    if (this.state.roomCreationError) return l.createElement(N.O, {
                        color: N.J.Error,
                        "data-test-selector": "room-creation-error-text"
                    }, this.state.roomCreationError)
                }, t
            }(l.Component),
            Hn = n("rCmJ"),
            Wn = n("pe3h"),
            Gn = (n("XViT"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onClick = function() {
                        !n.props.sessionUser || n.props.data && !n.props.data.room.owner.self.isChannelMember || n.props.handleClick(n.props.roomID, n.props.roomName)
                    }, n.closeViews = function() {
                        n.setState({
                            showOptionView: !1
                        })
                    }, n.toggleOptionView = function() {
                        n.state.showOptionView ? n.closeViews() : n.state.showOptionView || n.setState({
                            showOptionView: !0
                        })
                    }, n.state = {
                        showOptionView: !1
                    }, n
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data;
                    if (e && e.loading) return l.createElement(N._10, {
                        width: 160
                    });
                    if (e && e.error) return l.createElement(N._4, null);
                    var t = !this.props.sessionUser || e && !e.room.owner.self.isChannelMember,
                        n = N._18.Lock,
                        i = !1,
                        a = !1;
                    e && (n = ae({
                        isPreviewable: e && e.room.isPreviewable,
                        minimumAllowedRole: e && e.room.minimumAllowedRole
                    }, e.room.self.permissions.sendMessages), i = e.room.self.isUnread && e.room.owner.self.isChannelMember, a = e.room.self.isMuted && e.room.owner.self.isChannelMember);
                    return l.createElement(N._27, {
                        position: N._11.Relative,
                        "data-test-selector": "interactable-wrapper",
                        className: "room-picker-option\n          " + (this.props.isActiveRoom ? "room-picker-option--active" : "") + "\n          " + (this.state.showOptionView && !t ? "room-picker-option--hover" : "") + "\n          " + (t ? "room-picker-option--disabled" : "")
                    }, l.createElement(N._2, {
                        onClick: this.onClick,
                        disabled: t,
                        "data-test-selector": "room-option-interactable",
                        hover: this.state.showOptionView && !t
                    }, l.createElement(N._4, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        display: N.P.Flex,
                        className: "room-picker-option__label",
                        fullWidth: !0
                    }, l.createElement(N._4, {
                        display: N.P.Flex,
                        alignItems: N.c.Center,
                        flexGrow: 1
                    }, l.createElement(N._27, {
                        className: "room-picker-option__permission-icon",
                        display: N.P.Flex,
                        padding: {
                            right: .5
                        }
                    }, l.createElement(N._17, {
                        height: 14,
                        asset: n
                    })), l.createElement(N.O, {
                        bold: i && !this.props.isActiveRoom
                    }, this.props.roomName)), l.createElement(N._4, {
                        display: N.P.Flex,
                        alignItems: N.c.Center,
                        margin: {
                            right: 2
                        }
                    }, a && l.createElement(N._27, {
                        padding: {
                            left: .5
                        },
                        display: N.P.Flex,
                        className: "room-picker-option__muted-icon"
                    }, l.createElement(N._17, {
                        asset: N._18.WhisperMuted
                    })), this.renderMentionsPill()))), this.renderRoomDetailsBalloonToggle())
                }, t.prototype.renderRoomDetailsBalloonToggle = function() {
                    var e = this.props.data;
                    if (!this.props.sessionUser || !e || e.chatRoomBanStatus && e.chatRoomBanStatus.isPermanent) return null;
                    var t = e.room.owner.self.isChannelMember;
                    return l.createElement(N._4, {
                        margin: {
                            right: 1
                        },
                        position: N._11.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        display: t ? void 0 : N.P.Block,
                        className: "room-picker-option__settings " + (t ? "" : "room-picker-option__settings--disabled")
                    }, l.createElement(Hn.a, {
                        onClickOut: this.closeViews
                    }, l.createElement("div", {
                        className: "room-picker-option__picker-settings " + (this.state.showOptionView ? "room-picker-option__picker-settings--show" : "")
                    }, l.createElement(N.v, {
                        ariaLabel: Object(c.d)("More options", "RoomPickerOption"),
                        "data-test-selector": "room-details",
                        icon: N._18.More,
                        onClick: this.toggleOptionView,
                        overlay: t
                    })), l.createElement(N.p, {
                        direction: N.q.BottomRight,
                        noTail: !0,
                        size: N.r.Small,
                        offsetY: "-0.5rem",
                        offsetX: "1rem",
                        show: !!this.state.showOptionView
                    }, l.createElement(ie, {
                        roomID: this.props.roomID
                    }))))
                }, t.prototype.renderMentionsPill = function() {
                    return this.props.isActiveRoom || !this.props.data || this.props.data.room.self.unreadMentionCount <= 0 || this.props.data.room.self.isMuted || !this.props.data.room.owner.self.isChannelMember ? null : l.createElement(N._4, {
                        padding: {
                            left: .5
                        }
                    }, l.createElement(N._8, {
                        label: this.props.data.room.self.unreadMentionCount.toString(),
                        type: N._9.Alert
                    }))
                }, t = s.__decorate([Object(m.a)(Wn, {
                    options: function(e) {
                        return {
                            variables: {
                                roomID: e.roomID,
                                channelID: e.channelID,
                                userID: e.sessionUser && e.sessionUser.id
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.sessionUser
                    }
                })], t)
            }(l.Component));
        n("fNhT");
        ! function(e) {
            e[e.SUB = 0] = "SUB", e[e.MOD = 1] = "MOD"
        }(Fn || (Fn = {}));
        var qn = function(e) {
                var t, n, i, a, r, o;
                return e.type === Fn.SUB ? (t = Object(c.d)("subscriber-room", "RoomUpsell_SubUpsellName"), n = Object(c.d)("Create a place for your subscribers to hang out", "RoomUpsell_SubUpsellTopic"), i = Object(c.d)("subscriber-room", "RoomUpsell_SubUpsellNameCreate"), a = Object(c.d)("Create a place for your subscribers to hang out", "RoomUpsell_SubUpsellTopicCreate"), r = P.b.Subscriber, o = !0) : (t = Object(c.d)("moderator-room", "RoomUpsell_ModUpsellName"), n = Object(c.d)("Give your moderators a place to sharpen their swords", "RoomUpsell_ModUpsellTopic"), i = Object(c.d)("moderator-room", "RoomUpsell_ModUpsellNameCreate"), a = Object(c.d)("Give your moderators a place to sharpen their swords", "RoomUpsell_ModUpsellTopicCreate"), r = P.b.Moderator, o = !1), l.createElement(N._27, {
                    display: N.P.Flex,
                    padding: {
                        y: 1,
                        x: 2
                    },
                    className: "room-upsell",
                    elevation: 2
                }, l.createElement(N.W, {
                    gutterSize: N.X.None
                }, l.createElement(N.K, {
                    cols: 9
                }, l.createElement(N._4, {
                    display: N.P.Flex
                }, l.createElement(N._4, {
                    padding: {
                        right: .5
                    },
                    display: N.P.Flex,
                    alignItems: N.c.Center
                }, l.createElement(N._17, {
                    type: N._19.Alt2,
                    height: 14,
                    asset: N._18.Unlock
                })), l.createElement(N.O, {
                    color: N.J.Alt,
                    type: N._41.Strong
                }, t)), l.createElement(N.O, {
                    color: N.J.Alt2,
                    className: "room-upsell__text"
                }, n)), l.createElement(N.K, {
                    cols: 3
                }, l.createElement(N._4, {
                    display: N.P.Flex,
                    flexDirection: N.R.Column,
                    fullHeight: !0,
                    justifyContent: N._3.Center,
                    padding: {
                        left: .5
                    }
                }, l.createElement(Un, {
                    isPrimaryCTA: !1,
                    roomName: i,
                    roomTopic: a,
                    isRoomPreviewable: o,
                    roomMinimumAllowedRole: r
                })))))
            },
            zn = n("d7Cs"),
            $n = n("4hnS"),
            Jn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleLeave = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return s.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return e = s.__assign({}, Object(S.a)({
                                            channelID: this.props.channelID
                                        }), {
                                            optimisticResponse: {
                                                leaveChannelRooms: {
                                                    __typename: "LeaveChannelRoomsPayload",
                                                    channel: {
                                                        self: {
                                                            isChannelMember: !0,
                                                            __typename: "UserSelfConnection"
                                                        },
                                                        __typename: "User"
                                                    }
                                                }
                                            }
                                        }), this.props.handleDismiss(), [4, this.props.leaveRooms(e)];
                                    case 1:
                                        return t = i.sent(), n = function(e) {
                                            return e.user.self.isChannelMember = t.data.leaveChannelRooms.channel.self.isChannelMember, e
                                        }, Object(S.d)(zn, {
                                            id: this.props.channelID
                                        }, n), [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading || this.props.data.error) return l.createElement(N._4, null);
                    var e = this.props.data.user.displayName;
                    return l.createElement(N._4, {
                        padding: {
                            y: 1,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(N.O, {
                        color: N.J.Error
                    }, Object(c.d)("Leave {displayName}'s Rooms?", {
                        displayName: e
                    }, "LeaveRoomsPrompt")), l.createElement(N._4, {
                        display: N.P.Flex,
                        padding: {
                            top: .5
                        }
                    }, l.createElement(N._4, {
                        padding: {
                            right: .5
                        }
                    }, l.createElement(N.u, {
                        "data-test-selector": "confirm-leave-button",
                        onClick: this.handleLeave,
                        type: N.A.Alert
                    }, Object(c.d)("Leave", "LeaveRoomsPrompt"))), l.createElement(N.u, {
                        "data-test-selector": "cancel-leave-button",
                        onClick: this.props.handleDismiss,
                        type: N.A.Hollow
                    }, Object(c.d)("Cancel", "LeaveRoomsPrompt"))))
                }, t = s.__decorate([Object(b.d)("LeaveRoomsPrompt"), Object(m.a)($n, {
                    name: "leaveRooms"
                }), Object(m.a)(zn, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                })], t)
            }(l.Component),
            Qn = n("Fvfv"),
            Yn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        shouldShowLeaveRoomsPrompt: !1
                    }, t.openLeaveRoomsPrompt = function() {
                        t.setState({
                            shouldShowLeaveRoomsPrompt: !0
                        })
                    }, t.closeLeaveRoomsPrompt = function() {
                        t.setState({
                            shouldShowLeaveRoomsPrompt: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return this.props.data.loading || this.props.data.error ? l.createElement(N._4, null) : this.shouldRender() ? l.createElement(k.a, null, l.createElement(N.v, {
                        "data-test-selector": "toggle-balloon-button",
                        ariaLabel: Object(c.d)("More options", "RoomsMemberOptions"),
                        icon: N._18.More
                    }), l.createElement(N.p, {
                        direction: N.q.BottomRight,
                        noTail: !0,
                        offsetY: "0rem"
                    }, l.createElement(N._4, {
                        padding: {
                            y: .5
                        }
                    }, this.renderLeaveOption()))) : null
                }, t.prototype.shouldRender = function() {
                    return this.props.isLoggedIn && this.props.data.user.self.isChannelMember
                }, t.prototype.renderLeaveOption = function() {
                    return this.state.shouldShowLeaveRoomsPrompt ? l.createElement(Jn, {
                        channelID: this.props.channelID,
                        handleDismiss: this.closeLeaveRoomsPrompt
                    }) : l.createElement(N._2, {
                        alpha: !0,
                        alert: !0,
                        "data-test-selector": "open-leave-prompt",
                        onClick: this.openLeaveRoomsPrompt
                    }, l.createElement(N._27, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        }
                    }, Object(c.d)("Leave", "RoomsMemberOptions")))
                }, t = s.__decorate([Object(m.a)(Qn, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                })], t)
            }(l.Component),
            Kn = n("QY1R"),
            Zn = (n("nhCy"), "Stream Chat"),
            Xn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        shouldShowRoomCreator: !1
                    }, t.onPickChat = function() {
                        t.props.handleRoomSelect(Zn, Zn)
                    }, t.showRoomCreator = function() {
                        t.setState({
                            shouldShowRoomCreator: !0
                        })
                    }, t.hideRoomCreator = function() {
                        t.setState({
                            shouldShowRoomCreator: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    if (!this.props.data.loading && !this.props.data.error && this.props.data.user) {
                        var e = this.props.data.user.channelRooms.length;
                        if (this.props.sessionUser) e += this.props.sessionUser.id === this.props.channelID ? 1 : 0, e += !this.props.data.user.self.isChannelMember ? 1 : 0;
                        this.props.latencyTracking.reportInteractive(e)
                    }
                }, t.prototype.render = function() {
                    if (this.props.data.loading && !this.props.data.user) return l.createElement(N._27, {
                        "data-test-selector": "room-picker-loading-state",
                        attachRight: !0,
                        className: "room-picker",
                        background: N.m.Alt,
                        border: !0,
                        position: N._11.Absolute,
                        elevation: 2,
                        zIndex: N._53.Above
                    }, l.createElement(N._4, {
                        key: "chat",
                        margin: {
                            y: .5
                        }
                    }, l.createElement(N._2, {
                        onClick: this.onPickChat,
                        alpha: !0
                    }, l.createElement(N._4, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        display: N.P.Flex
                    }, l.createElement(N._10, {
                        width: 160
                    })))), l.createElement(N._27, {
                        background: N.m.Alt2,
                        padding: {
                            left: 2,
                            right: 1
                        },
                        fullWidth: !0,
                        borderTop: !0,
                        borderBottom: !0
                    }, l.createElement(N._10, {
                        width: 80
                    })), l.createElement(N._4, {
                        padding: {
                            y: .5,
                            x: 2
                        }
                    }, l.createElement(N._10, {
                        width: 120
                    }), l.createElement(N._10, {
                        width: 160
                    })));
                    if (this.props.data.error) return l.createElement(N._4, null);
                    var e = this.props.isChannelLive ? N.H.Live : N.H.Offline;
                    return l.createElement(N._27, {
                        attachRight: !0,
                        className: "room-picker",
                        background: N.m.Alt,
                        border: !0,
                        position: N._11.Absolute,
                        elevation: 2,
                        zIndex: N._53.Above
                    }, l.createElement(N._4, {
                        margin: {
                            y: .5
                        }
                    }, l.createElement(N._2, {
                        "data-test-selector": "stream-chat-room-picker-option",
                        onClick: this.onPickChat
                    }, l.createElement(N._4, {
                        className: "room-picker__label " + (this.props.activeRoomID === Zn ? "room-picker__label--active-main" : ""),
                        key: Zn,
                        padding: {
                            y: .5,
                            x: 2
                        },
                        display: N.P.Flex
                    }, l.createElement(N._27, {
                        textAlign: N._37.Center,
                        padding: {
                            left: .5,
                            right: 1
                        }
                    }, l.createElement(N.F, {
                        status: e
                    })), l.createElement(N._4, null, l.createElement("span", null, Object(c.d)("Stream Chat", "RoomPicker")))))), this.getRoomNumberHeader(), this.renderRoomCreator(), this.renderRoomOnboarding(), this.getExistingRoomsList(), this.getUpsellRoomsList(), this.renderParticipationCTA())
                }, t.prototype.getExistingRoomsList = function() {
                    var e = this,
                        t = this.props.data.user.channelRooms;
                    if (0 === t.length) return null;
                    var n = t.map(function(t) {
                        return l.createElement(Gn, {
                            channelID: e.props.channelID,
                            isActiveRoom: t.id === e.props.activeRoomID,
                            key: "room-picker-option-" + t.id,
                            roomID: t.id,
                            roomName: t.name,
                            handleClick: e.props.handleRoomSelect,
                            sessionUser: e.props.sessionUser
                        })
                    });
                    return l.createElement(N._4, {
                        margin: {
                            y: .5
                        }
                    }, n)
                }, t.prototype.getUpsellRoomsList = function() {
                    if (this.props.sessionUser && this.props.sessionUser.id === this.props.channelID) {
                        var e = this.props.data.user,
                            t = e.channelRooms,
                            n = e.maxAllowedChannelRooms,
                            i = [];
                        if (n && t.length < n) {
                            var a = !0,
                                r = !0;
                            t.forEach(function(e) {
                                e.name !== Object(c.d)("subscriber-room", "RoomPicker_SubUpsellCheck") && e.minimumAllowedRole !== P.b.Subscriber || (a = !1), e.name !== Object(c.d)("moderator-room", "RoomPicker_ModUpsellCheck") && e.minimumAllowedRole !== P.b.Moderator || (r = !1)
                            }), a && this.props.data.user.subscriptionProducts.length > 0 && i.push(l.createElement(qn, {
                                type: Fn.SUB,
                                key: "sub-upsell"
                            })), r && i.push(l.createElement(qn, {
                                type: Fn.MOD,
                                key: "mod-upsell"
                            }))
                        }
                        return l.createElement(N._4, null, i)
                    }
                }, t.prototype.getRoomNumberHeader = function() {
                    var e, t = this.props.data.user.channelRooms.length,
                        n = !this.props.data.user.maxAllowedChannelRooms || t >= this.props.data.user.maxAllowedChannelRooms;
                    return e = 0 === t ? Object(c.d)("NO ROOMS YET.", "RoomPicker") : 1 === t ? Object(c.d)("1 ROOM", "RoomPicker") : Object(c.d)("{numRooms} ROOMS", {
                        numRooms: t
                    }, "RoomPicker"), l.createElement(N._27, {
                        "data-test-selector": "room-picker-header",
                        className: "room-picker__header",
                        background: N.m.Alt2,
                        display: N.P.Flex,
                        alignItems: N.c.Center,
                        justifyContent: N._3.Between,
                        padding: {
                            left: 2,
                            right: 1
                        },
                        fullWidth: !0,
                        borderTop: !0,
                        borderBottom: !0
                    }, l.createElement(N.O, {
                        type: N._41.Strong,
                        color: N.J.Alt2
                    }, e), this.renderRoomNumHeaderButton(n))
                }, t.prototype.renderParticipationCTA = function() {
                    var e = this.props.data.user.displayName;
                    return this.props.sessionUser ? 0 === this.props.data.user.channelRooms.length && this.props.channelID !== this.props.sessionUser.id ? l.createElement(N._4, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        margin: {
                            top: .5,
                            bottom: 1
                        }
                    }, l.createElement(N.O, {
                        color: N.J.Alt2
                    }, Object(c.d)("{displayName} hasn't created any rooms yet!", {
                        displayName: e
                    }, "RoomPicker"))) : this.props.data.user.self.isChannelMember ? void 0 : l.createElement(N._4, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(N.O, null, Object(c.d)("More chat in your chat. You will get notifications when you are @mentioned.", "RoomPicker")), l.createElement(N._4, {
                        margin: {
                            top: .5
                        }
                    }, l.createElement(jn, {
                        channelID: this.props.channelID
                    }))) : l.createElement(N._4, {
                        "data-test-selector": "room-picker-logged-out-cta",
                        padding: {
                            y: .5,
                            x: 2
                        },
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(N.O, {
                        color: N.J.Alt
                    }, Object(c.d)("Sign up/Log in to access {displayName}'s Rooms", {
                        displayName: e
                    }, "RoomPicker")))
                }, t.prototype.renderRoomCreator = function() {
                    if (this.state.shouldShowRoomCreator) return l.createElement(Vn, {
                        onCloseRoomCreator: this.hideRoomCreator
                    })
                }, t.prototype.renderRoomOnboarding = function() {
                    var e = this.props.sessionUser && this.props.sessionUser.id === this.props.channelID,
                        t = this.props.data.user.channelRooms.length,
                        n = !this.props.data.user.maxAllowedChannelRooms || t >= this.props.data.user.maxAllowedChannelRooms;
                    if (e && 0 === t && !n) return l.createElement(N._27, {
                        background: N.m.Alt,
                        color: N.J.Alt2,
                        padding: {
                            bottom: 2,
                            top: 1
                        },
                        textAlign: N._37.Center
                    }, l.createElement(N._4, {
                        margin: {
                            y: 1
                        },
                        fullWidth: !0
                    }, l.createElement("img", {
                        src: Mn.a,
                        height: "50"
                    })), l.createElement(N._4, {
                        padding: {
                            x: 5
                        }
                    }, l.createElement(N.O, null, Object(c.d)("Rooms let your community bond in spaces you create! Get started right here...", "RoomPicker"))))
                }, t.prototype.renderRoomNumHeaderButton = function(e) {
                    if (this.props.sessionUser) {
                        var t, n = this.props.sessionUser.id === this.props.channelID;
                        if (n && !this.state.shouldShowRoomCreator) {
                            if (t = l.createElement(N.u, {
                                    onClick: this.showRoomCreator,
                                    disabled: e,
                                    type: N.A.Text
                                }, l.createElement(N._4, {
                                    display: N.P.Flex,
                                    alignItems: N.c.Center
                                }, l.createElement(N._4, {
                                    padding: {
                                        right: .5
                                    }
                                }, l.createElement(N._17, {
                                    asset: N._18.Plus,
                                    height: 10
                                })), Object(c.d)("Create Room", "RoomPicker"))), e && this.props.data.user.maxAllowedChannelRooms) {
                                var i = this.props.data.user.maxAllowedChannelRooms,
                                    a = Object(c.d)("You can have a maximum of {numMaxRooms} rooms", {
                                        numMaxRooms: i
                                    }, "RoomPicker");
                                t = l.createElement(N._44, {
                                    direction: N._46.Left,
                                    label: a,
                                    width: 160
                                }, t)
                            }
                        } else n || (t = l.createElement(Yn, {
                            channelID: this.props.channelID,
                            isLoggedIn: this.props.isLoggedIn
                        }));
                        return t
                    }
                }, t = s.__decorate([Object(m.a)(Kn, {
                    options: function(e) {
                        return {
                            fetchPolicy: "cache-and-network",
                            variables: {
                                id: e.channelID,
                                isBroadcaster: !!e.sessionUser && e.sessionUser.id === e.channelID
                            }
                        }
                    }
                }), Object(b.d)("RoomPicker")], t)
            }(l.Component);
        var ei, ti = Object(i.b)(function(e) {
            return {
                sessionUser: Object(r.c)(e),
                isLoggedIn: Object(r.d)(e)
            }
        })(Xn);
        ! function(e) {
            e.MentionPill = "mentionPill", e.ViewRooms = "viewRooms"
        }(ei || (ei = {}));
        var ni = function(e) {
                return c.l.get("hasSeenRoomsOnboarding", {})[e] || !1
            },
            ii = function(e) {
                var t;
                c.l.set("hasSeenRoomsOnboarding", s.__assign({}, c.l.get("hasSeenRoomsOnboarding", {}), ((t = {})[e] = !0, t)))
            };
        var ai = n("BKhP"),
            ri = n("go0B"),
            oi = (n("w0qa"), "Stream Chat"),
            si = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        activeRoomID: oi,
                        activeRoomName: oi,
                        hasSeenGeneralOnboarding: ni(ei.ViewRooms),
                        isActiveRoomDeleted: !1,
                        showRoomPicker: !1
                    }, t.renderOnboardingBalloon = function() {
                        var e = t.props.data;
                        if (t.state.showRoomPicker || t.state.hasSeenGeneralOnboarding) return null;
                        if (!e || !e.user) return null;
                        var n = t.props.sessionUser && t.props.sessionUser.id === e.user.id;
                        return e.user.channelRooms && 0 === e.user.channelRooms.length && !n ? null : l.createElement(N.p, {
                            direction: N.q.BottomRight,
                            offsetX: "1rem",
                            show: !0,
                            size: N.r.Small
                        }, l.createElement(u.a, {
                            onClickOut: t.dismissGeneralOnboarding
                        }, l.createElement(N._4, {
                            padding: 3,
                            textAlign: N._37.Center
                        }, l.createElement("img", {
                            src: Object(v.e)("508650", 3),
                            width: "28"
                        }), l.createElement(N._4, {
                            margin: {
                                y: 1
                            }
                        }, l.createElement(N.O, {
                            color: N.J.Alt2
                        }, Object(c.d)("Rooms help you keep the conversation going", "RoomSelector"))), l.createElement(N.u, {
                            onClick: t.headerClick
                        }, Object(c.d)("View rooms", "RoomSelector")))))
                    }, t.isChannelLive = function(e) {
                        return !(e.error || !e.user) && !!(e.user.stream && e.user.stream.id || e.user.hosting && e.user.hosting.id)
                    }, t.headerClick = function() {
                        t.dismissGeneralOnboarding(), t.setState(function(e) {
                            return {
                                showRoomPicker: !e.showRoomPicker
                            }
                        })
                    }, t.handleRoomSelect = function(e, n) {
                        t.setState({
                            activeRoomID: e,
                            activeRoomName: n,
                            isActiveRoomDeleted: !1,
                            showRoomPicker: !1
                        })
                    }, t.onActiveRoomDelete = function() {
                        t.state.activeRoomID !== oi && t.setState({
                            isActiveRoomDeleted: !0
                        })
                    }, t.goToStreamChat = function() {
                        t.handleRoomSelect(oi, oi)
                    }, t.dismissGeneralOnboarding = function() {
                        t.setState({
                            hasSeenGeneralOnboarding: !0
                        }), ii(ei.ViewRooms)
                    }, t.closeRoomPicker = function() {
                        t.setState({
                            showRoomPicker: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.state.showRoomPicker && this.dismissGeneralOnboarding()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (this.props.data && !e.isPopout && (this.props.data.loading || this.props.channelLogin !== e.channelLogin) && e.data.user && e.data.user.channelRooms) {
                        var n = this.isChannelLive(e.data),
                            i = 0 !== e.data.user.channelRooms.length;
                        this.setState({
                            showRoomPicker: !n && i
                        }), n || this.dismissGeneralOnboarding()
                    }
                    if (this.props.data && e.data && this.props.data.user && e.data.user && this.props.data.user.self && e.data.user.self && !e.data.user.self.isChannelMember && this.props.data.user.self.isChannelMember !== e.data.user.self.isChannelMember && this.goToStreamChat(), this.props.sessionUser && this.props.routedRoomName && this.props.data && this.props.data.loading && !this.props.data.user && !e.data.loading && e.data.user && e.data.user.channelRooms && e.data.user.self.isChannelMember) {
                        var a = e.data.user.channelRooms.find(function(e) {
                            return e.name === t.props.routedRoomName
                        });
                        a && this.setState({
                            activeRoomID: a.id,
                            activeRoomName: a.name
                        })
                    } else this.props.channelLogin !== e.channelLogin && this.state.activeRoomID !== oi && this.goToStreamChat()
                }, t.prototype.render = function() {
                    return l.createElement(N._4, {
                        fullWidth: !0,
                        fullHeight: !0,
                        display: N.P.Flex,
                        flexDirection: N.R.Column,
                        flexGrow: 1,
                        flexWrap: N.S.NoWrap,
                        zIndex: N._53.Default,
                        position: N._11.Relative
                    }, this.renderHeader(), this.renderRoomPicker(), this.renderHiddenState(), this.renderChat(), this.renderCurrentRoom())
                }, t.prototype.renderChat = function() {
                    if (this.props.isHidden && !this.props.isPopout) return null;
                    var e = this.state.activeRoomID !== oi;
                    return l.createElement(f.a, {
                        channelLogin: this.props.channelLogin,
                        clientID: c.a.authClientID,
                        isBackground: e,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.closeRoomPicker,
                        onHostingChange: this.props.onHostingChange,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName
                    })
                }, t.prototype.renderCurrentRoom = function() {
                    return this.props.isHidden && !this.props.isPopout || !this.props.data.user || this.state.activeRoomID === oi ? null : l.createElement(Rn, {
                        isDeleted: this.state.isActiveRoomDeleted,
                        isPopout: this.props.isPopout,
                        channelID: this.props.data.user.id,
                        roomID: this.state.activeRoomID,
                        closeRoomPicker: this.closeRoomPicker,
                        handleStreamChatClick: this.goToStreamChat,
                        onDelete: this.onActiveRoomDelete,
                        isHostMode: !!this.props.hostedChannelDisplayName
                    })
                }, t.prototype.renderHeader = function() {
                    var e = l.createElement(N._4, {
                        display: N.P.Flex,
                        alignItems: N.c.Center
                    }, !this.state.showRoomPicker && Object(c.d)("Rooms", "RoomSelector"), l.createElement(N._4, {
                        display: N.P.Flex,
                        alignItems: N.c.Center
                    }, this.renderTotalUnreadMentionCount(), !this.state.showRoomPicker && l.createElement(N._4, {
                        padding: {
                            left: .5
                        },
                        display: N.P.Flex
                    }, l.createElement(N._17, {
                        asset: N._18.RoomList
                    })), this.state.showRoomPicker && l.createElement(N.v, {
                        ariaLabel: "RoomListOpen",
                        icon: N._18.RoomListOpen,
                        "data-test-selector": "close-room-picker-button",
                        onClick: this.headerClick,
                        blurAfterClick: !0
                    })));
                    this.state.showRoomPicker || (e = l.createElement(N._4, {
                        position: N._11.Relative
                    }, l.createElement(N.u, {
                        "data-test-selector": "open-room-picker-button",
                        onClick: this.headerClick,
                        type: N.A.Text
                    }, e), this.renderOnboardingBalloon()));
                    var t = l.createElement(N._27, {
                        className: "room-selector__header",
                        background: this.state.showRoomPicker ? N.m.Alt : N.m.Alt2,
                        borderLeft: !0,
                        borderRight: !0,
                        borderBottom: !0,
                        display: N.P.Flex,
                        fullWidth: !0,
                        justifyContent: N._3.Between,
                        alignItems: N.c.Center,
                        flexShrink: 0,
                        padding: {
                            left: 2,
                            right: 1
                        }
                    }, this.renderActiveRoomName(), e);
                    return this.state.showRoomPicker && (t = l.createElement(N._4, {
                        className: "room-selector__open-header-wrapper"
                    }, t)), t
                }, t.prototype.renderRoomPicker = function() {
                    if (this.state.showRoomPicker && this.props.data.user) return l.createElement(u.a, {
                        onClickOut: this.closeRoomPicker
                    }, l.createElement(ti, {
                        channelID: this.props.data.user.id,
                        handleRoomSelect: this.handleRoomSelect,
                        isChannelLive: this.isChannelLive(this.props.data),
                        activeRoomID: this.state.activeRoomID
                    }))
                }, t.prototype.renderActiveRoomName = function() {
                    return this.state.showRoomPicker ? l.createElement(N.O, {
                        color: N.J.Alt
                    }, Object(c.d)("Rooms", "RoomSelectorOpened")) : this.state.activeRoomName === oi || this.state.isActiveRoomDeleted ? l.createElement(N.O, {
                        color: N.J.Alt
                    }, this.state.activeRoomName) : l.createElement(se, {
                        roomID: this.state.activeRoomID,
                        roomName: this.state.activeRoomName
                    })
                }, t.prototype.renderTotalUnreadMentionCount = function() {
                    var e = this,
                        t = this.props.data;
                    if (t.error || !t.user || !t.user.self || !t.user.self.isChannelMember || !t.user.channelRooms) return null;
                    var n = t.user.channelRooms.reduce(function(t, n) {
                        return n.self.isMuted || n.id === e.state.activeRoomID ? t : t + n.self.unreadMentionCount
                    }, 0);
                    return n > 0 ? l.createElement(N._4, {
                        display: N.P.InlineBlock,
                        padding: {
                            left: .5
                        },
                        position: N._11.Relative
                    }, l.createElement(N._8, {
                        label: n.toString(),
                        type: N._9.Alert
                    })) : void 0
                }, t.prototype.renderHiddenState = function() {
                    return !this.props.isHidden || this.props.isPopout ? null : l.createElement(N._27, {
                        alignItems: N.c.Center,
                        background: N.m.Alt2,
                        borderLeft: !0,
                        "data-test-selector": "room-selector-hidden-state",
                        display: N.P.Flex,
                        flexDirection: N.R.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: N._3.Center,
                        color: N.J.Base,
                        position: N._11.Relative
                    }, l.createElement(N._4, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(N.O, {
                        fontSize: N.T.Size5
                    }, Object(c.d)("Chat is hidden.", "RoomSelector"))), l.createElement(N.u, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(c.d)("Show Chat", "RoomSelector")))
                }, t
            }(l.Component),
            li = Object(d.compose)(Object(m.a)(ri, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: ri,
                    skip: !e.data.user,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(g.e)("" + (e.data.user && e.data.user.id)),
                    types: [h.PubsubMessageType.ChatRoomCreated, h.PubsubMessageType.ChatRoomDeleted],
                    mutator: function(e, t) {
                        if (e.type === h.PubsubMessageType.ChatRoomDeleted && t.user && t.user.channelRooms) return t.user.channelRooms = t.user.channelRooms.filter(function(t) {
                            return t.id !== e.data.room.room_id
                        }), t;
                        if (e.type === h.PubsubMessageType.ChatRoomCreated && t.user && t.user.channelRooms) {
                            var n = function(e) {
                                return {
                                    id: e.data.room.room_id,
                                    minimumAllowedRole: e.data.room.minimum_allowed_role,
                                    name: e.data.room.name,
                                    topic: e.data.room.topic,
                                    isPreviewable: e.data.room.is_previewable,
                                    self: {
                                        isArchived: !1,
                                        isMuted: !1,
                                        isUnread: !1,
                                        unreadMentionCount: 0,
                                        __typename: "RoomView"
                                    },
                                    __typename: "Room"
                                }
                            }(e);
                            return t.user.channelRooms.push(n), t
                        }
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: ai,
                    skip: !e.sessionUser || !e.data.user,
                    variables: {
                        channelID: e.data.user && e.data.user.id,
                        userID: e.sessionUser && e.sessionUser.id
                    },
                    topic: Object(g.f)("" + (e.sessionUser && e.sessionUser.id)),
                    type: h.PubsubMessageType.ChatRoomsUserModAction,
                    mutator: function(e, t) {
                        return e.type === h.PubsubMessageType.ChatRoomsUserModAction && (t.chatRoomBanStatus = {
                            isPermanent: !e.data.expires_at,
                            __typename: "ChatRoomBanStatus"
                        }), t
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: ri,
                    skip: !e.sessionUser || !e.data.user,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(g.f)("" + (e.sessionUser && e.sessionUser.id)),
                    types: [h.PubsubMessageType.UserMention, h.PubsubMessageType.ChatRoomsRoomViewUpdated],
                    mutator: function(e, t) {
                        return e.type === h.PubsubMessageType.UserMention && t.user && t.user.channelRooms && (t.user.channelRooms = t.user.channelRooms.map(function(t) {
                            return e = e, t.id === e.data.room_id && (t.self.unreadMentionCount += 1), t
                        })), e.type === h.PubsubMessageType.ChatRoomsRoomViewUpdated && t.user && (e = e, t.user.self.isModerator = e.data.room_view.permissions.moderate), t
                    }
                }
            }), Object(b.d)("RoomSelector"))(si);
        var di = Object(i.b)(function(e) {
            return {
                isHidden: e.chat.isHidden,
                sessionUser: Object(r.c)(e)
            }
        }, function(e) {
            return Object(a.b)({
                onChatUnhide: function() {
                    return o.T()
                }
            }, e)
        })(li);
        n.d(t, "a", function() {
            return di
        })
    },
    "4hnS": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "LeaveRoomsPrompt_LeaveRooms"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "LeaveChannelRoomsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "leaveChannelRooms"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 147
            }
        };
        n.loc.source = {
            body: "mutation LeaveRoomsPrompt_LeaveRooms($input: LeaveChannelRoomsInput!) {\nleaveChannelRooms(input: $input) {\nchannel {\nself {\nisChannelMember\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "54rb": function(e, t) {},
    "56e8": function(e, t) {},
    "576g": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "cheer"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "cheer"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "prefix"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "tiers"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "color"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "images"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "theme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isAnimated"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "dpiScale"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 133
            }
        };
        n.loc.source = {
            body: "fragment cheer on User {\ncheer {\nid\nemotes {\nid\nprefix\ntype\ntiers {\nid\nbits\ncolor\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5Dex": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsPinnedCheerV2_LeaderboardEntry"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "profileImageWidth"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "profileImageWidth"
                                        }
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 168
            }
        };
        n.loc.source = {
            body: "query BitsPinnedCheerV2_LeaderboardEntry($userID: ID! $profileImageWidth: Int!) {\nuser(id: $userID) {\nid\ndisplayName\nlogin\nprofileImageURL(width:$profileImageWidth)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5Nu7": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n("HW6M"),
            a = (n.n(i), n("GiK3")),
            r = (n.n(a), n("ysVA")),
            o = (n.n(r), function(e) {
                var t, n = [a.createElement("span", {
                    key: "username-display",
                    className: "chat-author__display-name",
                    "data-a-target": "chat-message-username",
                    "data-a-user": e.userData.userLogin,
                    "data-test-selector": "message-username",
                    style: {
                        color: e.userData.color
                    }
                }, e.userData.userDisplayName)];
                if (e.userData.isIntl) {
                    var r = i(((t = {})["chat-author__intl-login"] = !e.highlighted, t["chat-author__intl-login--highlighted"] = e.highlighted, t));
                    n.push(a.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.userData.color
                        },
                        className: r,
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.userData.userLogin + ")"))
                }
                return a.createElement("span", {
                    key: e.userData.userID + "-authorlabel"
                }, n)
            })
    },
    "5vPJ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("GxDs"),
            l = n("pexS"),
            d = {
                isTimedOut: !1
            },
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = d, t.timeoutID = null, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.props.data.clip || (this.timeoutID = setTimeout(function() {
                        e.setState({
                            isTimedOut: !0
                        })
                    }, 5e3))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                        isTimedOut: !1
                    }))
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.clip,
                        n = e.error,
                        i = e.loading;
                    return n || this.state.isTimedOut ? a.createElement(s.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "ClipsChatCard"),
                            description: Object(r.d)("We couldn't find that Clip", "ClipsChatCard")
                        }
                    }) : i || !t ? a.createElement(s.a, null) : a.createElement(s.a, {
                        data: {
                            title: t.title || (t.broadcaster ? Object(r.d)("Clip of {broadcaster}", {
                                broadcaster: t.broadcaster.displayName
                            }, "ClipsChatCard") : ""),
                            description: t.curator ? Object(r.d)("Clipped by {curator}", {
                                curator: t.curator.displayName
                            }, "ClipsChatCard") : "",
                            previewImageURL: t.thumbnailURL,
                            contentURL: t.url
                        }
                    })
                }, t
            }(a.Component),
            u = function(e) {
                return {
                    variables: {
                        slug: e.slug
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: e.forceNetworkRequest ? "cache-first" : "cache-only"
                }
            },
            m = Object(o.a)(l, {
                options: u
            })(c);
        n.d(t, !1, function() {
            return 5e3
        }), n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return d
        }), n.d(t, !1, function() {
            return c
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return m
        })
    },
    "6Agf": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
            }(i || (i = {}))
    },
    "6Rwu": function(e, t) {},
    "6lb1": function(e, t) {},
    "6vcJ": function(e, t) {},
    "7LVu": function(e, t) {},
    "7X7f": function(e, t) {},
    "7zg1": function(e, t) {},
    "90yy": function(e, t) {},
    "91zu": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "IncomingRaidLine_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "50"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query IncomingRaidLine_Channel($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\ndisplayName\nprofileImageURL(width: 50)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "9fnI": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 149
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/cheer-fragment.gql"\nquery ChatList_Bits($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("576g").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "9u8h": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("Aj/L"),
            o = function() {
                function e() {}
                return e.get = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.put = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.post = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.delete = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.request = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        var a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return t = this.constructOptions(t, n), a = t.headers ? t.headers["Content-Type"] : void 0, t.body = this.serialize(t.body, a), [4, this._fetch(e, t)];
                                case 1:
                                    return r = i.sent(), [4, this.constructLegacyAPIResponse(r)];
                                case 2:
                                    return [2, i.sent()]
                            }
                        })
                    })
                }, e.getAPIURL = function(e) {
                    return new URL(e, a.o.config.apiBaseURL)
                }, e.constructLegacyAPIResponse = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    t = {
                                        status: e.status
                                    }, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, e.json()];
                                case 2:
                                    return n = i.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                case 3:
                                    return a = i.sent(), e.headers && e.headers.get && (r = e.headers.get("Content-Type")) && -1 !== r.indexOf("application/json") && (t.requestError = a), [3, 4];
                                case 4:
                                    return [2, t]
                            }
                        })
                    })
                }, e._fetch = function(e, t) {
                    return void 0 === t && (t = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, fetch(this.getAPIURL(e).toString(), t)];
                                case 1:
                                    return [2, n.sent()]
                            }
                        })
                    })
                }, e.constructOptions = function(e, t) {
                    return e = Object.assign({}, e, {
                        headers: i.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                    })
                }, e.serialize = function(e, t) {
                    return "application/json; charset=UTF-8" === t ? JSON.stringify(e) : e
                }, e.getDefaultHeaders = function(e, t) {
                    var n = a.o.store.getState(),
                        i = {
                            Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                            "Accept-Language": "en-us",
                            "Client-ID": a.o.config.legacyClientID,
                            "X-Requested-With": "XMLHttpRequest"
                        };
                    e.body && FormData.prototype.isPrototypeOf(e.body) || (i["Content-Type"] = "application/json; charset=UTF-8");
                    var o = Object(r.c)(n);
                    return o && (i.Authorization = "OAuth " + o.authToken, o.legacyCSRFToken && (i["Twitch-Api-Token"] = o.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                        i[e] && delete i[e]
                    }), i
                }, e
            }()
    },
    "9uTb": function(e, t) {},
    ACWz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatInput"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isEmbedded"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isEmbedded"
                                            }
                                        }
                                    }]
                                }]
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hashtags"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "edges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cursor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "node"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 274
            }
        };
        n.loc.source = {
            body: "query ChatInput($channelLogin: String! $isEmbedded: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nisPartner @include(if: $isEmbedded)\n}\nuser(login: $channelLogin) {\nid\ncheer {\nid\nhashtags {\nedges {\ncursor\nnode {\nid\n}\n}\n}\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    AL3x: function(e, t) {},
    AQmT: function(e, t) {},
    AaXK: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "selectedBadge"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availableBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "availableBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 288
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_Badges($channelLogin: String!) {\ncurrentUser {\nid\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\nuser(login: $channelLogin) {\nid\nself {\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    AsjC: function(e, t) {},
    AwFw: function(e, t) {},
    B88H: function(e, t) {},
    BBNG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channelUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 437
            }
        };
        n.loc.source = {
            body: "query ViewerCard($targetLogin: String! $channelID: ID!) {\ntargetUser: user(login: $targetLogin) {\nid\nlogin\nbannerImageURL\ndisplayName\nprofileImageURL(width: 70)\n}\nchannelUser: user(id: $channelID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\nemotes {\nid\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\nself {\nisModerator\n}\n}\ncurrentUser {\nlogin\nid\nroles {\nisSiteAdmin\nisStaff\nisGlobalMod\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    BKhP: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Room_BanStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 127
            }
        };
        n.loc.source = {
            body: "query Room_BanStatus($channelID: ID! $userID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    BMQ2: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("CIox"),
            s = n("2KeS"),
            l = n("6sO2"),
            d = n("7vx8"),
            c = n("HZww"),
            u = n("+xm8"),
            m = n("f2i/"),
            p = n("Aj/L"),
            h = function() {
                return function() {}
            }(),
            g = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.joinedRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.joinedRaids = t.joinedRaids), n
                }
                return i.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return this.joinedRaids.has(e.id) || this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        joinedRaids: this.joinedRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.add(e.id);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.delete(e.id);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    l.l.set("raid", e)
                }, t.prototype.getStorageData = function() {
                    return l.l.get("raid", {})
                }, t
            }(h),
            f = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.leftRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.leftRaids = t.leftRaids), n
                }
                return i.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return !this.leftRaids.has(e.id) && !this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        leftRaids: this.leftRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.delete(e.id);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.add(e.id);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    l.l.set("raids-left", e)
                }, t.prototype.getStorageData = function() {
                    return l.l.get("raids-left", {})
                }, t
            }(h),
            v = 3;
        var b = 5,
            k = "raid_update",
            y = function() {
                function e(e, t) {
                    this.message = e, this.id = e.raid.id, this.creatorID = e.raid.creator_id, this.sourceChannelID = e.raid.source_id, this.targetChannelID = e.raid.target_id, this.viewerCount = e.raid.viewer_count, t ? (this.varianceSeconds = t.varianceSeconds, this.totalDurationInSeconds = t.totalDurationInSeconds, this.clientCreatedAtTimestamp = t.clientCreatedAtTimestamp) : (this.varianceSeconds = Math.round(Math.random() * v * 2 - v), this.totalDurationInSeconds = this.getTotalDurationInSeconds(e.raid.remaining_duration_seconds), this.clientCreatedAtTimestamp = (new Date).getTime()), this.isAnnouncing = e.type === k && this.totalDurationInSeconds > 0, this.hasTimeToJoin = this.totalDurationInSeconds > b
                }
                return e.prototype.withMessage = function(t) {
                    return this.id !== t.raid.id ? new e(t) : new e(t, this)
                }, e.prototype.getRemainingJoinTime = function(e) {
                    void 0 === e && (e = new Date);
                    var t = e.getTime() - this.clientCreatedAtTimestamp;
                    return 1e3 * this.totalDurationInSeconds - t
                }, e.prototype.getTotalDurationInSeconds = function(e) {
                    var t = e + this.varianceSeconds;
                    return Math.max(t, 0)
                }, e
            }(),
            _ = "https://api.twitch.tv/kraken";
        var C = n("O0Qc"),
            S = n("Odds"),
            E = (n("z7Cp"), {
                "data-test-selector": "countdown-fill-width"
            }),
            N = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this,
                        t = this.props.startPolling || setInterval;
                    this.intervalID = t(function() {
                        return e.forceUpdate()
                    }, 1e3)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.intervalID)
                }, t.prototype.componentDidUpdate = function() {
                    this.props.getRemainingTime() <= 0 && this.props.onCountdownEnd()
                }, t.prototype.render = function() {
                    var e = this.countdownPercentage + "%";
                    return a.createElement("div", {
                        className: "raid-countdown-bar"
                    }, a.createElement("div", i.__assign({
                        className: "raid-countdown-bar__fill",
                        style: {
                            width: e
                        }
                    }, E)))
                }, Object.defineProperty(t.prototype, "countdownPercentage", {
                    get: function() {
                        return this.props.getRemainingTime() / this.props.totalCountdownTime * 100
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.PureComponent),
            w = (n("mR/9"), n("vH/s")),
            D = {
                medium: "twitch_channel",
                content: "raid_channel"
            };

        function O(e, t) {
            var n = {
                raid_creator_id: Number(t.creatorID),
                raid_source_id: Number(t.sourceChannelID),
                raid_target_id: Number(t.targetChannelID),
                raid_id: t.id
            };
            l.n.track(e, n)
        }
        var I = n("UMQJ");
        var R = Object(d.a)(I, {
            options: function(e) {
                return {
                    variables: {
                        sourceChannelID: e.raid.sourceChannelID,
                        targetChannelID: e.raid.targetChannelID
                    }
                }
            }
        })(function(e) {
            if (e.data.loading || e.data.error) return a.createElement("div", null);
            var t = e.component,
                n = i.__rest(e, ["component"]);
            return a.createElement(t, i.__assign({}, n))
        });
        var T, M = {
                "data-test-selector": "current-raiders"
            },
            L = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRemainingTime = function() {
                        return t.props.raid.getRemainingJoinTime()
                    }, t.handleCountdownEnd = function() {
                        t.props.onRaidInvitePeriodOver(t.props.data.targetChannel.login)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e;
                    e = this.props.raid, O(w.SpadeEventType.RaidPromptImpression, e)
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.sourceChannel,
                        n = e.targetChannel;
                    return a.createElement(S._27, {
                        className: "raid-notification",
                        background: S.m.AccentAlt2,
                        color: S.J.Overlay,
                        position: S._11.Absolute,
                        zIndex: S._53.Above,
                        fullWidth: !0
                    }, a.createElement(S._4, {
                        className: "raid-notification__content",
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: S.P.Flex,
                        justifyContent: S._3.Between
                    }, a.createElement(S._4, {
                        alignItems: S.c.Center,
                        display: S.P.Flex
                    }, a.createElement(S.l, {
                        size: 36,
                        src: t.profileImageURL,
                        alt: t.displayName
                    }), a.createElement(S._17, {
                        asset: S._18.AngleRight,
                        height: 10
                    }), a.createElement(S.l, {
                        size: 36,
                        src: n.profileImageURL,
                        alt: n.displayName
                    }), a.createElement(S._4, {
                        padding: {
                            left: 1
                        }
                    }, a.createElement(S.O, {
                        color: S.J.OverlayAlt,
                        type: S._41.P,
                        className: "raid-notification__channel-name"
                    }, Object(l.d)("{sourceDisplayName} is", {
                        sourceDisplayName: t.displayName
                    }, "RaidCTASourceChannel")), a.createElement(S.O, null, Object(l.d)("raiding {targetDisplayName}", {
                        targetDisplayName: n.displayName
                    }, "RaidCTATargetChannel")), a.createElement(S.O, i.__assign({
                        bold: !0
                    }, M), Object(l.d)("{viewerCount, plural, one {# raider} other {# raiders}}", {
                        viewerCount: this.props.raid.viewerCount
                    }, "RaidCTATotalRaiders")))), this.props.children), a.createElement(N, {
                        totalCountdownTime: 1e3 * this.props.raid.totalDurationInSeconds,
                        getRemainingTime: this.getRemainingTime,
                        onCountdownEnd: this.handleCountdownEnd
                    }))
                }, t
            }(a.Component),
            x = (T = L, function(e) {
                return a.createElement(R, i.__assign({}, e, {
                    component: T
                }))
            }),
            A = {
                "data-test-selector": "raid-cancel-button"
            },
            F = function(e) {
                return a.createElement(S._4, {
                    alignSelf: S.d.Center
                }, a.createElement(S.u, i.__assign({
                    size: S.y.Large,
                    type: S.A.Hollow,
                    overlay: !0,
                    onClick: e.onCancelRaid
                }, A), Object(l.d)("Cancel", "RaidCTACancel")))
            },
            j = n("bQ8d"),
            B = {
                "data-test-selector": "join-raid-button"
            },
            U = {
                "data-test-selector": "leave-raid-button"
            },
            P = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.timerID = 0, t.handleLeaveRaid = function() {
                        clearTimeout(t.timerID), t.props.onLeaveRaid()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.hasJoined && (this.timerID = setTimeout(this.props.onJoinRaid, Object(j.a)(5e3)))
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.timerID)
                }, t.prototype.render = function() {
                    return this.props.hasJoined ? a.createElement(S._4, {
                        alignSelf: S.d.Center
                    }, a.createElement(S.u, i.__assign({
                        size: S.y.Large,
                        type: S.A.Hollow,
                        overlay: !0,
                        onClick: this.handleLeaveRaid
                    }, U), Object(l.d)("Leave", "RaidCTALeave"))) : a.createElement(S._4, {
                        alignSelf: S.d.Center
                    }, a.createElement(S.u, i.__assign({
                        size: S.y.Large,
                        onClick: this.props.onJoinRaid
                    }, B), Object(l.d)("Join", "RaidCTAJoin")))
                }, t
            }(a.Component),
            V = n("jML9"),
            H = n("OAwv");
        var W = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        raidStorage: new g
                    }, t.unsubscribe = function() {}, t.handlePubsubMessage = function(e) {
                        t.setState(function(t) {
                            return t.raid ? i.__assign({}, t, {
                                raid: t.raid.withMessage(e)
                            }) : i.__assign({}, t, {
                                raid: new y(e)
                            })
                        })
                    }, t.handleRaidInvitePeriodOver = function(e) {
                        var n = t.hasJoinedCurrentRaid;
                        if (t.state.raid && t.setState({
                                raidStorage: t.state.raidStorage.expireRaid(t.state.raid)
                            }), n) {
                            var a = function(e, t) {
                                var n;
                                if (function(e) {
                                        return !e.split("/")[2]
                                    }(e.pathname)) n = "/" + t;
                                else {
                                    if (! function(e) {
                                            return /^\/.+\/chat$/.test(e)
                                        }(e.pathname)) return "";
                                    n = "/" + t + "/chat"
                                }
                                var a = i.__assign({}, H.parse(e.search), {
                                    referrer: "raid"
                                });
                                return n + "?" + H.stringify(a)
                            }(t.props.history.location || window.location, e);
                            a && t.props.history.push(a, D)
                        }
                    }, t.handleJoinRaid = function() {
                        if (t.state.raid) {
                            var e, n = t.state.raid.id;
                            if (t.props.authToken) ! function(e, t) {
                                var n = {
                                    headers: {
                                        "Client-ID": l.o.config.legacyClientID,
                                        Authorization: "OAuth " + t,
                                        Accept: "application/vnd.twitchtv.v5+json"
                                    },
                                    method: "POST"
                                };
                                fetch(_ + "/raids/" + e + "/join", n)
                            }(n, t.props.authToken), e = t.state.raid, O(w.SpadeEventType.RaidPromptJoin, e), t.setState({
                                raidStorage: t.state.raidStorage.joinRaid(t.state.raid)
                            });
                            else t.props.login()
                        }
                    }, t.handleLeaveRaid = function() {
                        var e;
                        t.state.raid && (! function(e, t) {
                            var n = {
                                headers: {
                                    "Client-ID": l.o.config.legacyClientID,
                                    Authorization: "OAuth " + t,
                                    Accept: "application/vnd.twitchtv.v5+json"
                                },
                                method: "POST"
                            };
                            fetch(_ + "/raids/" + e + "/leave", n)
                        }(t.state.raid.id, t.props.authToken), e = t.state.raid, O(w.SpadeEventType.RaidPromptLeave, e), t.setState({
                            raidStorage: t.state.raidStorage.leaveRaid(t.state.raid)
                        }))
                    }, t.handleCancelRaid = function() {
                        t.state.raid && t.props.send(C.a)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.subscribe(this.props.channelID), [4, l.o.experiments.getAssignment("TWILIGHT_RAID_AUTO_JOIN")];
                                case 1:
                                    return "yes" === e.sent() && this.setState({
                                        raidStorage: new f
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return this.shouldRenderRaidNotification ? a.createElement(x, {
                        raid: this.state.raid,
                        onRaidInvitePeriodOver: this.handleRaidInvitePeriodOver
                    }, this.renderCTAButton()) : null
                }, t.prototype.componentWillUnmount = function() {
                    this.unsubscribe()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.props.channelID !== e.channelID && (this.unsubscribe(), this.setState({
                        raid: void 0
                    }, function() {
                        return t.subscribe(e.channelID)
                    }))
                }, t.prototype.subscribe = function(e) {
                    this.unsubscribe = l.o.pubsub.subscribe({
                        topic: Object(c.n)(e),
                        onMessage: this.handlePubsubMessage
                    })
                }, t.prototype.renderCTAButton = function() {
                    return this.isRaidCreator ? a.createElement(F, {
                        onCancelRaid: this.handleCancelRaid
                    }) : a.createElement(P, {
                        onJoinRaid: this.handleJoinRaid,
                        onLeaveRaid: this.handleLeaveRaid,
                        hasJoined: this.hasJoinedCurrentRaid
                    })
                }, Object.defineProperty(t.prototype, "shouldRenderRaidNotification", {
                    get: function() {
                        var e = this.state.raid;
                        return e && e.isAnnouncing && !this.state.raidStorage.isExpired(e) && (e.hasTimeToJoin || this.hasJoinedCurrentRaid)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isRaidCreator", {
                    get: function() {
                        var e = this.state.raid;
                        return e && this.props.data && this.props.data.user && this.props.data.user.id === e.creatorID
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "hasJoinedCurrentRaid", {
                    get: function() {
                        var e = this.state.raid;
                        return !(!e || !this.props.authToken) && (this.isRaidCreator || this.state.raidStorage.hasJoined(e))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.Component),
            G = Object(d.a)(V, {
                skip: function(e) {
                    return !e.authToken
                }
            })(W);
        var q = Object(r.b)(function(e) {
                return {
                    authToken: Object(p.a)(e)
                }
            }, function(e) {
                return Object(s.b)({
                    login: function() {
                        return Object(m.f)(u.a.RaidJoin)
                    }
                }, e)
            })(G),
            z = Object(o.e)(q);
        n.d(t, "a", function() {
            return z
        }), n.d(t, !1, function() {
            return q
        }), n.d(t, !1, function() {})
    },
    BTUa: function(e, t) {},
    Bh5x: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "InvalidRoomView"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "query InvalidRoomView($id: ID!) {\nroom(id: $id) {\nid\nname\nowner {\ndisplayName\nlogin\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Bsuy: function(e, t) {},
    CGWe: function(e, t) {},
    CHV0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Room"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topic"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "readMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sendMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 299
            }
        };
        n.loc.source = {
            body: "query Room($roomID: ID! $channelID: ID! $userID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\nroom(id: $roomID) {\nid\nname\ntopic\nisPreviewable\nminimumAllowedRole\nself {\npermissions {\nreadMessages\nsendMessages\n}\n}\n}\nuser(id: $channelID) {\nid\nself {\nisModerator\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CIWf: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportRoomInfo"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 70
            }
        };
        n.loc.source = {
            body: "query ReportRoomInfo($id: ID!) {\nroom(id: $id) {\nname\nowner {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    DS3o: function(e, t) {},
    DVR9: function(e, t) {},
    DY3c: function(e, t) {},
    Dc1A: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Dr46: function(e, t) {},
    E9JN: function(e, t) {},
    Ecgh: function(e, t) {},
    EsrG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ModUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ModUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "modUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "target"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 119
            }
        };
        n.loc.source = {
            body: "mutation ModUser($input: ModUserInput!){\nmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    F8t6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DeleteRoomModal_DeleteRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DeleteRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "deleteRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "room"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 109
            }
        };
        n.loc.source = {
            body: "mutation DeleteRoomModal_DeleteRoom($input: DeleteRoomInput!) {\ndeleteRoom(input: $input) {\nroom {\nname\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    FsFC: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            if (e < 60) return r(i.SECOND, e);
            var t = Math.floor(e / 60),
                n = e % 60;
            if (t < 60) return n ? r(i.MINUTE, t) + " " + r(i.SECOND, n) : r(i.MINUTE, t);
            var a = Math.floor(t / 60);
            if (t %= 60, a < 24) return t ? r(i.HOUR, a) + " " + r(i.MINUTE, t) : r(i.HOUR, a);
            var o = Math.floor(a / 24);
            if (a %= 24, o < 7) return a ? r(i.DAY, o) + " " + r(i.HOUR, a) : r(i.DAY, o);
            if (o <= 26) {
                var s = Math.floor(o / 7);
                return (o %= 7) ? r(i.WEEK, s) + " " + r(i.DAY, o) : r(i.WEEK, s)
            }
            var l = Math.round((o + 3) / 30);
            return r(i.MONTH, l)
        };
        var i, a = n("6sO2");

        function r(e, t) {
            return e === i.SECOND ? Object(a.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                secondCount: t
            }, "formatDuration") : e === i.MINUTE ? Object(a.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                minuteCount: t
            }, "formatDuration") : e === i.DAY ? Object(a.d)("{dayCount, plural, one {# day} other {# days}}", {
                dayCount: t
            }, "formatDuration") : e === i.HOUR ? Object(a.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                hourCount: t
            }, "formatDuration") : e === i.WEEK ? Object(a.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                weekCount: t
            }, "formatDuration") : e === i.MONTH ? Object(a.d)("{monthCount, plural, one {# month} other {# months}}", {
                monthCount: t
            }, "formatDuration") : ""
        }! function(e) {
            e[e.SECOND = 0] = "SECOND", e[e.MINUTE = 1] = "MINUTE", e[e.HOUR = 2] = "HOUR", e[e.DAY = 3] = "DAY", e[e.WEEK = 4] = "WEEK", e[e.MONTH = 5] = "MONTH"
        }(i || (i = {}))
    },
    Fvfv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomsMemberOptions"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 74
            }
        };
        n.loc.source = {
            body: "query RoomsMemberOptions {\nuser(id: $id) {\nid\nself {\nisChannelMember\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "G/62": function(e, t) {},
    "GS+L": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "MemberList"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "members"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "type"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 122
            }
        };
        n.loc.source = {
            body: "query MemberList($roomID: ID!) {\nroom(id: $roomID) {\nid\nmembers(first: 100) {\nedges {\nnode {\nid\ndisplayName\n}\ntype\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    GuSj: function(e, t) {},
    GxDs: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("F8kA"),
            o = n("yDzg"),
            s = n("vH/s"),
            l = n("6sO2"),
            d = n("Odds"),
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasImageLoadingError: !1
                    }, t.handleImageError = function() {
                        t.setState({
                            hasImageLoadingError: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                    this.setState({
                        hasImageLoadingError: !1
                    })
                }, t.prototype.render = function() {
                    var e = l.a.defaultStreamPreviewURL;
                    return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), a.createElement(d.D, {
                        aspect: d.k.Aspect16x9,
                        alt: this.props.altText,
                        src: e,
                        onError: this.handleImageError
                    })
                }, t
            }(a.Component),
            u = (n("1tZx"), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
            m = {
                ERROR: "chat-card-error",
                TITLE: "chat-card-title",
                DESCRIPTION: "chat-card-description"
            },
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderErrorCard = function() {
                        var e = a.createElement("img", {
                            "data-test-selector": m.ERROR,
                            src: u,
                            className: "chat-card__error-img"
                        });
                        return t.renderCardContent(e, t.props.error)
                    }, t.renderCardContent = function(e, t) {
                        var n, i;
                        return t ? (n = a.createElement(d.O, {
                            type: d._41.Span,
                            fontSize: d.T.Size5,
                            "data-test-selector": m.TITLE,
                            title: t.title
                        }, t.title), i = a.createElement(d.O, {
                            type: d._41.Span,
                            fontSize: d.T.Size6,
                            color: d.J.Alt2,
                            "data-test-selector": m.DESCRIPTION
                        }, t.description)) : (e = a.createElement(d._10, {
                            overlay: !0
                        }), n = a.createElement(d._10, {
                            width: 180
                        }), i = a.createElement(d._10, {
                            width: 120
                        })), a.createElement(d._27, {
                            background: d.m.Base,
                            display: d.P.Flex,
                            flexWrap: d.S.NoWrap,
                            padding: .5
                        }, a.createElement(d._27, {
                            className: "chat-card__preview-img",
                            background: d.m.Alt2,
                            display: d.P.Flex,
                            alignItems: d.c.Center,
                            justifyContent: d._3.Center,
                            flexShrink: 0
                        }, e), a.createElement(d._4, {
                            display: d.P.Flex,
                            alignItems: d.c.Center,
                            overflow: d._7.Hidden
                        }, a.createElement(d._4, {
                            padding: {
                                left: 1
                            },
                            fullWidth: !0
                        }, a.createElement(d._4, {
                            className: "chat-card__title",
                            ellipsis: !0
                        }, n), a.createElement(d._4, {
                            ellipsis: !0
                        }, i))))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e;
                    if (this.props.error) e = this.renderErrorCard();
                    else if (this.props.data) {
                        var t = Object(o.a)(this.props.data.contentURL, {
                                tt_medium: s.PageviewMedium.Chat,
                                tt_content: s.PageviewContent.ChatCard
                            }),
                            n = a.createElement(c, {
                                altText: this.props.data.title,
                                imageURL: this.props.data.previewImageURL
                            });
                        e = a.createElement(r.a, {
                            className: "chat-card__link",
                            to: t,
                            target: "_blank"
                        }, this.renderCardContent(n, {
                            title: this.props.data.title,
                            description: this.props.data.description
                        }))
                    } else e = this.renderCardContent();
                    return a.createElement(d._27, {
                        elevation: 1,
                        margin: {
                            top: .5
                        }
                    }, e)
                }, t
            }(a.Component),
            h = p;
        n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return h
        })
    },
    "H/22": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.e = function(e, t, n, i) {
            var d = {
                    badges: null,
                    bits: 0,
                    color: "",
                    displayName: "",
                    id: "",
                    userID: n,
                    username: n,
                    userType: o.a.User,
                    emotes: null
                },
                c = Object(l.a)(t, d, r.a, !1);
            return {
                type: s.b.AutoMod,
                autoModType: s.a.MessageRejectedPrompt,
                id: function(e) {
                    return e + "-automod-rejected"
                }(e),
                category: i,
                rejectedMessage: a.__assign({}, c, {
                    type: s.b.Message,
                    messageType: s.c.Post,
                    id: e
                })
            }
        }, t.d = function() {
            return {
                id: Object(d.a)("automod-message-rejected"),
                type: s.b.AutoMod,
                autoModType: s.a.MessageRejected
            }
        }, t.b = function() {
            return {
                id: Object(d.a)("automod-message-allowed"),
                type: s.b.AutoMod,
                autoModType: s.a.MessageAllowed
            }
        }, t.c = function() {
            return {
                id: Object(d.a)("automod-message-denied"),
                type: s.b.AutoMod,
                autoModType: s.a.MessageDenied
            }
        }, t.f = function(e, t, n, a) {
            return {
                id: Object(d.a)("channel-moderation-action"),
                type: s.b.ModerationAction,
                moderationActionType: e,
                level: i.Channel,
                createdByLogin: t,
                createdByUserID: n,
                args: a
            }
        }, t.g = function(e, t, n, a, r, o, l) {
            return {
                id: Object(d.a)("channel-moderation-action"),
                type: s.b.ModerationAction,
                moderationActionType: e,
                level: i.User,
                createdByLogin: t,
                createdByUserID: n,
                targetUserID: a,
                targetUserLogin: r,
                duration: o,
                reason: l
            }
        };
        var i, a = n("TToO"),
            r = n("iydZ"),
            o = n("6Agf"),
            s = n("qkCi"),
            l = n("l21v"),
            d = n("INp2");
        ! function(e) {
            e[e.Channel = 0] = "Channel", e[e.User = 1] = "User"
        }(i || (i = {}))
    },
    HuX0: function(e, t) {},
    IEOs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_DenyRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DenyRejectedChatMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "denyRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\ndenyRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    INp2: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e + "-" + Date.now()
        }
    },
    J7iJ: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RitualsEnabled_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "ritualsEnabled"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 153
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/rituals-enabled-fragment.gql"\nquery RitualsEnabled_User($id: ID!) {\nchannel: user(id: $id) {\n...ritualsEnabled\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("v2Uk").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    J8WN: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = (n.n(a), n("Odds")),
            o = n("yU6t"),
            s = (n.n(o), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDraggingOver: !1
                    }, t.onDragEnter = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !0
                        })
                    }, t.onDragLeave = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !1
                        })
                    }, t.onFileInputChange = function(e) {
                        e.preventDefault(), t.finalizeSelections(e.target.files), e.target.value = ""
                    }, t.onFileDrop = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !1
                        }), t.finalizeSelections(e.dataTransfer.files)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(r.Q, {
                        dragOver: this.state.isDraggingOver,
                        error: this.props.error
                    }, a.createElement(r.Y, {
                        position: r._11.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        fullWidth: !0,
                        fullHeight: !0,
                        zIndex: r._53.Above
                    }, a.createElement("input", {
                        "data-test-selector": "file-picker-input",
                        className: "drag-and-drop-file-picker__input",
                        accept: this.props.allowedFileTypes.join(","),
                        multiple: this.props.multiFile || !1,
                        onChange: this.onFileInputChange,
                        type: "file",
                        onDragLeave: this.onDragLeave,
                        onDragEnter: this.onDragEnter,
                        onDrop: this.onFileDrop
                    })), this.props.children)
                }, t.prototype.finalizeSelections = function(e) {
                    e && this.props.onFilesSubmitted(Array.from(e))
                }, t
            }(a.Component))
    },
    JtUK: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n) {
            void 0 === n && (n = !1);
            if (n) switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to timeout {login}.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAdmin:
                    return Object(i.d)("You cannot timeout admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAlreadyBanned:
                    return Object(i.d)("{login} is already banned in this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAnonymous:
                    return Object(i.d)("You cannot timeout anonymous users.", "BanUserErrorCode");
                case a.a.TargetIsBroadcaster:
                    return Object(i.d)("You cannot timeout the broadcaster.", "BanUserErrorCode");
                case a.a.TargetIsGlobalMod:
                    return Object(i.d)("You cannot timeout global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsMod:
                    return Object(i.d)("You cannot timeout moderator {login} unless you are the owner of this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsSelf:
                    return Object(i.d)("You cannot timeout yourself.", "BanUserErrorCode");
                case a.a.TargetIsStaff:
                    return Object(i.d)("You cannot timeout staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to timeout doesn't exist.", "BanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result.")
            } else switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to ban {login}.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAdmin:
                    return Object(i.d)("You cannot ban admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAlreadyBanned:
                    return Object(i.d)("{login} is currently banned in this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAnonymous:
                    return Object(i.d)("You cannot ban anonymous users.", "BanUserErrorCode");
                case a.a.TargetIsBroadcaster:
                    return Object(i.d)("You cannot ban the broadcaster.", "BanUserErrorCode");
                case a.a.TargetIsGlobalMod:
                    return Object(i.d)("You cannot ban global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsMod:
                    return Object(i.d)("You cannot ban moderator {login} unless you are the owner of this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsSelf:
                    return Object(i.d)("You cannot ban yourself.", "BanUserErrorCode");
                case a.a.TargetIsStaff:
                    return Object(i.d)("You cannot ban staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to ban doesn't exist.", "BanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result.")
            }
        };
        var i = n("6sO2"),
            a = n("1OO3")
    },
    Jy6n: function(e, t) {},
    KBUQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            var t = this;
            return Object(r.a)(o, {
                props: function(n) {
                    return {
                        unbanUserMutation: function(i) {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var t;
                                return a.__generator(this, function(a) {
                                    switch (a.label) {
                                        case 0:
                                            if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                            a.label = 1;
                                        case 1:
                                            return a.trys.push([1, 3, , 4]), [4, n.mutate({
                                                variables: {
                                                    input: {
                                                        channelID: t,
                                                        bannedUserLogin: i
                                                    }
                                                }
                                            })];
                                        case 2:
                                            return [2, a.sent().data];
                                        case 3:
                                            throw a.sent(), new Error("Unable to unban user");
                                        case 4:
                                            return [3, 6];
                                        case 5:
                                            throw new Error("Unban user mutation is not ready");
                                        case 6:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i, a = n("TToO"),
            r = n("7vx8"),
            o = n("l669");
        n.n(o);
        ! function(e) {
            e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetNotBanned = "TARGET_NOT_BANNED"
        }(i || (i = {}))
    },
    KNSH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_UserData"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 95
            }
        };
        n.loc.source = {
            body: "query Chat_UserData {\nuser {\nid\ndisplayName\nlogin\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KWLn: function(e, t) {},
    KfLc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), n.d(t, "d", function() {
            return s
        }), n.d(t, "b", function() {
            return l
        }), n.d(t, "e", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var i = n("6sO2"),
            a = n("vH/s"),
            r = n("aSvS"),
            o = function(e) {
                var t = {
                    action: r.b.DismissToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            s = function(e) {
                var t = {
                    action: r.b.RedeemToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: e.userMessage
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            l = function(e) {
                var t = {
                    action: r.b.RequestEligibility,
                    channel_id: e.channelID,
                    user_banner: null,
                    user_message: null
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            d = function(e) {
                var t = {
                    action: r.b.RequestToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            c = function(e) {
                var t = {
                    action: e.action,
                    channel_id: e.channelID
                };
                i.n.track(a.SpadeEventType.NewChatterOnboardingInteraction, t)
            }
    },
    KnZO: function(e, t) {},
    Kthq: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n) {
            void 0 === n && (n = !1);
            if (n) switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to untimeout {login}.", {
                        login: e
                    }, "UnbanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to untimeout doesn't exist.", "UnbanUserErrorCode");
                case a.a.TargetNotBanned:
                    return Object(i.d)("{login} is not currently timed out from this channel.", {
                        login: e
                    }, "UnbanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result")
            } else switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to unban {login}.", {
                        login: e
                    }, "UnbanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to unban doesn't exist.", "UnbanUserErrorCode");
                case a.a.TargetNotBanned:
                    return Object(i.d)("{login} is not currently banned from this channel.", {
                        login: e
                    }, "UnbanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result")
            }
        };
        var i = n("6sO2"),
            a = n("KBUQ")
    },
    L0RX: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    LM6T: function(e, t) {},
    "Lx+S": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("CIox"),
            s = n("2KeS"),
            l = n("NXs7"),
            d = n("Ouuk"),
            c = n("jF7o"),
            u = n("+xm8"),
            m = n("f2i/"),
            p = n("NikC"),
            h = n("Aj/L"),
            g = n("0nzt"),
            f = n("vh75"),
            v = n("ass3"),
            b = n("TnJK"),
            k = n("O0Qc"),
            y = n("VsL1"),
            _ = n("Umoc"),
            C = n("6sO2"),
            S = n("zCIC"),
            E = n("7vx8"),
            N = n("HW6M"),
            w = n("6BvN"),
            D = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            O = n("Odds"),
            I = (n("90yy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onKeyPress = function(e) {
                        if (e.charCode === w.a.Enter || e.charCode === w.a.Space) {
                            var n = e.currentTarget.getAttribute("data-color");
                            t.selectColor(n)
                        }
                    }, t.onColorSelected = function(e) {
                        var n = e.currentTarget.getAttribute("data-color");
                        t.selectColor(n)
                    }, t.selectColor = function(e) {
                        e && t.props.onColorSelected(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = D.map(function(t) {
                            var n = {
                                "color-chooser": !0,
                                "color-chooser--selected": t === e.props.selectedColor
                            };
                            return a.createElement("div", {
                                key: t,
                                "data-color": t,
                                onClick: e.onColorSelected,
                                onKeyPress: e.onKeyPress,
                                className: N(n),
                                style: {
                                    backgroundColor: t
                                },
                                "data-test-selector": "color_swatch_" + t,
                                "data-a-target": "color_swatch_" + t,
                                tabIndex: 0
                            })
                        }),
                        n = a.createElement(O.O, {
                            transform: O._40.Uppercase,
                            color: O.J.Alt2
                        }, Object(C.d)("Name Color", "ChatSettings"));
                    return this.props.borderTop && (n = a.createElement(O._27, {
                        margin: {
                            top: 2
                        },
                        borderTop: !0,
                        padding: {
                            top: 2
                        }
                    }, n)), a.createElement("div", null, a.createElement(O._27, {
                        margin: {
                            bottom: 1
                        },
                        background: O.m.Base,
                        color: O.J.Base,
                        display: O.P.InlineFlex,
                        flexDirection: O.R.Column,
                        fullWidth: !0
                    }, n), a.createElement(O._4, {
                        margin: {
                            y: 1
                        },
                        display: O.P.Flex,
                        flexWrap: O.S.Wrap
                    }, t, a.createElement(O.O, {
                        fontSize: O.T.Size7
                    }, a.createElement("a", {
                        href: "https://twitch.tv/products/turbo?ref=more_colors_direct"
                    }, Object(C.d)("more colors →", "ChatSettings")))))
                }, t
            }(a.Component)),
            R = n("OAwv"),
            T = n("AaXK"),
            M = (n("7LVu"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onGlobalBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setGlobalBadge(t.props.userLogin, n || "")
                    }, t.onGlobalBadgeKeyPress = function(e) {
                        if (e.charCode === w.a.Enter || e.charCode === w.a.Space) {
                            var n = e.currentTarget.getAttribute("data-badge");
                            t.setGlobalBadge(t.props.userLogin, n || "")
                        }
                    }, t.onChannelBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                    }, t.onChannelBadgeKeyPress = function(e) {
                        if (e.charCode === w.a.Enter || e.charCode === w.a.Space) {
                            var n = e.currentTarget.getAttribute("data-badge");
                            t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.currentUser ? a.createElement("div", null, a.createElement(I, {
                        selectedColor: this.props.userChatColor,
                        onColorSelected: this.props.onColorSelected,
                        borderTop: !0
                    }), this.getBadgeChooser()) : null
                }, t.prototype.getBadgeChooser = function() {
                    var e = this;
                    if (this.props.data) {
                        var t = this.props.data.user.self.availableBadges,
                            n = this.props.data.user.self.selectedBadge,
                            i = this.props.data.currentUser.availableBadges,
                            r = this.props.data.currentUser.selectedBadge;
                        if (!t) return null;
                        var o = void 0 === this.state.channelBadgeID && n ? n.setID : this.state.channelBadgeID,
                            s = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !o
                            },
                            l = Object(C.d)("No channel badges :(", "ChatSettings");
                        t && t.length > 0 && (l = t.map(function(t) {
                            var i = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": n && t.setID === o
                            };
                            return a.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onChannelBadgeClicked,
                                onKeyPress: e.onChannelBadgeKeyPress,
                                key: t.setID + "/" + t.version,
                                className: N(i),
                                "data-test-selector": "channel_badge_" + t.setID,
                                "data-a-target": "channel_badge_" + t.setID,
                                tabIndex: 0
                            }, a.createElement(O._44, {
                                label: t.title
                            }, a.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(a.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onChannelBadgeClicked,
                            onKeyPress: this.onChannelBadgeKeyPress,
                            className: N(s),
                            "data-test-selector": "channel_badge_none",
                            "data-a-target": "channel_badge_none",
                            tabIndex: 0
                        }, a.createElement(O._44, {
                            label: Object(C.d)("Same as Global", "ChatSettings")
                        }, a.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, a.createElement(O._17, {
                            asset: O._18.Global
                        })))));
                        var d = void 0 === this.state.globalBadgeID && r ? r.setID : this.state.globalBadgeID,
                            c = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !d
                            },
                            u = Object(C.d)("No global badges :(", "ChatSettings");
                        return i && i.length > 0 && (u = i.map(function(t) {
                            var n = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": r && t.setID === d
                            };
                            return a.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onGlobalBadgeClicked,
                                onKeyPress: e.onGlobalBadgeKeyPress,
                                key: t.setID + "/" + t.version,
                                className: N(n),
                                "data-test-selector": "global_badge_" + t.setID,
                                "data-a-target": "global_badge_" + t.setID,
                                tabIndex: 0
                            }, a.createElement(O._44, {
                                label: t.title
                            }, a.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(a.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onGlobalBadgeClicked,
                            onKeyPress: this.onGlobalBadgeKeyPress,
                            className: N(c),
                            "data-test-selector": "global_badge_none",
                            "data-a-target": "global_badge_none",
                            tabIndex: 0
                        }, a.createElement(O._44, {
                            label: Object(C.d)("None", "ChatSettings")
                        }, a.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, a.createElement(O._17, {
                            asset: O._18.Ban
                        }))))), a.createElement("div", null, a.createElement(O._27, {
                            background: O.m.Base,
                            color: O.J.Base,
                            display: O.P.InlineFlex,
                            flexDirection: O.R.Column,
                            fullWidth: !0
                        }, a.createElement(O._27, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, a.createElement(O._44, {
                            align: O._45.Left,
                            label: Object(C.d)("Your global badge is shown when chatting and whispering.", "ChatSettings"),
                            width: 175
                        }, a.createElement(O.O, {
                            color: O.J.Alt2,
                            transform: O._40.Uppercase
                        }, Object(C.d)("Global Badge [?]", "ChatSettings")))), a.createElement(O._4, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: O.P.Flex,
                            "data-a-target": "global-badge-selector"
                        }, u)), a.createElement(O._27, {
                            background: O.m.Base,
                            color: O.J.Base,
                            display: O.P.InlineFlex,
                            flexDirection: O.R.Column,
                            fullWidth: !0
                        }, a.createElement(O._27, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, a.createElement(O._44, {
                            align: O._45.Left,
                            label: Object(C.d)("Change the badge shown when chatting in this channel.", "ChatSettings"),
                            width: 175
                        }, a.createElement(O.O, {
                            color: O.J.Alt2,
                            transform: O._40.Uppercase
                        }, Object(C.d)("Channel Badge [?]", "ChatSettings")))), a.createElement(O._4, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: O.P.Flex,
                            "data-a-target": "channel-badge-selector"
                        }, l)))
                    }
                }, t.prototype.setChannelBadge = function(e, t, n) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return a = {
                                        "Client-ID": C.o.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, [4, fetch("https://api.twitch.tv/kraken/users/" + t + "/chat/channels/" + e + "/badges", {
                                        method: "PUT",
                                        body: R.stringify({
                                            selected_badge: n
                                        }),
                                        headers: a
                                    })];
                                case 1:
                                    return (r = i.sent()) && r.ok && (this.props.onBadgesChanged(), this.setState({
                                        channelBadgeID: n
                                    })), [2]
                            }
                        })
                    })
                }, t.prototype.setGlobalBadge = function(e, t) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var n, a;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return n = {
                                        "Client-ID": C.o.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, [4, fetch("https://api.twitch.tv/kraken/users/" + e + "/chat/badges", {
                                        method: "PUT",
                                        body: R.stringify({
                                            selected_badge: t
                                        }),
                                        headers: n
                                    }).catch(console.error)];
                                case 1:
                                    return (a = i.sent()) && a.ok && (this.props.onBadgesChanged(), this.setState({
                                        globalBadgeID: t
                                    })), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(E.a)(T, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(a.Component)),
            L = n("+Znq"),
            x = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(O._4, {
                        "data-toggle-balloon-id": "raids-follower-only-tooltip",
                        margin: {
                            left: .5
                        },
                        position: O._11.Relative
                    }, a.createElement(O._44, {
                        align: O._45.Right,
                        direction: O._46.Top,
                        display: O.P.InlineFlex,
                        label: this.props.text,
                        width: 175,
                        show: !0
                    }, a.createElement(O.Y, {
                        alignItems: O.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: O.P.InlineFlex,
                        justifyContent: O._3.Center
                    }, a.createElement(O.O, {
                        color: O.J.Overlay,
                        fontSize: O.T.Size8,
                        type: O._41.Span,
                        "data-test-selector": "raids-follower-only-tooltip"
                    }, "i"))))
                }, t
            }(a.Component),
            A = n("V5M+"),
            F = n("oSFp"),
            j = n("F8kA"),
            B = n("9u8h"),
            U = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.targetChannelID = t.props.targetChannelID, t
                }
                return i.__extends(t, e), t.fetchRecentRaidsList = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, B.a.get("/kraken/raids?client_id=" + C.a.authClientID + "&api_version=" + C.a.defaultAPIVersion + "&target_id=" + e)];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), C.j.error(n, "Couldn't fetch raids list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.deserialize = function(e) {
                    var t = [];
                    if (e.body && e.body.raids) {
                        for (var n in e.body.raids)
                            if (n.hasOwnProperty) {
                                var i = {
                                    raidID: e.body.raids[n]._id,
                                    raidAt: e.body.raids[n].raid_at,
                                    userID: e.body.raids[n].creator_user._id,
                                    name: e.body.raids[n].creator_user.name
                                };
                                t.push(i)
                            }
                        return t
                    }
                    return []
                }, t
            }(a.Component),
            P = n("oIkB"),
            V = n("g7wA"),
            H = n("O9wU"),
            W = n("jPU6"),
            G = n("y1/w"),
            q = (n("MSFW"), n("L0RX")),
            z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onUsernameClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-username"),
                            i = e.currentTarget.getAttribute("data-raid-id") || "";
                        n && t.props.onUsernameClick(n, H.a.recent_raids, i)
                    }, t.onBanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.banUser)(Object(P.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t.onUnbanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.unbanUser)(Object(P.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(O._4, {
                        key: "recent-raids-layout2-" + this.props.raiderUserID,
                        className: "recent-raids-item",
                        flexDirection: O.R.Row,
                        display: O.P.Flex,
                        fullWidth: !0
                    }, a.createElement(O._4, {
                        flexDirection: O.R.Row,
                        display: O.P.Flex,
                        fullWidth: !0,
                        justifyContent: O._3.Between
                    }, a.createElement(O.O, {
                        bold: !0
                    }, a.createElement("a", {
                        className: "recent-raids-item__name",
                        "data-username": this.props.channelLogin,
                        "data-raid-id": this.props.raidID,
                        onClick: this.onUsernameClick,
                        href: "#"
                    }, this.props.channelLogin)), a.createElement(O._4, {
                        position: O._11.Relative
                    }, a.createElement(O._4, {
                        className: "recent-raids-item__timestamp"
                    }, Object(V.u)(Date.parse(this.props.timestamp))), this.getCardSlideInContent())))
                }, t.prototype.getCardSlideInContent = function() {
                    if (!this.props.slideInContent) return null;
                    var e = null;
                    return e = this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? a.createElement(O.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: O.y.Small,
                        type: O.A.Text,
                        onClick: this.onUnbanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(C.d)("Unban", "RecentRaid")) : a.createElement(O.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: O.y.Small,
                        type: O.A.Text,
                        onClick: this.onBanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(C.d)("Ban", "RecentRaid")), a.createElement(O._4, {
                        key: "recent-raids-layout-" + this.props.raiderUserID,
                        className: "recent-raids-item__hover-content",
                        zIndex: O._53.Above,
                        "data-a-target": "recent-raids-item-hover"
                    }, this.props.slideInContent, e)
                }, t = i.__decorate([Object(E.a)(G, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.raiderUserID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(E.a)(W, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var i = e.readQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        }
                                    });
                                    i && (t && t.data && (i.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        },
                                        data: i
                                    }))
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(E.a)(q, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: t.raiderUserID,
                                            channelID: t.channelID
                                        }
                                    });
                                    if (n) {
                                        var a = i.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                        e.writeQuery({
                                            query: G,
                                            variables: {
                                                targetUserID: t.raiderUserID,
                                                channelID: t.channelID
                                            },
                                            data: a
                                        })
                                    }
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(a.Component),
            $ = n("mw/a"),
            J = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onReportButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-raid-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: $.a.Raid,
                                targetUserID: i,
                                contentID: n,
                                extra: JSON.stringify({
                                    channel_id: i.toString()
                                })
                            },
                            title: Object(C.d)("Report {channelDisplayName}", {
                                channelDisplayName: a
                            }, "ReportUserModal")
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, U.fetchRecentRaidsList(this.props.targetChannelID)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        raidChannels: e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = [],
                        t = [],
                        n = {};
                    if (void 0 !== this.state.raidChannels)
                        for (var i in 0 === this.state.raidChannels.length && e.push(a.createElement(O.O, {
                                key: "recent-raids-no-raids",
                                type: O._41.P
                            }, Object(C.d)("You have no recent raids", "RecentRaids"))), this.state.raidChannels)
                            if (i.hasOwnProperty) {
                                var r = this.state.raidChannels[i];
                                this.state.raidChannels.hasOwnProperty(i) && void 0 === n[r.userID] && (t.push(a.createElement(z, {
                                    key: "recent-raids-item-" + r.userID,
                                    slideInContent: [a.createElement(O._27, {
                                        key: "recent-raids-item-report-area-" + r.userID,
                                        color: O.J.Alt2,
                                        display: O.P.InlineFlex
                                    }, a.createElement(O.u, {
                                        key: "recent-raid-report-button",
                                        size: O.y.Small,
                                        type: O.A.Text,
                                        onClick: this.onReportButtonClick,
                                        "data-a-target": "recent-raid-item-button",
                                        "data-raid-id": r.raidID,
                                        "data-target-user-login": r.name,
                                        "data-target-user-id": r.userID
                                    }, Object(C.d)("Report", "RecentRaid")), a.createElement(O._44, {
                                        align: O._45.Right,
                                        width: 150,
                                        label: Object(C.d)("Banning a user prevents them from future chatting or raiding", "RecentRaid")
                                    }))],
                                    timestamp: r.raidAt,
                                    channelLogin: r.name,
                                    raiderUserID: r.userID,
                                    channelID: this.props.targetChannelID,
                                    raiderLogin: r.name,
                                    raidID: r.raidID,
                                    onUsernameClick: this.props.onUsernameClick,
                                    showReportUserModal: this.props.showReportUserModal
                                })), n[r.userID] = !0)
                            }
                    var o = null;
                    return this.props.recentRaids ? a.createElement(O._4, {
                        key: "recent-raids"
                    }, a.createElement(O._4, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(O.O, {
                        color: O.J.Link,
                        type: O._41.Span
                    }, a.createElement(j.a, {
                        to: {
                            pathname: "/broadcast/dashboard/settings/raids"
                        }
                    }, Object(C.d)("Manage Raid Settings", "RecentRaids")))), e, t) : (o = a.createElement(O._4, {
                        key: "recent-raids",
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: O.P.Flex,
                        justifyContent: O._3.Between,
                        alignItems: O.c.Center
                    }, a.createElement(O.M, {
                        hoverUnderlineNone: !0,
                        onClick: this.props.onClickRecentRaids,
                        "data-test-selector": "recent-raids-button"
                    }, Object(C.d)("See Recent Raids", "ChatSettings")), this.props.tooltipText && a.createElement(O._4, {
                        position: O._11.Relative
                    }, a.createElement(O._44, {
                        align: O._45.Right,
                        direction: O._46.Top,
                        display: O.P.InlineFlex,
                        label: this.props.tooltipText,
                        width: 175,
                        show: !0
                    }, a.createElement(O.Y, {
                        alignItems: O.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: O.P.InlineFlex,
                        justifyContent: O._3.Center,
                        margin: {
                            left: .5
                        }
                    }, a.createElement(O.O, {
                        color: O.J.Overlay,
                        fontSize: O.T.Size8,
                        type: O._41.Span
                    }, "i"))))), a.createElement(O._4, null, o))
                }, t
            }(a.Component);
        var Q = Object(r.b)(function() {
                return {}
            }, function(e) {
                return Object(s.b)({
                    showReportUserModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(A.d)(F.a, t)
                    }
                }, e)
            })(J),
            Y = n("UzRK"),
            K = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleFollowerDurationClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-duration");
                        n && t.onFollowerDurationChange(parseInt(n, 10))
                    }, t.onClickRecentRaids = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickRecentRaids()
                    }, t.onChatClear = function() {
                        t.props.onChatCommand(Object(k.c)())
                    }, t.getSelectedFollowerDuration = function() {
                        if (t.props.followerModeEnabled) return t.props.followerModeDuration;
                        var e = t.props.lastUsedFollowerDurations[t.props.channelLogin];
                        return "number" == typeof e ? e : Y.a
                    }, t.onFollowerModeToggle = function() {
                        if (t.props.followerModeEnabled) t.props.onChatCommand(Object(k.d)()), t.props.onFollowerModeDisable();
                        else {
                            var e = t.getSelectedFollowerDuration();
                            t.props.onChatCommand(Object(k.f)(e)), t.props.onFollowerModeDurationChange(e), t.props.onFollowerModeEnable()
                        }
                        Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.followerModeEnabled,
                            settingName: b.a.FollowerMode
                        })
                    }, t.onSlowModeToggle = function() {
                        t.props.slowModeEnabled ? (t.props.onChatCommand(Object(k.e)()), t.props.onSlowModeDisable()) : (t.props.onChatCommand(Object(k.g)()), t.props.onSlowModeEnable()), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.slowModeEnabled,
                            settingName: b.a.SlowMode
                        })
                    }, t.onFollowerDurationChange = function(e) {
                        Object(y.c)(t.props.channelLogin, e), t.props.onFollowerModeDurationPreferenceChange(t.props.channelLogin, e), t.props.followerModeEnabled && (t.props.onChatCommand(Object(k.f)(e)), t.props.onFollowerModeDurationChange(e)), Object(_.c)({
                            channelLogin: t.props.channelLogin,
                            followerModeOn: t.props.followerModeEnabled,
                            isHostMode: t.props.isHostMode,
                            newValue: e
                        })
                    }, t.onModIconsToggle = function() {
                        Object(y.b)("showModIcons", !t.props.showModerationIcons), t.props.showModerationIcons ? t.props.onModIconsDisable() : t.props.onModIconsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showModerationIcons,
                            settingName: b.a.ShowModIcons
                        })
                    }, t.onShowModerationActionsToggle = function() {
                        Object(y.b)("showModerationActions", !t.props.showModerationActions), t.props.showModerationActions ? t.props.onShowModerationActionsDisable() : t.props.onShowModerationActionsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showModerationActions,
                            settingName: b.a.ShowModActions
                        })
                    }, t.onShowAutoModActionsToggle = function() {
                        Object(y.b)("showAutoModActions", !t.props.showAutoModActions), t.props.showAutoModActions ? t.props.onShowAutoModActionsDisable() : t.props.onShowAutoModActionsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showAutoModActions,
                            settingName: b.a.ShowAutoModActions
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (!this.props.isCurrentUserModerator) return null;
                    var t = this.getSelectedFollowerDuration(),
                        n = Y.b.map(function(n) {
                            return a.createElement(O._2, {
                                "data-duration": n,
                                key: n,
                                onClick: e.handleFollowerDurationClick,
                                selected: n === t
                            }, a.createElement(O._4, {
                                padding: .5
                            }, Object(Y.c)(n)))
                        });
                    return a.createElement(O._27, {
                        key: "mod-tools",
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, a.createElement(O._4, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(O.O, {
                        color: O.J.Alt2,
                        transform: O._40.Uppercase
                    }, Object(C.d)("Mod Tools", "ChatSettings"))), a.createElement(O._4, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.showModerationIcons,
                        "data-a-target": "mod-icons-checkbox",
                        "data-test-selector": "mod-icons-checkbox",
                        id: "chat-settings-mod-icons",
                        label: Object(C.d)("Mod Icons", "ChatSettings"),
                        onChange: this.onModIconsToggle
                    })), a.createElement(O._27, {
                        margin: {
                            bottom: 1
                        },
                        display: O.P.Flex,
                        justifyContent: O._3.Between,
                        flexWrap: O.S.Wrap
                    }, a.createElement(O.I, {
                        checked: this.props.followerModeEnabled,
                        "data-a-target": "follower-mode-checkbox",
                        "data-test-selector": "follower-mode-checkbox",
                        id: "chat-settings-followers-only",
                        label: Object(C.d)("Followers-Only Chat", "ChatSettings"),
                        onChange: this.onFollowerModeToggle
                    }), this.props.showRaidsTooltip ? a.createElement(x, {
                        text: Object(C.d)("Prevent offensive raiders from chatting.", "RaidReportingChat")
                    }) : null, a.createElement(O._4, {
                        alignItems: O.c.Center,
                        display: O.P.Flex,
                        flexWrap: O.S.NoWrap,
                        justifyContent: O._3.Between
                    }, a.createElement(O._4, {
                        margin: {
                            right: .5
                        }
                    }, a.createElement(O.O, {
                        color: O.J.Alt2,
                        fontSize: O.T.Size7,
                        type: O._41.Span
                    }, Object(C.d)("Must have followed for", "ChatSettings"))), a.createElement(O._4, {
                        className: "chat-settings__mod-tools-follower-button",
                        flexShrink: 0
                    }, a.createElement(L.a, {
                        display: O.P.InlineBlock
                    }, a.createElement(O.u, {
                        size: O.y.Small,
                        type: O.A.Text,
                        "data-a-target": "follower-mode-dropdown",
                        "data-test-selector": "follower-mode-duration-menu",
                        dropdown: !0
                    }, Object(Y.d)(t)), a.createElement(O.p, {
                        direction: O.q.TopRight
                    }, a.createElement(O._4, {
                        padding: .5
                    }, a.createElement(O.O, {
                        color: O.J.Alt2
                    }, Object(C.d)("Followers can chat if they have followed for at least", "ChatSettings"))), a.createElement(O._27, {
                        color: O.J.Link
                    }, n)))))), a.createElement(O._4, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.slowModeEnabled,
                        "data-a-target": "slow-mode-checkbox",
                        "data-test-selector": "slow-mode-checkbox",
                        id: "chat-settings-slow-mode",
                        label: Object(C.d)("Slow Mode", "ChatSettings"),
                        onChange: this.onSlowModeToggle
                    })), a.createElement(O._4, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.showModerationActions,
                        "data-a-target": "show-mod-actions-checkbox",
                        "data-test-selector": "show-mod-actions",
                        id: "chat-settings-show-mod-actions",
                        label: Object(C.d)("Show Moderation Actions", "ChatSettings"),
                        onChange: this.onShowModerationActionsToggle
                    })), a.createElement(O._4, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.showAutoModActions,
                        "data-a-target": "show-automod-messages-checkbox",
                        "data-test-selector": "show-automod-messages",
                        id: "chat-settings-show-automod-messages",
                        label: Object(C.d)("Show Messages Caught by AutoMod", "ChatSettings"),
                        onChange: this.onShowAutoModActionsToggle
                    })), a.createElement(Q, {
                        key: "recent-raids",
                        recentRaids: this.props.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard,
                        targetChannelID: this.props.channelID,
                        tooltipText: this.props.showRaidsTooltip ? Object(C.d)("View recent raids with option to report or ban.", "RaidReportingChat") : ""
                    }), a.createElement("button", {
                        onClick: this.onChatClear,
                        "data-a-target": "clear-chat-button",
                        "data-test-selector": "clear-chat-button"
                    }, Object(C.d)("Clear Chat", "ChatSettings")))
                }, t
            }(a.Component);
        var Z = Object(r.b)(function(e) {
                return {
                    followerModeDuration: e.chat.followerDuration,
                    followerModeEnabled: e.chat.followerMode,
                    lastUsedFollowerDurations: e.chat.lastUsedFollowerDurations,
                    showAutoModActions: e.chat.showAutoModActions,
                    showModerationActions: e.chat.showModerationActions,
                    showModerationIcons: e.chat.showModIcons,
                    slowModeEnabled: e.chat.slowMode
                }
            }, function(e) {
                return Object(s.b)({
                    onChatHide: function() {
                        return f.Q()
                    },
                    onChatUnhide: function() {
                        return f.T()
                    },
                    onFollowerModeDisable: function() {
                        return f.C()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return f.z(e)
                    },
                    onFollowerModeDurationPreferenceChange: function(e, t) {
                        return f.A(e, t)
                    },
                    onFollowerModeEnable: function() {
                        return f.J()
                    },
                    onModIconsDisable: function() {
                        return f.D()
                    },
                    onModIconsEnable: function() {
                        return f.K()
                    },
                    onShowAutoModActionsEnable: function() {
                        return f.L()
                    },
                    onShowAutoModActionsDisable: function() {
                        return f.E()
                    },
                    onShowModerationActionsEnable: function() {
                        return f.M()
                    },
                    onShowModerationActionsDisable: function() {
                        return f.F()
                    },
                    onSlowModeDisable: function() {
                        return f.G()
                    },
                    onSlowModeEnable: function() {
                        return f.N()
                    },
                    onTimestampsDisable: function() {
                        return f.I()
                    },
                    onTimestampsEnable: function() {
                        return f.P()
                    },
                    onThemeChanged: function(e) {
                        return Object(p.b)(e, void 0, !1)
                    },
                    login: function() {
                        return Object(m.f)(u.a.Chat)
                    }
                }, e)
            })(K),
            X = n("SZoP"),
            ee = n("3T7g"),
            te = "edit-appearance-button",
            ne = "edit-display-name";

        function ie(e) {
            var t = a.createElement(O.O, {
                    bold: !0,
                    type: O._41.Span
                }, a.createElement("span", {
                    style: {
                        color: e.chatColor
                    },
                    "data-a-target": ne
                }, Object(X.a)(e.login, e.displayName))),
                n = null;
            return e.editAppearance || (n = a.createElement(O._4, {
                margin: {
                    top: 1
                }
            }, a.createElement(O.M, {
                hoverUnderlineNone: !0,
                onClick: e.onClickEdit,
                "data-a-target": te,
                "data-test-selector": te
            }, Object(C.d)("Edit Appearance", "ChatSettings")))), a.createElement(O._27, {
                background: O.m.Base,
                color: O.J.Base,
                display: O.P.InlineFlex,
                flexDirection: O.R.Column,
                fullWidth: !0
            }, a.createElement(O.O, {
                color: O.J.Alt2,
                transform: O._40.Uppercase
            }, Object(C.d)("Name Display", "ChatSettings")), a.createElement(O._4, {
                margin: {
                    top: 2
                }
            }, e.userBadges && e.userBadges.map(function(e) {
                return a.createElement(ee.a, {
                    key: e.id,
                    badge: e
                })
            }), t), n)
        }
        var ae = n("pg5l"),
            re = (n("Vaxm"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        recentRaids: !1,
                        chatColor: null,
                        raidsTooltipDismissed: !1
                    }, t.resizeAnimationFrame = 0, t.dismissRaidsTooltip = function() {
                        t.setState({
                            raidsTooltipDismissed: !0
                        })
                    }, t.onClickEdit = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickEditAppearance()
                    }, t.onClickRecentRaids = function() {
                        t.setState({
                            recentRaids: !0
                        })
                    }, t.onClickBack = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onLeaveEditAppearance(), t.setState({
                            recentRaids: !1
                        })
                    }, t.onColorSelected = function(e) {
                        t.setState({
                            chatColor: e
                        }), t.props.onColorSelected(e)
                    }, t.onBadgesChanged = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return !this.props.data || this.props.data.loading ? [3, 2] : [4, this.props.data.refetch()];
                                    case 1:
                                        if ((e = i.sent()).data) {
                                            if (!(t = e.data).user.self) return [2];
                                            n = {}, t.user.self.displayBadges.forEach(function(e) {
                                                n[e.setID] = e.version
                                            }), C.o.tmi.client.updateChannelBadges(this.props.channelLogin, n)
                                        }
                                        i.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 700;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.onResize, !0), this.setContainerHeight()
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.render = function() {
                    if (!this.props.data || this.props.data.loading) return null;
                    var e = null;
                    if (this.props.isLoggedIn && this.props.data.currentUser) {
                        var t = this.props.data.user.self ? this.props.data.user.self.displayBadges : [];
                        e = a.createElement(ie, {
                            key: "name-display",
                            login: this.props.data.currentUser.login,
                            displayName: this.props.data.currentUser.displayName,
                            chatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                            editAppearance: this.props.editAppearance,
                            userBadges: t,
                            onClickEdit: this.onClickEdit
                        })
                    }
                    var n = [];
                    return this.props.isLoggedIn ? this.props.editAppearance ? n = [a.createElement(O.Y, {
                        margin: {
                            bottom: 2
                        },
                        key: "chat-settings-edit-inject",
                        className: "chat-settings__edit-button"
                    }, a.createElement(O.M, {
                        hoverUnderlineNone: !0,
                        key: "chat-settings-edit",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, a.createElement(O.O, {
                        color: O.J.Link,
                        type: O._41.Span
                    }, a.createElement(O._17, {
                        asset: O._18.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(C.d)("Back", "ChatSettingsAppearance")))), e, a.createElement(M, {
                        key: "edit-appearance",
                        onColorSelected: this.onColorSelected,
                        editAppearance: this.props.editAppearance,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        userChatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                        userLogin: this.props.data.currentUser.login,
                        onBadgesChanged: this.onBadgesChanged
                    })] : this.state.recentRaids ? n = [a.createElement(O.Y, {
                        key: "chat-settings-recent-raids"
                    }, a.createElement(O.M, {
                        hoverUnderlineNone: !0,
                        key: "chat-settings-edit",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, a.createElement(O.O, {
                        color: O.J.Link,
                        type: O._41.Span
                    }, a.createElement(O._17, {
                        asset: O._18.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(C.d)("Back", "ChatSettingsRecentRaids")), a.createElement(O._4, {
                        margin: {
                            top: 2
                        }
                    }, a.createElement(O.O, {
                        key: "recent-raids-title",
                        color: O.J.Alt2,
                        transform: O._40.Uppercase
                    }, Object(C.d)("Recent Raids", "ChatSettings"))))), a.createElement(Q, {
                        key: "recent-raids",
                        targetChannelID: this.props.channelID,
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard
                    })] : (n = [e, this.renderUniversalOptions()], this.props.isCurrentUserModerator && n.push(a.createElement(Z, {
                        key: "moderation-tools",
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isHostMode: this.props.isHostMode,
                        isLoggedIn: this.props.isLoggedIn,
                        onChatCommand: this.props.onChatCommand,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onShowViewerCard: this.props.onShowViewerCard,
                        recentRaids: this.state.recentRaids,
                        showRaidsTooltip: this.showRaidsTooltip
                    }))) : n = [a.createElement(I, {
                        key: "color-chooser",
                        onColorSelected: this.props.onColorSelected
                    }), this.renderUniversalOptions()], a.createElement(S.b, {
                        className: "chat-settings",
                        suppressScrollX: !0,
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, a.createElement("div", {
                        onClick: this.dismissRaidsTooltip
                    }, a.createElement(O._27, {
                        key: "chat-settings",
                        className: "chat-settings__content",
                        background: O.m.Base,
                        color: O.J.Base,
                        padding: 2
                    }, n)))
                }, t.prototype.renderUniversalOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && a.createElement(O.I, {
                            checked: this.props.darkModeEnabled,
                            "data-a-target": "darkmode-checkbox",
                            "data-test-selector": "dark-mode-checkbox",
                            id: "chat-settings-dark-mode",
                            label: Object(C.d)("Dark Mode", "ChatSettings"),
                            onChange: this.props.onDarkModeToggle
                        }),
                        t = a.createElement("button", {
                            onClick: this.props.onChatPopout,
                            "data-a-target": "popout-chat-button",
                            "data-test-selector": "popout-button"
                        }, Object(C.d)("Popout", "ChatSettings")),
                        n = !this.props.isPopout && (window.BetterTTV || window.FrankerFaceZ) && a.createElement("button", {
                            onClick: this.props.onLegacyChatPopout,
                            "data-test-selector": "legacy-popout-button"
                        }, Object(C.d)("Legacy Popout", "ChatSettings")),
                        i = !this.props.isPopout && a.createElement("button", {
                            onClick: this.props.onChatHide,
                            "data-a-target": "hide-chat-button",
                            "data-test-selector": "hide-chat-button"
                        }, Object(C.d)("Hide Chat", "ChatSettings"));
                    return a.createElement(O._4, {
                        key: "chat-options"
                    }, a.createElement(O._27, {
                        borderTop: !0,
                        margin: {
                            top: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, a.createElement(O.O, {
                        color: O.J.Alt2,
                        transform: O._40.Uppercase
                    }, Object(C.d)("Chat Options", "ChatSettings"))), a.createElement(O._4, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(O.I, {
                        checked: this.props.showTimestamps,
                        "data-a-target": "timestamp-checkbox",
                        "data-test-selector": "timestamps-selector",
                        id: "chat-settings-timestamp",
                        label: Object(C.d)("Timestamps", "ChatSettings"),
                        onChange: this.props.onTimestampToggle
                    })), a.createElement(O._4, {
                        margin: {
                            bottom: 1
                        }
                    }, e), a.createElement(O._4, {
                        margin: {
                            bottom: 1
                        }
                    }, i), a.createElement(O._4, {
                        margin: {
                            bottom: 1
                        }
                    }, t), n && a.createElement(O._4, null, n))
                }, Object.defineProperty(t.prototype, "showRaidsTooltip", {
                    get: function() {
                        return this.props.sawFirstRaidPrompt && !this.state.raidsTooltipDismissed
                    },
                    enumerable: !0,
                    configurable: !0
                }), t = i.__decorate([Object(E.a)(ae, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(a.Component)),
            oe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        editAppearance: !1
                    }, t.handleSettingsToggle = function(e) {
                        t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                            editAppearance: !1
                        })
                    }, t.onEdit = function() {
                        t.setState({
                            editAppearance: !0
                        })
                    }, t.onLeaveEdit = function() {
                        t.setState({
                            editAppearance: !1
                        })
                    }, t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? l.a.Light : l.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.darkModeEnabled,
                            settingName: b.a.DarkMode
                        })
                    }, t.onTimestampToggle = function() {
                        Object(y.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showTimestamps,
                            settingName: b.a.ShowTimestamps
                        })
                    }, t.onChatHide = function() {
                        t.props.onChatHide(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !0,
                            settingName: b.a.HideChat
                        })
                    }, t.onChatPopout = function() {
                        t.props.isPopout || t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(c.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onLegacyChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("https://www.twitch.tv/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(c.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onColorSelected = function(e) {
                        t.props.isLoggedIn ? t.props.onChatCommand(Object(k.b)(e)) : t.props.login()
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(de, {
                        disabled: this.props.disabled,
                        onToggle: this.handleSettingsToggle
                    }, a.createElement(re, {
                        authToken: this.props.authToken,
                        darkModeEnabled: this.props.darkModeEnabled,
                        editAppearance: this.state.editAppearance,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        onChatCommand: this.props.onChatCommand,
                        onChatHide: this.onChatHide,
                        onChatPopout: this.onChatPopout,
                        onDarkModeToggle: this.onDarkModeToggle,
                        onLegacyChatPopout: this.onLegacyChatPopout,
                        onTimestampToggle: this.onTimestampToggle,
                        showTimestamps: this.props.showTimestamps,
                        theatreModeEnabled: this.props.theatreModeEnabled,
                        onColorSelected: this.onColorSelected,
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isLoggedIn: this.props.isLoggedIn,
                        onClickEditAppearance: this.onEdit,
                        onLeaveEditAppearance: this.onLeaveEdit,
                        sawFirstRaidPrompt: this.props.sawFirstRaidPrompt,
                        onShowViewerCard: this.props.onShowViewerCard,
                        containerElement: this.props.containerElement
                    }))
                }, t
            }(a.Component);
        var se = Object(r.b)(function(e) {
                return {
                    isLoggedIn: Object(h.d)(e),
                    darkModeEnabled: Object(g.a)(e) === l.a.Dark,
                    showTimestamps: e.chat.showTimestamps,
                    theatreModeEnabled: e.ui.theatreModeEnabled
                }
            }, function(e) {
                return Object(s.b)({
                    login: function() {
                        return Object(m.f)(u.a.Chat)
                    },
                    onChatHide: function() {
                        return f.Q()
                    },
                    onChatUnhide: function() {
                        return f.T()
                    },
                    onThemeChanged: function(e) {
                        return Object(p.b)(e, void 0, !1)
                    },
                    onTimestampsDisable: function() {
                        return f.I()
                    },
                    onTimestampsEnable: function() {
                        return f.P()
                    },
                    onShowViewerCard: v.d
                }, e)
            })(oe),
            le = Object(o.e)(se),
            de = function(e) {
                return a.createElement(L.a, {
                    onToggle: e.onToggle
                }, a.createElement(O.v, {
                    icon: O._18.Gear,
                    ariaLabel: Object(C.d)("Chat settings", "ChatInput"),
                    "data-a-target": "chat-settings",
                    disabled: !!e.disabled
                }), a.createElement(O.p, {
                    direction: O.q.Top,
                    noTail: !0,
                    offsetY: "11px",
                    "data-a-target": "chat-settings-balloon"
                }, e.children))
            };
        n.d(t, "a", function() {
            return le
        }), n.d(t, "b", function() {
            return de
        })
    },
    M8zv: function(e, t, n) {
        e.exports = n.p + "assets/empty_state-b5883e957cd574b6630af9c5d66f9b61.png"
    },
    MApH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_BanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 126
            }
        };
        n.loc.source = {
            body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    MSFW: function(e, t) {},
    Mful: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "chatMessage"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ChatMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "authorName"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "authorColor"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "author"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "body"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "embeddedEmote"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "setID"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "version"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsUsed"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/embedded-emote-fragment.gql"\nfragment chatMessage on ChatMessage {\nid\nauthorName\nauthorColor\nauthor {\nid\nlogin\n}\nbody {\ncontent\nemotes {\n...embeddedEmote\n}\n}\nbadges {\nsetID\nversion\n}\nbitsUsed\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("0ImK").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    NZkJ: function(e, t) {},
    Ncf8: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, r) {
            return {
                type: i.b.Moderation,
                moderationType: e,
                id: Object(a.a)(t + "-mod"),
                userLogin: t,
                reason: n,
                duration: r
            }
        };
        var i = n("qkCi"),
            a = n("INp2")
    },
    O0Qc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        }), t.h = function(e) {
            return "/ignore " + e
        }, t.j = function(e) {
            return "/unignore " + e
        }, t.i = function(e) {
            return "/mod " + e
        }, t.k = function(e) {
            return "/unmod " + e
        }, t.m = function(e) {
            return /^[\/]/.test(e)
        }, t.c = function() {
            return "/clear"
        }, t.d = function() {
            return "/followersoff"
        }, t.e = function() {
            return "/slowoff"
        }, t.f = function(e) {
            return "/followers " + e
        }, t.g = function() {
            return "/slow"
        }, t.b = function(e) {
            return "/color " + e
        }, t.q = function(e) {
            var t = e.trim().match(o);
            if (!t) return null;
            return {
                recipientLogin: t[1] || null,
                body: t[2] || null
            }
        }, t.r = function(e) {
            var t = e.trim().match(s);
            if (!t) return {
                recipientLogin: null,
                body: null
            };
            return {
                recipientLogin: t[1] || null,
                body: t[2] || null
            }
        }, t.n = function(e) {
            var t = e.trim().match(l);
            if (!t) return null;
            return {
                bannedUserLogin: t[1],
                duration: t[2] && Number(t[2]) || null
            }
        }, t.p = function(e) {
            var t = e.trim().match(d);
            if (!t) return null;
            return {
                duration: t[1] && Number(t[1]) || null
            }
        }, t.o = function(e) {
            var t = e.trim().match(u);
            if (!t) return null;
            var n = t[1];
            if (!n.startsWith("#") && -1 === c.indexOf(n.toLowerCase())) return null;
            return {
                color: n
            }
        }, t.l = function(e, t) {
            var n = e.match(m);
            if (!n) return {
                handled: !1
            };
            var r = n[1],
                o = i.o.store.getState().chat.commandHandlers[n[1].toLowerCase()];
            if (!o) return {
                command: r,
                handled: !1
            };
            var s = (n[2] || "").trim(),
                l = {
                    channelLogin: t
                };
            try {
                return {
                    command: r,
                    handled: !0,
                    result: o(s, l)
                }
            } catch (e) {
                return a.warn("Exception thrown from chat command handler", {
                    command: n[1],
                    err: e
                }), {
                    handled: !1
                }
            }
        };
        var i = n("6sO2"),
            a = i.o.logger.withCategory("chat-commands"),
            r = "/unraid";
        var o = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i;
        var s = /^(\S+)?\s+(.+)?$/;
        var l = /^\/ban\s+(\S+)(?:\s+(\d+)?)?$/;
        var d = /^\/slow(?:\s+(\d+)?)?$/;
        var c = ["blue", "blueviolet", "cadetblue", "chocolate", "coral", "dodgerblue", "firebrick", "goldenrod", "green", "hotpink", "orangered", "red", "seagreen", "springgreen", "yellowgreen"],
            u = /^\/color\s+(#[A-Fa-f0-9]{6}|[A-Za-z]+)$/;
        var m = /^[/.]([a-z0-9]+)(.+)?$/i
    },
    O9wU: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.room_message = 2] = "room_message", e[e.viewer_list = 3] = "viewer_list", e[e.member_list = 4] = "member_list", e[e.test = 5] = "test"
            }(i || (i = {}))
    },
    OLKT: function(e, t) {},
    OLl6: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return i.__awaiter(this, void 0, void 0, function() {
                var t, n;
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, a.o.apollo.client.query({
                                query: r,
                                variables: {
                                    login: e
                                }
                            })];
                        case 2:
                            return t = i.sent(), [3, 4];
                        case 3:
                            return n = i.sent(), a.j.warn(n, "Failed to fetch user targeted by chat command.", {
                                userLogin: e
                            }), [3, 4];
                        case 4:
                            return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                    }
                })
            })
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("pV+t");
        n.n(r)
    },
    OcEY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "bitsOffersFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsOffer"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bits"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "InlineFragment",
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BitsBundleOffer"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "price"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "discount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPromo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "includesVAT"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "promotion"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 145
            }
        };
        n.loc.source = {
            body: "fragment bitsOffersFragment on BitsOffer {\nid\ntype\nbits\n... on BitsBundleOffer {\nprice\ndiscount\nisPromo\nurl\nincludesVAT\npromotion {\nid\ntype\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Oioc: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "JoinRoomsButton_JoinRooms"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "JoinChannelRoomsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "joinChannelRooms"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 143
            }
        };
        n.loc.source = {
            body: "mutation JoinRoomsButton_JoinRooms($input: JoinChannelRoomsInput!) {\njoinChannelRooms(input: $input) {\nchannel {\nself {\nisChannelMember\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ojfd: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelBanner"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 100
            }
        };
        n.loc.source = {
            body: "query ChannelBanner($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nlogin\nbannerImageURL\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ouuk: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            e || (e = navigator.userAgent);
            return !!i.exec(e)
        };
        var i = /\scurse\/\d/
    },
    P7hg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ActiveRoomButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sendMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 133
            }
        };
        n.loc.source = {
            body: "query ActiveRoomButton($id: ID!) {\nroom(id: $id) {\nid\nname\nisPreviewable\nminimumAllowedRole\nself {\npermissions {\nsendMessages\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    PPK2: function(e, t) {},
    PqoY: function(e, t) {},
    QCOJ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Embed: "embed",
            Web: "web"
        }
    },
    QFW6: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("6sO2"),
            o = n("vH/s");
        ! function(e) {
            e.Everyone = "everyone", e.ModsOnly = "mod", e.StreamChat = "twitch_chat", e.SubsOnly = "sub"
        }(i || (i = {}));
        var s = n("gGMi");
        n.d(t, "a", function() {
            return l
        }), n.d(t, "b", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var l = function(e) {
                var t;
                switch (e.roomMinimumRole) {
                    case s.b.Everyone:
                        t = i.Everyone;
                        break;
                    case s.b.Moderator:
                        t = i.ModsOnly;
                        break;
                    case s.b.Subscriber:
                        t = i.SubsOnly;
                        break;
                    default:
                        t = i.StreamChat
                }
                var n = {
                    channel: e.channelLogin,
                    chatroom_type: t,
                    is_host_mode: e.isHostMode,
                    is_using_web_sockets: !0
                };
                return e.roomID && (n.chatroom_id = e.roomID), n
            },
            d = function(e) {
                r.n.track(o.SpadeEventType.ChatRoomJoined, l(e))
            },
            c = function(e) {
                r.n.track(o.SpadeEventType.ChatRoomWatched, a.__assign({}, l(e), {
                    channel_id: e.channelID,
                    client_time: Math.floor(e.clientTime / 1e3)
                }))
            }
    },
    "QKs+": function(e, t, n) {
        "use strict";
        t.a = function() {
            return Object(i.a)(a, {
                props: function(e) {
                    if (e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers) {
                        var t = e.data.currentUser.blockedUsers.reduce(function(e, t) {
                            return t && t.id && e.push(t.id), e
                        }, []);
                        return {
                            blockedUsers: t
                        }
                    }
                    return {
                        blockedUsers: []
                    }
                },
                skip: function(e) {
                    return !(e.isLoggedIn || e.authToken)
                }
            })
        };
        var i = n("7vx8"),
            a = n("vKYs");
        n.n(a)
    },
    QMHY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatRoom_AutohostPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "query ChatRoom_AutohostPrompt($login: String!) {\ncurrentUser {\nid\n}\nuser(login: $login) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QNxL: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SharePurchaseTokenInChat"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SharePurchaseTokenInChatInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sharePurchaseTokenInChat"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation SharePurchaseTokenInChat($input:SharePurchaseTokenInChatInput!) {\nsharePurchaseTokenInChat(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QRuM: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("GiK3"),
            o = n("6sO2");
        ! function(e) {
            e.On = "on", e.Off = "off", e.StaffOnly = "staff"
        }(i || (i = {}));
        var s = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = o.b.get(this.props.name, i.Off);
                    return e === i.On || e === i.StaffOnly && this.props.isStaff ? r.Children.only(this.props.children) : null
                }, t
            }(r.Component),
            l = s;
        n.d(t, "a", function() {
            return i
        }), n.d(t, "c", function() {
            return s
        }), n.d(t, "b", function() {
            return l
        })
    },
    "QU+n": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "badge"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Badge"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "version"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "title"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image1x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "NORMAL"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image2x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "DOUBLE"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image4x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "QUADRUPLE"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clickAction"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clickURL"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 170
            }
        };
        n.loc.source = {
            body: "fragment badge on Badge {\nid\nsetID\nversion\ntitle\nimage1x: imageURL(size: NORMAL)\nimage2x: imageURL(size: DOUBLE)\nimage4x: imageURL(size: QUADRUPLE)\nclickAction\nclickURL\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QY1R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomPicker"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isBroadcaster"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "maxAllowedChannelRooms"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isBroadcaster"
                                            }
                                        }
                                    }]
                                }]
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channelRooms"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "topic"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPreviewable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumAllowedRole"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isArchived"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isMuted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isUnread"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unreadMentionCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 353
            }
        };
        n.loc.source = {
            body: "query RoomPicker ($id: ID! $isBroadcaster: Boolean!) {\nuser(id: $id) {\nid\ndisplayName\nmaxAllowedChannelRooms @include(if: $isBroadcaster)\nchannelRooms {\nname\nid\ntopic\nisPreviewable\nminimumAllowedRole\nself {\nisArchived\nisMuted\nisUnread\nunreadMentionCount\n}\n}\nself {\nisChannelMember\nisModerator\nsubscriptionBenefit {\nid\n}\n}\nsubscriptionProducts {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QsiC: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PinnedCheer_Cheers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "top"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isTopEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 275
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery PinnedCheer_Cheers($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\ntop {\n...chatMessage\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\nsettings {\nisRecentEnabled\nisTopEnabled\nrecentTimeoutMs\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("Mful").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    R9op: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (e.chat && e.chat.messages) return e.chat.messages[t] || [];
            return []
        }, t.c = function(e) {
            return e.chat.renderSent
        }, t.b = function(e) {
            var t = [];
            if (e.chat && e.chat.commandHandlers)
                for (var n in e.chat.commandHandlers) e.chat.commandHandlers[n] && t.push(n);
            return t.sort()
        };
        var i = n("TToO"),
            a = n("LIeg"),
            r = (n.n(a), n("6sO2")),
            o = n("vh75"),
            s = n("UzRK"),
            l = n("VsL1");
        r.o.store.registerReducer("chat", function(e, t) {
            var n, r;
            switch (void 0 === e && (n = Object(l.a)(), e = i.__assign({}, n, {
                commandHandlers: {},
                emoteSets: [],
                followerDuration: s.a,
                followerMode: !1,
                isHidden: !1,
                messages: {},
                slowMode: !1,
                subsOnlyMode: !1,
                renderSent: null
            })), t.type) {
                case o.d:
                    return i.__assign({}, e, {
                        isHidden: !0
                    });
                case o.e:
                    return i.__assign({}, e, {
                        emoteSets: [],
                        messages: {}
                    });
                case o.f:
                    return i.__assign({}, e, {
                        isHidden: !1
                    });
                case o.g:
                    return i.__assign({}, e, {
                        emoteSets: t.emoteSets
                    });
                case o.h:
                    return i.__assign({}, e, {
                        followerMode: !1
                    });
                case o.i:
                    return i.__assign({}, e, {
                        followerDuration: t.duration
                    });
                case o.j:
                    return i.__assign({}, e, {
                        lastUsedFollowerDurations: i.__assign({}, e.lastUsedFollowerDurations, (r = {}, r[t.channelLogin] = t.duration, r))
                    });
                case o.k:
                    return i.__assign({}, e, {
                        followerMode: !0
                    });
                case o.l:
                    return a(e, function(e) {
                        return e.messages
                    }, function(e) {
                        return e[t.channel] = t.messages.slice(), e
                    });
                case o.b:
                    return i.__assign({}, e, {
                        showAutoModActions: !1
                    });
                case o.c:
                    return i.__assign({}, e, {
                        showAutoModActions: !0
                    });
                case o.m:
                    return i.__assign({}, e, {
                        showModerationActions: !1
                    });
                case o.n:
                    return i.__assign({}, e, {
                        showModerationActions: !0
                    });
                case o.o:
                    return i.__assign({}, e, {
                        showModIcons: !1
                    });
                case o.p:
                    return i.__assign({}, e, {
                        showModIcons: !0
                    });
                case o.s:
                    return i.__assign({}, e, {
                        slowMode: !1
                    });
                case o.t:
                    return i.__assign({}, e, {
                        slowMode: !0
                    });
                case o.u:
                    return i.__assign({}, e, {
                        subsOnlyMode: !1
                    });
                case o.v:
                    return i.__assign({}, e, {
                        subsOnlyMode: !0
                    });
                case o.w:
                    return i.__assign({}, e, {
                        showTimestamps: !1
                    });
                case o.x:
                    return i.__assign({}, e, {
                        showTimestamps: !0
                    });
                case o.a:
                    return a(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return e[t.command] = t.handler, e
                    });
                case o.q:
                    return a(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return delete e[t.command], e
                    });
                case o.r:
                    return i.__assign({}, e, {
                        renderSent: t.customEvent
                    });
                default:
                    return e
            }
        })
    },
    RbGx: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("GiK3"),
            a = (n.n(i), n("mbxv")),
            r = function(e) {
                var t, n = e.badgesToRender,
                    r = e.badgeSets,
                    o = [];
                t = n, Array.isArray(t) ? o = n.map(function(e) {
                    var t = r.getBadge(e.setID, e.version);
                    return null === t ? null : i.createElement(a.a, {
                        key: t.setID + "/" + t.version,
                        badge: t
                    })
                }) : function(e) {
                    return !Array.isArray(e)
                }(n) && (o = Object.keys(n).map(function(e) {
                    var t = n[e],
                        o = r.getBadge(e, t);
                    return null === o ? null : i.createElement(a.a, {
                        key: o.setID + "/" + o.version,
                        badge: o
                    })
                }));
                var s = o.filter(function(e) {
                    return null !== e
                });
                return i.createElement("span", null, s)
            }
    },
    RkXA: function(e, t) {},
    S20p: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ShareResub_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "resubNotification"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "months"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "query Chat_ShareResub_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nself {\nresubNotification {\nid\nmonths\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    SI0h: function(e, t, n) {
        "use strict";
        var i = n("TPVZ");
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return i.b
        }), n.d(t, "a", function() {
            return i.a
        })
    },
    TCxx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UpdateRoomModes"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomModesInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoomModes"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "room"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "modes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "slowModeDurationSeconds"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "r9kModeEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emotesOnlyModeEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumSlowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maximumSlowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 254
            }
        };
        n.loc.source = {
            body: "mutation UpdateRoomModes($input: UpdateRoomModesInput!) {\nupdateRoomModes(input: $input) {\nroom {\nid\nmodes {\nslowModeDurationSeconds\nr9kModeEnabled\nemotesOnlyModeEnabled\n}\n}\nerror {\ncode\nminimumSlowModeDurationSeconds\nmaximumSlowModeDurationSeconds\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    TPVZ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("GiK3"),
            o = n("F8kA"),
            s = n("6sO2"),
            l = n("hdYS"),
            d = n("DtWM"),
            c = n("+Znq"),
            u = n("7vx8"),
            m = n("czpb"),
            p = n("RH2O"),
            h = n("Aj/L"),
            g = n("N221"),
            f = n("jF7o"),
            v = n("iMOk"),
            b = n("WVx7"),
            k = n("ySfT"),
            y = n("ZJYd"),
            _ = n("/LBW"),
            C = n("Odds"),
            S = (n("fHoP"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handlePromoBuy = function(e) {
                        var n = Object(y.b)({
                            trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                            channelID: t.props.channelID,
                            purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                            bitsAmount: e.currentTarget.dataset.bitsAmount,
                            location: _.b.GetBitsButton
                        });
                        n && t.props.onPromoBuyClose(n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = r.createElement(C._4, null, r.createElement(C._4, {
                        padding: {
                            x: 5,
                            y: 2
                        },
                        textAlign: C._37.Center
                    }, r.createElement(C.O, {
                        type: C._41.H4,
                        bold: !0
                    }, Object(s.d)("Cheer Bits for your Favorite Streamer!", "Bits--FirstTimeUserPrompt"))), r.createElement(C._4, {
                        padding: {
                            x: 2,
                            bottom: 1
                        }
                    }, r.createElement(C.O, {
                        type: C._41.Span,
                        color: C.J.Alt
                    }, Object(s.d)("Bits are fun, animated emotes. Cheering Bits celebrates moments you love with the community right in chat and similar to subscribing, helps support Partners and Affiliates.", "Bits--FirstTimeUserPrompt"), r.createElement(C.Y, {
                        margin: {
                            left: .5
                        }
                    }, r.createElement("a", {
                        onClick: this.props.toggleShowTutorial
                    }, Object(s.d)("How do I cheer?", "Bits--FirstTimeUserPrompt"))))), r.createElement(C._4, {
                        padding: {
                            bottom: 2
                        },
                        textAlign: C._37.Center
                    }, r.createElement(C.Y, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(C.O, {
                        type: C._41.H6,
                        bold: !0,
                        className: "bits-first-time-user-prompt__promo-header"
                    }, Object(s.d)("First Time Purchaser Discount Pack!", "Bits--FirstTimeUserPrompt"))), r.createElement(C.u, {
                        onClick: this.handlePromoBuy,
                        "data-purchase-url": this.props.promo.url,
                        "data-bits-amount": this.props.promo.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.promo.bits
                    }, Object(s.d)("{price} For {amount} Bits", {
                        price: this.props.promo.price,
                        amount: this.props.promo.bits
                    }, "Bits--FirstTimeUserPrompt"))));
                    return this.props.isShowingTutorial ? r.createElement(C._4, {
                        className: "bits-first-time-user-prompt",
                        fullWidth: !0
                    }, r.createElement(C._4, {
                        className: "bits-first-time-user-prompt__tutorial-back-button"
                    }, r.createElement(C.u, {
                        onClick: this.props.toggleShowTutorial,
                        type: C.A.Text
                    }, r.createElement(C._17, {
                        asset: C._18.Play,
                        height: 8
                    }), " ", Object(s.d)("Back", "Bits--FirstTimeUserPrompt"))), r.createElement(C._4, {
                        textAlign: C._37.Center,
                        padding: {
                            x: 2,
                            bottom: 2,
                            top: 5
                        },
                        fullHeight: !0
                    }, r.createElement(C.e, {
                        type: C.i.SlideInLeft,
                        duration: C.g.Long,
                        enabled: !0
                    }, r.createElement(k.a, null)))) : this.props.animateFirstTimeUserIntro ? r.createElement(C.Y, {
                        className: "bits-first-time-user-prompt"
                    }, r.createElement(C.e, {
                        type: C.i.SlideInRight,
                        duration: C.g.Long,
                        enabled: this.props.animateFirstTimeUserIntro
                    }, e)) : r.createElement(C._4, {
                        className: "bits-first-time-user-prompt"
                    }, e)
                }, t
            }(r.Component)),
            E = n("jxGs"),
            N = n("bkpq"),
            w = n("CSlQ"),
            D = n("annQ"),
            O = (n("lGVF"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hideFirstTimeUserIntro: !1
                    }, t.trackBitsCardInteraction = function(e, n) {
                        var i = {
                            actionName: e,
                            emoteType: n && n.emoteType,
                            emoteLevel: n && n.emoteLevel,
                            location: _.b.GetBitsButton,
                            displayedBalance: t.props.bitsBalance || 0
                        };
                        Object(_.h)(i)
                    }, t.onClose = function() {}, t.onPromoBuyClose = function(e) {
                        Object(f.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.loading) return r.createElement(C._27, {
                        "data-a-target": "get-bits-button-content-loading",
                        display: C.P.Flex,
                        flexDirection: C.R.Column,
                        alignItems: C.c.Center,
                        justifyContent: C._3.Center,
                        textAlign: C._37.Center,
                        padding: {
                            y: 5
                        }
                    }, r.createElement(C._6, {
                        delay: 0
                    }), r.createElement(C._4, {
                        padding: {
                            top: 2
                        }
                    }, r.createElement(C.O, {
                        italic: !0
                    }, Object(s.d)("Fetching bits", "Bits--GetBitsButtonContent"))));
                    var e = null;
                    if (this.props.bitsOffers) {
                        var t = this.props.bitsOffers.find(function(e) {
                            return Object(y.c)(e)
                        });
                        t && t.type === E.b && this.props.channelID && !this.state.hideFirstTimeUserIntro && (e = r.createElement(S, {
                            promo: t,
                            animateFirstTimeUserIntro: this.props.animateFirstTimeUserIntro,
                            isShowingTutorial: this.props.isShowingTutorial,
                            toggleShowTutorial: this.props.toggleShowTutorial,
                            trackBitsCardInteraction: this.trackBitsCardInteraction,
                            channelID: this.props.channelID,
                            onPromoBuyClose: this.onPromoBuyClose
                        }))
                    }
                    var n = null;
                    void 0 !== this.props.bitsBalance && this.props.bitsConfig ? n = r.createElement(C._27, {
                        borderBottom: !0,
                        textAlign: C._37.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, r.createElement(C.O, {
                        type: C._41.Span
                    }, Object(s.d)("You have {bitsBalance}", {
                        bitsBalance: r.createElement(v.a, {
                            withImage: !0,
                            withText: !0,
                            count: this.props.bitsBalance,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))) : void 0 === this.props.bitsBalance && this.props.bitsConfig && (n = r.createElement(C._27, {
                        borderBottom: !0,
                        textAlign: C._37.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, r.createElement(C.O, {
                        type: C._41.Span
                    }, Object(s.d)("{bitsGem} Log in to see your Bits balance", {
                        bitsGem: r.createElement(v.a, {
                            count: 100,
                            withImage: !0,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))));
                    var i = null;
                    return this.props.bitsConfig && this.props.channelLogin && (i = r.createElement(b.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.onClose,
                        onClose: this.onClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        location: _.b.GetBitsButton,
                        hidePromos: !0,
                        hideWateb: !0,
                        fullsize: !0
                    })), r.createElement(g.b, {
                        className: "get-bits-button-content"
                    }, r.createElement(C._4, null, n, e, i))
                }, t = i.__decorate([Object(w.d)("GetBitsButtonContent"), Object(u.a)(D, {
                    name: "data",
                    props: function(e) {
                        var t, n, i, a;
                        return e.data && e.data.user && e.data.user.cheer && (t = Object(N.a)(e.data.user.cheer.emotes), n = e.data.user.id), e.data && e.data.currentUser ? (a = e.data.currentUser.bitsBalance, i = e.data.currentUser.bitsOffers) : e.data && e.data.bitsOffers && (i = e.data.bitsOffers), {
                            loading: e.data && e.data.loading,
                            bitsOffers: i,
                            bitsBalance: a,
                            bitsConfig: t,
                            channelID: n
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(r.Component));
        var I = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isShowingTutorial: !1,
                        animateFirstTimeUserIntro: !1
                    }, t.toggleBalloon = function(e) {
                        t.setState({
                            animateFirstTimeUserIntro: !1
                        }), e || Object(_.h)({
                            actionName: _.a.BuyMain,
                            location: _.b.GetBitsButton,
                            displayedBalance: 0
                        })
                    }, t.toggleShowTutorial = function() {
                        t.setState({
                            isShowingTutorial: !t.state.isShowingTutorial,
                            animateFirstTimeUserIntro: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.channelLogin && (e = r.createElement(O, {
                        isLoggedIn: this.props.isLoggedIn,
                        channelLogin: this.props.channelLogin,
                        toggleShowTutorial: this.toggleShowTutorial,
                        isShowingTutorial: this.state.isShowingTutorial,
                        animateFirstTimeUserIntro: this.state.animateFirstTimeUserIntro
                    })), r.createElement(c.a, {
                        onToggle: this.toggleBalloon
                    }, r.createElement(C.u, {
                        dropdown: !0
                    }, Object(s.d)("Get Bits", "Bits--GetBitsButton")), r.createElement(C.p, {
                        direction: C.q.BottomRight,
                        size: C.r.Large
                    }, e))
                }, t = i.__decorate([Object(w.d)("GetBitsButton")], t)
            }(r.Component),
            R = Object(p.b)(function(e) {
                return {
                    isLoggedIn: Object(h.d)(e)
                }
            })(I),
            T = n("2KeS"),
            M = n("V5M+"),
            L = n("E9Qg"),
            x = n("ebTC"),
            A = n("4Q9N"),
            F = (n("4Jix"), n("Ojfd")),
            j = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.openModal = function() {
                        var e = t.props.data && t.props.data.user;
                        e && t.props.showModal(x.a, {
                            userID: e.id,
                            login: e.login,
                            displayName: e.displayName,
                            imageType: A.a.ProfileBanner,
                            showCloser: !0,
                            successCallback: t.imageUploaded
                        })
                    }, t.imageUploaded = function() {
                        t.props.data && t.props.data.refetch()
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t, n = {
                            "channel-banner--open": !this.props.collapsed
                        },
                        i = this.props.data;
                    if (i && i.loading || !this.props.firstPageLoaded) e = r.createElement(C._10, {
                        height: 380,
                        "data-test-selector": "channel-banner__placeholder"
                    });
                    else {
                        i && i.user && i.user.bannerImageURL ? t = {
                            backgroundImage: "url(" + i.user.bannerImageURL + ")"
                        } : (n["channel-banner--default"] = !0, t = {
                            backgroundImage: "url(" + L + ")"
                        });
                        var o = null;
                        this.props.canEdit && (o = r.createElement(C._2, {
                            "data-test-selector": "channel-banner__edit-overlay-interactable",
                            onClick: this.openModal
                        }, r.createElement(C._27, {
                            className: "channel-banner__edit-overlay",
                            background: C.m.Overlay,
                            position: C._11.Absolute,
                            attachTop: !0,
                            attachLeft: !0,
                            fullWidth: !0,
                            display: C.P.InlineFlex,
                            alignItems: C.c.Center,
                            justifyContent: C._3.Center
                        }, r.createElement(C._4, {
                            display: C.P.Flex,
                            alignItems: C.c.Center,
                            flexDirection: C.R.Column,
                            justifyContent: C._3.Center
                        }, r.createElement(C._4, null, r.createElement(C._17, {
                            asset: C._18.Edit
                        })), Object(s.d)("Update Profile Banner", "ChannelBanner"))))), e = r.createElement("div", {
                            className: "channel-banner__image",
                            "data-test-selector": "channel-banner",
                            style: t
                        }, o)
                    }
                    return r.createElement("div", {
                        className: a("channel-banner", n),
                        onTransitionEnd: this.props.onTransitionEnd
                    }, r.createElement(C.Y, {
                        fullWidth: !0
                    }, e))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.closeModal()
                }, t
            }(r.Component),
            B = Object(u.a)(F, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.channelLogin || !e.firstPageLoaded
                }
            })(j);
        var U = Object(p.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }, function(e) {
                return Object(T.b)({
                    closeModal: M.c,
                    showModal: M.d
                }, e)
            })(B),
            P = n("x9n8"),
            V = (n("WClm"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.openModal = function(e) {
                        e.stopPropagation(), t.props.showModal(P.a, {
                            userID: t.props.userID,
                            login: t.props.login,
                            displayName: t.props.displayName,
                            showCloser: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return r.createElement(C._4, {
                        className: "edit-profile-overlay",
                        display: C.P.Flex,
                        justifyContent: C._3.Center,
                        alignContent: C.b.Center,
                        fullHeight: !0,
                        fullWidth: !0
                    }, r.createElement(C.v, {
                        overlay: !0,
                        ariaLabel: Object(s.d)("Edit Profile", "ChannelHeader"),
                        icon: C._18.Edit,
                        onClick: this.openModal
                    }))
                }, t = i.__decorate([Object(w.d)("EditProfileOverlay")], t)
            }(r.Component));
        var H = Object(p.b)(null, function(e) {
                return Object(T.b)({
                    showModal: M.d
                }, e)
            })(V),
            W = n("70dR"),
            G = (n("z4Db"), n("kOMe"));
        n.d(t, "b", function() {
            return q
        }), n.d(t, "a", function() {
            return Q
        });
        var q, z = "channel-header__edit-profile-overlay",
            $ = "channel-header__verified-badge",
            J = "channel-header__live-indicator";
        ! function(e) {
            e[e.Channel = 1] = "Channel", e[e.Clips = 2] = "Clips", e[e.Collections = 3] = "Collections", e[e.Events = 4] = "Events", e[e.Success = 5] = "Success", e[e.Followers = 6] = "Followers", e[e.Following = 7] = "Following", e[e.Videos = 8] = "Videos"
        }(q || (q = {}));
        var Q = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    live: !1,
                    bannerHidden: !0,
                    bannerSlideIn: !1
                }, t.verifiedBadgeElement = r.createElement(C._44, {
                    label: Object(s.d)("Verified", "ChannelHeader"),
                    direction: C._46.Right
                }, r.createElement(C._4, {
                    className: "channel-header__verified",
                    "data-target": $,
                    display: C.P.Flex,
                    alignItems: C.c.Center,
                    margin: {
                        left: 1
                    }
                }, r.createElement(C._17, {
                    asset: C._18.Verified
                }))), t.ChannelStatusIndicatorElement = r.createElement(C._4, {
                    margin: {
                        left: 1
                    },
                    "data-target": J
                }, r.createElement(C._44, {
                    label: Object(s.d)("Live Now", "ChannelHeader"),
                    direction: C._46.Right
                }, r.createElement(C.F, {
                    status: C.H.Live,
                    pulse: !0
                }))), t.renderAvatarEditButton = function() {
                    return t.props.data && t.props.data.user && t.isChannelEditor() ? r.createElement(C._27, {
                        className: z,
                        background: C.m.Overlay,
                        position: C._11.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        fullHeight: !0,
                        fullWidth: !0,
                        display: C.P.InlineFlex,
                        alignItems: C.c.Center,
                        justifyContent: C._3.Center
                    }, r.createElement(H, {
                        userID: t.props.data.user.id,
                        login: t.props.data.user.login,
                        displayName: t.props.data.user.displayName
                    })) : null
                }, t.toggleChannelBanner = function() {
                    t.setState(function(e) {
                        var t = !e.bannerSlideIn;
                        return t ? {
                            bannerHidden: !e.bannerHidden,
                            bannerSlideIn: t
                        } : {
                            bannerSlideIn: t
                        }
                    })
                }, t.completedBannerAnimation = function() {
                    t.setState(function(e) {
                        return e.bannerSlideIn ? e : {
                            bannerHidden: !0
                        }
                    })
                }, t.onUpdateDebounce = function() {
                    if (!t.resizeAnimationFrame && t.channelHeader) {
                        var e = t.channelHeader.querySelector('[data-target="channel-header-left"]');
                        t.updateWidth(t.getWidth(e).width), t.resizeAnimationFrame = requestAnimationFrame(t.handleWindowResize)
                    }
                }, t.handleWindowResize = function() {
                    t.resizeAnimationFrame = null, t.getChannelHeaderSize()
                }, t.saveChannelHeaderRef = function(e) {
                    return t.channelHeader = e
                }, t
            }
            return i.__extends(t, e), t.prototype.componentWillMount = function() {
                this.updateLiveState(this.props)
            }, t.prototype.componentDidMount = function() {
                window.addEventListener("resize", this.onUpdateDebounce), !this.props.data || this.props.data.loading || this.props.data.error || this.getChannelHeaderSize(), this.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.updateLiveState(e)
            }, t.prototype.componentDidUpdate = function() {
                this.channelHeader && this.updateWidth(this.getWidth(this.channelHeader.querySelector('[data-target="channel-header-left"]')).width), this.onUpdateDebounce(), this.reportInteractive()
            }, t.prototype.componentWillUnmount = function() {
                this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.onUpdateDebounce), this.props.latencyTracking.reportInteractive()
            }, t.prototype.updateWidth = function(e) {
                var t = e !== this.width || this.width !== this.prevWidth;
                void 0 !== this.width && (this.prevWidth = this.width), this.width !== e && (this.width = e), t && (this.resizeAnimationFrame && (cancelAnimationFrame(this.resizeAnimationFrame), this.resizeAnimationFrame = null), this.onUpdateDebounce())
            }, t.prototype.render = function() {
                var e, t, n = 0,
                    i = 0,
                    u = 0,
                    m = s.a.defaultAvatarURL;
                this.props.data && this.props.data.user && !this.props.data.loading && !this.props.data.error && (n = this.props.data.user.videos.totalCount, i = this.props.data.user.followers.totalCount, u = this.props.data.user.follows.totalCount, m = this.props.data.user.profileImageURL, e = this.props.data.user.displayName, t = this.props.data.user.roles && this.props.data.user.roles.isPartner);
                var p = this.state.live && !this.isActiveTab(q.Channel),
                    h = this.createChannelLinks(n, i, u),
                    g = {
                        "channel-header__user": !0,
                        "channel-header__user--selected": this.isActiveTab(q.Channel)
                    },
                    f = null;
                this.canRenderBitsButton() && (f = r.createElement(C._4, {
                    margin: {
                        left: 1
                    }
                }, r.createElement(R, {
                    channelLogin: this.props.channelLogin
                })));
                var v, b = r.createElement(C._4, {
                    display: C.P.Flex,
                    flexWrap: C.S.NoWrap,
                    alignItems: C.c.Center,
                    flexShrink: 0
                }, r.createElement(C._4, {
                    className: "channel-header__user-avatar channel-header__user-avatar--active",
                    margin: {
                        right: 1
                    },
                    display: C.P.Flex,
                    flexShrink: 0,
                    alignItems: C.c.Stretch
                }, r.createElement(C._4, {
                    position: C._11.Relative
                }, r.createElement(C.l, {
                    size: 36,
                    src: m,
                    alt: e || ""
                }), this.renderAvatarEditButton())), e ? r.createElement(C.O, {
                    type: C._41.H5
                }, e) : r.createElement(C._4, {
                    alignItems: C.c.Center
                }, r.createElement(C._10, {
                    lineCount: 1,
                    width: 120
                })), p && this.ChannelStatusIndicatorElement, t && this.verifiedBadgeElement);
                v = this.isActiveTab(q.Channel) ? r.createElement("div", {
                    className: "channel-header__banner-toggle",
                    onClick: this.toggleChannelBanner,
                    "data-target": "channel-header__channel-link",
                    "data-a-target": "user-channel-header-item"
                }, b) : this.props.data && this.props.data.user && this.props.data.user.login ? r.createElement(o.a, {
                    to: "/" + this.props.data.user.login,
                    "data-target": "channel-header__channel-link",
                    "data-a-target": "user-channel-header-item"
                }, b) : b;
                var k = this.state.bannerHidden ? C.P.HideAccessible : C.P.Block,
                    y = null;
                return this.isActiveTab(q.Channel) && (y = r.createElement(C._4, {
                    display: k
                }, r.createElement(U, {
                    channelLogin: this.props.channelLogin,
                    canEdit: this.isChannelEditor(),
                    collapsed: !this.state.bannerSlideIn,
                    onTransitionEnd: this.completedBannerAnimation
                }))), r.createElement(C._4, {
                    className: "channel-header",
                    flexShrink: 0
                }, y, r.createElement(C._4, {
                    display: C.P.Flex,
                    justifyContent: C._3.Between,
                    flexWrap: C.S.NoWrap,
                    fullHeight: !0,
                    refDelegate: this.saveChannelHeaderRef,
                    margin: {
                        x: 3
                    }
                }, r.createElement(C._4, {
                    display: C.P.Flex,
                    alignItems: C.c.Stretch,
                    flexShrink: 0,
                    flexWrap: C.S.NoWrap,
                    "data-target": "channel-header-left"
                }, r.createElement(C.Y, {
                    className: a(g),
                    padding: {
                        y: .5,
                        right: 2
                    },
                    display: C.P.Flex,
                    flexWrap: C.S.NoWrap,
                    alignItems: C.c.Center,
                    flexShrink: 0
                }, v), this.renderTabs(h), r.createElement(C._4, {
                    className: "channel-header__item channel-header__item--no-underline",
                    padding: {
                        x: 1
                    },
                    flexShrink: 0,
                    alignSelf: C.d.Center,
                    "data-target": "channel-header-button"
                }, r.createElement(c.a, {
                    alwaysMountBalloonContent: !0
                }, r.createElement(C.v, {
                    icon: C._18.NavMore,
                    ariaLabel: Object(s.d)("More", "ChannelHeader")
                }), r.createElement(C.p, {
                    direction: C.q.Bottom,
                    noTail: !0
                }, r.createElement(C._4, {
                    padding: {
                        y: 1
                    }
                }, this.renderDropdown(h)))))), r.createElement(C._4, {
                    display: C.P.Flex,
                    flexWrap: C.S.NoWrap,
                    flexShrink: 0,
                    alignItems: C.c.Center,
                    className: "channel-header__right",
                    "data-target": "channel-header-right"
                }, r.createElement(C._4, {
                    className: "channel-header__follow-button",
                    display: C.P.Flex,
                    alignItems: C.c.Stretch,
                    margin: {
                        left: 1
                    }
                }, r.createElement(l.a, {
                    updateContainerWidth: this.onUpdateDebounce,
                    isHostedFollow: !1,
                    channelLogin: this.props.channelLogin,
                    followUIType: l.b.IconAndText,
                    unfollowUIType: l.b.IconOnly
                })), r.createElement(C._4, {
                    margin: {
                        left: 1
                    }
                }, r.createElement(W.a, {
                    updateContainerWidth: this.onUpdateDebounce,
                    channelLogin: this.props.channelLogin
                })), f)), r.createElement(d.a, {
                    onResize: this.onUpdateDebounce
                }))
            }, t.prototype.updateLiveState = function(e) {
                e.data && e.data.user && !e.data.loading && !e.data.error && this.setState({
                    live: !!e.data.user.stream && "" !== e.data.user.stream.id
                })
            }, t.prototype.generateUserLink = function(e, t) {
                void 0 === e && (e = ""), void 0 === t && (t = !1);
                var n = this.props.data && this.props.data.user && this.props.data.user.login;
                if (!n) return "#";
                var i = "/" + n + "/" + e;
                return t ? Object(m.a)(i) : i
            }, t.prototype.renderTabs = function(e) {
                var t = this;
                return e.map(function(e) {
                    var n = e.count ? r.createElement(C._4, {
                            className: "channel-header__item-count",
                            display: C.P.Flex,
                            margin: {
                                left: .5
                            }
                        }, r.createElement(C.O, {
                            type: C._41.Span,
                            fontSize: C.T.Size5
                        }, e.count)) : null,
                        a = t.generateUserLink(e.pathSuffix, e.isExternal),
                        s = {};
                    return e.isExternal && (s.target = Object(m.b)() ? "_blank" : ""), r.createElement(C.Y, {
                        key: "channel-header__item--" + e.label,
                        alignItems: C.c.Center,
                        flexShrink: 0
                    }, r.createElement(o.a, i.__assign({
                        className: "channel-header__item channel-header__item--hide " + (e.isSelected ? "channel-header__item--selected" : "")
                    }, s, {
                        to: a,
                        "data-target": "channel-header-item",
                        "data-a-target": e.label.toLowerCase() + "-channel-header-item"
                    }), r.createElement(C._4, {
                        padding: {
                            x: 2,
                            y: .5
                        },
                        display: C.P.Flex
                    }, r.createElement(C.O, {
                        type: C._41.Span,
                        fontSize: C.T.Size5
                    }, e.label), n)))
                })
            }, t.prototype.renderDropdown = function(e) {
                var t = this;
                return e.map(function(e) {
                    var n = e.count ? r.createElement(C._4, {
                            className: "channel-header__item-count",
                            display: C.P.Flex,
                            margin: {
                                left: .5
                            }
                        }, r.createElement(C.O, {
                            type: C._41.Span
                        }, e.count)) : null,
                        a = t.generateUserLink(e.pathSuffix, e.isExternal),
                        o = {};
                    return e.isExternal && (o.targetBlank = !0), r.createElement(C._4, {
                        key: "channel-header__dropdown-item--" + e.label,
                        "data-target": "channel-header-dropdown-item"
                    }, r.createElement(C._2, i.__assign({
                        linkTo: a,
                        disabled: "#" === a
                    }, o), r.createElement(C._4, {
                        className: "channel-header__dropdown-hover-target",
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: C.P.Flex
                    }, r.createElement(C.O, {
                        type: C._41.Span
                    }, e.label), n)))
                })
            }, t.prototype.createChannelLinks = function(e, t, n) {
                return [{
                    label: Object(s.d)("Videos", "ChannelHeader"),
                    count: Object(s.e)(e),
                    pathSuffix: "videos/all",
                    isExternal: !1,
                    isSelected: this.isActiveTab(q.Videos)
                }, {
                    label: Object(s.d)("Clips", "ChannelHeader"),
                    pathSuffix: "clips",
                    isExternal: !1,
                    isSelected: this.isActiveTab(q.Clips)
                }, {
                    label: Object(s.d)("Collections", "ChannelHeader"),
                    pathSuffix: "collections",
                    isExternal: !1,
                    isSelected: this.isActiveTab(q.Collections)
                }, {
                    label: Object(s.d)("Events", "ChannelHeader"),
                    pathSuffix: "events",
                    isExternal: !1,
                    isSelected: this.isActiveTab(q.Events)
                }, {
                    label: Object(s.d)("Followers", "ChannelHeader"),
                    count: Object(s.e)(t),
                    pathSuffix: "followers",
                    isExternal: !1,
                    isSelected: this.isActiveTab(q.Followers)
                }, {
                    label: Object(s.d)("Following", "ChannelHeader"),
                    count: Object(s.e)(n),
                    pathSuffix: "following",
                    isExternal: !1,
                    isSelected: this.isActiveTab(q.Following)
                }]
            }, t.prototype.isActiveTab = function(e) {
                return q[this.props.currentPage] === q[e]
            }, t.prototype.isChannelEditor = function() {
                return !!this.props.data && !!this.props.data.currentUser && !!this.props.data.user && !!this.props.data.currentUser.roles && (this.props.data.currentUser.id === this.props.data.user.id || this.props.data.currentUser.roles.isStaff || this.props.data.currentUser.roles.isSiteAdmin)
            }, t.prototype.getChannelHeaderSize = function() {
                if (this.channelHeader) {
                    var e = this.channelHeader.querySelector('[data-target="channel-header-left"]'),
                        t = this.channelHeader.querySelector('[data-target="channel-header-right"]'),
                        n = this.channelHeader.querySelectorAll('[data-target="channel-header-item"]'),
                        i = this.channelHeader.querySelectorAll('[data-target="channel-header-dropdown-item"]');
                    if (n.length) {
                        var a = this.getWidth(this.channelHeader).width,
                            r = this.getWidth(e).width + this.getWidth(t).width + 20 - a;
                        if (r > 0)
                            for (var o = n.length - 1; o >= 0; o--) {
                                if (!(l = n[o]).classList.contains("channel-header__item--hide")) {
                                    var s = this.getWidth(l);
                                    if (l.classList.add("channel-header__item--hide"), i[o].classList.remove("channel-header__item--hide"), (r -= s.width) <= 0) break
                                }
                            } else
                                for (o = 0; o < n.length; o++) {
                                    var l;
                                    if ((l = n[o]).classList.contains("channel-header__item--hide")) {
                                        if (l.classList.remove("channel-header__item--hide"), (s = this.getWidth(l)).width >= Math.abs(r)) {
                                            l.classList.add("channel-header__item--hide");
                                            break
                                        }
                                        l.classList.remove("channel-header__item--hide"), i[o].classList.add("channel-header__item--hide"), r += s.width
                                    }
                                }
                        var d = this.channelHeader.querySelector('[data-target="channel-header-button"]');
                        if (d) {
                            var c = !this.channelHeader.querySelectorAll('[data-target="channel-header-item"].channel-header__item--hide').length;
                            d.classList.toggle("channel-header__item--hide", c)
                        }
                    }
                }
            }, t.prototype.canRenderBitsButton = function() {
                return this.props.data && !this.props.data.loading && this.props.currentPage !== q.Clips && this.props.data.currentUser && this.props.data.user && this.props.data.user.cheer
            }, t.prototype.getWidth = function(e) {
                return e ? {
                    width: e.clientWidth
                } : {
                    width: 0
                }
            }, t.prototype.reportInteractive = function() {
                !this.props.data || this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
            }, t = i.__decorate([Object(u.a)(G, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.channelLogin
                }
            }), Object(w.d)("ChannelHeader")], t)
        }(r.Component)
    },
    "TT/W": function(e, t) {},
    Ta4Q: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UnmodUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnmodUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unmodUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "target"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 119
            }
        };
        n.loc.source = {
            body: "mutation UnmodUser($input: UnmodUserInput!){\nunmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\n}\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Ti/Y": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation DismissNewChatterToken($input: DismissRitualTokenInput!) {\ndismissRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    TnJK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            DarkMode: "darkMode",
            FollowerDuration: "followerDuration",
            FollowerMode: "followerMode",
            HideChat: "hideChat",
            ShowMessageFlags: "showMessageFlags",
            ShowAutoModActions: "showAutoModActions",
            ShowModActions: "showModerationActions",
            ShowModIcons: "showModIcons",
            ShowTimestamps: "showTimestamps",
            SlowMode: "slowMode"
        }
    },
    Tt3k: function(e, t, n) {
        "use strict";
        t.b = function(e, t, n) {
            var i = new FileReader;
            i.onloadend = function() {
                n && n(i.result)
            }, i.readAsDataURL(e);
            var a = new FileReader;
            a.onloadend = function() {
                t(a.result)
            }, a.readAsArrayBuffer(e)
        }, t.a = function(e) {
            var t = "";
            if (e && e.name) {
                var n = e.name;
                t = n.slice((Math.max(0, n.lastIndexOf(".")) || 1 / 0) + 1)
            }
            "" === t && (t = "png");
            return t
        }
    },
    Tur5: function(e, t, n) {
        "use strict";
        var i = n("bgpf");
        n.d(t, "RitualTokenMutationErrors", function() {
            return i.a
        }), n.d(t, "RitualTokenStatus", function() {
            return i.b
        }), n.d(t, "RitualTokenType", function() {
            return i.c
        });
        var a = n("AQmT"),
            r = (n.n(a), n("xfb5")),
            o = (n.n(r), n("6vcJ"));
        n.n(o)
    },
    "U+9K": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RoomDetails_UpdateRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "room"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "topic"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPreviewable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumAllowedRole"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maxLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 179
            }
        };
        n.loc.source = {
            body: "mutation RoomDetails_UpdateRoom($input: UpdateRoomInput!) {\nupdateRoom(input: $input) {\nroom {\nname\ntopic\nisPreviewable\nminimumAllowedRole\n}\nerror {\ncode\nmaxLength\nminLength\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    UMQJ: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_Channels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sourceChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "sourceChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "sourceChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 268
            }
        };
        n.loc.source = {
            body: "query RaidNotification_Channels($sourceChannelID: ID! $targetChannelID: ID!) {\nsourceChannel: user(id: $sourceChannelID) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\ntargetChannel: user(id: $targetChannelID) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ucyv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UpdateLastReadAt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomViewInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoomView"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roomView"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMentionCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastReadAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation UpdateLastReadAt($input: UpdateRoomViewInput!) {\nupdateRoomView(input: $input) {\nroomView {\nunreadMentionCount\nlastReadAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    UiRd: function(e, t) {},
    Umoc: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("TnJK"),
            s = n("QFW6"),
            l = function(e) {
                a.n.track(r.SpadeEventType.ChatSettingsOpened, Object(s.a)(e))
            },
            d = function(e) {
                var t = i.__assign({}, Object(s.a)(e), {
                    setting_name: e.settingName,
                    new_value: e.newValue.toString()
                });
                a.n.track(r.SpadeEventType.ChatSettingsChanged, t)
            },
            c = function(e) {
                var t = i.__assign({}, Object(s.a)(e), {
                    setting_name: o.a.FollowerDuration,
                    new_value: e.newValue.toString(),
                    follower_mode_on: e.followerModeOn
                });
                a.n.track(r.SpadeEventType.ChatSettingsChanged, t)
            }
    },
    UzRK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        }), t.c = function(e) {
            switch (e) {
                case 0:
                    return Object(i.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                case 10:
                    return Object(i.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                case 30:
                    return Object(i.d)("30 minutes", "FollowersOnlyLabel");
                case 60:
                    return Object(i.d)("1 hour", "FollowersOnlyLabel");
                case 1440:
                    return Object(i.d)("1 day", "FollowersOnlyLabel");
                case 10080:
                    return Object(i.d)("1 week", "FollowersOnlyLabel");
                case 43200:
                    return Object(i.d)("1 month", "FollowersOnlyLabel");
                case 129600:
                    return Object(i.d)("3 months", "FollowersOnlyLabel");
                default:
                    return i.j.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
            }
        }, t.d = function(e) {
            switch (e) {
                case 0:
                    return Object(i.d)("0 min", "FollowersOnlyShorthand");
                case 10:
                    return Object(i.d)("10 min", "FollowersOnlyShorthand");
                case 30:
                    return Object(i.d)("30 min", "FollowersOnlyShorthand");
                case 60:
                    return Object(i.d)("1 hr", "FollowersOnlyShorthand");
                case 1440:
                    return Object(i.d)("1 day", "FollowersOnlyShorthand");
                case 10080:
                    return Object(i.d)("1 wk", "FollowersOnlyShorthand");
                case 43200:
                    return Object(i.d)("1 mo", "FollowersOnlyShorthand");
                case 129600:
                    return Object(i.d)("3 mo", "FollowersOnlyShorthand");
                default:
                    return Object(i.d)("custom", "FollowersOnlyShorthand")
            }
        };
        var i = n("6sO2"),
            a = 30,
            r = [0, 10, 30, 60, 1440, 10080, 43200, 129600]
    },
    "VB5+": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("QFW6"),
            s = function(e) {
                var t = i.__assign({}, Object(o.a)(e), {
                    mentioned_user_display_name: e.mentionedUserDisplayName,
                    user: e.userLogin
                });
                a.n.track(r.SpadeEventType.ChatMentionUsed, t)
            }
    },
    VSa1: function(e, t) {},
    Vaxm: function(e, t) {},
    VsL1: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("6sO2"),
            r = "control";
        t.a = s, t.b = function(e, t) {
            var n = s();
            n[e] = t, a.l.set(o, n)
        }, t.c = function(e, t) {
            var n = s();
            n.lastUsedFollowerDurations[e] = t, a.l.set(o, n)
        };
        var o = "chatSettings";

        function s() {
            var e = a.l.get(o, {});
            return i.__assign({
                lastUsedFollowerDurations: {},
                showAutoModActions: !0,
                showMessageFlags: !0,
                showModerationActions: !0,
                showModIcons: !1,
                showTimestamps: !1,
                zachModeStatus: r
            }, e)
        }
    },
    "Vvm+": function(e, t) {},
    W266: function(e, t) {},
    W6ca: function(e, t, n) {
        "use strict";
        t.c = function(e, t) {
            if (!t) throw new Error("Attempted to upload an empty file object.");
            var n = decodeURI(e);
            return fetch(n, {
                method: "PUT",
                body: new Blob([t])
            })
        }, t.b = function(e, t, n) {
            if (void 0 === n) throw new Error("No default avatar selected.");
            return fetch(a.a.krakenEndpoint + "/users/" + e + "/default_images?client_id=" + a.a.authClientID + "&api_version=" + a.a.defaultAPIVersion, {
                method: "PUT",
                headers: {
                    Authorization: "OAuth " + t,
                    "Content-Type": "application/json",
                    Accept: "application/json"
                },
                body: JSON.stringify({
                    default_profile_image: r.b[n].id
                })
            })
        }, t.a = function(e, t, n, r) {
            return i.__awaiter(this, void 0, void 0, function() {
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, fetch(a.a.krakenEndpoint + "/users/" + e + "/upload_image?client_id=" + a.a.authClientID + "&api_version=" + a.a.defaultAPIVersion + "&image_type=" + n + "&format=" + r, {
                                method: "POST",
                                headers: {
                                    Authorization: "OAuth " + t
                                }
                            })];
                        case 1:
                            return [2, i.sent().json()]
                    }
                })
            })
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("puy8")
    },
    WClm: function(e, t) {},
    WT1Y: function(e, t) {},
    WVx7: function(e, t, n) {
        "use strict";
        var i, a = n("RH2O"),
            r = n("V5M+"),
            o = n("Iw4B"),
            s = n("Aj/L"),
            l = n("TToO"),
            d = n("GiK3"),
            c = n("2KeS"),
            u = n("6sO2"),
            m = n("+8VM"),
            p = n("7vx8"),
            h = n("oIkB");
        ! function(e) {
            e[e.ExitEarly = 0] = "ExitEarly", e[e.Unknown = 1] = "Unknown", e[e.Adblock = 2] = "Adblock", e[e.LimitReached = 3] = "LimitReached"
        }(i || (i = {}));
        var g = n("4JjK"),
            f = n("/LBW"),
            v = n("Odds"),
            b = n("zzpv"),
            k = (n("x583"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.hasAwarded = !1, t.messageHandler = function(e) {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var t, n, a, r, o;
                            return l.__generator(this, function(s) {
                                switch (s.label) {
                                    case 0:
                                        if (e.origin !== window.location.origin) return [2];
                                        if (!(t = e.data) || "trueXAd" !== t.msgSrc) return [2];
                                        switch (t.type) {
                                            case g.a.Ready:
                                                return [3, 1];
                                            case g.a.RequestAd:
                                                return [3, 2];
                                            case g.a.Dimensions:
                                                return [3, 3];
                                            case g.a.OnStart:
                                                return [3, 4];
                                            case g.a.OnCredit:
                                                return [3, 5];
                                            case g.a.OnClose:
                                            case g.a.OnFinish:
                                            case g.a.LimitReached:
                                            case g.a.Adblock:
                                            case g.a.OnError:
                                                return [3, 9]
                                        }
                                        return [3, 10];
                                    case 1:
                                        return n = {
                                            msgSrc: "wateb-ad-modal",
                                            tuid: this.props.tuid
                                        }, e.source.postMessage(n, "*"), [2];
                                    case 2:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(f.g)({
                                                campaignID: a.campaign_id.toString(),
                                                requestID: t.requestID,
                                                requestMethod: this.props.requestRef
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 3:
                                        return t.height && t.width && this.setState({
                                            customDimensions: {
                                                height: t.height,
                                                width: t.width
                                            }
                                        }), [3, 10];
                                    case 4:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(f.f)({
                                                requestID: t.requestID,
                                                adblock: !1,
                                                campaignID: a.campaign_id.toString()
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 5:
                                        return s.trys.push([5, 7, , 8]), [4, this.props.redeemTrueXAd(Object(h.a)({
                                            args: t.engagement.signature_argument_string,
                                            signature: t.engagement.signature,
                                            trueXAd: {
                                                creativeID: t.engagement.ad.creative_id,
                                                campaignID: t.engagement.ad.campaign_id,
                                                name: t.engagement.ad.name,
                                                currencyAmount: t.engagement.ad.currency_amount
                                            },
                                            targetID: this.props.channelID
                                        }))];
                                    case 6:
                                        return r = s.sent(), this.hasAwarded = !0, this.props.onBitsAwarded && this.props.onBitsAwarded(r.data.redeemTrueXAd.grantedBits), [3, 8];
                                    case 7:
                                        return o = s.sent(), u.j.warn("Error while redeeming bits for truex ad", o), this.props.onError && this.props.onError(i.Unknown), [3, 8];
                                    case 8:
                                        return [3, 10];
                                    case 9:
                                        return this.props.onError && (t.type === g.a.LimitReached ? this.props.onError(i.LimitReached) : t.type === g.a.Adblock ? this.props.onError(i.Adblock) : t.type === g.a.OnError ? this.props.onError(i.Unknown) : this.hasAwarded || this.props.onError(i.ExitEarly)), this.props.closeModal(), [3, 10];
                                    case 10:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("message", this.messageHandler)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("message", this.messageHandler)
                }, t.prototype.render = function() {
                    return d.createElement(v._27, {
                        background: v.m.Base
                    }, d.createElement("div", {
                        className: "t-watch-ads-modal",
                        style: this.state.customDimensions
                    }, d.createElement(m.a, null), d.createElement("iframe", {
                        src: "/products/bits/ad"
                    })))
                }, t = l.__decorate([Object(p.a)(b, {
                    name: "redeemTrueXAd"
                })], t)
            }(d.Component));
        var y, _ = Object(a.b)(null, function(e) {
                return Object(c.b)({
                    closeModal: r.c
                }, e)
            })(k),
            C = n("HW6M"),
            S = n("3zLD"),
            E = n("jF7o"),
            N = n("w9tK"),
            w = n("zCIC");

        function D(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, r;
                return l.__generator(this, function(o) {
                    switch (o.label) {
                        case 0:
                            if (t = u.b.get("bits_truex_partner_hash", ""), !(n = u.b.get("bits_truex_api_url", "")) || !t) return u.j.warn("Truex API info missing from dynamic settings"), [2, y.Error];
                            o.label = 1;
                        case 1:
                            return o.trys.push([1, 5, , 6]), [4, fetch(n + "?placement.key=" + t + "&user.uid=" + e + "&max_activities=1")];
                        case 2:
                            return (i = o.sent()).ok ? [4, i.json()] : [3, 4];
                        case 3:
                            if ((a = o.sent()) && Array.isArray(a) && a.length) return [2, y.Available];
                            o.label = 4;
                        case 4:
                            return [2, y.Unavailable];
                        case 5:
                            return r = o.sent(), u.j.warn("Failed checking ad availability from TrueX, probably due to AdBlock", r), [2, y.AdBlocked];
                        case 6:
                            return [2]
                    }
                })
            })
        }! function(e) {
            e[e.Error = 0] = "Error", e[e.AdBlocked = 1] = "AdBlocked", e[e.Unavailable = 2] = "Unavailable", e[e.Available = 3] = "Available"
        }(y || (y = {}));
        var O, I = function(e) {
                var t = null;
                return e.disableWatchAd && (t = Object(u.d)("Try again later", "Bits--WatchAdOffer")), d.createElement(v._27, {
                    className: "bits-buy-card__offer-row",
                    display: v.P.Flex,
                    flexShrink: 0,
                    borderBottom: !0,
                    justifyContent: v._3.Between,
                    flexWrap: v.S.NoWrap,
                    padding: {
                        x: 2,
                        y: 1
                    }
                }, d.createElement(v._4, {
                    padding: {
                        right: 4
                    }
                }, d.createElement("strong", null, Object(u.d)("Get {minBitsCount} or more Bits by watching short ads", {
                    minBitsCount: e.minPayout
                }, "Bits--WatchAdOffer"))), d.createElement(v._4, {
                    flexShrink: 0,
                    display: v.P.Flex,
                    flexDirection: v.R.Column,
                    alignItems: v.c.End
                }, d.createElement(v.u, {
                    type: v.A.Hollow,
                    "data-a-target": "bits-watch-ad",
                    onClick: e.onWatchAdClick,
                    disabled: e.disableWatchAd
                }, Object(u.d)("Watch Ad", "Bits--WatchAdOffer")), t && d.createElement(v._4, {
                    className: "bits-buy-card__sub-text",
                    alignSelf: v.d.Stretch,
                    textAlign: v._37.Center,
                    margin: {
                        top: .5
                    }
                }, t)))
            },
            R = /version\/([\w\.]+).+?(mobile\s?safari|safari)/i,
            T = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        enableWatchAd: !0
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return l.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, D(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), Object(f.e)({
                                        channel: this.props.channelLogin,
                                        channelID: this.props.channelID,
                                        available: e === y.Available
                                    }), e !== y.Available && e !== y.AdBlocked && this.setState({
                                        enableWatchAd: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return R.test(navigator.userAgent) ? null : d.createElement(I, l.__assign({}, this.props, {
                        disableWatchAd: !this.state.enableWatchAd
                    }))
                }, t
            }(d.Component),
            M = n("jxGs"),
            L = n("3iBR"),
            x = n("iydZ"),
            A = n("ZJYd"),
            F = n("CFVp"),
            j = n("qe65"),
            B = (n("OLKT"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleBuyClick = function(e) {
                        var n = t.props.channelID || "",
                            i = Object(A.b)({
                                trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                                channelID: n,
                                purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                                bitsAmount: e.currentTarget.dataset.bitsAmount,
                                closeAllBits: t.props.closeAllBits,
                                location: t.props.location
                            });
                        i && (t.props.onBuyPopupClose(i), t.props.onClose())
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    if (this.props.offer.type === M.a) {
                        if (!this.props.channelLogin) return null;
                        var e = this.props.currentUserSHA || "";
                        return d.createElement(T, {
                            key: "wateb",
                            minPayout: this.props.offer.bits,
                            onWatchAdClick: this.props.handleWatchAdClick,
                            truexUserID: e,
                            channelID: this.props.channelID || "",
                            channelLogin: this.props.channelLogin
                        })
                    }
                    var t = null;
                    Object(A.c)(this.props.offer) ? t = d.createElement(v._4, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, d.createElement(v.O, {
                        type: v._41.Strong,
                        fontSize: v.T.Size6
                    }, Object(u.d)("Special Offer: 1st Time Buyers", "Bits--BuyCard"))) : Object(A.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === M.c && (t = d.createElement(v._4, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, d.createElement(v.O, {
                        type: v._41.Strong,
                        fontSize: v.T.Size6
                    }, Object(u.d)("Flash Sale: Now thru Nov. 27!", "Bits--BuyCard"))));
                    var n = null;
                    this.props.offer.discount && (n = d.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(u.d)("{percentOff,number,percent} discount", {
                        percentOff: this.props.offer.discount
                    }, "Bits--BuyCard")));
                    var i = null;
                    (Object(A.c)(this.props.offer) || Object(A.e)(this.props.offer)) && (i = d.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(u.d)("one per account", "Bits--BuyCard")));
                    var a = this.props.isLastRow ? v._27 : v._4;
                    return d.createElement(a, {
                        className: "bits-buy-card-offer-row",
                        flexShrink: 0,
                        display: v.P.Flex,
                        justifyContent: v._3.Center,
                        borderBottom: this.props.isLastRow,
                        flexDirection: v.R.Column,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, t, d.createElement(v._4, {
                        display: v.P.Flex,
                        justifyContent: v._3.Between,
                        alignItems: v.c.Center
                    }, d.createElement(v._4, {
                        flexGrow: 1
                    }, d.createElement(v.O, {
                        type: v._41.H5,
                        color: v.J.Base,
                        bold: !0
                    }, this.props.offer.bits, " Bits"), this.getAvailableTiers(this.props.offer.bits)), d.createElement(v._4, {
                        flexShrink: 0,
                        display: v.P.Flex,
                        flexDirection: v.R.Column,
                        alignItems: v.c.End
                    }, d.createElement(v.u, {
                        onClick: this.handleBuyClick,
                        "data-purchase-url": this.props.offer.url,
                        "data-bits-amount": this.props.offer.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.offer.bits
                    }, this.props.offer.price), (n || i) && d.createElement(v._4, {
                        alignSelf: v.d.Stretch,
                        textAlign: v._37.Right,
                        margin: {
                            top: .5
                        }
                    }, n, i))))
                }, t.prototype.getAvailableTiers = function(e) {
                    var t = this.props.bitsConfig.indexedActions[L.g];
                    t || (t = Object(F.b)());
                    var n = t.orderedTiers.filter(function(t) {
                        return t.bits <= e
                    }).reverse();
                    return d.createElement(v._4, {
                        padding: {
                            top: .5
                        },
                        className: "bits-buy-card-offer-row__tier-bits-images"
                    }, n.map(function(e) {
                        return d.createElement(j.a, {
                            key: e.bits,
                            sources: Object(x.b)(e, 2, !1)
                        })
                    }))
                }, t
            }(d.Component)),
            U = (n("sgUC"), function(e) {
                var t = [],
                    n = [],
                    i = null;
                return e.offers.forEach(function(a, r) {
                    var o = d.createElement(B, {
                            key: a.id,
                            offer: a,
                            isLastRow: r + 1 < e.offers.length,
                            bitsConfig: e.bitsConfig,
                            channelID: e.channelID,
                            channelLogin: e.channelLogin,
                            currentUserSHA: e.currentUserSHA,
                            location: e.location,
                            onClose: e.onClose,
                            onBuyPopupClose: e.onBuyPopupClose,
                            handleWatchAdClick: e.handleWatchAdClick,
                            closeAllBits: e.closeAllBits,
                            trackBitsCardInteraction: e.trackBitsCardInteraction
                        }),
                        s = Object(A.d)(a),
                        l = Object(A.c)(a),
                        c = a.type === M.a;
                    l && !e.hidePromos ? t.push(o) : s && !l ? t.push(o) : c && !e.hideWateb ? i = o : c || s || n.push(o)
                }), e.fullsize ? d.createElement(v._4, {
                    className: "bits-buy-card-offers__full-size",
                    flexGrow: 1,
                    flexWrap: v.S.NoWrap,
                    display: v.P.Flex,
                    flexDirection: v.R.Column
                }, i, t, n) : d.createElement(w.b, {
                    className: "bits-buy-card-offers__scroll-view"
                }, d.createElement(v._4, {
                    flexGrow: 1,
                    flexWrap: v.S.NoWrap,
                    display: v.P.Flex,
                    flexDirection: v.R.Column
                }, i, t, n))
            }),
            P = function(e) {
                var t = null;
                e.pricesIncludeVAT && (t = d.createElement(v.O, {
                    italic: !0,
                    type: v._41.P,
                    color: v.J.Alt
                }, Object(u.d)("Prices include VAT", "Bits--BuyCard")));
                var n = null;
                e.minBitsToCheer && e.minBitsToCheer > 1 && (n = d.createElement(v.O, {
                    color: v.J.Alt
                }, Object(u.d)("{displayName} requires {minBits} Bits to Cheer in this channel.", {
                    displayName: e.displayName,
                    minBits: e.minBitsToCheer
                }, "Bits--BuyCard")));
                var i = null;
                return void 0 !== e.bitsBalance && null !== e.bitsBalance && (i = d.createElement(v.O, {
                    color: v.J.Alt
                }, Object(u.d)("You have {totalBits} Bits", {
                    totalBits: d.createElement("strong", {
                        "data-a-target": "buy-card-bits-count"
                    }, e.bitsBalance)
                }, "Bits--BuyCard"))), d.createElement(v._27, {
                    className: "bits-buy-card-header",
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    borderBottom: !0,
                    flexShrink: 0
                }, d.createElement(v._4, {
                    margin: {
                        bottom: 1
                    }
                }, d.createElement(v.O, {
                    type: v._41.H4,
                    color: v.J.Alt
                }, Object(u.d)("Purchase Bits", "Bits--BuyCard")), t), i, n)
            },
            V = n("nrdj"),
            H = function(e) {
                return d.createElement(v._4, {
                    display: v.P.Flex,
                    flexGrow: 1,
                    flexDirection: v.R.Column,
                    alignItems: v.c.Center,
                    fullWidth: !0,
                    flexWrap: v.S.NoWrap,
                    padding: {
                        y: 1
                    }
                }, d.createElement(V.a, {
                    prefix: "cheer",
                    amount: e.amount,
                    bitsConfig: e.bitsConfig,
                    showAmount: !0,
                    showImage: !0
                }), d.createElement(v._4, {
                    display: v.P.Flex,
                    padding: {
                        top: 1
                    },
                    flexGrow: 1,
                    flexDirection: v.R.Column,
                    alignItems: v.c.Center,
                    flexWrap: v.S.NoWrap
                }, d.createElement(v.O, {
                    type: v._41.H4,
                    bold: !0
                }, Object(u.d)("You got {bitsAmount,number} Bits!", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward")), d.createElement(v.Y, {
                    padding: {
                        top: 1
                    }
                }, d.createElement(v.O, {
                    color: v.J.Alt2
                }, Object(u.d)("{bitsAmount,number} Bits were added to your Bit inventory.", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward"), d.createElement("br", null), Object(u.d)("You can use these Bits to Cheer!", "Bits--WatchAdAward")))), d.createElement(v._4, {
                    display: v.P.Flex,
                    padding: {
                        x: 1,
                        top: 3
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._3.Between
                }, d.createElement(v.u, {
                    onClick: e.onStartCheering
                }, Object(u.d)("Start Cheering", "Bits--WatchAdAward")), d.createElement(v.u, {
                    type: v.A.Hollow,
                    onClick: e.onWatchAnother,
                    disabled: !e.hasAdAvailable
                }, Object(u.d)("Watch Another", "Bits--WatchAdAward"))))
            },
            W = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasAdAvailable: !0
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        return l.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, D(this.props.truexUserID)];
                                case 1:
                                    return e.sent() !== y.Available && this.setState({
                                        hasAdAvailable: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return d.createElement(H, l.__assign({}, this.props, {
                        hasAdAvailable: this.state.hasAdAvailable
                    }))
                }, t
            }(d.Component),
            G = (n("q8Cw"), function(e) {
                var t = Object(u.d)("Something's wrong!", "Bits--WatchAdError"),
                    n = Object(u.d)("Something went wrong. Wait a while and try again.", "Bits--WatchAdError"),
                    a = "adserrorgeneric";
                switch (e.type) {
                    case i.Adblock:
                        a = "adserroradblock", n = Object(u.d)("We can't load this Ad, probably because Ad Blocking software is running. To watch an ad and get Bits, please disable all Ad Blocking software.", "Bits--WatchAdError");
                        break;
                    case i.LimitReached:
                        a = "adserrorlimit", t = Object(u.d)("Ad Limit Reached", "Bits--WatchAdError"), n = Object(u.d)("That's all the Ads we have for now. Try again tomorrow!", "Bits--WatchAdError");
                        break;
                    case i.ExitEarly:
                        n = Object(u.d)("To get Bits, you must view and interact with the Ad for the minimum amount of time.", "Bits--WatchAdError")
                }
                var r = d.createElement(v._4, {
                    className: "watch-ad-error__footer",
                    display: v.P.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._3.Center
                }, d.createElement(v.u, {
                    onClick: e.onTryAgain
                }, Object(u.d)("Try Again", "Bits--WatchAdError")));
                return e.type === i.LimitReached && (r = d.createElement(v._4, {
                    className: "watch-ad-error__footer",
                    display: v.P.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._3.Between
                }, d.createElement(v.u, {
                    onClick: e.onClose
                }, Object(u.d)("Got It", "Bits--WatchAdError")), d.createElement(v.u, {
                    onClick: e.onTryAgain,
                    type: v.A.Hollow
                }, Object(u.d)("Buy Bits", "Bits--WatchAdError")))), d.createElement(v._4, {
                    padding: {
                        x: 1
                    },
                    display: v.P.Flex,
                    flexGrow: 1,
                    flexDirection: v.R.Column,
                    alignItems: v.c.Center,
                    fullWidth: !0,
                    flexWrap: v.S.NoWrap
                }, d.createElement(v._4, {
                    padding: {
                        y: 2
                    }
                }, d.createElement("img", {
                    className: "watch-ad-error__error-image",
                    src: L.b + "/light/static/1/" + a + ".png"
                })), d.createElement(v._4, {
                    padding: {
                        bottom: 1
                    }
                }, d.createElement(v.O, {
                    type: v._41.H4,
                    bold: !0
                }, t)), d.createElement(v.O, {
                    color: v.J.Alt2
                }, n), r)
            }),
            q = n("CSlQ"),
            z = n("aqNN"),
            $ = (n("6Rwu"), "storage.wateb.agreedToWatebTerms.v1"),
            J = "bits-show-wateb-terms",
            Q = "bits-agree-wateb-terms";
        ! function(e) {
            e[e.Inactive = 0] = "Inactive", e[e.Error = 1] = "Error", e[e.Awarded = 2] = "Awarded"
        }(O || (O = {}));
        var Y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        wateb: O.Inactive,
                        watebError: null,
                        bitsAwarded: 0,
                        showWatebTerms: !1,
                        agreedToWatebTerms: u.l.get($, !1)
                    }, t.onBuyPopupClose = function(e) {
                        Object(E.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t.onAdBitsAwarded = function(e) {
                        t.props.data && !t.props.data.loading && t.props.data.refetch(), t.setState({
                            wateb: O.Awarded,
                            bitsAwarded: e
                        })
                    }, t.renderWatebTerms = function(e, n) {
                        return d.createElement(v._27, l.__assign({
                            className: C(e),
                            display: v.P.Flex,
                            flexDirection: v.R.Column,
                            justifyContent: v._3.Center,
                            padding: {
                                bottom: 2,
                                x: 2
                            },
                            textAlign: v._37.Left,
                            "data-a-target": J
                        }, n), d.createElement(v._27, {
                            margin: {
                                top: 2,
                                bottom: 2,
                                left: 0
                            },
                            alignItems: v.c.Baseline
                        }, d.createElement("div", {
                            key: "Bits--back-edit",
                            style: {
                                cursor: "pointer"
                            },
                            onClick: t.onCloseWatebTerms
                        }, d.createElement(v.O, {
                            color: v.J.Link,
                            type: v._41.Span
                        }, d.createElement(v._17, {
                            asset: v._18.ChatSettingsBack,
                            height: 10,
                            width: 10
                        }), Object(u.d)("Back", "Bits--Watch-Ad-Terms")))), d.createElement(v._4, {
                            padding: {
                                bottom: 2
                            }
                        }, d.createElement(v.O, {
                            type: v._41.Span
                        }, Object(u.d)("Before continuing to watch ads to earn Bits, we remind you that the <x:link>Bits Acceptable Use Policy</x:link> applies to your participation with this feature and any Bits you may obtain. As a reminder, you may not:", {
                            "x:link": function(e) {
                                return d.createElement("span", {
                                    key: "helplink"
                                }, d.createElement("a", {
                                    href: "https://www.twitch.tv/p/legal/bits-acceptable-use/",
                                    target: "_blank",
                                    rel: "noopener noreferrer"
                                }, e))
                            }
                        }, "Bits--Watch-Ad-Terms")), d.createElement(v._4, {
                            margin: {
                                y: 1
                            }
                        }, d.createElement("li", null, Object(u.d)("Obtain Bits to Cheer on your own channel via this feature", "Bits--Watch-Ad-Terms")), d.createElement("li", null, Object(u.d)("Collect Bits via this feature through the use of multiple accounts, robots, or other automated means", "Bits--Watch-Ad-Terms")))), d.createElement(v._4, {
                            display: v.P.Flex,
                            justifyContent: v._3.Center
                        }, d.createElement(v.u, {
                            size: v.y.Small,
                            onClick: t.onAgreeToWatebTerms,
                            "data-a-target": Q
                        }, Object(u.d)("Continue", "Bits--Watch-Ad-Terms"))))
                    }, t.onAgreeToWatebTerms = function() {
                        u.l.set($, !0), t.setState({
                            agreedToWatebTerms: !0,
                            showWatebTerms: !1
                        }), t.showWatchAdModal()
                    }, t.onCloseWatebTerms = function() {
                        t.setState({
                            showWatebTerms: !1
                        })
                    }, t.handleWatchAdClick = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            return l.__generator(this, function(e) {
                                return this.state.agreedToWatebTerms ? (this.showWatchAdModal(), [2]) : (this.setState({
                                    showWatebTerms: !0
                                }), [2])
                            })
                        })
                    }, t.receiveAdErrorState = function(e) {
                        t.setState({
                            wateb: O.Error,
                            watebError: e
                        })
                    }, t.resetAdErrorState = function() {
                        t.state.wateb === O.Error && (t.setState({
                            wateb: O.Inactive
                        }), t.props.data && t.props.data.refetch())
                    }, t
                }
                return l.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return !e.adModalOpen
                }, t.prototype.render = function() {
                    var e = {
                            border: !0,
                            background: v.m.Base,
                            fullWidth: !0,
                            elevation: 3
                        },
                        t = C({
                            "bits-buy-card": !0,
                            "bits-buy-card__chat-tooltip": this.props.location === f.b.ChatTooltip
                        }),
                        n = null;
                    if (this.props.location === f.b.ChatTooltip && (n = d.createElement("button", {
                            className: "bits-buy-card__close",
                            onClick: this.props.onClose,
                            "data-a-target": "bits-buy-card-close-button"
                        }, d.createElement(v._17, {
                            asset: v._18.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return d.createElement(v._27, l.__assign({
                        className: t,
                        "data-a-target": "bits-buy-card-loading",
                        display: v.P.Flex,
                        flexDirection: v.R.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._3.Center,
                        textAlign: v._37.Center
                    }, e), d.createElement(v._6, {
                        delay: 0
                    }), d.createElement(v._4, {
                        padding: {
                            top: 2
                        }
                    }, d.createElement(v.O, {
                        italic: !0
                    }, Object(u.d)("Fetching bits", "Bits--BuyCard"))));
                    if (this.props.data.error) return d.createElement(v._4, l.__assign({
                        className: C(t, "bits-buy-card--shorter"),
                        display: v.P.Flex,
                        flexDirection: v.R.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._3.Center,
                        padding: 2,
                        textAlign: v._37.Center,
                        "data-a-target": "bits-buy-card-error"
                    }, e), n, d.createElement(v.O, {
                        italic: !0
                    }, Object(u.d)("Bits prices are unavailable right now. Check back again later.", "Bits--BuyCard")));
                    if (this.state.showWatebTerms) return this.renderWatebTerms(t, e);
                    var i = this.renderWatebCard();
                    if (i) return d.createElement(v._27, l.__assign({
                        className: C(t, "bits-buy-card--shorter"),
                        display: v.P.Flex,
                        flexDirection: v.R.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._3.Center,
                        textAlign: v._37.Center,
                        padding: 1
                    }, e), n, i);
                    var a = [];
                    this.props.data.currentUser ? a = this.props.data.currentUser.bitsOffers : this.props.data.bitsOffers && (a = this.props.data.bitsOffers);
                    var r = a.filter(function(e) {
                            return e.type === M.b
                        }).some(function(e) {
                            return e.includesVAT
                        }),
                        o = this.props.data.user ? this.props.data.user.id : "",
                        s = d.createElement(U, {
                            offers: a,
                            fullsize: this.props.fullsize,
                            hidePromos: this.props.hidePromos,
                            hideWateb: this.props.hideWateb,
                            bitsConfig: this.props.bitsConfig,
                            channelID: o,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.closeAllBits,
                            currentUserSHA: this.props.data && this.props.data.currentUser && this.props.data.currentUser.idSHA1,
                            handleWatchAdClick: this.handleWatchAdClick,
                            location: this.props.location,
                            onBuyPopupClose: this.onBuyPopupClose,
                            onClose: this.props.onClose,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction
                        }),
                        c = null;
                    return this.props.location === f.b.ChatTooltip && (c = d.createElement(P, {
                        bitsBalance: this.props.data && this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        displayName: this.props.data && this.props.data.user && this.props.data.user.displayName || this.props.channelLogin || "",
                        minBitsToCheer: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.cheerMinimumBits,
                        pricesIncludeVAT: r
                    })), d.createElement(v._27, l.__assign({
                        className: t,
                        padding: {
                            top: 1
                        },
                        display: v.P.Flex,
                        flexDirection: v.R.Column,
                        "data-a-target": "bits-buy-card"
                    }, e), n, c, s)
                }, t.prototype.renderWatebCard = function() {
                    if (this.props.data && this.props.data.currentUser) switch (this.state.wateb) {
                        case O.Awarded:
                            return d.createElement(W, {
                                bitsConfig: this.props.bitsConfig,
                                amount: this.state.bitsAwarded,
                                onStartCheering: this.props.onClose,
                                onWatchAnother: this.handleWatchAdClick,
                                truexUserID: this.props.data.currentUser.idSHA1
                            });
                        case O.Error:
                            return d.createElement(G, {
                                type: this.state.watebError || i.Unknown,
                                onClose: this.props.onClose,
                                onTryAgain: this.resetAdErrorState
                            });
                        default:
                            return !1
                    }
                }, t.prototype.showWatchAdModal = function() {
                    this.props.data && this.props.data.currentUser && this.props.data.user && this.props.showWatchAdModal({
                        tuid: this.props.data.currentUser.idSHA1,
                        onBitsAwarded: this.onAdBitsAwarded,
                        onError: this.receiveAdErrorState,
                        requestRef: f.c.ShowAdButton,
                        channelID: this.props.data.user.id
                    })
                }, t = l.__decorate([Object(p.a)(z, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(d.Component),
            K = Object(S.compose)(Object(q.d)("BitsBuyCard", {
                autoReportInteractive: !0,
                destination: N.a.BitsBuyCard
            }))(Y);

        function Z(e) {
            return {
                adModalOpen: Object(o.b)(e, _),
                isLoggedIn: Object(s.d)(e)
            }
        }

        function X(e) {
            return {
                showWatchAdModal: function(t) {
                    return e(Object(r.d)(_, t))
                }
            }
        }
        var ee = Object(a.b)(Z, X)(K);
        n.d(t, !1, function() {
            return Z
        }), n.d(t, !1, function() {
            return X
        }), n.d(t, "a", function() {
            return ee
        })
    },
    X7fs: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomMessages"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "first"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "last"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "before"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "after"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "last"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "last"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "before"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "before"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "after"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "RoomMessage"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "deletedAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sentAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "roomMessageContent"
                                                                },
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sender"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "chatColor"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayBadges"
                                                                        },
                                                                        arguments: [{
                                                                            kind: "Argument",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "channelID"
                                                                            },
                                                                            value: {
                                                                                kind: "Variable",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "channelID"
                                                                                }
                                                                            }
                                                                        }],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "setID"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "version"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 466
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/rooms/models/room-message-content-fragment.gql"\nquery RoomMessages($roomID: ID! $channelID: ID! $first: Int! $last: Int! $before: Cursor $after: Cursor) {\nroom(id: $roomID) {\nid\nmessages(first: $first last: $last before: $before after: $after) {\nedges {\ncursor\nnode {\n... on RoomMessage {\nid\ndeletedAt\nsentAt\n...roomMessageContent\nsender {\nid\nlogin\nchatColor\ndisplayName\ndisplayBadges(channelID: $channelID) {\nsetID\nversion\n}\n}\n}\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("2LJg").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    XViT: function(e, t) {},
    XYVN: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, o) {
            return {
                topic: n ? Object(a.a)(n) : "",
                type: i.PubsubMessageType.BitsLeaderboardEvent,
                mutator: function(e, t) {
                    if (!t || !n) return t;
                    var i = e.top.map(function(e) {
                        return Object(r.b)(e, n.id)
                    });
                    if (t.user) {
                        if (t.user.tournament && t.user.tournament.teamLeaderboard && (t.user.tournament.teamLeaderboard.items.edges = i), t.user.tournament && t.user.tournament.globalLeaderboard && (t.user.tournament.globalLeaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.tournament.self && t.user.tournament.self.globalLeaderboardItem)) {
                            var a = Object(r.b)(e.entry_context.entry, n.id);
                            t.user.tournament.self.globalLeaderboardItem = a.node
                        }
                        if (t.user.cheer && t.user.cheer.leaderboard && (t.user.cheer.leaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.self && t.user.self.bitsLeaderboardItem)) {
                            var s = Object(r.b)(e.entry_context.entry, n.id);
                            t.user.self.bitsLeaderboardItem = s.node
                        }
                    }
                    return t
                },
                skip: !n,
                query: e,
                variables: {
                    channelID: t
                }
            }
        };
        var i = n("aMxy"),
            a = n("HZww"),
            r = n("bkpq")
    },
    Y5T0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BitsCommandHandler_DismissPinnedCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPinnedCheerInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissPinnedCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation BitsCommandHandler_DismissPinnedCheer($input: DismissPinnedCheerInput!) {\ndismissPinnedCheer(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ZJYd: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            if (e.type === r.a) return !1;
            return l(e) && null !== e.promotion && e.promotion.type === r.d
        }, t.e = function(e) {
            if (e.type === r.a) return !1;
            return l(e) && null !== e.promotion && e.promotion.type === r.e
        }, t.d = l, t.a = function(e) {
            var t = 0,
                n = 0,
                i = 0;
            return e.forEach(function(e) {
                e.cheerAmount && (t = Math.max(t, e.cheerAmount), n = n ? Math.min(n, e.cheerAmount) : e.cheerAmount, i += e.cheerAmount)
            }), {
                total: i,
                smallestCheermote: n,
                largestCheermote: t
            }
        }, t.f = function(e) {
            var t = e.messageBits,
                n = t.total,
                a = t.largestCheermote,
                r = t.smallestCheermote;
            if (n) {
                var s = {
                        cheerAboveMaxBitsPerEmote: a > o.k,
                        totalAboveBalance: n > e.balance,
                        totalBelowCheerMinimum: n < e.cheerMinimumBits,
                        totalBelowEmoteMinimum: r < e.emoteMinimumBits,
                        inputLongerThanMaxBitsMessage: e.inputValue.length > o.j,
                        inputStartsWithCommand: e.inputValue.startsWith("/")
                    },
                    l = Object.keys(s).some(function(e) {
                        return s[e]
                    });
                if (l) return i.__assign({
                    canSpend: !1
                }, s)
            }
            return {
                canSpend: !0
            }
        }, t.b = function(e) {
            var t = e.purchaseUrl;
            if (!t) return;
            e.trackBitsCardInteraction(Object(s.d)(e.bitsAmount), {
                location: e.location
            });
            var n = t.replace("{channelID}", e.channelID),
                i = window.open(n, "Twitch", "width=1024,height=600,scrollbars=yes");
            if (!i || Object(a.a)()) return e.closeAllBits && e.closeAllBits(), void e.trackBitsCardInteraction(s.a.CloseCard, {
                location: e.location
            });
            return i.focus(), i
        };
        var i = n("TToO"),
            a = n("Ouuk"),
            r = n("jxGs"),
            o = n("3iBR"),
            s = n("/LBW");

        function l(e) {
            return e.type === r.b && null !== e.promotion && !!e.promotion
        }
    },
    ZiSq: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("RH2O"),
            o = n("2KeS"),
            s = n("V5M+"),
            l = n("ass3"),
            d = n("oSFp"),
            c = n("HW6M"),
            u = n("GiK3");
        ! function(e) {
            e[e.None = 0] = "None", e[e.Left = 1] = "Left", e[e.Middle = 2] = "Middle", e[e.Right = 3] = "Right"
        }(i || (i = {}));
        var m = n("6sO2"),
            p = n("E9Qg"),
            h = n("+Znq"),
            g = n("5s0/"),
            f = n("7vx8"),
            v = n("Odds");
        n("fbnZ");

        function b(e) {
            e.stopPropagation()
        }
        var k, y = function(e) {
                return u.createElement(v.Y, {
                    display: v.P.InlineBlock
                }, u.createElement("div", {
                    className: "viewer-card-drag-cancel",
                    onMouseDown: b
                }, e.children))
            },
            _ = n("O0Qc"),
            C = n("CSlQ"),
            S = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isIgnored: !1
                    }, t.ignoreUser = function() {
                        t.props.sendMessageToTMI(Object(_.h)(t.props.targetLogin)), t.setState({
                            isIgnored: !0
                        })
                    }, t.unignoreUser = function() {
                        t.props.sendMessageToTMI(Object(_.j)(t.props.targetLogin)), t.setState({
                            isIgnored: !1
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isIgnored) {
                        var e = Object(m.d)("Unblock User", "ViewerCardIgnoreAction");
                        return u.createElement(v._44, {
                            key: "Ignore",
                            label: e,
                            direction: v._46.Top,
                            align: v._45.Right,
                            offsetX: "15%"
                        }, u.createElement(v.v, {
                            icon: v._18.Unignore,
                            ariaLabel: Object(m.d)("Unblock {displayName}", {
                                displayName: this.props.targetDisplayName
                            }, "ViewerCardIgnoreAction"),
                            onClick: this.unignoreUser,
                            overlay: !0
                        }))
                    }
                    var t = Object(m.d)("Block User", "ViewerCardIgnoreAction");
                    return u.createElement(v._44, {
                        key: "Ignore",
                        label: t,
                        direction: v._46.Top,
                        align: v._45.Right,
                        offsetX: "15%"
                    }, u.createElement(v.v, {
                        icon: v._18.Ignore,
                        ariaLabel: Object(m.d)("Block {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.ignoreUser,
                        overlay: !0
                    }))
                }, t = a.__decorate([Object(C.d)("ViewerCardIgnoreAction")], t)
            }(u.Component),
            E = n("oIkB"),
            N = n("Dc1A"),
            w = n("1Eny"),
            D = n("zVM8"),
            O = "10 minutes",
            I = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(E.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t.onTimeoutClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(E.a)({
                            channelID: i,
                            bannedUserLogin: a,
                            expiresIn: O
                        }))
                    }, t.onUnbanClick = function() {
                        var e = t.props,
                            n = e.unbanUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(E.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return u.createElement(v._4, {
                        display: v.P.InlineFlex
                    }, this.getContent())
                }, t.prototype.getContent = function() {
                    return this.props.data.loading || this.props.data.error ? [this.renderBanAction(!0), this.renderTimeoutAction(!0)] : this.props.data.chatRoomBanStatus ? this.props.data.chatRoomBanStatus.isPermanent ? [this.renderUnbanAction(), this.renderTimeoutAction(!0)] : [this.renderBanAction(), this.renderUntimeoutAction()] : [this.renderBanAction(), this.renderTimeoutAction()]
                }, t.prototype.renderTimeoutAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(m.d)("Timeout User", "ViewerCardModActions");
                    return u.createElement(v._4, {
                        key: "Timeout",
                        padding: {
                            right: 1
                        }
                    }, u.createElement(v._44, {
                        label: t,
                        direction: v._46.Top,
                        align: v._45.Left,
                        offsetX: "20%"
                    }, u.createElement(v.v, {
                        icon: v._18.Timeout,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onTimeoutClick
                    })))
                }, t.prototype.renderUntimeoutAction = function() {
                    var e = Object(m.d)("Untimeout User", "ViewerCardModActions");
                    return u.createElement(v._4, {
                        key: "Untimeout",
                        padding: {
                            right: 1
                        }
                    }, u.createElement(v._44, {
                        label: e,
                        direction: v._46.Top,
                        align: v._45.Left,
                        offsetX: "20%"
                    }, u.createElement(v.v, {
                        icon: v._18.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t.prototype.renderBanAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(m.d)("Ban User", "ViewerCardModActions");
                    return u.createElement(v._4, {
                        key: "Ban",
                        padding: {
                            right: 1
                        }
                    }, u.createElement(v._44, {
                        label: t,
                        direction: v._46.Top,
                        align: v._45.Left,
                        offsetX: "20%"
                    }, u.createElement(v.v, {
                        icon: v._18.Ban,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onBanClick
                    })))
                }, t.prototype.renderUnbanAction = function() {
                    var e = Object(m.d)("Unban User", "ViewerCardModActions");
                    return u.createElement(v._4, {
                        key: "Unban",
                        padding: {
                            right: 1
                        }
                    }, u.createElement(v._44, {
                        label: e,
                        direction: v._46.Top,
                        align: v._45.Left,
                        offsetX: "20%"
                    }, u.createElement(v.v, {
                        icon: v._18.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t = a.__decorate([Object(C.d)("ViewerCardModActions"), Object(f.a)(D, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.userID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(f.a)(N, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var i = e.readQuery({
                                        query: D,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        }
                                    });
                                    i && (t && t.data && (i.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: D,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        },
                                        data: i
                                    }))
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(f.a)(w, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                        query: D,
                                        variables: {
                                            targetUserID: t.userID,
                                            channelID: t.channelID
                                        }
                                    });
                                    if (n) {
                                        var i = a.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                        e.writeQuery({
                                            query: D,
                                            variables: {
                                                targetUserID: t.userID,
                                                channelID: t.channelID
                                            },
                                            data: i
                                        })
                                    }
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(u.Component),
            R = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.modUser = function() {
                        n.props.sendMessageToTMI(Object(_.i)(n.props.targetLogin)), n.setState({
                            isModerator: !0
                        })
                    }, n.unmodUser = function() {
                        n.props.sendMessageToTMI(Object(_.k)(n.props.targetLogin)), n.setState({
                            isModerator: !1
                        })
                    }, n.state = {
                        isModerator: !1
                    }, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isModerator) {
                        var e = Object(m.d)("Unmod User", "ViewerCardOwnerActions");
                        return u.createElement(v._4, {
                            key: "OP",
                            display: v.P.InlineFlex,
                            padding: {
                                right: 1
                            }
                        }, u.createElement(v._44, {
                            label: e,
                            direction: v._46.Top,
                            align: v._45.Center
                        }, u.createElement(v.v, {
                            icon: v._18.FollowCheck,
                            ariaLabel: e,
                            onClick: this.unmodUser
                        })))
                    }
                    e = Object(m.d)("Mod User", "ViewerCardOwnerActions");
                    return u.createElement(v._4, {
                        key: "OP",
                        display: v.P.InlineFlex,
                        padding: {
                            right: 1
                        }
                    }, u.createElement(v._44, {
                        label: e,
                        direction: v._46.Top,
                        align: v._45.Center
                    }, u.createElement(v.v, {
                        icon: v._18.OP,
                        ariaLabel: e,
                        onClick: this.modUser
                    })))
                }, t = a.__decorate([Object(C.d)("ViewerCardOwnerActions")], t)
            }(u.Component),
            T = n("O9wU"),
            M = n("O1nh"),
            L = n("mw/a"),
            x = n("daN3"),
            A = n("YH6m"),
            F = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onGiftSelect = function() {
                        t.props.onGiftSelect && t.props.onGiftSelect()
                    }, t.onSelectTierTab = function(e) {
                        t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return u.createElement(v._4, null, u.createElement(v._4, {
                        display: v.P.Flex,
                        justifyContent: v._3.Between,
                        alignItems: v.c.Center,
                        fullWidth: !0
                    }, u.createElement(v.O, {
                        bold: !0,
                        type: v._41.H5
                    }, Object(m.d)("Choose A Gift Subscription", "GiftTierTabs")), u.createElement(v.u, {
                        type: v.A.Text,
                        icon: v._18.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, u.createElement(v._4, {
                        alignItems: v.c.Center,
                        display: v.P.InlineFlex
                    }, u.createElement(v.O, null, Object(m.d)("Back", "GiftTierTabs"))))), u.createElement(A.a, {
                        canPrimeSubscribe: !1,
                        channelDisplayName: this.props.channelDisplayName,
                        giftRecipient: this.props.giftRecipient,
                        isGift: !0,
                        isSubscribed: !1,
                        onGiftSelect: this.onGiftSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        userHasPrime: !1
                    }))
                }, t
            }(u.Component),
            j = n("pQNb"),
            B = n("CwIZ"),
            U = n("m4HT"),
            P = (n("VSa1"), n("BBNG"));
        ! function(e) {
            e[e.ActionsPage = 0] = "ActionsPage", e[e.SubGiftSelectPage = 1] = "SubGiftSelectPage"
        }(k || (k = {}));
        var V = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: k.ActionsPage
                    }, t.getContent = function() {
                        if (t.props.data.loading || t.props.data.error) return t.renderHideButton();
                        var e = {
                                backgroundImage: "url(" + (t.props.data.targetUser.bannerImageURL || p) + ")"
                            },
                            n = t.state.currentPage === k.ActionsPage ? t.renderActions() : t.renderSubGiftSelect();
                        return u.createElement(v._27, {
                            border: !0,
                            className: "viewer-card",
                            elevation: 1,
                            "data-a-target": "viewer-card"
                        }, u.createElement(v.Z, {
                            background: v.m.AccentAlt2
                        }, u.createElement("div", {
                            className: "viewer-card__background",
                            style: e
                        }, u.createElement(v._4, {
                            display: v.P.Flex,
                            flexDirection: v.R.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            className: "viewer-card__overlay"
                        }, u.createElement(v._27, {
                            alignItems: v.c.Start,
                            background: v.m.Overlay,
                            className: "viewer-card__banner",
                            display: v.P.Flex,
                            flexDirection: v.R.Row,
                            flexGrow: 1,
                            fullWidth: !0,
                            justifyContent: v._3.Start,
                            padding: 1,
                            position: v._11.Relative,
                            textAlign: v._37.Center
                        }, u.createElement(y, null, u.createElement(v.l, {
                            src: t.props.data.targetUser.profileImageURL,
                            size: 50,
                            alt: t.props.data.targetUser.displayName
                        })), u.createElement(y, null, u.createElement(v._4, {
                            alignItems: v.c.Center,
                            margin: 1,
                            className: "viewer-card__display-name",
                            ellipsis: !0
                        }, u.createElement(v.O, {
                            color: v.J.Overlay,
                            type: v._41.H4
                        }, u.createElement(v.M, {
                            hoverUnderlineNone: !0,
                            targetBlank: !0,
                            to: "/" + t.props.targetLogin,
                            type: v.N.Inherit
                        }, t.props.data.targetUser.displayName)))), u.createElement(y, null, t.renderHideButton()), u.createElement(y, null, t.renderIgnoreButton()))))), n)
                    }, t.toggleGiftPage = function() {
                        var e = t.state.currentPage === k.ActionsPage ? k.SubGiftSelectPage : k.ActionsPage;
                        e === k.SubGiftSelectPage && t.trackGiftEvent(), t.setState({
                            currentPage: e
                        })
                    }, t.onWhisperButtonClick = function() {
                        t.props.hideViewerCard()
                    }, t.handleReportUserClick = function() {
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: t.reportContentTypeFromSourceType(t.props.sourceType),
                                targetUserID: t.props.data.targetUser.id,
                                contentID: t.props.sourceID,
                                extra: JSON.stringify({
                                    channel_id: t.props.channelID.toString()
                                })
                            },
                            title: Object(m.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.data.targetUser.displayName
                            }, "ReportUserModalTitle")
                        })
                    }, t.trackBuyGiftSubEvent = function(e) {
                        Object(B.b)(a.__assign({}, e, {
                            action: B.a.BuyGiftSub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        }))
                    }, t.trackGiftEvent = function() {
                        Object(B.b)({
                            action: B.a.GiftASub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.error ? null : this.getContent()
                }, t.prototype.renderIgnoreButton = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : u.createElement(v._4, {
                        key: "Ignore",
                        position: v._11.Absolute,
                        attachRight: !0,
                        attachBottom: !0,
                        margin: {
                            bottom: .5,
                            right: .5
                        }
                    }, u.createElement(S, {
                        targetDisplayName: this.props.data.targetUser.displayName,
                        targetLogin: this.props.targetLogin,
                        sendMessageToTMI: this.props.sendMessageToTMI
                    }))
                }, t.prototype.renderHideButton = function() {
                    return u.createElement(v._4, {
                        className: "viewer-card__hide",
                        position: v._11.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        margin: {
                            top: .5,
                            right: .5
                        },
                        "data-a-target": "viewer-card-close-button"
                    }, u.createElement(v.v, {
                        icon: v._18.Close,
                        onClick: this.props.hideViewerCard,
                        ariaLabel: Object(m.d)("Hide", "ViewerCard"),
                        overlay: !0
                    }))
                }, t.prototype.renderActions = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : u.createElement(v._27, {
                        className: "viewer-card__actions",
                        "data-test-selector": "viewer-card-actions",
                        attachBottom: !0
                    }, this.renderSocialActions(), this.renderChatActions())
                }, t.prototype.renderSocialActions = function() {
                    return u.createElement(v._27, {
                        display: v.P.Flex,
                        background: v.m.Base,
                        flexDirection: v.R.Row,
                        fullWidth: !0,
                        padding: {
                            y: 1,
                            left: 1,
                            right: .5
                        }
                    }, u.createElement(v._4, {
                        margin: {
                            right: .5
                        }
                    }, u.createElement(y, null, u.createElement(M.a, {
                        channelID: this.props.data.targetUser.id
                    }))), u.createElement(v._4, {
                        margin: {
                            right: .5
                        }
                    }, u.createElement(y, null, this.renderWhisperButton())), u.createElement(v._4, {
                        margin: {
                            right: .5
                        }
                    }, u.createElement(y, null, this.renderGiftSubscriptionButton())), u.createElement(v._4, {
                        flexGrow: 1,
                        textAlign: v._37.Right
                    }, u.createElement(y, null, u.createElement(h.a, {
                        key: "MoreOptionsButton"
                    }, u.createElement(v.v, {
                        ariaLabel: Object(m.d)("More options", "ViewerCard"),
                        icon: v._18.More,
                        "data-a-target": "viewer-card-more-button"
                    }), u.createElement(v.p, {
                        direction: v.q.BottomRight,
                        "data-a-target": "viewer-card-more-balloon"
                    }, u.createElement(v._4, {
                        padding: {
                            y: 1
                        }
                    }, u.createElement(v._2, {
                        onClick: this.handleReportUserClick,
                        "data-a-target": "viewer-card-report-button"
                    }, u.createElement(v._4, {
                        padding: {
                            x: 1
                        }
                    }, Object(m.d)("Report {user}", {
                        user: this.props.targetLogin
                    }, "ViewerCard")))))))))
                }, t.prototype.renderWhisperButton = function() {
                    if (!this.props.data.currentUser || !this.props.data.targetUser) return null;
                    var e = Object(U.a)(this.props.data.currentUser.id, this.props.data.targetUser.id);
                    return u.createElement(g.a, {
                        onClick: this.onWhisperButtonClick,
                        isPopout: this.props.isPopout,
                        threadID: e
                    })
                }, t.prototype.renderGiftSubscriptionButton = function() {
                    return !this.props.data.channelUser || !this.props.data.channelUser.subscriptionProducts || this.props.data.channelUser.subscriptionProducts.length < 1 ? null : u.createElement(x.a, {
                        onClick: this.toggleGiftPage,
                        subProductId: this.props.data.channelUser.subscriptionProducts[0].id,
                        giftRecipient: this.props.targetLogin
                    })
                }, t.prototype.renderSubGiftSelect = function() {
                    return u.createElement(v._4, null, u.createElement(j.a, {
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        isGift: !0
                    }), u.createElement(v._27, {
                        background: v.m.Base,
                        attachBottom: !0,
                        display: v.P.Flex,
                        flexDirection: v.R.Row,
                        justifyContent: v._3.Between,
                        fullWidth: !0,
                        flexGrow: 0,
                        padding: 2
                    }, u.createElement(F, {
                        onBack: this.toggleGiftPage,
                        channelDisplayName: this.props.data.channelUser.displayName,
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        giftRecipient: this.props.data.targetUser.login,
                        reportSubMenuAction: this.trackBuyGiftSubEvent
                    })))
                }, t.prototype.renderChatActions = function() {
                    var e = [];
                    return this.isModeratorOrHigher() && e.push(u.createElement(I, {
                        key: "ModActions",
                        channelID: this.props.data.channelUser.id,
                        userID: this.props.data.targetUser.id,
                        userLogin: this.props.targetLogin
                    })), this.isOwnerOrHigher() && e.push(u.createElement(R, {
                        key: "OwnerActions",
                        sendMessageToTMI: this.props.sendMessageToTMI,
                        targetLogin: this.props.targetLogin
                    })), e.length ? u.createElement(v._27, {
                        display: v.P.Flex,
                        background: v.m.Alt2,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, u.createElement(y, null, e)) : null
                }, t.prototype.isOwnerOrHigher = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && (e.currentUser.roles.isGlobalMod || e.currentUser.roles.isSiteAdmin || e.currentUser.roles.isStaff || this.isOwner())
                }, t.prototype.isModeratorOrHigher = function() {
                    return this.isOwnerOrHigher() || this.props.data.channelUser.self && this.props.data.channelUser.self.isModerator
                }, t.prototype.isOwner = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && e.currentUser.id === e.channelUser.id
                }, t.prototype.reportContentTypeFromSourceType = function(e) {
                    switch (e) {
                        case T.a.chat_message:
                            return L.a.Chat;
                        case T.a.room_message:
                            return L.a.Room;
                        case T.a.recent_raids:
                            return L.a.Raid;
                        case T.a.viewer_list:
                        default:
                            return L.a.User
                    }
                }, t = a.__decorate([Object(C.d)("ViewerCard"), Object(f.a)(P, {
                    options: function(e) {
                        return {
                            variables: {
                                targetLogin: e.targetLogin,
                                channelID: e.channelID
                            }
                        }
                    }
                })], t)
            }(u.Component),
            H = (n("PqoY"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        dragging: !1
                    }, t.onDragStart = function(e) {
                        t.cardContainerRef && t.layerRef && e.nativeEvent.which === i.Left && (t.layerRef.addEventListener("mousemove", t.onDrag), window.addEventListener("mouseup", t.onDragEnd), window.addEventListener("selectstart", t.cancelSelection), t.setState({
                            dragging: !0
                        }), t.initCardX = t.cardContainerRef.offsetLeft, t.initCardY = t.cardContainerRef.offsetTop, t.initMouseX = e.clientX, t.initMouseY = e.clientY)
                    }, t.onDrag = function(e) {
                        t.nextTop = t.initCardY + e.clientY - t.initMouseY, t.nextLeft = t.initCardX + e.clientX - t.initMouseX, t.rafHandle || (t.rafHandle = requestAnimationFrame(function() {
                            t.rafHandle = 0, t.cardContainerRef && (t.cardContainerRef.style.top = t.nextTop + "px", t.cardContainerRef.style.left = t.nextLeft + "px")
                        }))
                    }, t.onDragEnd = function() {
                        t.removeDragListeners(), t.setState({
                            dragging: !1
                        })
                    }, t.removeDragListeners = function() {
                        t.layerRef && t.layerRef.removeEventListener("mousemove", t.onDrag), window.removeEventListener("mouseup", t.onDragEnd), window.removeEventListener("selectstart", t.cancelSelection)
                    }, t.cancelSelection = function(e) {
                        e.preventDefault()
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.hideViewerCard(), this.rafHandle && cancelAnimationFrame(this.rafHandle), this.removeDragListeners()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.viewerCardOptions && e.viewerCardOptions && (e.viewerCardOptions.targetLogin === this.props.viewerCardOptions.targetLogin && e.viewerCardOptions.initialTopOffset === this.props.viewerCardOptions.initialTopOffset || this.cardContainerRef && (this.cardContainerRef.style.left = "0px"))
                }, t.prototype.render = function() {
                    var e = this,
                        t = {
                            "viewer-card-layer": !0,
                            "viewer-card-layer--dragging": this.state.dragging
                        },
                        n = {
                            "viewer-card-layer__draggable": !0,
                            "viewer-card-layer__draggable--dragging": this.state.dragging
                        },
                        i = null;
                    if (this.props.viewerCardOptions) {
                        var a = {};
                        if (this.layerRef) {
                            var r = this.layerRef.getBoundingClientRect();
                            a = {
                                top: Math.max(this.props.viewerCardOptions.initialTopOffset - r.top, 0) + "px"
                            }
                        }
                        i = u.createElement(v.Y, {
                            className: c(n),
                            position: v._11.Absolute
                        }, u.createElement("div", {
                            onMouseDown: this.onDragStart,
                            ref: function(t) {
                                e.cardContainerRef = t
                            },
                            style: a,
                            "data-a-target": "viewer-card-positioner"
                        }, u.createElement(V, {
                            channelID: this.props.channelID,
                            hideViewerCard: this.props.hideViewerCard,
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            sendMessageToTMI: this.props.onSendMessage,
                            showReportUserModal: this.props.showReportUserModal,
                            sourceID: this.props.viewerCardOptions.sourceID,
                            sourceType: this.props.viewerCardOptions.sourceType,
                            targetLogin: this.props.viewerCardOptions.targetLogin
                        })))
                    }
                    return u.createElement(v.Y, {
                        className: c(t),
                        fullHeight: !0,
                        fullWidth: !0,
                        position: v._11.Relative,
                        zIndex: v._53.Default
                    }, u.createElement("div", {
                        onMouseUp: this.onDragEnd,
                        ref: function(t) {
                            e.layerRef = t
                        }
                    }, i))
                }, t
            }(u.Component));
        var W = Object(r.b)(function(e) {
            return {
                viewerCardOptions: e.viewerCard.viewerCardOptions
            }
        }, function(e) {
            return Object(o.b)({
                hideViewerCard: l.c,
                showReportUserModal: function(e) {
                    var t = a.__rest(e, []);
                    return Object(s.d)(d.a, t)
                }
            }, e)
        })(H);
        n.d(t, "a", function() {
            return W
        })
    },
    ZoRy: function(e, t) {},
    aSvS: function(e, t, n) {
        "use strict";
        var i, a;
        n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return a
            }),
            function(e) {
                e.DismissToken = "token_dismissed", e.RedeemToken = "token_redeemed", e.RequestEligibility = "eligibility_requested", e.RequestToken = "token_requested"
            }(i || (i = {})),
            function(e) {
                e.Click = "clicked_manage_in_dashboards", e.Dismiss = "dismissed"
            }(a || (a = {}))
    },
    aUOx: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return {
                type: i.b.Info,
                id: Object(a.a)("info"),
                message: e
            }
        };
        var i = n("qkCi"),
            a = n("INp2")
    },
    annQ: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GetBitsButton_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 748
            }
        };
        i.loc.source = {
            body: '# Documentation about how to use GraphQL is located in the Data Access Guide:\n# https://git-aws.internal.justin.tv/pages/twilight/twilight-docs/docs/guides/data-access.html\n# Additionally use the GraphQL explorer (https://api.twitch.tv/gql/explore) to browse\n# available GraphQL data and construct your query.\n#import "twilight/features/bits/models/bits-offers-fragment.gql"\n#import "twilight/features/chat/models/cheer-fragment.gql"\nquery GetBitsButton_Bits($isLoggedIn: Boolean! $withChannel: Boolean! $login: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $login) @include(if: $withChannel) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};

        function r(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(r(n("OcEY").definitions)), i.definitions = i.definitions.concat(r(n("576g").definitions)), e.exports = i
    },
    aqNN: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Bits_BuyCard_Offers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 440
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-offers-fragment.gql"\nquery Bits_BuyCard_Offers($withChannel: Boolean! $isLoggedIn: Boolean! $channelLogin: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $channelLogin) @include(if: $withChannel) {\nid\ndisplayName\ncheer {\nid\nsettings {\ncheerMinimumBits\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("OcEY").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    ass3: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), t.c = function() {
            return {
                type: i
            }
        }, t.d = function(e, t, n, i) {
            void 0 === i && (i = 0);
            return {
                type: a,
                viewerCardOptions: {
                    initialTopOffset: i,
                    sourceID: n,
                    sourceType: t,
                    targetLogin: e
                }
            }
        };
        var i = "viewer-card.VIEWER_CARD_HIDDEN",
            a = "viewer-card.VIEWER_CARD_SHOWN"
    },
    bL99: function(e, t) {},
    bQ8d: function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (void 0 === t && (t = 0), t > e) {
                var n = t;
                t = e, e = n
            }
            return t + Math.floor(Math.random() * (e - t + 1))
        }
        t.a = i, t.b = function(e) {
            return e[i(e.length - 1)]
        }, t.c = function(e, t) {
            var n = 0,
                i = [];
            for (; n < e;) i.push(t(n)), n += 1;
            return i
        }
    },
    bgpf: function(e, t, n) {
        "use strict";
        var i, a, r;
        n.d(t, "c", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.NewChatter = "NEW_CHATTER"
            }(i || (i = {})),
            function(e) {
                e.Available = "AVAILABLE", e.Dismissed = "DISMISSED", e.Eligible = "ELIGIBLE", e.Redeemed = "REDEEMED"
            }(a || (a = {})),
            function(e) {
                e.TokenNotAvailable = "TOKEN_NOT_AVAILABLE", e.TokenNotFound = "TOKEN_NOT_FOUND", e.UserBanned = "USER_CHAT_BANNED", e.UserNotFollowing = "FOLLOWER_ONLY_MODE_ENFORCEMENT_FAILED", e.UserNotSubbed = "SUB_ONLY_MODE_ENFORCEMENT_FAILED", e.UserTimedOut = "USER_CHAT_TIMED_OUT"
            }(r || (r = {}))
    },
    bkpq: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = [],
                n = {};
            return e.forEach(function(e) {
                var s, l, d, c = e.tiers.map(function(e) {
                    return o(e)
                });
                "Cheer" === e.prefix && c.push((s = ["DARK", "LIGHT"], l = ["static", "animated"], d = [], [1, 1.5, 2, 3, 4].forEach(function(e) {
                    s.forEach(function(t) {
                        l.forEach(function(n) {
                            d.push({
                                url: r.a + "/cheer/" + t.toLowerCase() + "/" + n + "/100000/" + e + "." + ("static" === n ? "png" : "gif"),
                                isAnimated: "animated" === n,
                                theme: t,
                                dpiScale: e
                            })
                        })
                    })
                }), o({
                    id: "Cheer:100000",
                    bits: 1e5,
                    color: r.f[a.a.Yellow],
                    images: d
                }))), c.sort(function(e, t) {
                    return t.bits - e.bits
                });
                var u = i.__assign({}, e, {
                    indexedTiers: new Map(c.map(function(e) {
                        return [e.bits, e]
                    })),
                    orderedTiers: c
                });
                t.push(u), n[u.prefix.toLowerCase()] = u
            }), {
                indexedActions: n,
                orderedActions: t
            }
        }, t.b = function(e, t) {
            return {
                cursor: "" + e.rank,
                node: {
                    id: t + "_" + e.entry_key,
                    entryKey: e.entry_key,
                    rank: e.rank,
                    score: e.score,
                    __typename: "BitsLeaderboardItem"
                },
                __typename: "BitsLeaderboardItemEdge"
            }
        };
        var i = n("TToO"),
            a = n("I89S"),
            r = n("3iBR");

        function o(e) {
            var t = new Map,
                n = new Map,
                a = new Map,
                r = new Map;
            return e.images.forEach(function(e) {
                "LIGHT" === e.theme ? e.isAnimated ? n.set(e.dpiScale, e.url) : t.set(e.dpiScale, e.url) : e.isAnimated ? r.set(e.dpiScale, e.url) : a.set(e.dpiScale, e.url)
            }), i.__assign({
                indexedImages: {
                    LIGHT: {
                        static: t,
                        animated: n
                    },
                    DARK: {
                        static: a,
                        animated: r
                    }
                }
            }, e)
        }
    },
    cv4W: function(e, t, n) {
        e.exports = n.p + "assets/gift3-03f7dd6edab76b3567ff92bba447d5cb.png"
    },
    cxb0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "JoinRoomsButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 193
            }
        };
        n.loc.source = {
            body: "query JoinRoomsButton($channelID: ID! $userID: ID!) {\nuser(id: $channelID) {\nid\ndisplayName\nself {\nisChannelMember\n}\n}\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    cxe8: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_SharePurchase_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isCommerceRevShareEnabled"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "purchaseTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "asin"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "imageThumbnail"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "40"
                                                    }
                                                }],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteSets"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteSet"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "token"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "badges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "badge"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "quantity"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "inGameContents"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "imageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "30"
                                                            }
                                                        }],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 433
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery Chat_SharePurchase_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nsettings {\nisCommerceRevShareEnabled\n}\nself {\npurchaseTokens {\nid\ntitle\nasin\nimageThumbnail: imageURL(width: 40)\nimageURL\nemoteSets {\nid\nemoteSet {\nid\nemotes {\nid\ntoken\n}\n}\n}\nbadges {\nid\nbadge{\n...badge\n}\n}\nbits {\nid\nquantity\n}\ninGameContents {\nid\nimageURL(width: 30)\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    d7Cs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "LeaveRoomsPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "query LeaveRoomsPrompt($id: ID!) {\nuser(id: $id) {\nid\ndisplayName\nself {\nisChannelMember\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    dQj3: function(e, t, n) {
        "use strict";
        t.b = l, t.a = function(e, t, n) {
            if (!e.author) return null;
            var d = l(e.body.emotes),
                c = e.badges.reduce(function(e, t) {
                    return e[t.setID] = t.version, e
                }, {});
            return {
                type: r.b.Message,
                messageType: r.c.Post,
                id: e.id,
                badges: c,
                bits: e.bitsUsed,
                timestamp: 0,
                deleted: !1,
                user: i.__assign({
                    userID: e.author.id,
                    userLogin: e.author.login,
                    userType: a.a.User,
                    color: e.authorColor
                }, Object(s.a)(e.authorName, e.author.login)),
                messageParts: Object(o.f)(e.body.content, d, e.bitsUsed, t, n, e.authorName)
            }
        }, t.c = function(e) {
            if (null === e.tags || null === e.message || null === e.bits_used) return null;
            var t = "ChatMessage:" + e.tags.msg_id;
            return {
                __typename: "ChatMessage",
                "Symbol(id)": t,
                id: e.tags.msg_id,
                authorName: e.tags.display_name,
                authorColor: e.tags.color,
                author: {
                    __typename: "User",
                    "Symbol(id)": "User:" + e.user_id,
                    id: e.user_id,
                    login: e.username
                },
                body: {
                    __typename: "MessageBody",
                    "Symbol(id)": "$" + t + ".body",
                    content: e.message,
                    emotes: e.tags.emotes.map(function(e, n) {
                        return {
                            __typename: "EmbeddedEmote",
                            "Symbol(id)": t + ".body.emotes." + n,
                            emoteID: e.id.toString(),
                            from: e.start,
                            to: e.end,
                            setID: e.set
                        }
                    })
                },
                badges: e.tags.badges.map(function(e, n) {
                    return {
                        __typename: "Badge",
                        "Symbol(id)": t + ".badges." + n,
                        setID: e.badge_set_id,
                        version: e.badge_set_version
                    }
                }),
                bitsUsed: e.bits_used
            }
        };
        var i = n("TToO"),
            a = n("6Agf"),
            r = n("qkCi"),
            o = n("l21v"),
            s = n("e1CU");

        function l(e) {
            var t = [];
            return e.forEach(function(e) {
                t[e.from] = {
                    startIndex: e.from,
                    endIndex: e.to + 1,
                    data: {
                        images: {
                            themed: !1,
                            sources: {
                                "1x": Object(o.e)(e.emoteID, 1),
                                "2x": Object(o.e)(e.emoteID, 2),
                                "4x": Object(o.e)(e.emoteID, 4)
                            }
                        }
                    }
                }
            }), t
        }
    },
    dVd7: function(e, t) {},
    "e9/y": function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("GiK3"),
            o = n("6sO2"),
            s = n("yWCw"),
            l = n("zCIC"),
            d = n("SI0h"),
            c = n("RxMT"),
            u = n("4d+L"),
            m = n("2aoH"),
            p = n("iPhu"),
            h = n("Odds");
        n("7zg1");
        ! function(e) {
            e.DESC = "DESC", e.ASC = "ASC"
        }(i || (i = {}));
        var g = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = !1,
                    n = null,
                    i = this.props.channelLogin;
                if (this.props.error) n = r.createElement(s.a, {
                    message: Object(o.d)("Error loading Follow List", "ChannelFollowListing")
                });
                else if (this.props.loading || this.props.userExist) {
                    if (this.props.userExist)
                        if (this.props.followEdge && 0 === this.props.followEdge.length || !this.props.followEdge) n = r.createElement(h._4, {
                            margin: {
                                top: 5
                            },
                            display: h.P.Flex,
                            flexDirection: h.R.Row,
                            justifyContent: h._3.Center
                        }, r.createElement(h.O, {
                            type: h._41.H4,
                            color: h.J.Alt2,
                            italic: !0
                        }, Object(o.d)("No Users Found", "ChannelFollowListing")));
                        else {
                            var a = this.props.followEdge.map(function(t) {
                                if (!t || !t.node || !t.node.id) return null;
                                var n = {
                                        user: t.node
                                    },
                                    i = r.createElement(p.a, {
                                        id: t.node.id,
                                        showButtonsOnHover: !0,
                                        balloonDirection: h.q.Right
                                    });
                                if (e.props.currentUser) {
                                    var a = {
                                            user: {
                                                displayName: t.node.displayName,
                                                id: t.node.id,
                                                login: t.node.login,
                                                self: {
                                                    follower: {
                                                        disableNotifications: t.node.self && t.node.self.follower && t.node.self.follower.disableNotifications
                                                    }
                                                }
                                            },
                                            currentUser: {
                                                id: e.props.currentUser.id
                                            }
                                        },
                                        o = {
                                            currentUser: e.props.currentUser
                                        };
                                    i = r.createElement(p.a, {
                                        id: t.node.id,
                                        showButtonsOnHover: !0,
                                        userData: n,
                                        followData: a,
                                        friendsData: o,
                                        balloonDirection: h.q.Right
                                    })
                                }
                                return r.createElement(h._4, {
                                    key: t.node.id,
                                    margin: {
                                        bottom: 2
                                    }
                                }, i)
                            });
                            n = r.createElement(h._47, {
                                placeholderItems: 10,
                                center: !0,
                                gutterSize: h._49.Small,
                                childWidth: h._48.Large
                            }, a), t = this.props.hasNextPage
                        }
                } else n = r.createElement(s.a, {
                    message: Object(o.d)("User does not exist", "ChannelFollowListing")
                });
                return r.createElement(h._4, {
                    className: "channel-follow-listing",
                    display: h.P.Flex,
                    flexDirection: h.R.Column,
                    flexWrap: h.S.NoWrap,
                    fullHeight: !0,
                    fullWidth: !0
                }, r.createElement(m.a, null, r.createElement(d.a, {
                    currentPage: this.props.channelHeaderTab,
                    channelLogin: i
                })), r.createElement(h._4, {
                    display: h.P.Flex,
                    flexGrow: 1,
                    fullHeight: !0
                }, r.createElement(h._4, {
                    fullWidth: !0,
                    padding: {
                        x: 3,
                        y: 2
                    }
                }, n, r.createElement(l.a, {
                    loadMore: this.props.loadMore,
                    enabled: t && !this.props.loading,
                    pixelThreshold: 100
                }), this.props.loading && r.createElement(h._6, {
                    fillContent: !0
                })), r.createElement(c.b, null, r.createElement(h._27, {
                    className: "channel-follow-listing__right-column",
                    background: h.m.Alt2,
                    display: h.P.Flex,
                    flexGrow: 0,
                    flexShrink: 0,
                    overflow: h._7.Hidden,
                    flexDirection: h.R.Column,
                    flexWrap: h.S.NoWrap,
                    fullHeight: !0
                }, r.createElement(u.a, {
                    channelLogin: this.props.channelLogin
                })))))
            }, t
        }(r.Component);
        n.d(t, !1, function() {
            return 15
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return g
        })
    },
    e9ZN: function(e, t) {},
    eDxU: function(e, t) {},
    "eMi+": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsPinnedCheerV2_Leaderboards"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "leaderboard"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "10"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "leaderboardItem"
                                                },
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "secondsRemaining"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "leaderboard"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isEnabled"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "timePeriodType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsLeaderboardItem"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "rank"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entryKey"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 490
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-leaderboard-item-fragment.gql"\n#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery BitsPinnedCheerV2_Leaderboards($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\nleaderboard (first: 10) {\nid\n...leaderboardItem\nsecondsRemaining\n}\nsettings {\nleaderboard {\nisEnabled\ntimePeriodType\n}\nisRecentEnabled\nrecentTimeoutMs\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\n}\nself {\nbitsLeaderboardItem {\nid\nrank\nscore\nentryKey\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};

        function r(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(r(n("+po9").definitions)), i.definitions = i.definitions.concat(r(n("Mful").definitions)), e.exports = i
    },
    ebTC: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("V5M+"),
            o = n("Aj/L"),
            s = n("TToO"),
            l = n("GiK3"),
            d = n("6sO2"),
            c = n("J8WN"),
            u = n("+8VM"),
            m = n("7vx8"),
            p = n("HZww"),
            h = n("4Q9N"),
            g = n("Tt3k"),
            f = n("W6ca"),
            v = n("xgnX"),
            b = n("CSlQ"),
            k = n("Odds"),
            y = (n("+Aaf"), n("0H+u")),
            _ = ["image/*"],
            C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        statusMessage: null,
                        imageUpdated: !1,
                        loading: !1
                    }, t.currentImage = null, t.logger = d.j.withCategory("UserImageUploader"), t.onImageInputChange = function(e) {
                        var n;
                        if (null !== e) {
                            t.setState({
                                loading: !0
                            }), n = e[0];
                            var i = Object(g.a)(n),
                                a = (n.size / 1024 / 1024).toFixed(4);
                            parseInt(a, 10) > 10 ? t.setState({
                                statusMessage: v.b.BadSizeError
                            }) : Object(g.b)(n, function(e) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    var t, n, a, r, o = this;
                                    return s.__generator(this, function(s) {
                                        switch (s.label) {
                                            case 0:
                                                this.currentImage = e, s.label = 1;
                                            case 1:
                                                return s.trys.push([1, 3, , 4]), [4, Object(f.a)(this.props.userID, this.props.authToken, this.props.imageType, i)];
                                            case 2:
                                                return t = s.sent(), n = t.upload_url, a = t.upload_id, [3, 4];
                                            case 3:
                                                return r = s.sent(), this.logger.error(r, "Request for upload ID failed to get expected response from server."), this.setState({
                                                    statusMessage: v.b.UnexpectedError
                                                }), [2];
                                            case 4:
                                                return this.unsubscribe = d.k.subscribe({
                                                    topic: Object(p.i)(this.props.userID),
                                                    success: function() {
                                                        try {
                                                            Object(f.c)(n, o.currentImage)
                                                        } catch (e) {
                                                            o.logger.error(e, "Image upload failed."), o.unsubscribe(), o.setState({
                                                                statusMessage: v.b.UnexpectedError,
                                                                loading: !1
                                                            })
                                                        }
                                                        o.timeoutHandle = setTimeout(function() {
                                                            return o.handlePubSubTimeout()
                                                        }, 1e4)
                                                    },
                                                    failure: function() {
                                                        o.setState({
                                                            statusMessage: v.b.UnexpectedError,
                                                            loading: !1
                                                        })
                                                    },
                                                    onMessage: function(e) {
                                                        if (e.upload_id === a) {
                                                            clearTimeout(o.timeoutHandle);
                                                            var t = null;
                                                            e.status === v.a.Success ? t = v.b.Success : e.status === v.a.BadSize ? (t = v.b.BadSizeError, o.currentImage = null) : e.status === v.a.NonImage ? (t = v.b.NonImageError, o.currentImage = null) : e.status === v.a.WrongFormat ? (t = v.b.WrongFormatError, o.currentImage = null) : (t = v.b.UnexpectedError, o.currentImage = null), o.unsubscribe && o.unsubscribe(), o.setState({
                                                                statusMessage: t,
                                                                loading: !1,
                                                                imageUpdated: e.status === v.a.Success
                                                            })
                                                        }
                                                    }
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        } else t.setState({
                            statusMessage: v.b.ImageNotSelected
                        })
                    }, t.handlePubSubTimeout = function() {
                        t.unsubscribe(), t.setState({
                            statusMessage: v.b.TimeoutError
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    void 0 !== this.unsubscribe && this.unsubscribe(), this.timeoutHandle && clearTimeout(this.timeoutHandle)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this;
                    this.state.imageUpdated && setTimeout(function() {
                        e.props.data && e.props.data.refetch(), e.setState({
                            imageUpdated: !1
                        }), e.props.closeModal()
                    }, 1e3)
                }, t.prototype.render = function() {
                    var e = this.props.login;
                    this.props.displayName && (e = this.props.displayName);
                    var t = Object(d.d)("Editing profile banner for {userName}", {
                        userName: e
                    }, "UserImageUploader");
                    this.props.imageType === h.a.ChannelOfflineImage && (t = Object(d.d)("Editing video banner for {userName}", {
                        userName: e
                    }, "UserImageUploader"));
                    var n = null;
                    if (this.state.loading) n = l.createElement(k._4, {
                        className: "user-image-uploader__upload-svg--anim-fill",
                        position: k._11.Relative,
                        "data-test-selector": "loading-status"
                    }, l.createElement(k._17, {
                        asset: k._18.Upload,
                        type: k._19.Brand,
                        width: 99,
                        height: 76
                    }));
                    else {
                        var i = Object(d.d)("Recommended image size: 1200x380 and less than 10MB.", "UserImageUploader");
                        this.props.imageType === h.a.ChannelOfflineImage && (i = Object(d.d)("Recommended image size: 1920x1080 and less than 10MB.", "UserImageUploader")), n = l.createElement(k._4, null, l.createElement(k._4, {
                            className: "user-image-uploader__upload-info"
                        }, l.createElement(k._4, null, l.createElement(k._17, {
                            asset: k._18.Plus,
                            type: k._19.Alt2,
                            height: 20,
                            width: 20
                        })), l.createElement(k.O, {
                            type: k._41.H3,
                            color: k.J.Alt2,
                            fontSize: k.T.Size4
                        }, Object(d.d)("Upload a Photo", "User Image Uploader"))), l.createElement(k._4, {
                            className: "user-image-uploader__upload-recommendation",
                            position: k._11.Absolute,
                            textAlign: k._37.Left,
                            attachLeft: !0,
                            attachBottom: !0,
                            margin: {
                                left: 3,
                                bottom: 1
                            }
                        }, l.createElement(k.O, {
                            type: k._41.H6,
                            color: k.J.Alt2,
                            fontSize: k.T.Size8,
                            align: k._51.TextBottom
                        }, i)))
                    }
                    var a = null;
                    this.props.showCloser && (a = l.createElement(u.a, null));
                    var r = null;
                    if (null !== this.state.statusMessage) {
                        var o = Object(v.c)(this.state.statusMessage);
                        r = l.createElement(k._8, {
                            label: o.message,
                            type: o.type
                        })
                    }
                    return l.createElement(k._4, {
                        className: "user-image-uploader",
                        position: k._11.Relative,
                        fullHeight: !0
                    }, l.createElement(k._27, {
                        className: "user-image-uploader__background-container",
                        background: k.m.Base,
                        fullWidth: !0
                    }, l.createElement(k._4, {
                        padding: 2,
                        display: k.P.InlineBlock,
                        position: k._11.Relative,
                        textAlign: k._37.Center,
                        fullWidth: !0
                    }, l.createElement(k._27, {
                        borderBottom: !0,
                        margin: {
                            bottom: 2
                        }
                    }, l.createElement(k.O, {
                        type: k._41.H3,
                        fontSize: k.T.Size4
                    }, t)), l.createElement(k._4, {
                        className: "user-image-uploader__upload-container",
                        display: k.P.InlineBlock,
                        position: k._11.Relative,
                        textAlign: k._37.Center,
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(k._4, {
                        className: "user-image-uploader__upload",
                        display: k.P.InlineBlock,
                        position: k._11.Relative,
                        textAlign: k._37.Center
                    }, l.createElement(c.a, {
                        allowedFileTypes: _,
                        onFilesSubmitted: this.onImageInputChange
                    }, n))), l.createElement(k._27, {
                        "data-test-selector": "status-message",
                        fontSize: k.T.Size4,
                        position: k._11.Relative,
                        textAlign: k._37.Center,
                        className: "user-image-uploader__status-message"
                    }, r))), a)
                }, t = s.__decorate([Object(m.a)(y, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.login
                            }
                        }
                    }
                })], t)
            }(l.Component),
            S = Object(b.d)("User Image Upload")(C);
        var E = Object(i.b)(function(e) {
            return {
                authToken: Object(o.a)(e)
            }
        }, function(e, t) {
            return Object(a.b)({
                closeModal: function() {
                    return t.successCallback && t.successCallback(), Object(r.c)()
                }
            }, e)
        })(S);
        n.d(t, "a", function() {
            return E
        })
    },
    f1ZS: function(e, t) {},
    fHoP: function(e, t) {},
    fNhT: function(e, t) {},
    fbnZ: function(e, t) {},
    g7wA: function(e, t, n) {
        "use strict";
        t.h = function() {
            return i.createElement("span", {
                key: "thankyou"
            }, Object(a.d)("Thank you for your feedback!", "ChatLine"))
        }, t.k = function(e, t, n) {
            var a = null,
                r = e.reduce(function(r, o, l) {
                    switch (o.type) {
                        case g.a.Text:
                            var d = l > 0;
                            return r.concat(function(e, t, n, a, r) {
                                var o = [],
                                    s = "";
                                a && (s = s.concat(" "));
                                var l = e.content.split(/\s+/);
                                return l.forEach(function(e, a) {
                                    if ("" !== e) {
                                        var r = a < l.length - 1 ? e + " " : e;
                                        (t || n) && function(e, t, n) {
                                            var i = e.trim().toLowerCase();
                                            return t && i === t.toLowerCase() || n && i === n.toLowerCase()
                                        }(e, t, n) ? (o = (o = o.concat(s)).concat(i.createElement(f._4, {
                                            className: "chat-line__message--mention-recipient",
                                            display: f.P.InlineFlex,
                                            key: "" + e + a,
                                            "data-a-target": "chat-message-mention"
                                        }, r)), s = "") : s = s.concat(r)
                                    }
                                }), o = o.concat(s), i.createElement("span", {
                                    key: "chat-line__message-text-" + r,
                                    "data-a-target": "chat-message-text"
                                }, o)
                            }(o, t, n, d, l));
                        case g.a.Mention:
                            var c = "";
                            return function(e) {
                                return e.content && e.content.sender
                            }(o) && t && o.content.sender.toLowerCase() === t.toLowerCase() ? c = "chat-line__message--mention-sender" : function(e) {
                                return e.content && e.content.recipient
                            }(o) && t && o.content.recipient.toLowerCase() === t.toLowerCase() && (c = "chat-line__message--mention-recipient"), r.concat(i.createElement(f._4, {
                                className: c,
                                display: f.P.InlineFlex,
                                key: l,
                                "data-a-target": "chat-message-mention"
                            }, "@" + o.content.recipient));
                        case g.a.Link:
                            return r = r.concat(v(l, o)), e.length > l + 1 && e[l + 1].type === g.a.Link && r.push(" "), r;
                        case g.a.Emote:
                            return r = r.concat(i.createElement(u.a, {
                                key: l,
                                emote: o.content
                            })), e.length > l + 1 && e[l + 1].type === g.a.Emote && r.push(" "), r;
                        case g.a.ClipLink:
                            return a ? r.concat(v(l, o)) : (a = i.createElement(s.a, {
                                key: l
                            }, i.createElement(m.a, {
                                slug: o.content.slug
                            })), r);
                        case g.a.VideoLink:
                            return a ? r.concat(v(l, o)) : (a = i.createElement(p.a, {
                                key: l,
                                id: o.content.id,
                                url: o.content.url
                            }), r);
                        default:
                            return r.concat(i.createElement("span", {
                                key: l
                            }))
                    }
                }, []);
            a && (r = r.concat(a));
            return r
        }, t.l = function(e) {
            if (e.moderationType === h.e.Ban) return e.reason ? i.createElement("span", {
                className: "chat-line__moderation--ban-with-reason"
            }, Object(a.d)("{userLogin} has been banned. Reason: {reason}", {
                userLogin: e.userLogin,
                reason: e.reason
            }, "ChatLine")) : i.createElement("span", {
                className: "chat-line__moderation--ban"
            }, Object(a.d)("{userLogin} is now banned from this channel.", {
                userLogin: e.userLogin
            }, "ChatLine"));
            if (e.reason && e.duration) {
                var t = Object(a.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                    duration: e.duration,
                    reason: e.reason,
                    userLogin: e.userLogin
                }, "ChatLine");
                return i.createElement("span", {
                    className: "chat-line__moderation--timeout-with-reason"
                }, t)
            }
            if (e.duration) return i.createElement("span", {
                className: "chat-line__moderation--timeout"
            }, Object(a.d)("{userLogin} has been timed out for {duration} seconds.", {
                userLogin: e.userLogin,
                duration: e.duration
            }, "ChatLine"))
        }, t.v = b, t.a = y, t.b = _, t.s = function(e) {
            if (e.isPrime) return i.createElement("span", null, y(e.userLogin, b(e.channel)));
            return i.createElement("span", null, _(e.userLogin, e.tier))
        }, t.r = function(e) {
            if ("custom" === e.tier) return i.createElement("span", null, (t = e.userLogin, n = e.recipient, Object(a.d)("{userLogin} gifted a subscription to {recipient}!", {
                userLogin: t,
                recipient: n
            }, "ChatLine")));
            var t, n;
            return i.createElement("span", null, function(e, t, n) {
                var i = k(t);
                return Object(a.d)("{userLogin} gifted a {subTier} sub to {recipient}!", {
                    userLogin: e,
                    subTier: i,
                    recipient: n
                }, "ChatLine")
            }(e.userLogin, e.tier, e.recipient))
        }, t.d = function(e) {
            var t = e.daysLeft;
            0 === t && (t = e.hoursLeft);
            var n = {
                bitsTotal: i.createElement("strong", null, Object(c.e)(e.total, {
                    style: "currency",
                    currency: "USD"
                })),
                charityName: i.createElement("strong", null, e.charityName),
                learnMoreURL: i.createElement("a", {
                    href: e.learnMore,
                    target: "_blank"
                }, e.learnMore),
                hashtag: i.createElement("strong", null, e.hashtag),
                timeRemaining: Object(c.e)(t)
            };
            return i.createElement("span", null, 0 === e.daysLeft ? (r = n, Object(a.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more hours to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                bitsTotal: r.bitsTotal,
                charityName: r.charityName,
                timeRemaining: r.timeRemaining,
                hashtag: r.hashtag,
                learnMoreURL: r.learnMoreURL
            }, "ChatLine")) : function(e) {
                return Object(a.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more days to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                    bitsTotal: e.bitsTotal,
                    charityName: e.charityName,
                    timeRemaining: e.timeRemaining,
                    hashtag: e.hashtag,
                    learnMoreURL: e.learnMoreURL
                }, "ChatLine")
            }(n));
            var r
        }, t.p = function(e) {
            var t = e.enabled ? Object(a.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                length: e.length
            }, "ChatLine") : Object(a.d)("This room is no longer in slow mode.", "ChatLine");
            return i.createElement("span", null, t)
        }, t.m = function(e) {
            return i.createElement("span", null, e.message)
        }, t.j = function(e) {
            return i.createElement("span", null, e.message)
        }, t.o = function(e) {
            var t;
            if (e.length > 0) {
                var n = e.join(", ");
                t = Object(a.d)("The moderators of this channel are: {moderatorList}", {
                    moderatorList: n
                }, "ChatLine")
            } else t = Object(a.d)("There are no moderators of this channel.", "ChatLine");
            return i.createElement("span", null, t)
        }, t.i = function(e) {
            if (e.enabled) {
                var t = 0 === e.length ? Object(a.d)("This room is in followers-only mode.", "ChatLine") : Object(a.d)("This room is now in {length} followers-only mode.", {
                    length: Object(l.a)(60 * e.length)
                }, "ChatLine");
                return i.createElement("span", null, t)
            }
            return i.createElement("span", null, Object(a.d)("This room is no longer in followers-only mode.", "ChatLine"))
        }, t.g = function(e) {
            return e.enabled ? i.createElement("span", null, Object(a.d)("This room is now in emote-only mode.", "ChatLine")) : i.createElement("span", null, Object(a.d)("This room is no longer in emote-only mode.", "ChatLine"))
        }, t.q = function(e) {
            var t = e.enabled ? Object(a.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(a.d)("This room is no longer in subscriber-only mode.", "ChatLine");
            return i.createElement("span", null, t)
        }, t.e = function() {
            return i.createElement("span", null, Object(a.d)("Chat was cleared by a moderator", "ChatLine"))
        }, t.c = C, t.t = function(e) {
            return i.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, C(new Date(e)))
        }, t.u = function(e) {
            return i.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, function(e, t) {
                void 0 === t && (t = {});
                var n = a.o.intl.getLanguageCode() || "en";
                return Intl.DateTimeFormat(n, t).format(e)
            }(new Date(e), {
                hour: "numeric",
                minute: "numeric"
            }))
        }, t.w = function() {
            return i.createElement("span", null, Object(a.d)("The raid has been cancelled.", "RaidCancelMessage"))
        }, t.f = function(e) {
            return i.createElement(f._27, {
                borderMarked: !0,
                borderBottom: !1
            }, i.createElement(f._4, {
                className: "chat-line__status",
                display: f.P.Flex,
                alignItems: f.c.Center,
                flexWrap: f.S.NoWrap
            }, i.createElement(f.Y, {
                flexShrink: 0
            }, i.createElement("img", {
                src: o.a,
                height: "32",
                width: "32"
            })), i.createElement(f._4, {
                margin: {
                    left: .5
                }
            }, Object(a.d)("<x:boldpurple>{userName}</x:boldpurple>'s Cheer unlocked gifts for <x:bold>{numberOfGifts, number} others</x:bold>!", {
                userName: e.message.user.userDisplayName,
                numberOfGifts: e.selectedCount,
                "x:boldpurple": function(e) {
                    return i.createElement(f.O, {
                        type: f._41.Span,
                        bold: !0,
                        color: f.J.Link
                    }, e)
                },
                "x:bold": function(e) {
                    return i.createElement("strong", null, e)
                }
            }, "Crates"))), i.createElement(f._27, {
                className: "chat-line__status",
                background: f.m.Alt2
            }, i.createElement(f.O, {
                bold: !0,
                color: f.J.Link
            }, Object(a.d)("Cheer 250+ to unlock gifts for others in chat!", "Crates"))))
        }, t.n = function(e, t, n) {
            if (0 === n) return Object(a.d)("<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}!</x:bold>", {
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return i.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage");
            return Object(a.d)("{numCrates, plural, one {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened a <x:bold>Twitch Crate!</x:bold>} other {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened # <x:bold>Twitch Crates!</x:bold>}}", {
                numCrates: n,
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return i.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage")
        };
        var i = n("GiK3"),
            a = (n.n(i), n("6sO2")),
            r = n("cv4W"),
            o = n.n(r),
            s = n("o5l+"),
            l = n("FsFC"),
            d = n("yDzg"),
            c = n("J4ib"),
            u = n("hXeO"),
            m = n("5vPJ"),
            p = n("kBA+"),
            h = n("qkCi"),
            g = n("mwvJ"),
            f = n("Odds");

        function v(e, t) {
            return i.createElement("a", {
                key: e,
                className: "chat-line__message--link",
                href: t.content.url,
                target: "_blank",
                rel: "noreferrer noopener"
            }, t.content.displayText)
        }

        function b(e) {
            var t = Object(d.a)("https://twitch.amazon.com/prime", {
                ref: "subscriptionMessage",
                channel: e
            });
            return i.createElement("a", {
                className: "chat-line__subscribe--prime",
                href: t,
                target: "_blank",
                rel: "noopener"
            }, Object(a.d)("Twitch Prime", "ChatLine"))
        }

        function k(e) {
            switch (e) {
                case "Tier 2":
                    return Object(a.d)("Tier 2", "ChatLine");
                case "Tier 3":
                    return Object(a.d)("Tier 3", "ChatLine");
                default:
                    return Object(a.d)("Tier 1", "ChatLine")
            }
        }

        function y(e, t) {
            return Object(a.d)("{userLogin} just subscribed with {service}!", {
                userLogin: e,
                service: t
            }, "ChatLine")
        }

        function _(e, t) {
            var n = k(t);
            return Object(a.d)("{userLogin} just subscribed with a {subTier} sub!", {
                userLogin: e,
                subTier: n
            }, "ChatLine")
        }

        function C(e) {
            var t = e.getHours() % 12;
            0 === t && (t = 12);
            var n = e.getMinutes(),
                i = n.toString();
            return n < 10 && (i = "0" + i), t + ":" + i
        }
    },
    gGMi: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.Everyone = "EVERYONE", e.Moderator = "MODERATOR", e.Subscriber = "SUBSCRIBER"
            }(i || (i = {}));
        var a, r = ((a = {})[i.Everyone] = "Everyone", a[i.Moderator] = "Mods", a[i.Subscriber] = "Subs", a)
    },
    go0B: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomSelector"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channelRooms"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "topic"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPreviewable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumAllowedRole"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isArchived"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isMuted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isUnread"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unreadMentionCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 280
            }
        };
        n.loc.source = {
            body: "query RoomSelector ($login: String!) {\nuser(login: $login) {\nid\nchannelRooms {\nname\nid\ntopic\nisPreviewable\nminimumAllowedRole\nself {\nisArchived\nisMuted\nisUnread\nunreadMentionCount\n}\n}\nhosting {\nid\n}\nself {\nisChannelMember\nisModerator\nsubscriptionBenefit {\nid\n}\n}\nstream {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    gv4B: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomPane"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topic"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastReadAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMentionCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "broadcastBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "cheer"
                                        },
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isLoggedIn"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isModerator"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "channelID"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "setID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "version"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 581
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n#import "twilight/features/chat/models/cheer-fragment.gql"\nquery RoomPane($roomID: ID! $isLoggedIn: Boolean! $userID: ID $channelID: ID!) {\nbadges {\n...badge\n}\nroom(id: $roomID) {\nid\ntopic\nminimumAllowedRole\nself {\nlastReadAt\nunreadMentionCount\n}\nowner {\nid\ndisplayName\nlogin\nbroadcastBadges {\n...badge\n}\n...cheer\nself @include(if: $isLoggedIn) {\nisModerator\n}\n}\n}\nuser(id: $userID) @include(if: $isLoggedIn) {\nid\nlogin\ndisplayBadges(channelID: $channelID) {\nsetID\nversion\n}\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};

        function r(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(r(n("QU+n").definitions)), i.definitions = i.definitions.concat(r(n("576g").definitions)), e.exports = i
    },
    gwjw: function(e, t) {},
    hXeO: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("GiK3"),
            a = (n.n(i), n("8RKZ")),
            r = function(e) {
                var t, n = e.emote,
                    r = n.alt || "";
                return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = i.createElement("strong", {
                    className: "chat-line__message--cheer-amount",
                    style: {
                        color: n.cheerColor
                    }
                }, n.cheerAmount)), i.createElement(a.a, {
                    alt: r,
                    cheerText: t,
                    className: "chat-line__message--emote",
                    srcKey: "1x",
                    srcSet: n.images
                })
            }
    },
    hcyD: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return d
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("l7/s"),
            s = (n.n(o), n("QFW6")),
            l = this,
            d = function(e) {
                return i.__awaiter(l, void 0, void 0, function() {
                    var t, n, l, d;
                    return i.__generator(this, function(c) {
                        switch (c.label) {
                            case 0:
                                t = null, c.label = 1;
                            case 1:
                                return c.trys.push([1, 3, , 4]), [4, a.o.apollo.client.query({
                                    query: o,
                                    variables: {
                                        id: e.channelID
                                    }
                                })];
                            case 2:
                                return t = c.sent(), [3, 4];
                            case 3:
                                return n = c.sent(), a.j.error(n, "ChatEvent query failed."), [3, 4];
                            case 4:
                                return t && t.data || a.j.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), l = t && t.data && t.data.user || null, d = i.__assign({}, Object(s.a)(e), {
                                    broadcast_id: a.n.getVideoPlayerTrackingData().broadcastID,
                                    channel_id: e.channelID,
                                    game: l && l.stream && l.stream.game && l.stream.game.name,
                                    live: !!(l && l.stream && l.stream.id.length > 0),
                                    partner: l && l.isPartner || !1,
                                    play_session_id: a.n.getVideoPlayerTrackingData().playSessionID,
                                    player: e.player,
                                    ritual_nca: e.fromNewChatterRitual || !1,
                                    sub_only_mode: e.subOnlyMode
                                }), a.n.track(r.SpadeEventType.Chat, d), [2]
                        }
                    })
                })
            }
    },
    hmtx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "MuteButton_MuteRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomViewInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoomView"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roomView"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 117
            }
        };
        n.loc.source = {
            body: "mutation MuteButton_MuteRoom($input: UpdateRoomViewInput!) {\nupdateRoomView(input: $input) {\nroomView {\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "i/jv": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelFollows"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "order"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "SortOrder"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follows"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "order"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "order"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "activity"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "Playing"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "Streaming"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "stream"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "game"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "id"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "name"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "InlineFragment",
                                                                typeCondition: {
                                                                    kind: "NamedType",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "Watching"
                                                                    }
                                                                },
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "user"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "login"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "availability"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "bannerImageURL"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "description"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "self"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "follower"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "disableNotifications"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 560
            }
        };
        n.loc.source = {
            body: "query ChannelFollows($login: String $limit: Int $cursor: Cursor $order: SortOrder) {\nuser(login: $login) {\nid\nfollows(first: $limit after: $cursor order: $order) {\nedges {\ncursor\nnode {\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\n}\n}\n}\navailability\nbannerImageURL\ndescription\ndisplayName\nid\nlogin\nprofileImageURL(width: 70)\nself {\nfollower {\ndisableNotifications\n}\n}\n}\n}\npageInfo {\nhasNextPage\n}\n}\n}\ncurrentUser {\nid\nfriends {\nedges {\nnode {\nid\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    iMOk: function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            a = n("6sO2"),
            r = n("NXs7"),
            o = n("3iBR"),
            s = n("iydZ"),
            l = n("CFVp"),
            d = n("qe65");
        n("1pvm");

        function c(e) {
            var t, n = Object(a.d)("{bitsAmount} Bits", {
                bitsAmount: e.count.toString()
            }, "Bits--BitsCount");
            if (e.withImage) {
                var c = e.bitsConfig.indexedActions[o.g];
                c || (c = Object(l.b)());
                var u = c.orderedTiers.find(function(t) {
                    return t.bits <= e.count
                });
                if (u) {
                    var m = Object(s.b)(u);
                    return void 0 !== e.themeOverride && (e.themeOverride === r.a.Light ? m.dark = m.light : m.light = m.dark), t = i.createElement(d.a, {
                        className: "bits-count--img",
                        sources: m
                    }), i.createElement("strong", {
                        className: "bits-count",
                        "data-a-target": "bits-count"
                    }, i.createElement("span", null, t, " ", e.withText ? n : ""))
                }
            }
            return i.createElement("strong", {
                className: "bits-count",
                "data-a-target": "bits-count"
            }, i.createElement("span", null, n))
        }
        n.d(t, "a", function() {
            return c
        })
    },
    iWdz: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsCard_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "totalBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nextBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "progress"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "current"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "next"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "teams"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 381
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery BitsCard_Bits($name: ID!) {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\nuser(id: $name) {\nid\ndisplayName\ncheer {\nid\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nrecentMinimumBits\nevent\n}\n}\nself {\nbitsBadge {\nid\ntotalBits\nnextBits\nprogress\ncurrent {\n...badge\n}\nnext {\n...badge\n}\n}\n}\ntournament {\nid\nteams {\nid\nname\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    imaO: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RedeemNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "redeemRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 182
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RedeemNewChatterToken($input: RedeemRitualTokenInput!) {\nredeemRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    iqz2: function(e, t) {},
    "j/3B": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualToken"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "RitualToken"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "expiresAt"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "status"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 64
            }
        };
        n.loc.source = {
            body: "fragment ritualToken on RitualToken {\nid\nexpiresAt\nstatus\ntype\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jF7o: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (!e) return void i.j.warn("[onPopupClose] Attempted to observe a window that failed to open.");
            var n = setInterval(function() {
                var i = !1,
                    a = !1;
                try {
                    i = e.closed, a = !!e.success
                } catch (e) {}
                if (i || a) {
                    t(a);
                    try {
                        e.close()
                    } catch (e) {}
                    clearInterval(n)
                }
            }, 500)
        };
        var i = n("6sO2")
    },
    jML9: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 43
            }
        };
        n.loc.source = {
            body: "query RaidNotification_User {\nuser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jPU6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jxGs: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "e", function() {
            return o
        }), n.d(t, "c", function() {
            return s
        });
        var i = "AD",
            a = "BUNDLE",
            r = "first_time_purchase",
            o = "single_purchase",
            s = "black_friday_2017"
    },
    "kBA+": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("SZoP"),
            l = n("GxDs"),
            d = n("Odds"),
            c = n("s+oZ"),
            u = {
                ERROR: "video-chat-card-error"
            },
            m = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.video,
                        n = e.error,
                        i = e.loading;
                    if (n || t && !t.owner) return a.createElement(l.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "VideoChatCard"),
                            description: Object(r.d)("We couldn't find that video", "VideoChatCard")
                        }
                    });
                    if (i || !t) return a.createElement(l.a, null);
                    var o = a.createElement(d.O, null, Object(r.c)(new Date(t.publishedAt), "medium"), a.createElement("span", null, " · "), Object(s.a)(t.owner.login, t.owner.displayName));
                    return a.createElement(l.a, {
                        data: {
                            title: t.title,
                            description: o,
                            previewImageURL: t.previewThumbnailURL,
                            contentURL: this.props.url
                        }
                    })
                }, t
            }(a.Component),
            p = function(e) {
                return {
                    variables: {
                        videoID: e.id
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: "cache-first"
                }
            },
            h = Object(o.a)(c, {
                options: p
            })(m);
        n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return h
        })
    },
    kOMe: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_ChannelHeader"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPartner"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follows"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 290
            }
        };
        n.loc.source = {
            body: "query ChannelPage_ChannelHeader($login: String!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\nroles {\nisPartner\n}\nstream {\nid\n}\nvideos {\ntotalCount\n}\nfollowers {\ntotalCount\n}\nfollows {\ntotalCount\n}\ncheer {\nid\n}\n}\ncurrentUser {\nid\nroles {\nisStaff\nisSiteAdmin\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    kjfG: function(e, t) {},
    kpSd: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("RweG"),
            d = n("aMxy"),
            c = n("HZww"),
            u = n("pexS"),
            m = n("R9op"),
            p = n("DtWM"),
            h = n("zCIC"),
            g = n("4Q5V"),
            f = n("CSlQ"),
            v = n("Odds"),
            b = (n("rMeN"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            k = 10,
            y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type) && (t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= k ? t.setState({
                            isAutoScrolling: !0
                        }) : t.setState({
                            isAutoScrolling: !1
                        }))
                    }, t.handleResize = function() {
                        t.state.isAutoScrolling && t.scrollToBottom()
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom)
                    }, t.scrollToBottom = function() {
                        t.scroll && t.scroll.scrollContent && (t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight)
                    }, t.reportChatRenderSent = function() {
                        t.props.chatRenderSentEvent && t.props.latencyTracking.reportCustomEvent(t.props.chatRenderSentEvent)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    b.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    b.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this,
                        t = this.props.messages.map(function(t) {
                            return a.createElement(g.a, {
                                badgeSets: e.props.badgeSets,
                                channelID: e.props.channelID,
                                isCurrentUserModerator: e.props.isCurrentUserModerator,
                                message: t,
                                key: t.id,
                                showAutoModActions: e.props.showAutoModActions,
                                showModerationActions: e.props.showModerationActions,
                                showModerationIcons: e.props.showModerationIcons && !e.props.isEmbedded,
                                showTimestamps: e.props.showTimestamps,
                                currentUserDisplayName: e.props.currentUserDisplayName,
                                currentUserLogin: e.props.currentUserLogin,
                                onPushMessage: e.props.onPushMessage,
                                doesNotUpdate: !0,
                                onRenderReportChatSent: e.reportChatRenderSent
                            })
                        });
                    return a.createElement(v._4, {
                        refDelegate: this.props.containerRef,
                        className: "chat-list",
                        display: v.P.Flex,
                        flexDirection: v.R.Column,
                        flexWrap: v.S.NoWrap,
                        overflow: v._7.Hidden,
                        flexGrow: 1
                    }, a.createElement(p.a, {
                        onResize: this.handleResize
                    }), a.createElement(v.Y, {
                        flexGrow: 1
                    }, a.createElement(h.b, {
                        className: "chat-list__lines",
                        scrollRef: this.saveScrollRef,
                        "data-a-target": "chat-scroller"
                    }, a.createElement(v._4, {
                        flexGrow: 1,
                        fullHeight: !0,
                        padding: {
                            bottom: 1
                        }
                    }, t))), a.createElement(v._4, {
                        className: "chat-list__more-messages-placeholder",
                        position: v._11.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : a.createElement(v.Y, {
                        display: v.P.Flex,
                        justifyContent: v._3.Center,
                        alignItems: v.c.Center,
                        position: v._11.Absolute,
                        padding: .5,
                        attachBottom: !0,
                        fullWidth: !0
                    }, a.createElement("div", {
                        className: "chat-list__more-messages",
                        onClick: this.handleClickMoreMessages
                    }, Object(s.d)("More messages below.", "ChatList")))
                }, t = i.__decorate([Object(f.d)("ChatListPresentation", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component),
            _ = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t, n, i = e.pubsub.messages.chatRichEmbedInfo;
                    i && this.props.pubsub.messages.chatRichEmbedInfo !== i && s.o.apollo.client.writeQuery({
                        query: u,
                        variables: {
                            slug: i.data.twitch_metadata.clip_metadata.slug
                        },
                        data: (t = i, n = t.data.twitch_metadata.clip_metadata, {
                            clip: {
                                slug: n.slug,
                                id: n.id,
                                url: t.data.request_url,
                                title: t.data.title,
                                thumbnailURL: t.data.thumbnail_url,
                                curator: n.curator_id ? {
                                    displayName: t.data.author_name,
                                    id: n.curator_id,
                                    __typename: "User"
                                } : null,
                                broadcaster: n.channel_display_name ? {
                                    displayName: n.channel_display_name,
                                    id: n.broadcaster_id,
                                    __typename: "User"
                                } : null,
                                __typename: "Clip"
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return a.createElement(y, {
                        channelID: this.props.channelID,
                        badgeSets: this.props.badgeSets,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        channelLogin: this.props.channelLogin,
                        onPushMessage: this.props.onPushMessage,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        messages: this.props.messages,
                        showAutoModActions: this.props.showAutoModActions,
                        showModerationActions: this.props.showModerationActions,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        currentUserLogin: this.props.currentUserLogin,
                        containerRef: this.props.containerRef,
                        chatRenderSentEvent: this.props.chatRenderSentEvent
                    })
                }, t
            }(a.Component);
        var C, S = Object(o.d)(Object(r.b)(function(e, t) {
            return {
                chatRenderSentEvent: Object(m.c)(e),
                messages: Object(m.a)(e, t.channelLogin),
                showAutoModActions: e.chat.showAutoModActions,
                showModerationActions: e.chat.showModerationActions,
                showModerationIcons: e.chat.showModIcons,
                showTimestamps: e.chat.showTimestamps
            }
        }), Object(l.a)([{
            skip: function(e) {
                return !e.channelID
            },
            topic: function(e) {
                return e.channelID ? Object(c.o)(e.channelID) : ""
            },
            mapMessageTypesToProps: (C = {}, C[d.PubsubMessageType.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", C)
        }]))(_);
        n.d(t, !1, function() {
            return _
        }), n.d(t, "a", function() {
            return S
        })
    },
    kvxA: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomDetails"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topic"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "query RoomDetails($id: ID!) {\nroom(id: $id) {\nid\nname\ntopic\nisPreviewable\nminimumAllowedRole\nowner {\nid\nself {\nisChannelMember\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    l669: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UnbanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 132
            }
        };
        n.loc.source = {
            body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "l7/s": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_ChatEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 116
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    lGVF: function(e, t) {},
    "mR/9": function(e, t) {},
    mbxv: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("+V/3"),
            o = n("Odds"),
            s = (n("2IkU"), n("6sO2")),
            l = n("vH/s"),
            d = function(e) {
                var t = Date.now() / 1e3;
                e.badge_type = e.badge_type.toLowerCase().replace(/( |\s)/g, "_"), s.o.tracking.track(l.SpadeEventType.ChatBadgeClick, Object.assign({
                    client_time: t
                }, e))
            };
        n.d(t, "a", function() {
            return c
        });
        var c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isHovering: !1
                }, t.onMouseOver = function() {
                    t.setState({
                        isHovering: !0
                    })
                }, t.onMouseOut = function() {
                    t.setState({
                        isHovering: !1
                    })
                }, t.onBadgeClickHandler = function() {
                    d({
                        badge_type: t.props.badge.title,
                        badge_url_target: t.targetURL
                    })
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this.props.badge,
                    t = e.title,
                    n = e.image1x,
                    i = e.image2x,
                    r = e.image4x,
                    s = a.createElement("img", {
                        alt: t,
                        className: "chat-badge",
                        src: n,
                        srcSet: n + " 1x, " + i + " 2x, " + r + " 4x",
                        onMouseOver: this.onMouseOver,
                        onMouseOut: this.onMouseOut
                    });
                return this.targetURL = this.getTargetURL(), "" !== this.targetURL && (s = a.createElement("a", {
                    href: this.targetURL,
                    onClick: this.onBadgeClickHandler,
                    target: "_blank",
                    "data-a-target": "chat-badge"
                }, s)), this.state.isHovering ? a.createElement(o._44, {
                    align: o._45.Left,
                    "data-a-target": "chat-badge",
                    display: o.P.Inline,
                    key: n,
                    label: t,
                    offsetY: "0.9rem"
                }, s) : s
            }, t.prototype.getTargetURL = function() {
                var e = this.props.badge;
                switch (e.clickAction) {
                    case r.d:
                        return e.clickURL;
                    case r.b:
                        return e.channelName ? this.getSubscriberLink() : "";
                    case r.c:
                        return "https://www.twitch.tv/products/turbo?ref=chat_badge";
                    default:
                        return ""
                }
            }, t.prototype.getSubscriberLink = function() {
                return "https://www.twitch.tv/" + this.props.badge.channelName + "/subscribe?ref=in_chat_subscriber_link"
            }, t
        }(a.Component)
    },
    mmly: function(e, t) {},
    nhCy: function(e, t) {},
    nmDn: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserProfileEditor"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 104
            }
        };
        n.loc.source = {
            body: "query UserProfileEditor($login: String!) {\nuser(login: $login) {\nid\nlogin\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    nrdj: function(e, t, n) {
        "use strict";
        var i, a = n("HW6M"),
            r = n("GiK3"),
            o = n("6sO2"),
            s = n("iydZ"),
            l = n("CFVp"),
            d = n("qe65"),
            c = n("Odds");
        n("PPK2");
        ! function(e) {
            e[e.Large = 4] = "Large", e[e.Medium = 3] = "Medium", e[e.Small = 2] = "Small", e[e.ExtraSmall = 1.5] = "ExtraSmall", e[e.ExtremelySmall = 1] = "ExtremelySmall"
        }(i || (i = {}));
        var u = function(e) {
            var t = e.bitsConfig.indexedActions[e.prefix.toLowerCase()];
            t || (t = Object(l.b)());
            var n = t.orderedTiers.find(function(t) {
                return t.bits <= (e.amount || 100)
            });
            n || (n = t.orderedTiers[0]);
            var u = e.display === c.P.Inline || e.display === c.P.InlineFlex || e.display === c.P.InlineBlock,
                m = null,
                p = a("cheermote-for-amount__cheer-amount", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer-amount--medium": e.size === i.Medium
                }, {
                    "cheermote-for-amount__cheer-amount--small": e.size === i.Small || e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-amount--extremely-small": e.size === i.ExtremelySmall
                });
            if (e.amount && e.showAmount) {
                var h = e.formattedNumber ? Object(o.e)(e.amount) : e.amount;
                m = r.createElement(c.Y, {
                    padding: e.size === i.Small ? 0 : void 0,
                    textAlign: e.size === i.Small ? c._37.Center : void 0
                }, r.createElement("strong", {
                    className: p,
                    style: {
                        color: n.color
                    }
                }, h))
            }
            var g = a("cheermote-for-amount__cheer-image", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer--inline": u
                }, {
                    "cheermote-for-amount__cheer-image--small": e.size === i.Small
                }, {
                    "cheermote-for-amount__cheer-image--extra-small": e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-image--extremely-small": e.size === i.ExtremelySmall
                }),
                f = r.createElement(d.a, {
                    className: g,
                    sources: Object(s.b)(n, e.size || i.Large, e.animated)
                });
            return e.showImage || (f = null), r.createElement(c.Y, {
                className: "cheermote-for-amount",
                alignItems: e.alignItems,
                display: e.display
            }, r.createElement("span", null, f, m))
        };
        n.d(t, "a", function() {
            return u
        }), n.d(t, "b", function() {
            return i
        })
    },
    "pV+t": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 62
            }
        };
        n.loc.source = {
            body: "query ChatUser($login: String!) {\nuser(login: $login) {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pe3h: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomPickerOption"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isUnread"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMentionCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sendMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 313
            }
        };
        n.loc.source = {
            body: "query RoomPickerOption ($channelID: ID! $userID: ID! $roomID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\nroom(id: $roomID) {\nid\nisPreviewable\nminimumAllowedRole\nowner {\nid\nself {\nisChannelMember\n}\n}\nself {\nisMuted\nisUnread\nunreadMentionCount\npermissions {\nsendMessages\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pexS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsChatCard_Clip"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "slug"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clip"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thumbnailURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "curator"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcaster"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "query ClipsChatCard_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nthumbnailURL\ntitle\nslug\nurl\ncurator {\nid\ndisplayName\n}\nbroadcaster {\nid\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pg5l: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 236
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_CurrentUser($channelLogin: String!) {\ncurrentUser {\nid\nlogin\ndisplayName\nchatColor\n}\nuser(login: $channelLogin) {\nid\nself {\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "q+qZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "CreateRoomButton_CreateRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maxLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 131
            }
        };
        n.loc.source = {
            body: "mutation CreateRoomButton_CreateRoom($input: CreateRoomInput!) {\ncreateRoom(input: $input) {\nerror {\ncode\nminLength\nmaxLength\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    q4rf: function(e, t) {},
    q8Cw: function(e, t) {},
    qDcU: function(e, t) {},
    qkCi: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "e", function() {
            return r
        }), n.d(t, "a", function() {
            return o
        });
        var i, a, r, o, s = n("aMxy");
        n.o(s, "ModerationActions") && n.d(t, "d", function() {
                return s.ModerationActions
            }),
            function(e) {
                e[e.Message = 0] = "Message", e[e.Moderation = 1] = "Moderation", e[e.ModerationAction = 2] = "ModerationAction", e[e.TargetedModerationAction = 3] = "TargetedModerationAction", e[e.AutoMod = 4] = "AutoMod", e[e.Connected = 5] = "Connected", e[e.Disconnected = 6] = "Disconnected", e[e.Reconnect = 7] = "Reconnect", e[e.Hosting = 8] = "Hosting", e[e.Unhost = 9] = "Unhost", e[e.Hosted = 10] = "Hosted", e[e.Subscription = 11] = "Subscription", e[e.Resubscription = 12] = "Resubscription", e[e.SubGift = 13] = "SubGift", e[e.Clear = 14] = "Clear", e[e.SubscriberOnlyMode = 15] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 16] = "FollowerOnlyMode", e[e.SlowMode = 17] = "SlowMode", e[e.EmoteOnlyMode = 18] = "EmoteOnlyMode", e[e.RoomMods = 19] = "RoomMods", e[e.RoomState = 20] = "RoomState", e[e.Raid = 21] = "Raid", e[e.Unraid = 22] = "Unraid", e[e.Ritual = 23] = "Ritual", e[e.Notice = 24] = "Notice", e[e.Info = 25] = "Info", e[e.BadgesUpdated = 26] = "BadgesUpdated", e[e.Purchase = 27] = "Purchase", e[e.BitsCharity = 28] = "BitsCharity", e[e.CrateGift = 29] = "CrateGift"
            }(i || (i = {})),
            function(e) {
                e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention"
            }(a || (a = {})),
            function(e) {
                e[e.Ban = 0] = "Ban", e[e.Timeout = 1] = "Timeout"
            }(r || (r = {})),
            function(e) {
                e[e.MessageRejectedPrompt = 0] = "MessageRejectedPrompt", e[e.MessageRejected = 1] = "MessageRejected", e[e.MessageAllowed = 2] = "MessageAllowed", e[e.MessageDenied = 3] = "MessageDenied"
            }(o || (o = {}))
    },
    rIzn: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i = n("6sO2"),
            a = function() {
                return i.l.get("ritualsFeatureFlagOverride", i.b.get("viewer_milestones_enabled", !1))
            }
    },
    rMeN: function(e, t) {},
    "s+oZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "VideoChatCard_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "previewThumbnailURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "90"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "51"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "publishedAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 162
            }
        };
        n.loc.source = {
            body: "query VideoChatCard_Video($videoID: ID!) {\nvideo(id: $videoID) {\nid\ntitle\npreviewThumbnailURL(width: 90 height: 51)\npublishedAt\nowner {\nid\nlogin\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    sgUC: function(e, t) {},
    ssrl: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "NewChatterRitual_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ritualTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "ritualToken"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 167
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nquery NewChatterRitual_Channel($id: ID!) {\nchannel: user(id: $id) {\nid\nself {\nritualTokens {\n...ritualToken\n}\n}\nstream {\nid\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    tQTt: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "MuteButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 106
            }
        };
        n.loc.source = {
            body: "query MuteButton($id: ID!) {\nroom(id: $id) {\nid\nowner {\nid\nself {\nisChannelMember\n}\n}\nself {\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    thJT: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RequestNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RequestRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RequestNewChatterToken($input: RequestRitualTokenInput!) {\nrequestRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    tjbt: function(e, t, n) {
        "use strict";
        (function(e) {
            n.d(t, "a", function() {
                return R
            });
            var i = n("TToO"),
                a = n("GiK3"),
                r = (n.n(a), n("3zLD")),
                o = (n.n(r), n("RH2O")),
                s = n("6sO2"),
                l = n("7vx8"),
                d = n("RweG"),
                c = n("WIs4"),
                u = n("aMxy"),
                m = n("oIkB"),
                p = n("HZww"),
                h = n("Aj/L"),
                g = n("aUOx"),
                f = n("QCOJ"),
                v = n("rIzn"),
                b = n("hcyD"),
                k = n("KfLc"),
                y = n("yqxY"),
                _ = n("Tur5"),
                C = n("ssrl"),
                S = (n.n(C), n("Ti/Y")),
                E = (n.n(S), n("imaO")),
                N = (n.n(E), n("thJT")),
                w = (n.n(N), 3e5),
                D = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            closedByError: !1,
                            isLive: !1
                        }, t.eligibilityTimeouts = {}, t.expirationTimeouts = {}, t.getBannerMessage = function() {
                            return Object(s.d)("Click an emote to say hello!", "NewChatterRitual")
                        }, t.getLiveStatus = function(e) {
                            var t = e.pubsub.messages.streamDown ? e.pubsub.messages.streamDown.server_time : 0,
                                n = e.pubsub.messages.streamUp ? e.pubsub.messages.streamUp.server_time : 0;
                            return t || n ? n > t : e.data && e.data.channel && !!e.data.channel.stream.id || !1
                        }, t.setEligibilityTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), i = 0, a = Object.keys(t.eligibilityTimeouts); i < a.length; i++) {
                                var r = a[i];
                                n.has(r) || (clearTimeout(t.eligibilityTimeouts[r]), delete t.eligibilityTimeouts[r])
                            }
                            n.forEach(function(e) {
                                t.eligibilityTimeouts[e] || (t.eligibilityTimeouts[e] = setTimeout(function() {
                                    delete t.eligibilityTimeouts[e], t.isEligible = !0, t.state.isLive && t.requestRitualToken()
                                }, w))
                            })
                        }, t.requestRitualToken = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            Object(k.e)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), e = i.__assign({}, Object(m.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            })), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.requestToken(e)];
                                        case 2:
                                            return n.sent(), this.isEligible = !1, [3, 4];
                                        case 3:
                                            return t = n.sent(), s.j.error(t, "Failed to request new chatter ritual token."), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.setExpirationTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), i = 0, a = Object.keys(t.expirationTimeouts); i < a.length; i++) {
                                var r = a[i];
                                n.has(r) || (clearTimeout(t.expirationTimeouts[r]), delete t.expirationTimeouts[r])
                            }
                            e.forEach(function(e) {
                                if (!t.expirationTimeouts[e.id] && e.expiresAt && new Date(e.expiresAt).valueOf() > Date.now()) {
                                    var n = new Date(e.expiresAt).valueOf() - Date.now();
                                    t.expirationTimeouts[e.id] = setTimeout(t.expireRitualToken.bind(e.id), n)
                                }
                            })
                        }, t.expireRitualToken = function(e) {
                            delete t.expirationTimeouts[e];
                            Object(m.d)(C, {
                                id: t.props.channelID
                            }, function(t) {
                                return t.channel && t.channel.self && t.channel.self.ritualTokens && (t.channel.self.ritualTokens = t.channel.self.ritualTokens.filter(function(t) {
                                    return t.id === e
                                })), t
                            })
                        }, t.redeemRitualToken = function(e, n) {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var t, a, r;
                                return i.__generator(this, function(o) {
                                    switch (o.label) {
                                        case 0:
                                            Object(b.a)({
                                                channelID: this.props.channelID,
                                                channelLogin: this.props.channelLogin,
                                                isHostMode: this.props.isHostMode,
                                                fromNewChatterRitual: !0,
                                                subOnlyMode: this.props.isSubsOnlyModeEnabled,
                                                player: this.props.isEmbedded || this.props.isPopout ? f.a.Embed : f.a.Web
                                            }), Object(k.d)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID,
                                                userMessage: n
                                            }), t = i.__assign({}, Object(m.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter,
                                                messageText: n
                                            }), {
                                                optimisticResponse: {
                                                    redeemRitualToken: {
                                                        __typename: "RedeemRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Redeemed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), a = null, o.label = 1;
                                        case 1:
                                            return o.trys.push([1, 3, , 4]), [4, this.props.redeemToken(t)];
                                        case 2:
                                            return a = o.sent(), [3, 4];
                                        case 3:
                                            return r = o.sent(), s.j.error(r, "Failed to redeem new chatter ritual."), this.handleGenericError(), [2];
                                        case 4:
                                            if (a.data.redeemRitualToken.error) switch (a.data.redeemRitualToken.error.code) {
                                                case _.RitualTokenMutationErrors.UserBanned:
                                                case _.RitualTokenMutationErrors.UserNotFollowing:
                                                case _.RitualTokenMutationErrors.UserNotSubbed:
                                                case _.RitualTokenMutationErrors.UserTimedOut:
                                                    return this.props.onSendMessage(n), this.setState({
                                                        closedByError: !0
                                                    }), [2];
                                                default:
                                                    return this.handleGenericError(), [2]
                                            }
                                            return a.data.redeemRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.dismissRitualToken = function(e) {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var t, n, a;
                                return i.__generator(this, function(r) {
                                    switch (r.label) {
                                        case 0:
                                            Object(k.a)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), t = i.__assign({}, Object(m.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            }), {
                                                optimisticResponse: {
                                                    dismissRitualToken: {
                                                        __typename: "DismissRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Dismissed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), n = null, r.label = 1;
                                        case 1:
                                            return r.trys.push([1, 3, , 4]), [4, this.props.dismissToken(t)];
                                        case 2:
                                            return n = r.sent(), [3, 4];
                                        case 3:
                                            return a = r.sent(), s.j.error(a, "Failed to redeem new chatter ritual."), [3, 4];
                                        case 4:
                                            return n && n.data.dismissRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.handleGenericError = function() {
                            t.props.onPushMessage(Object(g.a)(Object(s.d)("Something went wrong.", "NewChatterRitual"))), t.setState({
                                closedByError: !0
                            })
                        }, t.clearAllTimers = function() {
                            for (var e = 0, n = Object.keys(t.eligibilityTimeouts); e < n.length; e++) {
                                var i = n[e];
                                clearTimeout(t.eligibilityTimeouts[i])
                            }
                            t.eligibilityTimeouts = {};
                            for (var a = 0, r = Object.keys(t.expirationTimeouts); a < r.length; a++) {
                                i = r[a];
                                clearTimeout(t.expirationTimeouts[i])
                            }
                            t.expirationTimeouts = {}
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        this.props.data && this.props.data.loading || !e.data || !e.data.loading || Object(k.b)({
                            channelID: this.props.channelID
                        });
                        var t = this.getLiveStatus(e);
                        if (this.state.isLive !== t && (this.setState({
                                isLive: t
                            }), t && this.isEligible && this.requestRitualToken()), e.data && e.data.channel && e.data.channel.self && e.data.channel.self.ritualTokens) {
                            var n = e.data.channel.self.ritualTokens;
                            this.setEligibilityTimeouts(n.filter(function(e) {
                                return e.status === _.RitualTokenStatus.Eligible
                            })), this.setExpirationTimeouts(n.filter(function(e) {
                                return !!e.expiresAt
                            }))
                        } else this.clearAllTimers()
                    }, t.prototype.componentWillUnmount = function() {
                        this.clearAllTimers()
                    }, t.prototype.render = function() {
                        return this.props.data && this.props.data.channel ? this.state.closedByError || !this.state.isLive ? null : a.createElement(y.a, {
                            bannerMessage: this.getBannerMessage(),
                            onRitualDismissed: this.dismissRitualToken,
                            onRitualRedeemed: this.redeemRitualToken,
                            ritualTokens: this.props.data.channel.self && this.props.data.channel.self.ritualTokens ? this.props.data.channel.self.ritualTokens : []
                        }) : null
                    }, t
                }(a.Component);

            function O(e) {
                return !e.firstPageLoaded || !Object(v.a)() || !e.isLoggedIn || e.isEmbedded || e.isPopout
            }
            var I, R = Object(r.compose)(Object(o.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isLoggedIn: Object(h.d)(e),
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode
                }
            }, null), Object(l.a)(C, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: O
            }), Object(c.a)(function(t) {
                return {
                    query: C,
                    variables: {
                        id: t.channelID
                    },
                    topic: Object(p.o)(t.channelID),
                    type: u.PubsubMessageType.UpdatedChannelChatProperty,
                    mutator: function(n, i) {
                        return n.data.is_rituals_enabled ? e(function() {
                            t.data && t.data.refetch && t.data.refetch()
                        }) : i.channel && i.channel.self && (i.channel.self.ritualTokens = []), i
                    },
                    skip: O(t)
                }
            }), Object(d.a)([{
                topic: function(e) {
                    return Object(p.x)(e.channelID)
                },
                mapMessageTypesToProps: (I = {}, I[u.PubsubMessageType.ChannelStreamUp] = "streamUp", I[u.PubsubMessageType.ChannelStreamDown] = "streamDown", I),
                skip: O
            }]), Object(l.a)(S, {
                name: "dismissToken"
            }), Object(l.a)(E, {
                name: "redeemToken"
            }), Object(l.a)(N, {
                name: "requestToken"
            }))(D)
        }).call(t, n("162o").setImmediate)
    },
    uLsu: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("3zLD"),
            o = n("6sO2"),
            s = n("1F7R"),
            l = n("7vx8"),
            d = n("u8SD"),
            c = n("Kxgf"),
            u = n("djIP"),
            m = n("OLl6"),
            p = n("pV+t"),
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getInvalidUserMessage = function() {
                        return Object(o.d)("No user matching that login.", "IgnoreCommandHandler")
                    }, t.blockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("You cannot ignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: Object(m.a)(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.blockUserMutation(e, u.b.Other, u.a.Chat, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(o.d)("Unable to ignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(o.d)("User successfully ignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("Please specify a user to ignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t.unblockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("You cannot unignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: Object(m.a)(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.unblockUserMutation(e, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(o.d)("Unable to unignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(o.d)("User successfully unignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("Please specify a user to unignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, a.createElement(s.a, {
                        command: "ignore",
                        handler: this.blockUser
                    }), a.createElement(s.a, {
                        command: "unignore",
                        handler: this.unblockUser
                    }))
                }, t
            }(a.Component),
            g = Object(r.compose)(Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.currentUserLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.currentUserLogin
                }
            }), Object(c.a)(), Object(d.a)())(h);
        n.d(t, "a", function() {
            return g
        })
    },
    v2Uk: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualsEnabled"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "settings"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isRitualsEnabled"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isRitualsWhitelisted"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "fragment ritualsEnabled on User {\nid\nsettings {\nisRitualsEnabled\nisRitualsWhitelisted\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    v4vD: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomSettings"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isModerator"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "modes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 262
            }
        };
        n.loc.source = {
            body: "query RoomSettings($roomID: ID! $userID: ID $isLoggedIn: Boolean!) {\nroom(id: $roomID) {\nid\nowner {\nid\nlogin\nself {\nisModerator\n}\n}\nmodes {\nslowModeDurationSeconds\n}\n}\nuser(id: $userID) @include(if: $isLoggedIn) {\nid\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vDGQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), t.d = function(e) {
            if (!e.action || !e.userId) return;
            var t = {
                location: s.PageviewLocation.Channel,
                action: e.action,
                target: e.target,
                type: e.type,
                channel_id: e.channelId,
                reward_id: e.rewardID,
                user_id: e.userId,
                time: Date.now()
            };
            o.o.tracking.track(s.SpadeEventType.CrateNotificationAction, t)
        };
        var i, a, r, o = n("6sO2"),
            s = n("vH/s");
        ! function(e) {
            e.Close = "close", e.DontShowThis = "dont_show_this", e.LearnMore = "learn_more", e.OpenLater = "open_later", e.OpenNow = "open_now", e.Timeout = "timeout", e.TryBeta = "try_beta", e.View = "view"
        }(i || (i = {})),
        function(e) {
            e.Inventory = "inventory", e.OpenCrate = "open_crate"
        }(a || (a = {})),
        function(e) {
            e.Ftue = "ftue", e.ReceiveCrate = "receive_crate", e.ReceiveGift = "receive_giveaway_item", e.BitsIntro = "bits_intro"
        }(r || (r = {}))
    },
    vKYs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BlockedUsers"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 61
            }
        };
        n.loc.source = {
            body: "query BlockedUsers {\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vLl9: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 256
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatList_Badges($channelLogin: String!) {\nbadges {\n...badge\n}\nuser(login: $channelLogin) {\nid\nbroadcastBadges {\n...badge\n}\nself {\nselectedBadge {\n...badge\n}\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    vSU7: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UpdateChatColor"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateChatColorInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateChatColor"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 112
            }
        };
        n.loc.source = {
            body: "mutation UpdateChatColor($input: UpdateChatColorInput!){\nupdateChatColor(input: $input) {\nuser {\nchatColor\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vh75: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return i
        }), n.d(t, "e", function() {
            return a
        }), n.d(t, "f", function() {
            return r
        }), n.d(t, "g", function() {
            return o
        }), n.d(t, "k", function() {
            return s
        }), n.d(t, "h", function() {
            return l
        }), n.d(t, "i", function() {
            return d
        }), n.d(t, "j", function() {
            return c
        }), n.d(t, "l", function() {
            return u
        }), n.d(t, "c", function() {
            return m
        }), n.d(t, "b", function() {
            return p
        }), n.d(t, "n", function() {
            return h
        }), n.d(t, "m", function() {
            return g
        }), n.d(t, "p", function() {
            return f
        }), n.d(t, "o", function() {
            return v
        }), n.d(t, "t", function() {
            return b
        }), n.d(t, "s", function() {
            return k
        }), n.d(t, "v", function() {
            return y
        }), n.d(t, "u", function() {
            return _
        }), n.d(t, "x", function() {
            return C
        }), n.d(t, "w", function() {
            return S
        }), n.d(t, "a", function() {
            return E
        }), n.d(t, "q", function() {
            return N
        }), n.d(t, "r", function() {
            return w
        }), t.R = function(e, t) {
            return {
                type: u,
                channel: e,
                messages: t
            }
        }, t.B = function() {
            return {
                type: a
            }
        }, t.P = function() {
            return {
                type: C
            }
        }, t.I = function() {
            return {
                type: S
            }
        }, t.T = function() {
            return {
                type: r
            }
        }, t.Q = function() {
            return {
                type: i
            }
        }, t.L = function() {
            return {
                type: m
            }
        }, t.E = function() {
            return {
                type: p
            }
        }, t.M = function() {
            return {
                type: h
            }
        }, t.F = function() {
            return {
                type: g
            }
        }, t.K = function() {
            return {
                type: f
            }
        }, t.D = function() {
            return {
                type: v
            }
        }, t.J = function() {
            return {
                type: s
            }
        }, t.A = function(e, t) {
            return {
                type: c,
                channelLogin: e,
                duration: t
            }
        }, t.z = function(e) {
            return {
                type: d,
                duration: e
            }
        }, t.C = function() {
            return {
                type: l
            }
        }, t.N = function() {
            return {
                type: b
            }
        }, t.G = function() {
            return {
                type: k
            }
        }, t.O = function() {
            return {
                type: y
            }
        }, t.H = function() {
            return {
                type: _
            }
        }, t.y = function(e, t) {
            return {
                type: E,
                command: e.toLowerCase(),
                handler: t
            }
        }, t.S = function(e) {
            return {
                type: N,
                command: e.toLowerCase()
            }
        }, t.U = function(e) {
            return {
                type: w,
                customEvent: e
            }
        };
        var i = "chat.CHAT_HIDDEN",
            a = "chat.CHAT_RESET",
            r = "chat.CHAT_SHOWN",
            o = "chat.EMOTE_SETS_UPDATED",
            s = "chat.FOLLOWER_MODE_ENABLED",
            l = "chat.FOLLOWER_MODE_DISABLED",
            d = "chat.FOLLOWER_MODE_DURATION_CHANGED",
            c = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
            u = "chat.MESSAGES_UPDATED",
            m = "chat.AUTOMOD_ACTIONS_ENABLED",
            p = "chat.AUTOMOD_ACTIONS_DISABLED",
            h = "chat.MODERATION_ACTIONS_ENABLED",
            g = "chat.MODERATION_ACTIONS_DISABLED",
            f = "chat.MOD_ICONS_ENABLED",
            v = "chat.MOD_ICONS_DISABLED",
            b = "chat.SLOW_MODE_ENABLED",
            k = "chat.SLOW_MODE_DISABLED",
            y = "chat.SUBS_ONLY_MODE_ENABLED",
            _ = "chat.SUBS_ONLY_MODE_DISABLED",
            C = "chat.TIMESTAMPS_ENABLED",
            S = "chat.TIMESTAMPS_DISABLED",
            E = "chat.ADD_COMMAND",
            N = "chat.REMOVE_COMMAND",
            w = "chat.RENDER_SENT_CHAT_MESSAGE"
    },
    w0qa: function(e, t) {},
    weaG: function(e, t) {},
    x583: function(e, t) {},
    x8iQ: function(e, t) {},
    x9n8: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("V5M+"),
            o = n("Aj/L"),
            s = n("TToO"),
            l = n("HW6M"),
            d = n("GiK3"),
            c = n("6sO2"),
            u = n("J8WN"),
            m = n("+8VM"),
            p = n("7vx8"),
            h = n("puy8"),
            g = n("HZww"),
            f = n("Odds"),
            v = (n("weaG"), function(e) {
                var t = {
                    "default-avatar__selected": e.selected,
                    "default-avatar": !0
                };
                return d.createElement(f._4, {
                    padding: {
                        bottom: 1
                    }
                }, d.createElement("div", {
                    onClick: function() {
                        e.onSelect(e.index)
                    },
                    "aria-label": Object(c.d)("Click to select Default Avatar Number {index, number}", {
                        index: e.index
                    }, "Default Avatar")
                }, d.createElement(f._27, {
                    fullHeight: !0,
                    fullWidth: !0,
                    position: f._11.Relative,
                    className: l(t)
                }, d.createElement("img", {
                    alt: Object(c.d)("Default Avatar Number {index, number}", {
                        index: e.index
                    }, "Default Avatar"),
                    src: e.imageSrc
                }))))
            }),
            b = n("4Q9N"),
            k = n("Tt3k"),
            y = n("W6ca"),
            _ = n("xgnX"),
            C = n("CSlQ"),
            S = (n("AL3x"), n("nmDn")),
            E = ["image/*"],
            N = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        statusMessage: null,
                        imagePreviewURL: "",
                        profileUpdated: !1,
                        currentImageHasTallAspectRatio: !1,
                        imageFormat: ""
                    }, t.currentImage = null, t.logger = c.j.withCategory("ProfileImagePicker"), t.onImageInputChange = function(e) {
                        var n;
                        if (null !== e) {
                            n = e[0];
                            var i = Object(k.a)(n),
                                a = (n.size / 1024 / 1024).toFixed(4);
                            parseInt(a, 10) > 10 ? t.setState({
                                statusMessage: _.b.BadSizeError
                            }) : (t.setState({
                                selectedImageIndex: void 0,
                                imagePreviewURL: "",
                                imageFormat: "",
                                currentImageHasTallAspectRatio: !1
                            }), Object(k.b)(n, function(e) {
                                t.currentImage = e, t.setState({
                                    statusMessage: null
                                })
                            }, function(e) {
                                var n = new Image,
                                    a = !1;
                                n.onload = function() {
                                    n.width < n.height && (a = !0), t.setState({
                                        currentImageHasTallAspectRatio: a
                                    })
                                }, n.src = e, t.setState({
                                    imagePreviewURL: e,
                                    imageFormat: i
                                })
                            }))
                        } else t.setState({
                            statusMessage: _.b.ImageNotSelected
                        })
                    }, t.onUpdateButtonClick = function(e) {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var t, n, i, a, r = this;
                            return s.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        if (e.preventDefault(), void 0 !== this.state.selectedImageIndex) return this.setDefaultAvatar(), [2];
                                        if (!this.currentImage) return this.setState({
                                            statusMessage: _.b.ImageNotSelected
                                        }), [2];
                                        this.setState({
                                            statusMessage: _.b.Uploading
                                        }), o.label = 1;
                                    case 1:
                                        return o.trys.push([1, 3, , 4]), [4, Object(y.a)(this.props.userID, this.props.authToken, b.a.ProfileImage, this.state.imageFormat)];
                                    case 2:
                                        return t = o.sent(), n = t.upload_url, i = t.upload_id, [3, 4];
                                    case 3:
                                        return a = o.sent(), this.logger.error(a, "Request for upload ID failed to get expected response from server."), this.setState({
                                            statusMessage: _.b.UnexpectedError
                                        }), [2];
                                    case 4:
                                        return this.unsubscribe = c.k.subscribe({
                                            topic: Object(g.i)(this.props.userID),
                                            success: function() {
                                                try {
                                                    Object(y.c)(n, r.currentImage)
                                                } catch (e) {
                                                    r.logger.error(e, "Profile Image upload failed."), r.unsubscribe(), r.setState({
                                                        statusMessage: _.b.UnexpectedError,
                                                        selectedImageIndex: void 0,
                                                        imagePreviewURL: "",
                                                        imageFormat: "",
                                                        currentImageHasTallAspectRatio: !1
                                                    })
                                                }
                                                r.timeoutHandle = setTimeout(function() {
                                                    return r.handlePubSubTimeout()
                                                }, 1e4)
                                            },
                                            failure: function() {
                                                r.setState({
                                                    statusMessage: _.b.UnexpectedError,
                                                    selectedImageIndex: void 0,
                                                    imagePreviewURL: "",
                                                    currentImageHasTallAspectRatio: !1
                                                })
                                            },
                                            onMessage: function(e) {
                                                if (e.upload_id === i) {
                                                    clearTimeout(r.timeoutHandle);
                                                    var t = null;
                                                    t = e.status === _.a.Success ? _.b.Success : e.status === _.a.BadSize ? _.b.BadSizeError : e.status === _.a.NonImage ? _.b.NonImageError : e.status === _.a.WrongFormat ? _.b.WrongFormatError : _.b.UnexpectedError, r.unsubscribe && r.unsubscribe(), r.setState({
                                                        statusMessage: t
                                                    }), r.state.statusMessage === _.b.Success ? r.setState({
                                                        profileUpdated: !0
                                                    }) : (r.setState({
                                                        profileUpdated: !1,
                                                        imagePreviewURL: "",
                                                        imageFormat: ""
                                                    }), r.currentImage = null)
                                                }
                                            }
                                        }), [2]
                                }
                            })
                        })
                    }, t.onDefaultImageSelected = function(e) {
                        t.setState({
                            selectedImageIndex: e,
                            imagePreviewURL: Object(h.a)(h.b[e], 300)
                        })
                    }, t.handlePubSubTimeout = function() {
                        t.unsubscribe(), t.setState({
                            statusMessage: _.b.TimeoutError
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    void 0 !== this.unsubscribe && this.unsubscribe(), this.timeoutHandle && clearTimeout(this.timeoutHandle)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this;
                    this.state.profileUpdated && setTimeout(function() {
                        e.props.data && e.props.data.refetch(), e.props.closeModal()
                    }, 1e3)
                }, t.prototype.render = function() {
                    var e = this,
                        t = h.b.map(function(t, n) {
                            return d.createElement(v, {
                                key: t.id,
                                imageSrc: Object(h.a)(t, 300),
                                index: n,
                                onSelect: e.onDefaultImageSelected,
                                selected: e.state.selectedImageIndex === n
                            })
                        }),
                        n = null;
                    if ("" !== this.state.imagePreviewURL) {
                        var i = {
                            "profile-edit__image-preview": !0,
                            "profile-edit__image-preview-tall": this.state.currentImageHasTallAspectRatio
                        };
                        n = d.createElement(f._4, {
                            className: l(i),
                            "data-test-selector": "preview-image",
                            position: f._11.Relative
                        }, d.createElement("img", {
                            src: "" + this.state.imagePreviewURL
                        }))
                    }
                    var a = null;
                    "" === this.state.imagePreviewURL && (a = d.createElement(f._4, {
                        className: "profile-edit__upload-info"
                    }, d.createElement(f._4, null, d.createElement(f._17, {
                        asset: f._18.Plus,
                        type: f._19.Alt2,
                        height: 20,
                        width: 20
                    })), d.createElement(f.O, {
                        type: f._41.H3,
                        color: f.J.Alt2,
                        fontSize: f.T.Size4
                    }, Object(c.d)("Upload a Photo", "Profile Edit"))));
                    var r = null;
                    this.props.showCloser && (r = d.createElement(m.a, null));
                    var o = null;
                    if (null !== this.state.statusMessage) {
                        var s = Object(_.c)(this.state.statusMessage),
                            p = s.message,
                            g = s.type;
                        o = d.createElement(f._8, {
                            label: p,
                            type: g
                        })
                    }
                    var b = this.props.login;
                    return this.props.displayName && (b = this.props.displayName), d.createElement(f._4, {
                        className: "profile-edit",
                        position: f._11.Relative,
                        fullHeight: !0
                    }, d.createElement(f._27, {
                        className: "profile-edit__background-container",
                        background: f.m.Base,
                        fullWidth: !0
                    }, d.createElement(f._4, {
                        padding: 2,
                        display: f.P.InlineBlock,
                        position: f._11.Relative,
                        textAlign: f._37.Center,
                        fullWidth: !0
                    }, d.createElement(f._27, {
                        textAlign: f._37.Left,
                        borderBottom: !0,
                        padding: {
                            bottom: 1
                        },
                        margin: {
                            bottom: 2
                        }
                    }, d.createElement(f.O, {
                        type: f._41.H3,
                        color: f.J.Alt2,
                        fontSize: f.T.Size4
                    }, Object(c.d)("Edit Profile Picture for {userName}", {
                        userName: b
                    }, "Profile Edit"), " ")), d.createElement(f._4, {
                        className: "profile-edit__upload-container",
                        display: f.P.InlineBlock,
                        position: f._11.Relative,
                        textAlign: f._37.Center,
                        margin: {
                            bottom: 1
                        }
                    }, d.createElement(f._4, {
                        className: "profile-edit__upload",
                        display: f.P.InlineBlock,
                        position: f._11.Relative,
                        textAlign: f._37.Center
                    }, d.createElement(u.a, {
                        allowedFileTypes: E,
                        onFilesSubmitted: this.onImageInputChange
                    }, a), n)), d.createElement(f._27, {
                        "data-test-selector": "status-message",
                        fontSize: f.T.Size4,
                        position: f._11.Relative,
                        textAlign: f._37.Center,
                        className: "profile-edit__status-message"
                    }, o), d.createElement(f._27, {
                        borderBottom: !0,
                        padding: {
                            bottom: .5
                        },
                        margin: {
                            bottom: 2
                        }
                    }, d.createElement(f._4, {
                        textAlign: f._37.Left,
                        margin: {
                            bottom: 1
                        }
                    }, d.createElement(f.O, {
                        type: f._41.H3,
                        color: f.J.Alt2,
                        fontSize: f.T.Size5
                    }, Object(c.d)("Or select one of these", "Profile Edit"))), d.createElement(f._47, {
                        childWidth: f._48.ExtraSmall,
                        gutterSize: f._49.ExtraSmall,
                        placeholderItems: 3
                    }, t)), d.createElement(f._4, {
                        display: f.P.Flex,
                        justifyContent: f._3.Center
                    }, d.createElement(f.u, {
                        "data-test-selector": "update-button",
                        onClick: this.onUpdateButtonClick,
                        size: f.y.Large
                    }, Object(c.d)("Update", "Profile Edit"))))), r)
                }, t.prototype.setDefaultAvatar = function() {
                    return s.__awaiter(this, void 0, void 0, function() {
                        var e, t, n;
                        return s.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    this.setState({
                                        statusMessage: _.b.Uploading
                                    }), e = _.b.UnexpectedError, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, Object(y.b)(this.props.userID, this.props.authToken, this.state.selectedImageIndex)];
                                case 2:
                                    return 204 === (t = i.sent()).status || 200 === t.status ? e = _.b.Success : this.logger.error(new Error("Default Avatar PUT failed. Fetch returned non-200 status: " + t.status), "Default Avatar PUT failed. Fetch returned non-200 status: " + t.status), [3, 4];
                                case 3:
                                    return n = i.sent(), this.logger.error(n, "Default Avatar PUT failed."), [3, 4];
                                case 4:
                                    return this.setState({
                                        statusMessage: e,
                                        profileUpdated: e === _.b.Success
                                    }), [2]
                            }
                        })
                    })
                }, t = s.__decorate([Object(p.a)(S, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.login
                            }
                        }
                    }
                })], t)
            }(d.Component),
            w = Object(C.d)("Profile Edit")(N);
        var D = Object(i.b)(function(e) {
            return {
                authToken: Object(o.a)(e)
            }
        }, function(e, t) {
            return Object(a.b)({
                closeModal: function() {
                    return t.successCallback && t.successCallback(), Object(r.c)()
                }
            }, e)
        })(w);
        n.d(t, "a", function() {
            return D
        })
    },
    xZvS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissPurchaseToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPurchaseTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissPurchaseToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 113
            }
        };
        n.loc.source = {
            body: "mutation DismissPurchaseToken($input:DismissPurchaseTokenInput!) {\ndismissPurchaseToken(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xfb5: function(e, t) {},
    xgnX: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), t.c = function(e) {
            switch (e) {
                case a.Success:
                    return {
                        message: Object(r.d)("Success!", "Profile Edit"),
                        type: o._9.Success
                    };
                case a.UnexpectedError:
                    return {
                        message: Object(r.d)("Unexpected error, please try again.", "Profile Edit"),
                        type: o._9.Alert
                    };
                case a.BadSizeError:
                    return {
                        message: Object(r.d)("Image might exceed 10MB.", "Profile Edit"),
                        type: o._9.Alert
                    };
                case a.NonImageError:
                    return {
                        message: Object(r.d)("You must upload an image.", "Profile Edit"),
                        type: o._9.Alert
                    };
                case a.WrongFormatError:
                    return {
                        message: Object(r.d)("You must select a valid image type.", "Profile Edit"),
                        type: o._9.Alert
                    };
                case a.TimeoutError:
                    return {
                        message: Object(r.d)("Upload timed-out. Please try again.", "Profile Edit"),
                        type: o._9.Alert
                    };
                case a.Uploading:
                    return {
                        message: Object(r.d)("Uploading....", "Profile Edit"),
                        type: o._9.Brand
                    };
                case a.ImageNotSelected:
                    return {
                        message: Object(r.d)("Select a image first.", "Profile Edit"),
                        type: o._9.Alert
                    };
                default:
                    return {
                        message: Object(r.d)("Please try again.", "Profile Edit"),
                        type: o._9.Alert
                    }
            }
        };
        var i, a, r = n("6sO2"),
            o = n("Odds");
        ! function(e) {
            e.Success = "SUCCESS", e.NonImage = "IS_IMAGE_VALIDATION_FAILED", e.WrongFormat = "IMAGE_FORMAT_VALIDATION_FAILED", e.BadSize = "FILE_SIZE_VALIDATION_FAILED"
        }(i || (i = {})),
        function(e) {
            e[e.Success = 0] = "Success", e[e.UnexpectedError = 1] = "UnexpectedError", e[e.BadSizeError = 2] = "BadSizeError", e[e.NonImageError = 3] = "NonImageError", e[e.WrongFormatError = 4] = "WrongFormatError", e[e.TimeoutError = 5] = "TimeoutError", e[e.Uploading = 6] = "Uploading", e[e.ImageNotSelected = 7] = "ImageNotSelected"
        }(a || (a = {}))
    },
    "y0i/": function(e, t) {},
    "y1/w": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 190
            }
        };
        n.loc.source = {
            body: "query RecentRaidsModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ySfT: function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            a = n("6sO2"),
            r = n("3iBR"),
            o = n("qe65"),
            s = n("Odds"),
            l = (n("6lb1"), {
                themed: !0,
                dark: {
                    "1x": r.b + "/dark/animated/1/cheertutorial.gif"
                },
                light: {
                    "1x": r.b + "/light/animated/1/cheertutorial.gif"
                }
            }),
            d = function() {
                return i.createElement(s._4, {
                    display: s.P.Flex,
                    padding: {
                        top: 5
                    },
                    flexGrow: 1,
                    flexDirection: s.R.Column,
                    justifyContent: s._3.Center,
                    alignItems: s.c.Center
                }, i.createElement(s.O, {
                    type: s._41.H4,
                    bold: !0
                }, i.createElement(o.a, {
                    className: "cheermote-help__tutorial-image",
                    sources: l
                }), Object(a.d)("How to Cheer", "Bits--CheermoteHelp")), i.createElement("p", {
                    className: "t-bits-card__contents-body t-bits-card__contents-body--narrow"
                }, Object(a.d)('Type "cheer" + the number of Bits you want to Cheer.', "Bits--CheermoteHelp")))
            };
        n.d(t, "a", function() {
            return d
        })
    },
    yU6t: function(e, t) {},
    yqxY: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return u
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = (n.n(a), n("6sO2")),
            o = n("l21v"),
            s = n("Odds"),
            l = n("Tur5"),
            d = n("qDcU"),
            c = (n.n(d), [{
                id: "30259",
                alt: "HeyGuys"
            }, {
                id: "81274",
                alt: "VoHiYo"
            }, {
                id: "64138",
                alt: "SeemsGood"
            }]),
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onEmoteClick = function(e) {
                        if (n.renderedTokenID) {
                            var t = e.currentTarget.dataset.emoteString;
                            t ? n.props.onRitualRedeemed(n.renderedTokenID, t) : r.j.warn("[NewChatterRitual] Could not find clicked emote ID.")
                        } else r.j.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.onCloseButtonClick = function() {
                        n.renderedTokenID ? n.props.onRitualDismissed(n.renderedTokenID) : r.j.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.getAvailableToken = function() {
                        return n.props.ritualTokens.find(function(e) {
                            return e.type === l.RitualTokenType.NewChatter && e.status === l.RitualTokenStatus.Available && (!e.expiresAt || Date.now() < new Date(e.expiresAt).valueOf())
                        }) || null
                    }, n.renderedTokenID = null, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.getAvailableToken();
                    if (this.renderedTokenID = t ? t.id : null, !t) return null;
                    var n = c.map(function(t) {
                        return a.createElement(s._4, {
                            key: t.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, a.createElement(s._44, {
                            label: t.alt
                        }, a.createElement(s._2, {
                            alpha: !0,
                            onClick: e.onEmoteClick,
                            "data-emote-string": t.alt,
                            "data-test-selector": "emote-button"
                        }, a.createElement(s._4, {
                            padding: .5
                        }, a.createElement("img", {
                            className: "new-chatter-ritual__emote",
                            src: Object(o.e)(t.id, 3)
                        })))))
                    });
                    return a.createElement(s._27, {
                        background: s.m.Base,
                        border: !0,
                        className: "new-chatter-ritual",
                        margin: {
                            x: 2,
                            bottom: .5
                        },
                        padding: {
                            left: .5,
                            y: .5
                        }
                    }, a.createElement(s._4, {
                        alignItems: s.c.Center,
                        display: s.P.Flex,
                        flexWrap: s.S.NoWrap
                    }, a.createElement(s._4, {
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, this.props.bannerMessage), n, a.createElement(s._27, {
                        borderLeft: !0,
                        flexShrink: 0
                    }, a.createElement(s.v, {
                        ariaLabel: "close",
                        icon: s._18.Close,
                        onClick: this.onCloseButtonClick,
                        size: s.w.Large,
                        "data-test-selector": "dismiss-button"
                    }))))
                }, t
            }(a.Component)
    },
    ysVA: function(e, t) {},
    z4Db: function(e, t) {},
    z7Cp: function(e, t) {},
    zLjL: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Mods"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "mods"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "query Mods($id: ID!) {\nuser(id: $id) {\nid\nmods(first: 100) {\nedges {\nnode {\nid\nlogin\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zMie: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomInteractionPane"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 96
            }
        };
        n.loc.source = {
            body: "query RoomInteractionPane($id: ID!) {\nroom(id: $id) {\nid\nname\nowner {\nid\ndisplayName\nlogin\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zVM8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "query ViewerCardModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zbFZ: function(e, t) {},
    ztSx: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("7vx8"),
            o = n("j7/Y"),
            s = n("oIkB"),
            l = n("w9tK"),
            d = n("vH/s"),
            c = n("e9/y"),
            u = (n("7zg1"), n("SI0h")),
            m = n("CSlQ"),
            p = n("i/jv"),
            h = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    var e = this.props.data;
                    if (!e.loading) {
                        var t = 0;
                        !e.error && e.user && e.user.follows && e.user.follows.edges && (t = e.user.follows.edges.length), this.props.latencyTracking.reportInteractive(t)
                    }
                }, t.prototype.render = function() {
                    var e = this.props.data;
                    return e.loading ? null : a.createElement(c.a, {
                        loading: e.loading,
                        channelLogin: this.props.match.params.channelLogin,
                        hasNextPage: !!(e.user && e.user.follows && e.user.follows.pageInfo && e.user.follows.pageInfo.hasNextPage),
                        currentUser: e.currentUser,
                        error: e.error,
                        loadMore: this.props.loadMore,
                        followEdge: e.user && e.user.follows && e.user.follows.edges,
                        channelHeaderTab: u.b.Following,
                        userExist: !(!e.user || !e.user.id)
                    })
                }, t = i.__decorate([Object(r.a)(p, {
                    options: function(e) {
                        return {
                            variables: {
                                limit: 15,
                                login: e.match.params.channelLogin,
                                order: c.b.DESC
                            }
                        }
                    },
                    props: function(e) {
                        return i.__assign({}, e, {
                            loadMore: function() {
                                var t = e.data.user && e.data.user.follows && e.data.user.follows.edges;
                                return e.data.fetchMore({
                                    query: p,
                                    variables: {
                                        cursor: t ? t[t.length - 1].cursor : null,
                                        limit: 7,
                                        login: e.ownProps.match.params.channelLogin,
                                        order: c.b.DESC
                                    },
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult,
                                            a = n.user && n.user.follows || e.user && e.user.follows;
                                        return {
                                            user: i.__assign({}, n.user, {
                                                follows: i.__assign({}, a, {
                                                    edges: Object(s.b)(e.user && e.user.follows && e.user.follows.edges || [], n.user && n.user.follows && n.user.follows.edges || [])
                                                })
                                            }),
                                            currentUser: n.currentUser ? i.__assign({}, n.currentUser) : null
                                        }
                                    }
                                })
                            }
                        })
                    }
                }), Object(m.d)("ChannelFollowingPage", {
                    destination: l.a.ChannelFollows
                }), Object(o.a)({
                    location: d.PageviewLocation.Followers
                })], t)
            }(a.Component);
        n.d(t, "REQUEST_LIMIT", function() {
            return 15
        }), n.d(t, "ChannelFollowingPage", function() {
            return h
        })
    },
    zzpv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WatchAdModal_Redeeem"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemTrueXAdInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "redeemTrueXAd"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "grantedBits"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 105
            }
        };
        n.loc.source = {
            body: "mutation WatchAdModal_Redeeem($input:RedeemTrueXAdInput!) {\nredeemTrueXAd(input:$input) {\ngrantedBits\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    }
});
//# sourceMappingURL=pages.channel-following-ec3e6a2e660fb4d8d954dcece43cff00.js.map