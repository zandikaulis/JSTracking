webpackJsonp([40], {
    "+5Qw": function(e, t) {},
    "+V/3": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        });
        var a = "subscribe_to_channel",
            i = "turbo",
            r = "visit_url",
            s = "broadcaster"
    },
    "/+aa": function(e, t) {},
    "/LBW": function(e, t, n) {
        "use strict";
        t.h = function(e) {
            var t = {
                action_name: e.actionName,
                action_type: "click",
                client_time: (new Date).getTime(),
                displayed_balance: e.displayedBalance,
                emote_level: e.emoteLevel,
                emote_type: e.emoteType,
                bits_location: e.location || s.ChatTooltip
            };
            i.m.track(r.SpadeEventType.BitsCardInteraction, t)
        }, n.d(t, "b", function() {
            return s
        }), n.d(t, "a", function() {
            return o
        }), t.d = function(e) {
            return e && l[e] ? l[e] : (i.i.error(new Error('Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), 'Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), o.Buy100)
        }, t.e = function(e) {
            var t = {
                channel: e.channel,
                channel_id: e.channelID,
                available: e.available,
                host: "twitch.tv"
            };
            i.m.track(r.SpadeEventType.BitsAdsAvailability, t)
        }, t.f = function(e) {
            var t = {
                distinct_id: i.n.session.deviceID,
                host: "twitch.tv",
                request_id: e.requestID,
                campaign_id: e.campaignID,
                adblock: e.adblock
            };
            i.m.track(r.SpadeEventType.BitsAdsImpression, t)
        }, n.d(t, "c", function() {
            return a
        }), t.g = function(e) {
            var t = i.m.getLastPageview(),
                n = {
                    location: t ? t.location || "" : "",
                    ad_returned: null,
                    campaign_id: e.campaignID,
                    distinct_id: i.n.session.deviceID,
                    host: "twitch.tv",
                    request_id: e.requestID,
                    request_method: e.requestMethod
                };
            i.m.track(r.SpadeEventType.BitsAdsRequest, n)
        };
        var a, i = n("6sO2"),
            r = n("vH/s"),
            s = {
                ChatTooltip: "card",
                GetBitsButton: "get_bits_button",
                BitsLandingPage: "bits_landing_page"
            },
            o = {
                BuyMain: "buy_main",
                Buy100: "buy_100",
                Buy500: "buy_500",
                Buy1000: "buy_1000",
                Buy1500: "buy_1500",
                Buy5000: "buy_5000",
                Buy10000: "buy_10000",
                Buy25000: "buy_25000",
                CloseCard: "menu_close",
                OpenCard: "menu_open",
                PreviewEmote: "emote_preview",
                WatchAd: "watch_ad",
                WatchAnotherAd: "watch_another_ad"
            },
            l = {
                100: o.Buy100,
                500: o.Buy500,
                1e3: o.Buy1000,
                1500: o.Buy1500,
                5e3: o.Buy5000,
                1e4: o.Buy10000,
                25e3: o.Buy25000
            };
        (a || (a = {})).ShowAdButton = "show_ad_button"
    },
    "/eFD": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatSettings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "blockLinks"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "rules"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "chatDelayMs"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "query Chat_ChannelData($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nlogin\ndisplayName\nchatSettings {\nblockLinks\nrules\nchatDelayMs\n}\nself {\nisModerator\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0ImK": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "embeddedEmote"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "EmbeddedEmote"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "emoteID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "from"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "to"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 65
            }
        };
        n.loc.source = {
            body: "fragment embeddedEmote on EmbeddedEmote {\nemoteID\nsetID\nfrom\nto\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "11M/": function(e, t, n) {
        "use strict";

        function a(e) {
            return u.__awaiter(this, void 0, void 0, function() {
                var t, n;
                return u.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            t = null, a.label = 1;
                        case 1:
                            return a.trys.push([1, 3, , 4]), [4, m.n.apollo.client.query({
                                query: be,
                                variables: {
                                    login: e
                                }
                            })];
                        case 2:
                            return t = a.sent(), [3, 4];
                        case 3:
                            return n = a.sent(), m.i.warn(n, "Failed to fetch user targeted by chat command.", {
                                userLogin: e
                            }), [3, 4];
                        case 4:
                            return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                    }
                })
            })
        }

        function i(e, t) {
            var n = {
                raid_creator_id: Number(t.creatorID),
                raid_source_id: Number(t.sourceChannelID),
                raid_target_id: Number(t.targetChannelID),
                raid_id: t.id
            };
            m.m.track(e, n)
        }

        function r(e) {
            return e.currentUserID !== e.channelID || !Object(it.a)()
        }

        function s(e, t, n, a, i, r, s) {
            return void 0 === s && (s = !1), u.__assign({}, Object(It.a)(t, n, a, i, r, s), {
                type: e,
                id: n.id || Object(Dt.a)(n.username)
            })
        }

        function o(e, t, n, a, i, r, s, o) {
            var l = r && s ? Object(It.a)(r, s, A.a, !1, o) : function(e) {
                return {
                    user: {
                        userDisplayName: e,
                        userLogin: e,
                        userID: null,
                        userType: Ot.a.User,
                        color: void 0,
                        isIntl: !1
                    }
                }
            }(t);
            return u.__assign({}, l, {
                type: vt.a.Resubscription,
                id: Object(Dt.a)(t + "-sub"),
                channel: e.slice(1),
                isPrime: n,
                months: a,
                tier: i
            })
        }

        function l() {
            return Object(m.d)("Unable to unban user", "UnbanUserMutation")
        }

        function c() {
            return {
                raid_error_self: Object(m.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                raid_error_forbidden: Object(m.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                raid_error_already_raiding: Object(m.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                raid_error_too_many_viewers_to_raid: Object(m.d)("Sorry, raids can only support up to 20,000 viewers right now.", "RaidErrorTooManyViewersMessage"),
                raid_error_unexpected: Object(m.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                unraid_error_unexpected: Object(m.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                unraid_error_no_active_raid: Object(m.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                raid_notice_restricted_chat: Object(m.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                raid_notice_mature: Object(m.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                raid_notice_owner: Object(m.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                    unraidCommand: "/unraid"
                }, "RaidNoticeOwnerMessage")
            }
        }

        function d(e) {
            return e.type === vt.a.Post || e.type === vt.a.PostWithMention || e.type === vt.a.Action
        }
        var u = n("TToO"),
            p = n("LIeg"),
            m = n("6sO2"),
            h = n("vh75"),
            g = n("UzRK"),
            f = n("VsL1");
        m.n.store.registerReducer("chat", function(e, t) {
            switch (void 0 === e && (e = function() {
                var e = Object(f.a)();
                return u.__assign({}, e, {
                    commandHandlers: {},
                    emoteSets: [],
                    followerDuration: g.a,
                    followerMode: !1,
                    isHidden: !1,
                    messages: {},
                    slowMode: !1,
                    subsOnlyMode: !1
                })
            }()), t.type) {
                case h.b:
                    return u.__assign({}, e, {
                        isHidden: !0
                    });
                case h.c:
                    return u.__assign({}, e, {
                        emoteSets: [],
                        messages: {}
                    });
                case h.d:
                    return u.__assign({}, e, {
                        isHidden: !1
                    });
                case h.e:
                    return u.__assign({}, e, {
                        emoteSets: t.emoteSets
                    });
                case h.f:
                    return u.__assign({}, e, {
                        followerMode: !1
                    });
                case h.g:
                    return u.__assign({}, e, {
                        followerDuration: t.duration
                    });
                case h.h:
                    return u.__assign({}, e, {
                        lastUsedFollowerDurations: u.__assign({}, e.lastUsedFollowerDurations, (n = {}, n[t.channelLogin] = t.duration, n))
                    });
                case h.i:
                    return u.__assign({}, e, {
                        followerMode: !0
                    });
                case h.j:
                    return p(e, function(e) {
                        return e.messages
                    }, function(e) {
                        return e[t.channel] = t.messages, e
                    });
                case h.k:
                    return u.__assign({}, e, {
                        showModIcons: !1
                    });
                case h.l:
                    return u.__assign({}, e, {
                        showModIcons: !0
                    });
                case h.n:
                    return u.__assign({}, e, {
                        slowMode: !1
                    });
                case h.o:
                    return u.__assign({}, e, {
                        slowMode: !0
                    });
                case h.p:
                    return u.__assign({}, e, {
                        subsOnlyMode: !1
                    });
                case h.q:
                    return u.__assign({}, e, {
                        subsOnlyMode: !0
                    });
                case h.r:
                    return u.__assign({}, e, {
                        showTimestamps: !1
                    });
                case h.s:
                    return u.__assign({}, e, {
                        showTimestamps: !0
                    });
                case h.a:
                    return p(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return e[t.command] = t.handler, e
                    });
                case h.m:
                    return p(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return delete e[t.command], e
                    });
                default:
                    return e
            }
            var n
        });
        var v = n("ass3");
        m.n.store.registerReducer("viewerCard", function(e, t) {
            switch (void 0 === e && (e = {
                viewerCardOptions: null
            }), t.type) {
                case v.a:
                    return u.__assign({}, e, {
                        viewerCardOptions: null
                    });
                case v.b:
                    return t.viewerCardOptions ? u.__assign({}, e, {
                        viewerCardOptions: u.__assign({}, t.viewerCardOptions)
                    }) : e;
                default:
                    return e
            }
        });
        var b, k = n("RH2O"),
            y = n("Aj/L"),
            C = n("U7vG"),
            S = n("7vx8"),
            _ = n("BhyV"),
            E = n("2KeS"),
            w = n("NXs7"),
            N = n("Ldv2"),
            D = n("NikC"),
            O = n("0nzt"),
            T = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.props.addCommand(this.props.command, this.props.handler)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.command === e.command && this.props.handler === e.handler || (this.props.removeCommand(this.props.command), this.props.addCommand(e.command, e.handler))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.removeCommand(this.props.command)
                }, t.prototype.render = function() {
                    return null
                }, t
            }(C.PureComponent),
            I = Object(k.a)(null, function(e) {
                return Object(E.bindActionCreators)({
                    addCommand: h.t,
                    removeCommand: h.J
                }, e)
            })(T),
            L = n("J4ib"),
            M = n("Y5T0");
        ! function(e) {
            e.Recent = "RECENT", e.Top = "TOP"
        }(b || (b = {}));
        var x, F, j = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.unpinRecentCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return u.__awaiter(t, void 0, void 0, function() {
                                    return u.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: b.Recent
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(L.d)("Recent cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t.resetTopCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return u.__awaiter(t, void 0, void 0, function() {
                                    return u.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: b.Top
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(L.d)("Top cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return C.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, C.createElement(I, {
                        command: "unpin",
                        handler: this.unpinRecentCheer
                    }), C.createElement(I, {
                        command: "reset",
                        handler: this.resetTopCheer
                    }))
                }, t = u.__decorate([Object(S.a)(M, {
                    name: "dismissPinnedCheer"
                })], t)
            }(C.Component),
            A = n("iydZ"),
            B = n("bkpq"),
            R = n("HW6M"),
            U = n("RweG"),
            V = n("C8Io"),
            P = n("oIkB"),
            H = n("HZww"),
            W = n("vH/s"),
            q = n("iMOk"),
            G = n("Odds"),
            z = (n("y0i/"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        formInputValue: "",
                        sharing: !1
                    }, t.hasUnmounted = !1, t.handleShareClick = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            return u.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            sharing: !0
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, , 3, 4]), [4, this.props.onShare(this.state.formInputValue)];
                                    case 2:
                                        return e.sent(), [3, 4];
                                    case 3:
                                        return this.hasUnmounted || this.setState({
                                            sharing: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.onInputChange = function(e) {
                        t.setState({
                            formInputValue: e.currentTarget.value
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.hasUnmounted = !1
                }, t.prototype.componentWillUnmount = function() {
                    this.hasUnmounted = !0
                }, t.prototype.render = function() {
                    var e = R("share-input", {
                            "share-input--hidden": this.props.hide
                        }),
                        t = this.state.formInputValue.length > 255,
                        n = t ? "-" + (this.state.formInputValue.length - 255) : Object(m.d)("Share", "ChatResubNotification"),
                        a = Object(m.d)("Close", "ChatResubNotification"),
                        i = Object(m.d)("Add a message to the streamer", "ChatResubNotification"),
                        r = this.state.sharing ? G.y.Loading : G.y.Default;
                    return C.createElement(G.V, {
                        className: e,
                        padding: 1,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: G._4.Absolute
                    }, C.createElement(G._19, {
                        className: "share-input__container",
                        position: G._4.Relative,
                        border: !0,
                        background: G.m.Base,
                        padding: 1
                    }, C.createElement(G.V, {
                        position: G._4.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, C.createElement(G.v, {
                        ariaLabel: a,
                        onClick: this.props.onClose,
                        type: G.w.Secondary,
                        icon: G._11.Close,
                        "data-a-target": "resub-notification-close-form-btn",
                        "data-test-selector": "share-input__close-form-btn"
                    })), C.createElement(G.V, {
                        textAlign: G._24.Center,
                        padding: {
                            top: 1,
                            bottom: 2
                        }
                    }, this.props.children), C.createElement(G.V, {
                        display: G.H.Flex,
                        flexWrap: G.K.NoWrap
                    }, C.createElement(G.V, {
                        fullWidth: !0
                    }, C.createElement(G.R, {
                        autoFocus: !0,
                        type: G.S.Text,
                        value: this.state.formInputValue,
                        onChange: this.onInputChange,
                        placeholder: i,
                        "data-a-target": "resub-notification-share-message-input",
                        "data-test-selector": "share-input__share-message-input"
                    })), C.createElement(G.u, {
                        disabled: t,
                        onClick: this.handleShareClick,
                        "data-a-target": "resub-notification-send-msg-btn",
                        "data-test-selector": "share-input__send-msg-btn",
                        state: r
                    }, n))))
                }, t
            }(C.Component)),
            Q = (n("54rb"), function(e) {
                var t = Object(m.d)("Share", "Chat--SharePrompt"),
                    n = Object(m.d)("Close", "Chat--SharePrompt"),
                    a = R("chat-share-prompt", {
                        "chat-share-prompt--hidden": e.hide || !e.children
                    });
                return C.createElement(G.V, {
                    position: G._4.Absolute,
                    fullWidth: !0,
                    className: a,
                    padding: {
                        y: .5,
                        left: .5
                    }
                }, C.createElement(G.V, {
                    display: G.H.Flex,
                    padding: 1,
                    justifyContent: G.U.Between,
                    alignItems: G.c.Center,
                    flexWrap: G.K.NoWrap
                }, C.createElement(G._23, {
                    "data-a-target": "resub-notification-months-subbed-text",
                    "data-test-selector": "share-prompt__text"
                }, e.children), C.createElement(G.V, {
                    display: G.H.Flex,
                    flexWrap: G.K.NoWrap,
                    alignItems: G.c.Center,
                    flexShrink: 0,
                    padding: {
                        left: .5
                    }
                }, C.createElement(G.V, {
                    display: G.H.Inline,
                    padding: {
                        right: .5
                    },
                    flexShrink: 0
                }, C.createElement(G.u, {
                    onClick: e.onClickShare,
                    size: G.x.Small,
                    "data-a-target": "resub-notification-share-notification-btn",
                    "data-test-selector": "share-prompt__share-btn"
                }, t)), C.createElement(G.V, {
                    flexShrink: 0
                }, C.createElement(G.v, {
                    ariaLabel: n,
                    onClick: e.onClickClose,
                    type: G.w.Secondary,
                    icon: G._11.Close,
                    "data-a-target": "resub-notification-close-notification-btn",
                    "data-test-selector": "share-prompt__close-btn"
                })))))
            }),
            J = n("Tzcg"),
            $ = n("xZvS"),
            K = n("cxe8"),
            Y = n("QNxL"),
            Z = (n("BTUa"), "chat_dismiss"),
            X = "chat_share",
            ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.purchaseTokensExist = function(e) {
                        return e.data.user.self && e.data.user.self.purchaseTokens.length > 0
                    }, t.manageParentSpace = function(e) {
                        t.dataIsReady(e) && t.purchaseTokensExist(e) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissPurchaseToken = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return u.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), e = this.props.data.user.self.purchaseTokens[0], t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(P.d)(K, {
                                            channelLogin: this.props.channelLogin
                                        }, t), m.m.track(W.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: e.asin,
                                            item_name: e.title,
                                            context: Z,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), [4, this.props.dismissPurchaseToken(Object(P.a)({
                                            token: e.id,
                                            channelID: this.props.data.user.id
                                        }))];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.sharePurchase = function(e) {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return u.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), a.label = 1;
                                    case 1:
                                        return a.trys.push([1, , 3, 4]), t = this.props.data.user.self.purchaseTokens[0], [4, this.props.sharePurchaseTokenInChat(Object(P.a)({
                                            token: t.id,
                                            channelID: this.props.data.user.id,
                                            message: e
                                        }))];
                                    case 2:
                                        return a.sent(), m.m.track(W.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: t.asin,
                                            item_name: t.title,
                                            context: X,
                                            context_details: e,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), n = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(P.d)(K, {
                                            channelLogin: this.props.channelLogin
                                        }, n), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.dataIsReady(e)) {
                        var t = e.pubsub.messages.userCommerceUpdateEvent,
                            n = this.props.pubsub.messages.userCommerceUpdateEvent,
                            a = !n && t,
                            i = n && t && n.time !== t.time;
                        (a || i) && this.props.data && this.props.data.refetch()
                    }
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.purchaseTokensExist(this.props) && this.props.data.user.self ? this.renderPurchaseToken(this.props.data.user.self.purchaseTokens[0]) : null
                }, t.prototype.renderPurchaseToken = function(e) {
                    var t;
                    t = this.props.data.user.settings.isCommerceRevShareEnabled ? Object(m.d)("You bought {product} and supported {channelName}!", {
                        product: C.createElement("strong", null, e.title),
                        channelName: C.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat") : Object(m.d)("You bought {product} while watching {channelName}!", {
                        product: C.createElement("strong", null, e.title),
                        channelName: C.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat");
                    var n, a = e.inGameContents.map(this.renderLootInGameContent),
                        i = e.badges.map(this.renderLootBadge),
                        r = e.emoteSets.map(this.renderLootEmoteSet),
                        s = e.bits.map(this.renderLootBits, this);
                    return (a.length || i.length || r.length || s.length) && (n = C.createElement(G.V, {
                        "data-test-selector": "share-purchase__loot",
                        padding: {
                            bottom: 1
                        },
                        display: G.H.Flex,
                        justifyContent: G.U.Center
                    }, a, i, r, s), t = Object(m.d)("You bought {product} and opened a Twitch Crate! Let {channelName} know you shared the love.", {
                        product: C.createElement("strong", null, e.title),
                        channelName: C.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat")), C.createElement(G.V, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: G._4.Absolute
                    }, C.createElement(Q, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissPurchaseToken
                    }, t), C.createElement(z, {
                        hide: !this.state.showMessageInput,
                        onShare: this.sharePurchase,
                        onClose: this.toggleContentShown
                    }, C.createElement(G.V, {
                        padding: {
                            bottom: 1
                        }
                    }, C.createElement("figure", {
                        height: 40,
                        width: 40
                    }, C.createElement("img", {
                        src: e.imageThumbnail
                    }))), n, C.createElement(G._23, null, Object(m.d)("Score! Give a shout out to {channelName} in Chat about all your sweet loot!", {
                        channelName: C.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat"))))
                }, t.prototype.renderLootInGameContent = function(e) {
                    return C.createElement(G.V, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__igc"
                    }, C.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.imageURL
                    }))
                }, t.prototype.renderLootEmoteSet = function(e) {
                    return Object(J.b)(e.emoteSet.emotes).map(function(e) {
                        return C.createElement(G.V, {
                            key: e.id,
                            margin: {
                                top: .5,
                                right: 1
                            },
                            "data-test-selector": "share-purchase__emoticon"
                        }, C.createElement("img", {
                            className: "share-to-chat__loot",
                            srcSet: e.srcSet,
                            alt: e.displayName
                        }))
                    })
                }, t.prototype.renderLootBadge = function(e) {
                    return C.createElement(G.V, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__badge"
                    }, C.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.badge.image2x
                    }))
                }, t.prototype.renderLootBits = function(e) {
                    if (this.props.bitsConfig) return C.createElement(G.V, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__bits"
                    }, C.createElement(q.a, {
                        count: e.quantity,
                        bitsConfig: this.props.bitsConfig,
                        withImage: !0
                    }))
                }, t = u.__decorate([Object(S.a)(K, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(U.a)([{
                    topic: function(e) {
                        return Object(H.l)(e.currentUserID)
                    },
                    mapMessageTypesToProps: (x = {}, x[V.c.ChatNotification] = "userCommerceUpdateEvent", x)
                }])], t)
            }(C.Component),
            te = Object(S.a)($, {
                name: "dismissPurchaseToken"
            })(Object(S.a)(Y, {
                name: "sharePurchaseTokenInChat"
            })(ee)),
            ne = Object(k.a)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            })(te),
            ae = (n("e9ZN"), function(e) {
                var t = R("rare-emote__face", {
                        "rare-emote__face--animate": !!e.animate
                    }),
                    n = R("rare-emote__neck", {
                        "rare-emote__neck--animate": !!e.animate
                    });
                return C.createElement(G.V, {
                    overflow: G._0.Hidden,
                    className: "rare-emote"
                }, C.createElement(G.Q, {
                    zIndex: G._39.Above,
                    position: G._4.Relative
                }, C.createElement("img", {
                    className: t,
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.emoteID + "/2.0"
                })), C.createElement(G.V, {
                    position: G._4.Relative,
                    zIndex: G._39.Default,
                    className: n
                }, C.createElement(G._10, {
                    width: 28,
                    height: 28,
                    asset: G._11.Neck
                })))
            }),
            ie = 3,
            re = n("nEoF"),
            se = n("S20p"),
            oe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        resubDismissed: !1,
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.randomEmoteId = t.getRandomEmoteId(), t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.resubExists = function(e, t) {
                        return e.data.user.self && e.data.user.self.resubNotification && !t.resubDismissed
                    }, t.manageParentSpace = function() {
                        t.dataIsReady(t.props) && t.resubExists(t.props, t.state) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissResubNotification = function() {
                        t.setState({
                            resubDismissed: !0
                        })
                    }, t.shareResub = function(e) {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return u.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.resubNotification) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 4, 5, 6]), this.props.authToken ? [4, function(e, t, n, a) {
                                            return u.__awaiter(this, void 0, void 0, function() {
                                                var i, r, s, o, l;
                                                return u.__generator(this, function(c) {
                                                    switch (c.label) {
                                                        case 0:
                                                            i = "https://api.twitch.tv/api/channels/" + e + "/use_chat_notification_token", r = 1, c.label = 1;
                                                        case 1:
                                                            if (!(r <= ie)) return [3, 7];
                                                            c.label = 2;
                                                        case 2:
                                                            return c.trys.push([2, 5, , 6]), [4, fetch(i, {
                                                                body: JSON.stringify({
                                                                    token_id: t,
                                                                    custom_message: n
                                                                }),
                                                                method: "POST",
                                                                headers: {
                                                                    "Client-ID": m.n.config.legacyClientID,
                                                                    Accept: "application/json; charset=UTF-8",
                                                                    "content-type": "application/json; charset=UTF-8",
                                                                    Authorization: "OAuth " + a
                                                                }
                                                            })];
                                                        case 3:
                                                            return s = c.sent(), [4, s.json()];
                                                        case 4:
                                                            return o = c.sent(), [2, o];
                                                        case 5:
                                                            if (l = c.sent(), r === ie) throw l;
                                                            return [3, 6];
                                                        case 6:
                                                            return ++r, [3, 1];
                                                        case 7:
                                                            return [2]
                                                    }
                                                })
                                            })
                                        }(this.props.channelLogin, this.props.data.user.self.resubNotification.token, e, this.props.authToken)] : [3, 3];
                                    case 2:
                                        a.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.resubNotification = null), e
                                        }, Object(P.d)(se, {
                                            channelLogin: this.props.channelLogin
                                        }, t), this.dismissResubNotification(), a.label = 3;
                                    case 3:
                                        return [3, 6];
                                    case 4:
                                        return n = a.sent(), m.i.error(n, "Failed to post resub message"), [3, 6];
                                    case 5:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 6:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace()
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.dataIsReady(e) && e.data.user.self && e.data.user.self.resubNotification && !this.randomEmoteId && (this.randomEmoteId = this.getRandomEmoteId())
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.resubExists(this.props, this.state) && this.props.data.user.self && this.props.data.user.self.resubNotification ? this.renderResubToken(this.props.data.user.self.resubNotification) : null
                }, t.prototype.renderResubToken = function(e) {
                    return C.createElement(G.V, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: G._4.Absolute
                    }, C.createElement(Q, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissResubNotification
                    }, Object(m.d)("It's your {monthsSubbed, number} month anniversary!", {
                        monthsSubbed: e.months
                    }, "ChatResubNotification")), C.createElement(z, {
                        hide: !this.state.showMessageInput,
                        onShare: this.shareResub,
                        onClose: this.toggleContentShown
                    }, C.createElement(ae, {
                        emoteID: this.randomEmoteId,
                        animate: this.state.showMessageInput
                    }), C.createElement(G._23, null, Object(m.d)("Hooray! Let {channelName} know it's your {monthsSubbed, number} month anniversary.", {
                        channelName: C.createElement("strong", null, this.props.channelDisplayName),
                        monthsSubbed: e.months
                    }, "ChatResubNotification"))))
                }, t.prototype.getRandomEmoteId = function() {
                    var e = Math.floor(Math.random() * re.a.length);
                    return re.a[e]
                }, t = u.__decorate([Object(S.a)(se, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                })], t)
            }(C.Component);
        n("NZkJ");
        ! function(e) {
            e[e.Resub = 1] = "Resub", e[e.Purchase = 2] = "Purchase"
        }(F || (F = {}));
        var le, ce = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestedSpaces: new Set
                    }, t.addSpace = function(e) {
                        t.state.requestedSpaces.has(e) || t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.add(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.removeSpace = function(e) {
                        t.state.requestedSpaces.has(e) && t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.delete(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.requestResubSpace = function() {
                        t.addSpace(F.Resub)
                    }, t.dismissResubSpace = function() {
                        t.removeSpace(F.Resub)
                    }, t.requestPurchaseSpace = function() {
                        t.addSpace(F.Purchase)
                    }, t.dismissPurchaseSpace = function() {
                        t.removeSpace(F.Purchase)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    this.state.requestedSpaces.size && (e = Array.from(this.state.requestedSpaces.values()).sort()[0]);
                    var t = R({
                            "share-to-chat__space--hidden": e !== F.Resub
                        }),
                        n = R({
                            "share-to-chat__space--hidden": e !== F.Purchase
                        });
                    return C.createElement(G.V, null, C.createElement(G.V, {
                        className: t
                    }, C.createElement(oe, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        requestSpace: this.requestResubSpace,
                        dismissSpace: this.dismissResubSpace
                    })), C.createElement(G.V, {
                        className: n
                    }, C.createElement(ne, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig,
                        requestSpace: this.requestPurchaseSpace,
                        dismissSpace: this.dismissPurchaseSpace
                    })))
                }, t
            }(C.Component),
            de = n("F8kA"),
            ue = (n("tNBv"), "nativeLanguageNotifDismissed"),
            pe = [{
                title: "English",
                login: "gamesdonequick"
            }, {
                title: "Español",
                login: "speedrunsespanol"
            }, {
                title: "Deutsch",
                login: "germenchrestream"
            }, {
                title: "Français",
                login: "lefrenchrestream"
            }, {
                title: "Русский",
                login: "goldensplit"
            }, {
                title: "日本語",
                login: "japanese_restream"
            }],
            me = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isClosed: !1
                    }, t.getChannelLinks = function() {
                        var e = L.b.get("native_broadcast_blacklist", []);
                        return pe.filter(function(t) {
                            return e.indexOf(t.login) < 0
                        }).filter(function(e) {
                            return e.login !== t.props.channelLogin
                        }).map(function(e) {
                            var t = e.title + " (" + e.login + ")";
                            return C.createElement("li", {
                                key: e.login
                            }, C.createElement(de.a, {
                                className: "native-broadcast-notification__link",
                                to: "/" + e.login
                            }, t))
                        })
                    }, t.onDismiss = function() {
                        t.setState({
                            isClosed: !0
                        });
                        var e = u.__assign({}, m.k.get(ue, {}), (n = {}, n[t.props.channelLogin] = Date.now(), n));
                        m.k.set(ue, e);
                        var n
                    }, t.onExpire = function() {
                        t.setState({
                            isClosed: !0
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.channelLogin !== this.props.channelLogin && this.setState({
                        isClosed: !1
                    })
                }, t.prototype.render = function() {
                    if (this.state.isClosed || !this.isEventChannel(this.props.channelLogin)) return null;
                    if (!this.isEventChannel(this.props.channelLogin)) return null;
                    if (this.hasDismissedForChannel(this.props.channelLogin)) return null;
                    var e = Date.now();
                    if (e < 15153426e5 || e >= 15159564e5) return null;
                    var t = this.getChannelLinks();
                    return t.length ? C.createElement(G._19, {
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        background: G.m.AccentAlt2,
                        color: G.F.Overlay,
                        padding: 1,
                        position: G._4.Absolute
                    }, C.createElement(G.V, {
                        margin: {
                            bottom: 1
                        }
                    }, C.createElement(G._23, {
                        type: G._28.H4
                    }, Object(m.d)("Awesome Games Done Quick 2018", "AGDQLanguageSticky"))), C.createElement(G.V, {
                        margin: {
                            bottom: 1
                        }
                    }, C.createElement(G._23, {
                        color: G.F.OverlayAlt
                    }, Object(m.d)("Want to watch AGDQ in your local language? Try one of these international broadcasts!", "AGDQLanguageSticky"))), C.createElement("ul", null, t), C.createElement(G.V, {
                        attachRight: !0,
                        attachTop: !0,
                        margin: 1,
                        position: G._4.Absolute
                    }, C.createElement(G.v, {
                        ariaLabel: Object(m.d)("Close", "AGDQLanguageSticky"),
                        icon: G._11.Close,
                        onClick: this.onDismiss,
                        overlay: !0,
                        size: G.x.Small,
                        "data-a-target": "native-language-notification-close-button"
                    })), C.createElement(G.V, {
                        margin: {
                            top: .5
                        }
                    }, C.createElement(G._7, {
                        countdown: 30,
                        onCountdownEnd: this.onExpire,
                        size: G._8.ExtraSmall
                    }))) : null
                }, t.prototype.isEventChannel = function(e) {
                    return pe.map(function(e) {
                        return e.login
                    }).includes(e)
                }, t.prototype.hasDismissedForChannel = function(e) {
                    var t = m.k.get(ue, {})[e];
                    return !!t && t >= 15153426e5
                }, t
            }(C.Component),
            he = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        show: !0
                    }, t.dismiss = function() {
                        t.setState({
                            show: !1
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                        show: !0
                    })
                }, t.prototype.render = function() {
                    return this.state.show ? C.createElement(G._19, {
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        background: G.m.AccentAlt2,
                        color: G.F.Overlay,
                        position: G._4.Absolute,
                        className: "hosting-notification",
                        padding: {
                            y: .5,
                            left: .5
                        },
                        "data-a-target": "hosting-notification-container"
                    }, C.createElement(G.V, {
                        display: G.H.Flex,
                        padding: 1,
                        justifyContent: G.U.Between,
                        alignItems: G.c.Center,
                        flexWrap: G.K.NoWrap
                    }, C.createElement(G.V, {
                        display: G.H.Flex,
                        flexWrap: G.K.NoWrap
                    }, C.createElement(G.V, {
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, C.createElement(G._23, null, Object(m.d)("Hosting", "ChatHostingNotification"))), C.createElement(G.V, {
                        ellipsis: !0,
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, C.createElement(G._23, {
                        type: G._28.Strong,
                        "data-test-selector": "hosting-notification__text",
                        "data-a-target": "hosting-notification-channel-name"
                    }, "" + this.props.hostedChannelDisplayName))), C.createElement(G.V, {
                        display: G.H.Flex,
                        flexWrap: G.K.NoWrap,
                        flexShrink: 0
                    }, C.createElement(G.V, {
                        display: G.H.Inline,
                        padding: {
                            right: .5
                        }
                    }, C.createElement(G.u, {
                        linkTo: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                content: "host_channel",
                                medium: "chat_bar_notification"
                            }
                        },
                        size: G.x.Small,
                        "data-a-target": "hosting-notification-gotochannel-button"
                    }, Object(m.d)("Go to Channel", "ChatHostingNotification"))), C.createElement(G.v, {
                        onClick: this.dismiss,
                        ariaLabel: Object(m.d)("Close", "HostingNotification"),
                        size: G.x.Small,
                        overlay: !0,
                        icon: G._11.Close,
                        "data-a-target": "hosting-notification-close-button"
                    })))) : null
                }, t
            }(C.Component),
            ge = n("u8SD"),
            fe = n("Kxgf"),
            ve = n("djIP"),
            be = n("pV+t"),
            ke = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getInvalidUserMessage = function() {
                        return Object(m.d)("No user matching that login.", "IgnoreCommandHandler")
                    }, t.blockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("You cannot ignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: a(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.blockUserMutation(e, ve.b.Other, ve.a.Chat, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(m.d)("Unable to ignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(m.d)("User successfully ignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("Please specify a user to ignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t.unblockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("You cannot unignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: a(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.unblockUserMutation(e, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(m.d)("Unable to unignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(m.d)("User successfully unignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("Please specify a user to unignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return C.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, C.createElement(I, {
                        command: "ignore",
                        handler: this.blockUser
                    }), C.createElement(I, {
                        command: "unignore",
                        handler: this.unblockUser
                    }))
                }, t = u.__decorate([Object(S.a)(be, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.currentUserLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.currentUserLogin
                    }
                })], t)
            }(C.Component),
            ye = Object(_.compose)(Object(fe.a)(), Object(ge.a)())(ke),
            Ce = n("+Znq"),
            Se = n("9u8h"),
            _e = (n("q4rf"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestFailed: !1
                    }, t.logger = m.n.logger.withCategory("orbis"), t.onClickInteraction = function(e) {
                        t.props.sendMessage(":act " + e.currentTarget.getAttribute("data-action")), t.toggleBalloonRef.toggleBalloon()
                    }, t.setToggleBalloonRef = function(e) {
                        return t.toggleBalloonRef = e
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.isLoggedIn && this.props.firstPageLoaded && this.getChatProperties()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.isLoggedIn && !this.props.firstPageLoaded && e.firstPageLoaded && this.getChatProperties()
                }, t.prototype.render = function() {
                    return this.props.isLoggedIn && !this.state.requestFailed && this.hasInteractions() ? C.createElement(G._19, {
                        className: "orbis",
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        alignItems: G.c.Stretch,
                        background: G.m.Base,
                        flexShrink: 0,
                        borderBottom: !0
                    }, C.createElement(Ce.a, {
                        ref: this.setToggleBalloonRef
                    }, C.createElement("div", {
                        className: "orbis__dropdown-container",
                        "data-test-selector": "orbis-dropdown-container"
                    }, C.createElement(G.V, {
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: G.H.Flex,
                        justifyContent: G.U.Between,
                        flexWrap: G.K.NoWrap
                    }, C.createElement(G.V, {
                        ellipsis: !0,
                        padding: {
                            right: 1
                        }
                    }, C.createElement(G._23, {
                        type: G._28.Span
                    }, Object(m.d)("Interactions Available", "Orbis"))), C.createElement(G.V, {
                        display: G.H.Flex,
                        justifyContent: G.U.Between,
                        alignItems: G.c.Center,
                        flexShrink: 0
                    }, C.createElement(G.V, {
                        className: "orbis__dropdown-icon",
                        display: G.H.Flex,
                        justifyContent: G.U.Between,
                        alignItems: G.c.Center
                    }, C.createElement(G._10, {
                        asset: G._11.AngleRight
                    }))))), C.createElement(G.p, {
                        offsetY: "1px",
                        noTail: !0
                    }, C.createElement(G.V, {
                        className: "orbis__dropdown-content",
                        padding: 1
                    }, this.renderInteractions())))) : null
                }, t.prototype.renderInteractions = function() {
                    return this.state.chatProperties ? [this.renderInteraction(this.state.chatProperties.sce_title_preset_text_1), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_2), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_3), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_4), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_5)] : null
                }, t.prototype.renderInteraction = function(e) {
                    return e ? C.createElement(G.T, {
                        onClick: this.onClickInteraction,
                        key: e,
                        "data-action": e,
                        "data-test-selector": "orbis-interaction"
                    }, C.createElement(G.Q, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, C.createElement(G._23, {
                        ellipsis: !0
                    }, e))) : null
                }, t.prototype.getChatProperties = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return u.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, Se.a.get("/api/channels/" + this.props.channelLogin + "/chat_properties?on_site=1")];
                                case 1:
                                    return (e = n.sent()).requestError ? (this.logger.error(e.requestError, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.error ? (this.logger.error(new Error("Chat Properties Error"), "The API returned a non-200 response", e.error), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.body ? (this.setState({
                                        chatProperties: e.body
                                    }), [3, 3]) : (this.logger.error(new Error("Chat Properties Error"), "Body is undefined"), this.setState({
                                        requestFailed: !0
                                    }), [2]);
                                case 2:
                                    return t = n.sent(), this.logger.error(t, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.hasInteractions = function() {
                    return !!this.state.chatProperties && !!(this.state.chatProperties.sce_title_preset_text_1 || this.state.chatProperties.sce_title_preset_text_2 || this.state.chatProperties.sce_title_preset_text_3 || this.state.chatProperties.sce_title_preset_text_4 || this.state.chatProperties.sce_title_preset_text_5)
                }, t
            }(C.Component)),
            Ee = Object(k.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isLoggedIn: Object(y.d)(e)
                }
            })(_e),
            we = n("CIox"),
            Ne = n("+xm8"),
            De = n("f2i/"),
            Oe = function() {
                return function() {}
            }(),
            Te = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.joinedRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.joinedRaids = t.joinedRaids), n
                }
                return u.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return this.joinedRaids.has(e.id) || this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        joinedRaids: this.joinedRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.add(e.id);
                    var a = this.getStorageData();
                    return a[e.id] = !0, this.setStorageData(a), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.delete(e.id);
                    var a = this.getStorageData();
                    return delete a[e.id], this.setStorageData(a), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    m.k.set("raid", e)
                }, t.prototype.getStorageData = function() {
                    return m.k.get("raid", {})
                }, t
            }(Oe),
            Ie = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.leftRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.leftRaids = t.leftRaids), n
                }
                return u.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return !this.leftRaids.has(e.id) && !this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        leftRaids: this.leftRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.delete(e.id);
                    var a = this.getStorageData();
                    return delete a[e.id], this.setStorageData(a), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.add(e.id);
                    var a = this.getStorageData();
                    return a[e.id] = !0, this.setStorageData(a), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    m.k.set("raids-left", e)
                }, t.prototype.getStorageData = function() {
                    return m.k.get("raids-left", {})
                }, t
            }(Oe),
            Le = 3,
            Me = 5,
            xe = "raid_update",
            Fe = function() {
                function e(e, t) {
                    this.message = e, this.id = e.raid.id, this.creatorID = e.raid.creator_id, this.sourceChannelID = e.raid.source_id, this.targetChannelID = e.raid.target_id, this.viewerCount = e.raid.viewer_count, t ? (this.varianceSeconds = t.varianceSeconds, this.totalDurationInSeconds = t.totalDurationInSeconds, this.clientCreatedAtTimestamp = t.clientCreatedAtTimestamp) : (this.varianceSeconds = Math.round(Math.random() * Le * 2 - Le), this.totalDurationInSeconds = this.getTotalDurationInSeconds(e.raid.remaining_duration_seconds), this.clientCreatedAtTimestamp = (new Date).getTime()), this.isAnnouncing = e.type === xe && this.totalDurationInSeconds > 0, this.hasTimeToJoin = this.totalDurationInSeconds > Me
                }
                return e.prototype.withMessage = function(t) {
                    return this.id !== t.raid.id ? new e(t) : new e(t, this)
                }, e.prototype.getRemainingJoinTime = function(e) {
                    void 0 === e && (e = new Date);
                    var t = e.getTime() - this.clientCreatedAtTimestamp;
                    return 1e3 * this.totalDurationInSeconds - t
                }, e.prototype.getTotalDurationInSeconds = function(e) {
                    var t = e + this.varianceSeconds;
                    return Math.max(t, 0)
                }, e
            }(),
            je = "https://api.twitch.tv/kraken",
            Ae = n("O0Qc"),
            Be = (n("z7Cp"), {
                "data-test-selector": "countdown-fill-width"
            }),
            Re = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this,
                        t = this.props.startPolling || setInterval;
                    this.intervalID = t(function() {
                        return e.forceUpdate()
                    }, 1e3)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.intervalID)
                }, t.prototype.componentDidUpdate = function() {
                    this.props.getRemainingTime() <= 0 && this.props.onCountdownEnd()
                }, t.prototype.render = function() {
                    var e = this.countdownPercentage + "%";
                    return C.createElement("div", {
                        className: "raid-countdown-bar"
                    }, C.createElement("div", u.__assign({
                        className: "raid-countdown-bar__fill",
                        style: {
                            width: e
                        }
                    }, Be)))
                }, Object.defineProperty(t.prototype, "countdownPercentage", {
                    get: function() {
                        return this.props.getRemainingTime() / this.props.totalCountdownTime * 100
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(C.PureComponent),
            Ue = (n("mR/9"), {
                medium: "twitch_channel",
                content: "raid_channel"
            }),
            Ve = n("UMQJ"),
            Pe = Object(S.a)(Ve, {
                options: function(e) {
                    return {
                        variables: {
                            sourceChannelID: e.raid.sourceChannelID,
                            targetChannelID: e.raid.targetChannelID
                        }
                    }
                }
            })(function(e) {
                if (e.data.loading || e.data.error) return C.createElement("div", null);
                var t = e.component,
                    n = u.__rest(e, ["component"]);
                return C.createElement(t, u.__assign({}, n))
            }),
            He = {
                "data-test-selector": "current-raiders"
            },
            We = function(e) {
                return function(t) {
                    return C.createElement(Pe, u.__assign({}, t, {
                        component: e
                    }))
                }
            }(function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRemainingTime = function() {
                        return t.props.raid.getRemainingJoinTime()
                    }, t.handleCountdownEnd = function() {
                        t.props.onRaidInvitePeriodOver(t.props.data.targetChannel.displayName)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    ! function(e) {
                        i(W.SpadeEventType.RaidPromptImpression, e)
                    }(this.props.raid)
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.sourceChannel,
                        n = e.targetChannel;
                    return C.createElement(G._19, {
                        className: "raid-notification",
                        background: G.m.AccentAlt2,
                        color: G.F.Overlay,
                        position: G._4.Absolute,
                        zIndex: G._39.Above,
                        fullWidth: !0
                    }, C.createElement(G.V, {
                        className: "raid-notification__content",
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: G.H.Flex,
                        justifyContent: G.U.Between
                    }, C.createElement(G.V, {
                        alignItems: G.c.Center,
                        display: G.H.Flex
                    }, C.createElement(G.l, {
                        size: 36,
                        imageSrc: t.profileImageURL,
                        imageAlt: t.displayName
                    }), C.createElement(G._10, {
                        asset: G._11.AngleRight,
                        height: 10
                    }), C.createElement(G.l, {
                        size: 36,
                        imageSrc: n.profileImageURL,
                        imageAlt: n.displayName
                    }), C.createElement(G.V, {
                        padding: {
                            left: 1
                        }
                    }, C.createElement(G._23, {
                        color: G.F.OverlayAlt,
                        type: G._28.P,
                        className: "raid-notification__channel-name"
                    }, Object(m.d)("{sourceDisplayName} is", {
                        sourceDisplayName: t.displayName
                    }, "RaidCTASourceChannel")), C.createElement(G._23, null, Object(m.d)("raiding {targetDisplayName}", {
                        targetDisplayName: n.displayName
                    }, "RaidCTATargetChannel")), C.createElement(G._23, u.__assign({
                        bold: !0
                    }, He), Object(m.d)("{viewerCount, plural, one {# raider} other {# raiders}}", {
                        viewerCount: this.props.raid.viewerCount
                    }, "RaidCTATotalRaiders")))), this.props.children), C.createElement(Re, {
                        totalCountdownTime: 1e3 * this.props.raid.totalDurationInSeconds,
                        getRemainingTime: this.getRemainingTime,
                        onCountdownEnd: this.handleCountdownEnd
                    }))
                }, t
            }(C.Component)),
            qe = {
                "data-test-selector": "raid-cancel-button"
            },
            Ge = function(e) {
                return C.createElement(G.V, {
                    alignSelf: G.d.Center
                }, C.createElement(G.u, u.__assign({
                    size: G.x.Large,
                    type: G.z.Hollow,
                    overlay: !0,
                    onClick: e.onCancelRaid
                }, qe), Object(m.d)("Cancel", "RaidCTACancel")))
            },
            ze = n("bQ8d"),
            Qe = {
                "data-test-selector": "join-raid-button"
            },
            Je = {
                "data-test-selector": "leave-raid-button"
            },
            $e = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.timerID = 0, t.handleLeaveRaid = function() {
                        clearTimeout(t.timerID), t.props.onLeaveRaid()
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.hasJoined && (this.timerID = setTimeout(this.props.onJoinRaid, Object(ze.a)(5e3)))
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.timerID)
                }, t.prototype.render = function() {
                    return this.props.hasJoined ? C.createElement(G.V, {
                        alignSelf: G.d.Center
                    }, C.createElement(G.u, u.__assign({
                        size: G.x.Large,
                        type: G.z.Hollow,
                        overlay: !0,
                        onClick: this.handleLeaveRaid
                    }, Je), Object(m.d)("Leave", "RaidCTALeave"))) : C.createElement(G.V, {
                        alignSelf: G.d.Center
                    }, C.createElement(G.u, u.__assign({
                        size: G.x.Large,
                        onClick: this.props.onJoinRaid
                    }, Qe), Object(m.d)("Join", "RaidCTAJoin")))
                }, t
            }(C.Component),
            Ke = n("jML9"),
            Ye = n("OAwv"),
            Ze = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        raidStorage: new Te
                    }, t.unsubscribe = function() {}, t.handlePubsubMessage = function(e) {
                        t.setState(function(t) {
                            return t.raid ? u.__assign({}, t, {
                                raid: t.raid.withMessage(e)
                            }) : u.__assign({}, t, {
                                raid: new Fe(e)
                            })
                        })
                    }, t.handleRaidInvitePeriodOver = function(e) {
                        var n = t.hasJoinedCurrentRaid;
                        if (t.state.raid && t.setState({
                                raidStorage: t.state.raidStorage.expireRaid(t.state.raid)
                            }), n) {
                            var a = function(e, t) {
                                var n;
                                if (function(e) {
                                        return !e.split("/")[2]
                                    }(e.pathname)) n = "/" + t;
                                else {
                                    if (! function(e) {
                                            return /^\/.+\/chat$/.test(e)
                                        }(e.pathname)) return "";
                                    n = "/" + t + "/chat"
                                }
                                var a = u.__assign({}, Ye.parse(e.search), {
                                    referrer: "raid"
                                });
                                return n + "?" + Ye.stringify(a)
                            }(t.props.history.location || window.location, e);
                            a && t.props.history.push(a, Ue)
                        }
                    }, t.handleJoinRaid = function() {
                        if (t.state.raid) {
                            var e = t.state.raid.id;
                            t.props.authToken ? (! function(e, t) {
                                var n = {
                                    headers: {
                                        "Client-ID": m.n.config.legacyClientID,
                                        Authorization: "OAuth " + t,
                                        Accept: "application/vnd.twitchtv.v5+json"
                                    },
                                    method: "POST"
                                };
                                fetch(je + "/raids/" + e + "/join", n)
                            }(e, t.props.authToken), function(e) {
                                i(W.SpadeEventType.RaidPromptJoin, e)
                            }(t.state.raid), t.setState({
                                raidStorage: t.state.raidStorage.joinRaid(t.state.raid)
                            })) : t.props.login()
                        }
                    }, t.handleLeaveRaid = function() {
                        if (t.state.raid) {
                            ! function(e, t) {
                                var n = {
                                    headers: {
                                        "Client-ID": m.n.config.legacyClientID,
                                        Authorization: "OAuth " + t,
                                        Accept: "application/vnd.twitchtv.v5+json"
                                    },
                                    method: "POST"
                                };
                                fetch(je + "/raids/" + e + "/leave", n)
                            }(t.state.raid.id, t.props.authToken),
                            function(e) {
                                i(W.SpadeEventType.RaidPromptLeave, e)
                            }(t.state.raid), t.setState({
                                raidStorage: t.state.raidStorage.leaveRaid(t.state.raid)
                            })
                        }
                    }, t.handleCancelRaid = function() {
                        t.state.raid && t.props.send(Ae.a)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.subscribe(), [4, m.n.experiments.getAssignment("TWILIGHT_RAID_AUTO_JOIN")];
                                case 1:
                                    return "yes" === e.sent() && this.setState({
                                        raidStorage: new Ie
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return this.shouldRenderRaidNotification ? C.createElement(We, {
                        raid: this.state.raid,
                        onRaidInvitePeriodOver: this.handleRaidInvitePeriodOver
                    }, this.renderCTAButton()) : null
                }, t.prototype.componentWillUnmount = function() {
                    this.unsubscribe()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.props.channelID !== e.channelID && (this.unsubscribe(), this.setState({
                        raid: void 0
                    }, function() {
                        return t.subscribe()
                    }))
                }, t.prototype.subscribe = function() {
                    this.unsubscribe = m.n.pubsub.subscribe({
                        topic: Object(H.g)(this.props.channelID),
                        onMessage: this.handlePubsubMessage
                    })
                }, t.prototype.renderCTAButton = function() {
                    return this.isRaidCreator ? C.createElement(Ge, {
                        onCancelRaid: this.handleCancelRaid
                    }) : C.createElement($e, {
                        onJoinRaid: this.handleJoinRaid,
                        onLeaveRaid: this.handleLeaveRaid,
                        hasJoined: this.hasJoinedCurrentRaid
                    })
                }, Object.defineProperty(t.prototype, "shouldRenderRaidNotification", {
                    get: function() {
                        var e = this.state.raid;
                        return e && e.isAnnouncing && !this.state.raidStorage.isExpired(e) && (e.hasTimeToJoin || this.hasJoinedCurrentRaid)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isRaidCreator", {
                    get: function() {
                        var e = this.state.raid;
                        return e && this.props.data && this.props.data.user && this.props.data.user.id === e.creatorID
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "hasJoinedCurrentRaid", {
                    get: function() {
                        var e = this.state.raid;
                        return !(!e || !this.props.authToken) && (this.isRaidCreator || this.state.raidStorage.hasJoined(e))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(C.Component),
            Xe = Object(S.a)(Ke, {
                skip: function(e) {
                    return !e.authToken
                }
            })(Ze),
            et = Object(k.a)(function(e) {
                return {
                    authToken: Object(y.a)(e)
                }
            }, function(e) {
                return Object(E.bindActionCreators)({
                    login: function() {
                        return Object(De.f)(Ne.a.RaidJoin)
                    }
                }, e)
            })(Xe),
            tt = Object(we.e)(et),
            nt = n("WIs4"),
            at = n("aSvS"),
            it = n("rIzn"),
            rt = n("J7iJ"),
            st = n("KfLc"),
            ot = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return C.createElement(G._19, {
                        background: G.m.Base,
                        color: G.F.Alt
                    }, C.createElement(G.V, {
                        padding: {
                            bottom: .5,
                            top: 1,
                            x: 1
                        }
                    }, C.createElement(G.V, {
                        margin: {
                            bottom: .5
                        }
                    }, C.createElement(G._23, {
                        bold: !0,
                        type: G._28.H5
                    }, Object(m.d)("Introducing: New Chatter Announcements!", "RitualsOnboardingSticky"))), C.createElement(G.V, {
                        margin: {
                            bottom: .5
                        }
                    }, C.createElement(G._23, {
                        type: G._28.Span
                    }, Object(m.d)("New chatter announcements are now active in your channel, making it easier to welcome new people.", "RitualsOnboardingSticky")), C.createElement(G._23, null, C.createElement(de.a, {
                        onClick: this.props.onClick,
                        to: "/" + this.props.channelLogin + "/dashboard/settings",
                        "data-test-selector": "rituals-sticky-link"
                    }, Object(m.d)("Manage in Dashboard", "RitualsOnboardingSticky"))))), C.createElement(G._19, {
                        alignItems: G.c.Center,
                        background: G.m.Alt2,
                        borderBottom: !0,
                        color: G.F.Alt2,
                        display: G.H.Flex,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, C.createElement(G._10, {
                        asset: G._11.Lock,
                        height: 12,
                        width: 12
                    }), C.createElement(G.V, {
                        display: G.H.Inline,
                        margin: {
                            left: .5
                        }
                    }, C.createElement(G._23, {
                        fontSize: G.L.Size8,
                        type: G._28.Span
                    }, Object(m.d)("You see this because you own this channel", "RitualsOnboardingSticky")))), C.createElement(G._19, {
                        attachRight: !0,
                        attachTop: !0,
                        padding: {
                            x: .5,
                            top: 1
                        },
                        position: G._4.Absolute
                    }, C.createElement(G.v, {
                        ariaLabel: Object(m.d)("Close", "RitualsOnboardingSticky"),
                        icon: G._11.Close,
                        onClick: this.props.onDismiss,
                        size: G.x.Small,
                        type: G.w.Secondary,
                        "data-test-selector": "rituals-sticky-dismiss-button"
                    })))
                }, t
            }(C.PureComponent),
            lt = "seenNewChatterAnnouncementSticky",
            ct = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.onClick = function() {
                        Object(st.c)({
                            action: at.a.Click,
                            channelID: t.props.channelID
                        })
                    }, t.onDismiss = function() {
                        m.k.set(lt, !0), t.setState({
                            isDismissed: !0
                        }), Object(st.c)({
                            action: at.a.Dismiss,
                            channelID: t.props.channelID
                        })
                    }, t.state.isDismissed = m.k.get(lt, !1), t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return !this.props.data || this.props.data.loading || this.props.data.error ? null : this.props.data.channel.settings.isRitualsEnabled ? this.state.isDismissed ? null : C.createElement(ot, {
                        channelLogin: this.props.channelLogin,
                        onClick: this.onClick,
                        onDismiss: this.onDismiss
                    }) : null
                }, t
            }(C.Component),
            dt = Object(_.compose)(Object(k.a)(function(e) {
                var t = Object(y.c)(e);
                return {
                    currentUserID: t && t.id
                }
            }, null), Object(S.a)(rt, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: r
            }), Object(nt.a)(function(e) {
                return {
                    query: rt,
                    variables: {
                        id: e.channelID
                    },
                    topic: Object(H.h)(e.channelID),
                    type: V.c.UpdatedChannelChatProperty,
                    mutator: function(e, t) {
                        return t.channel.settings.isRitualsEnabled = e.data.is_rituals_enabled, t
                    },
                    skip: r(e)
                }
            }))(ct),
            ut = n("uXDg"),
            pt = n("QPF3"),
            mt = n("qzJ+"),
            ht = n("m4HT"),
            gt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleWhisperCommand = function(e) {
                        var n = Object(Ae.o)(e),
                            a = n.recipientLogin,
                            i = n.body;
                        if (!a || !i) return {
                            preserveInput: !0,
                            deferred: Promise.resolve({
                                notice: Object(m.d)('Usage: "/w [login] [message]"', "WhisperCommandHandler")
                            })
                        };
                        if (t.props.isEmbedded || t.props.isPopout) return {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("Please use the whisper window for whispers.", "WhisperCommandHandler")
                            })
                        };
                        if (a.toLowerCase() === t.props.userLogin) return {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("You cannot whisper to yourself.", "WhisperCommandHandler")
                            })
                        };
                        if (t.props.userID) return t.initiateWhisper(a, i)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return C.createElement(I, {
                        command: "w",
                        handler: this.handleWhisperCommand
                    })
                }, t.prototype.initiateWhisper = function(e, t) {
                    var n = this;
                    return {
                        deferred: new Promise(function(i, r) {
                            return u.__awaiter(n, void 0, void 0, function() {
                                var n, s, o, l;
                                return u.__generator(this, function(c) {
                                    switch (c.label) {
                                        case 0:
                                            return c.trys.push([0, 2, , 3]), [4, a(e)];
                                        case 1:
                                            return n = c.sent(), [3, 3];
                                        case 2:
                                            return s = c.sent(), m.i.warn(s, "Failed to fetch user targeted by whisper command.", {
                                                recipientLogin: e
                                            }), [2, r(s)];
                                        case 3:
                                            return n ? [3, 4] : [2, i({
                                                notice: Object(m.d)("No user matching that login.", "WhisperCommandHandler")
                                            })];
                                        case 4:
                                            return c.trys.push([4, 6, , 7]), [4, Object(mt.a)({
                                                currentUserID: this.props.userID,
                                                emotes: this.props.emoteMap || {},
                                                message: t,
                                                recipientUserID: n
                                            })];
                                        case 5:
                                            return c.sent(), [3, 7];
                                        case 6:
                                            return o = c.sent(), m.i.error(o, "Failed to send whisper using whisper command.", {
                                                currentUserID: this.props.userID,
                                                recipientUserID: n
                                            }), [2, i({
                                                notice: Object(m.d)("Unable to send Whisper at this moment.", "WhisperCommandHandler")
                                            })];
                                        case 7:
                                            return l = Object(ht.a)(this.props.userID, n), this.props.openThread(l), [2, i({})]
                                    }
                                })
                            })
                        })
                    }
                }, t
            }(C.Component),
            ft = Object(k.a)(null, function(e) {
                return Object(E.bindActionCreators)({
                    openThread: function(e) {
                        return Object(ut.l)({
                            threadID: e,
                            collapsed: !0
                        }, Object(pt.a)())
                    }
                }, e)
            })(gt),
            vt = n("qkCi"),
            bt = n("NPzy"),
            kt = 200,
            yt = function() {
                return function(e) {
                    var t = this;
                    this.resetWithChannelID = function(e) {
                        t.activeChatterIDs = new Set, t.activeChatters = {}, t.channelID = e, t.currentUserID = null, t.isDirty = !0
                    }, this.getActiveChatters = function() {
                        return t.isDirty = !1, Object.keys(t.activeChatters).map(function(e) {
                            return t.activeChatters[e]
                        })
                    }, this.setCurrentUserID = function(e) {
                        t.currentUserID = e, t.activeChatterIDs.has(e) && (t.isDirty = !0, t.removeActiveChatter(e))
                    }, this.consumeChatEvent = function(e) {
                        switch (e.type) {
                            case vt.a.Action:
                            case vt.a.Post:
                            case vt.a.PostWithMention:
                            case vt.a.Resubscription:
                            case vt.a.Subscription:
                                var n = e;
                                t.handleActiveChatter(n.user);
                                break;
                            case vt.a.Ritual:
                                var a = e.message;
                                t.handleActiveChatter(a.user)
                        }
                    }, this.handleActiveChatter = function(e) {
                        e.userID && e.userID !== t.channelID && e.userID !== t.currentUserID && (t.activeChatterIDs.has(e.userID) ? (t.activeChatterIDs.delete(e.userID), t.addActiveChatter(e)) : (t.addActiveChatter(e), t.trimActiveChatters(), t.isDirty = !0))
                    }, this.addActiveChatter = function(e) {
                        e.userID && (t.activeChatterIDs.add(e.userID), t.activeChatters[e.userID] = e)
                    }, this.removeActiveChatter = function(e) {
                        t.activeChatterIDs.delete(e), delete t.activeChatters[e]
                    }, this.trimActiveChatters = function() {
                        if (!(t.activeChatterIDs.size <= kt))
                            for (var e = t.activeChatterIDs.size - kt, n = t.activeChatterIDs.values(), a = 0; a < e; a++) {
                                var i = n.next().value;
                                t.removeActiveChatter(i)
                            }
                    }, this.resetWithChannelID(e)
                }
            }(),
            Ct = n("mwvJ"),
            St = 1e3,
            _t = 250,
            Et = 0,
            wt = 200,
            Nt = function() {
                function e(e, t) {
                    void 0 === e && (e = _t), void 0 === t && (t = function() {});
                    var n = this;
                    this.maxSize = e, this.onBufferUpdate = t, this.setDelay = function(e) {
                        n.delayDuration = e
                    }, this.setCurrentUserLogin = function(e) {
                        n.currentUserLogin = e
                    }, this.consumeChatEvent = function(e) {
                        var t = !1;
                        switch (e.type) {
                            case vt.a.Action:
                            case vt.a.Post:
                            case vt.a.PostWithMention:
                                var a = e;
                                if (a.user.userID && n.blockedUsers.has(a.user.userID)) return;
                                var i = a.messageParts[0];
                                if (i && i.type === Ct.a.Text && i.content.startsWith(":act ")) return;
                                t = !n.isOwnMessage(a);
                                break;
                            case vt.a.Resubscription:
                                var r = e;
                                t = !n.isOwnMessage(r) && void 0 !== r.messageParts;
                                break;
                            case vt.a.Ban:
                            case vt.a.Timeout:
                                var s = e.userLogin;
                                if (n.moderatedUsers.has(s)) return;
                                [n.buffer, n.delayedMessageBuffer.map(function(e) {
                                    return e.event
                                })].forEach(function(e) {
                                    e.forEach(function(e) {
                                        e.user && s === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0)
                                    })
                                }), n.moderatedUsers.add(s), setTimeout(n.unmoderateUser(s), St);
                                break;
                            case vt.a.Disconnected:
                                return;
                            case vt.a.Reconnect:
                                if (n.buffer.find(function(t) {
                                        return t.id === e.id
                                    }) || n.delayedMessageBuffer.find(function(t) {
                                        return t.event.id === e.id
                                    })) return;
                                break;
                            case vt.a.Clear:
                                n.delayedMessageBuffer = [], n.buffer = []
                        }
                        n.delayedMessageBuffer.push({
                            event: e,
                            time: Date.now(),
                            shouldDelay: t
                        })
                    }, this.unmoderateUser = function(e) {
                        return function() {
                            n.moderatedUsers.delete(e)
                        }
                    }, this.isOwnMessage = function(e) {
                        var t = e.user;
                        return !(!n.currentUserLogin || !t || t.userLogin !== n.currentUserLogin)
                    }, this.delayedMessageBuffer = [], this.buffer = [], this.moderatedUsers = new Set, this.blockedUsers = new Set, this._isDirty = !1, this.throttlingDuration = wt, this.delayDuration = Et, this.currentUserLogin = null, this.flushInterval = setInterval(function() {
                        return n.flushRawMessages()
                    }, this.throttlingDuration), this.setBlockedUsers = this.setBlockedUsers.bind(this)
                }
                return e.prototype.shutdown = function() {
                    this.flushInterval && clearInterval(this.flushInterval)
                }, e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e.prototype.toArray = function() {
                    return this.buffer = this.buffer.slice(-this.maxSize), this._isDirty = !1, this.buffer
                }, e.prototype.isDeletable = function(e) {
                    return void 0 !== e.deleted
                }, e.prototype.flushRawMessages = function() {
                    var e = this,
                        t = [],
                        n = Date.now();
                    this.delayedMessageBuffer.forEach(function(a) {
                        var i = a.event,
                            r = a.time,
                            s = a.shouldDelay;
                        r <= n - e.delayDuration || !s ? e.isDeletable(i) && i.deleted || (e.buffer.push(i), e._isDirty = !0, e.onBufferUpdate()) : t.push({
                            event: i,
                            time: r,
                            shouldDelay: s
                        })
                    }), this.delayedMessageBuffer = t
                }, Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "moderatedUserCount", {
                    get: function() {
                        return this.moderatedUsers.size
                    },
                    enumerable: !0,
                    configurable: !0
                }), e
            }(),
            Dt = n("INp2"),
            Ot = n("6Agf"),
            Tt = n("aUOx"),
            It = n("l21v"),
            Lt = n("Ncf8"),
            Mt = n("YhVV"),
            xt = function() {
                function e(e, t, n) {
                    var a = this;
                    this.onJoinedEvent = function(e) {
                        return a.postMessage({
                            type: vt.a.Connected,
                            id: Object(Dt.a)("connected")
                        })
                    }, this.onDisconnectedEvent = function(e) {
                        return a.postMessage(function(e) {
                            return {
                                type: vt.a.Disconnected,
                                id: Object(Dt.a)("disconnected"),
                                reason: e
                            }
                        }(e.reason))
                    }, this.onReconnectingEvent = function(e) {
                        return a.postMessage({
                            type: vt.a.Reconnect,
                            id: Object(Dt.a)("reconnect")
                        })
                    }, this.onHostingEvent = function(e) {
                        return a.postMessage(function(e) {
                            return {
                                type: vt.a.Hosting,
                                id: Object(Dt.a)("hosting"),
                                hostedChannel: e
                            }
                        }(e.target))
                    }, this.onUnhostEvent = function(e) {
                        return a.postMessage(function(e) {
                            return {
                                type: vt.a.Unhost,
                                id: Object(Dt.a)("unhost-" + e)
                            }
                        }(e.channel))
                    }, this.onChatMessageEvent = function(e) {
                        a.postMessage(a.convertMessage(e))
                    }, this.onChatActionEvent = function(e) {
                        var t = a.bitsConfig || A.a,
                            n = e.message.user.username === a.userLogin ? a.selfEmotes : void 0,
                            i = s(vt.a.Action, e.action, e.message.user, t, a.shouldBlockLinks(e.message.user), n);
                        a.postMessage(i)
                    }, this.onChatNoticeEvent = function(e) {
                        var t = function(e, t, n) {
                            return {
                                type: vt.a.Notice,
                                id: Object(Dt.a)("notice"),
                                channel: e,
                                msgid: t,
                                message: n
                            }
                        }(e.channel, e.msgid, e.body);
                        a.postMessage(t)
                    }, this.onTimeoutEvent = function(e) {
                        a.onModerationEvent(vt.a.Timeout, e)
                    }, this.onBanEvent = function(e) {
                        a.onModerationEvent(vt.a.Ban, e)
                    }, this.onModerationEvent = function(e, t) {
                        a.postMessage(Object(Lt.a)(e, t.userLogin, t.reason, t.duration))
                    }, this.onSubscriptionEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "$4.99"
                        }
                        a.postMessage(function(e, t, n, a, i) {
                            var r = Object(It.a)("", i, A.a, !1);
                            return u.__assign({}, r, {
                                type: vt.a.Subscription,
                                id: Object(Dt.a)(t + "-sub"),
                                channel: e.slice(1),
                                isPrime: n,
                                userLogin: t,
                                tier: a
                            })
                        }(e.channel, e.user.displayName, e.methods.prime, t, e.user))
                    }, this.onSubscriptionGiftEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "custom"
                        }
                        a.postMessage(function(e, t, n, a, i) {
                            return {
                                type: vt.a.SubGift,
                                id: Object(Dt.a)(t + "-sub"),
                                channel: e.slice(1),
                                isPrime: n,
                                userLogin: t,
                                tier: a,
                                recipient: i
                            }
                        }(e.channel, e.user.displayName, e.methods.prime, t, e.recipientName))
                    }, this.onBitsCharityEvent = function(e) {
                        a.postMessage(function(e, t, n, a, i, r) {
                            return {
                                type: vt.a.BitsCharity,
                                id: Object(Dt.a)("charity"),
                                total: e,
                                charityName: t,
                                daysLeft: n,
                                hoursLeft: a,
                                hashtag: i,
                                learnMore: r
                            }
                        }(e.total, e.charityName, e.daysLeft, e.hoursLeft, e.hashtag, e.learnMore))
                    }, this.onResubscriptionEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "$4.99"
                        }
                        a.postMessage(o(e.channel, e.user.displayName, e.methods.prime, e.months, t, e.body, e.user))
                    }, this.onRoomModsEvent = function(e) {
                        return a.postMessage(function(e) {
                            return {
                                type: vt.a.RoomMods,
                                id: Object(Dt.a)("roommods"),
                                moderatorLogins: e
                            }
                        }(e.usernames))
                    }, this.onRoomStateEvent = function(e) {
                        return a.postMessage(function(e) {
                            return {
                                type: vt.a.RoomState,
                                id: Object(Dt.a)("roomstate"),
                                state: e
                            }
                        }(e.state))
                    }, this.onSlowModeEvent = function(e) {
                        return a.postMessage(function(e, t) {
                            return {
                                type: vt.a.SlowMode,
                                id: Object(Dt.a)("slowmode"),
                                enabled: e,
                                length: t
                            }
                        }(e.enabled, e.length))
                    }, this.onEmoteOnlyModeEvent = function(e) {
                        return a.postMessage(function(e) {
                            return {
                                type: vt.a.EmoteOnlyMode,
                                id: Object(Dt.a)("emoteonlymode"),
                                enabled: e
                            }
                        }(e.enabled))
                    }, this.onFollowerOnlyModeEvent = function(e) {
                        return a.postMessage(function(e, t) {
                            return {
                                type: vt.a.FollowerOnlyMode,
                                id: Object(Dt.a)("follower-only"),
                                enabled: e,
                                length: t
                            }
                        }(e.enabled, e.length))
                    }, this.onSubscriberOnlyModeEvent = function(e) {
                        return a.postMessage(function(e) {
                            return {
                                type: vt.a.SubscriberOnlyMode,
                                id: Object(Dt.a)("subscriber-only"),
                                enabled: e
                            }
                        }(e.enabled))
                    }, this.onClearChatEvent = function(e) {
                        return a.postMessage({
                            type: vt.a.Clear,
                            id: Object(Dt.a)("clear")
                        })
                    }, this.onRaidEvent = function(e) {
                        return a.postMessage(function(e, t, n) {
                            return {
                                type: vt.a.Raid,
                                id: Object(Dt.a)("raid"),
                                channel: e,
                                userLogin: t,
                                params: n
                            }
                        }(e.channel, e.userLogin, e.params))
                    }, this.onUnraidEvent = function(e) {
                        return a.postMessage(function(e, t, n) {
                            return {
                                type: vt.a.Unraid,
                                id: Object(Dt.a)("unraid"),
                                channel: e,
                                userLogin: t,
                                message: n
                            }
                        }(e.channel, e.userLogin, e.message))
                    }, this.onRitualEvent = function(e) {
                        a.postMessage(function(e, t) {
                            return {
                                type: vt.a.Ritual,
                                id: Object(Dt.a)(t.user.userLogin + "-" + e + "-ritual"),
                                ritualType: e,
                                message: t
                            }
                        }(e.type, a.convertMessage(e)))
                    }, this.onBadgesUpdatedEvent = function(e) {
                        return a.postMessage(function(e, t) {
                            return {
                                type: vt.a.BadgesUpdated,
                                id: Object(Dt.a)("updateBadges"),
                                userName: e,
                                badges: t
                            }
                        }(e.username, e.badges))
                    }, this.onPurchaseEvent = function(e) {
                        var t = a.bitsConfig || A.a;
                        a.postMessage(function(e, t, n, a) {
                            return {
                                bitsConfig: a,
                                message: t,
                                purchase: e,
                                timestamp: n,
                                id: Object(Dt.a)(t.user.userLogin + "-purchase"),
                                type: vt.a.Purchase
                            }
                        }(e.purchase, a.convertMessage(e), e.timestamp, t))
                    }, this.onCrateEvent = function(e) {
                        a.postMessage(function(e, t) {
                            return {
                                type: vt.a.CrateGift,
                                id: Object(Dt.a)("crate"),
                                message: e,
                                selectedCount: t
                            }
                        }(a.convertMessage(e), e.selectedCount))
                    }, this.convertMessage = function(e) {
                        var t = a.bitsConfig || A.a,
                            n = e.message.user.username === a.userLogin ? a.selfEmotes : void 0;
                        return s(vt.a.Post, e.message.body, e.message.user, t, a.shouldBlockLinks(e.message.user), n)
                    }, this.logger = m.i.withCategory("chat-service"), this.logger.debug("Created"), this.userLogin = e, this.channelLogin = t, this.service = m.n.tmi, this.client = m.n.tmi.client, this.postMessage = n, this.disabled = m.n.tmi.disabled
                }
                return e.prototype.join = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Joining channel and binding all event listeners"), [4, this.service.awaitParted()];
                                case 1:
                                    return e.sent(), this.connectHandlers(), [4, this.service.join(this.channelLogin)];
                                case 2:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.part = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Parting channel and unbinding all event listeners"), this.client.events.removeAll(), [4, this.service.part(this.channelLogin)];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.sendMessage = function(e) {
                    var t = this,
                        n = Object(Ae.l)(e, this.channelLogin);
                    return n.handled ? n.result && n.result.deferred && n.result.deferred.then(function(e) {
                        var n = e.notice;
                        n && t.postMessage(Object(Tt.a)(n))
                    }) : this.client.sendCommand(this.channelLogin, e).catch(function(e) {
                        m.i.warn("Failed to send message, or message timeout", e)
                    }), n.result
                }, e.prototype.updateEmotes = function(e) {
                    this.selfEmotes = Object(Mt.a)(e), this.client.updateEmoteSets(e)
                }, e.prototype.updateChannelBadges = function(e) {
                    this.client.updateChannelBadges(this.channelLogin, e)
                }, e.prototype.updateBitsConfig = function(e) {
                    this.bitsConfig = e
                }, e.prototype.updateBlockLinks = function(e) {
                    this.blockLinks = e
                }, e.prototype.connectHandlers = function() {
                    this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.crate(this.onCrateEvent), this.client.events.ritual(this.onRitualEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.followersonly(this.onFollowerOnlyModeEvent), this.client.events.slowmode(this.onSlowModeEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent), this.client.events.emoteonlymode(this.onEmoteOnlyModeEvent), this.client.events.charity(this.onBitsCharityEvent)
                }, e.prototype.shouldBlockLinks = function(e) {
                    return e.username !== this.channelLogin && e.userType !== Ot.a.Staff && e.userType !== Ot.a.GlobalMod && e.userType !== Ot.a.Moderator && this.blockLinks
                }, e
            }(),
            Ft = function() {
                return function(e, t, n) {
                    this.channelID = e, this.sessionUserID = t, this.unsubscribe = m.j.subscribe({
                        topic: Object(H.d)(this.sessionUserID, this.channelID),
                        onMessage: function(e) {
                            switch (e.data.moderation_action) {
                                case V.b.AutoModRejected:
                                    var t = function(e, t, n, a) {
                                        var i = {
                                                badges: null,
                                                bits: 0,
                                                color: "",
                                                displayName: "",
                                                id: "",
                                                userID: n,
                                                username: n,
                                                userType: Ot.a.User,
                                                emotes: null
                                            },
                                            r = Object(It.a)(t, i, A.a, !1);
                                        return {
                                            type: vt.a.AutoModRejectedPrompt,
                                            id: function(e) {
                                                return e + "-automod-rejected"
                                            }(e),
                                            category: a,
                                            isAutoModAction: !0,
                                            rejectedMessage: u.__assign({}, r, {
                                                type: vt.a.Post,
                                                id: e
                                            })
                                        }
                                    }(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    n(t);
                                    break;
                                case V.e.AutoModMessageRejected:
                                    n({
                                        id: Object(Dt.a)("automod-message-rejected"),
                                        type: vt.a.AutoModMessageRejected,
                                        isTargeted: !0,
                                        isAutoModAction: !0
                                    });
                                    break;
                                case V.e.AutoModMessageApproved:
                                    n({
                                        id: Object(Dt.a)("automod-message-allowed"),
                                        type: vt.a.AutoModMessageAllowed,
                                        isTargeted: !0,
                                        isAutoModAction: !0
                                    });
                                    break;
                                case V.e.AutoModMessageDenied:
                                    n({
                                        id: Object(Dt.a)("automod-message-denied"),
                                        type: vt.a.AutoModMessageDenied,
                                        isTargeted: !0,
                                        isAutoModAction: !0
                                    })
                            }
                        }
                    })
                }
            }(),
            jt = n("QFW6"),
            At = n("CSlQ"),
            Bt = n("9fnI"),
            Rt = n("VAT8"),
            Ut = function() {
                function e() {}
                return e.fetchChannelsList = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return u.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, Se.a.get("/kraken/autohost/list")];
                                case 1:
                                    return e = n.sent(), [2, this.deserialize(e)];
                                case 2:
                                    return t = n.sent(), m.i.error(t, "Couldn't fetch autohost list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.setChannelsList = function(e) {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return u.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return a.trys.push([0, 2, , 3]), [4, Se.a.put("/kraken/autohost/list", {
                                        body: {
                                            targets: e.join(",")
                                        }
                                    })];
                                case 1:
                                    return t = a.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = a.sent(), m.i.error(n, "Couldn't update autohost list"), [2, e];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.deserialize = function(e) {
                    return e.body ? e.body.targets.map(function(e) {
                        return e._id.toString()
                    }) : []
                }, e
            }(),
            Vt = (n("7X7f"), n("QMHY")),
            Pt = "autohost-notifications-dismissed",
            Ht = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.dismiss = function() {
                        t.setState({
                            isDismissed: !0
                        }), t.track(W.SpadeEventType.AutohostChatDismiss);
                        var e = t.getAutohostNotificationsDismissed();
                        e[t.props.data.user.id] = {
                            dismissedDate: (new Date).getTime()
                        }, t.setAutohostNotificationsDismissed(e)
                    }, t.addChannelToAutohost = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return u.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, Ut.fetchChannelsList()];
                                    case 1:
                                        return e = t.sent().concat([this.props.data.user.id]), this.setState({
                                            autohostChannels: e
                                        }), Ut.setChannelsList(e), this.track(W.SpadeEventType.AutohostChatYes), [2]
                                }
                            })
                        })
                    }, t.trackSettingsClick = function() {
                        t.track(W.SpadeEventType.AutohostChatSettings)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return u.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, Ut.fetchChannelsList()];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        autohostChannels: e
                                    }), this.isShowing && this.track(W.SpadeEventType.AutohostChatImpression), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    if (!this.isShowing) return null;
                    var e = Object(m.d)("You are now hosting {channel}", {
                            channel: this.props.data.user.displayName
                        }, "AutohostPrompt"),
                        t = Object(m.d)("Auto host this channel whenever you're offline?", "AutohostPrompt"),
                        n = Object(m.d)("Yes", "AutohostPrompt"),
                        a = Object(m.d)("Settings", "AutohostPrompt");
                    return C.createElement(G._19, {
                        background: G.m.Base,
                        className: "autohost-prompt",
                        margin: {
                            x: 2
                        },
                        position: G._4.Relative
                    }, C.createElement(G.p, {
                        size: G.r.Medium,
                        direction: G.q.TopLeft,
                        show: !0
                    }, C.createElement(G._19, {
                        alignItems: G.c.Center,
                        borderBottom: !0,
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        justifyContent: G.U.Around,
                        padding: 1
                    }, C.createElement(G.V, {
                        position: G._4.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, C.createElement(G.v, {
                        ariaLabel: Object(m.d)("Close", "AutohostPrompt"),
                        size: G.x.Small,
                        type: G.w.Secondary,
                        "data-test-selector": "autohost-dismiss-button",
                        icon: G._11.Close,
                        onClick: this.dismiss
                    })), C.createElement(G.l, {
                        imageAlt: this.props.data.user.displayName,
                        imageSrc: this.props.data.user.profileImageURL,
                        size: 30
                    }), C.createElement(G.V, {
                        className: "autohost-prompt__hosting-message",
                        display: G.H.Flex,
                        padding: {
                            top: .5
                        }
                    }, C.createElement(G._10, {
                        asset: G._11.Check
                    }), C.createElement(G.Q, {
                        margin: {
                            left: .5
                        }
                    }, C.createElement(G._23, null, e)))), C.createElement(G.V, {
                        className: "autohost-prompt__prompt",
                        justifyContent: G.U.Center,
                        display: G.H.Flex,
                        padding: 1
                    }, C.createElement(G._23, null, t), C.createElement(G._34, {
                        gutterSize: G._36.ExtraSmall,
                        childWidth: G._35.Large
                    }, C.createElement("div", null, C.createElement(G.u, {
                        "data-test-selector": "autohost-yes-button",
                        fullWidth: !0,
                        onClick: this.addChannelToAutohost
                    }, n)), C.createElement("div", null, C.createElement(G.u, {
                        "data-test-selector": "autohost-settings-button",
                        fullWidth: !0,
                        onClick: this.trackSettingsClick,
                        type: G.z.Hollow,
                        linkTo: "https://twitch.tv/settings/profile"
                    }, a))))))
                }, Object.defineProperty(t.prototype, "isShowing", {
                    get: function() {
                        return !this.state.isDismissed && !!this.props.hostedChannelLogin && !this.props.data.loading && !this.props.data.error && this.props.data.user && !!this.state.autohostChannels && !this.state.autohostChannels.includes(this.props.data.user.id) && !this.getAutohostNotificationsDismissed()[this.props.data.user.id]
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.track = function(e) {
                    ! function(e, t) {
                        m.m.track(e, u.__assign({
                            time: Date.now()
                        }, t))
                    }(e, {
                        user_id: this.props.data.currentUser.id,
                        hosting_channel_id: this.props.data.currentUser.id,
                        hosted_channel_id: this.props.data.user.id
                    })
                }, t.prototype.getAutohostNotificationsDismissed = function() {
                    return m.k.get(Pt, {})
                }, t.prototype.setAutohostNotificationsDismissed = function(e) {
                    return m.k.set(Pt, e)
                }, t = u.__decorate([Object(S.a)(Vt, {
                    skip: function(e) {
                        return !e.hostedChannelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.hostedChannelLogin
                            }
                        }
                    }
                })], t)
            }(C.Component),
            Wt = n("3T7g"),
            qt = n("RbGx"),
            Gt = n("5Nu7"),
            zt = n("g7wA"),
            Qt = n("O9wU"),
            Jt = n("1OO3"),
            $t = n("l669"),
            Kt = (n("B88H"), "chat-ban-button"),
            Yt = "chat-unban-button",
            Zt = "chat-timeout-button",
            Xt = "chat-deleted-message-placeholder",
            en = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        alwaysShowMessage: !1
                    }, t.renderModerationIcons = function() {
                        if (!t.props.isCurrentUserModerator || !t.props.showModerationIcons) return null;
                        var e = t.onBanUser,
                            n = G._11.Ban,
                            a = Object(m.d)("Ban", "ChatMessageEvent"),
                            i = Kt;
                        return t.props.message.deleted && !t.state.alwaysShowMessage && (e = t.onUnbanUser, n = G._11.FollowCheck, a = Object(m.d)("Unban", "ChatMessageEvent"), i = Yt), C.createElement(G.V, {
                            display: G.H.Inline,
                            className: "chat-line__mod-icons"
                        }, C.createElement("button", {
                            className: "mod-icon",
                            onClick: e,
                            "data-a-target": i
                        }, C.createElement(G._31, {
                            label: a
                        }, C.createElement(G._10, {
                            width: 16,
                            height: 16,
                            type: G._12.Inherit,
                            asset: n
                        }))), C.createElement("button", {
                            className: "mod-icon",
                            onClick: t.timeoutUser,
                            "data-a-target": Zt
                        }, C.createElement(G._31, {
                            label: Object(m.d)("Timeout", "ChatMessageEvent")
                        }, C.createElement(G._10, {
                            width: 16,
                            height: 16,
                            type: G._12.Inherit,
                            asset: G._11.Timeout
                        }))))
                    }, t.renderMessageBody = function() {
                        if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                            var e = Object(m.d)("message deleted", "ChatLine");
                            return t.props.isCurrentUserModerator ? C.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": Xt
                            }, C.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + e + ">")) : C.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": Xt
                            }, "<" + e + ">")
                        }
                        return Object(zt.h)(t.props.message.messageParts, t.props.currentUserDisplayName, t.props.currentUserLogin)
                    }, t.onBanUser = function() {
                        t.props.onBanUser(t.props.message.user.userLogin)
                    }, t.onUnbanUser = function() {
                        t.props.onUnbanUser(t.props.message.user.userLogin)
                    }, t.timeoutUser = function() {
                        t.props.onBanUser(t.props.message.user.userLogin, 600)
                    }, t.alwaysShowMessage = function(e) {
                        e && e.preventDefault(), t.setState({
                            alwaysShowMessage: !0
                        })
                    }, t.usernameClickHandler = function() {
                        t.props.onUsernameClick(t.props.message.user.userLogin, Qt.a.chat_message, t.props.message.id)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.badgeSets,
                        n = e.className,
                        a = e.message,
                        i = e.showTimestamps,
                        r = {},
                        s = ": ";
                    a.type === vt.a.Action && (r = {
                        color: a.user.color
                    }, s = " ");
                    var o = null;
                    return i && (o = Object(zt.r)(a.timestamp)), C.createElement("div", {
                        className: R(n, "chat-line__message"),
                        style: r,
                        "data-a-target": "chat-line-message"
                    }, o, this.renderModerationIcons(), C.createElement(Wt.b, {
                        badgeSets: t,
                        badgesToRender: a.badges
                    }), C.createElement("button", {
                        onClick: this.usernameClickHandler,
                        className: "chat-line__username"
                    }, C.createElement(Gt.a, {
                        userData: a.user
                    })), C.createElement("span", {
                        key: "separator"
                    }, s), this.renderMessageBody())
                }, t
            }(C.Component),
            tn = Object(_.compose)(Object(k.a)(void 0, function(e) {
                return Object(E.bindActionCreators)({
                    onUsernameClick: v.d
                }, e)
            }), Object(Jt.a)(function(e) {
                return {
                    channelID: e.channelID,
                    onPushMessage: e.onPushMessage
                }
            }), function() {
                var e = this;
                return Object(S.a)($t, {
                    props: function(t) {
                        return {
                            onUnbanUser: function(n) {
                                return u.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return u.__generator(this, function(a) {
                                        switch (a.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 5];
                                                a.label = 1;
                                            case 1:
                                                return a.trys.push([1, 3, , 4]), [4, t.mutate(Object(P.a)({
                                                    channelID: t.ownProps.channelID,
                                                    bannedUserLogin: n
                                                }))];
                                            case 2:
                                                return a.sent(), t.ownProps.onPushMessage(Object(Tt.a)(function(e) {
                                                    return Object(m.d)("{bannedUserLogin} is no longer banned from this room.", {
                                                        bannedUserLogin: e
                                                    }, "UnbanUserMutation")
                                                }(n))), [3, 4];
                                            case 3:
                                                return e = a.sent(), m.i.error(e, "Unable to ban user"), t.ownProps.onPushMessage(Object(Tt.a)(l())), [3, 4];
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                t.ownProps.onPushMessage(Object(Tt.a)(l())), a.label = 6;
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }())(en),
            nn = n("3LYq"),
            an = n("IEOs"),
            rn = {
                badges: {
                    twitchbot: "1"
                },
                bits: 0,
                color: "#6441A5",
                displayName: "AutoMod",
                id: "automod",
                userID: "automod",
                username: "automod",
                userType: Ot.a.GlobalMod,
                emotes: null
            },
            sn = {
                VoHiYo: {
                    displayName: "VoHiYo",
                    id: "81274",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/81274/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/3.0 3.0x",
                    token: "VoHiYo"
                }
            },
            on = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isResolved: !1
                    }, t.allowAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        }), t.props.allowRejectedChatMessage && t.props.message.type === vt.a.AutoModRejectedPrompt && t.props.allowRejectedChatMessage(Object(P.a)({
                            id: t.props.message.rejectedMessage.id
                        }))
                    }, t.denyAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        }), t.props.denyRejectedChatMessage && t.props.message.type === vt.a.AutoModRejectedPrompt && t.props.denyRejectedChatMessage(Object(P.a)({
                            id: t.props.message.rejectedMessage.id
                        }))
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e;
                    switch (this.props.message.type) {
                        case vt.a.AutoModRejectedPrompt:
                            e = function(e) {
                                var t;
                                switch (e) {
                                    case "aggressive":
                                        t = Object(m.d)("aggressive", "AutoModLine");
                                        break;
                                    case "sexual":
                                        t = Object(m.d)("sexual", "AutoModLine");
                                        break;
                                    case "profanity":
                                        t = Object(m.d)("profanity", "AutoModLine");
                                        break;
                                    case "identity":
                                        t = Object(m.d)("identity", "AutoModLine");
                                        break;
                                    default:
                                        return Object(m.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
                                }
                                return Object(m.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                                    category: t
                                }, "AutoModLine")
                            }(this.props.message.category);
                            break;
                        case vt.a.AutoModMessageRejected:
                            e = Object(m.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                            break;
                        case vt.a.AutoModMessageAllowed:
                            e = Object(m.d)("Mods have allowed your message. Happy chatting!", "AutoModLine"), e += " VoHiYo";
                            break;
                        case vt.a.AutoModMessageDenied:
                            e = Object(m.d)("Mods have removed your message.", "AutoModLine");
                            break;
                        default:
                            throw new Error("Invalid message type")
                    }
                    var t = Object(It.a)(e, rn, A.a, !1, sn);
                    switch (this.props.message.type) {
                        case vt.a.AutoModRejectedPrompt:
                            if (this.state.isResolved) return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.e)());
                            var n = ["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"];
                            return C.createElement(G.V, {
                                className: "chat-line__message"
                            }, C.createElement(qt.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: t.badges
                            }), C.createElement(Gt.a, {
                                userData: t.user
                            }), C.createElement("span", {
                                key: "separator"
                            }, ": "), Object(zt.h)(t.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin), C.createElement(G.V, {
                                key: "automod-prompt",
                                className: "chat-line__nested-component--float-right"
                            }, C.createElement(G.u, {
                                size: G.x.Small,
                                onClick: this.allowAutoModRejectedMessage,
                                type: G.z.Text
                            }, Object(m.d)("Allow", "AutoModLine")), C.createElement(G._23, {
                                type: G._28.Span
                            }, "•"), C.createElement(G.u, {
                                size: G.x.Small,
                                onClick: this.denyAutoModRejectedMessage,
                                type: G.z.Text
                            }, Object(m.d)("Deny", "AutoModLine"))), C.createElement(tn, u.__assign({}, this.props, {
                                isDeleted: !1,
                                showTimestamps: !1,
                                className: R(n),
                                message: this.props.message.rejectedMessage
                            })));
                        case vt.a.AutoModMessageRejected:
                        case vt.a.AutoModMessageAllowed:
                        case vt.a.AutoModMessageDenied:
                            var a = ["chat-line__message", "chat-line__message--special", "chat-line__message--alert"];
                            return C.createElement(G.V, {
                                className: R(a)
                            }, C.createElement(qt.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: t.badges
                            }), C.createElement(Gt.a, {
                                userData: t.user
                            }), C.createElement("span", {
                                key: "separator"
                            }, ": "), Object(zt.h)(t.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin));
                        default:
                            throw new Error("Invalid message type")
                    }
                }, t
            }(C.Component),
            ln = Object(_.compose)(Object(S.a)(nn, {
                name: "allowRejectedChatMessage",
                options: {}
            }), Object(S.a)(an, {
                name: "denyRejectedChatMessage",
                options: {}
            }))(on),
            cn = n("91zu"),
            dn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.params,
                        t = this.props.data,
                        n = t.channel,
                        a = t.loading,
                        i = t.error;
                    if (a || i) return null;
                    var r = Object(m.d)("{displayName} is raiding with a party of {viewerCount}.", {
                        displayName: C.createElement("strong", null, n.displayName),
                        viewerCount: C.createElement("strong", null, e.viewerCount)
                    }, "RaidIncomingMessage");
                    return C.createElement(G.V, {
                        className: "chat-line__raid",
                        "data-test-selector": "incoming-raid"
                    }, C.createElement(G.V, {
                        display: G.H.Flex,
                        alignItems: G.c.Center
                    }, C.createElement(G.l, {
                        imageAlt: n.displayName,
                        imageSrc: n.profileImageURL,
                        size: 30
                    }), C.createElement(G._19, {
                        color: G.F.Base,
                        margin: {
                            left: 1
                        }
                    }, r)))
                }, t
            }(C.Component),
            un = Object(S.a)(cn, {
                options: function(e) {
                    return {
                        variables: {
                            channelLogin: e.message.params.login
                        }
                    }
                }
            })(dn),
            pn = function(e) {
                return C.createElement("span", null, c()[e.message.msgid])
            };
        (le || (le = {})).NewChatter = "new_chatter";
        var mn, hn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderSystemText = function() {
                        if (t.props.event.ritualType === le.NewChatter) {
                            var e = t.props.event.message,
                                n = e.user.isIntl ? e.user.userDisplayName + " (" + e.user.userLogin + ")" : e.user.userDisplayName;
                            return Object(m.d)("{user} is new here. Say hello!", {
                                user: "@" + n
                            }, "NewChatterRitual")
                        }
                        return ""
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.event.message;
                    if (e.user) {
                        var t = null;
                        e.badges && (t = C.createElement(Wt.b, {
                            badgeSets: this.props.badgeSets,
                            badgesToRender: e.badges
                        }));
                        var n = null;
                        return this.props.showTimestamps && e.timestamp && (n = Object(zt.r)(e.timestamp)), C.createElement("span", null, this.renderSystemText(), C.createElement("div", {
                            className: "chat-line__ritual--message"
                        }, n, t, C.createElement(Gt.a, {
                            userData: e.user
                        }), C.createElement("span", null, " : "), Object(zt.h)(e.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin)))
                    }
                    return null
                }, t
            }(C.Component),
            gn = n("Cn8s"),
            fn = (n("RkXA"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        drawerOpen: !1
                    }, t.renderBitsLoot = function(e) {
                        return C.createElement(G.V, {
                            key: e.quantity,
                            className: "chat-line__purchase-loot"
                        }, C.createElement(q.a, {
                            bitsConfig: t.props.bitsConfig,
                            count: e.quantity,
                            withImage: !0
                        }))
                    }, t.toggleDrawer = function() {
                        t.setState(function(e) {
                            return {
                                drawerOpen: !e.drawerOpen
                            }
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e, t = this,
                        n = this.props.purchase,
                        a = n.crateLoot,
                        i = n.numCrates,
                        r = n.purchased;
                    if (i > 0) {
                        var s = Object(m.d)("{numCrates, plural, one {Plus # Twitch Crate with {lootCount} rewards!} other {Plus # Twitch Crates with {lootCount} rewards!}}", {
                            numCrates: i,
                            lootCount: a.length
                        }, "SharePurchaseLineRewardText");
                        e = C.createElement(G.V, {
                            className: "chat-line__purchase-reward-text",
                            margin: {
                                top: .5
                            }
                        }, s)
                    }
                    var o, l = a.map(function(e) {
                        switch (e.type) {
                            case gn.a.Badge:
                                return t.renderBadgeLoot(e);
                            case gn.a.Bits:
                                return t.renderBitsLoot(e);
                            case gn.a.Emote:
                                return t.renderEmoteLoot(e);
                            case gn.a.InGameContent:
                                return t.renderIGCLoot(e);
                            default:
                                return ""
                        }
                    });
                    if (a.length <= 2) o = 0 === a.length ? "" : C.createElement(G._19, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: G.c.Center,
                        borderLeft: !0,
                        display: G.H.Flex,
                        flexDirection: G.J.Row,
                        flexShrink: 0,
                        flexWrap: G.K.NoWrap,
                        justifyContent: G.U.Center,
                        padding: .5
                    }, l);
                    else if (this.state.drawerOpen) o = C.createElement("span", {
                        className: "chat-line__purchase-loot-toggle",
                        onClick: this.toggleDrawer,
                        "data-test-selector": "purchase-loot-toggle"
                    }, C.createElement(G._19, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: G.c.Center,
                        borderLeft: !0,
                        display: G.H.Flex,
                        flexDirection: G.J.Row,
                        flexShrink: 0,
                        flexWrap: G.K.NoWrap,
                        justifyContent: G.U.Center,
                        padding: .5
                    }, C.createElement(G._10, {
                        asset: G._11.GlyphArrUp
                    })));
                    else {
                        var c = "+" + (a.length - 1);
                        o = C.createElement("span", {
                            className: "chat-line__purchase-loot-toggle",
                            onClick: this.toggleDrawer,
                            "data-test-selector": "purchase-loot-toggle"
                        }, C.createElement(G._19, {
                            className: "chat-line__purchase-loot-box",
                            alignItems: G.c.Center,
                            borderLeft: !0,
                            display: G.H.Flex,
                            flexDirection: G.J.Row,
                            flexShrink: 0,
                            flexWrap: G.K.NoWrap,
                            justifyContent: G.U.Center,
                            padding: .5
                        }, l[0], C.createElement(G._1, {
                            label: c,
                            type: G._2.Notification
                        })))
                    }
                    var d = a.length <= 2 || !this.state.drawerOpen ? "" : C.createElement(G._19, {
                        className: "chat-line__purchase-loot-drawer",
                        alignItems: G.c.Center,
                        display: G.H.Flex,
                        flexDirection: G.J.Row,
                        flexShrink: 0,
                        flexWrap: G.K.NoWrap,
                        justifyContent: G.U.End,
                        padding: .5,
                        "data-test-selector": "purchase-loot-drawer"
                    }, l);
                    return C.createElement(G._19, {
                        className: "chat-line__purchase",
                        elevation: 1,
                        margin: {
                            bottom: .5,
                            left: 2,
                            right: 2,
                            top: 0
                        }
                    }, C.createElement(G.V, {
                        display: G.H.Flex,
                        flexDirection: G.J.Row,
                        flexWrap: G.K.NoWrap
                    }, C.createElement(G.V, {
                        flexGrow: 0,
                        flexShrink: 0,
                        margin: .5
                    }, C.createElement("img", {
                        className: "chat-line__purchase-boxart",
                        src: r.boxart
                    })), C.createElement(G.V, {
                        flexGrow: 1,
                        margin: .5
                    }, C.createElement(G._19, {
                        fontSize: G.L.Size4
                    }, r.title), e), o), d)
                }, t.prototype.renderBadgeLoot = function(e) {
                    return C.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t.prototype.renderEmoteLoot = function(e) {
                    var t = "//static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/2.0";
                    return C.createElement("img", {
                        key: e.id,
                        className: "chat-line__purchase-loot",
                        src: t
                    })
                }, t.prototype.renderIGCLoot = function(e) {
                    return C.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t
            }(C.Component)),
            vn = (n("+5Qw"), "timeout_success"),
            bn = "ban_success",
            kn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return e.isCurrentUserModerator !== this.props.isCurrentUserModerator || e.showTimestamps !== this.props.showTimestamps || e.showModerationIcons !== this.props.showModerationIcons || d(e.message) && e.message.deleted
                }, t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case vt.a.AutoModMessageRejected:
                        case vt.a.AutoModMessageAllowed:
                        case vt.a.AutoModMessageDenied:
                        case vt.a.AutoModRejectedPrompt:
                            return C.createElement(ln, {
                                channelID: this.props.channelID,
                                message: e,
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                showModerationIcons: this.props.showModerationIcons,
                                currentUserLogin: this.props.currentUserLogin
                            });
                        case vt.a.Connected:
                            return C.createElement(G.V, {
                                className: "chat-line__status",
                                "data-a-target": "chat-welcome-message"
                            }, C.createElement(G._23, {
                                type: G._28.Span
                            }, Object(m.d)("Welcome to the chat room!", "ChatLine")));
                        case vt.a.Disconnected:
                            return e.reason ? C.createElement(G.V, {
                                className: "chat-line__status"
                            }, C.createElement(G._23, {
                                type: G._28.Span
                            }, Object(m.d)("You have been disconnected from chat for the following reason: {reason}", {
                                reason: e.reason
                            }, "ChatLine"))) : C.createElement(G.V, {
                                className: "chat-line__status"
                            }, C.createElement(G._23, {
                                type: G._28.Span
                            }, Object(m.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                        case vt.a.Hosting:
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, C.createElement(G._23, {
                                type: G._28.Span
                            }, Object(m.d)("Now hosting {channel}", {
                                channel: e.hostedChannel
                            }, "ChatLine")));
                        case vt.a.Unhost:
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, C.createElement(G._23, {
                                type: G._28.Span
                            }, Object(m.d)("No longer hosting.", "ChatLine")));
                        case vt.a.Post:
                        case vt.a.PostWithMention:
                        case vt.a.Action:
                            return d(e) ? C.createElement(tn, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e,
                                isDeleted: e.deleted,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            }) : null;
                        case vt.a.Ban:
                        case vt.a.Timeout:
                            return this.props.isCurrentUserModerator ? C.createElement(G.V, {
                                className: "chat-line__moderation"
                            }, Object(zt.i)(e)) : null;
                        case vt.a.Subscription:
                            return C.createElement(G.V, {
                                className: "chat-line__subscribe"
                            }, Object(zt.q)(e));
                        case vt.a.SubGift:
                            return C.createElement(G.V, {
                                className: "chat-line__subscribe"
                            }, Object(zt.p)(e));
                        case vt.a.BitsCharity:
                            return C.createElement(G.V, {
                                className: "chat-line__bits-charity",
                                padding: {
                                    right: 2,
                                    y: .5
                                }
                            }, Object(zt.a)(e));
                        case vt.a.Resubscription:
                            return C.createElement(G.V, {
                                className: "chat-line__subscribe"
                            }, Object(zt.l)(e, this.props.showTimestamps, this.props.currentUserDisplayName, this.props.currentUserLogin, this.props.badgeSets));
                        case vt.a.RoomMods:
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.m)(e.moderatorLogins));
                        case vt.a.SlowMode:
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.n)(e));
                        case vt.a.SubscriberOnlyMode:
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.o)(e));
                        case vt.a.FollowerOnlyMode:
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.f)(e));
                        case vt.a.EmoteOnlyMode:
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.d)(e));
                        case vt.a.Clear:
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.b)());
                        case vt.a.Notice:
                            if (function(e) {
                                    return e.msgid in c()
                                }(e)) return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, C.createElement(pn, {
                                message: e
                            }));
                            if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                case vn:
                                case bn:
                                    return null
                            }
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.j)(e));
                        case vt.a.Info:
                            return C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.g)(e));
                        case vt.a.Purchase:
                            var t = e.message.user.isIntl ? e.message.user.userDisplayName + " (" + e.message.user.userLogin + ")" : e.message.user.userDisplayName;
                            return C.createElement(G.V, {
                                className: "chat-line__message--special"
                            }, C.createElement(G.V, {
                                className: "chat-line__status"
                            }, Object(zt.k)(t, e.purchase.purchased.title, e.purchase.numCrates)), C.createElement(tn, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e.message,
                                isDeleted: !1,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            }), C.createElement(fn, {
                                bitsConfig: e.bitsConfig,
                                purchase: e.purchase
                            }));
                        case vt.a.Raid:
                            return C.createElement(un, {
                                message: e
                            });
                        case vt.a.Unraid:
                            return C.createElement(G.V, {
                                className: "chat-line__raid"
                            }, Object(zt.t)());
                        case vt.a.CrateGift:
                            return Object(zt.c)(e);
                        case vt.a.Ritual:
                            return C.createElement(G.V, {
                                className: "chat-line__ritual"
                            }, C.createElement(hn, {
                                badgeSets: this.props.badgeSets,
                                event: e,
                                showTimestamps: this.props.showTimestamps,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin
                            }));
                        default:
                            return null
                    }
                }, t
            }(C.Component),
            yn = n("dQj3"),
            Cn = n("QsiC"),
            Sn = (n("zbFZ"), "pinned-cheer__rendered-message-inner"),
            _n = "pinned-cheer--collapse",
            En = /(\d+)$/,
            wn = m.i.withCategory("pinned-cheer"),
            Nn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null
                    }, t.collapseCheer = !0, t.root = null, t.renderedMessage = null, t.recentCheerTimeout = 0, t.saveRenderedMessageRef = function(e) {
                        t.renderedMessage = e
                    }, t.saveRootRef = function(e) {
                        t.root = e
                    }, t.handleHeadlineClick = function() {
                        t.collapseCheer = !t.collapseCheer, t.root && t.root.classList.toggle(_n, t.collapseCheer)
                    }, t.handleProgressExpired = function() {
                        wn.debug("setTimeout expired, forcing re-render"), t.forceUpdate()
                    }, t.onProgressAnimationEnd = function() {
                        wn.debug("Animation end event fired")
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.calcRecentCheerExpiry(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.calcRecentCheerExpiry(e)
                }, t.prototype.shouldComponentUpdate = function(e, t) {
                    var n = this.getDisplayData(this.props, this.state),
                        a = this.getDisplayData(e, t);
                    return (n.displayCheer && n.displayCheer.id) !== (a.displayCheer && a.displayCheer.id)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this.getDisplayData(this.props, this.state),
                        t = e.isRecent,
                        n = e.remainingRecentCheerTime;
                    if (t && (clearTimeout(this.recentCheerTimeout), this.recentCheerTimeout = setTimeout(this.handleProgressExpired, n + 100)), this.renderedMessage) {
                        var a = this.renderedMessage.getElementsByClassName(Sn);
                        if (a.length) {
                            var i = a[0].getBoundingClientRect().height > 42;
                            this.state.cheerIsTall !== i && this.setState({
                                cheerIsTall: i
                            })
                        }
                    }
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.recentCheerTimeout)
                }, t.prototype.render = function() {
                    var e = this.getDisplayData(this.props, this.state),
                        t = e.isRecent,
                        n = e.remainingRecentCheerTime,
                        a = e.displayCheer,
                        i = e.isExpandable;
                    if (!a) return null;
                    for (var r = "", s = 0, o = 0, l = a.messageParts; o < l.length; o++) {
                        var c = l[o];
                        if (c.type === Ct.a.Emote && c.content.cheerAmount && c.content.alt) {
                            var d = c.content.alt.replace(En, "").toLowerCase();
                            s += c.content.cheerAmount, r ? r !== d && (r = "cheer") : r = d
                        }
                    }
                    var u, p = {
                            "pinned-cheer__rendered-message": !0,
                            "pinned-cheer__rendered-message--recent": t,
                            "pinned-cheer__rendered-message--top": !t
                        },
                        h = C.createElement(Gt.a, {
                            userData: a.user
                        }),
                        g = C.createElement("div", {
                            ref: this.saveRenderedMessageRef,
                            className: R(p)
                        }, C.createElement(G._19, {
                            margin: {
                                x: 2
                            },
                            borderTop: !0
                        }), C.createElement(G.V, {
                            padding: {
                                y: .5
                            },
                            className: Sn
                        }, C.createElement(kn, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeData,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isCurrentUserModerator: !1,
                            message: a,
                            showModerationIcons: !1,
                            showTimestamps: !1
                        }))),
                        f = null;
                    if (t) u = C.createElement(G._23, {
                        type: G._28.Strong
                    }, Object(m.d)("Recent Cheer", "Bits--PinnedCheer"));
                    else {
                        u = C.createElement(G._23, {
                            type: G._28.Strong
                        }, Object(m.d)("Top Cheer by {user}", {
                            user: h
                        }, "Bits--PinnedCheer"), " :");
                        var v = Object(zt.h)(Object(A.c)(r + s.toString(), this.props.bitsConfig), this.props.currentUserDisplayName, this.props.currentUserLogin);
                        f = C.createElement(G.V, {
                            display: G.H.Inline,
                            margin: {
                                left: .5
                            }
                        }, v)
                    }
                    var b = (S = {
                            "pinned-cheer__bounding-box": !0
                        }, S[_n] = this.collapseCheer, S),
                        k = {
                            "pinned-cheer__headline": !0,
                            "pinned-cheer__headline--clickable": i
                        },
                        y = null;
                    return t && (y = C.createElement(G.V, {
                        className: "pinned-cheer__progress-bar-placeholder"
                    }, C.createElement(G.V, {
                        className: "pinned-cheer__progress-bar",
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        justifyContent: G.U.End
                    }, C.createElement(G._7, {
                        key: a.id,
                        countdown: n / 1e3,
                        size: G._8.ExtraSmall,
                        onCountdownEnd: this.onProgressAnimationEnd
                    })))), wn.debug("Rendering pinned cheer", {
                        remainingRecentCheerTime: n,
                        isRecent: t,
                        recentCheerExpireTime: this.state.recentCheerExpireTime
                    }), C.createElement(G.V, {
                        className: "pinned-cheer",
                        flexGrow: 0,
                        flexShrink: 0,
                        zIndex: G._39.Default
                    }, C.createElement("div", {
                        className: R(b),
                        ref: this.saveRootRef
                    }, C.createElement(G.Q, {
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: G.H.Flex,
                        flexDirection: G.J.Row,
                        flexWrap: G.K.NoWrap
                    }, C.createElement("div", {
                        className: R(k),
                        onClick: i ? this.handleHeadlineClick : void 0
                    }, C.createElement(G.V, {
                        flexGrow: 1,
                        flexShrink: 1,
                        display: G.H.Flex,
                        alignItems: G.c.Center
                    }, C.createElement(G._10, {
                        asset: t ? G._11.HourGlass : G._11.Trophy,
                        height: 18,
                        width: 18
                    }), C.createElement(G.V, {
                        margin: {
                            left: .5
                        },
                        display: G.H.Inline
                    }, u), f), C.createElement(G.V, {
                        className: "pinned-cheer__expand-caret",
                        flexShrink: 0,
                        flexGrow: 0,
                        display: G.H.Flex,
                        justifyContent: G.U.Between,
                        alignItems: G.c.Center
                    }, i ? C.createElement(G._10, {
                        asset: G._11.AngleLeft
                    }) : null))), g, y));
                    var S
                }, t.prototype.calcRecentCheerExpiry = function(e) {
                    var t = e.recentCheer ? e.recentCheer.id : null;
                    e.recentTimeoutMs && this.state.recentCheerID !== t && this.setState({
                        recentCheerID: t,
                        recentCheerExpireTime: t ? Date.now() + e.recentTimeoutMs : null
                    })
                }, t.prototype.getDisplayData = function(e, t) {
                    var n = 0;
                    t.recentCheerExpireTime && (n = Math.max(0, t.recentCheerExpireTime - Date.now()));
                    var a = !!e.recentCheer && !!e.topCheer && e.recentCheer.id === e.topCheer.id,
                        i = !!n && !!e.recentCheer && !a;
                    return {
                        remainingRecentCheerTime: n,
                        isRecent: i,
                        displayCheer: i ? e.recentCheer : e.topCheer,
                        isExpandable: !i || t.cheerIsTall
                    }
                }, t = u.__decorate([Object(S.a)(Cn, {
                    props: function(e) {
                        var t, n, a;
                        return e.data && e.data.user && e.data.user.cheer && (a = e.data.user.cheer.recentTimeoutMs, e.data.user.cheer.top && (t = Object(yn.a)(e.data.user.cheer.top, e.ownProps.bitsConfig, e.ownProps.blockLinks)), e.data.user.cheer.recent && (n = Object(yn.a)(e.data.user.cheer.recent, e.ownProps.bitsConfig, e.ownProps.blockLinks))), {
                            topCheer: t,
                            recentCheer: n,
                            recentTimeoutMs: a
                        }
                    },
                    options: function(e) {
                        return {
                            name: "data",
                            fetchPolicy: "network-only",
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }), Object(nt.a)(function(e) {
                    return {
                        query: Cn,
                        variables: {
                            channelID: e.channelID
                        },
                        topic: Object(H.a)(e.channelID),
                        type: V.c.BitsPinEvent,
                        mutator: function(t, n) {
                            if (n.user.cheer) {
                                var a = JSON.parse(t.msg);
                                if (a.channel_id === e.channelID) return wn.debug("Received pubsub update", {
                                    hasTopCheer: !!a.top && a.top.has_top_event,
                                    hasNewTopCheer: !n.user.cheer.top || null !== a.top.tags && n.user.cheer.top.id !== a.top.tags.msg_id,
                                    hasRecentCheer: !!a.recent && a.recent.has_recent_event,
                                    hasNewRecentCheer: !n.user.cheer.recent || null !== a.recent.tags && n.user.cheer.recent.id !== a.recent.tags.msg_id
                                }), a.top && (a.top.has_top_event || "dimiss" === a.action) ? (!n.user.cheer.top || null !== a.top.tags && n.user.cheer.top.id !== a.top.tags.msg_id || "dismiss" === a.action) && (n.user.cheer.top = Object(yn.c)(a.top)) : n.user.cheer.top = null, a.recent && (a.recent.has_recent_event || "dismiss" === a.action) ? (!n.user.cheer.recent || null !== a.recent.tags && n.user.cheer.recent.id !== a.recent.tags.msg_id || "dismiss" === a.action) && (n.user.cheer.recent = Object(yn.c)(a.recent), n.user.cheer.recentTimeoutMs = n.user.cheer.settings.recentTimeoutMs) : n.user.cheer.recent = null, n
                            }
                        }
                    }
                })], t)
            }(C.Component),
            Dn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.bitsConfig && (e = this.state && this.state.pcheersV2Enabled ? null : C.createElement(Nn, {
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelID: this.props.channelID,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin
                    })), e
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return u.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    e = "off", t.label = 1;
                                case 1:
                                    return t.trys.push([1, 3, , 4]), [4, m.n.experiments.getAssignment("TWILIGHT_LEADERBOARDS")];
                                case 2:
                                    return e = t.sent(), [3, 4];
                                case 3:
                                    return t.sent(), e = "off", [3, 4];
                                case 4:
                                    return this.setState({
                                        pcheersV2Enabled: "on" === e
                                    }), [2]
                            }
                        })
                    })
                }, t
            }(C.Component),
            On = n("6BvN"),
            Tn = n("HM6l"),
            In = n("c3pS"),
            Ln = (n("56e8"), function(e) {
                var t = void 0 !== e.progress,
                    n = C.createElement("img", {
                        className: "cheer-badge__image",
                        src: e.badge.image1x,
                        alt: e.badge.title,
                        srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                    });
                if (!t) return n;
                var a = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                return C.createElement("div", {
                    className: "cheer-badge__progress-container"
                }, n, C.createElement("div", {
                    className: "cheer-badge__progress-overlay",
                    style: {
                        width: a + "px"
                    },
                    "data-test-selector": "cheer-progress"
                }))
            }),
            Mn = n("3iBR"),
            xn = function(e) {
                var t;
                e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = C.createElement(G.V, {
                    padding: {
                        bottom: .5
                    }
                }, e.selfBitsBadge.current && C.createElement(G.V, {
                    display: G.H.Inline,
                    margin: {
                        right: .5
                    }
                }, C.createElement(Ln, {
                    badge: e.selfBitsBadge.current
                })), e.selfBitsBadge.next && C.createElement(Ln, {
                    badge: e.selfBitsBadge.next,
                    progress: e.selfBitsBadge.progress
                }), e.selfBitsBadge.nextBits && Object(m.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                    bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                }, "Bits--BalanceFooter")));
                var n = Object(m.d)("{bitsGem} Log in to see your Bits balance", {
                    bitsGem: C.createElement(q.a, {
                        count: 100,
                        withImage: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: w.a.Dark
                    })
                }, "Bits--BalanceFooter");
                return void 0 !== e.balance && null !== e.balance && (n = Object(m.d)("You have {currentBits}", {
                    currentBits: C.createElement(q.a, {
                        count: e.balance,
                        withImage: !0,
                        withText: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: w.a.Dark
                    })
                }, "Bits--BalanceFooter")), C.createElement(G.V, {
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-balance-footer"
                }, t, C.createElement(G.V, {
                    display: G.H.Flex,
                    flexGrow: 1,
                    alignItems: G.c.Center,
                    justifyContent: G.U.Between
                }, C.createElement("div", null, n), C.createElement(G.u, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > Mn.h,
                    onClick: e.onClickGetBits,
                    "data-test-selector": "get-bits-button",
                    "data-a-target": "get-bits-button"
                }, Object(m.d)("Get Bits", "Bits--BalanceFooter"))))
            },
            Fn = function() {
                return C.createElement(G._19, {
                    className: "t-bits-card",
                    display: G.H.Flex,
                    flexDirection: G.J.Column,
                    alignItems: G.c.Center,
                    justifyContent: G.U.Center,
                    textAlign: G._24.Center,
                    padding: 1,
                    border: !0,
                    background: G.m.Base,
                    elevation: 3,
                    fullWidth: !0
                }, C.createElement(G._23, {
                    italic: !0
                }, Object(m.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
            },
            jn = n("QRuM"),
            An = n("ySfT"),
            Bn = function(e) {
                return C.createElement(G.V, {
                    display: G.H.Flex,
                    flexGrow: 1,
                    flexDirection: G.J.Column,
                    justifyContent: G.U.Center,
                    alignItems: G.c.Center,
                    padding: 1
                }, C.createElement(G.V, {
                    padding: {
                        top: 2,
                        bottom: 2
                    }
                }, C.createElement(G._23, {
                    type: G._28.H5,
                    color: G.F.Link,
                    bold: !0
                }, Object(m.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), C.createElement(G._23, null, Object(m.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), C.createElement(G.V, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, C.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(m.d)("How do I cheer?", "Bits--CheermoteIntro"))))
            },
            Rn = n("nrdj"),
            Un = function(e) {
                var t = e.headline || e.prefix + (e.tier || "");
                if (e.tournament && e.tier <= 0) {
                    var n = e.tournament.teams.find(function(t) {
                        return t.id === e.prefix
                    });
                    n && (t = n.name + " - " + e.prefix)
                }
                var a = e.tier;
                return e.event && !e.tier && (a = 1), C.createElement(G.V, {
                    display: G.H.Flex,
                    flexDirection: G.J.Column,
                    alignItems: G.c.Center,
                    padding: 1
                }, C.createElement(G._23, {
                    type: G._28.H4,
                    bold: !0
                }, t), C.createElement(Rn.a, {
                    prefix: e.prefix,
                    amount: a,
                    bitsConfig: e.bitsConfig,
                    showImage: !0,
                    showAmount: !(e.event && !e.tier)
                }))
            },
            Vn = (n("DVR9"), function(e) {
                var t = null;
                e.minToCheer > 1 && (t = C.createElement(G._23, {
                    color: G.F.Alt2,
                    italic: !0
                }, Object(m.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                    minToCheer: e.minToCheer
                }, "Bits--CheermoteTierIntro")));
                var n = null;
                return e.minToPin > 0 && (n = C.createElement(G._23, {
                    color: G.F.Alt2,
                    italic: !0
                }, Object(m.d)("Pinning your Cheer is a minimum of {minToPin} Bits", {
                    minToPin: e.minToPin
                }, "Bits--CheermoteTierIntro"))), C.createElement(G.V, {
                    display: G.H.Flex,
                    flexGrow: 1,
                    flexDirection: G.J.Column,
                    alignItems: G.c.Center,
                    justifyContent: G.U.Center,
                    padding: 1,
                    className: "cheermote-tier-intro"
                }, C.createElement(G.V, {
                    padding: {
                        x: 4
                    },
                    margin: {
                        bottom: 1
                    }
                }, C.createElement(G._23, {
                    color: G.F.Alt2
                }, Object(m.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t, n)
            }),
            Pn = n("1bR2"),
            Hn = n.n(Pn),
            Wn = n("vDGQ"),
            qn = (n("CGWe"), function(e) {
                return Object(Wn.d)({
                    action: Wn.a.View,
                    type: Wn.c.BitsIntro,
                    channelId: e.channelID
                }), C.createElement(G.V, {
                    "data-test-selector": "crate-intro"
                }, C.createElement(G.V, {
                    padding: {
                        x: 1,
                        top: 2,
                        bottom: 1
                    }
                }, C.createElement(G._23, {
                    fontSize: G.L.Size4,
                    bold: !0
                }, Object(m.d)("Share the Holiday Cheer!", "Crates"))), C.createElement(G._19, {
                    className: "crates-holiday-background",
                    background: G.m.Alt,
                    padding: 1,
                    margin: {
                        y: 1
                    },
                    display: G.H.Flex,
                    justifyContent: G.U.Around,
                    alignItems: G.c.End,
                    borderTop: !0,
                    borderBottom: !0
                }, C.createElement(G.e, {
                    type: G.i.BounceIn,
                    delay: G.f.Long,
                    enabled: !0
                }, C.createElement(G._31, {
                    label: "XmasRaid"
                }, C.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633161/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/3.0 3.0x",
                    alt: "XmasRaid"
                }))), C.createElement(G.e, {
                    type: G.i.BounceIn,
                    delay: G.f.Medium,
                    enabled: !0
                }, C.createElement(G._31, {
                    label: "MerryPurple"
                }, C.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633177/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/3.0 3.0x",
                    alt: "MerryPurple"
                }))), C.createElement(G.e, {
                    type: G.i.BounceIn,
                    delay: G.f.Short,
                    enabled: !0
                }, C.createElement(G._31, {
                    label: "GiftRage"
                }, C.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/634141/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/3.0 3.0x",
                    alt: "GiftRage"
                }))), C.createElement("img", {
                    src: Hn.a,
                    height: "50",
                    width: "50"
                }), C.createElement(G.e, {
                    type: G.i.BounceIn,
                    delay: G.f.Short,
                    enabled: !0
                }, C.createElement(G._31, {
                    label: "RudolphWhoa"
                }, C.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633166/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/3.0 3.0x",
                    alt: "RudolphWhoa"
                }))), C.createElement(G.e, {
                    type: G.i.BounceIn,
                    delay: G.f.Medium,
                    enabled: !0
                }, C.createElement(G._31, {
                    label: "FeelsGingerMan"
                }, C.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633171/1.0 1x,https://static-cdn.jtvnw.net/emoticons/v1/633171/2.0 2x,https://static-cdn.jtvnw.net/emoticons/v1/633171/3.0 4x",
                    alt: "FeelsGingerMan"
                }))), C.createElement(G.e, {
                    type: G.i.BounceIn,
                    delay: G.f.Long,
                    enabled: !0
                }, C.createElement(G._31, {
                    label: "OrnaMental"
                }, C.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633170/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/3.0 3.0x",
                    alt: "OrnaMental"
                })))), C.createElement(G.V, {
                    padding: 1
                }, C.createElement(G._23, {
                    type: G._28.P
                }, Object(m.d)("Cheer any amount to support your streamer, and get a holiday gift! Cheer {minBits, number} Bits or more, and others in chat can get a gift too!", {
                    minBits: 250
                }, "Crates")), C.createElement(G._23, {
                    type: G._28.Strong
                }, C.createElement("a", {
                    href: "http://link.twitch.tv/holiday-emotes",
                    target: "_blank",
                    rel: "noreferrer noopener"
                }, Object(m.d)("Details", "Crates")))))
            });
        (mn || (mn = {})).CratesChristmas = "CratesChristmas";
        var Gn, zn = function(e) {
                switch (e.event) {
                    case mn.CratesChristmas:
                        return C.createElement(qn, {
                            onClickHelp: e.onClickHelp,
                            channelID: e.channelID
                        });
                    default:
                        return C.createElement(Bn, {
                            onClickHelp: e.onClickHelp
                        })
                }
            },
            Qn = n("N221"),
            Jn = n("cv4W"),
            $n = n.n(Jn),
            Kn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = "";
                    if (this.props.amount < 250) {
                        var t = 250 - this.props.amount;
                        e = Object(m.d)("{bitsToGo, plural, one {Cheer # more Bit to share gifts with chat!} other {Cheer # more Bits to share gifts with chat!}}", {
                            bitsToGo: t
                        }, "Crates")
                    } else e = Object(m.d)("Your Cheer will share gifts with chat!", "Crates");
                    return C.createElement(G._19, {
                        className: "crate-christmas-2017-reminder",
                        background: G.m.Alt,
                        borderTop: !0,
                        padding: 1
                    }, C.createElement(G.V, {
                        display: G.H.Inline,
                        margin: {
                            right: .5
                        }
                    }, C.createElement("img", {
                        src: $n.a,
                        height: "22",
                        width: "22"
                    })), C.createElement(G._23, {
                        type: G._28.Strong
                    }, e))
                }, t
            }(C.Component),
            Yn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    switch (this.props.event) {
                        case mn.CratesChristmas:
                            return C.createElement(Kn, {
                                amount: this.props.amount
                            });
                        default:
                            return null
                    }
                }, t
            }(C.Component),
            Zn = function(e) {
                var t = e.prefixes.map(function(t, n) {
                    if (t.alt && t.cheerAmount) return C.createElement(G.Q, {
                        key: n,
                        padding: {
                            x: 1
                        }
                    }, C.createElement("li", null, C.createElement(Rn.a, {
                        prefix: t.alt,
                        amount: t.cheerAmount > Mn.j ? Mn.j : t.cheerAmount,
                        bitsConfig: e.bitsConfig,
                        size: Rn.b.Small,
                        showAmount: !0,
                        showImage: !0
                    })))
                });
                return C.createElement(G.V, {
                    display: G.H.Flex,
                    flexDirection: G.J.Row,
                    alignItems: G.c.End,
                    justifyContent: G.U.Center,
                    flexWrap: G.K.Wrap,
                    margin: {
                        top: 1
                    },
                    className: "pending-cheer-list"
                }, t)
            },
            Xn = (n("KWLn"), function(e) {
                var t;
                if (e.prefixes && 1 === e.prefixes.length) {
                    var n = e.prefixes[0].alt;
                    n && (t = C.createElement(G.V, {
                        padding: {
                            top: 2
                        }
                    }, C.createElement(Rn.a, {
                        prefix: n,
                        amount: e.amount > Mn.j ? Mn.j : e.amount,
                        bitsConfig: e.bitsConfig,
                        showImage: !0,
                        showAmount: !0
                    })))
                } else if (e.prefixes) t = C.createElement(G.V, {
                    margin: {
                        top: 1
                    }
                }, C.createElement(Qn.b, {
                    className: "pending-cheer__scroll-container"
                }, C.createElement(Zn, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var a = Object(m.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                        totalBits: C.createElement("strong", null, e.amount),
                        channelName: e.channelDisplayName
                    }, "Bits--PendingCheer");
                    t = C.createElement(G.V, {
                        padding: {
                            top: 2,
                            x: 5
                        }
                    }, C.createElement(G._23, {
                        color: G.F.Alt2,
                        "data-a-target": "total-bits-message"
                    }, a))
                }
                var i = null;
                e.purchaseMore && e.purchaseMore > 0 && (i = C.createElement(G._23, {
                    "data-a-target": "need-more-bits-error"
                }, Object(m.d)("Please purchase {neededBits} more Bits to Cheer", {
                    neededBits: e.purchaseMore
                }, "Bits--PendingCheer")));
                var r = null;
                if (e.largestCheermote > Mn.j) {
                    var s = Object(m.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                        maximumCheerSize: Mn.j
                    }, "Bits--PendingCheer");
                    i = C.createElement(G._23, {
                        "data-a-target": "max-cheer-bits-error"
                    }, s)
                }
                if (e.amount < e.minToCheer) {
                    var o = Object(m.d)("Add {moreBitsAmount} Bits to reach this channel's minimum Cheer.", {
                        moreBitsAmount: e.minToCheer - e.amount
                    }, "Bits--PendingCheer");
                    i = C.createElement(G._23, {
                        "data-a-target": "min-cheer-bits-error"
                    }, o)
                }
                if (e.smallestCheermote < e.minPerEmote) {
                    var l = Object(m.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                        minPerEmote: e.minPerEmote
                    }, "Bits--PendingCheer");
                    r = C.createElement(G._23, {
                        color: G.F.Alt2,
                        italic: !0,
                        "data-a-target": "min-emote-bits-error"
                    }, l)
                }
                var c = C.createElement(Rn.a, {
                    amount: e.amount,
                    prefix: Mn.f,
                    bitsConfig: e.bitsConfig,
                    display: G.H.Inline,
                    showImage: !1,
                    showAmount: !0,
                    size: Rn.b.Medium
                });
                return C.createElement(G.V, null, C.createElement(G.V, {
                    display: G.H.Flex,
                    flexDirection: G.J.Column,
                    alignItems: G.c.Center,
                    padding: 1,
                    className: "pending-cheer"
                }, C.createElement(G._23, {
                    fontSize: G.L.Size4,
                    bold: !0
                }, Object(m.d)("Cheering {totalBits} Bits", {
                    totalBits: c
                }, "Bits--PendingCheer")), !r && t, !r && i && C.createElement(G.V, {
                    padding: {
                        top: 1
                    }
                }, i), r && C.createElement(G.V, {
                    padding: {
                        top: 3,
                        x: 3
                    }
                }, r)), !r && !i && C.createElement(Yn, {
                    event: e.event,
                    amount: e.amount
                }))
            }),
            ea = n("qe65"),
            ta = (n("f1ZS"), {
                themed: !0,
                dark: {
                    "1x": Mn.b + "/dark/animated/promo/intro.gif"
                },
                light: {
                    "1x": Mn.b + "/light/animated/promo/intro.gif"
                }
            }),
            na = function() {
                return C.createElement(G.V, {
                    display: G.H.Flex,
                    flexDirection: G.J.Column,
                    alignItems: G.c.Center,
                    justifyContent: G.U.Center,
                    flexGrow: 1,
                    className: "bits-sending"
                }, C.createElement(G.V, {
                    padding: {
                        bottom: 1
                    }
                }, C.createElement(ea.a, {
                    sources: ta
                })), C.createElement(G._23, {
                    italic: !0
                }, Object(m.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
            },
            aa = (n("ZoRy"), function(e) {
                var t = Object(m.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                        totalBits: e.totalBits,
                        channelName: e.channelDisplayName
                    }, "Bits--UndoPrompt"),
                    n = null;
                if (e.prefixes && e.prefixes.length > 1) n = C.createElement(Qn.b, {
                    className: "bits-undo-prompt__scroll-container"
                }, C.createElement(G.V, {
                    margin: {
                        top: 1
                    }
                }, C.createElement(Zn, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var a = e.prefixes[0].alt;
                    a && (n = C.createElement(G.V, {
                        padding: {
                            bottom: 1
                        }
                    }, C.createElement(Rn.a, {
                        prefix: a,
                        amount: e.totalBits,
                        bitsConfig: e.bitsConfig,
                        showAmount: !0,
                        showImage: !0
                    })))
                }
                return C.createElement(G.V, {
                    display: G.H.Flex,
                    flexDirection: G.J.Column,
                    alignItems: G.c.Center,
                    justifyContent: G.U.Center,
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-undo-prompt"
                }, n, C.createElement(G._23, null, t))
            }),
            ia = function(e) {
                var t = m.b.get("crate_snowman_launch", jn.a.Off),
                    n = t === jn.a.On || t === jn.a.StaffOnly && e.isStaff ? mn.CratesChristmas : null,
                    a = e.event || n;
                if (e.isSending) return e.totalBits < Mn.k ? C.createElement(na, null) : C.createElement(aa, {
                    bitsConfig: e.bitsConfig,
                    channelDisplayName: e.displayName,
                    prefixes: e.currentCheers,
                    totalBits: e.totalBits
                });
                if (e.hoveredCheermote) return C.createElement(Un, {
                    event: e.event,
                    tournament: e.tournament,
                    bitsConfig: e.bitsConfig,
                    prefix: e.hoveredCheermote,
                    tier: e.hoveredTier
                });
                if (e.totalBits) return C.createElement(Xn, {
                    bitsConfig: e.bitsConfig,
                    prefixes: e.currentCheers,
                    amount: e.totalBits,
                    channelDisplayName: e.displayName,
                    purchaseMore: e.bitsBalance && e.totalBits - e.bitsBalance,
                    largestCheermote: e.largestCheermote,
                    smallestCheermote: e.smallestCheermote,
                    minPerEmote: e.emoteMinimumBits,
                    minToCheer: e.cheerMinimumBits,
                    event: a
                });
                if (e.helpRequested) return C.createElement(An.a, null);
                if (e.chosenCheermote) {
                    var i = e.recentMinimumBits,
                        r = e.cheerMinimumBits;
                    return C.createElement(Vn, {
                        minToPin: i,
                        minToCheer: r
                    })
                }
                return a ? C.createElement(zn, {
                    event: a,
                    onClickHelp: e.showHelp,
                    channelID: e.channelID
                }) : C.createElement(Bn, {
                    onClickHelp: e.showHelp
                })
            },
            ra = n("WVx7"),
            sa = (n("9uTb"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        startingIndex: 0
                    }, t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (this.props.hide) return null;
                    var t = this.props.cheermotes.map(function(t, n) {
                            if (!t) return C.createElement("li", {
                                key: "null-cheermote-" + n
                            }, C.createElement("button", {
                                className: "cheermote-list__item-button",
                                disabled: !0
                            }, C.createElement("div", {
                                className: "cheermote-list__placeholder"
                            })));
                            var a = "";
                            t.key && (a = t.key.replace(":", ""));
                            var i = null;
                            e.props.showCheermoteAmount && t.key && (i = C.createElement(Rn.a, {
                                bitsConfig: e.props.bitsConfig,
                                prefix: "",
                                amount: +t.key.split(":")[1],
                                showImage: !1,
                                showAmount: !0,
                                size: Rn.b.Small
                            }));
                            var r = C.createElement("li", {
                                key: t.key,
                                className: "cheermote-list__cheermote"
                            }, C.createElement("button", {
                                className: "cheermote-list__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + a
                            }, C.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })), i);
                            return e.props.showCheermoteAmount ? r : C.createElement(G.Q, {
                                key: t.key,
                                margin: {
                                    bottom: 1
                                }
                            }, r)
                        }),
                        n = null;
                    this.props.showCheermoteAmount && (n = C.createElement(G.V, {
                        padding: {
                            right: 2
                        },
                        fullWidth: !0,
                        className: "cheermote-list__back-button"
                    }, C.createElement(G.u, {
                        "data-a-target": "bits-card-back-button",
                        type: G.z.Text,
                        fullWidth: !0,
                        onClick: this.props.onClose
                    }, Object(m.d)("Show All Cheermotes", "CheermoteCarousel"))));
                    var a = C.createElement(G.Q, {
                            className: "cheermote-list__cheermotes",
                            display: G.H.Flex,
                            flexWrap: G.K.Wrap,
                            flexDirection: G.J.Row,
                            justifyContent: this.props.showCheermoteAmount ? G.U.Between : G.U.Start,
                            alignItems: G.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, C.createElement("ul", null, t, n)),
                        i = R("cheermote-list", {
                            "cheermote-list__tier-selection": this.props.showCheermoteAmount
                        }, {
                            "cheermote-list__cheermote-selection": !this.props.showCheermoteAmount
                        });
                    return this.props.showCheermoteAmount ? C.createElement(G.V, {
                        flexGrow: 1,
                        overflow: G._0.Hidden,
                        className: i
                    }, a) : C.createElement(G.V, {
                        flexGrow: 1,
                        overflow: G._0.Hidden,
                        className: i
                    }, C.createElement(Qn.b, null, a))
                }, t
            }(C.Component)),
            oa = Object(k.a)(function(e) {
                return {
                    darkModeEnabled: Object(O.a)(e) === w.a.Dark
                }
            })(sa),
            la = function(e) {
                return e.event, C.createElement(xn, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance,
                    selfBitsBadge: e.selfBitsBadge
                })
            },
            ca = function(e) {
                return C.createElement(G.V, {
                    flexGrow: 1
                }, C.createElement(G.V, {
                    className: "undo-prompt__footer",
                    padding: 1,
                    display: G.H.Flex,
                    justifyContent: G.U.Between
                }, C.createElement(G.u, {
                    onClick: e.onCancel || void 0,
                    type: G.z.Hollow,
                    overlay: !0,
                    "data-test-selector": "cancel-button"
                }, Object(m.d)("Cancel", "Bits--UndoPrompt")), C.createElement(G.u, {
                    onClick: e.onConfirm || void 0,
                    "data-test-selector": "confirm-button"
                }, Object(m.d)("Send", "Bits--UndoPrompt"))), C.createElement(G._7, {
                    size: G._8.ExtraSmall,
                    countdown: Mn.l.UNDO_PROMPT_DURATION / 1e3
                }))
            },
            da = n("ZJYd"),
            ua = n("/LBW"),
            pa = n("iWdz"),
            ma = (n("2B/Z"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        chosenCheermote: null,
                        hoveredCheermote: null,
                        hoveredTier: 0,
                        helpRequested: !1,
                        totalBits: 0,
                        largestCheermote: 0,
                        smallestCheermote: 0,
                        buyingBits: !1
                    }, t.unhoverTimeout = 0, t.lastRefetchTime = 0, t.handleTierHover = function(e) {
                        clearTimeout(t.unhoverTimeout);
                        var n = e.split(":");
                        n.length < 2 || (t.setState({
                            hoveredTier: +n[1],
                            hoveredCheermote: n[0]
                        }), t.props.trackBitsCardInteraction(ua.a.PreviewEmote, {
                            emoteType: n[0],
                            emoteLevel: +n[1]
                        }))
                    }, t.handleUnhover = function() {
                        t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                    }, t.clearHovered = function() {
                        t.setState({
                            hoveredTier: 0,
                            hoveredCheermote: null
                        })
                    }, t.handleTierClick = function(e) {
                        t.props.onClickCheermote(e.split(":").join(""))
                    }, t.handleCheermoteHover = function(e) {
                        clearTimeout(t.unhoverTimeout), t.setState({
                            hoveredCheermote: e,
                            hoveredTier: 0
                        }), t.props.trackBitsCardInteraction(ua.a.PreviewEmote, {
                            emoteType: e,
                            emoteLevel: 100
                        })
                    }, t.handleCheermoteClick = function(e) {
                        t.setState({
                            chosenCheermote: e,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.clearChosenCheermote = function() {
                        t.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.showHelp = function(e) {
                        e.preventDefault(), t.setState({
                            helpRequested: !0
                        })
                    }, t.closeHelp = function() {
                        return t.setState({
                            helpRequested: !1
                        })
                    }, t.handleClickBuy = function() {
                        t.setState({
                            buyingBits: !0
                        }), t.props.trackBitsCardInteraction(ua.a.BuyMain)
                    }, t.handleCloseBuy = function() {
                        return t.setState({
                            buyingBits: !1
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.visible || !!this.props.currentCheers.length,
                        n = e.visible || !!e.currentCheers.length;
                    if (!t && n) {
                        var a = Date.now();
                        a - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = a, e.data.refetch())
                    }
                    if (t && !n && this.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            buyingBits: !1
                        }), this.props.currentCheers !== e.currentCheers) {
                        var i = Object(da.a)(e.currentCheers),
                            r = i.total,
                            s = i.largestCheermote,
                            o = i.smallestCheermote;
                        this.setState({
                            totalBits: r,
                            largestCheermote: s,
                            smallestCheermote: o
                        })
                    }
                }, t.prototype.render = function() {
                    var e = this;
                    if (!this.props.visible && !this.props.currentCheers.length) return null;
                    var t, n = {
                        border: !0,
                        background: G.m.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    if (this.props.currentCheers.length || (t = C.createElement("button", {
                            className: "t-bits-card__close t-bits-card__top-controls",
                            onClick: this.props.onUserClose,
                            "data-test-selector": "cancel-button",
                            "data-a-target": "bits-card-close-button"
                        }, C.createElement(G._10, {
                            asset: G._11.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return C.createElement(G._19, u.__assign({
                        className: "t-bits-card",
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        alignItems: G.c.Center,
                        justifyContent: G.U.Center
                    }, n), C.createElement(G.Z, {
                        delay: 0
                    }), C.createElement(G.V, {
                        padding: {
                            top: 2
                        }
                    }, C.createElement(G._23, {
                        italic: !0
                    }, Object(m.d)("Fetching Bits", "BitsCard"))));
                    if (this.props.data.error || !this.props.bitsConfig) return C.createElement(Fn, null);
                    if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return C.createElement(G._19, u.__assign({
                        className: "t-bits-card",
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        alignItems: G.c.Center,
                        justifyContent: G.U.Center,
                        textAlign: G._24.Center,
                        padding: {
                            top: 2,
                            x: 1,
                            bottom: 1
                        }
                    }, n), t, C.createElement(G._23, {
                        color: G.F.Error,
                        italic: !0
                    }, Object(m.d)("You cannot Cheer in your own channel.", "BitsCard")));
                    if (this.state.buyingBits) return C.createElement(ra.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.props.onUserClose,
                        onClose: this.handleCloseBuy,
                        trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                        location: ua.b.ChatTooltip
                    });
                    var a = null,
                        i = this.state.helpRequested && !this.props.currentCheers.length,
                        r = null;
                    if (this.props.data.user.cheer.settings.event && (r = this.props.data.user.cheer.settings.event.toLowerCase().replace("_", "-")), this.state.chosenCheermote) {
                        var s = this.props.bitsConfig.indexedActions[this.state.chosenCheermote.toLowerCase()];
                        if (s) {
                            var o = s.orderedTiers.filter(function(e) {
                                return e.bits <= Mn.j
                            }).map(function(e) {
                                return {
                                    imgSrc: e.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: e.indexedImages.DARK.static.get(2),
                                    key: s.prefix + ":" + e.bits
                                }
                            }).reverse();
                            a = C.createElement(oa, {
                                bitsConfig: this.props.bitsConfig,
                                hide: i,
                                cheermotes: o,
                                showCheermoteAmount: !0,
                                event: r,
                                onHover: this.handleTierHover,
                                onHoverLeave: this.handleUnhover,
                                onClick: this.handleTierClick,
                                onClose: this.clearChosenCheermote
                            })
                        }
                    }
                    if (!a) {
                        o = this.props.bitsConfig.orderedActions.filter(function(e) {
                            return e.type !== Mn.d
                        }).map(function(t) {
                            var n = Mn.g;
                            e.props.data && e.props.data.user.cheer.settings.event && (n = 1);
                            var a = t.indexedTiers.get(n);
                            return a ? {
                                imgSrc: a.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: a.indexedImages.DARK.static.get(2),
                                key: t.prefix
                            } : null
                        });
                        a = C.createElement(oa, {
                            bitsConfig: this.props.bitsConfig,
                            hide: i,
                            cheermotes: o,
                            event: r,
                            onHover: this.handleCheermoteHover,
                            onHoverLeave: this.handleUnhover,
                            onClick: this.handleCheermoteClick
                        })
                    }
                    var l = null;
                    this.props.isSending ? this.state.totalBits >= Mn.k && (l = C.createElement(ca, {
                        onCancel: this.props.onCancelSend,
                        onConfirm: this.props.onConfirmSend
                    })) : l = r ? C.createElement(la, {
                        event: r,
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    }) : C.createElement(xn, {
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    });
                    var c;
                    i && (c = C.createElement("button", {
                        className: "t-bits-card__go-back t-bits-card__top-controls",
                        onClick: this.closeHelp,
                        "data-a-target": "bits-card-back-button"
                    }, C.createElement(G._10, {
                        asset: G._11.Play,
                        height: 8
                    }), " ", Object(m.d)("Back", "BitsCard")));
                    var d = R("t-bits-card", {
                        "t-bits-card--tall": !this.props.isSending
                    });
                    return C.createElement(G._19, u.__assign({
                        className: d,
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        "data-a-target": "bits-card"
                    }, n), !this.props.isSending && c, t, C.createElement(G._19, {
                        className: "t-bits-card__contents",
                        display: G.H.Flex,
                        flexGrow: 0,
                        flexDirection: G.J.Column,
                        alignContent: G.b.Stretch,
                        textAlign: G._24.Center,
                        borderBottom: !this.props.isSending
                    }, C.createElement(ia, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        displayName: this.props.data.user.displayName,
                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                        event: r,
                        helpRequested: this.state.helpRequested,
                        hoveredCheermote: this.state.hoveredCheermote,
                        hoveredTier: this.state.hoveredTier,
                        isSending: this.props.isSending,
                        largestCheermote: this.state.largestCheermote,
                        recentMinimumBits: this.props.data.user.cheer.settings.recentMinimumBits,
                        smallestCheermote: this.state.smallestCheermote,
                        totalBits: this.state.totalBits,
                        tournament: this.props.data.user.tournament,
                        channelID: this.props.channelID,
                        showHelp: this.showHelp,
                        isStaff: this.props.isStaff
                    })), !this.props.isSending && a, l && C.createElement(G.V, {
                        className: "t-bits-card__footer",
                        display: G.H.Flex
                    }, l))
                }, t = u.__decorate([Object(S.a)(pa, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                name: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                })], t)
            }(C.Component)),
            ha = n("KSGD"),
            ga = n("2emZ"),
            fa = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = ga.a.Hashtag, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        if (!e.startsWith("#")) return null;
                        if (null !== t.props.hashTags.edges) {
                            return t.props.hashTags.edges.filter(function(t) {
                                return t.node.id.includes(e)
                            }).map(function(n) {
                                return {
                                    current: e,
                                    replacement: n.node.id,
                                    element: t.genearateHashtagDisplay(n.node.id)
                                }
                            })
                        }
                        return null
                    }, t.genearateHashtagDisplay = function(e) {
                        return C.createElement(G.V, {
                            padding: {
                                right: .5
                            },
                            key: "hashtag:" + e
                        }, C.createElement(G._23, null, e))
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: ha.func
                }, t
            }(C.Component),
            va = n("Lx+S"),
            ba = n("SZoP"),
            ka = n("Bir6"),
            ya = n("e1CU"),
            Ca = 5,
            Sa = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = ga.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var a = t ? e : e.substring(1),
                            i = new RegExp("^" + Object(ka.a)(a), "i");
                        return n.state.sortedChatMembers.filter(function(e) {
                            return i.test(e.userLogin) || i.test(e.userDisplayName)
                        }).slice(0, Ca).map(function(a) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + a.userDisplayName,
                                element: n.renderMention(a)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return C.createElement("span", null, Object(ba.a)(e.userLogin, e.userDisplayName))
                    }, n.sortChatMembers = function(e) {
                        var t = [u.__assign({}, Object(ya.a)(e.channelDisplayName, e.channelLogin), {
                                userID: e.channelID,
                                userLogin: e.channelLogin,
                                userType: Ot.a.Owner
                            })],
                            n = e.chatMembers;
                        return n.sort(function(e, t) {
                            return e.userLogin < t.userLogin ? -1 : e.userLogin > t.userLogin ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedChatMembers: n.sortChatMembers(t)
                    }, n
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.chatMembers === e.chatMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin && this.props.channelID === e.channelID || this.setState({
                        sortedChatMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: ha.func
                }, t
            }(C.Component),
            _a = function() {
                return C.createElement(G.p, {
                    direction: G.q.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, C.createElement(G.V, {
                    padding: 1,
                    "data-test-selector": "raids-settings-tooltip"
                }, Object(m.d)("If a raid is offensive, moderate in chat settings.", "RaidReportingChat")))
            },
            Ea = n("QCOJ"),
            wa = n("hcyD"),
            Na = function(e) {
                var t = u.__assign({}, Object(jt.a)(e), {
                    mentioned_user_display_name: e.mentionedUserDisplayName,
                    user: e.userLogin
                });
                m.m.track(W.SpadeEventType.ChatMentionUsed, t)
            },
            Da = n("Umoc"),
            Oa = n("ieBa"),
            Ta = n("ACWz"),
            Ia = n("2I50"),
            La = /\S/,
            Ma = 3;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(Gn || (Gn = {}));
        var xa, Fa, ja = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.syncMembers = function() {
                        n.props.activeChatters.isDirty && n.setState({
                            chatMembers: n.props.activeChatters.getActiveChatters()
                        })
                    }, n.setChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInputRef = e
                    }, n.onChatSettingsToggle = function(e) {
                        n.handleRaidReportingToggle(e), e || Object(Da.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode
                        })
                    }, n.handleRaidReportingToggle = function(e) {
                        n.props.raidReceived && (n.state.showRaidsSettingsTooltip && (n.setState({
                            showRaidsSettingsTooltip: !1
                        }), m.k.set("raidsModerationTooltipsSeenNumTimes", Ma)), e && n.setState({
                            showRaidsFollowerOnlyTooltip: !1
                        }))
                    }, n.onKeyDown = function(e) {
                        var t = e.charCode || e.keyCode;
                        switch (n.props.onKeyDown && t !== On.a.Enter && n.props.onKeyDown(e), t) {
                            case On.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                            case On.a.Esc:
                                return void(n.state.showCard === Gn.Bits && n.setState({
                                    showCard: Gn.None
                                }));
                            case On.a.Tab:
                                return void e.preventDefault();
                            default:
                                return
                        }
                    }, n.onMessageValueUpdate = function(e) {
                        n.setState({
                            value: e
                        })
                    }, n.onInputFocus = function() {
                        n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onMouseEnterInput = function() {
                        n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onChatCommand = function(e) {
                        n.props.onChatCommand(e), n.trackChatEvent()
                    }, n.confirmEmbedAction = function(e, t, a) {
                        var i = n,
                            r = i.hasConfirmedInEmbed;
                        if (i.hasSeenConfirmationPrompt) return r;
                        var s = window.confirm(n.confirmationMessage(e, t, a));
                        return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = s, s
                    }, n.confirmationMessage = function(e, t, n) {
                        return Object(m.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                            displayName: e,
                            message: t,
                            channelLogin: n
                        }, "ChatInput")
                    }, n.onMessageSend = function() {
                        return u.__awaiter(n, void 0, void 0, function() {
                            var e, t, n, a, i = this;
                            return u.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return this.props.authToken ? this.props.channelID ? (e = La.test(this.state.value)) ? this.state.isSendingBits ? (m.i.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (m.i.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : this.props.data && this.props.data.currentUser ? 0 === (t = Object(da.a)(this.state.messageCheers)).total ? (this.sendRegularMessage(), [2]) : this.props.data.user ? this.props.data.user.cheer ? (n = Object(da.f)({
                                            messageBits: t,
                                            balance: this.props.data.currentUser.bitsBalance,
                                            cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                                            emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                                            inputValue: this.state.value
                                        })).canSpend ? this.props.sendCheer ? (this.setState({
                                            isSendingBits: !0
                                        }), t.total >= Mn.k ? [4, new Promise(function(e) {
                                            var t = setTimeout(e, Mn.l.UNDO_PROMPT_DURATION),
                                                n = function(n) {
                                                    void 0 === n && (n = !1), clearTimeout(t), i.cancelDelayedSend = null, i.confirmDelayedSend = null, e(n)
                                                };
                                            i.cancelDelayedSend = function() {
                                                return n(!0)
                                            }, i.confirmDelayedSend = function() {
                                                return n(!1)
                                            }
                                        })] : [3, 2]) : (m.i.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (m.i.warn("[Chat Input] Spending bits forbidden.", n), [2]) : (m.i.warn("[Chat Input] Cheer is null."), [2]) : (m.i.warn("[Chat Input] User is null."), [2]) : (this.sendRegularMessage(), [2]) : (m.i.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                            hasSendableInput: e,
                                            value: this.state.value
                                        }), [2]) : (m.i.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.props.login(), [2]);
                                    case 1:
                                        if (r.sent()) return this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                        r.label = 2;
                                    case 2:
                                        a = Object(Tn.a)(), r.label = 3;
                                    case 3:
                                        return r.trys.push([3, 5, , 6]), [4, this.props.sendCheer({
                                            variables: {
                                                input: {
                                                    id: a,
                                                    targetID: this.props.channelID,
                                                    bits: t.total,
                                                    content: this.state.value
                                                }
                                            }
                                        })];
                                    case 4:
                                        return r.sent(), [3, 6];
                                    case 5:
                                        return r.sent(), this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                    case 6:
                                        return this.setState({
                                            isSendingBits: !1,
                                            showCard: Gn.None,
                                            value: ""
                                        }), this.chatInputRef.focus(), this.autocompleteInputRef.setValue(""), [2]
                                }
                            })
                        })
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            if (!e.messageCheers.length) return {
                                showCard: e.showCard === Gn.Emotes ? Gn.None : Gn.Emotes
                            }
                        })
                    }, n.onBitsIconClick = function() {
                        n.state.showCard === Gn.Bits ? n.trackBitsCardInteraction(ua.a.CloseCard) : n.trackBitsCardInteraction(ua.a.OpenCard), n.setState({
                            showCard: n.state.showCard === Gn.Bits ? Gn.None : Gn.Bits
                        })
                    }, n.onShowViewersList = function() {
                        n.state.showCard !== Gn.None && n.setState({
                            showCard: Gn.None
                        }), n.props.showViewersList()
                    }, n.onBitsClose = function() {
                        n.state.showCard === Gn.Bits && n.setState({
                            showCard: Gn.None
                        }), n.trackBitsCardInteraction(ua.a.CloseCard)
                    }, n.onClickEmote = function(e) {
                        var t = n.state.value;
                        n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef.setValue(t)
                    }, n.onEmotePickerDataLoaded = function(e) {
                        e && n.setState({
                            showEmotePickerButton: !0
                        })
                    }, n.trackBitsCardInteraction = function(e, t) {
                        var a = {
                            actionName: e,
                            emoteType: t && t.emoteType,
                            emoteLevel: t && t.emoteLevel,
                            location: t && t.location,
                            displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                        };
                        Object(ua.h)(a)
                    }, n.state = {
                        chatMembers: t.activeChatters.getActiveChatters(),
                        hasInteractedOrPageload: t.firstPageLoaded,
                        isSendingBits: !1,
                        messageCheers: [],
                        showBuyBits: !1,
                        showCard: Gn.None,
                        showEmotePickerButton: !!t.authToken,
                        showRaidsSettingsTooltip: !1,
                        showRaidsFollowerOnlyTooltip: !1,
                        value: ""
                    }, n
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.syncMembersHandle = setInterval(this.syncMembers, 250)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    var n = this;
                    if (t.value !== this.state.value && this.props.bitsConfig) {
                        var a = [];
                        Object(A.c)(t.value, this.props.bitsConfig).forEach(function(e) {
                            e.type === Ct.a.Emote && a.push(e.content)
                        }), a.length && t.showCard === Gn.Emotes && this.setState({
                            showCard: Gn.None
                        }), this.setState({
                            messageCheers: a
                        })
                    }
                    this.props.isCurrentUserModerator && !this.props.raidReceived && e.raidReceived && (m.k.get("raidsModerationTooltipsSeenNumTimes", 0), Number(m.k.get("raidsModerationTooltipsSeenNumTimes", 0)) < Ma && this.setState({
                        showRaidsSettingsTooltip: !0,
                        showRaidsFollowerOnlyTooltip: !0
                    }, function() {
                        setTimeout(function() {
                            m.k.set("raidsModerationTooltipsSeenNumTimes", m.k.get("raidsModerationTooltipsSeenNumTimes", 0) + 1), n.setState({
                                showRaidsSettingsTooltip: !1
                            })
                        }, 2e4)
                    }))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.firstPageLoaded && e.firstPageLoaded && this.setState({
                        hasInteractedOrPageload: !0
                    })
                }, t.prototype.componentWillUnMount = function() {
                    this.syncMembersHandle && (clearInterval(this.syncMembersHandle), this.syncMembersHandle = 0)
                }, t.prototype.render = function() {
                    var e = [];
                    this.props.bitsConfig && e.push(C.createElement(G.v, {
                        key: "bits",
                        icon: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.event ? G._11.HGCNexus : G._11.Bits,
                        ariaLabel: Object(m.d)("Bits", "ChatInput"),
                        type: G.w.Secondary,
                        onClick: this.onBitsIconClick,
                        "data-a-target": "bits-button"
                    })), this.state.showEmotePickerButton && e.push(C.createElement(Oa.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle
                    }));
                    var t = null;
                    this.state.hasInteractedOrPageload && (t = C.createElement(Oa.c, {
                        channelOwnerID: this.props.channelID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === Gn.Emotes
                    }));
                    var n = null;
                    this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = C.createElement(ma, {
                        bitsConfig: this.props.bitsConfig,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentCheers: this.state.messageCheers,
                        isSending: this.state.isSendingBits,
                        isStaff: this.props.isStaff,
                        onCancelSend: this.cancelDelayedSend,
                        onClickCheermote: this.onClickEmote,
                        onConfirmSend: this.confirmDelayedSend,
                        onUserClose: this.onBitsClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        visible: this.state.showCard === Gn.Bits
                    }));
                    var a = null;
                    return this.props.data.user && null !== this.props.data.user.cheer && null !== this.props.data.user.cheer.hashtags && this.state.messageCheers.length > 0 && (a = C.createElement(fa, {
                        hashTags: this.props.data.user.cheer.hashtags
                    })), C.createElement(G.V, {
                        className: "chat-input",
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, C.createElement(G.Q, {
                        position: G._4.Relative,
                        zIndex: G._39.Above
                    }, C.createElement("div", {
                        onMouseEnter: this.onMouseEnterInput
                    }, t, n, C.createElement(In.b, {
                        componentType: In.a.TextArea,
                        suggestionSource: In.c.Chat,
                        onValueUpdate: this.onMessageValueUpdate,
                        onFocus: this.onInputFocus,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setChatInputRef,
                        refDelegate: this.setAutocompleteInputRef,
                        paddingRight: 30 * e.length,
                        placeholder: Object(m.d)("Send a message", "ChatInput"),
                        noResize: !0,
                        "data-a-target": "chat-input",
                        "data-test-selector": "chat-input",
                        disabled: this.state.isSendingBits,
                        containerElement: this.props.containerElement
                    }, C.createElement(In.d, {
                        emotes: this.props.emotes
                    }), C.createElement(Sa, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        chatMembers: this.state.chatMembers
                    }), a), C.createElement(G.V, {
                        position: G._4.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e))), C.createElement(G.V, {
                        className: "chat-input__buttons-container",
                        display: G.H.Flex,
                        justifyContent: G.U.Between,
                        margin: {
                            top: 1
                        }
                    }, C.createElement(G.V, {
                        display: G.H.Flex,
                        flexDirection: G.J.Row
                    }, C.createElement(G.V, {
                        position: G._4.Relative
                    }, C.createElement(va.a, {
                        disabled: this.props.isEmbedded,
                        onToggle: this.onChatSettingsToggle,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        authToken: this.props.authToken,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onChatCommand: this.onChatCommand,
                        isPopout: this.props.isPopout,
                        channelID: this.props.channelID,
                        sawFirstRaidPrompt: this.state.showRaidsFollowerOnlyTooltip
                    }), this.state.showRaidsSettingsTooltip ? C.createElement(_a, null) : null), C.createElement(G.v, {
                        ariaLabel: Object(m.d)("Viewer list", "ChatInput"),
                        "data-a-target": "chat-viewer-list",
                        "data-test-selector": "chat-viewer-list",
                        icon: G._11.ViewerList,
                        onClick: this.onShowViewersList
                    })), this.renderSendButton()))
                }, t.prototype.renderSendButton = function() {
                    var e;
                    return e = this.state.value && null !== Object(Ae.n)(this.state.value) ? Object(m.d)("Whisper", "ChatInput") : Object(m.d)("Chat", "ChatInput"), C.createElement(G.u, {
                        onClick: this.onMessageSend,
                        "data-a-target": "chat-send-button",
                        "data-test-selector": "chat-send-button",
                        disabled: this.state.isSendingBits
                    }, e)
                }, t.prototype.sendRegularMessage = function() {
                    this.props.onSendMessage && this.props.onSendMessage(this.state.value) && (this.trackChatEvent(), this.trackMentions(), this.autocompleteInputRef.setValue(""), this.setState({
                        showCard: Gn.None
                    }))
                }, t.prototype.trackChatEvent = function() {
                    Object(wa.a)({
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        player: this.props.isPopout ? Ea.a.Embed : Ea.a.Web,
                        subOnlyMode: this.props.isSubsOnlyModeEnabled
                    })
                }, t.prototype.trackMentions = function() {
                    if (this.state.value && this.props.sessionUser)
                        for (var e = 0, t = Object(It.c)(this.state.value, this.props.sessionUser.displayName, !1); e < t.length; e++) {
                            var n = t[e];
                            n.type === Ct.a.Mention && n.content.recipient !== n.content.sender && Na({
                                channelLogin: this.props.channelLogin,
                                isHostMode: this.props.isHostMode,
                                mentionedUserDisplayName: n.content.recipient,
                                userLogin: this.props.sessionUser.login
                            })
                        } else m.i.warn("[ChatInput] trackMentions was called in a nonsensical state.")
                }, t
            }(C.Component),
            Aa = Object(_.compose)(Object(S.a)(Ia, {
                name: "sendCheer"
            }), Object(S.a)(Ta), Object(At.c)("ChatInput", {
                autoReportInteractive: !0
            }), Object(k.a)(function(e) {
                return {
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode,
                    sessionUser: Object(y.c)(e)
                }
            }, function(e) {
                return Object(E.bindActionCreators)({
                    login: function() {
                        return Object(De.f)(Ne.a.Chat)
                    }
                }, e)
            }))(ja),
            Ba = n("pexS"),
            Ra = n("DtWM"),
            Ua = n("zCIC"),
            Va = (n("rMeN"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            Pa = 10,
            Ha = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        if (t.scroll && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type)) {
                            t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= Pa ? t.setState({
                                isAutoScrolling: !0
                            }) : t.setState({
                                isAutoScrolling: !1
                            })
                        }
                    }, t.handleResize = function() {
                        t.state.isAutoScrolling && t.scrollToBottom()
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom)
                    }, t.scrollToBottom = function() {
                        t.scroll && t.scroll.scrollContent && (t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    Va.forEach(function(t) {
                        return e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    Va.forEach(function(t) {
                        return e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this,
                        t = this.props.messages.map(function(t) {
                            return C.createElement(kn, {
                                badgeSets: e.props.badgeSets,
                                channelID: e.props.channelID,
                                isCurrentUserModerator: e.props.isCurrentUserModerator,
                                message: t,
                                key: t.id,
                                showModerationIcons: e.props.showModerationIcons && !e.props.isEmbedded,
                                showTimestamps: e.props.showTimestamps,
                                currentUserDisplayName: e.props.currentUserDisplayName,
                                currentUserLogin: e.props.currentUserLogin,
                                onPushMessage: e.props.onPushMessage
                            })
                        });
                    return C.createElement(G.V, {
                        refDelegate: this.props.containerRef,
                        className: "chat-list",
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        flexWrap: G.K.NoWrap,
                        overflow: G._0.Hidden,
                        flexGrow: 1
                    }, C.createElement(Ra.a, {
                        onResize: this.handleResize
                    }), C.createElement(G.Q, {
                        flexGrow: 1
                    }, C.createElement(Ua.b, {
                        className: "chat-list__lines",
                        scrollRef: this.saveScrollRef,
                        "data-a-target": "chat-scroller"
                    }, C.createElement(G.V, {
                        flexGrow: 1,
                        fullHeight: !0,
                        padding: {
                            bottom: 1
                        }
                    }, t))), C.createElement(G.V, {
                        className: "chat-list__more-messages-placeholder",
                        position: G._4.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : C.createElement(G.Q, {
                        display: G.H.Flex,
                        justifyContent: G.U.Center,
                        alignItems: G.c.Center,
                        position: G._4.Absolute,
                        padding: .5,
                        attachBottom: !0,
                        fullWidth: !0
                    }, C.createElement("div", {
                        className: "chat-list__more-messages",
                        onClick: this.handleClickMoreMessages
                    }, Object(m.d)("More messages below.", "ChatList")))
                }, t
            }(C.Component),
            Wa = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = e.pubsub.messages.chatRichEmbedInfo;
                    t && this.props.pubsub.messages.chatRichEmbedInfo !== t && m.n.apollo.client.writeQuery({
                        query: Ba,
                        variables: {
                            slug: t.data.twitch_metadata.clip_metadata.slug
                        },
                        data: function(e) {
                            var t = e.data.twitch_metadata.clip_metadata,
                                n = {
                                    clip: {
                                        slug: t.slug,
                                        id: t.id,
                                        url: e.data.request_url,
                                        title: e.data.title,
                                        thumbnailURL: e.data.thumbnail_url,
                                        curator: {
                                            displayName: e.data.author_name,
                                            __typename: "User"
                                        },
                                        broadcaster: {
                                            displayName: t.channel_display_name,
                                            __typename: "User"
                                        },
                                        game: null,
                                        __typename: "Clip"
                                    }
                                };
                            return t.game && (n.clip.game = {
                                displayName: t.game,
                                __typename: "Game"
                            }), n
                        }(t)
                    })
                }, t.prototype.render = function() {
                    return C.createElement(Ha, {
                        channelID: this.props.channelID,
                        badgeSets: this.props.badgeSets,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        channelLogin: this.props.channelLogin,
                        onPushMessage: this.props.onPushMessage,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        messages: this.props.messages,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        currentUserLogin: this.props.currentUserLogin,
                        containerRef: this.props.containerRef
                    })
                }, t
            }(C.Component),
            qa = Object(E.compose)(Object(k.a)(function(e, t) {
                return {
                    messages: function(e, t) {
                        return e.chat && e.chat.messages ? e.chat.messages[t] || [] : []
                    }(e, t.channelLogin),
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps
                }
            }), Object(U.a)([{
                skip: function(e) {
                    return !e.channelID
                },
                topic: function(e) {
                    return e.channelID ? Object(H.h)(e.channelID) : ""
                },
                mapMessageTypesToProps: (xa = {}, xa[V.c.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", xa)
            }]))(Wa),
            Ga = (n("HuX0"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onClickConfirm = function() {
                        n.markRoomSeen(), n.setState({
                            showRules: !1
                        })
                    };
                    var a = n.getRoomsSeen();
                    return n.state = {
                        showRules: n.props.chatRules && n.props.chatRules.length > 0 && !a[n.props.channelLogin]
                    }, n
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return this.state.showRules ? C.createElement(G.V, {
                        className: "chat-rules",
                        position: G._4.Relative
                    }, C.createElement(G._19, {
                        border: !0,
                        background: G.m.Base,
                        margin: {
                            bottom: 1
                        }
                    }, C.createElement(G.V, {
                        padding: 1
                    }, C.createElement(G.V, {
                        margin: {
                            bottom: 1
                        }
                    }, C.createElement(G._23, {
                        type: G._28.H6
                    }, Object(m.d)("Chat Rules:", "ChatRules"))), C.createElement(G.V, null, C.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                        return C.createElement("li", {
                            key: t
                        }, e)
                    }))), C.createElement(G.V, {
                        margin: {
                            top: 1
                        },
                        display: G.H.Flex,
                        justifyContent: G.U.Center
                    }, C.createElement(G.u, {
                        size: G.x.Small,
                        onClick: this.onClickConfirm
                    }, Object(m.d)("Ok, got it!", "ChatRules")))))) : null
                }, t.prototype.getRoomsSeen = function() {
                    return m.k.get("chat_rules_shown", {})
                }, t.prototype.markRoomSeen = function() {
                    var e = this.getRoomsSeen();
                    e[this.props.channelLogin] = !0, m.k.set("chat_rules_shown", e)
                }, t
            }(C.Component)),
            za = 3,
            Qa = (n("Bsuy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, Qt.a.viewer_list, "")
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        a = t.header,
                        i = n.map(function(t) {
                            return C.createElement("div", {
                                key: "chat-viewers-list-item-" + t
                            }, C.createElement("button", {
                                className: "chat-viewers-list__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, C.createElement(G._23, {
                                transform: G._27.Capitalize
                            }, t)))
                        });
                    return C.createElement(G.V, {
                        className: "chat-viewers-list",
                        padding: {
                            bottom: 2
                        }
                    }, C.createElement("div", null, C.createElement(G._23, {
                        transform: G._27.Uppercase
                    }, a)), i)
                }, t
            }(C.Component)),
            Ja = (n("gwjw"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        filter: "",
                        inputValue: "",
                        filteredViewers: {},
                        viewersPage: 0,
                        renderedViewers: [],
                        isLoading: !1
                    }, t.filterTimeout = 0, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.loadMore = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var e = this;
                            return u.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, new Promise(function(t) {
                                            e.setState(function(t) {
                                                return {
                                                    renderedViewers: e.getRenderedViewers(t.filteredViewers.viewers, t.viewersPage + 1),
                                                    viewersPage: t.viewersPage + 1
                                                }
                                            }, function() {
                                                t()
                                            })
                                        })];
                                    case 1:
                                        return t.sent(), [2]
                                }
                            })
                        })
                    }, t.getRenderedViewers = function(e, t) {
                        return e ? e.slice(0, 100 * (t || 1)) : []
                    }, t.handleFilter = function(e, n) {
                        var a = function(e, t) {
                                if (!t) return e;
                                var n = Object.assign({}, e);
                                return Object.keys(n).forEach(function(e) {
                                    var a = n[e];
                                    Array.isArray(a) && (n[e] = a.filter(function(e) {
                                        return -1 !== e.toLowerCase().indexOf(t)
                                    }))
                                }), n
                            }(n, e),
                            i = t.getRenderedViewers(a.viewers, 1);
                        t.scroll && t.scroll.scrollToTop(), t.setState({
                            filteredViewers: a,
                            isLoading: !1,
                            renderedViewers: i,
                            viewersPage: 1
                        })
                    }, t.handleFilterChange = function(e) {
                        var n = e.target.value,
                            a = n.toLowerCase().trim();
                        t.setState({
                            filter: a,
                            inputValue: n,
                            isLoading: !0
                        }), clearTimeout(t.filterTimeout), t.filterTimeout = setTimeout(function() {
                            t.handleFilter(a, t.props.viewers)
                        }, 350)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.handleFilter(this.state.filter, e.viewers)
                }, t.prototype.render = function() {
                    var e = this.props.onShowViewerCard,
                        t = [],
                        n = this.state.filteredViewers;
                    n.staff && n.staff.length > 0 && t.push(C.createElement(Qa, {
                        key: "chat-viewers-list-staff",
                        header: Object(m.d)("Staff", "ChatViewers"),
                        viewers: n.staff,
                        onUsernameClick: e
                    })), n.admins && n.admins.length > 0 && t.push(C.createElement(Qa, {
                        key: "chat-viewers-list-admins",
                        header: Object(m.d)("Admins", "ChatViewers"),
                        viewers: n.admins,
                        onUsernameClick: e
                    })), n.global_mods && n.global_mods.length > 0 && t.push(C.createElement(Qa, {
                        key: "chat-viewers-list-global-mods",
                        header: Object(m.d)("Global Moderators", "ChatViewers"),
                        viewers: n.global_mods,
                        onUsernameClick: e
                    })), n.moderators && n.moderators.length > 0 && t.push(C.createElement(Qa, {
                        key: "chat-viewers-list-moderators",
                        header: Object(m.d)("Moderators", "ChatViewers"),
                        viewers: n.moderators,
                        onUsernameClick: e
                    })), n.viewers && n.viewers.length > 0 && t.push(C.createElement(Qa, {
                        key: "chat-viewers-list-viewers",
                        "data-test-selector": "chat-viewers-list-viewers",
                        header: Object(m.d)("Viewers", "ChatViewers"),
                        viewers: this.state.renderedViewers,
                        onUsernameClick: e
                    }));
                    var a = this.props.isLoading || this.state.isLoading,
                        i = a && C.createElement(G.V, {
                            className: "chat-viewers__loading",
                            display: G.H.Flex,
                            alignItems: G.c.Center,
                            justifyContent: G.U.Center,
                            zIndex: G._39.Above,
                            position: G._4.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, C.createElement(G.Z, null));
                    return C.createElement(G.V, {
                        className: "chat-viewers__container",
                        fullWidth: !0,
                        fullHeight: !0,
                        flexShrink: 0,
                        zIndex: G._39.Default
                    }, C.createElement(G.V, {
                        className: "chat-viewers__pane",
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        flexWrap: G.K.NoWrap,
                        position: G._4.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0
                    }, C.createElement(G.V, {
                        className: "chat-viewers__header",
                        display: G.H.Flex,
                        justifyContent: G.U.Center,
                        alignItems: G.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, C.createElement(G.V, {
                        position: G._4.Absolute,
                        attachLeft: !0,
                        margin: {
                            left: 1
                        }
                    }, C.createElement(G.v, {
                        icon: G._11.Close,
                        ariaLabel: Object(m.d)("Close", "ChatViewers"),
                        "data-a-target": "chat-viewer-list",
                        onClick: this.props.closeViewersList
                    })), C.createElement("p", {
                        "data-a-target": "chat-viewers_header-channel-name"
                    }, Object(m.d)("Viewer List", "ChatViewers"))), C.createElement(G.V, {
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        flexWrap: G.K.NoWrap,
                        fullHeight: !0
                    }, C.createElement(G.V, {
                        className: "chat-viewers__filter",
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }, C.createElement(G.R, {
                        type: G.S.Search,
                        name: "viewers-filter",
                        placeholder: Object(m.d)("Filter Viewers", "ChatViewers"),
                        readOnly: this.props.isLoading,
                        onChange: this.handleFilterChange,
                        value: this.state.inputValue
                    })), C.createElement(Ua.b, {
                        className: "chat-viewers__list",
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0,
                        scrollContentClassName: "chat-viewers__scroll-container"
                    }, C.createElement(G.V, {
                        padding: {
                            x: 2
                        }
                    }, t, C.createElement(Ua.a, {
                        key: this.state.filter,
                        enabled: !a,
                        loadMore: this.loadMore
                    })))), i))
                }, t
            }(C.Component)),
            $a = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        viewers: {},
                        viewerCount: 0,
                        isLoading: !1
                    }, n.logger = m.i.withCategory("chat-viewers"), n
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.channelLogin !== e.channelLogin && this.updateViewers(e.channelLogin)
                }, t.prototype.componentDidMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            return this.updateViewers(this.props.channelLogin), [2]
                        })
                    })
                }, t.prototype.render = function() {
                    return C.createElement(Ja, {
                        channelLogin: this.props.channelLogin,
                        closeViewersList: this.props.closeViewersList,
                        viewers: this.state.viewers,
                        viewerCount: this.state.viewerCount,
                        isLoading: this.state.isLoading,
                        onShowViewerCard: this.props.onShowViewerCard
                    })
                }, t.prototype.updateViewers = function(e) {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var t, n, a;
                        return u.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return this.setState({
                                        isLoading: !0
                                    }), [4, function(e) {
                                        return u.__awaiter(this, void 0, void 0, function() {
                                            var t, n, a, i, r;
                                            return u.__generator(this, function(s) {
                                                switch (s.label) {
                                                    case 0:
                                                        t = "https://tmi.twitch.tv/group/user/" + e.toLowerCase() + "/chatters", n = 1, s.label = 1;
                                                    case 1:
                                                        if (!(n <= za)) return [3, 7];
                                                        s.label = 2;
                                                    case 2:
                                                        return s.trys.push([2, 5, , 6]), [4, fetch(t, {
                                                            method: "GET",
                                                            headers: {
                                                                Accept: "application/json; charset=UTF-8",
                                                                "content-type": "application/json; charset=UTF-8"
                                                            }
                                                        })];
                                                    case 3:
                                                        return a = s.sent(), [4, a.json()];
                                                    case 4:
                                                        return i = s.sent(), m.i.debug("[update] getViewers done."), [2, i];
                                                    case 5:
                                                        if (r = s.sent(), n === za) throw r;
                                                        return [3, 6];
                                                    case 6:
                                                        return ++n, [3, 1];
                                                    case 7:
                                                        return [2]
                                                }
                                            })
                                        })
                                    }(e)];
                                case 1:
                                    return t = i.sent(), n = t ? t.chatters : {}, a = t ? t.chatter_count : 0, m.i.debug("Updated viewers list with " + a + " viewers"), this.setState({
                                        viewers: n,
                                        viewerCount: a,
                                        isLoading: !1
                                    }), [2]
                            }
                        })
                    })
                }, t
            }(C.Component),
            Ka = Object(k.a)(null, function(e) {
                return Object(E.bindActionCreators)({
                    onShowViewerCard: v.d
                }, e)
            })($a),
            Ya = n("tjbt"),
            Za = n("V5M+"),
            Xa = n("oSFp"),
            ei = n("E9Qg"),
            ti = n("5s0/"),
            ni = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isIgnored: !1
                    }, t.ignoreUser = function() {
                        t.props.sendMessageToTMI(Object(Ae.h)(t.props.targetLogin)), t.setState({
                            isIgnored: !0
                        })
                    }, t.unignoreUser = function() {
                        t.props.sendMessageToTMI(Object(Ae.j)(t.props.targetLogin)), t.setState({
                            isIgnored: !1
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isIgnored) {
                        var e = Object(m.d)("Unblock User", "ViewerCardIgnoreAction");
                        return C.createElement(G._31, {
                            key: "Ignore",
                            label: e,
                            direction: G._33.Top,
                            align: G._32.Right,
                            offsetX: "15%"
                        }, C.createElement(G.v, {
                            icon: G._11.Unignore,
                            ariaLabel: Object(m.d)("Unblock {displayName}", {
                                displayName: this.props.targetDisplayName
                            }, "ViewerCardIgnoreAction"),
                            onClick: this.unignoreUser,
                            overlay: !0
                        }))
                    }
                    var t = Object(m.d)("Block User", "ViewerCardIgnoreAction");
                    return C.createElement(G._31, {
                        key: "Ignore",
                        label: t,
                        direction: G._33.Top,
                        align: G._32.Right,
                        offsetX: "15%"
                    }, C.createElement(G.v, {
                        icon: G._11.Ignore,
                        ariaLabel: Object(m.d)("Block {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.ignoreUser,
                        overlay: !0
                    }))
                }, t = u.__decorate([Object(At.c)("ViewerCardIgnoreAction")], t)
            }(C.Component),
            ai = n("Dc1A"),
            ii = n("1Eny"),
            ri = n("zVM8"),
            si = "10 minutes",
            oi = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            a = e.channelID,
                            i = e.userLogin;
                        n(Object(P.a)({
                            channelID: a,
                            bannedUserLogin: i
                        }))
                    }, t.onTimeoutClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            a = e.channelID,
                            i = e.userLogin;
                        n(Object(P.a)({
                            channelID: a,
                            bannedUserLogin: i,
                            expiresIn: si
                        }))
                    }, t.onUnbanClick = function() {
                        var e = t.props,
                            n = e.unbanUser,
                            a = e.channelID,
                            i = e.userLogin;
                        n(Object(P.a)({
                            channelID: a,
                            bannedUserLogin: i
                        }))
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return C.createElement(G.V, {
                        display: G.H.InlineFlex
                    }, this.getContent())
                }, t.prototype.getContent = function() {
                    return this.props.data.loading || this.props.data.error ? [this.renderBanAction(!0), this.renderTimeoutAction(!0)] : this.props.data.chatRoomBanStatus ? this.props.data.chatRoomBanStatus.isPermanent ? [this.renderUnbanAction(), this.renderTimeoutAction(!0)] : [this.renderBanAction(), this.renderUntimeoutAction()] : [this.renderBanAction(), this.renderTimeoutAction()]
                }, t.prototype.renderTimeoutAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(m.d)("Timeout User", "ViewerCardModActions");
                    return C.createElement(G._31, {
                        key: "Timeout",
                        label: t,
                        direction: G._33.Top,
                        align: G._32.Left,
                        offsetX: "15%"
                    }, C.createElement(G.V, {
                        padding: {
                            right: 1
                        }
                    }, C.createElement(G.v, {
                        icon: G._11.Timeout,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onTimeoutClick
                    })))
                }, t.prototype.renderUntimeoutAction = function() {
                    var e = Object(m.d)("Untimeout User", "ViewerCardModActions");
                    return C.createElement(G._31, {
                        key: "Untimeout",
                        label: e,
                        direction: G._33.Top,
                        align: G._32.Left,
                        offsetX: "15%"
                    }, C.createElement(G.V, {
                        padding: {
                            right: 1
                        }
                    }, C.createElement(G.v, {
                        icon: G._11.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t.prototype.renderBanAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(m.d)("Ban User", "ViewerCardModActions");
                    return C.createElement(G._31, {
                        key: "Ban",
                        label: t,
                        direction: G._33.Top,
                        align: G._32.Left,
                        offsetX: "32%"
                    }, C.createElement(G.V, {
                        padding: {
                            right: 1,
                            left: 1
                        }
                    }, C.createElement(G.v, {
                        icon: G._11.Ban,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onBanClick
                    })))
                }, t.prototype.renderUnbanAction = function() {
                    var e = Object(m.d)("Unban User", "ViewerCardModActions");
                    return C.createElement(G._31, {
                        key: "Unban",
                        label: e,
                        direction: G._33.Top,
                        align: G._32.Left,
                        offsetX: "32%"
                    }, C.createElement(G.V, {
                        padding: {
                            right: 1,
                            left: 1
                        }
                    }, C.createElement(G.v, {
                        icon: G._11.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t = u.__decorate([Object(At.c)("ViewerCardModActions"), Object(S.a)(ri, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.userID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(S.a)(ai, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var a = e.readQuery({
                                        query: ri,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        }
                                    });
                                    t && t.data && (a.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: ri,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        },
                                        data: a
                                    })
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(S.a)(ii, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                            query: ri,
                                            variables: {
                                                targetUserID: t.userID,
                                                channelID: t.channelID
                                            }
                                        }),
                                        a = u.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                    e.writeQuery({
                                        query: ri,
                                        variables: {
                                            targetUserID: t.userID,
                                            channelID: t.channelID
                                        },
                                        data: a
                                    })
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(C.Component),
            li = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.modUser = function() {
                        n.props.sendMessageToTMI(Object(Ae.i)(n.props.targetLogin)), n.setState({
                            isModerator: !0
                        })
                    }, n.unmodUser = function() {
                        n.props.sendMessageToTMI(Object(Ae.k)(n.props.targetLogin)), n.setState({
                            isModerator: !1
                        })
                    }, n.state = {
                        isModerator: !1
                    }, n
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isModerator) {
                        var e = Object(m.d)("Unmod User", "ViewerCardOwnerActions");
                        return C.createElement(G._31, {
                            label: e,
                            direction: G._33.Top,
                            align: G._32.Center
                        }, C.createElement(G.V, {
                            key: "OP",
                            padding: {
                                right: 1
                            }
                        }, C.createElement(G.v, {
                            icon: G._11.FollowCheck,
                            ariaLabel: e,
                            onClick: this.unmodUser
                        })))
                    }
                    e = Object(m.d)("Mod User", "ViewerCardOwnerActions");
                    return C.createElement(G._31, {
                        label: e,
                        direction: G._33.Top,
                        align: G._32.Center
                    }, C.createElement(G.V, {
                        key: "OP",
                        padding: {
                            right: 1
                        }
                    }, C.createElement(G.v, {
                        icon: G._11.OP,
                        ariaLabel: e,
                        onClick: this.modUser
                    })))
                }, t = u.__decorate([Object(At.c)("ViewerCardOwnerActions")], t)
            }(C.Component),
            ci = n("O1nh"),
            di = n("mw/a"),
            ui = n("daN3"),
            pi = n("YH6m"),
            mi = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onGiftSelect = function() {
                        t.props.onGiftSelect && t.props.onGiftSelect()
                    }, t.onSelectTierTab = function(e) {
                        t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return C.createElement(G.V, null, C.createElement(G.V, {
                        display: G.H.Flex,
                        justifyContent: G.U.Between,
                        alignItems: G.c.Center,
                        fullWidth: !0
                    }, C.createElement(G._23, {
                        bold: !0,
                        type: G._28.H5
                    }, Object(m.d)("Choose A Gift Subscription", "GiftTierTabs")), C.createElement(G.u, {
                        type: G.z.Text,
                        icon: G._11.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, C.createElement(G.V, {
                        alignItems: G.c.Center,
                        display: G.H.InlineFlex
                    }, C.createElement(G._23, null, Object(m.d)("Back", "GiftTierTabs"))))), C.createElement(pi.a, {
                        canPrimeSubscribe: !1,
                        channelDisplayName: this.props.channelDisplayName,
                        giftRecipient: this.props.giftRecipient,
                        isGift: !0,
                        isSubscribed: !1,
                        onGiftSelect: this.onGiftSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        userHasPrime: !1
                    }))
                }, t
            }(C.Component),
            hi = n("pQNb"),
            gi = n("CwIZ"),
            fi = (n("VSa1"), n("BBNG"));
        ! function(e) {
            e[e.ActionsPage = 0] = "ActionsPage", e[e.SubGiftSelectPage = 1] = "SubGiftSelectPage"
        }(Fa || (Fa = {}));
        var vi = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: Fa.ActionsPage
                    }, t.getContent = function() {
                        if (t.props.data.loading || t.props.data.error) return t.renderHideButton();
                        var e = {
                                backgroundImage: "url(" + (t.props.data.targetUser.bannerImageURL || ei) + ")"
                            },
                            n = t.state.currentPage === Fa.ActionsPage ? t.renderActions() : t.renderSubGiftSelect();
                        return C.createElement(G.V, null, C.createElement(G._19, {
                            elevation: 1,
                            border: !0
                        }, C.createElement("div", {
                            className: "viewer-card",
                            style: e
                        }, C.createElement(G.V, {
                            display: G.H.Flex,
                            flexDirection: G.J.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            className: "viewer-card__overlay"
                        }, C.createElement(G.V, {
                            padding: 1,
                            alignItems: G.c.Start,
                            justifyContent: G.U.Start,
                            display: G.H.Flex,
                            flexDirection: G.J.Row,
                            textAlign: G._24.Center,
                            fullWidth: !0,
                            flexGrow: 1,
                            className: "viewer-card__banner"
                        }, C.createElement(G.l, {
                            imageSrc: t.props.data.targetUser.profileImageURL,
                            size: 50,
                            imageAlt: t.props.data.targetUser.displayName
                        }), C.createElement(G.V, {
                            alignItems: G.c.Center,
                            margin: 1,
                            className: "viewer-card__display-name",
                            ellipsis: !0
                        }, C.createElement(G._23, {
                            type: G._28.H4
                        }, C.createElement("a", {
                            className: "viewer-card__display-name-link",
                            href: "/" + t.props.targetLogin,
                            target: "_blank"
                        }, t.props.data.targetUser.displayName))), t.renderHideButton(), t.renderIgnoreButton()))), n))
                    }, t.toggleGiftPage = function() {
                        var e = t.state.currentPage === Fa.ActionsPage ? Fa.SubGiftSelectPage : Fa.ActionsPage;
                        e === Fa.SubGiftSelectPage && t.trackGiftEvent(), t.setState({
                            currentPage: e
                        })
                    }, t.onWhisperButtonClick = function() {
                        t.props.hideViewerCard()
                    }, t.handleReportUserClick = function() {
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: t.reportContentTypeFromSourceType(t.props.sourceType),
                                targetUserID: t.props.data.targetUser.id,
                                contentID: t.props.sourceID,
                                extra: JSON.stringify({
                                    channel_id: t.props.channelID.toString()
                                })
                            },
                            title: Object(m.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.data.targetUser.displayName
                            }, "ReportUserModalTitle")
                        })
                    }, t.trackBuyGiftSubEvent = function(e) {
                        Object(gi.b)(u.__assign({}, e, {
                            action: gi.a.BuyGiftSub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        }))
                    }, t.trackGiftEvent = function() {
                        Object(gi.b)({
                            action: gi.a.GiftASub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.error ? null : this.getContent()
                }, t.prototype.renderIgnoreButton = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : C.createElement(G.V, {
                        key: "Ignore",
                        position: G._4.Absolute,
                        attachRight: !0,
                        margin: {
                            top: 3,
                            right: .5
                        }
                    }, C.createElement(ni, {
                        targetDisplayName: this.props.data.targetUser.displayName,
                        targetLogin: this.props.targetLogin,
                        sendMessageToTMI: this.props.sendMessageToTMI
                    }))
                }, t.prototype.renderHideButton = function() {
                    return C.createElement(G.V, {
                        className: "viewer-card__hide",
                        position: G._4.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        margin: {
                            top: .5,
                            right: .5
                        }
                    }, C.createElement(G.v, {
                        icon: G._11.Close,
                        onClick: this.props.hideViewerCard,
                        ariaLabel: Object(m.d)("Hide", "ViewerCard"),
                        overlay: !0
                    }))
                }, t.prototype.renderActions = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : C.createElement(G._19, {
                        className: "viewer-card__actions",
                        "data-test-selector": "viewer-card-actions",
                        background: G.m.Base,
                        attachBottom: !0,
                        display: G.H.Flex,
                        flexDirection: G.J.Row,
                        justifyContent: G.U.Between,
                        fullWidth: !0,
                        flexGrow: 0
                    }, C.createElement(G.V, {
                        display: G.H.Flex,
                        flexDirection: G.J.Row,
                        fullWidth: !0,
                        margin: {
                            left: .5,
                            right: 1,
                            bottom: 1,
                            top: .5
                        }
                    }, this.renderSocialActions()), C.createElement(G._19, {
                        display: G.H.Flex,
                        background: G.m.Alt2,
                        fullWidth: !0
                    }, C.createElement(G.V, {
                        display: G.H.InlineFlex,
                        flexDirection: G.J.Row
                    }, this.renderChatActions())))
                }, t.prototype.renderSocialActions = function() {
                    var e = null;
                    return this.isModeratorOrHigher && (e = C.createElement(Ce.a, {
                        key: "MoreOptionsButton"
                    }, C.createElement(G.v, {
                        type: G.w.Hollow,
                        ariaLabel: Object(m.d)("More options", "ViewerCard"),
                        icon: G._11.More,
                        "data-a-target": "viewer-card-more-button"
                    }), C.createElement(G.p, {
                        direction: G.q.BottomRight,
                        "data-a-target": "viewer-card-more-balloon"
                    }, C.createElement(G.V, {
                        padding: {
                            y: 1
                        }
                    }, C.createElement(G.T, {
                        onClick: this.handleReportUserClick,
                        "data-a-target": "viewer-card-report-button"
                    }, C.createElement(G.V, {
                        padding: {
                            x: 1
                        }
                    }, Object(m.d)("Report {user}", {
                        user: this.props.targetLogin
                    }, "ViewerCard"))))))), [C.createElement(G.V, {
                        key: "FriendButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, C.createElement(ci.a, {
                        channelID: this.props.data.targetUser.id
                    })), this.renderWhisperButton(), this.renderGiftSubscriptionButton(), C.createElement(G.V, {
                        key: "ReportButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, e)]
                }, t.prototype.renderWhisperButton = function() {
                    if (!this.props.data.currentUser || !this.props.data.targetUser) return null;
                    var e = Object(ht.a)(this.props.data.currentUser.id, this.props.data.targetUser.id);
                    return C.createElement(G.V, {
                        key: "WhisperButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, C.createElement(ti.a, {
                        onClick: this.onWhisperButtonClick,
                        threadID: e
                    }))
                }, t.prototype.renderGiftSubscriptionButton = function() {
                    return !this.props.data.channelUser || !this.props.data.channelUser.subscriptionProducts || this.props.data.channelUser.subscriptionProducts.length < 1 ? null : C.createElement(G.V, {
                        key: "GiftButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, C.createElement(ui.a, {
                        onClick: this.toggleGiftPage,
                        subProductId: this.props.data.channelUser.subscriptionProducts[0].id,
                        giftRecipient: this.props.targetLogin
                    }))
                }, t.prototype.renderSubGiftSelect = function() {
                    return C.createElement(G.V, null, C.createElement(hi.a, {
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        isGift: !0
                    }), C.createElement(G._19, {
                        background: G.m.Base,
                        attachBottom: !0,
                        display: G.H.Flex,
                        flexDirection: G.J.Row,
                        justifyContent: G.U.Between,
                        fullWidth: !0,
                        flexGrow: 0,
                        padding: 2
                    }, C.createElement(mi, {
                        onBack: this.toggleGiftPage,
                        channelDisplayName: this.props.data.channelUser.displayName,
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        giftRecipient: this.props.data.targetUser.login,
                        reportSubMenuAction: this.trackBuyGiftSubEvent
                    })))
                }, t.prototype.renderChatActions = function() {
                    var e = [];
                    return this.isModeratorOrHigher() && e.push(C.createElement(oi, {
                        key: "ModActions",
                        channelID: this.props.data.channelUser.id,
                        userID: this.props.data.targetUser.id,
                        userLogin: this.props.targetLogin
                    })), this.isOwnerOrHigher() && e.push(C.createElement(li, {
                        key: "OwnerActions",
                        sendMessageToTMI: this.props.sendMessageToTMI,
                        targetLogin: this.props.targetLogin
                    })), e
                }, t.prototype.isOwnerOrHigher = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && (e.currentUser.roles.isGlobalMod || e.currentUser.roles.isSiteAdmin || e.currentUser.roles.isStaff || this.isOwner())
                }, t.prototype.isModeratorOrHigher = function() {
                    return this.isOwnerOrHigher() || this.props.data.channelUser.self && this.props.data.channelUser.self.isModerator
                }, t.prototype.isOwner = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && e.currentUser.id === e.channelUser.id
                }, t.prototype.reportContentTypeFromSourceType = function(e) {
                    switch (e) {
                        case Qt.a.chat_message:
                            return di.a.Chat;
                        case Qt.a.recent_raids:
                            return di.a.Raid;
                        case Qt.a.viewer_list:
                        default:
                            return di.a.User
                    }
                }, t = u.__decorate([Object(At.c)("ViewerCard"), Object(S.a)(fi, {
                    options: function(e) {
                        return {
                            variables: {
                                targetLogin: e.targetLogin,
                                channelID: e.channelID
                            }
                        }
                    }
                })], t)
            }(C.Component),
            bi = (n("PqoY"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.hideViewerCard()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.viewerCardOptions && (e = C.createElement(G.V, {
                        className: "viewer-card-layer",
                        position: G._4.Relative
                    }, C.createElement(vi, {
                        isEmbedded: this.props.isEmbedded,
                        targetLogin: this.props.viewerCardOptions.targetLogin,
                        hideViewerCard: this.props.hideViewerCard,
                        sendMessageToTMI: this.props.onSendMessage,
                        channelID: this.props.channelID,
                        showReportUserModal: this.props.showReportUserModal,
                        sourceType: this.props.viewerCardOptions.sourceType,
                        sourceID: this.props.viewerCardOptions.sourceID
                    }))), e
                }, t
            }(C.Component)),
            ki = Object(k.a)(function(e) {
                return {
                    viewerCardOptions: e.viewerCard.viewerCardOptions
                }
            }, function(e) {
                return Object(E.bindActionCreators)({
                    hideViewerCard: v.c,
                    showReportUserModal: function(e) {
                        var t = u.__rest(e, []);
                        return Object(Za.d)(Xa.a, t)
                    }
                }, e)
            })(bi),
            yi = n("vLl9"),
            Ci = (n("dVd7"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.closeViewersList = function() {
                        n.setState({
                            showViewersList: !1
                        })
                    }, n.showViewersList = function() {
                        n.setState({
                            showViewersList: !0
                        })
                    }, n.onChatInputFocus = function() {
                        n.props.authToken && !n.state.showChatRules && n.setState({
                            showChatRules: !0
                        })
                    }, n.setChatListElement = function(e) {
                        n.setState({
                            chatListElement: e
                        })
                    }, n.state = {
                        showChatRules: !1,
                        showViewersList: !1
                    }, n
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = void 0 !== Ye.parse(this.props.location.search).darkpopout,
                        t = (s = {}, s[Object(Rt.c)(w.a.Dark)] = e, s);
                    if (this.props.isHidden) return C.createElement(G._19, {
                        alignItems: G.c.Center,
                        background: G.m.Alt2,
                        borderLeft: !0,
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: G.U.Center,
                        color: G.F.Base,
                        position: G._4.Relative
                    }, C.createElement(G.V, {
                        margin: {
                            bottom: 1
                        }
                    }, C.createElement(G._23, {
                        fontSize: G.L.Size5
                    }, Object(m.d)("Chat is hidden.", "ChatRoom"))), C.createElement(G.u, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(m.d)("Show Chat", "ChatRoom")));
                    var n = this.props.bitsConfig && this.props.firstPageLoaded && C.createElement(Dn, {
                            badgeData: this.props.badgeSets,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelID: this.props.channelID,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin
                        }),
                        a = this.state.showViewersList && C.createElement(Ka, {
                            channelLogin: this.props.channelLogin,
                            closeViewersList: this.closeViewersList
                        }),
                        i = !!this.props.authToken && !this.props.isEmbedded,
                        r = null;
                    return this.state.showChatRules && (r = C.createElement(G.V, {
                        padding: {
                            x: 2
                        }
                    }, C.createElement(Ga, {
                        chatRules: this.props.chatRules,
                        channelLogin: this.props.channelLogin
                    }))), C.createElement(G.V, {
                        className: R("chat-room__container", t),
                        "data-a-target": this.props.theme === w.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                        flexShrink: 1,
                        flexGrow: 1,
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        overflow: G._0.Hidden,
                        fullWidth: !0,
                        fullHeight: !0
                    }, C.createElement(G._19, {
                        background: G.m.Alt2,
                        borderLeft: !0,
                        display: G.H.Flex,
                        flexDirection: G.J.Column,
                        flexWrap: G.K.NoWrap,
                        position: G._4.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: G._0.Hidden,
                        color: G.F.Base
                    }, C.createElement(G._19, {
                        background: G.m.Alt2,
                        borderBottom: !0,
                        className: "chat-room__header",
                        display: G.H.Flex,
                        justifyContent: G.U.Center,
                        alignItems: G.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, C.createElement("p", {
                        "data-a-target": "chat-room__header-channel-name"
                    }, this.props.channelLogin)), this.props.chatRoomHeader, n, C.createElement(qa, {
                        badgeSets: this.props.badgeSets,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        isEmbedded: this.props.isEmbedded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onPushMessage: this.props.onPushMessage,
                        containerRef: this.setChatListElement
                    }), C.createElement(G.V, {
                        className: "chat-room__viewer-card",
                        position: G._4.Absolute
                    }, C.createElement(ki, {
                        isEmbedded: this.props.isEmbedded,
                        onSendMessage: this.props.onSendMessage,
                        channelID: this.props.channelID
                    })), C.createElement(G.V, {
                        className: "chat-room__notifications",
                        position: G._4.Absolute,
                        zIndex: G._39.Default,
                        fullWidth: !0
                    }, this.props.children), r, this.props.isOwnChannel && !this.props.isEmbedded && C.createElement(Ht, {
                        hostedChannelLogin: this.props.hostedChannelLogin
                    }), a, C.createElement(Ya.a, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        onPushMessage: this.props.onPushMessage,
                        onSendMessage: this.props.onSendMessage
                    }), C.createElement(Aa, {
                        activeChatters: this.props.activeChatters,
                        authToken: this.props.authToken,
                        bitsConfig: i ? this.props.bitsConfig : void 0,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        firstPageLoaded: this.props.firstPageLoaded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        isStaff: this.props.isStaff,
                        onChatCommand: this.props.onSendMessage,
                        badgeSets: this.props.badgeSets,
                        userBadges: this.props.userBadges,
                        showViewersList: this.showViewersList,
                        raidReceived: this.props.raidReceived,
                        onSendMessage: this.props.onSendMessage,
                        onInputFocus: this.onChatInputFocus,
                        containerElement: this.state.chatListElement
                    })));
                    var s
                }, t = u.__decorate([Object(S.a)(yi, {
                    props: function(e) {
                        var t = new Wt.c([], [], e.ownProps.channelLogin);
                        return e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && (t = new Wt.c(e.data.badges, e.data.user.broadcastBadges, e.ownProps.channelLogin)), {
                            badgeSets: t
                        }
                    },
                    options: function(e) {
                        return {
                            name: "data",
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(C.Component)),
            Si = Object(we.e)(Ci),
            _i = "(?:\\W|^)",
            Ei = "(?:$|\\W)",
            wi = 150,
            Ni = "PowerUpL DarkMode PowerUpR",
            Di = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        hasEnteredChatRoom: !1,
                        hostedChannelLogin: null,
                        raidReceived: !1,
                        userBadges: null
                    }, n.sendMessage = function(e) {
                        if (!e || 0 === e.length || !n.props.authToken) return !1;
                        var t = n.chatService.sendMessage(e);
                        return (!t || !t.preserveInput) && (n.parseOutgoingMessage(e), !0)
                    }, n.pushMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e)
                    }, n.onChatMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e), n.onChatEvent(e)
                    }, n.connect = function(e) {
                        n.setState({
                            hasEnteredChatRoom: !1
                        }), e.userID && e.channelID && (n.moderationActionService = new Ft(e.channelID, e.userID, n.chatBuffer.consumeChatEvent)), n.chatService.join()
                    }, n.disconnect = function() {
                        n.clearBufferHandle(), n.moderationActionService && n.moderationActionService.unsubscribe(), n.chatService.part()
                    }, n.updateBitsConfig = function(e) {
                        void 0 === e && (e = A.a), n.chatService.updateBitsConfig(e)
                    }, n.updateBlockLinks = function(e) {
                        n.chatService.updateBlockLinks(e)
                    }, n.onChatBufferUpdate = function() {
                        n.syncBufferHandle || (n.syncBufferHandle = setTimeout(n.syncBufferedMessages, 0))
                    }, n.syncBufferedMessages = function() {
                        n.chatBuffer && n.chatBuffer.isDirty && n.props.onChatMessagesUpdate(n.chatBuffer.toArray()), n.clearBufferHandle()
                    }, n.onChatEvent = function(e) {
                        switch (e.type) {
                            case vt.a.Hosting:
                                n.hostingHandler(e.hostedChannel);
                                break;
                            case vt.a.Unhost:
                                n.hostingHandler(null);
                                break;
                            case vt.a.Connected:
                                n.onConnected();
                                break;
                            case vt.a.RoomState:
                                n.roomStateHandler(e.state);
                                break;
                            case vt.a.BadgesUpdated:
                                n.onBadgesUpdated(e);
                                break;
                            case vt.a.Raid:
                                n.setState({
                                    raidReceived: !0
                                })
                        }
                    }, n.hostingHandler = function(e) {
                        n.setState({
                            hostedChannelLogin: e
                        }), n.props.onHostingChange && n.props.onHostingChange(e)
                    }, n.roomStateHandler = function(e) {
                        e.slowMode ? n.props.onSlowModeEnable() : n.props.onSlowModeDisable(), void 0 !== e.followersOnly && (e.followersOnly ? (n.props.onFollowerModeDurationChange(e.followersOnlyRequirement), n.props.onFollowerModeEnable()) : n.props.onFollowerModeDisable()), void 0 !== e.subsOnly && (e.subsOnly ? n.props.onSubsOnlyModeEnable() : n.props.onSubsOnlyModeDisable())
                    }, n.onConnected = function() {
                        m.i.debug("Connected"), n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.state.hasEnteredChatRoom || Object(jt.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: !!n.state.hostedChannelLogin
                        }), n.setState({
                            hasEnteredChatRoom: !0
                        }), n.props.latencyTracking.reportInteractive()
                    }, n.createOutgoingTokenMatchers = function(e) {
                        n.outgoingTokenMatchers = e.map(function(e) {
                            return {
                                token: e,
                                regex: new RegExp("" + _i + e + Ei)
                            }
                        })
                    }, n.parseOutgoingMessage = function(e) {
                        n.outgoingTokenMatchers.forEach(function(t) {
                            t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                        })
                    }, n.onOutgoingTokenMatch = function(e, t) {
                        switch (e) {
                            case Ni:
                                var a = n.props.theme === w.a.Light ? w.a.Dark : w.a.Light;
                                n.props.onThemeChange(a);
                                break;
                            default:
                                return
                        }
                    }, n.onBadgesUpdated = function(e) {
                        n.setState({
                            userBadges: e.badges
                        })
                    }, n.clearBufferHandle = function() {
                        n.syncBufferHandle && (clearTimeout(n.syncBufferHandle), n.syncBufferHandle = 0)
                    }, n.chatService = new xt(t.userLogin, t.channelLogin, n.onChatMessage), n.logger = m.i.withCategory("chat-room"), n.registerCustomLatencyEvents(), n.createOutgoingTokenMatchers([Ni]), n.activeChatters = new yt(t.channelID), n.chatBuffer = new Nt(wi, n.onChatBufferUpdate), n.chatBuffer.setBlockedUsers(t.blockedUsers), t.userLogin && n.chatBuffer.setCurrentUserLogin(t.userLogin), t.userID && n.activeChatters.setCurrentUserID(t.userID), n
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.connect(this.props), this.props.bitsConfig && this.updateBitsConfig(this.props.bitsConfig), this.updateBlockLinks(this.props.blockLinks), this.chatService.disabled && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.disconnect(), this.chatBuffer && this.chatBuffer.shutdown(), this.props.onChatMessagesReset()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props,
                        n = !1;
                    e.isHidden && !t.isHidden || !e.rightColumnExpanded && t.rightColumnExpanded ? this.disconnect() : (n = e.channelLogin !== t.channelLogin || e.userLogin !== t.userLogin || e.authToken !== t.authToken || !e.isHidden && t.isHidden || e.rightColumnExpanded && !t.rightColumnExpanded) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.connect(e), this.setState({
                        hostedChannelLogin: null
                    })), e.emoteSetsData && e.emoteSetsData.emoteSets && (e.emoteSetsData.emoteSets !== (t.emoteSetsData && t.emoteSetsData.emoteSets) || n) && (this.logger.debug("Updating emote sets", {
                        shouldReconnect: n,
                        prevSets: t.emoteSetsData && t.emoteSetsData.emoteSets,
                        nextSet: e.emoteSetsData.emoteSets
                    }), this.chatService.updateEmotes(e.emoteSetsData.emoteSets)), (e.bitsConfig !== t.bitsConfig || n) && this.updateBitsConfig(e.bitsConfig), (e.blockLinks !== t.blockLinks || n) && this.updateBlockLinks(e.blockLinks);
                    var a = e.isCurrentUserModerator ? 0 : e.chatDelayMS;
                    this.chatBuffer.setDelay(a), e.userLogin && t.userLogin !== e.userLogin && this.chatBuffer.setCurrentUserLogin(e.userLogin), e.userID && t.userID !== e.userID && this.activeChatters.setCurrentUserID(e.userID), t.channelID !== e.channelID && this.activeChatters.resetWithChannelID(e.channelID), t.blockedUsers !== e.blockedUsers && this.chatBuffer.setBlockedUsers(e.blockedUsers), !this.moderationActionService && e.userID && e.channelID && (this.moderationActionService = new Ft(e.channelID, e.userID, this.chatBuffer.consumeChatEvent))
                }, t.prototype.render = function() {
                    var e = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                        t = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {};
                    return C.createElement(Si, {
                        authToken: this.props.authToken,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        activeChatters: this.activeChatters,
                        chatRoomHeader: C.createElement(Ee, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        }),
                        chatRules: this.props.chatRules,
                        currentUserDisplayName: this.props.userDisplayName,
                        currentUserLogin: this.props.userLogin,
                        emotes: e,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hostedChannelLogin: this.state.hostedChannelLogin,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHidden: this.props.isHidden,
                        isHostMode: !!this.state.hostedChannelLogin,
                        isOwnChannel: this.isOwnChannel,
                        isPopout: this.props.isPopout,
                        onChatUnhide: this.props.onChatUnhide,
                        onPushMessage: this.pushMessage,
                        onSendMessage: this.sendMessage,
                        raidReceived: this.state.raidReceived,
                        theme: this.props.theme,
                        isStaff: this.props.isStaff,
                        userBadges: this.state.userBadges,
                        userID: this.props.userID
                    }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && C.createElement(ce, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig
                    }), this.props.hostedChannelDisplayName && !this.props.isPopout && C.createElement(he, {
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                        hostedChannelLogin: this.state.hostedChannelLogin || ""
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && C.createElement(tt, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && C.createElement(me, {
                        channelLogin: this.props.channelLogin
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && C.createElement(dt, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin
                    }), C.createElement(ft, {
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        userLogin: this.props.userLogin,
                        userID: this.props.userID,
                        emoteMap: t
                    }), C.createElement(ye, {
                        currentUserLogin: this.props.userLogin
                    }), C.createElement(j, {
                        channelID: this.props.channelID
                    }))
                }, t.prototype.registerCustomLatencyEvents = function() {
                    this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents("Chat"), this.chatInitialized = this.registerInitEvent(), this.chatConnected = this.registerConnectedEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized)
                }, t.prototype.registerInitEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent("Chat", "chat-init", "Init", 3e3)
                }, t.prototype.registerConnectedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent("Chat", "chat-connected", "Connected", 4e3)
                }, Object.defineProperty(t.prototype, "isOwnChannel", {
                    get: function() {
                        return this.props.userID === this.props.channelID
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(C.Component),
            Oi = Object(_.compose)(Object(k.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isHidden: e.chat.isHidden,
                    isLoggedIn: Object(y.d)(e),
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theme: Object(O.a)(e)
                }
            }, function(e, t) {
                return Object(E.bindActionCreators)({
                    onChatMessagesReset: function() {
                        return h.w()
                    },
                    onChatMessagesUpdate: function(e) {
                        return h.I(t.channelLogin, e)
                    },
                    onChatUnhide: function() {
                        return h.K()
                    },
                    onFollowerModeDisable: function() {
                        return h.x()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return h.u(e)
                    },
                    onFollowerModeEnable: function() {
                        return h.C()
                    },
                    onSlowModeDisable: function() {
                        return h.z()
                    },
                    onSlowModeEnable: function() {
                        return h.E()
                    },
                    onSubsOnlyModeDisable: function() {
                        return h.A()
                    },
                    onSubsOnlyModeEnable: function() {
                        return h.F()
                    },
                    onThemeChange: function(e) {
                        return Object(D.b)(e, D.a.TypedCommand)
                    }
                }, e)
            }), Object(At.c)("ChatRoom"), Object(S.a)(Bt, {
                props: function(e) {
                    var t;
                    return e.data && e.data.user && e.data.user.cheer && (t = Object(B.a)(e.data.user.cheer.emotes)), {
                        bitsConfig: t
                    }
                },
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(S.a)(bt, {
                props: function(e) {
                    return e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers ? {
                        blockedUsers: e.data.currentUser.blockedUsers.map(function(e) {
                            return e.id
                        })
                    } : {
                        blockedUsers: []
                    }
                },
                skip: function(e) {
                    return !e.authToken
                }
            }), Object(N.a)())(Di),
            Ti = n("/eFD"),
            Ii = n("KNSH"),
            Li = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.channelData.channel,
                        t = this.props.userData && this.props.userData.user,
                        n = !1,
                        a = !1;
                    if (t && e && e.self) {
                        var i = t.login === e.login,
                            r = t.roles.isGlobalMod || t.roles.isSiteAdmin || t.roles.isStaff;
                        n = e.self.isModerator || r || i, a = t.roles.isStaff
                    }
                    var s = e && e.chatSettings && e.chatSettings.rules,
                        o = e && e.chatSettings && e.chatSettings.chatDelayMs,
                        l = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                    return C.createElement(Oi, {
                        key: this.props.channelLogin,
                        authToken: this.props.user && this.props.user.authToken,
                        blockLinks: l,
                        channelDisplayName: e && e.displayName,
                        channelID: e && e.id,
                        channelLogin: this.props.channelLogin,
                        chatRules: s,
                        chatDelayMS: o,
                        clientID: this.props.clientID,
                        isCurrentUserModerator: n,
                        isEmbedded: !!this.props.isEmbedded,
                        isPopout: !!this.props.isPopout,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                        onHostingChange: this.props.onHostingChange,
                        userDisplayName: this.props.user && this.props.user.displayName,
                        userID: this.props.user && this.props.user.id.toString(),
                        userLogin: this.props.user && this.props.user.login,
                        isStaff: a
                    })
                }, t = u.__decorate([Object(S.a)(Ti, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(S.a)(Ii, {
                    name: "userData",
                    skip: function(e) {
                        return !e.user
                    }
                }), Object(At.c)("Chat")], t)
            }(C.Component),
            Mi = Object(k.a)(function(e) {
                return {
                    user: Object(y.c)(e)
                }
            })(Li);
        n.d(t, "a", function() {
            return Mi
        })
    },
    "1Eny": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1OO3": function(e, t, n) {
        "use strict";

        function a() {
            return Object(r.d)("Unable to ban user", "BlockUserMutation")
        }
        t.a = function(e) {
            var t = this;
            return Object(s.a)(u, {
                props: function(n) {
                    return {
                        onBanUser: function(s, u) {
                            return void 0 === u && (u = null), i.__awaiter(t, void 0, void 0, function() {
                                var t, v, b, k, y, C;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            if (t = u ? d.a.Timeout : d.a.Ban, v = e(n.ownProps), b = v.channelID, k = v.onPushMessage, !n.mutate) return [3, 5];
                                            i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), [4, n.mutate(Object(o.a)({
                                                channelID: b,
                                                bannedUserLogin: s,
                                                expiresIn: u && function(e) {
                                                    if (!e) return "0s";
                                                    var t = e,
                                                        n = "";
                                                    if (t > f) {
                                                        var a = Math.floor(t / f);
                                                        t -= a * f, n += a + "mo"
                                                    }
                                                    if (t > g) {
                                                        var i = Math.floor(t / g);
                                                        t -= i * g, n += i + "w"
                                                    }
                                                    if (t > h) {
                                                        var r = Math.floor(t / h);
                                                        t -= r * h, n += r + "d"
                                                    }
                                                    if (t > m) {
                                                        var s = Math.floor(t / m);
                                                        t -= s * m, n += s + "h"
                                                    }
                                                    if (t > p) {
                                                        var o = Math.floor(t / p);
                                                        t -= o * p, n += o + "m"
                                                    }
                                                    return t > 0 && (n += t + "s"), n
                                                }(u)
                                            }))];
                                        case 2:
                                            return i.sent(), y = Object(c.a)(t, s, null, u), k && k(y), [2, y];
                                        case 3:
                                            throw C = i.sent(), r.i.error(C, "Unable to ban user"), k && k(Object(l.a)(a())), new Error(a());
                                        case 4:
                                            return [3, 6];
                                        case 5:
                                            throw k && k(Object(l.a)(a())), new Error(a());
                                        case 6:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i = n("TToO"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("oIkB"),
            l = n("aUOx"),
            c = n("Ncf8"),
            d = n("qkCi"),
            u = n("MApH"),
            p = (n.n(u), 60),
            m = 60 * p,
            h = 24 * m,
            g = 7 * h,
            f = 4 * g
    },
    "1bR2": function(e, t, n) {
        e.exports = n.p + "assets/gift1-8573b4d1700bd278971c52e7d077d1c4.png"
    },
    "1pvm": function(e, t) {},
    "1tZx": function(e, t) {},
    "2B/Z": function(e, t) {},
    "2E6s": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsCards__User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "criteria"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UserClipsInput"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "profileImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "70"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "clips"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "criteria"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "criteria"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "slug"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "embedURL"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewCount"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "language"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "curator"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "boxArtURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "52"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "72"
                                                                    }
                                                                }],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "broadcaster"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "thumbnailURL"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "createdAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "durationSeconds"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 517
            }
        };
        n.loc.source = {
            body: "query ClipsCards__User($login: String! $limit: Int $cursor: Cursor $criteria: UserClipsInput) {\nuser(login: $login) {\nid\ndisplayName\nlogin\nhosting {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\nclips(first: $limit after: $cursor criteria: $criteria) {\npageInfo {\nhasNextPage\n}\nedges {\ncursor\nnode {\nid\nslug\nurl\nembedURL\ntitle\nviewCount\nlanguage\ncurator {\nid\nlogin\ndisplayName\n}\ngame {\nid\nname\nboxArtURL(width: 52 height: 72)\n}\nbroadcaster {\nid\nlogin\ndisplayName\n}\nthumbnailURL\ncreatedAt\ndurationSeconds\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2I50": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChatInput_SendCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendCheerInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sendCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "currentUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "bitsBalance"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\nsendCheer(input: $input) {\nid\ncurrentUser {\nid\nbitsBalance\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2IkU": function(e, t) {},
    "2hJ3": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = document.createElement("textarea");
            t.style.position = "fixed", t.style.top = "0", t.style.left = "0", t.style.width = "2em", t.style.height = "2em", t.style.padding = "0", t.style.border = "none", t.style.outline = "none", t.style.boxShadow = "none", t.style.background = "transparent", t.value = e, document.body.appendChild(t), t.select();
            var n = !0;
            try {
                n = document.execCommand("copy")
            } catch (e) {
                n = !1
            }
            return document.body.removeChild(t), n
        }
    },
    "3LYq": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_AllowRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AllowRejectedChatMessageInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "allowRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\nallowRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3T7g": function(e, t, n) {
        "use strict";
        var a = n("RbGx"),
            i = n("mbxv"),
            r = n("+V/3"),
            s = (n("AwFw"), n("TToO")),
            o = function() {
                function e(e, t, n) {
                    this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                }
                return e.prototype.getBadge = function(e, t) {
                    var n = this.channelsBySet.get(e);
                    return n && n.has(t) ? n.get(t) || null : void 0 !== (n = this.globalsBySet.get(e)) ? n.get(t) || null : null
                }, e.prototype.indexBadges = function(e, t, n) {
                    e.forEach(function(e) {
                        n && e.clickAction === r.b && (e = s.__assign({}, e, {
                            channelName: n
                        }));
                        var a = t.get(e.setID);
                        a || (a = new Map, t.set(e.setID, a)), a.set(e.version, e)
                    })
                }, e
            }();
        new o([], [], "");
        n.d(t, "b", function() {
            return a.a
        }), n.d(t, "a", function() {
            return i.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return o
        })
    },
    "4Jix": function(e, t) {},
    "4JjK": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var a;
        ! function(e) {
            e[e.Ready = 0] = "Ready", e[e.Dimensions = 1] = "Dimensions", e[e.RequestAd = 2] = "RequestAd", e[e.OnStart = 3] = "OnStart", e[e.OnCredit = 4] = "OnCredit", e[e.OnFinish = 5] = "OnFinish", e[e.OnClose = 6] = "OnClose", e[e.OnError = 7] = "OnError", e[e.Adblock = 8] = "Adblock", e[e.LimitReached = 9] = "LimitReached"
        }(a || (a = {}))
    },
    "54rb": function(e, t) {},
    "56e8": function(e, t) {},
    "576g": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "cheer"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "cheer"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "prefix"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "tiers"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "color"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "images"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "theme"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isAnimated"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "dpiScale"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 133
            }
        };
        n.loc.source = {
            body: "fragment cheer on User {\ncheer {\nid\nemotes {\nid\nprefix\ntype\ntiers {\nid\nbits\ncolor\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5Nu7": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var a = n("HW6M"),
            i = (n.n(a), n("U7vG")),
            r = (n.n(i), n("ysVA")),
            s = (n.n(r), "chat-author__intl-login"),
            o = function(e) {
                var t = [i.createElement("span", {
                    key: "username-display",
                    className: "chat-author__display-name",
                    "data-a-target": "chat-message-username",
                    "data-test-selector": "message-username",
                    style: {
                        color: e.userData.color
                    }
                }, e.userData.userDisplayName)];
                if (e.userData.isIntl) {
                    var n = a((r = {}, r[s] = !e.highlighted, r["chat-author__intl-login--highlighted"] = e.highlighted, r));
                    t.push(i.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.userData.color
                        },
                        className: n,
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.userData.userLogin + ")"))
                }
                return i.createElement("span", {
                    key: e.userData.userID + "-authorlabel"
                }, t);
                var r
            }
    },
    "5bwi": function(e, t, n) {
        "use strict";
        var a, i = n("U7vG"),
            r = n("6sO2"),
            s = n("6yQB"),
            o = n("CSlQ"),
            l = n("RH2O"),
            c = n("2KeS"),
            d = n("V5M+"),
            u = n("TToO"),
            p = n("J4ib"),
            m = n("F8kA"),
            h = n("NY9D"),
            g = n("HW6M"),
            f = n("+8VM"),
            v = n("sikP"),
            b = n("oSFp"),
            k = n("mw/a"),
            y = n("6BvN"),
            C = n("rCmJ"),
            S = n("Odds"),
            _ = (n("Jg0G"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.selectOnFocus = function(e) {
                        e.currentTarget.select(), t.props.onSelection && t.props.onSelection()
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return i.createElement(S.V, u.__assign({
                        position: S._4.Relative,
                        className: "selectable-input-wrapper"
                    }, Object(S._40)(this.props)), i.createElement(S.R, {
                        type: S.S.Text,
                        value: this.props.text,
                        readOnly: !0,
                        onFocus: this.selectOnFocus,
                        icon: this.props.iconAsset,
                        id: this.props.id
                    }), this.props.children)
                }, t = u.__decorate([Object(o.c)("SelectableInput")], t)
            }(i.Component)),
            E = n("8Wuk"),
            w = n("2hJ3"),
            N = n("yDzg"),
            D = n("WNmM"),
            O = [{
                type: E.b.Twitter,
                params: {
                    tt_medium: "twtr"
                }
            }, {
                type: E.b.Facebook,
                params: {
                    tt_medium: "fb"
                }
            }, {
                type: E.b.Reddit,
                params: {
                    tt_medium: "redt"
                }
            }, {
                type: E.b.Copy
            }],
            T = function(e) {
                return i.createElement(S.V, {
                    className: "clips-social-share",
                    display: S.H.Flex,
                    flexWrap: S.K.NoWrap
                }, O.map(function(t) {
                    return i.createElement(S.V, {
                        key: t.type,
                        margin: {
                            right: 1
                        }
                    }, i.createElement(E.a, {
                        key: t.type,
                        type: t.type,
                        text: e.clip.title,
                        url: Object(N.a)(e.clip.url, t.params),
                        onShareClick: Object(D.c)(e.clip, e.pageType)
                    }))
                }))
            },
            I = n("jetF"),
            L = n("7vx8");
        ! function(e) {
            e[e.View = 0] = "View", e[e.Report = 1] = "Report", e[e.Delete = 2] = "Delete", e[e.DeleteAll = 3] = "DeleteAll", e[e.Ban = 4] = "Ban", e[e.Timeout = 5] = "Timeout"
        }(a || (a = {}));
        var M = n("ZoyS"),
            x = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderMenuItem = function(e) {
                        var t = n.menuData.get(e);
                        return e && t ? i.createElement(S.T, {
                            key: t.display,
                            onClick: t.destinationHandler,
                            "data-a-target": "clip-moderation-button-" + t.display
                        }, i.createElement(S.V, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, t.display)) : null
                    }, n.menuData = new Map([
                        [a.Report, {
                            display: Object(p.d)("Report", "ModerationMenu"),
                            destinationHandler: function() {
                                return n.props.updateModalViewState(a.Report)
                            }
                        }],
                        [a.Delete, {
                            display: Object(p.d)("Delete", "ModerationMenu"),
                            destinationHandler: function() {
                                return n.props.updateModalViewState(a.Delete)
                            }
                        }],
                        [a.DeleteAll, {
                            display: Object(p.d)("Delete All Clips from Video", "ModerationMenu"),
                            destinationHandler: function() {
                                return n.props.updateModalViewState(a.DeleteAll)
                            }
                        }],
                        [a.Ban, {
                            display: Object(p.d)("Ban User", "ModerationMenu"),
                            destinationHandler: function() {
                                return n.props.updateModalViewState(a.Ban)
                            }
                        }],
                        [a.Timeout, {
                            display: Object(p.d)("Timeout User (24 hr)", "ModerationMenu"),
                            destinationHandler: function() {
                                return n.props.updateModalViewState(a.Timeout)
                            }
                        }]
                    ]), n
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = this.props.clip;
                    if (!e || !e.currentUser) return null;
                    var n = e.currentUser.isStaff || e.currentUser.isSiteAdmin,
                        r = e.currentUser.id === t.curator.id,
                        s = e.currentUser.id === t.broadcaster.id,
                        o = r || s || n,
                        l = s || n,
                        c = [a.Report];
                    return o && c.push(a.Delete), l && (c.push(a.DeleteAll), c.push(a.Ban), c.push(a.Timeout)), i.createElement(S.V, {
                        className: "moderation-menu"
                    }, i.createElement(I.a, null, i.createElement(S.u, {
                        type: S.z.Hollow,
                        icon: S._11.More,
                        ariaLabel: Object(p.d)("More Options", "ModerationMenu"),
                        "data-a-target": "moderation-menu-button"
                    }), i.createElement(S.p, {
                        direction: S.q.TopRight
                    }, i.createElement(S.V, {
                        padding: {
                            y: .5
                        }
                    }, this.moderationMenuRender(c)))))
                }, t.prototype.moderationMenuRender = function(e) {
                    var t = this;
                    return e.map(function(e) {
                        return t.renderMenuItem(e)
                    })
                }, t = u.__decorate([Object(L.a)(M), Object(o.c)("ModerationMenu")], t)
            }(i.Component),
            F = (n("MjlB"), 2e3),
            j = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isShowingBalloon: !1
                    }, t.timeoutID = null, t.copyClipURL = function() {
                        var e;
                        try {
                            e = Object(w.a)(t.props.clip.url)
                        } catch (e) {
                            return void r.i.warn("Failed to copy", e)
                        }
                        e && (t.setState({
                            isShowingBalloon: !0
                        }), t.timeoutID = setTimeout(function() {
                            t.setState({
                                isShowingBalloon: !1
                            })
                        }, F), Object(D.c)(t.props.clip, t.props.pageType)(E.b.CopyInput))
                    }, t.dismissBalloon = function() {
                        t.setState({
                            isShowingBalloon: !1
                        }), t.timeoutID && (clearTimeout(t.timeoutID), t.timeoutID = null)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e, t = i.createElement(m.a, {
                        to: "/" + this.props.clip.broadcaster.login,
                        onClick: this.props.closeModal,
                        "data-a-target": "clip-modal-broadcaster-link"
                    }, this.props.clip.broadcaster.login);
                    return e = this.props.clip.game ? Object(r.d)("{broadcaster} playing {game}", {
                        broadcaster: t,
                        game: i.createElement(m.a, {
                            to: "" + Object(h.c)(this.props.clip.game.name),
                            onClick: this.props.closeModal,
                            "data-a-target": "clip-modal-game-link"
                        }, this.props.clip.game.name)
                    }, "ClipsViewModalContent") : Object(r.d)("{broadcaster}", {
                        broadcaster: t
                    }, "ClipsViewModalContent"), i.createElement(S._19, {
                        className: "clips-view-modal-content",
                        background: S.m.Base
                    }, i.createElement(S.V, {
                        padding: {
                            bottom: 2
                        }
                    }, i.createElement(S.j, {
                        ratio: S.k.Aspect16x9
                    }, i.createElement("iframe", {
                        src: this.props.clip.embedURL,
                        width: "100%",
                        height: "100%",
                        allowFullScreen: !0
                    }))), i.createElement(S.V, {
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, i.createElement(S.V, {
                        display: S.H.Flex,
                        flexWrap: S.K.NoWrap
                    }, i.createElement(S.V, {
                        flexGrow: 1,
                        margin: {
                            right: 1
                        }
                    }, i.createElement(C.a, {
                        onClickOut: this.dismissBalloon
                    }, i.createElement(_, {
                        text: this.props.clip.url,
                        icon: !0,
                        iconAsset: S._11.Link,
                        onSelection: this.copyClipURL,
                        "data-a-target": "clip-share-input"
                    }, i.createElement(S.p, {
                        show: this.state.isShowingBalloon,
                        direction: S.q.TopRight
                    }, i.createElement(S.T, {
                        onClick: this.dismissBalloon
                    }, i.createElement(S.V, {
                        padding: 1
                    }, i.createElement(S._23, {
                        bold: !0
                    }, Object(r.d)("Link copied to clipboard", "ClipsViewModalContent")))))))), i.createElement(T, {
                        clip: this.props.clip,
                        pageType: this.props.pageType
                    }), i.createElement(x, {
                        clip: this.props.clip,
                        updateModalViewState: this.props.updateModalViewState
                    }))), i.createElement(S.V, {
                        padding: {
                            x: 2,
                            bottom: 2
                        },
                        display: S.H.Flex,
                        flexWrap: S.K.NoWrap,
                        justifyContent: S.U.Between,
                        fullWidth: !0
                    }, i.createElement(S.V, {
                        flexGrow: 1
                    }, i.createElement(S.Q, {
                        ellipsis: !0
                    }, i.createElement(S._19, {
                        display: S.H.Flex,
                        flexWrap: S.K.NoWrap,
                        fontSize: S.L.Size5
                    }, i.createElement(S.V, {
                        ellipsis: !0
                    }, this.props.clip.title), i.createElement(S.V, {
                        flexShrink: 0
                    }, i.createElement(S._23, {
                        type: S._28.Span,
                        color: S.F.Alt2
                    }, " • ", Object(r.d)("{created, date, medium}", {
                        created: new Date(this.props.clip.createdAt)
                    }, "ClipsViewModalContent"))))), i.createElement(S.Q, {
                        ellipsis: !0
                    }, i.createElement(S._19, {
                        color: S.F.Alt2
                    }, e, " • ", Object(r.d)("Clipped by {curator}", {
                        curator: i.createElement(m.a, {
                            to: "/" + this.props.clip.curator.login,
                            onClick: this.props.closeModal,
                            "data-a-target": "clip-modal-curator-link"
                        }, this.props.clip.curator.login)
                    }, "ClipsViewModalContent")))), i.createElement(S._19, {
                        display: S.H.Flex,
                        margin: {
                            bottom: 2,
                            left: 2
                        },
                        fontSize: S.L.Size5,
                        color: S.F.Alt2,
                        flexShrink: 0
                    }, i.createElement(S.V, {
                        margin: {
                            right: .5
                        },
                        alignItems: S.c.Center,
                        display: S.H.Flex
                    }, i.createElement(S._10, {
                        asset: S._11.GlyphViews
                    })), Object(r.d)("{viewCount, number} views", {
                        viewCount: this.props.clip.viewCount
                    }, "ClipsViewModalContent"))))
                }, t = u.__decorate([Object(o.c)("ClipsViewModalContent")], t)
            }(i.Component),
            A = (n("GOrw"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onKeyDown = function(e) {
                        var n = e.charCode || e.keyCode;
                        n === y.a.Left ? t.updateClipBackward() : n === y.a.Right && t.updateClipForward()
                    }, t.updateClipForward = function() {
                        t.updateClipIndex(t.props.clipIndex + 1)
                    }, t.updateClipBackward = function() {
                        t.updateClipIndex(t.props.clipIndex - 1)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.setUpArrowListeners()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.clipIndex && this.props.clipIndex > 0 && (e = i.createElement(S.V, {
                        position: S._4.Absolute,
                        display: S.H.Flex,
                        alignItems: S.c.Stretch,
                        className: "clip-carousel-button clip-carousel-button--left"
                    }, i.createElement(S.v, {
                        ariaLabel: Object(r.d)("Previous clip", "ClipsViewModalNavigation"),
                        type: S.w.Primary,
                        icon: S._11.AngleLeft,
                        onClick: this.updateClipBackward,
                        "data-test-selector": "clips-view-modal-content-back"
                    }))), i.createElement(S.V, {
                        className: "clips-view-modal-content"
                    }, e, i.createElement(j, {
                        clip: this.props.clip,
                        updateModalViewState: this.props.updateModalViewState,
                        pageType: this.props.pageType,
                        closeModal: this.props.closeModal
                    }), i.createElement(S.V, {
                        position: S._4.Absolute,
                        display: S.H.Flex,
                        alignItems: S.c.Stretch,
                        className: "clip-carousel-button clip-carousel-button--right"
                    }, i.createElement(S.v, {
                        ariaLabel: Object(r.d)("Next clip", "ClipsViewModalNavigation"),
                        type: S.w.Primary,
                        icon: S._11.AngleRight,
                        onClick: this.updateClipForward,
                        "data-test-selector": "clips-view-modal-content-forward"
                    })))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("keydown", this.onKeyDown)
                }, t.prototype.setUpArrowListeners = function() {
                    document.addEventListener("keydown", this.onKeyDown)
                }, t.prototype.updateClipIndex = function(e) {
                    var t = Math.max(0, e),
                        n = this.props.getClips();
                    n.length - t < 4 && this.props.loadMoreClips(), t < n.length && this.props.showModal(P, {
                        getClips: this.props.getClips,
                        clip: n[t],
                        clipIndex: t,
                        loadMoreClips: this.props.loadMoreClips,
                        pageType: this.props.pageType
                    })
                }, t
            }(i.Component)),
            B = Object(o.c)("ClipsViewModalNavigation")(A),
            R = Object(l.a)(null, function(e) {
                return Object(c.bindActionCreators)({
                    showModal: d.d,
                    closeModal: d.c
                }, e)
            })(B),
            U = (n("/+aa"), "clips-modal-view--wide"),
            V = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        modalView: a.View
                    }, t.setToViewState = function() {
                        t.updateClipsModalViewState(a.View)
                    }, t.updateClipsModalViewState = function(e) {
                        t.setState({
                            modalView: e
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e, t = (n = {}, n["clips-modal-view"] = !0, n[U] = !1, n);
                    return this.state.modalView === a.Report ? e = i.createElement(b.a, {
                        title: Object(r.d)("Report this Clip", "ClipsViewModal"),
                        reportContext: {
                            contentType: k.a.Clip,
                            contentID: this.props.clip.slug,
                            targetUserID: this.props.clip.broadcaster.id
                        },
                        onClose: this.setToViewState
                    }) : this.state.modalView === a.Delete ? e = i.createElement(v.d, {
                        clip: this.props.clip,
                        onClose: this.setToViewState
                    }) : this.state.modalView === a.DeleteAll ? e = i.createElement(v.e, {
                        clip: this.props.clip,
                        onClose: this.setToViewState
                    }) : this.state.modalView === a.Ban ? e = i.createElement(v.b, {
                        clip: this.props.clip,
                        isTemporary: !1,
                        onClose: this.setToViewState
                    }) : this.state.modalView === a.Timeout ? e = i.createElement(v.b, {
                        clip: this.props.clip,
                        isTemporary: !0,
                        onClose: this.setToViewState
                    }) : (e = i.createElement(R, {
                        getClips: this.props.getClips,
                        clip: this.props.clip,
                        clipIndex: this.props.clipIndex,
                        updateModalViewState: this.updateClipsModalViewState,
                        loadMoreClips: this.props.loadMoreClips,
                        pageType: this.props.pageType
                    }), t[U] = !0), i.createElement(S.V, {
                        className: g(t)
                    }, e, i.createElement(f.a, {
                        closeOnBackdropClick: !0,
                        closeOnPageNavigation: !0
                    }));
                    var n
                }, t = u.__decorate([Object(o.c)("ClipsViewModal")], t)
            }(i.Component),
            P = Object(l.a)(null, function(e) {
                return Object(c.bindActionCreators)({
                    showModal: d.d
                }, e)
            })(V),
            H = (n("Ajho"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getClips = function() {
                        return t.props.clips
                    }, t.openModal = function(e) {
                        e.preventDefault(), t.props.showModal(P, {
                            getClips: t.getClips,
                            clip: t.props.clip,
                            clipIndex: t.props.clipIndex,
                            loadMoreClips: t.props.loadMoreClips,
                            pageType: t.props.pageType
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = null;
                    return this.props.pageType === D.b.Channel && this.props.clip.game && (e = i.createElement(S._19, {
                        position: S._4.Absolute,
                        attachBottom: !0,
                        attachRight: !0,
                        borderRight: !1,
                        borderBottom: !1,
                        className: "clips-preview-card__boxart"
                    }, i.createElement(m.a, {
                        to: Object(h.c)(this.props.clip.game.name) + "/clips",
                        "data-test-selector": "card-view-game-link",
                        "data-a-target": "clip-game-link"
                    }, i.createElement(S._31, {
                        display: S.H.Block,
                        direction: S._33.Bottom,
                        label: this.props.clip.game.name
                    }, i.createElement(S.C, {
                        imageAlt: this.props.clip.game.name,
                        imageSrc: this.props.clip.game.boxArtURL,
                        aspect: S.k.BoxArt,
                        size: S.D.Size4
                    }))))), this.props.pageType === D.b.Game && (t = i.createElement(S.V, null, i.createElement(m.a, {
                        className: "clips-preview-card__display-name",
                        to: "/" + this.props.clip.broadcaster.login + "/clips"
                    }, this.props.clip.broadcaster.login))), i.createElement(S.V, {
                        margin: {
                            bottom: 2
                        }
                    }, i.createElement(S.A, u.__assign({
                        row: !0
                    }, Object(S._40)(this.props)), i.createElement(S.V, {
                        position: S._4.Relative,
                        margin: {
                            right: 1
                        },
                        flexShrink: 0
                    }, i.createElement(m.a, {
                        to: this.props.clip.url,
                        onClick: this.openModal,
                        "data-a-target": "clip-thumbnail-link"
                    }, i.createElement(S.C, {
                        imageSrc: this.props.clip.thumbnailURL || r.n.config.defaultStreamPreviewURL,
                        imageAlt: this.props.clip.title,
                        aspect: S.k.Aspect16x9,
                        size: S.D.Size24
                    })), e), i.createElement(S.B, null, i.createElement(S._23, {
                        type: S._28.H3,
                        fontSize: S.L.Size5
                    }, i.createElement(m.a, {
                        className: "clips-preview-card__title",
                        to: this.props.clip.url,
                        onClick: this.openModal,
                        "data-a-target": "clip-title-link"
                    }, this.props.clip.title)), i.createElement(S._23, {
                        ellipsis: !0
                    }, t), i.createElement(S._23, {
                        color: S.F.Alt2,
                        ellipsis: !0
                    }, Object(r.d)("{created, date, medium}", {
                        created: new Date(this.props.clip.createdAt)
                    }, "ClipsCardView"), i.createElement(S.Q, {
                        padding: {
                            x: .5
                        }
                    }, i.createElement("span", null, "·")), i.createElement(S.Q, {
                        padding: {
                            right: .5
                        }
                    }, i.createElement("span", null, Object(r.d)("Clipped by", "ClipsCardView"))), i.createElement(m.a, {
                        className: "clips-preview-card__display-name",
                        to: "/" + this.props.clip.curator.login,
                        "data-a-target": "clip-curator-link"
                    }, this.props.clip.curator.login)), i.createElement(S._23, {
                        color: S.F.Alt2
                    }, Object(r.d)("{viewCount, number} views", {
                        viewCount: this.props.clip.viewCount
                    }, "ClipsCardView")))))
                }, t = u.__decorate([Object(o.c)("ClipsCardView")], t)
            }(i.Component)),
            W = Object(l.a)(null, function(e) {
                return Object(c.bindActionCreators)({
                    showModal: d.d
                }, e)
            })(H),
            q = n("QAcM"),
            G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.updateToAllTime = function() {
                        t.props.updateTimeFilter(q.b.All)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return i.createElement(S.V, {
                        className: "clips-cards"
                    }, i.createElement(S.O, {
                        gutterSize: S.P.None
                    }, 0 === this.props.clips.length ? this.renderEmpty() : this.renderClips()))
                }, t.prototype.renderEmpty = function() {
                    var e = this.props.timeFilterValue === q.b.All ? i.createElement(S.V, null, i.createElement(S._23, {
                        fontSize: S.L.Size4
                    }, Object(p.d)("No Clips Found", "ClipsCards")), i.createElement(S.V, {
                        margin: 3
                    }, Object(p.d)("<x:link>Learn how</x:link> to make and share clips of this channel", {
                        "x:link": function(e) {
                            return i.createElement("a", {
                                href: "https://help.twitch.tv/customer/portal/articles/2442508-how-to-use-clips",
                                target: "_blank"
                            }, e)
                        }
                    }, "ClipsCards"))) : i.createElement(S.V, null, i.createElement(S._23, {
                        fontSize: S.L.Size4
                    }, Object(p.d)("No clips were created in this time period.", "ClipsCards"), i.createElement("br", null), Object(p.d)("Check out all popular clips from this channel instead.", "ClipsCards")), i.createElement(S.V, {
                        margin: 3
                    }, i.createElement(S.u, {
                        type: S.z.Hollow,
                        onClick: this.updateToAllTime
                    }, Object(p.d)("See all popular clips", "ClipCards"))));
                    return i.createElement(S.V, {
                        fullWidth: !0
                    }, i.createElement(S.O, null, i.createElement(S.G, {
                        cols: 3
                    }), i.createElement(S.G, {
                        cols: 6
                    }, i.createElement(S.V, {
                        textAlign: S._24.Center
                    }, e)), i.createElement(S.G, {
                        cols: 3
                    })))
                }, t.prototype.renderClips = function() {
                    var e = this;
                    return this.props.clips.map(function(t, n) {
                        return i.createElement(S.G, {
                            cols: {
                                default: 12,
                                xl: 6
                            },
                            key: t.slug
                        }, i.createElement(W, {
                            clip: t,
                            clips: e.props.clips,
                            clipIndex: n,
                            pageType: e.props.pageType,
                            loadMoreClips: e.props.loadMoreClips,
                            "data-target": "clips-card-view",
                            "data-a-target": "clips-card-" + n
                        }))
                    })
                }, t = u.__decorate([Object(o.c)("ClipCards")], t)
            }(i.Component),
            z = Object(l.a)(null, function(e) {
                return Object(c.bindActionCreators)({
                    showModal: d.d
                }, e)
            })(G),
            Q = function(e) {
                return i.createElement(S.V, null, i.createElement(S.V, {
                    display: S.H.Flex,
                    flexWrap: S.K.NoWrap,
                    justifyContent: S.U.Between,
                    margin: {
                        bottom: 2
                    },
                    fullWidth: !0
                }, i.createElement(S.V, {
                    display: S.H.Flex,
                    flexWrap: S.K.NoWrap
                }, e.pageType === D.b.Game && i.createElement(S.V, {
                    margin: {
                        right: 1
                    }
                }, i.createElement(s.a, null)), i.createElement(S.V, null, i.createElement(q.c, {
                    updateTimeFilter: e.updateTimeFilter,
                    timeFilterValue: e.timeFilterValue
                }))), i.createElement(S.u, {
                    linkTo: "https://twitch.tv/manager/clips",
                    targetBlank: !0,
                    type: S.z.Hollow,
                    "data-a-target": "manage-clips-button"
                }, Object(r.d)("Manage my clips", "TopClips"))), i.createElement(S.V, null, e.isLoading ? i.createElement(S.Z, {
                    fillContent: !0
                }) : i.createElement(z, {
                    clips: e.clips,
                    pageType: e.pageType,
                    loadMoreClips: e.loadMoreClips,
                    updateTimeFilter: e.updateTimeFilter,
                    timeFilterValue: e.timeFilterValue
                })))
            },
            J = Object(o.c)("TopClips", {
                autoReportInteractive: !0
            })(Q);
        n.d(t, !1, function() {
            return Q
        }), n.d(t, "a", function() {
            return J
        })
    },
    "5vPJ": function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("U7vG"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("GxDs"),
            l = n("pexS"),
            c = {
                isTimedOut: !1
            },
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = c, t.timeoutID = null, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.props.data.clip || (this.timeoutID = setTimeout(function() {
                        e.setState({
                            isTimedOut: !0
                        })
                    }, 5e3))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                        isTimedOut: !1
                    }))
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.clip,
                        n = e.error,
                        a = e.loading;
                    return n || this.state.isTimedOut ? i.createElement(o.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "ClipsChatCard"),
                            description: Object(r.d)("We couldn't find that Clip", "ClipsChatCard")
                        }
                    }) : a || !t ? i.createElement(o.a, null) : i.createElement(o.a, {
                        data: {
                            title: t.title ? t.title : Object(r.d)("Clip of {broadcaster}", {
                                broadcaster: t.broadcaster.displayName
                            }, "ClipsChatCard"),
                            description: Object(r.d)("Clipped by {curator}", {
                                curator: t.curator.displayName
                            }, "ClipsChatCard"),
                            previewImageURL: t.thumbnailURL,
                            contentURL: t.url
                        }
                    })
                }, t
            }(i.Component),
            u = function(e) {
                return {
                    variables: {
                        slug: e.slug
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: e.forceNetworkRequest ? "cache-first" : "cache-only"
                }
            },
            p = Object(s.a)(l, {
                options: u
            })(d);
        n.d(t, !1, function() {
            return 5e3
        }), n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return c
        }), n.d(t, !1, function() {
            return d
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return p
        })
    },
    "6Agf": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var a;
        ! function(e) {
            e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
        }(a || (a = {}))
    },
    "6Rwu": function(e, t) {},
    "6lb1": function(e, t) {},
    "6vcJ": function(e, t) {},
    "6yQB": function(e, t, n) {
        "use strict";
        var a = n("RH2O"),
            i = n("2KeS"),
            r = n("iJpA"),
            s = n("c8Oh"),
            o = n("TToO"),
            l = n("U7vG"),
            c = n("6sO2"),
            d = n("zCIC"),
            u = n("+Znq"),
            p = n("D9fv"),
            m = n("CSlQ"),
            h = n("Odds"),
            g = (n("vQzq"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleLanguageChange = function(e) {
                        var n = e.currentTarget,
                            a = n.parentElement && n.parentElement.getAttribute("data-language-code");
                        a && t.props.updateLanguagePreferences(a, n.checked)
                    }, t.renderLanguageOption = function(e) {
                        return l.createElement(h.V, {
                            padding: {
                                x: 1,
                                y: .5
                            },
                            key: e.code
                        }, l.createElement(h.E, {
                            label: e.label,
                            checked: t.props.languagePreferences.includes(e.code),
                            "data-language-code": e.code,
                            "data-a-target": "language-filter-" + e.code + "-checkbox",
                            onChange: t.handleLanguageChange
                        }))
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.languagePreferences.length;
                    return l.createElement(h.V, {
                        className: "language-select-menu"
                    }, l.createElement(u.a, null, l.createElement(h.u, {
                        "data-test-selector": "language-dropdown-button",
                        "data-a-target": "language-filter-dropdown",
                        dropdown: !0,
                        type: h.z.Hollow
                    }, l.createElement(h.V, {
                        display: h.H.Flex
                    }, Object(c.d)("Language", "LanguageSelectMenu"), l.createElement(h.V, {
                        margin: {
                            left: .5
                        }
                    }, 0 !== e && l.createElement(h._1, {
                        type: h._2.Brand,
                        label: e.toString()
                    })))), l.createElement(h.p, {
                        direction: h.q.BottomLeft,
                        noTail: !0,
                        "data-a-target": "language-filter-balloon"
                    }, l.createElement(d.b, {
                        className: "language-select-menu__balloon"
                    }, l.createElement(h.V, {
                        padding: .5
                    }, Object(p.b)().map(this.renderLanguageOption))), l.createElement(h._19, {
                        background: h.m.Alt,
                        borderTop: !0,
                        className: "language-select-menu__footer"
                    }, l.createElement(h.u, {
                        type: h.z.Text,
                        onClick: this.props.clearLanguagePreferences,
                        "data-a-target": "language-clear-all"
                    }, Object(c.d)("Clear all", "LanguageSelectMenu"))))))
                }, t = o.__decorate([Object(m.c)("LanguageSelectMenu")], t)
            }(l.Component)),
            f = Object(a.a)(function(e) {
                return {
                    languagePreferences: Object(s.a)(e)
                }
            }, function(e) {
                return Object(i.bindActionCreators)({
                    updateLanguagePreferences: r.c,
                    clearLanguagePreferences: r.a
                }, e)
            })(g);
        n.d(t, "a", function() {
            return f
        })
    },
    "7LVu": function(e, t) {},
    "7X7f": function(e, t) {},
    "8Wuk": function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("U7vG"),
            r = n("6sO2"),
            s = n("2hJ3"),
            o = n("yDzg"),
            l = "https://www.facebook.com/sharer/sharer.php",
            c = "https://www.twitter.com/share",
            d = "https://www.reddit.com/submit",
            u = "https://vk.com/share.php",
            p = n("Odds");
        n("bdk8");
        n.d(t, "b", function() {
            return m
        }), n.d(t, "a", function() {
            return h
        });
        var m;
        ! function(e) {
            e[e.Twitter = 0] = "Twitter", e[e.Reddit = 1] = "Reddit", e[e.VKontakte = 2] = "VKontakte", e[e.Facebook = 3] = "Facebook", e[e.Copy = 4] = "Copy", e[e.CopyInput = 5] = "CopyInput"
        }(m || (m = {}));
        var h = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.renderLink = function() {
                    var e = "social-button__link " + n.addSocialClassModifier("social-button__link");
                    return n.isLink() ? i.createElement("a", a.__assign({
                        href: n.getLinkTarget(),
                        target: "_blank",
                        className: e,
                        onClick: n.onShareClickHandler
                    }, Object(p._40)(n.props)), n.renderIcon()) : i.createElement("button", a.__assign({
                        onClick: n.copyPageUrl,
                        onMouseLeave: n.clearIsCopiedStatus,
                        className: e
                    }, Object(p._40)(n.props)), n.renderIcon())
                }, n.onShareClickHandler = function() {
                    n.props.onShareClick && n.props.onShareClick(n.props.type)
                }, n.clearIsCopiedStatus = function() {
                    n.setState({
                        isCopied: !1
                    })
                }, n.getUrl = function() {
                    return n.props.url || window.location.href
                }, n.copyPageUrl = function(e) {
                    e && e.preventDefault(), n.props.onShareClick && n.props.onShareClick(n.props.type), Object(s.a)(n.getUrl()), n.setState({
                        isCopied: !0
                    })
                }, n.renderIcon = function() {
                    var e = n.getAssetFromType();
                    return i.createElement(p.V, {
                        className: "social-button__icon " + n.addSocialClassModifier("social-button__icon")
                    }, i.createElement(p._10, {
                        asset: e,
                        width: 30,
                        height: 30
                    }))
                }, n.isLink = function() {
                    return n.props.type !== m.Copy
                }, n.getTooltipFromType = function() {
                    switch (n.props.type) {
                        case m.Twitter:
                            return "Twitter";
                        case m.Reddit:
                            return "Reddit";
                        case m.Facebook:
                            return "Facebook";
                        case m.VKontakte:
                            return "VKontakte";
                        case m.Copy:
                            return n.state.isCopied ? Object(r.d)("Copied", "SocialButton") : Object(r.d)("Copy to clipboard", "SocialButton");
                        default:
                            return ""
                    }
                }, n.getAssetFromType = function() {
                    switch (n.props.type) {
                        case m.Twitter:
                            return p._11.Twitter;
                        case m.Facebook:
                            return p._11.Facebook;
                        case m.VKontakte:
                            return p._11.VKontakte;
                        case m.Reddit:
                            return p._11.Reddit;
                        case m.Copy:
                        default:
                            return p._11.Copy
                    }
                }, n.addSocialClassModifier = function(e) {
                    switch (n.props.type) {
                        case m.Twitter:
                            return e + "--twitter";
                        case m.Reddit:
                            return e + "--reddit";
                        case m.Facebook:
                            return e + "--facebook";
                        case m.VKontakte:
                            return e + "--vkontakte";
                        case m.Copy:
                            return e + "--copy";
                        default:
                            return ""
                    }
                }, n.getLinkTarget = function() {
                    var e = n.props,
                        t = e.text,
                        a = e.type,
                        i = n.getUrl(),
                        r = t || "";
                    switch (a) {
                        case m.Reddit:
                            return function(e, t) {
                                return Object(o.a)(d, {
                                    url: e,
                                    title: t
                                })
                            }(i, r);
                        case m.VKontakte:
                            return function(e) {
                                return Object(o.a)(u, {
                                    url: e
                                })
                            }(i);
                        case m.Facebook:
                            return function(e) {
                                return Object(o.a)(l, {
                                    u: e
                                })
                            }(i);
                        case m.Twitter:
                            return function(e, t) {
                                return Object(o.a)(c, {
                                    url: e,
                                    text: t
                                })
                            }(i, r);
                        default:
                            return ""
                    }
                }, n.state = {
                    isCopied: !1
                }, n
            }
            return a.__extends(t, e), t.prototype.render = function() {
                return i.createElement(p.V, {
                    className: "social-button"
                }, i.createElement(p._31, {
                    label: this.getTooltipFromType(),
                    direction: p._33.Top
                }, this.renderLink()))
            }, t
        }(i.Component)
    },
    "90yy": function(e, t) {},
    "91zu": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "IncomingRaidLine_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "50"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query IncomingRaidLine_Channel($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\ndisplayName\nprofileImageURL(width: 50)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "9fnI": function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 149
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/chat/models/cheer-fragment.gql"\nquery ChatList_Bits($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("576g").definitions)), e.exports = a
    },
    "9u8h": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("Aj/L"),
            s = "application/json; charset=UTF-8",
            o = function() {
                function e() {}
                return e.get = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), a.__awaiter(this, void 0, void 0, function() {
                        return a.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return [4, this.request(e, a.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, i.sent()]
                            }
                        })
                    })
                }, e.put = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), a.__awaiter(this, void 0, void 0, function() {
                        return a.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return [4, this.request(e, a.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, i.sent()]
                            }
                        })
                    })
                }, e.post = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), a.__awaiter(this, void 0, void 0, function() {
                        return a.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return [4, this.request(e, a.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, i.sent()]
                            }
                        })
                    })
                }, e.delete = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), a.__awaiter(this, void 0, void 0, function() {
                        return a.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return [4, this.request(e, a.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, i.sent()]
                            }
                        })
                    })
                }, e.request = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), a.__awaiter(this, void 0, void 0, function() {
                        var i, r;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return t = this.constructOptions(t, n), i = t.headers ? t.headers["Content-Type"] : void 0, t.body = this.serialize(t.body, i), [4, this._fetch(e, t)];
                                case 1:
                                    return r = a.sent(), [4, this.constructLegacyAPIResponse(r)];
                                case 2:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.getAPIURL = function(e) {
                    return new URL(e, i.n.config.apiBaseURL)
                }, e.constructLegacyAPIResponse = function(e) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var t, n, i;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    t = {
                                        status: e.status
                                    }, a.label = 1;
                                case 1:
                                    return a.trys.push([1, 3, , 4]), [4, e.json()];
                                case 2:
                                    return n = a.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                case 3:
                                    return i = a.sent(), t.requestError = i, [3, 4];
                                case 4:
                                    return [2, t]
                            }
                        })
                    })
                }, e._fetch = function(e, t) {
                    return void 0 === t && (t = {}), a.__awaiter(this, void 0, void 0, function() {
                        return a.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, fetch(this.getAPIURL(e).toString(), t)];
                                case 1:
                                    return [2, n.sent()]
                            }
                        })
                    })
                }, e.constructOptions = function(e, t) {
                    return e = Object.assign({}, e, {
                        headers: a.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                    })
                }, e.serialize = function(e, t) {
                    return t === s ? JSON.stringify(e) : e
                }, e.getDefaultHeaders = function(e, t) {
                    var n = i.n.store.getState(),
                        a = {
                            Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                            "Accept-Language": "en-us",
                            "Client-ID": i.n.config.legacyClientID,
                            "X-Requested-With": "XMLHttpRequest"
                        };
                    e.body && FormData.prototype.isPrototypeOf(e.body) || (a["Content-Type"] = s);
                    var o = Object(r.c)(n);
                    return o && (a.Authorization = "OAuth " + o.authToken, o.legacyCSRFToken && (a["Twitch-Api-Token"] = o.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                        a[e] && delete a[e]
                    }), a
                }, e
            }()
    },
    "9uTb": function(e, t) {},
    ACWz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatInput"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isEmbedded"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isEmbedded"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "hashtags"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "edges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "cursor"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "node"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 274
            }
        };
        n.loc.source = {
            body: "query ChatInput($channelLogin: String! $isEmbedded: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nisPartner @include(if: $isEmbedded)\n}\nuser(login: $channelLogin) {\nid\ncheer {\nid\nhashtags {\nedges {\ncursor\nnode {\nid\n}\n}\n}\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    AL3x: function(e, t) {},
    AQmT: function(e, t) {},
    AaXK: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "selectedBadge"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availableBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "availableBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 288
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_Badges($channelLogin: String!) {\ncurrentUser {\nid\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\nuser(login: $channelLogin) {\nid\nself {\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = a
    },
    Ajho: function(e, t) {},
    AwFw: function(e, t) {},
    B88H: function(e, t) {},
    BBNG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channelUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 437
            }
        };
        n.loc.source = {
            body: "query ViewerCard($targetLogin: String! $channelID: ID!) {\ntargetUser: user(login: $targetLogin) {\nid\nlogin\nbannerImageURL\ndisplayName\nprofileImageURL(width: 70)\n}\nchannelUser: user(id: $channelID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\nemotes {\nid\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\nself {\nisModerator\n}\n}\ncurrentUser {\nlogin\nid\nroles {\nisSiteAdmin\nisStaff\nisGlobalMod\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    BTUa: function(e, t) {},
    BsP9: function(e, t) {},
    Bsuy: function(e, t) {},
    CGWe: function(e, t) {},
    D9fv: function(e, t, n) {
        "use strict";

        function a(e) {
            return void 0 === e && (e = !1), [{
                code: "asl",
                label: "American Sign Language"
            }, {
                code: "other",
                label: e ? Object(i.d)("Other", "broadcaster-languages") : "Other"
            }]
        }
        n.d(t, "a", function() {
            return s
        }), t.b = function() {
            var e = i.n.intl.getLanguageCode(),
                t = function(t) {
                    return "en" === t.code ? 0 : e && e.startsWith(t.code) ? 1 : 2
                };
            return r.slice().sort(function(e, n) {
                var a = t(e),
                    i = t(n);
                return a !== i ? a - i : a + ":" + e.label < i + ":" + n.label ? -1 : 1
            }).concat(a(!0))
        };
        var i = n("6sO2"),
            r = [{
                code: "ar",
                label: "العربية"
            }, {
                code: "bg",
                label: "Български"
            }, {
                code: "cs",
                label: "Čeština"
            }, {
                code: "da",
                label: "Dansk"
            }, {
                code: "de",
                label: "Deutsch"
            }, {
                code: "el",
                label: "Ελληνικά"
            }, {
                code: "en",
                label: "English"
            }, {
                code: "es",
                label: "Español"
            }, {
                code: "fi",
                label: "Suomi"
            }, {
                code: "fr",
                label: "Français"
            }, {
                code: "hu",
                label: "Magyar"
            }, {
                code: "it",
                label: "Italiano"
            }, {
                code: "ja",
                label: "日本語"
            }, {
                code: "ko",
                label: "한국어"
            }, {
                code: "nl",
                label: "Nederlands"
            }, {
                code: "no",
                label: "Norsk"
            }, {
                code: "pl",
                label: "Polski"
            }, {
                code: "pt",
                label: "Português"
            }, {
                code: "ru",
                label: "Русский"
            }, {
                code: "sk",
                label: "Slovenčina"
            }, {
                code: "sv",
                label: "Svenska"
            }, {
                code: "th",
                label: "ภาษาไทย"
            }, {
                code: "tr",
                label: "Türkçe"
            }, {
                code: "vi",
                label: "Tiếng Việt"
            }, {
                code: "zh-hk",
                label: "中文(粵語)"
            }, {
                code: "zh",
                label: "中文"
            }],
            s = new Set(r.concat(a()).map(function(e) {
                return e.code
            }))
    },
    DVR9: function(e, t) {},
    Dc1A: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    FsFC: function(e, t, n) {
        "use strict";

        function a(e, t) {
            return e === i.SECOND ? Object(r.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                secondCount: t
            }, "formatDuration") : e === i.MINUTE ? Object(r.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                minuteCount: t
            }, "formatDuration") : e === i.DAY ? Object(r.d)("{dayCount, plural, one {# day} other {# days}}", {
                dayCount: t
            }, "formatDuration") : e === i.HOUR ? Object(r.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                hourCount: t
            }, "formatDuration") : e === i.WEEK ? Object(r.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                weekCount: t
            }, "formatDuration") : e === i.MONTH ? Object(r.d)("{monthCount, plural, one {# month} other {# months}}", {
                monthCount: t
            }, "formatDuration") : ""
        }
        t.a = function(e) {
            if (e < 60) return a(i.SECOND, e);
            var t = Math.floor(e / 60),
                n = e % 60;
            if (t < 60) return n ? a(i.MINUTE, t) + " " + a(i.SECOND, n) : a(i.MINUTE, t);
            var r = Math.floor(t / 60);
            if (t %= 60, r < 24) return t ? a(i.HOUR, r) + " " + a(i.MINUTE, t) : a(i.HOUR, r);
            var s = Math.floor(r / 24);
            if (r %= 24, s < 7) return r ? a(i.DAY, s) + " " + a(i.HOUR, r) : a(i.DAY, s);
            if (s <= 26) {
                var o = Math.floor(s / 7);
                return (s %= 7) ? a(i.WEEK, o) + " " + a(i.DAY, s) : a(i.WEEK, o)
            }
            var l = Math.round((s + 3) / 30);
            return a(i.MONTH, l)
        };
        var i, r = n("6sO2");
        ! function(e) {
            e[e.SECOND = 0] = "SECOND", e[e.MINUTE = 1] = "MINUTE", e[e.HOUR = 2] = "HOUR", e[e.DAY = 3] = "DAY", e[e.WEEK = 4] = "WEEK", e[e.MONTH = 5] = "MONTH"
        }(i || (i = {}))
    },
    GOrw: function(e, t) {},
    GxDs: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("U7vG"),
            r = n("F8kA"),
            s = n("yDzg"),
            o = n("vH/s"),
            l = n("6sO2"),
            c = n("Odds"),
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasImageLoadingError: !1
                    }, t.handleImageError = function() {
                        t.setState({
                            hasImageLoadingError: !0
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                    this.setState({
                        hasImageLoadingError: !1
                    })
                }, t.prototype.render = function() {
                    var e = l.a.defaultStreamPreviewURL;
                    return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), i.createElement(c.C, {
                        aspect: c.k.Aspect16x9,
                        imageAlt: this.props.altText,
                        imageSrc: e,
                        onImageError: this.handleImageError
                    })
                }, t
            }(i.Component),
            u = (n("1tZx"), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
            p = {
                ERROR: "chat-card-error",
                TITLE: "chat-card-title",
                DESCRIPTION: "chat-card-description"
            },
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderErrorCard = function() {
                        var e = i.createElement("img", {
                            "data-test-selector": p.ERROR,
                            src: u,
                            className: "chat-card__error-img"
                        });
                        return t.renderCardContent(e, t.props.error)
                    }, t.renderCardContent = function(e, t) {
                        var n, a;
                        return t ? (n = i.createElement(c._23, {
                            type: c._28.Span,
                            fontSize: c.L.Size5,
                            "data-test-selector": p.TITLE,
                            title: t.title
                        }, t.title), a = i.createElement(c._23, {
                            type: c._28.Span,
                            fontSize: c.L.Size6,
                            color: c.F.Alt2,
                            "data-test-selector": p.DESCRIPTION
                        }, t.description)) : (e = i.createElement(c._3, {
                            overlay: !0
                        }), n = i.createElement(c._3, {
                            width: 180
                        }), a = i.createElement(c._3, {
                            width: 120
                        })), i.createElement(c._19, {
                            background: c.m.Base,
                            display: c.H.Flex,
                            flexWrap: c.K.NoWrap,
                            padding: .5
                        }, i.createElement(c._19, {
                            className: "chat-card__preview-img",
                            background: c.m.Alt2,
                            display: c.H.Flex,
                            alignItems: c.c.Center,
                            justifyContent: c.U.Center,
                            flexShrink: 0
                        }, e), i.createElement(c.V, {
                            display: c.H.Flex,
                            alignItems: c.c.Center
                        }, i.createElement(c.V, {
                            margin: {
                                left: 1
                            },
                            fullWidth: !0
                        }, i.createElement(c.V, {
                            className: "chat-card__title",
                            ellipsis: !0
                        }, n), i.createElement(c.V, {
                            ellipsis: !0
                        }, a))))
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e;
                    if (this.props.error) e = this.renderErrorCard();
                    else if (this.props.data) {
                        var t = Object(s.a)(this.props.data.contentURL, {
                                tt_medium: o.PageviewMedium.Chat,
                                tt_content: o.PageviewContent.ChatCard
                            }),
                            n = i.createElement(d, {
                                altText: this.props.data.title,
                                imageURL: this.props.data.previewImageURL
                            });
                        e = i.createElement(r.a, {
                            className: "chat-card__link",
                            to: t,
                            target: "_blank"
                        }, this.renderCardContent(n, {
                            title: this.props.data.title,
                            description: this.props.data.description
                        }))
                    } else e = this.renderCardContent();
                    return i.createElement(c._19, {
                        elevation: 1,
                        margin: {
                            top: .5
                        }
                    }, e)
                }, t
            }(i.Component),
            h = m;
        n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return h
        })
    },
    HuX0: function(e, t) {},
    IEOs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_DenyRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DenyRejectedChatMessageInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "denyRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\ndenyRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    INp2: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e + "-" + Date.now() + "}"
        }
    },
    J7iJ: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RitualsEnabled_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "ritualsEnabled"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 153
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/chat/models/rituals-enabled-fragment.gql"\nquery RitualsEnabled_User($id: ID!) {\nchannel: user(id: $id) {\n...ritualsEnabled\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("v2Uk").definitions)), e.exports = a
    },
    J8WN: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var a = n("TToO"),
            i = n("U7vG"),
            r = (n.n(i), n("Odds")),
            s = n("yU6t"),
            o = (n.n(s), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDraggingOver: !1
                    }, t.onDragEnter = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !0
                        })
                    }, t.onDragLeave = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !1
                        })
                    }, t.onFileInputChange = function(e) {
                        e.preventDefault(), t.finalizeSelections(e.target.files)
                    }, t.onFileDrop = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !1
                        }), t.finalizeSelections(e.dataTransfer.files)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return i.createElement(r.I, {
                        dragOver: this.state.isDraggingOver,
                        error: this.props.error
                    }, i.createElement(r.Q, {
                        position: r._4.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        fullWidth: !0,
                        fullHeight: !0,
                        zIndex: r._39.Above
                    }, i.createElement("input", {
                        "data-test-selector": "file-picker-input",
                        className: "drag-and-drop-file-picker__input",
                        accept: this.props.allowedFileTypes.join(","),
                        multiple: this.props.multiFile || !1,
                        onChange: this.onFileInputChange,
                        type: "file",
                        onDragLeave: this.onDragLeave,
                        onDragEnter: this.onDragEnter,
                        onDrop: this.onFileDrop
                    })), this.props.children)
                }, t.prototype.finalizeSelections = function(e) {
                    e && this.props.onFilesSubmitted(Array.from(e))
                }, t
            }(i.Component))
    },
    Jg0G: function(e, t) {},
    KNSH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_UserData"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 95
            }
        };
        n.loc.source = {
            body: "query Chat_UserData {\nuser {\nid\ndisplayName\nlogin\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KWLn: function(e, t) {},
    KfLc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        }), n.d(t, "d", function() {
            return o
        }), n.d(t, "b", function() {
            return l
        }), n.d(t, "e", function() {
            return c
        }), n.d(t, "c", function() {
            return d
        });
        var a = n("6sO2"),
            i = n("vH/s"),
            r = n("aSvS"),
            s = function(e) {
                var t = {
                    action: r.b.DismissToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                a.m.track(i.SpadeEventType.NewChatterTokenStatus, t)
            },
            o = function(e) {
                var t = {
                    action: r.b.RedeemToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: e.userMessage
                };
                a.m.track(i.SpadeEventType.NewChatterTokenStatus, t)
            },
            l = function(e) {
                var t = {
                    action: r.b.RequestEligibility,
                    channel_id: e.channelID,
                    user_banner: null,
                    user_message: null
                };
                a.m.track(i.SpadeEventType.NewChatterTokenStatus, t)
            },
            c = function(e) {
                var t = {
                    action: r.b.RequestToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                a.m.track(i.SpadeEventType.NewChatterTokenStatus, t)
            },
            d = function(e) {
                var t = {
                    action: e.action,
                    channel_id: e.channelID
                };
                a.m.track(i.SpadeEventType.NewChatterOnboardingInteraction, t)
            }
    },
    L0RX: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Lx+S": function(e, t, n) {
        "use strict";

        function a(e) {
            var t = r.createElement(I._23, {
                    bold: !0,
                    type: I._28.Span
                }, r.createElement("span", {
                    style: {
                        color: e.chatColor
                    },
                    "data-a-target": P
                }, Object(B.a)(e.login, e.displayName))),
                n = null;
            return e.editAppearance || (n = r.createElement(I.V, {
                margin: {
                    top: 1
                }
            }, r.createElement("div", {
                className: "chat-settings__edit-button",
                onClick: e.onClickEdit,
                "data-a-target": V,
                "data-test-selector": U
            }, Object(E.d)("Edit Appearance", "ChatSettings")))), r.createElement(I._19, {
                background: I.m.Base,
                color: I.F.Base,
                display: I.H.InlineFlex,
                flexDirection: I.J.Column,
                fullWidth: !0
            }, r.createElement(I._23, {
                color: I.F.Alt2,
                transform: I._27.Uppercase
            }, Object(E.d)("Name Display", "ChatSettings")), r.createElement(I.V, {
                margin: {
                    top: 2
                }
            }, e.userBadges && e.userBadges.map(function(e) {
                return r.createElement(R.a, {
                    key: e.id,
                    badge: e
                })
            }), t), n)
        }
        var i = n("TToO"),
            r = n("U7vG"),
            s = n("RH2O"),
            o = n("CIox"),
            l = n("2KeS"),
            c = n("NXs7"),
            d = n("Ouuk"),
            u = n("jF7o"),
            p = n("+xm8"),
            m = n("f2i/"),
            h = n("NikC"),
            g = n("Aj/L"),
            f = n("0nzt"),
            v = n("vh75"),
            b = n("ass3"),
            k = n("UzRK"),
            y = n("TnJK"),
            C = n("O0Qc"),
            S = n("VsL1"),
            _ = n("Umoc"),
            E = n("6sO2"),
            w = n("zCIC"),
            N = n("+Znq"),
            D = n("7vx8"),
            O = n("HW6M"),
            T = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            I = n("Odds"),
            L = (n("90yy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onColorSelected = function(e) {
                        var n = e.currentTarget.getAttribute("data-color");
                        n && t.props.onColorSelected(n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = T.map(function(t) {
                            var n = {
                                "color-chooser": !0,
                                "color-chooser--selected": t === e.props.selectedColor
                            };
                            return r.createElement("div", {
                                key: t,
                                "data-color": t,
                                onClick: e.onColorSelected,
                                className: O(n),
                                style: {
                                    backgroundColor: t
                                },
                                "data-test-selector": "color_swatch_" + t,
                                "data-a-target": "color_swatch_" + t
                            })
                        }),
                        n = r.createElement(I._23, {
                            transform: I._27.Uppercase,
                            color: I.F.Alt2
                        }, Object(E.d)("Name Color", "ChatSettings"));
                    return this.props.borderTop && (n = r.createElement(I._19, {
                        margin: {
                            top: 2
                        },
                        borderTop: !0,
                        padding: {
                            top: 2
                        }
                    }, n)), r.createElement("div", null, r.createElement(I._19, {
                        margin: {
                            bottom: 1
                        },
                        background: I.m.Base,
                        color: I.F.Base,
                        display: I.H.InlineFlex,
                        flexDirection: I.J.Column,
                        fullWidth: !0
                    }, n), r.createElement(I.V, {
                        margin: {
                            y: 1
                        },
                        display: I.H.Flex
                    }, t, r.createElement(I._23, {
                        fontSize: I.L.Size7
                    }, r.createElement("a", {
                        href: "https://twitch.tv/products/turbo?ref=more_colors_direct"
                    }, Object(E.d)("more colors →", "ChatSettings")))))
                }, t
            }(r.Component)),
            M = n("OAwv"),
            x = n("AaXK"),
            F = (n("7LVu"), "channel_badge"),
            j = "global_badge",
            A = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onGlobalBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setGlobalBadge(t.props.userLogin, n || "")
                    }, t.onChannelBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.currentUser ? r.createElement("div", null, r.createElement(L, {
                        selectedColor: this.props.userChatColor,
                        onColorSelected: this.props.onColorSelected,
                        borderTop: !0
                    }), this.getBadgeChooser()) : null
                }, t.prototype.getBadgeChooser = function() {
                    var e = this;
                    if (this.props.data) {
                        var t = this.props.data.user.self.availableBadges,
                            n = this.props.data.user.self.selectedBadge,
                            a = this.props.data.currentUser.availableBadges,
                            i = this.props.data.currentUser.selectedBadge;
                        if (!t) return null;
                        var s = void 0 === this.state.channelBadgeID && n ? n.setID : this.state.channelBadgeID,
                            o = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !s
                            },
                            l = Object(E.d)("No channel badges :(", "ChatSettings");
                        t && t.length > 0 && (l = t.map(function(t) {
                            var a = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": n && t.setID === s
                            };
                            return r.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onChannelBadgeClicked,
                                key: t.setID + "/" + t.version,
                                className: O(a),
                                "data-test-selector": F + "_" + t.setID,
                                "data-a-target": F + "_" + t.setID
                            }, r.createElement(I._31, {
                                label: t.title
                            }, r.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(r.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onChannelBadgeClicked,
                            className: O(o),
                            "data-test-selector": F + "_none",
                            "data-a-target": F + "_none"
                        }, r.createElement(I._31, {
                            label: Object(E.d)("Same as Global", "ChatSettings")
                        }, r.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, r.createElement(I._10, {
                            asset: I._11.Global
                        })))));
                        var c = void 0 === this.state.globalBadgeID && i ? i.setID : this.state.globalBadgeID,
                            d = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !c
                            },
                            u = Object(E.d)("No global badges :(", "ChatSettings");
                        return a && a.length > 0 && (u = a.map(function(t) {
                            var n = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": i && t.setID === c
                            };
                            return r.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onGlobalBadgeClicked,
                                key: t.setID + "/" + t.version,
                                className: O(n),
                                "data-test-selector": j + "_" + t.setID,
                                "data-a-target": j + "_" + t.setID
                            }, r.createElement(I._31, {
                                label: t.title
                            }, r.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(r.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onGlobalBadgeClicked,
                            className: O(d),
                            "data-test-selector": j + "_none",
                            "data-a-target": j + "_none"
                        }, r.createElement(I._31, {
                            label: Object(E.d)("None", "ChatSettings")
                        }, r.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, r.createElement(I._10, {
                            asset: I._11.Ban
                        }))))), r.createElement("div", null, r.createElement(I._19, {
                            background: I.m.Base,
                            color: I.F.Base,
                            display: I.H.InlineFlex,
                            flexDirection: I.J.Column,
                            fullWidth: !0
                        }, r.createElement(I._19, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, r.createElement(I._31, {
                            align: I._32.Left,
                            label: Object(E.d)("Your global badge is shown when chatting and whispering.", "ChatSettings"),
                            width: 175
                        }, r.createElement(I._23, {
                            color: I.F.Alt2,
                            transform: I._27.Uppercase
                        }, Object(E.d)("Global Badge [?]", "ChatSettings")))), r.createElement(I.V, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: I.H.Flex,
                            "data-a-target": "global-badge-selector"
                        }, u)), r.createElement(I._19, {
                            background: I.m.Base,
                            color: I.F.Base,
                            display: I.H.InlineFlex,
                            flexDirection: I.J.Column,
                            fullWidth: !0
                        }, r.createElement(I._19, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, r.createElement(I._31, {
                            align: I._32.Left,
                            label: Object(E.d)("Change the badge shown when chatting in this channel.", "ChatSettings"),
                            width: 175
                        }, r.createElement(I._23, {
                            color: I.F.Alt2,
                            transform: I._27.Uppercase
                        }, Object(E.d)("Channel Badge [?]", "ChatSettings")))), r.createElement(I.V, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: I.H.Flex,
                            "data-a-target": "channel-badge-selector"
                        }, l)))
                    }
                }, t.prototype.setChannelBadge = function(e, t, n) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var a, r, s;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return a = {
                                        "Client-ID": E.n.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, r = "https://api.twitch.tv/kraken/users/" + t + "/chat/channels/" + e + "/badges", [4, fetch(r, {
                                        method: "PUT",
                                        body: M.stringify({
                                            selected_badge: n
                                        }),
                                        headers: a
                                    })];
                                case 1:
                                    return (s = i.sent()) && s.ok && (this.props.onBadgesChanged(), this.setState({
                                        channelBadgeID: n
                                    })), [2]
                            }
                        })
                    })
                }, t.prototype.setGlobalBadge = function(e, t) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var n, a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return n = {
                                        "Client-ID": E.n.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, a = "https://api.twitch.tv/kraken/users/" + e + "/chat/badges", [4, fetch(a, {
                                        method: "PUT",
                                        body: M.stringify({
                                            selected_badge: t
                                        }),
                                        headers: n
                                    }).catch(console.error)];
                                case 1:
                                    return (r = i.sent()) && r.ok && (this.props.onBadgesChanged(), this.setState({
                                        globalBadgeID: t
                                    })), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(D.a)(x, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(r.Component),
            B = n("SZoP"),
            R = n("3T7g"),
            U = "edit-appearance-button",
            V = "edit-appearance-button",
            P = "edit-display-name",
            H = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(I.V, {
                        "data-toggle-balloon-id": "raids-follower-only-tooltip",
                        margin: {
                            left: .5
                        },
                        position: I._4.Relative
                    }, r.createElement(I._31, {
                        align: I._32.Right,
                        direction: I._33.Top,
                        display: I.H.InlineFlex,
                        label: this.props.text,
                        width: 175,
                        show: !0
                    }, r.createElement(I.Q, {
                        alignItems: I.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: I.H.InlineFlex,
                        justifyContent: I.U.Center
                    }, r.createElement(I._23, {
                        color: I.F.Overlay,
                        fontSize: I.L.Size8,
                        type: I._28.Span,
                        "data-test-selector": "raids-follower-only-tooltip"
                    }, "i"))))
                }, t
            }(r.Component),
            W = n("V5M+"),
            q = n("oSFp"),
            G = n("F8kA"),
            z = n("9u8h"),
            Q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.targetChannelID = t.props.targetChannelID, t
                }
                return i.__extends(t, e), t.fetchRecentRaidsList = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return a.trys.push([0, 2, , 3]), [4, z.a.get("/kraken/raids?client_id=" + E.a.authClientID + "&api_version=" + E.a.defaultAPIVersion + "&target_id=" + e)];
                                case 1:
                                    return t = a.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = a.sent(), E.i.error(n, "Couldn't fetch raids list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.deserialize = function(e) {
                    var t = [];
                    if (e.body && e.body.raids) {
                        for (var n in e.body.raids)
                            if (n.hasOwnProperty) {
                                var a = {
                                    raidID: e.body.raids[n]._id,
                                    raidAt: e.body.raids[n].raid_at,
                                    userID: e.body.raids[n].creator_user._id,
                                    name: e.body.raids[n].creator_user.name
                                };
                                t.push(a)
                            }
                        return t
                    }
                    return []
                }, t
            }(r.Component),
            J = n("oIkB"),
            $ = n("g7wA"),
            K = n("O9wU"),
            Y = n("jPU6"),
            Z = n("y1/w"),
            X = (n("MSFW"), n("L0RX")),
            ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onUsernameClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-username"),
                            a = e.currentTarget.getAttribute("data-raid-id") || "";
                        n && t.props.onUsernameClick(n, K.a.recent_raids, a)
                    }, t.onBanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.banUser)(Object(J.a)({
                            channelID: n,
                            bannedUserLogin: a
                        }))
                    }, t.onUnbanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.unbanUser)(Object(J.a)({
                            channelID: n,
                            bannedUserLogin: a
                        }))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(I.V, {
                        key: "recent-raids-layout2-" + this.props.raiderUserID,
                        className: "recent-raids-item",
                        flexDirection: I.J.Row,
                        display: I.H.Flex,
                        fullWidth: !0
                    }, r.createElement(I.V, {
                        flexDirection: I.J.Row,
                        display: I.H.Flex,
                        fullWidth: !0,
                        justifyContent: I.U.Between
                    }, r.createElement(I._23, {
                        bold: !0
                    }, r.createElement("a", {
                        className: "recent-raids-item__name",
                        "data-username": this.props.channelLogin,
                        "data-raid-id": this.props.raidID,
                        onClick: this.onUsernameClick,
                        href: "#"
                    }, this.props.channelLogin)), r.createElement(I.V, {
                        position: I._4.Relative
                    }, r.createElement(I.V, {
                        className: "recent-raids-item__timestamp"
                    }, Object($.s)(Date.parse(this.props.timestamp))), this.getCardSlideInContent())))
                }, t.prototype.getCardSlideInContent = function() {
                    if (!this.props.slideInContent) return null;
                    var e = null;
                    return e = this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? r.createElement(I.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: I.x.Small,
                        type: I.z.Text,
                        onClick: this.onUnbanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(E.d)("Unban", "RecentRaid")) : r.createElement(I.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: I.x.Small,
                        type: I.z.Text,
                        onClick: this.onBanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(E.d)("Ban", "RecentRaid")), r.createElement(I.V, {
                        key: "recent-raids-layout-" + this.props.raiderUserID,
                        className: "recent-raids-item__hover-content",
                        zIndex: I._39.Above,
                        "data-a-target": "recent-raids-item-hover"
                    }, this.props.slideInContent, e)
                }, t = i.__decorate([Object(D.a)(Z, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.raiderUserID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(D.a)(Y, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var a = e.readQuery({
                                        query: Z,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        }
                                    });
                                    t && t.data && (a.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: Z,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        },
                                        data: a
                                    })
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(D.a)(X, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                            query: Z,
                                            variables: {
                                                targetUserID: t.raiderUserID,
                                                channelID: t.channelID
                                            }
                                        }),
                                        a = i.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                    e.writeQuery({
                                        query: Z,
                                        variables: {
                                            targetUserID: t.raiderUserID,
                                            channelID: t.channelID
                                        },
                                        data: a
                                    })
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(r.Component),
            te = n("mw/a"),
            ne = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onReportButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-raid-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: te.a.Raid,
                                targetUserID: a,
                                contentID: n,
                                extra: JSON.stringify({
                                    channel_id: a.toString()
                                })
                            },
                            title: Object(E.d)("Report {channelDisplayName}", {
                                channelDisplayName: i
                            }, "ReportUserModal")
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, Q.fetchRecentRaidsList(this.props.targetChannelID)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        raidChannels: e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = [],
                        t = [],
                        n = {};
                    if (void 0 !== this.state.raidChannels) {
                        0 === this.state.raidChannels.length && e.push(r.createElement(I._23, {
                            key: "recent-raids-no-raids",
                            type: I._28.P
                        }, Object(E.d)("You have no recent raids", "RecentRaids")));
                        for (var a in this.state.raidChannels)
                            if (a.hasOwnProperty) {
                                var i = this.state.raidChannels[a];
                                this.state.raidChannels.hasOwnProperty(a) && void 0 === n[i.userID] && (t.push(r.createElement(ee, {
                                    key: "recent-raids-item-" + i.userID,
                                    slideInContent: [r.createElement(I._19, {
                                        key: "recent-raids-item-report-area-" + i.userID,
                                        color: I.F.Alt2,
                                        display: I.H.InlineFlex
                                    }, r.createElement(I.u, {
                                        key: "recent-raid-report-button",
                                        size: I.x.Small,
                                        type: I.z.Text,
                                        onClick: this.onReportButtonClick,
                                        "data-a-target": "recent-raid-item-button",
                                        "data-raid-id": i.raidID,
                                        "data-target-user-login": i.name,
                                        "data-target-user-id": i.userID
                                    }, Object(E.d)("Report", "RecentRaid")), r.createElement(I._31, {
                                        align: I._32.Right,
                                        width: 150,
                                        label: Object(E.d)("Banning a user prevents them from future chatting or raiding", "RecentRaid")
                                    }))],
                                    timestamp: i.raidAt,
                                    channelLogin: i.name,
                                    raiderUserID: i.userID,
                                    channelID: this.props.targetChannelID,
                                    raiderLogin: i.name,
                                    raidID: i.raidID,
                                    onUsernameClick: this.props.onUsernameClick,
                                    showReportUserModal: this.props.showReportUserModal
                                })), n[i.userID] = !0)
                            }
                    }
                    var s = null;
                    return this.props.recentRaids ? r.createElement(I.V, {
                        key: "recent-raids"
                    }, r.createElement(I.V, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(I._23, {
                        color: I.F.Link,
                        type: I._28.Span
                    }, r.createElement(G.a, {
                        to: {
                            pathname: "/broadcast/dashboard/settings/raids"
                        }
                    }, Object(E.d)("Manage Raid Settings", "RecentRaids")))), e, t) : (s = r.createElement(I.V, {
                        key: "recent-raids",
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: I.H.Flex,
                        justifyContent: I.U.Between,
                        alignItems: I.c.Center
                    }, r.createElement("span", {
                        className: "chat-settings__edit-button",
                        onClick: this.props.onClickRecentRaids,
                        "data-test-selector": "recent-raids-button"
                    }, Object(E.d)("See Recent Raids", "ChatSettings")), this.props.tooltipText && r.createElement(I.V, {
                        position: I._4.Relative
                    }, r.createElement(I._31, {
                        align: I._32.Right,
                        direction: I._33.Top,
                        display: I.H.InlineFlex,
                        label: this.props.tooltipText,
                        width: 175,
                        show: !0
                    }, r.createElement(I.Q, {
                        alignItems: I.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: I.H.InlineFlex,
                        justifyContent: I.U.Center,
                        margin: {
                            left: .5
                        }
                    }, r.createElement(I._23, {
                        color: I.F.Overlay,
                        fontSize: I.L.Size8,
                        type: I._28.Span
                    }, "i"))))), r.createElement(I.V, null, s))
                }, t
            }(r.Component),
            ae = Object(s.a)(function() {
                return {}
            }, function(e) {
                return Object(l.bindActionCreators)({
                    showReportUserModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(W.d)(q.a, t)
                    }
                }, e)
            })(ne),
            ie = n("baDC"),
            re = (n("Vaxm"), "chat-settings-back-button"),
            se = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        recentRaids: !1,
                        chatColor: null,
                        raidsTooltipDismissed: !1
                    }, t.dismissRaidsTooltip = function() {
                        t.setState({
                            raidsTooltipDismissed: !0
                        })
                    }, t.handleFollowerDurationClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-duration");
                        n && t.props.onFollowerDurationChange(parseInt(n, 10))
                    }, t.onClickEdit = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickEditAppearance()
                    }, t.onClickRecentRaids = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.setState({
                            recentRaids: !0
                        })
                    }, t.onClickBack = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onLeaveEditAppearance(), t.setState({
                            recentRaids: !1
                        })
                    }, t.onColorSelected = function(e) {
                        t.setState({
                            chatColor: e
                        }), t.props.onColorSelected(e)
                    }, t.onBadgesChanged = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return i.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return !this.props.data || this.props.data.loading ? [3, 2] : [4, this.props.data.refetch()];
                                    case 1:
                                        if ((e = a.sent()).data) {
                                            if (!(t = e.data).user.self) return [2];
                                            n = {}, t.user.self.displayBadges.forEach(function(e) {
                                                n[e.setID] = e.version
                                            }), E.n.tmi.client.updateChannelBadges(this.props.channelLogin, n)
                                        }
                                        a.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.data || this.props.data.loading) return null;
                    var e = null;
                    if (this.props.isLoggedIn && this.props.data.currentUser) {
                        var t = this.props.data.user.self ? this.props.data.user.self.displayBadges : [];
                        e = r.createElement(a, {
                            key: "name-display",
                            login: this.props.data.currentUser.login,
                            displayName: this.props.data.currentUser.displayName,
                            chatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                            editAppearance: this.props.editAppearance,
                            userBadges: t,
                            onClickEdit: this.onClickEdit
                        })
                    }
                    var n = [];
                    return this.props.isLoggedIn ? this.props.editAppearance ? n = [r.createElement(I.Q, {
                        margin: {
                            bottom: 2
                        },
                        key: "chat-settings-edit-inject"
                    }, r.createElement("div", {
                        key: "chat-settings-edit",
                        className: "chat-settings__edit-button",
                        onClick: this.onClickBack,
                        "data-test-selector": re
                    }, r.createElement(I._23, {
                        color: I.F.Link,
                        type: I._28.Span
                    }, r.createElement(I._10, {
                        asset: I._11.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(E.d)("Back", "ChatSettingsAppearance")))), e, r.createElement(A, {
                        key: "edit-appearance",
                        onColorSelected: this.onColorSelected,
                        editAppearance: this.props.editAppearance,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        userChatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                        userLogin: this.props.data.currentUser.login,
                        onBadgesChanged: this.onBadgesChanged
                    })] : this.state.recentRaids ? n = [r.createElement(I.Q, {
                        key: "chat-settings-recent-raids"
                    }, r.createElement("div", {
                        key: "chat-settings-edit",
                        className: "chat-settings__recent-raids-button",
                        onClick: this.onClickBack,
                        "data-test-selector": re
                    }, r.createElement(I._23, {
                        color: I.F.Link,
                        type: I._28.Span
                    }, r.createElement(I._10, {
                        asset: I._11.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(E.d)("Back", "ChatSettingsRecentRaids")), r.createElement(I.V, {
                        margin: {
                            top: 2
                        }
                    }, r.createElement(I._23, {
                        key: "recent-raids-title",
                        color: I.F.Alt2,
                        transform: I._27.Uppercase
                    }, Object(E.d)("Recent Raids", "ChatSettings"))))), r.createElement(ae, {
                        key: "recent-raids",
                        targetChannelID: this.props.channelID,
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard
                    })] : (n = [e, this.renderUniversalOptions()], this.props.isCurrentUserModerator && n.push(this.renderModTools())) : n = [r.createElement(L, {
                        key: "color-chooser",
                        onColorSelected: this.props.onColorSelected
                    }), this.renderUniversalOptions()], r.createElement(w.b, {
                        className: "chat-settings"
                    }, r.createElement("div", {
                        onClick: this.dismissRaidsTooltip
                    }, r.createElement(I._19, {
                        key: "chat-settings",
                        className: "chat-settings__content",
                        background: I.m.Base,
                        color: I.F.Base,
                        padding: 2
                    }, n)))
                }, t.prototype.renderUniversalOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && r.createElement(I.E, {
                            checked: this.props.darkModeEnabled,
                            "data-a-target": "darkmode-checkbox",
                            "data-test-selector": "dark-mode-checkbox",
                            id: "chat-settings-dark-mode",
                            label: Object(E.d)("Dark Mode", "ChatSettings"),
                            onChange: this.props.onDarkModeToggle
                        }),
                        t = !this.props.isPopout && r.createElement("button", {
                            onClick: this.props.onChatPopout,
                            "data-a-target": "popout-chat-button",
                            "data-test-selector": "popout-button"
                        }, Object(E.d)("Popout", "ChatSettings")),
                        n = !this.props.isPopout && (window.BetterTTV || window.FrankerFaceZ) && r.createElement("button", {
                            onClick: this.props.onLegacyChatPopout,
                            "data-test-selector": "legacy-popout-button"
                        }, Object(E.d)("Legacy Popout", "ChatSettings"));
                    return r.createElement(I.V, {
                        key: "chat-options"
                    }, r.createElement(I._19, {
                        borderTop: !0,
                        margin: {
                            top: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, r.createElement(I._23, {
                        color: I.F.Alt2,
                        transform: I._27.Uppercase
                    }, Object(E.d)("Chat Options", "ChatSettings"))), r.createElement(I.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(I.E, {
                        checked: this.props.showTimestamps,
                        "data-a-target": "timestamp-checkbox",
                        "data-test-selector": "timestamps-selector",
                        id: "chat-settings-timestamp",
                        label: Object(E.d)("Timestamps", "ChatSettings"),
                        onChange: this.props.onTimestampToggle
                    })), r.createElement(I.V, {
                        margin: {
                            bottom: 1
                        }
                    }, e), r.createElement(I.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement("button", {
                        onClick: this.props.onChatHide,
                        "data-a-target": "hide-chat-button",
                        "data-test-selector": "hide-chat-button"
                    }, Object(E.d)("Hide Chat", "ChatSettings"))), r.createElement(I.V, {
                        margin: {
                            bottom: 1
                        }
                    }, t), n && r.createElement(I.V, null, n))
                }, Object.defineProperty(t.prototype, "showRaidsTooltip", {
                    get: function() {
                        return this.props.sawFirstRaidPrompt && !this.state.raidsTooltipDismissed
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.renderModTools = function() {
                    return r.createElement(I._19, {
                        key: "mod-tools",
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, r.createElement(I.V, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(I._23, {
                        color: I.F.Alt2,
                        transform: I._27.Uppercase
                    }, Object(E.d)("Mod Tools", "ChatSettings"))), r.createElement(I.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(I.E, {
                        checked: this.props.showModerationIcons,
                        "data-a-target": "mod-icons-checkbox",
                        "data-test-selector": "mod-icons-checkbox",
                        id: "chat-settings-mod-icons",
                        label: Object(E.d)("Mod Icons", "ChatSettings"),
                        onChange: this.props.onModIconsToggle
                    })), r.createElement(I._19, {
                        margin: {
                            bottom: 1
                        },
                        display: I.H.Flex,
                        justifyContent: I.U.Between
                    }, r.createElement(I.E, {
                        checked: this.props.followerModeEnabled,
                        "data-a-target": "follower-mode-checkbox",
                        "data-test-selector": "follower-mode-checkbox",
                        id: "chat-settings-followers-only",
                        label: Object(E.d)("Followers-Only Chat", "ChatSettings"),
                        onChange: this.props.onFollowerModeToggle
                    }), this.showRaidsTooltip ? r.createElement(H, {
                        text: Object(E.d)("Prevent offensive raiders from chatting.", "RaidReportingChat")
                    }) : null, r.createElement(I.V, {
                        alignItems: I.c.Center,
                        display: I.H.Flex,
                        flexWrap: I.K.NoWrap,
                        justifyContent: I.U.Between
                    }, r.createElement(I.V, {
                        margin: {
                            right: .5
                        }
                    }, r.createElement(I._23, {
                        color: I.F.Alt2,
                        fontSize: I.L.Size7,
                        type: I._28.Span
                    }, Object(E.d)("Must have followed for", "ChatSettings"))), r.createElement(I.V, {
                        className: "chat-settings__mod-tools-follower-button",
                        flexShrink: 0
                    }, r.createElement(N.a, {
                        display: I.H.InlineBlock
                    }, r.createElement(I.u, {
                        size: I.x.Small,
                        type: I.z.Text,
                        "data-a-target": "follower-mode-dropdown",
                        "data-test-selector": "follower-mode-duration-menu",
                        dropdown: !0
                    }, Object(k.d)(this.props.selectedFollowerModeDuration)), r.createElement(I.p, {
                        direction: I.q.TopRight
                    }, r.createElement(I.V, {
                        padding: .5
                    }, r.createElement(I._23, {
                        color: I.F.Alt2
                    }, Object(E.d)("Followers can chat if they have followed for at least", "ChatSettings"))), r.createElement(I._19, {
                        color: I.F.Link
                    }, this.renderFollowerModeOptions())))))), r.createElement(I.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(I.E, {
                        checked: this.props.slowModeEnabled,
                        "data-a-target": "slow-mode-checkbox",
                        "data-test-selector": "slow-mode-checkbox",
                        id: "chat-settings-slow-mode",
                        label: Object(E.d)("Slow Mode", "ChatSettings"),
                        onChange: this.props.onSlowModeToggle
                    })), r.createElement(ae, {
                        key: "recent-raids",
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: b.d,
                        targetChannelID: this.props.channelID,
                        tooltipText: this.showRaidsTooltip ? Object(E.d)("View recent raids with option to report or ban.", "RaidReportingChat") : ""
                    }), r.createElement("button", {
                        onClick: this.props.onChatClear,
                        "data-a-target": "clear-chat-button",
                        "data-test-selector": "clear-chat-button"
                    }, Object(E.d)("Clear Chat", "ChatSettings")))
                }, t.prototype.renderFollowerModeOptions = function() {
                    var e = this;
                    return k.b.map(function(t) {
                        return r.createElement(I.T, {
                            "data-duration": t,
                            key: t,
                            onClick: e.handleFollowerDurationClick,
                            selected: t === e.props.selectedFollowerModeDuration
                        }, r.createElement(I.V, {
                            padding: .5
                        }, Object(k.c)(t)))
                    })
                }, t = i.__decorate([Object(D.a)(ie, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(r.Component),
            oe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        editAppearance: !1
                    }, t.handleSettingsToggle = function(e) {
                        t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                            editAppearance: !1
                        })
                    }, t.onEdit = function() {
                        t.setState({
                            editAppearance: !0
                        })
                    }, t.onLeaveEdit = function() {
                        t.setState({
                            editAppearance: !1
                        })
                    }, t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? c.a.Light : c.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.darkModeEnabled,
                            settingName: y.a.DarkMode
                        })
                    }, t.onTimestampToggle = function() {
                        Object(S.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showTimestamps,
                            settingName: y.a.ShowTimestamps
                        })
                    }, t.onChatHide = function() {
                        t.props.onChatHide(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !0,
                            settingName: y.a.HideChat
                        })
                    }, t.onChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(u.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onLegacyChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("https://www.twitch.tv/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(u.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onModIconsToggle = function() {
                        Object(S.b)("showModIcons", !t.props.showModerationIcons), t.props.showModerationIcons ? t.props.onModIconsDisable() : t.props.onModIconsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showModerationIcons,
                            settingName: y.a.ShowModIcons
                        })
                    }, t.onFollowerModeToggle = function() {
                        if (t.props.followerModeEnabled) t.props.onChatCommand(Object(C.d)()), t.props.onFollowerModeDisable();
                        else {
                            var e = t.getSelectedFollowerDuration();
                            t.props.onChatCommand(Object(C.f)(e)), t.props.onFollowerModeDurationChange(e), t.props.onFollowerModeEnable()
                        }
                        Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.followerModeEnabled,
                            settingName: y.a.FollowerMode
                        })
                    }, t.onFollowerDurationChange = function(e) {
                        Object(S.c)(t.props.channelLogin, e), t.props.onFollowerModeDurationPreferenceChange(t.props.channelLogin, e), t.props.followerModeEnabled && (t.props.onChatCommand(Object(C.f)(e)), t.props.onFollowerModeDurationChange(e)), Object(_.c)({
                            channelLogin: t.props.channelLogin,
                            followerModeOn: t.props.followerModeEnabled,
                            isHostMode: t.props.isHostMode,
                            newValue: e
                        })
                    }, t.onSlowModeToggle = function() {
                        t.props.slowModeEnabled ? (t.props.onChatCommand(Object(C.e)()), t.props.onSlowModeDisable()) : (t.props.onChatCommand(Object(C.g)()), t.props.onSlowModeEnable()), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.slowModeEnabled,
                            settingName: y.a.SlowMode
                        })
                    }, t.onChatClear = function() {
                        t.props.onChatCommand(Object(C.c)())
                    }, t.getSelectedFollowerDuration = function() {
                        if (t.props.followerModeEnabled) return t.props.followerModeDuration;
                        var e = t.props.lastUsedFollowerDurations[t.props.channelLogin];
                        return "number" == typeof e ? e : k.a
                    }, t.onColorSelected = function(e) {
                        t.props.isLoggedIn ? t.props.onChatCommand(Object(C.b)(e)) : t.props.login()
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(de, {
                        disabled: this.props.disabled,
                        onToggle: this.handleSettingsToggle
                    }, r.createElement(se, {
                        darkModeEnabled: this.props.darkModeEnabled,
                        followerModeEnabled: this.props.followerModeEnabled,
                        editAppearance: this.state.editAppearance,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isPopout: this.props.isPopout,
                        onChatClear: this.onChatClear,
                        onChatHide: this.onChatHide,
                        onChatPopout: this.onChatPopout,
                        onDarkModeToggle: this.onDarkModeToggle,
                        onFollowerDurationChange: this.onFollowerDurationChange,
                        onFollowerModeToggle: this.onFollowerModeToggle,
                        onLegacyChatPopout: this.onLegacyChatPopout,
                        onModIconsToggle: this.onModIconsToggle,
                        onSlowModeToggle: this.onSlowModeToggle,
                        onTimestampToggle: this.onTimestampToggle,
                        selectedFollowerModeDuration: this.getSelectedFollowerDuration(),
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        slowModeEnabled: this.props.slowModeEnabled,
                        theatreModeEnabled: this.props.theatreModeEnabled,
                        onColorSelected: this.onColorSelected,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isLoggedIn: this.props.isLoggedIn,
                        onClickEditAppearance: this.onEdit,
                        onLeaveEditAppearance: this.onLeaveEdit,
                        sawFirstRaidPrompt: this.props.sawFirstRaidPrompt,
                        onShowViewerCard: this.props.onShowViewerCard
                    }))
                }, t
            }(r.Component),
            le = Object(s.a)(function(e) {
                return {
                    darkModeEnabled: Object(f.a)(e) === c.a.Dark,
                    followerModeDuration: e.chat.followerDuration,
                    followerModeEnabled: e.chat.followerMode,
                    lastUsedFollowerDurations: e.chat.lastUsedFollowerDurations,
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps,
                    slowModeEnabled: e.chat.slowMode,
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    isLoggedIn: Object(g.d)(e)
                }
            }, function(e) {
                return Object(l.bindActionCreators)({
                    onChatHide: function() {
                        return v.H()
                    },
                    onChatUnhide: function() {
                        return v.K()
                    },
                    onFollowerModeDisable: function() {
                        return v.x()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return v.u(e)
                    },
                    onFollowerModeDurationPreferenceChange: function(e, t) {
                        return v.v(e, t)
                    },
                    onFollowerModeEnable: function() {
                        return v.C()
                    },
                    onModIconsDisable: function() {
                        return v.y()
                    },
                    onModIconsEnable: function() {
                        return v.D()
                    },
                    onSlowModeDisable: function() {
                        return v.z()
                    },
                    onSlowModeEnable: function() {
                        return v.E()
                    },
                    onTimestampsDisable: function() {
                        return v.B()
                    },
                    onTimestampsEnable: function() {
                        return v.G()
                    },
                    onShowViewerCard: b.d,
                    onThemeChanged: function(e) {
                        return Object(h.b)(e, void 0, !1)
                    },
                    login: function() {
                        return Object(m.f)(p.a.Chat)
                    }
                }, e)
            })(oe),
            ce = Object(o.e)(le),
            de = function(e) {
                return r.createElement(N.a, {
                    onToggle: e.onToggle
                }, r.createElement(I.v, {
                    icon: I._11.Gear,
                    ariaLabel: Object(E.d)("Chat settings", "ChatInput"),
                    "data-a-target": "chat-settings",
                    disabled: !!e.disabled
                }), r.createElement(I.p, {
                    direction: I.q.Top,
                    noTail: !0,
                    offsetY: "11px",
                    "data-a-target": "chat-settings-balloon"
                }, e.children))
            };
        n.d(t, "a", function() {
            return ce
        }), n.d(t, "b", function() {
            return de
        })
    },
    MApH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_BanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "createdAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 129
            }
        };
        n.loc.source = {
            body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\ncreatedAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    MSFW: function(e, t) {},
    MSvX: function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("OAwv"),
            r = n("U7vG"),
            s = n("6sO2"),
            o = n("Ejve"),
            l = "legacy_routes_enabled",
            c = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.isEnabled = !1, n.onHistoryChange = function(e, t) {
                        n.isEnabled ? "REPLACE" !== t ? e && e.pathname ? (n.logger.debug("Location changed", {
                            path: e.pathname
                        }), n.legacyRoutes.forEach(function(t) {
                            try {
                                if (e.pathname.match(t)) {
                                    n.logger.debug("Found legacy route. Reloading...");
                                    var a = "" !== e.search ? i.parse(e.search) : {};
                                    a["from-redirect"] = "true";
                                    var r = i.stringify(a),
                                        l = s.a.buildType === o.a.Dev ? window.location.host : window.location.hostname,
                                        c = window.location.protocol + "//" + l + e.pathname + "?" + r;
                                    return n.logger.debug("Redirecting to legacy route", {
                                        newUrl: c
                                    }), void window.location.replace(c)
                                }
                            } catch (e) {
                                s.i.withCategory("legacy").error(e, "Unable to determine legacy reload match", {
                                    regex: t
                                })
                            }
                        })) : n.logger.debug("Unable to process history change. Path is null or empty.") : n.logger.debug("Skipping legacy route processing, due to history replace.") : n.logger.debug("Legacy routing not enabled.")
                    }, n.processRedirectParam = function(e) {
                        if (e && e.pathname && e.search) {
                            var t = "" !== e.search ? i.parse(e.search) : {};
                            if (t["from-redirect"]) {
                                delete t["from-redirect"];
                                var a = i.stringify(t),
                                    r = "";
                                a.length > 0 && (r = "?" + a), n.props.history.replace({
                                    pathname: e.pathname,
                                    hash: e.hash,
                                    search: r
                                })
                            }
                        }
                    }, n.isEnabled = s.b.get(l, !1), n.logger = s.i.withCategory("legacy-routes"), n.legacyRoutes = n.buildRoutes(), n.props.history.listen(n.onHistoryChange), n
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return null
                }, t.prototype.componentDidMount = function() {
                    this.processRedirectParam(this.props.history.location)
                }, t.prototype.buildRoutes = function() {
                    if (!this.isEnabled) return [];
                    this.logger.debug("Building legacy routes...");
                    var e = s.b.get("legacy_routes", []),
                        t = [];
                    if (!e || 0 === e.length) return this.logger.debug("No legacy routes found in settings."), t;
                    for (var n = 0, a = e; n < a.length; n++) {
                        var i = a[n];
                        try {
                            var r = new RegExp(i, "i");
                            t.push(r)
                        } catch (e) {
                            this.logger.debug("Failed to parse route!", {
                                val: i,
                                err: e
                            })
                        }
                    }
                    return this.logger.debug("Done building legacy routes!", {
                        count: t.length
                    }), t
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return l
        }), n.d(t, !1, function() {
            return "legacy_routes"
        }), n.d(t, "b", function() {
            return c
        })
    },
    Mful: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "chatMessage"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ChatMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "authorName"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "authorColor"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "author"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "body"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "embeddedEmote"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "setID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "version"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsUsed"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/chat/models/embedded-emote-fragment.gql"\nfragment chatMessage on ChatMessage {\nid\nauthorName\nauthorColor\nauthor {\nid\nlogin\n}\nbody {\ncontent\nemotes {\n...embeddedEmote\n}\n}\nbadges {\nsetID\nversion\n}\nbitsUsed\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("0ImK").definitions)), e.exports = a
    },
    MjlB: function(e, t) {},
    NPzy: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_BlockedUsers"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 66
            }
        };
        n.loc.source = {
            body: "query Chat_BlockedUsers {\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    NZkJ: function(e, t) {},
    Ncf8: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, i) {
            return {
                type: e,
                id: Object(a.a)(t + "-mod"),
                userLogin: t,
                reason: n,
                duration: i
            }
        };
        var a = n("INp2")
    },
    O0Qc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        }), t.h = function(e) {
            return "/ignore " + e
        }, t.j = function(e) {
            return "/unignore " + e
        }, t.i = function(e) {
            return "/mod " + e
        }, t.k = function(e) {
            return "/unmod " + e
        }, t.m = function(e) {
            return /^[\/]/.test(e)
        }, t.c = function() {
            return "/clear"
        }, t.d = function() {
            return "/followersoff"
        }, t.e = function() {
            return "/slowoff"
        }, t.f = function(e) {
            return "/followers " + e
        }, t.g = function() {
            return "/slow"
        }, t.b = function(e) {
            return "/color " + e
        }, t.n = function(e) {
            var t = e.trim().match(s);
            return t ? {
                recipientLogin: t[1] || null,
                body: t[2] || null
            } : null
        }, t.o = function(e) {
            var t = e.trim().match(o);
            return t ? {
                recipientLogin: t[1] || null,
                body: t[2] || null
            } : {
                recipientLogin: null,
                body: null
            }
        }, t.l = function(e, t) {
            var n = e.match(l);
            if (!n) return {
                handled: !1
            };
            var r = n[1],
                s = a.n.store.getState().chat.commandHandlers[n[1].toLowerCase()];
            if (!s) return {
                command: r,
                handled: !1
            };
            var o = (n[2] || "").trim(),
                c = {
                    channelLogin: t
                };
            try {
                return {
                    command: r,
                    handled: !0,
                    result: s(o, c)
                }
            } catch (e) {
                return i.warn("Exception thrown from chat command handler", {
                    command: n[1],
                    err: e
                }), {
                    handled: !1
                }
            }
        };
        var a = n("6sO2"),
            i = a.n.logger.withCategory("chat-commands"),
            r = "/unraid",
            s = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i,
            o = /^(\S+)?\s+(.+)?$/,
            l = /^[/.]([a-z0-9]+)(.+)?$/i
    },
    O9wU: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var a;
        ! function(e) {
            e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.viewer_list = 2] = "viewer_list", e[e.test = 3] = "test"
        }(a || (a = {}))
    },
    OLKT: function(e, t) {},
    OcEY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "bitsOffersFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsOffer"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bits"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "InlineFragment",
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BitsBundleOffer"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "price"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "discount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPromo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "includesVAT"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "promotion"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 145
            }
        };
        n.loc.source = {
            body: "fragment bitsOffersFragment on BitsOffer {\nid\ntype\nbits\n... on BitsBundleOffer {\nprice\ndiscount\nisPromo\nurl\nincludesVAT\npromotion {\nid\ntype\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ojfd: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelBanner"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 82
            }
        };
        n.loc.source = {
            body: "query ChannelBanner($login: String!) {\nuser(login: $login) {\nid\nbannerImageURL\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ouuk: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e || (e = navigator.userAgent), !!a.exec(e)
        };
        var a = /\scurse\/\d/
    },
    PPK2: function(e, t) {},
    PqoY: function(e, t) {},
    QAcM: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return p
        }), n.d(t, "c", function() {
            return f
        });
        var a, i = n("TToO"),
            r = n("U7vG"),
            s = (n.n(r), n("6sO2")),
            o = n("+Znq"),
            l = n("CSlQ"),
            c = n("Odds");
        ! function(e) {
            e[e.All = 0] = "All", e[e.Month = 1] = "Month", e[e.Week = 2] = "Week", e[e.Day = 3] = "Day", e[e.Trending = 4] = "Trending"
        }(a || (a = {}));
        var d, u, p = (d = {}, d[a.All] = "ALL_TIME", d[a.Day] = "LAST_DAY", d[a.Week] = "LAST_WEEK", d[a.Month] = "LAST_MONTH", d[a.Trending] = "TRENDING", d),
            m = (u = {}, u[a.Trending] = "", u[a.Day] = Object(s.d)("24h", "TopClipsTimeFilter"), u[a.Week] = Object(s.d)("7d", "TopClipsTimeFilter"), u[a.Month] = Object(s.d)("30d", "TopClipsTimeFilter"), u[a.All] = Object(s.d)("all", "TopClipsTimeFilter"), u),
            h = [a.Trending, a.Day, a.Week, a.Month, a.All],
            g = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderFilterButton = function(e) {
                        return r.createElement(c.T, {
                            key: e,
                            onClick: n.updateFilterFuncs[e],
                            "data-a-target": "time-filter-option-" + m[e],
                            selected: e === n.props.timeFilterValue
                        }, r.createElement(c.V, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, n.renderFilterText(e)))
                    }, n.state = {
                        isShowingMenu: !1
                    }, n.updateFilterFuncs = h.reduce(function(e, t) {
                        return e[t] = function() {
                            n.props.updateTimeFilter(t), n.setState({
                                isShowingMenu: !1
                            })
                        }, e
                    }, {}), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return r.createElement(c.V, {
                        className: "top-clips-time-filter"
                    }, r.createElement(o.a, null, r.createElement(c.u, {
                        dropdown: !0,
                        type: c.z.Hollow,
                        "data-a-target": "time-filter-selection"
                    }, this.renderFilterText(this.props.timeFilterValue)), r.createElement(c.p, {
                        direction: c.q.BottomLeft,
                        noTail: !0
                    }, r.createElement(c.V, {
                        padding: {
                            y: .5
                        }
                    }, h.map(this.renderFilterButton)))))
                }, t.prototype.renderFilterText = function(e) {
                    return e === a.Trending ? r.createElement("span", null, Object(s.d)("Trending", "TopClipsTimeFilter")) : r.createElement(c.V, {
                        display: c.H.Flex
                    }, Object(s.d)("Top", "TopClipsTimeFilter"), r.createElement(c.V, {
                        margin: {
                            left: .5
                        }
                    }, r.createElement(c._1, {
                        type: c._2.Brand,
                        label: m[e]
                    })))
                }, t
            }(r.Component),
            f = Object(l.c)("TopClipsTimeFilter")(g)
    },
    QCOJ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var a = {
            Embed: "embed",
            Web: "web"
        }
    },
    QFW6: function(e, t, n) {
        "use strict";
        var a = n("6sO2"),
            i = n("vH/s"),
            r = "public";
        n.d(t, "a", function() {
            return s
        }), n.d(t, "b", function() {
            return o
        });
        var s = function(e) {
                return {
                    channel: e.channelLogin,
                    is_host_mode: e.isHostMode,
                    is_using_web_sockets: !0,
                    room_type: r
                }
            },
            o = function(e) {
                a.m.track(i.SpadeEventType.ChatRoomJoined, s(e))
            }
    },
    QMHY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatRoom_AutohostPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "query ChatRoom_AutohostPrompt($login: String!) {\ncurrentUser {\nid\n}\nuser(login: $login) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QNxL: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SharePurchaseTokenInChat"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SharePurchaseTokenInChatInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sharePurchaseTokenInChat"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation SharePurchaseTokenInChat($input:SharePurchaseTokenInChatInput!) {\nsharePurchaseTokenInChat(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QRuM: function(e, t, n) {
        "use strict";
        var a, i = n("TToO"),
            r = n("U7vG"),
            s = n("6sO2");
        ! function(e) {
            e.On = "on", e.Off = "off", e.StaffOnly = "staff"
        }(a || (a = {}));
        var o = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = s.b.get(this.props.name, a.Off);
                    return e === a.On || e === a.StaffOnly && this.props.isStaff ? r.Children.only(this.props.children) : null
                }, t
            }(r.Component),
            l = o;
        n.d(t, "a", function() {
            return a
        }), n.d(t, !1, function() {
            return o
        }), n.d(t, "b", function() {
            return l
        })
    },
    "QU+n": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "badge"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Badge"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "version"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "title"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image1x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "NORMAL"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image2x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "DOUBLE"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image4x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "QUADRUPLE"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clickAction"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clickURL"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 170
            }
        };
        n.loc.source = {
            body: "fragment badge on Badge {\nid\nsetID\nversion\ntitle\nimage1x: imageURL(size: NORMAL)\nimage2x: imageURL(size: DOUBLE)\nimage4x: imageURL(size: QUADRUPLE)\nclickAction\nclickURL\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QsiC: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PinnedCheer_Cheers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "top"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isTopEnabled"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 275
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery PinnedCheer_Cheers($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\ntop {\n...chatMessage\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\nsettings {\nisRecentEnabled\nisTopEnabled\nrecentTimeoutMs\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("Mful").definitions)), e.exports = a
    },
    RbGx: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var a = n("U7vG"),
            i = (n.n(a), n("mbxv")),
            r = function(e) {
                var t = Object.keys(e.badgesToRender).map(function(t) {
                    var n = e.badgesToRender[t],
                        r = e.badgeSets.getBadge(t, n);
                    return null === r ? null : a.createElement(i.a, {
                        key: r.setID + "/" + r.version,
                        badge: r
                    })
                }).filter(function(e) {
                    return null !== e
                });
                return a.createElement("span", null, t)
            }
    },
    RkXA: function(e, t) {},
    S20p: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ShareResub_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "resubNotification"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "months"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "query Chat_ShareResub_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nself {\nresubNotification {\nid\nmonths\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    SI0h: function(e, t, n) {
        "use strict";
        var a = n("TPVZ");
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return a.b
        }), n.d(t, "a", function() {
            return a.a
        })
    },
    TPVZ: function(e, t, n) {
        "use strict";
        var a, i = n("TToO"),
            r = n("HW6M"),
            s = n("U7vG"),
            o = n("F8kA"),
            l = n("6sO2"),
            c = n("hdYS"),
            d = n("DtWM"),
            u = n("+Znq"),
            p = n("7vx8"),
            m = n("czpb"),
            h = n("RH2O"),
            g = n("Aj/L"),
            f = n("N221"),
            v = n("jF7o"),
            b = n("iMOk"),
            k = n("WVx7"),
            y = n("ySfT"),
            C = n("ZJYd"),
            S = n("/LBW"),
            _ = n("Odds"),
            E = (n("fHoP"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handlePromoBuy = function(e) {
                        var n = Object(C.b)({
                            trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                            channelID: t.props.channelID,
                            purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                            bitsAmount: e.currentTarget.dataset.bitsAmount,
                            location: S.b.GetBitsButton
                        });
                        n && t.props.onPromoBuyClose(n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = s.createElement(_.V, null, s.createElement(_.V, {
                        padding: {
                            x: 5,
                            y: 2
                        },
                        textAlign: _._24.Center
                    }, s.createElement(_._23, {
                        type: _._28.H4,
                        bold: !0
                    }, Object(l.d)("Cheer Bits for your Favorite Streamer!", "Bits--FirstTimeUserPrompt"))), s.createElement(_.V, {
                        padding: {
                            x: 2,
                            bottom: 1
                        }
                    }, s.createElement(_._23, {
                        type: _._28.Span,
                        color: _.F.Alt
                    }, Object(l.d)("Bits are fun, animated emotes. Cheering Bits celebrates moments you love with the community right in chat and similar to subscribing, helps support Partners and Affiliates.", "Bits--FirstTimeUserPrompt"), s.createElement(_.Q, {
                        margin: {
                            left: .5
                        }
                    }, s.createElement("a", {
                        onClick: this.props.toggleShowTutorial
                    }, Object(l.d)("How do I cheer?", "Bits--FirstTimeUserPrompt"))))), s.createElement(_.V, {
                        padding: {
                            bottom: 2
                        },
                        textAlign: _._24.Center
                    }, s.createElement(_.Q, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(_._23, {
                        type: _._28.H6,
                        bold: !0,
                        className: "bits-first-time-user-prompt__promo-header"
                    }, Object(l.d)("First Time Purchaser Discount Pack!", "Bits--FirstTimeUserPrompt"))), s.createElement(_.u, {
                        onClick: this.handlePromoBuy,
                        "data-purchase-url": this.props.promo.url,
                        "data-bits-amount": this.props.promo.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.promo.bits
                    }, Object(l.d)("{price} For {amount} Bits", {
                        price: this.props.promo.price,
                        amount: this.props.promo.bits
                    }, "Bits--FirstTimeUserPrompt"))));
                    return this.props.isShowingTutorial ? s.createElement(_.V, {
                        className: "bits-first-time-user-prompt",
                        fullWidth: !0
                    }, s.createElement(_.V, {
                        className: "bits-first-time-user-prompt__tutorial-back-button"
                    }, s.createElement(_.u, {
                        onClick: this.props.toggleShowTutorial,
                        type: _.z.Text
                    }, s.createElement(_._10, {
                        asset: _._11.Play,
                        height: 8
                    }), " ", Object(l.d)("Back", "Bits--FirstTimeUserPrompt"))), s.createElement(_.V, {
                        textAlign: _._24.Center,
                        padding: {
                            x: 2,
                            bottom: 2,
                            top: 5
                        },
                        fullHeight: !0
                    }, s.createElement(_.e, {
                        type: _.i.SlideInLeft,
                        duration: _.g.Long,
                        enabled: !0
                    }, s.createElement(y.a, null)))) : this.props.animateFirstTimeUserIntro ? s.createElement(_.Q, {
                        className: "bits-first-time-user-prompt"
                    }, s.createElement(_.e, {
                        type: _.i.SlideInRight,
                        duration: _.g.Long,
                        enabled: this.props.animateFirstTimeUserIntro
                    }, e)) : s.createElement(_.V, {
                        className: "bits-first-time-user-prompt"
                    }, e)
                }, t
            }(s.Component)),
            w = n("jxGs"),
            N = n("bkpq"),
            D = n("CSlQ"),
            O = n("annQ"),
            T = (n("lGVF"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hideFirstTimeUserIntro: !1
                    }, t.trackBitsCardInteraction = function(e, n) {
                        var a = {
                            actionName: e,
                            emoteType: n && n.emoteType,
                            emoteLevel: n && n.emoteLevel,
                            location: S.b.GetBitsButton,
                            displayedBalance: t.props.bitsBalance || 0
                        };
                        Object(S.h)(a)
                    }, t.onClose = function() {}, t.onPromoBuyClose = function(e) {
                        Object(v.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.loading) return s.createElement(_._19, {
                        "data-a-target": "get-bits-button-content-loading",
                        display: _.H.Flex,
                        flexDirection: _.J.Column,
                        alignItems: _.c.Center,
                        justifyContent: _.U.Center,
                        textAlign: _._24.Center,
                        padding: {
                            y: 5
                        }
                    }, s.createElement(_.Z, {
                        delay: 0
                    }), s.createElement(_.V, {
                        padding: {
                            top: 2
                        }
                    }, s.createElement(_._23, {
                        italic: !0
                    }, Object(l.d)("Fetching bits", "Bits--GetBitsButtonContent"))));
                    var e = null;
                    if (this.props.bitsOffers) {
                        var t = this.props.bitsOffers.find(function(e) {
                            return Object(C.c)(e)
                        });
                        t && t.type === w.b && this.props.channelID && !this.state.hideFirstTimeUserIntro && (e = s.createElement(E, {
                            promo: t,
                            animateFirstTimeUserIntro: this.props.animateFirstTimeUserIntro,
                            isShowingTutorial: this.props.isShowingTutorial,
                            toggleShowTutorial: this.props.toggleShowTutorial,
                            trackBitsCardInteraction: this.trackBitsCardInteraction,
                            channelID: this.props.channelID,
                            onPromoBuyClose: this.onPromoBuyClose
                        }))
                    }
                    var n = null;
                    void 0 !== this.props.bitsBalance && this.props.bitsConfig ? n = s.createElement(_._19, {
                        borderBottom: !0,
                        textAlign: _._24.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, s.createElement(_._23, {
                        type: _._28.Span
                    }, Object(l.d)("You have {bitsBalance}", {
                        bitsBalance: s.createElement(b.a, {
                            withImage: !0,
                            withText: !0,
                            count: this.props.bitsBalance,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))) : void 0 === this.props.bitsBalance && this.props.bitsConfig && (n = s.createElement(_._19, {
                        borderBottom: !0,
                        textAlign: _._24.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, s.createElement(_._23, {
                        type: _._28.Span
                    }, Object(l.d)("{bitsGem} Log in to see your Bits balance", {
                        bitsGem: s.createElement(b.a, {
                            count: 100,
                            withImage: !0,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))));
                    var a = null;
                    return this.props.bitsConfig && this.props.channelLogin && (a = s.createElement(k.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.onClose,
                        onClose: this.onClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        location: S.b.GetBitsButton,
                        hidePromos: !0,
                        hideWateb: !0,
                        fullsize: !0
                    })), s.createElement(f.b, {
                        className: "get-bits-button-content"
                    }, s.createElement(_.V, null, n, e, a))
                }, t = i.__decorate([Object(D.c)("GetBitsButtonContent"), Object(p.a)(O, {
                    name: "data",
                    props: function(e) {
                        var t, n;
                        e.data && e.data.user && e.data.user.cheer && (t = Object(N.a)(e.data.user.cheer.emotes), n = e.data.user.id);
                        var a, i;
                        return e.data && e.data.currentUser ? (i = e.data.currentUser.bitsBalance, a = e.data.currentUser.bitsOffers) : e.data && e.data.bitsOffers && (a = e.data.bitsOffers), {
                            loading: e.data && e.data.loading,
                            bitsOffers: a,
                            bitsBalance: i,
                            bitsConfig: t,
                            channelID: n
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(s.Component)),
            I = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isShowingTutorial: !1,
                        animateFirstTimeUserIntro: !1
                    }, t.toggleBalloon = function(e) {
                        t.setState({
                            animateFirstTimeUserIntro: !1
                        }), e || Object(S.h)({
                            actionName: S.a.BuyMain,
                            location: S.b.GetBitsButton,
                            displayedBalance: 0
                        })
                    }, t.toggleShowTutorial = function() {
                        t.setState({
                            isShowingTutorial: !t.state.isShowingTutorial,
                            animateFirstTimeUserIntro: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.channelLogin && (e = s.createElement(T, {
                        isLoggedIn: this.props.isLoggedIn,
                        channelLogin: this.props.channelLogin,
                        toggleShowTutorial: this.toggleShowTutorial,
                        isShowingTutorial: this.state.isShowingTutorial,
                        animateFirstTimeUserIntro: this.state.animateFirstTimeUserIntro
                    })), s.createElement(u.a, {
                        onToggle: this.toggleBalloon
                    }, s.createElement(_.u, {
                        dropdown: !0
                    }, Object(l.d)("Get Bits", "Bits--GetBitsButton")), s.createElement(_.p, {
                        direction: _.q.BottomRight,
                        size: _.r.Large
                    }, e))
                }, t = i.__decorate([Object(D.c)("GetBitsButton")], t)
            }(s.Component),
            L = Object(h.a)(function(e) {
                return {
                    isLoggedIn: Object(g.d)(e)
                }
            })(I),
            M = n("E9Qg"),
            x = (n("4Jix"), n("Ojfd")),
            F = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t, n = {
                            "channel-banner--open": !this.props.collapsed
                        },
                        a = this.props.data;
                    return a && a.loading || !this.props.firstPageLoaded ? e = s.createElement(_._3, {
                        height: 380,
                        "data-test-selector": "channel-banner__placeholder"
                    }) : (a && a.user && a.user.bannerImageURL ? t = {
                        backgroundImage: "url(" + a.user.bannerImageURL + ")"
                    } : (n["channel-banner--default"] = !0, t = {
                        backgroundImage: "url(" + M + ")"
                    }), e = s.createElement("div", {
                        className: "channel-banner__image",
                        style: t
                    })), s.createElement("div", {
                        className: r("channel-banner", n),
                        "data-test-selector": "channel-banner",
                        onTransitionEnd: this.props.onTransitionEnd
                    }, s.createElement(_.Q, {
                        fullWidth: !0
                    }, e))
                }, t
            }(s.Component),
            j = Object(p.a)(x, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.channelLogin || !e.firstPageLoaded
                }
            })(F),
            A = Object(h.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(j),
            B = n("2KeS"),
            R = n("V5M+"),
            U = n("J8WN"),
            V = n("+8VM"),
            P = n("HZww"),
            H = (n("weaG"), function(e) {
                var t = {
                    "default-avatar__selected": e.selected,
                    "default-avatar": !0
                };
                return s.createElement(_.V, {
                    padding: {
                        bottom: 1
                    }
                }, s.createElement("div", {
                    onClick: function() {
                        e.onSelect(e.index)
                    },
                    "aria-label": Object(l.d)("Click to select Default Avatar Number {index, number}", {
                        index: e.index
                    }, "Default Avatar")
                }, s.createElement(_._19, {
                    fullHeight: !0,
                    fullWidth: !0,
                    position: _._4.Relative,
                    className: r(t)
                }, s.createElement("img", {
                    alt: Object(l.d)("Default Avatar Number {index, number}", {
                        index: e.index
                    }, "Default Avatar"),
                    src: e.imageSrc
                }))))
            });
        ! function(e) {
            e.ProfileImage = "profile_image", e.ProfileBanner = "profile_banner", e.ChannelOfflineImage = "channel_offline_image"
        }(a || (a = {}));
        var W;
        ! function(e) {
            e.Success = "SUCCESS", e.NonImage = "IS_IMAGE_VALIDATION_FAILED", e.WrongFormat = "IMAGE_FORMAT_VALIDATION_FAILED", e.BadSize = "FILE_SIZE_VALIDATION_FAILED"
        }(W || (W = {}));
        var q;
        ! function(e) {
            e[e.Success = 0] = "Success", e[e.UnexpectedError = 1] = "UnexpectedError", e[e.BadSizeError = 2] = "BadSizeError", e[e.NonImageError = 3] = "NonImageError", e[e.WrongFormatError = 4] = "WrongFormatError", e[e.TimeoutError = 5] = "TimeoutError", e[e.Uploading = 6] = "Uploading", e[e.ImageNotSelected = 7] = "ImageNotSelected"
        }(q || (q = {}));
        n("AL3x");
        var G = n("nmDn"),
            z = [{
                id: "profile_image_001",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/bb97f7e6-f11a-4194-9708-52bf5a5125e8-profile_image-300x300.jpg"
            }, {
                id: "profile_image_002",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/27103734-3cda-44d6-a384-f2ab71e4bb85-profile_image-300x300.jpg"
            }, {
                id: "profile_image_003",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/49988c7b-57bc-4dee-bd4f-6df4ad215d3a-profile_image-300x300.jpg"
            }, {
                id: "profile_image_004",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/0ecbb6c3-fecb-4016-8115-aa467b7c36ed-profile_image-300x300.jpg"
            }, {
                id: "profile_image_005",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/cd618d3e-f14d-4960-b7cf-094231b04735-profile_image-300x300.jpg"
            }, {
                id: "profile_image_006",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/4cbf10f1-bb9f-4f57-90e1-15bf06cfe6f5-profile_image-300x300.jpg"
            }, {
                id: "profile_image_007",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/b83b1794-7df9-4878-916c-88c2ad2e4f9f-profile_image-300x300.jpg"
            }],
            Q = ["image/*"],
            J = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        statusMessage: null,
                        imagePreviewURL: "",
                        profileUpdated: !1,
                        currentImageHasTallAspectRatio: !1,
                        imageFormat: ""
                    }, t.currentImage = null, t.logger = l.i.withCategory("ProfileImagePicker"), t.onImageInputChange = function(e) {
                        var n;
                        if (null !== e) {
                            var a = function(e) {
                                    var t = "";
                                    if (e && e.name) {
                                        var n = e.name;
                                        t = n.slice((Math.max(0, n.lastIndexOf(".")) || 1 / 0) + 1)
                                    }
                                    return "" === t && (t = "png"), t
                                }(n = e[0]),
                                i = (n.size / 1024 / 1024).toFixed(4);
                            parseInt(i, 10) > 10 ? t.setState({
                                statusMessage: q.BadSizeError
                            }) : (t.setState({
                                selectedImageIndex: void 0,
                                imagePreviewURL: "",
                                imageFormat: "",
                                currentImageHasTallAspectRatio: !1
                            }), function(e, t, n) {
                                var a = new FileReader;
                                a.onloadend = function() {
                                    n && n(a.result)
                                }, a.readAsDataURL(e);
                                var i = new FileReader;
                                i.onloadend = function() {
                                    t(i.result)
                                }, i.readAsArrayBuffer(e)
                            }(n, function(e) {
                                t.currentImage = e, t.setState({
                                    statusMessage: null
                                })
                            }, function(e) {
                                var n = new Image,
                                    i = !1;
                                n.onload = function() {
                                    n.width < n.height && (i = !0), t.setState({
                                        currentImageHasTallAspectRatio: i
                                    })
                                }, n.src = e, t.setState({
                                    imagePreviewURL: e,
                                    imageFormat: a
                                })
                            }))
                        } else t.setState({
                            statusMessage: q.ImageNotSelected
                        })
                    }, t.onUpdateButtonClick = function(e) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, n, r, s, o = this;
                            return i.__generator(this, function(c) {
                                switch (c.label) {
                                    case 0:
                                        if (e.preventDefault(), void 0 !== this.state.selectedImageIndex) return this.setDefaultAvatar(), [2];
                                        if (!this.currentImage) return this.setState({
                                            statusMessage: q.ImageNotSelected
                                        }), [2];
                                        this.setState({
                                            statusMessage: q.Uploading
                                        }), c.label = 1;
                                    case 1:
                                        return c.trys.push([1, 3, , 4]), [4, function(e, t, n, a) {
                                            return i.__awaiter(this, void 0, void 0, function() {
                                                var r;
                                                return i.__generator(this, function(i) {
                                                    switch (i.label) {
                                                        case 0:
                                                            return [4, fetch(l.a.krakenEndpoint + "/users/" + e + "/upload_image?client_id=" + l.a.authClientID + "&api_version=" + l.a.defaultAPIVersion + "&image_type=" + n + "&format=" + a, {
                                                                method: "POST",
                                                                headers: {
                                                                    Authorization: "OAuth " + t
                                                                }
                                                            })];
                                                        case 1:
                                                            return r = i.sent(), [2, r.json()]
                                                    }
                                                })
                                            })
                                        }(this.props.userID, this.props.authToken, a.ProfileImage, this.state.imageFormat)];
                                    case 2:
                                        return t = c.sent(), n = t.upload_url, r = t.upload_id, [3, 4];
                                    case 3:
                                        return s = c.sent(), this.logger.error(s, "Request for upload ID failed to get expected response from server."), this.setState({
                                            statusMessage: q.UnexpectedError
                                        }), [2];
                                    case 4:
                                        return this.unsubscribe = l.j.subscribe({
                                            topic: Object(P.c)(this.props.userID),
                                            success: function() {
                                                try {
                                                    ! function(e, t) {
                                                        if (!t) throw new Error("Attempted to upload an empty file object.");
                                                        var n = decodeURI(e);
                                                        fetch(n, {
                                                            method: "PUT",
                                                            body: new Blob([t])
                                                        })
                                                    }(n, o.currentImage)
                                                } catch (e) {
                                                    o.logger.error(e, "Profile Image upload failed."), o.unsubscribe(), o.setState({
                                                        statusMessage: q.UnexpectedError,
                                                        selectedImageIndex: void 0,
                                                        imagePreviewURL: "",
                                                        imageFormat: "",
                                                        currentImageHasTallAspectRatio: !1
                                                    })
                                                }
                                                o.timeoutHandle = setTimeout(function() {
                                                    return o.handlePubSubTimeout()
                                                }, 1e4)
                                            },
                                            failure: function() {
                                                o.setState({
                                                    statusMessage: q.UnexpectedError,
                                                    selectedImageIndex: void 0,
                                                    imagePreviewURL: "",
                                                    currentImageHasTallAspectRatio: !1
                                                })
                                            },
                                            onMessage: function(e) {
                                                if (e.upload_id === r) {
                                                    clearTimeout(o.timeoutHandle);
                                                    var t = null;
                                                    t = e.status === W.Success ? q.Success : e.status === W.BadSize ? q.BadSizeError : e.status === W.NonImage ? q.NonImageError : e.status === W.WrongFormat ? q.WrongFormatError : q.UnexpectedError, o.unsubscribe && o.unsubscribe(), o.setState({
                                                        statusMessage: t
                                                    }), o.state.statusMessage === q.Success ? o.setState({
                                                        profileUpdated: !0
                                                    }) : (o.setState({
                                                        profileUpdated: !1,
                                                        imagePreviewURL: "",
                                                        imageFormat: ""
                                                    }), o.currentImage = null)
                                                }
                                            }
                                        }), [2]
                                }
                            })
                        })
                    }, t.onDefaultImageSelected = function(e) {
                        t.setState({
                            selectedImageIndex: e,
                            imagePreviewURL: z[e].uri
                        })
                    }, t.handlePubSubTimeout = function() {
                        t.unsubscribe(), t.setState({
                            statusMessage: q.TimeoutError
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    void 0 !== this.unsubscribe && this.unsubscribe(), this.timeoutHandle && clearTimeout(this.timeoutHandle)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this;
                    this.state.profileUpdated && setTimeout(function() {
                        e.props.data && e.props.data.refetch(), e.props.closeModal()
                    }, 1e3)
                }, t.prototype.render = function() {
                    var e = this,
                        t = z.map(function(t, n) {
                            return s.createElement(H, {
                                key: t.id,
                                imageSrc: t.uri,
                                index: n,
                                onSelect: e.onDefaultImageSelected,
                                selected: e.state.selectedImageIndex === n
                            })
                        }),
                        n = null;
                    if ("" !== this.state.imagePreviewURL) {
                        var a = {
                            "profile-edit__image-preview": !0,
                            "profile-edit__image-preview-tall": this.state.currentImageHasTallAspectRatio
                        };
                        n = s.createElement(_.V, {
                            className: r(a),
                            "data-test-selector": "preview-image",
                            position: _._4.Relative
                        }, s.createElement("img", {
                            src: "" + this.state.imagePreviewURL
                        }))
                    }
                    var i = null;
                    "" === this.state.imagePreviewURL && (i = s.createElement(_.V, {
                        className: "profile-edit__upload-info"
                    }, s.createElement(_.V, null, s.createElement(_._10, {
                        asset: _._11.Plus,
                        type: _._12.Alt2,
                        height: 20,
                        width: 20
                    })), s.createElement(_._23, {
                        type: _._28.H3,
                        color: _.F.Alt2,
                        fontSize: _.L.Size4
                    }, Object(l.d)("Upload a Photo", "Profile Edit"))));
                    var o = null;
                    this.props.showCloser && (o = s.createElement(V.a, null));
                    var c = null;
                    if (null !== this.state.statusMessage) {
                        var d = function(e) {
                                switch (e) {
                                    case q.Success:
                                        return {
                                            message: Object(l.d)("Success!", "Profile Edit"),
                                            type: _._2.Success
                                        };
                                    case q.UnexpectedError:
                                        return {
                                            message: Object(l.d)("Unexpected error, please try again.", "Profile Edit"),
                                            type: _._2.Alert
                                        };
                                    case q.BadSizeError:
                                        return {
                                            message: Object(l.d)("Image might exceed 10MB.", "Profile Edit"),
                                            type: _._2.Alert
                                        };
                                    case q.NonImageError:
                                        return {
                                            message: Object(l.d)("You must upload an image.", "Profile Edit"),
                                            type: _._2.Alert
                                        };
                                    case q.WrongFormatError:
                                        return {
                                            message: Object(l.d)("You must select a valid image type.", "Profile Edit"),
                                            type: _._2.Alert
                                        };
                                    case q.TimeoutError:
                                        return {
                                            message: Object(l.d)("Upload timed-out. Please try again.", "Profile Edit"),
                                            type: _._2.Alert
                                        };
                                    case q.Uploading:
                                        return {
                                            message: Object(l.d)("Uploading....", "Profile Edit"),
                                            type: _._2.Brand
                                        };
                                    case q.ImageNotSelected:
                                        return {
                                            message: Object(l.d)("Select a image first.", "Profile Edit"),
                                            type: _._2.Alert
                                        };
                                    default:
                                        return {
                                            message: Object(l.d)("Please try again.", "Profile Edit"),
                                            type: _._2.Alert
                                        }
                                }
                            }(this.state.statusMessage),
                            u = d.message,
                            p = d.type;
                        c = s.createElement(_._1, {
                            label: u,
                            type: p
                        })
                    }
                    var m = this.props.login;
                    return this.props.displayName && (m = this.props.displayName), s.createElement(_.V, {
                        className: "profile-edit",
                        position: _._4.Relative,
                        fullHeight: !0
                    }, s.createElement(_._19, {
                        className: "profile-edit__background-container",
                        background: _.m.Base,
                        fullWidth: !0
                    }, s.createElement(_.V, {
                        padding: 2,
                        display: _.H.InlineBlock,
                        position: _._4.Relative,
                        textAlign: _._24.Center,
                        fullWidth: !0
                    }, s.createElement(_._19, {
                        textAlign: _._24.Left,
                        borderBottom: !0,
                        padding: {
                            bottom: 1
                        },
                        margin: {
                            bottom: 2
                        }
                    }, s.createElement(_._23, {
                        type: _._28.H3,
                        color: _.F.Alt2,
                        fontSize: _.L.Size4
                    }, Object(l.d)("Edit Profile Picture for {userName}", {
                        userName: m
                    }, "Profile Edit"), " ")), s.createElement(_.V, {
                        className: "profile-edit__upload-container",
                        display: _.H.InlineBlock,
                        position: _._4.Relative,
                        textAlign: _._24.Center,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(_.V, {
                        className: "profile-edit__upload",
                        display: _.H.InlineBlock,
                        position: _._4.Relative,
                        textAlign: _._24.Center
                    }, s.createElement(U.a, {
                        allowedFileTypes: Q,
                        onFilesSubmitted: this.onImageInputChange
                    }, i), n)), s.createElement(_._19, {
                        "data-test-selector": "status-message",
                        fontSize: _.L.Size4,
                        position: _._4.Relative,
                        textAlign: _._24.Center,
                        className: "profile-edit__status-message"
                    }, c), s.createElement(_._19, {
                        borderBottom: !0,
                        padding: {
                            bottom: .5
                        },
                        margin: {
                            bottom: 2
                        }
                    }, s.createElement(_.V, {
                        textAlign: _._24.Left,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(_._23, {
                        type: _._28.H3,
                        color: _.F.Alt2,
                        fontSize: _.L.Size5
                    }, Object(l.d)("Or select one of these", "Profile Edit"))), s.createElement(_._34, {
                        childWidth: _._35.ExtraSmall,
                        gutterSize: _._36.ExtraSmall,
                        placeholderItems: 3
                    }, t)), s.createElement(_.V, {
                        display: _.H.Flex,
                        justifyContent: _.U.Center
                    }, s.createElement(_.u, {
                        "data-test-selector": "update-button",
                        onClick: this.onUpdateButtonClick,
                        size: _.x.Large
                    }, Object(l.d)("Update", "Profile Edit"))))), o)
                }, t.prototype.setDefaultAvatar = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t, n;
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    this.setState({
                                        statusMessage: q.Uploading
                                    }), e = q.UnexpectedError, a.label = 1;
                                case 1:
                                    return a.trys.push([1, 3, , 4]), [4, function(e, t, n) {
                                        if (void 0 === n) throw new Error("No default avatar selected.");
                                        return fetch(l.a.krakenEndpoint + "/users/" + e + "/default_images?client_id=" + l.a.authClientID + "&api_version=" + l.a.defaultAPIVersion, {
                                            method: "PUT",
                                            headers: {
                                                Authorization: "OAuth " + t,
                                                "Content-Type": "application/json",
                                                Accept: "application/json"
                                            },
                                            body: JSON.stringify({
                                                default_profile_image: z[n].id
                                            })
                                        })
                                    }(this.props.userID, this.props.authToken, this.state.selectedImageIndex)];
                                case 2:
                                    return 204 === (t = a.sent()).status || 200 === t.status ? e = q.Success : this.logger.error(new Error("Default Avatar PUT failed. Fetch returned non-200 status: " + t.status), "Default Avatar PUT failed. Fetch returned non-200 status: " + t.status), [3, 4];
                                case 3:
                                    return n = a.sent(), this.logger.error(n, "Default Avatar PUT failed."), [3, 4];
                                case 4:
                                    return this.setState({
                                        statusMessage: e,
                                        profileUpdated: e === q.Success
                                    }), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(p.a)(G, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.login
                            }
                        }
                    }
                })], t)
            }(s.Component),
            $ = Object(D.c)("Profile Edit")(J),
            K = Object(h.a)(function(e) {
                return {
                    authToken: Object(g.a)(e)
                }
            }, function(e, t) {
                return Object(B.bindActionCreators)({
                    closeModal: function() {
                        return t.successCallback && t.successCallback(), Object(R.c)()
                    }
                }, e)
            })($),
            Y = (n("WClm"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.openModal = function(e) {
                        e.stopPropagation(), t.props.showModal(K, {
                            userID: t.props.userID,
                            login: t.props.login,
                            displayName: t.props.displayName,
                            showCloser: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return s.createElement(_.V, {
                        className: "edit-profile-overlay",
                        display: _.H.Flex,
                        justifyContent: _.U.Center,
                        alignContent: _.b.Center,
                        fullHeight: !0,
                        fullWidth: !0
                    }, s.createElement(_.v, {
                        overlay: !0,
                        ariaLabel: Object(l.d)("Edit Profile", "ChannelHeader"),
                        icon: _._11.Edit,
                        onClick: this.openModal
                    }))
                }, t = i.__decorate([Object(D.c)("EditProfileOverlay")], t)
            }(s.Component)),
            Z = Object(h.a)(null, function(e) {
                return Object(B.bindActionCreators)({
                    showModal: R.d
                }, e)
            })(Y),
            X = n("70dR"),
            ee = (n("z4Db"), n("kOMe"));
        n.d(t, "b", function() {
            return te
        }), n.d(t, "a", function() {
            return oe
        });
        var te, ne = "channel-header__edit-profile-overlay",
            ae = "user-channel-header-item",
            ie = "channel-header__verified-badge",
            re = "channel-header__live-indicator",
            se = "channel-header__channel-link";
        ! function(e) {
            e[e.Channel = 1] = "Channel", e[e.Clips = 2] = "Clips", e[e.Collections = 3] = "Collections", e[e.Events = 4] = "Events", e[e.Success = 5] = "Success", e[e.Followers = 6] = "Followers", e[e.Following = 7] = "Following", e[e.Videos = 8] = "Videos"
        }(te || (te = {}));
        var oe = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    live: !1,
                    bannerHidden: !0,
                    bannerSlideIn: !1
                }, t.verifiedBadgeElement = s.createElement(_._31, {
                    label: Object(l.d)("Verified", "ChannelHeader"),
                    direction: _._33.Right
                }, s.createElement(_.V, {
                    className: "channel-header__verified",
                    "data-target": ie,
                    display: _.H.Flex,
                    alignItems: _.c.Center,
                    margin: {
                        left: 1
                    }
                }, s.createElement(_._10, {
                    asset: _._11.Verified
                }))), t.liveIndicatorElement = s.createElement(_.V, {
                    margin: {
                        left: 1
                    },
                    "data-target": re
                }, s.createElement(_._31, {
                    label: Object(l.d)("Live Now", "ChannelHeader"),
                    direction: _._33.Right
                }, s.createElement(_.X, {
                    pulse: !0
                }))), t.renderAvatarEditButton = function() {
                    if (!t.props.data) return null;
                    return t.props.data && t.props.data.currentUser && t.props.data.user && t.props.data.currentUser.roles && (t.props.data.currentUser.id === t.props.data.user.id || t.props.data.currentUser.roles.isStaff || t.props.data.currentUser.roles.isSiteAdmin) ? s.createElement(_._19, {
                        className: ne,
                        background: _.m.Overlay,
                        position: _._4.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        fullHeight: !0,
                        fullWidth: !0,
                        display: _.H.InlineFlex,
                        alignItems: _.c.Center,
                        justifyContent: _.U.Center
                    }, s.createElement(Z, {
                        userID: t.props.data.user.id,
                        login: t.props.data.user.login,
                        displayName: t.props.data.user.displayName
                    })) : null
                }, t.toggleChannelBanner = function() {
                    t.setState(function(e) {
                        var t = !e.bannerSlideIn;
                        return t ? {
                            bannerHidden: !e.bannerHidden,
                            bannerSlideIn: t
                        } : {
                            bannerSlideIn: t
                        }
                    })
                }, t.completedBannerAnimation = function() {
                    t.setState(function(e) {
                        if (!e.bannerSlideIn) return {
                            bannerHidden: !0
                        }
                    })
                }, t.onUpdateDebounce = function() {
                    if (!t.resizeAnimationFrame && t.channelHeader) {
                        var e = t.channelHeader.querySelector('[data-target="channel-header-left"]');
                        t.updateWidth(t.getWidth(e).width), t.resizeAnimationFrame = requestAnimationFrame(t.handleWindowResize)
                    }
                }, t.handleWindowResize = function() {
                    t.resizeAnimationFrame = null, t.getChannelHeaderSize()
                }, t.saveChannelHeaderRef = function(e) {
                    return t.channelHeader = e
                }, t
            }
            return i.__extends(t, e), t.prototype.componentWillMount = function() {
                this.updateLiveState(this.props)
            }, t.prototype.componentDidMount = function() {
                window.addEventListener("resize", this.onUpdateDebounce), !this.props.data || this.props.data.loading || this.props.data.error || this.getChannelHeaderSize(), this.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.updateLiveState(e)
            }, t.prototype.componentDidUpdate = function() {
                this.channelHeader && this.updateWidth(this.getWidth(this.channelHeader.querySelector('[data-target="channel-header-left"]')).width), this.onUpdateDebounce(), this.reportInteractive()
            }, t.prototype.componentWillUnmount = function() {
                this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.onUpdateDebounce), this.props.latencyTracking.reportInteractive()
            }, t.prototype.updateWidth = function(e) {
                var t = e !== this.width || this.width !== this.prevWidth;
                void 0 !== this.width && (this.prevWidth = this.width), this.width !== e && (this.width = e), t && (this.resizeAnimationFrame && (cancelAnimationFrame(this.resizeAnimationFrame), this.resizeAnimationFrame = null), this.onUpdateDebounce())
            }, t.prototype.render = function() {
                var e, t, n = 0,
                    a = 0,
                    i = 0,
                    p = l.a.defaultAvatarURL;
                this.props.data && this.props.data.user && !this.props.data.loading && !this.props.data.error && (n = this.props.data.user.videos.totalCount, a = this.props.data.user.followers.totalCount, i = this.props.data.user.follows.totalCount, p = this.props.data.user.profileImageURL, e = this.props.data.user.displayName, t = this.props.data.user.roles.isPartner);
                var m = this.state.live && !this.isActiveTab(te.Channel),
                    h = this.createChannelLinks(n, a, i),
                    g = {
                        "channel-header__user": !0,
                        "channel-header__user--selected": this.isActiveTab(te.Channel)
                    },
                    f = null;
                this.canRenderBitsButton() && (f = s.createElement(_.V, {
                    margin: {
                        left: 1
                    }
                }, s.createElement(L, {
                    channelLogin: this.props.channelLogin
                })));
                var v, b = s.createElement(_.V, {
                    display: _.H.Flex,
                    flexWrap: _.K.NoWrap,
                    alignItems: _.c.Center,
                    flexShrink: 0
                }, s.createElement(_.V, {
                    className: "channel-header__user-avatar channel-header__user-avatar--active",
                    margin: {
                        right: 1
                    },
                    display: _.H.Flex,
                    flexShrink: 0,
                    alignItems: _.c.Stretch
                }, s.createElement(_.V, {
                    position: _._4.Relative
                }, s.createElement(_.l, {
                    size: 36,
                    imageSrc: p,
                    imageAlt: e || ""
                }), this.renderAvatarEditButton())), e ? s.createElement(_._23, {
                    type: _._28.H5
                }, e) : s.createElement(_.V, {
                    alignItems: _.c.Center
                }, s.createElement(_._3, {
                    lineCount: 1,
                    width: 120
                })), m && this.liveIndicatorElement, t && this.verifiedBadgeElement);
                v = this.isActiveTab(te.Channel) ? s.createElement("div", {
                    className: "channel-header__banner-toggle",
                    onClick: this.toggleChannelBanner,
                    "data-target": se,
                    "data-a-target": ae
                }, b) : this.props.data && this.props.data.user && this.props.data.user.login ? s.createElement(o.a, {
                    to: "/" + this.props.data.user.login,
                    "data-target": se,
                    "data-a-target": ae
                }, b) : b;
                var k = this.state.bannerHidden ? _.H.HideAccessible : _.H.Block,
                    y = null;
                return this.isActiveTab(te.Channel) && (y = s.createElement(_.V, {
                    display: k
                }, s.createElement(A, {
                    channelLogin: this.props.channelLogin,
                    collapsed: !this.state.bannerSlideIn,
                    onTransitionEnd: this.completedBannerAnimation
                }))), s.createElement(_.V, {
                    className: "channel-header",
                    flexShrink: 0
                }, y, s.createElement(_.V, {
                    display: _.H.Flex,
                    justifyContent: _.U.Between,
                    flexWrap: _.K.NoWrap,
                    fullHeight: !0,
                    refDelegate: this.saveChannelHeaderRef,
                    margin: {
                        x: 3
                    }
                }, s.createElement(_.V, {
                    display: _.H.Flex,
                    alignItems: _.c.Stretch,
                    flexShrink: 0,
                    flexWrap: _.K.NoWrap,
                    "data-target": "channel-header-left"
                }, s.createElement(_.Q, {
                    className: r(g),
                    padding: {
                        y: .5,
                        right: 2
                    },
                    display: _.H.Flex,
                    flexWrap: _.K.NoWrap,
                    alignItems: _.c.Center,
                    flexShrink: 0
                }, v), this.renderTabs(h), s.createElement(_.V, {
                    className: "channel-header__item channel-header__item--no-underline",
                    padding: {
                        x: 1
                    },
                    flexShrink: 0,
                    alignSelf: _.d.Center,
                    "data-target": "channel-header-button"
                }, s.createElement(u.a, {
                    alwaysMountBalloonContent: !0
                }, s.createElement(_.v, {
                    icon: _._11.NavMore,
                    ariaLabel: Object(l.d)("More", "ChannelHeader")
                }), s.createElement(_.p, {
                    direction: _.q.Bottom,
                    noTail: !0
                }, s.createElement(_.V, {
                    padding: {
                        y: 1
                    }
                }, this.renderDropdown(h)))))), s.createElement(_.V, {
                    display: _.H.Flex,
                    flexWrap: _.K.NoWrap,
                    flexShrink: 0,
                    alignItems: _.c.Center,
                    className: "channel-header__right",
                    "data-target": "channel-header-right"
                }, s.createElement(_.V, {
                    className: "channel-header__follow-button",
                    display: _.H.Flex,
                    alignItems: _.c.Stretch,
                    margin: {
                        left: 1
                    }
                }, s.createElement(c.a, {
                    updateContainerWidth: this.onUpdateDebounce,
                    isHostedFollow: !1,
                    channelLogin: this.props.channelLogin
                })), s.createElement(_.V, {
                    margin: {
                        left: 1
                    }
                }, s.createElement(X.a, {
                    updateContainerWidth: this.onUpdateDebounce,
                    channelLogin: this.props.channelLogin
                })), f)), s.createElement(d.a, {
                    onResize: this.onUpdateDebounce
                }))
            }, t.prototype.updateLiveState = function(e) {
                !e.data || e.data.loading || e.data.error || this.setState({
                    live: !!e.data.user.stream && "" !== e.data.user.stream.id
                })
            }, t.prototype.generateUserLink = function(e, t) {
                void 0 === e && (e = ""), void 0 === t && (t = !1);
                var n = this.props.data && this.props.data.user && this.props.data.user.login;
                if (!n) return "#";
                var a = "/" + n + "/" + e;
                return t ? Object(m.a)(a) : a
            }, t.prototype.renderTabs = function(e) {
                var t = this;
                return e.map(function(e) {
                    var n = e.count ? s.createElement(_.V, {
                            className: "channel-header__item-count",
                            display: _.H.Flex,
                            margin: {
                                left: .5
                            }
                        }, s.createElement(_._23, {
                            type: _._28.Span,
                            fontSize: _.L.Size5
                        }, e.count)) : null,
                        a = t.generateUserLink(e.pathSuffix, e.isExternal),
                        r = {};
                    return e.isExternal && (r.target = Object(m.b)() ? "_blank" : ""), s.createElement(_.Q, {
                        key: "channel-header__item--" + e.label,
                        alignItems: _.c.Center,
                        flexShrink: 0
                    }, s.createElement(o.a, i.__assign({
                        className: "channel-header__item channel-header__item--hide " + (e.isSelected ? "channel-header__item--selected" : "")
                    }, r, {
                        to: a,
                        disabled: "#" === a,
                        "data-target": "channel-header-item",
                        "data-a-target": e.label.toLowerCase() + "-channel-header-item"
                    }), s.createElement(_.V, {
                        padding: {
                            x: 2,
                            y: .5
                        },
                        display: _.H.Flex
                    }, s.createElement(_._23, {
                        type: _._28.Span,
                        fontSize: _.L.Size5
                    }, e.label), n)))
                })
            }, t.prototype.renderDropdown = function(e) {
                var t = this;
                return e.map(function(e) {
                    var n = e.count ? s.createElement(_.V, {
                            className: "channel-header__item-count",
                            display: _.H.Flex,
                            margin: {
                                left: .5
                            }
                        }, s.createElement(_._23, {
                            type: _._28.Span
                        }, e.count)) : null,
                        a = t.generateUserLink(e.pathSuffix, e.isExternal),
                        r = {};
                    return e.isExternal && (r.targetBlank = !0), s.createElement(_.V, {
                        key: "channel-header__dropdown-item--" + e.label,
                        "data-target": "channel-header-dropdown-item"
                    }, s.createElement(_.T, i.__assign({
                        linkTo: a,
                        disabled: "#" === a
                    }, r), s.createElement(_.V, {
                        className: "channel-header__dropdown-hover-target",
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: _.H.Flex
                    }, s.createElement(_._23, {
                        type: _._28.Span
                    }, e.label), n)))
                })
            }, t.prototype.createChannelLinks = function(e, t, n) {
                return [{
                    label: Object(l.d)("Videos", "ChannelHeader"),
                    count: Object(l.e)(e),
                    pathSuffix: "videos/all",
                    isExternal: !1,
                    isSelected: this.isActiveTab(te.Videos)
                }, {
                    label: Object(l.d)("Clips", "ChannelHeader"),
                    pathSuffix: "clips",
                    isExternal: !1,
                    isSelected: this.isActiveTab(te.Clips)
                }, {
                    label: Object(l.d)("Collections", "ChannelHeader"),
                    pathSuffix: "collections",
                    isExternal: !1,
                    isSelected: this.isActiveTab(te.Collections)
                }, {
                    label: Object(l.d)("Events", "ChannelHeader"),
                    pathSuffix: "events",
                    isExternal: !1,
                    isSelected: this.isActiveTab(te.Events)
                }, {
                    label: Object(l.d)("Followers", "ChannelHeader"),
                    count: Object(l.e)(t),
                    pathSuffix: "followers",
                    isExternal: !0,
                    isSelected: this.isActiveTab(te.Followers)
                }, {
                    label: Object(l.d)("Following", "ChannelHeader"),
                    count: Object(l.e)(n),
                    pathSuffix: "following",
                    isExternal: !0,
                    isSelected: this.isActiveTab(te.Following)
                }]
            }, t.prototype.isActiveTab = function(e) {
                return te[this.props.currentPage] === te[e]
            }, t.prototype.getChannelHeaderSize = function() {
                if (this.channelHeader) {
                    var e = this.channelHeader.querySelector('[data-target="channel-header-left"]'),
                        t = this.channelHeader.querySelector('[data-target="channel-header-right"]'),
                        n = this.channelHeader.querySelectorAll('[data-target="channel-header-item"]'),
                        a = this.channelHeader.querySelectorAll('[data-target="channel-header-dropdown-item"]');
                    if (n.length) {
                        var i = this.getWidth(this.channelHeader).width,
                            r = this.getWidth(e).width + this.getWidth(t).width + 20 - i;
                        if (r > 0)
                            for (var s = n.length - 1; s >= 0; s--) {
                                if (!(l = n[s]).classList.contains("channel-header__item--hide")) {
                                    var o = this.getWidth(l);
                                    if (l.classList.add("channel-header__item--hide"), a[s].classList.remove("channel-header__item--hide"), (r -= o.width) <= 0) break
                                }
                            } else
                                for (s = 0; s < n.length; s++) {
                                    var l;
                                    if ((l = n[s]).classList.contains("channel-header__item--hide")) {
                                        l.classList.remove("channel-header__item--hide");
                                        if ((o = this.getWidth(l)).width >= Math.abs(r)) {
                                            l.classList.add("channel-header__item--hide");
                                            break
                                        }
                                        l.classList.remove("channel-header__item--hide"), a[s].classList.add("channel-header__item--hide"), r += o.width
                                    }
                                }
                        var c = this.channelHeader.querySelector('[data-target="channel-header-button"]');
                        if (c) {
                            var d = !this.channelHeader.querySelectorAll('[data-target="channel-header-item"].channel-header__item--hide').length;
                            c.classList.toggle("channel-header__item--hide", d)
                        }
                    }
                }
            }, t.prototype.canRenderBitsButton = function() {
                return this.props.data && !this.props.data.loading && this.props.currentPage !== te.Clips && this.props.data.currentUser && this.props.data.user && this.props.data.user.cheer
            }, t.prototype.getWidth = function(e) {
                return e ? {
                    width: e.clientWidth
                } : {
                    width: 0
                }
            }, t.prototype.reportInteractive = function() {
                !this.props.data || this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
            }, t = i.__decorate([Object(p.a)(ee, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.channelLogin
                }
            }), Object(D.c)("ChannelHeader")], t)
        }(s.Component)
    },
    "Ti/Y": function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissRitualTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        a.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation DismissNewChatterToken($input: DismissRitualTokenInput!) {\ndismissRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("j/3B").definitions)), e.exports = a
    },
    TnJK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var a = {
            DarkMode: "darkMode",
            FollowerDuration: "followerDuration",
            FollowerMode: "followerMode",
            HideChat: "hideChat",
            ShowMessageFlags: "showMessageFlags",
            ShowModActions: "showModerationActions",
            ShowModIcons: "showModIcons",
            ShowTimestamps: "showTimestamps",
            SlowMode: "slowMode"
        }
    },
    Tur5: function(e, t, n) {
        "use strict";
        var a = n("bgpf");
        n.d(t, "RitualTokenMutationErrors", function() {
            return a.a
        }), n.d(t, "RitualTokenStatus", function() {
            return a.b
        }), n.d(t, "RitualTokenType", function() {
            return a.c
        });
        var i = n("AQmT"),
            r = (n.n(i), n("xfb5")),
            s = (n.n(r), n("6vcJ"));
        n.n(s)
    },
    UMQJ: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_Channels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sourceChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "sourceChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "sourceChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 256
            }
        };
        n.loc.source = {
            body: "query RaidNotification_Channels($sourceChannelID: ID! $targetChannelID: ID!) {\nsourceChannel: user(id: $sourceChannelID) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\ntargetChannel: user(id: $targetChannelID) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Umoc: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), n.d(t, "c", function() {
            return d
        });
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("vH/s"),
            s = n("TnJK"),
            o = n("QFW6"),
            l = function(e) {
                i.m.track(r.SpadeEventType.ChatSettingsOpened, Object(o.a)(e))
            },
            c = function(e) {
                var t = a.__assign({}, Object(o.a)(e), {
                    setting_name: e.settingName,
                    new_value: e.newValue.toString()
                });
                i.m.track(r.SpadeEventType.ChatSettingsChanged, t)
            },
            d = function(e) {
                var t = a.__assign({}, Object(o.a)(e), {
                    setting_name: s.a.FollowerDuration,
                    new_value: e.newValue.toString(),
                    follower_mode_on: e.followerModeOn
                });
                i.m.track(r.SpadeEventType.ChatSettingsChanged, t)
            }
    },
    UzRK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        }), t.c = function(e) {
            switch (e) {
                case 0:
                    return Object(a.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                case 10:
                    return Object(a.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                case 30:
                    return Object(a.d)("30 minutes", "FollowersOnlyLabel");
                case 60:
                    return Object(a.d)("1 hour", "FollowersOnlyLabel");
                case 1440:
                    return Object(a.d)("1 day", "FollowersOnlyLabel");
                case 10080:
                    return Object(a.d)("1 week", "FollowersOnlyLabel");
                case 43200:
                    return Object(a.d)("1 month", "FollowersOnlyLabel");
                case 129600:
                    return Object(a.d)("3 months", "FollowersOnlyLabel");
                default:
                    return a.i.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
            }
        }, t.d = function(e) {
            switch (e) {
                case 0:
                    return Object(a.d)("0 min", "FollowersOnlyShorthand");
                case 10:
                    return Object(a.d)("10 min", "FollowersOnlyShorthand");
                case 30:
                    return Object(a.d)("30 min", "FollowersOnlyShorthand");
                case 60:
                    return Object(a.d)("1 hr", "FollowersOnlyShorthand");
                case 1440:
                    return Object(a.d)("1 day", "FollowersOnlyShorthand");
                case 10080:
                    return Object(a.d)("1 wk", "FollowersOnlyShorthand");
                case 43200:
                    return Object(a.d)("1 mo", "FollowersOnlyShorthand");
                case 129600:
                    return Object(a.d)("3 mo", "FollowersOnlyShorthand");
                default:
                    return Object(a.d)("custom", "FollowersOnlyShorthand")
            }
        };
        var a = n("6sO2"),
            i = 30,
            r = [0, 10, 30, 60, 1440, 10080, 43200, 129600]
    },
    V9YC: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), t.b = function(e) {
            return {
                type: a,
                languagePreferences: e
            }
        };
        var a = "core.user-preferences.LANGUAGE_PREFERENCES_UPDATED"
    },
    VSa1: function(e, t) {},
    Vaxm: function(e, t) {},
    VsL1: function(e, t, n) {
        "use strict";

        function a() {
            var e = r.k.get(o, {});
            return i.__assign({
                lastUsedFollowerDurations: {},
                showAutoModActions: !0,
                showMessageFlags: !0,
                showModerationActions: !0,
                showModIcons: !1,
                showTimestamps: !1,
                zachModeStatus: s
            }, e)
        }
        var i = n("TToO"),
            r = n("6sO2"),
            s = "control";
        t.a = a, t.b = function(e, t) {
            var n = a();
            n[e] = t, r.k.set(o, n)
        }, t.c = function(e, t) {
            var n = a();
            n.lastUsedFollowerDurations[e] = t, r.k.set(o, n)
        };
        var o = "chatSettings"
    },
    WClm: function(e, t) {},
    WNmM: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return l
        }), n.d(t, "b", function() {
            return c
        }), n.d(t, "c", function() {
            return u
        });
        var a, i = n("6sO2"),
            r = n("8Wuk"),
            s = n("vH/s"),
            o = (a = {}, a[r.b.Twitter] = "twitter", a[r.b.Reddit] = "reddit", a[r.b.VKontakte] = "vkontakte", a[r.b.Facebook] = "facebook", a[r.b.Copy] = "link", a[r.b.CopyInput] = "option_link", a),
            l = {
                MyClips: "MyClips",
                ClipsOfMyChannel: "ClipsOfMyChannel"
            },
            c = {
                Game: "TopClipsGame",
                Channel: "TopClipsChannel"
            },
            d = {
                MyClips: s.PageviewLocation.MyClipsManager,
                ClipsOfMyChannel: s.PageviewLocation.ChannelClipsManager,
                TopClipsGame: s.PageviewLocation.ClipsGame,
                TopClipsChannel: s.PageviewLocation.ChannelClips
            },
            u = function(e, t) {
                return function(n) {
                    i.n.tracking.track(s.SpadeEventType.VideoShare, {
                        vod_id: e.id,
                        vod_type: "clip",
                        share_platform: o[n],
                        location: d[t],
                        game: e.game ? e.game.name : null,
                        channel_id: Number(e.broadcaster.id),
                        channel: e.broadcaster.login,
                        live: null
                    })
                }
            }
    },
    WVx7: function(e, t, n) {
        "use strict";

        function a(e) {
            return u.__awaiter(this, void 0, void 0, function() {
                var t, n, a, i, r;
                return u.__generator(this, function(s) {
                    switch (s.label) {
                        case 0:
                            if (t = h.b.get("bits_truex_partner_hash", ""), !(n = h.b.get("bits_truex_api_url", "")) || !t) return h.i.warn("Truex API info missing from dynamic settings"), [2, b.Error];
                            s.label = 1;
                        case 1:
                            return s.trys.push([1, 5, , 6]), [4, fetch(n + "?placement.key=" + t + "&user.uid=" + e + "&max_activities=1")];
                        case 2:
                            return (a = s.sent()).ok ? [4, a.json()] : [3, 4];
                        case 3:
                            if ((i = s.sent()) && Array.isArray(i) && i.length) return [2, b.Available];
                            s.label = 4;
                        case 4:
                            return [2, b.Unavailable];
                        case 5:
                            return r = s.sent(), h.i.warn("Failed checking ad availability from TrueX, probably due to AdBlock", r), [2, b.AdBlocked];
                        case 6:
                            return [2]
                    }
                })
            })
        }

        function i(e) {
            return {
                adModalOpen: Object(c.b)(e, E),
                isLoggedIn: Object(d.d)(e)
            }
        }

        function r(e) {
            return {
                showWatchAdModal: function(t) {
                    return e(Object(l.d)(E, t))
                }
            }
        }
        var s, o = n("RH2O"),
            l = n("V5M+"),
            c = n("Iw4B"),
            d = n("Aj/L"),
            u = n("TToO"),
            p = n("U7vG"),
            m = n("2KeS"),
            h = n("6sO2"),
            g = n("+8VM"),
            f = n("7vx8"),
            v = n("oIkB");
        ! function(e) {
            e[e.ExitEarly = 0] = "ExitEarly", e[e.Unknown = 1] = "Unknown", e[e.Adblock = 2] = "Adblock", e[e.LimitReached = 3] = "LimitReached"
        }(s || (s = {}));
        var b, k = n("4JjK"),
            y = n("/LBW"),
            C = n("Odds"),
            S = n("zzpv"),
            _ = (n("x583"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.hasAwarded = !1, t.messageHandler = function(e) {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var t, n, a, i, r;
                            return u.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        if (e.origin !== window.location.origin) return [2];
                                        if (!(t = e.data) || "trueXAd" !== t.msgSrc) return [2];
                                        switch (t.type) {
                                            case k.a.Ready:
                                                return [3, 1];
                                            case k.a.RequestAd:
                                                return [3, 2];
                                            case k.a.Dimensions:
                                                return [3, 3];
                                            case k.a.OnStart:
                                                return [3, 4];
                                            case k.a.OnCredit:
                                                return [3, 5];
                                            case k.a.OnClose:
                                            case k.a.OnFinish:
                                            case k.a.LimitReached:
                                            case k.a.Adblock:
                                            case k.a.OnError:
                                                return [3, 9]
                                        }
                                        return [3, 10];
                                    case 1:
                                        return n = {
                                            msgSrc: "wateb-ad-modal",
                                            tuid: this.props.tuid
                                        }, e.source.postMessage(n, "*"), [2];
                                    case 2:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(y.g)({
                                                campaignID: a.campaign_id.toString(),
                                                requestID: t.requestID,
                                                requestMethod: this.props.requestRef
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 3:
                                        return t.height && t.width && this.setState({
                                            customDimensions: {
                                                height: t.height,
                                                width: t.width
                                            }
                                        }), [3, 10];
                                    case 4:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(y.f)({
                                                requestID: t.requestID,
                                                adblock: !1,
                                                campaignID: a.campaign_id.toString()
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 5:
                                        return o.trys.push([5, 7, , 8]), [4, this.props.redeemTrueXAd(Object(v.a)({
                                            args: t.engagement.signature_argument_string,
                                            signature: t.engagement.signature,
                                            trueXAd: {
                                                creativeID: t.engagement.ad.creative_id,
                                                campaignID: t.engagement.ad.campaign_id,
                                                name: t.engagement.ad.name,
                                                currencyAmount: t.engagement.ad.currency_amount
                                            },
                                            targetID: this.props.channelID
                                        }))];
                                    case 6:
                                        return i = o.sent(), this.hasAwarded = !0, this.props.onBitsAwarded && this.props.onBitsAwarded(i.data.redeemTrueXAd.grantedBits), [3, 8];
                                    case 7:
                                        return r = o.sent(), h.i.warn("Error while redeeming bits for truex ad", r), this.props.onError && this.props.onError(s.Unknown), [3, 8];
                                    case 8:
                                        return [3, 10];
                                    case 9:
                                        return this.props.onError && (t.type === k.a.LimitReached ? this.props.onError(s.LimitReached) : t.type === k.a.Adblock ? this.props.onError(s.Adblock) : t.type === k.a.OnError ? this.props.onError(s.Unknown) : this.hasAwarded || this.props.onError(s.ExitEarly)), this.props.closeModal(), [3, 10];
                                    case 10:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("message", this.messageHandler)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("message", this.messageHandler)
                }, t.prototype.render = function() {
                    return p.createElement(C._19, {
                        background: C.m.Base
                    }, p.createElement("div", {
                        className: "t-watch-ads-modal",
                        style: this.state.customDimensions
                    }, p.createElement(g.a, null), p.createElement("iframe", {
                        src: "/products/bits/ad"
                    })))
                }, t = u.__decorate([Object(f.a)(S, {
                    name: "redeemTrueXAd"
                })], t)
            }(p.Component)),
            E = Object(o.a)(null, function(e) {
                return Object(m.bindActionCreators)({
                    closeModal: l.c
                }, e)
            })(_),
            w = n("HW6M"),
            N = n("jF7o"),
            D = n("zCIC");
        ! function(e) {
            e[e.Error = 0] = "Error", e[e.AdBlocked = 1] = "AdBlocked", e[e.Unavailable = 2] = "Unavailable", e[e.Available = 3] = "Available"
        }(b || (b = {}));
        var O, T = function(e) {
                var t = null;
                return e.disableWatchAd && (t = Object(h.d)("Try again later", "Bits--WatchAdOffer")), p.createElement(C._19, {
                    className: "bits-buy-card__offer-row",
                    display: C.H.Flex,
                    flexShrink: 0,
                    borderBottom: !0,
                    justifyContent: C.U.Between,
                    flexWrap: C.K.NoWrap,
                    padding: {
                        x: 2,
                        y: 1
                    }
                }, p.createElement(C.V, {
                    padding: {
                        right: 4
                    }
                }, p.createElement("strong", null, Object(h.d)("Get {minBitsCount} or more Bits by watching short ads", {
                    minBitsCount: e.minPayout
                }, "Bits--WatchAdOffer"))), p.createElement(C.V, {
                    flexShrink: 0,
                    display: C.H.Flex,
                    flexDirection: C.J.Column,
                    alignItems: C.c.End
                }, p.createElement(C.u, {
                    type: C.z.Hollow,
                    "data-a-target": "bits-watch-ad",
                    onClick: e.onWatchAdClick,
                    disabled: e.disableWatchAd
                }, Object(h.d)("Watch Ad", "Bits--WatchAdOffer")), t && p.createElement(C.V, {
                    className: "bits-buy-card__sub-text",
                    alignSelf: C.d.Stretch,
                    textAlign: C._24.Center,
                    margin: {
                        top: .5
                    }
                }, t)))
            },
            I = /version\/([\w\.]+).+?(mobile\s?safari|safari)/i,
            L = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        enableWatchAd: !0
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return u.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, a(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), Object(y.e)({
                                        channel: this.props.channelLogin,
                                        channelID: this.props.channelID,
                                        available: e === b.Available
                                    }), e !== b.Available && e !== b.AdBlocked && this.setState({
                                        enableWatchAd: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return I.test(navigator.userAgent) ? null : p.createElement(T, u.__assign({}, this.props, {
                        disableWatchAd: !this.state.enableWatchAd
                    }))
                }, t
            }(p.Component),
            M = n("jxGs"),
            x = n("3iBR"),
            F = n("iydZ"),
            j = n("ZJYd"),
            A = n("CFVp"),
            B = n("qe65"),
            R = (n("OLKT"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleBuyClick = function(e) {
                        var n = t.props.channelID || "",
                            a = Object(j.b)({
                                trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                                channelID: n,
                                purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                                bitsAmount: e.currentTarget.dataset.bitsAmount,
                                closeAllBits: t.props.closeAllBits,
                                location: t.props.location
                            });
                        a && (t.props.onBuyPopupClose(a), t.props.onClose())
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    if (this.props.offer.type === M.a) {
                        if (!this.props.channelLogin) return null;
                        var e = this.props.currentUserSHA || "";
                        return p.createElement(L, {
                            key: "wateb",
                            minPayout: this.props.offer.bits,
                            onWatchAdClick: this.props.handleWatchAdClick,
                            truexUserID: e,
                            channelID: this.props.channelID || "",
                            channelLogin: this.props.channelLogin
                        })
                    }
                    var t = null;
                    Object(j.c)(this.props.offer) ? t = p.createElement(C.V, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, p.createElement(C._23, {
                        type: C._28.Strong,
                        fontSize: C.L.Size6
                    }, Object(h.d)("Special Offer: 1st Time Buyers", "Bits--BuyCard"))) : Object(j.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === M.c && (t = p.createElement(C.V, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, p.createElement(C._23, {
                        type: C._28.Strong,
                        fontSize: C.L.Size6
                    }, Object(h.d)("Flash Sale: Now thru Nov. 27!", "Bits--BuyCard"))));
                    var n = null;
                    this.props.offer.discount && (n = p.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(h.d)("{percentOff,number,percent} discount", {
                        percentOff: this.props.offer.discount
                    }, "Bits--BuyCard")));
                    var a = null;
                    (Object(j.c)(this.props.offer) || Object(j.e)(this.props.offer)) && (a = p.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(h.d)("one per account", "Bits--BuyCard")));
                    var i = this.props.isLastRow ? C._19 : C.V;
                    return p.createElement(i, {
                        className: "bits-buy-card-offer-row",
                        flexShrink: 0,
                        display: C.H.Flex,
                        justifyContent: C.U.Center,
                        borderBottom: this.props.isLastRow,
                        flexDirection: C.J.Column,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, t, p.createElement(C.V, {
                        display: C.H.Flex,
                        justifyContent: C.U.Between,
                        alignItems: C.c.Center
                    }, p.createElement(C.V, {
                        flexGrow: 1
                    }, p.createElement(C._23, {
                        type: C._28.H5,
                        color: C.F.Base,
                        bold: !0
                    }, this.props.offer.bits, " Bits"), this.getAvailableTiers(this.props.offer.bits)), p.createElement(C.V, {
                        flexShrink: 0,
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        alignItems: C.c.End
                    }, p.createElement(C.u, {
                        onClick: this.handleBuyClick,
                        "data-purchase-url": this.props.offer.url,
                        "data-bits-amount": this.props.offer.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.offer.bits
                    }, this.props.offer.price), (n || a) && p.createElement(C.V, {
                        alignSelf: C.d.Stretch,
                        textAlign: C._24.Right,
                        margin: {
                            top: .5
                        }
                    }, n, a))))
                }, t.prototype.getAvailableTiers = function(e) {
                    var t = this.props.bitsConfig.indexedActions[x.f];
                    t || (t = Object(A.b)());
                    var n = t.orderedTiers.filter(function(t) {
                        return t.bits <= e
                    }).reverse();
                    return p.createElement(C.V, {
                        padding: {
                            top: .5
                        },
                        className: "bits-buy-card-offer-row__tier-bits-images"
                    }, n.map(function(e) {
                        return p.createElement(B.a, {
                            key: e.bits,
                            sources: Object(F.b)(e, 2, !1)
                        })
                    }))
                }, t
            }(p.Component)),
            U = (n("sgUC"), function(e) {
                var t = [],
                    n = [],
                    a = null;
                return e.offers.forEach(function(i, r) {
                    var s = p.createElement(R, {
                            key: i.id,
                            offer: i,
                            isLastRow: r + 1 < e.offers.length,
                            bitsConfig: e.bitsConfig,
                            channelID: e.channelID,
                            channelLogin: e.channelLogin,
                            currentUserSHA: e.currentUserSHA,
                            location: e.location,
                            onClose: e.onClose,
                            onBuyPopupClose: e.onBuyPopupClose,
                            handleWatchAdClick: e.handleWatchAdClick,
                            closeAllBits: e.closeAllBits,
                            trackBitsCardInteraction: e.trackBitsCardInteraction
                        }),
                        o = Object(j.d)(i),
                        l = Object(j.c)(i),
                        c = i.type === M.a;
                    l && !e.hidePromos ? t.push(s) : o && !l ? t.push(s) : c && !e.hideWateb ? a = s : c || o || n.push(s)
                }), e.fullsize ? p.createElement(C.V, {
                    className: "bits-buy-card-offers__full-size",
                    flexGrow: 1,
                    flexWrap: C.K.NoWrap,
                    display: C.H.Flex,
                    flexDirection: C.J.Column
                }, a, t, n) : p.createElement(D.b, {
                    className: "bits-buy-card-offers__scroll-view"
                }, p.createElement(C.V, {
                    flexGrow: 1,
                    flexWrap: C.K.NoWrap,
                    display: C.H.Flex,
                    flexDirection: C.J.Column
                }, a, t, n))
            }),
            V = function(e) {
                var t = null;
                e.pricesIncludeVAT && (t = p.createElement(C._23, {
                    italic: !0,
                    type: C._28.P,
                    color: C.F.Alt
                }, Object(h.d)("Prices include VAT", "Bits--BuyCard")));
                var n = null;
                e.minBitsToCheer && e.minBitsToCheer > 1 && (n = p.createElement(C._23, {
                    color: C.F.Alt
                }, Object(h.d)("{displayName} requires {minBits} Bits to Cheer in this channel.", {
                    displayName: e.displayName,
                    minBits: e.minBitsToCheer
                }, "Bits--BuyCard")));
                var a = null;
                return void 0 !== e.bitsBalance && null !== e.bitsBalance && (a = p.createElement(C._23, {
                    color: C.F.Alt
                }, Object(h.d)("You have {totalBits} Bits", {
                    totalBits: p.createElement("strong", {
                        "data-a-target": "buy-card-bits-count"
                    }, e.bitsBalance)
                }, "Bits--BuyCard"))), p.createElement(C._19, {
                    className: "bits-buy-card-header",
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    borderBottom: !0,
                    flexShrink: 0
                }, p.createElement(C.V, {
                    margin: {
                        bottom: 1
                    }
                }, p.createElement(C._23, {
                    type: C._28.H4,
                    color: C.F.Alt
                }, Object(h.d)("Purchase Bits", "Bits--BuyCard")), t), a, n)
            },
            P = n("nrdj"),
            H = function(e) {
                return p.createElement(C.V, {
                    display: C.H.Flex,
                    flexGrow: 1,
                    flexDirection: C.J.Column,
                    alignItems: C.c.Center,
                    fullWidth: !0,
                    flexWrap: C.K.NoWrap,
                    padding: {
                        y: 1
                    }
                }, p.createElement(P.a, {
                    prefix: "cheer",
                    amount: e.amount,
                    bitsConfig: e.bitsConfig,
                    showAmount: !0,
                    showImage: !0
                }), p.createElement(C.V, {
                    display: C.H.Flex,
                    padding: {
                        top: 1
                    },
                    flexGrow: 1,
                    flexDirection: C.J.Column,
                    alignItems: C.c.Center,
                    flexWrap: C.K.NoWrap
                }, p.createElement(C._23, {
                    type: C._28.H4,
                    bold: !0
                }, Object(h.d)("You got {bitsAmount,number} Bits!", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward")), p.createElement(C.Q, {
                    padding: {
                        top: 1
                    }
                }, p.createElement(C._23, {
                    color: C.F.Alt2
                }, Object(h.d)("{bitsAmount,number} Bits were added to your Bit inventory.", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward"), p.createElement("br", null), Object(h.d)("You can use these Bits to Cheer!", "Bits--WatchAdAward")))), p.createElement(C.V, {
                    display: C.H.Flex,
                    padding: {
                        x: 1,
                        top: 3
                    },
                    alignSelf: C.d.Stretch,
                    justifyContent: C.U.Between
                }, p.createElement(C.u, {
                    onClick: e.onStartCheering
                }, Object(h.d)("Start Cheering", "Bits--WatchAdAward")), p.createElement(C.u, {
                    type: C.z.Hollow,
                    onClick: e.onWatchAnother,
                    disabled: !e.hasAdAvailable
                }, Object(h.d)("Watch Another", "Bits--WatchAdAward"))))
            },
            W = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasAdAvailable: !0
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, a(this.props.truexUserID)];
                                case 1:
                                    return e.sent() !== b.Available && this.setState({
                                        hasAdAvailable: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return p.createElement(H, u.__assign({}, this.props, {
                        hasAdAvailable: this.state.hasAdAvailable
                    }))
                }, t
            }(p.Component),
            q = (n("q8Cw"), function(e) {
                var t = Object(h.d)("Something's wrong!", "Bits--WatchAdError"),
                    n = Object(h.d)("Something went wrong. Wait a while and try again.", "Bits--WatchAdError"),
                    a = "adserrorgeneric";
                switch (e.type) {
                    case s.Adblock:
                        a = "adserroradblock", n = Object(h.d)("We can't load this Ad, probably because Ad Blocking software is running. To watch an ad and get Bits, please disable all Ad Blocking software.", "Bits--WatchAdError");
                        break;
                    case s.LimitReached:
                        a = "adserrorlimit", t = Object(h.d)("Ad Limit Reached", "Bits--WatchAdError"), n = Object(h.d)("That's all the Ads we have for now. Try again tomorrow!", "Bits--WatchAdError");
                        break;
                    case s.ExitEarly:
                        n = Object(h.d)("To get Bits, you must view and interact with the Ad for the minimum amount of time.", "Bits--WatchAdError")
                }
                var i = p.createElement(C.V, {
                    className: "watch-ad-error__footer",
                    display: C.H.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: C.d.Stretch,
                    justifyContent: C.U.Center
                }, p.createElement(C.u, {
                    onClick: e.onTryAgain
                }, Object(h.d)("Try Again", "Bits--WatchAdError")));
                return e.type === s.LimitReached && (i = p.createElement(C.V, {
                    className: "watch-ad-error__footer",
                    display: C.H.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: C.d.Stretch,
                    justifyContent: C.U.Between
                }, p.createElement(C.u, {
                    onClick: e.onClose
                }, Object(h.d)("Got It", "Bits--WatchAdError")), p.createElement(C.u, {
                    onClick: e.onTryAgain,
                    type: C.z.Hollow
                }, Object(h.d)("Buy Bits", "Bits--WatchAdError")))), p.createElement(C.V, {
                    padding: {
                        x: 1
                    },
                    display: C.H.Flex,
                    flexGrow: 1,
                    flexDirection: C.J.Column,
                    alignItems: C.c.Center,
                    fullWidth: !0,
                    flexWrap: C.K.NoWrap
                }, p.createElement(C.V, {
                    padding: {
                        y: 2
                    }
                }, p.createElement("img", {
                    className: "watch-ad-error__error-image",
                    src: x.b + "/light/static/1/" + a + ".png"
                })), p.createElement(C.V, {
                    padding: {
                        bottom: 1
                    }
                }, p.createElement(C._23, {
                    type: C._28.H4,
                    bold: !0
                }, t)), p.createElement(C._23, {
                    color: C.F.Alt2
                }, n), i)
            }),
            G = n("aqNN");
        n("6Rwu");
        ! function(e) {
            e[e.Inactive = 0] = "Inactive", e[e.Error = 1] = "Error", e[e.Awarded = 2] = "Awarded"
        }(O || (O = {}));
        var z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        wateb: O.Inactive,
                        watebError: null,
                        bitsAwarded: 0
                    }, t.onBuyPopupClose = function(e) {
                        Object(N.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t.onAdBitsAwarded = function(e) {
                        t.props.data && !t.props.data.loading && t.props.data.refetch(), t.setState({
                            wateb: O.Awarded,
                            bitsAwarded: e
                        })
                    }, t.handleWatchAdClick = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            return u.__generator(this, function(e) {
                                return this.props.data && this.props.data.currentUser && this.props.data.user ? (this.props.showWatchAdModal({
                                    tuid: this.props.data.currentUser.idSHA1,
                                    onBitsAwarded: this.onAdBitsAwarded,
                                    onError: this.receiveAdErrorState,
                                    requestRef: y.c.ShowAdButton,
                                    channelID: this.props.data.user.id
                                }), [2]) : [2]
                            })
                        })
                    }, t.receiveAdErrorState = function(e) {
                        t.setState({
                            wateb: O.Error,
                            watebError: e
                        })
                    }, t.resetAdErrorState = function() {
                        t.state.wateb === O.Error && (t.setState({
                            wateb: O.Inactive
                        }), t.props.data && t.props.data.refetch())
                    }, t
                }
                return u.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return !e.adModalOpen
                }, t.prototype.render = function() {
                    var e = {
                            border: !0,
                            background: C.m.Base,
                            fullWidth: !0,
                            elevation: 3
                        },
                        t = w({
                            "bits-buy-card": !0,
                            "bits-buy-card__chat-tooltip": this.props.location === y.b.ChatTooltip
                        }),
                        n = null;
                    if (this.props.location === y.b.ChatTooltip && (n = p.createElement("button", {
                            className: "bits-buy-card__close",
                            onClick: this.props.onClose,
                            "data-a-target": "bits-buy-card-close-button"
                        }, p.createElement(C._10, {
                            asset: C._11.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return p.createElement(C._19, u.__assign({
                        className: t,
                        "data-a-target": "bits-buy-card-loading",
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        alignItems: C.c.Center,
                        justifyContent: C.U.Center,
                        textAlign: C._24.Center
                    }, e), p.createElement(C.Z, {
                        delay: 0
                    }), p.createElement(C.V, {
                        padding: {
                            top: 2
                        }
                    }, p.createElement(C._23, {
                        italic: !0
                    }, Object(h.d)("Fetching bits", "Bits--BuyCard"))));
                    if (this.props.data.error) return p.createElement(C.V, u.__assign({
                        className: w(t, "bits-buy-card--shorter"),
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        alignItems: C.c.Center,
                        justifyContent: C.U.Center,
                        padding: 2,
                        textAlign: C._24.Center,
                        "data-a-target": "bits-buy-card-error"
                    }, e), n, p.createElement(C._23, {
                        italic: !0
                    }, Object(h.d)("Bits prices are unavailable right now. Check back again later.", "Bits--BuyCard")));
                    var a = this.renderWatebCard();
                    if (a) return p.createElement(C._19, u.__assign({
                        className: w(t, "bits-buy-card--shorter"),
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        alignItems: C.c.Center,
                        justifyContent: C.U.Center,
                        textAlign: C._24.Center,
                        padding: 1
                    }, e), n, a);
                    var i = [];
                    this.props.data.currentUser ? i = this.props.data.currentUser.bitsOffers : this.props.data.bitsOffers && (i = this.props.data.bitsOffers);
                    var r = i.filter(function(e) {
                            return e.type === M.b
                        }).some(function(e) {
                            return e.includesVAT
                        }),
                        s = this.props.data.user ? this.props.data.user.id : "",
                        o = p.createElement(U, {
                            offers: i,
                            fullsize: this.props.fullsize,
                            hidePromos: this.props.hidePromos,
                            hideWateb: this.props.hideWateb,
                            bitsConfig: this.props.bitsConfig,
                            channelID: s,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.closeAllBits,
                            currentUserSHA: this.props.data && this.props.data.currentUser && this.props.data.currentUser.idSHA1,
                            handleWatchAdClick: this.handleWatchAdClick,
                            location: this.props.location,
                            onBuyPopupClose: this.onBuyPopupClose,
                            onClose: this.props.onClose,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction
                        }),
                        l = null;
                    return this.props.location === y.b.ChatTooltip && (l = p.createElement(V, {
                        bitsBalance: this.props.data && this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        displayName: this.props.data && this.props.data.user && this.props.data.user.displayName || this.props.channelLogin || "",
                        minBitsToCheer: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.cheerMinimumBits,
                        pricesIncludeVAT: r
                    })), p.createElement(C._19, u.__assign({
                        className: t,
                        padding: {
                            top: 1
                        },
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        "data-a-target": "bits-buy-card"
                    }, e), n, l, o)
                }, t.prototype.renderWatebCard = function() {
                    if (this.props.data && this.props.data.currentUser) switch (this.state.wateb) {
                        case O.Awarded:
                            return p.createElement(W, {
                                bitsConfig: this.props.bitsConfig,
                                amount: this.state.bitsAwarded,
                                onStartCheering: this.props.onClose,
                                onWatchAnother: this.handleWatchAdClick,
                                truexUserID: this.props.data.currentUser.idSHA1
                            });
                        case O.Error:
                            return p.createElement(q, {
                                type: this.state.watebError || s.Unknown,
                                onClose: this.props.onClose,
                                onTryAgain: this.resetAdErrorState
                            });
                        default:
                            return !1
                    }
                }, t = u.__decorate([Object(f.a)(G, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(p.Component),
            Q = Object(o.a)(i, r)(z);
        n.d(t, !1, function() {
            return i
        }), n.d(t, !1, function() {
            return r
        }), n.d(t, "a", function() {
            return Q
        })
    },
    XITx: function(e, t) {},
    Y5T0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BitsCommandHandler_DismissPinnedCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPinnedCheerInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissPinnedCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation BitsCommandHandler_DismissPinnedCheer($input: DismissPinnedCheerInput!) {\ndismissPinnedCheer(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ZJYd: function(e, t, n) {
        "use strict";

        function a(e) {
            return e.type === s.b && null !== e.promotion && !!e.promotion
        }
        t.c = function(e) {
            return e.type !== s.a && a(e) && null !== e.promotion && e.promotion.type === s.d
        }, t.e = function(e) {
            return e.type !== s.a && a(e) && null !== e.promotion && e.promotion.type === s.e
        }, t.d = a, t.a = function(e) {
            var t = 0,
                n = 0,
                a = 0;
            return e.forEach(function(e) {
                e.cheerAmount && (t = Math.max(t, e.cheerAmount), n = n ? Math.min(n, e.cheerAmount) : e.cheerAmount, a += e.cheerAmount)
            }), {
                total: a,
                smallestCheermote: n,
                largestCheermote: t
            }
        }, t.f = function(e) {
            var t = e.messageBits,
                n = t.total,
                a = t.largestCheermote,
                r = t.smallestCheermote;
            if (n) {
                var s = {
                    cheerAboveMaxBitsPerEmote: a > o.j,
                    totalAboveBalance: n > e.balance,
                    totalBelowCheerMinimum: n < e.cheerMinimumBits,
                    totalBelowEmoteMinimum: r < e.emoteMinimumBits,
                    inputLongerThanMaxBitsMessage: e.inputValue.length > o.i,
                    inputStartsWithCommand: e.inputValue.startsWith("/")
                };
                if (Object.keys(s).some(function(e) {
                        return s[e]
                    })) return i.__assign({
                    canSpend: !1
                }, s)
            }
            return {
                canSpend: !0
            }
        }, t.b = function(e) {
            var t = e.purchaseUrl;
            if (t) {
                e.trackBitsCardInteraction(Object(l.d)(e.bitsAmount), {
                    location: e.location
                });
                var n = t.replace("{channelID}", e.channelID),
                    a = window.open(n, "Twitch", "width=1024,height=600,scrollbars=yes");
                return !a || Object(r.a)() ? (e.closeAllBits && e.closeAllBits(), void e.trackBitsCardInteraction(l.a.CloseCard, {
                    location: e.location
                })) : (a.focus(), a)
            }
        };
        var i = n("TToO"),
            r = n("Ouuk"),
            s = n("jxGs"),
            o = n("3iBR"),
            l = n("/LBW")
    },
    ZoRy: function(e, t) {},
    ZoyS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ModerationMenu_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isSiteAdmin"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isStaff"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 68
            }
        };
        n.loc.source = {
            body: "query ModerationMenu_User {\ncurrentUser {\nid\nisSiteAdmin\nisStaff\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    aSvS: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return i
        });
        var a;
        ! function(e) {
            e.DismissToken = "token_dismissed", e.RedeemToken = "token_redeemed", e.RequestEligibility = "eligibility_requested", e.RequestToken = "token_requested"
        }(a || (a = {}));
        var i;
        ! function(e) {
            e.Click = "clicked_manage_in_dashboards", e.Dismiss = "dismissed"
        }(i || (i = {}))
    },
    aUOx: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return {
                type: a.a.Info,
                id: Object(i.a)("notice"),
                message: e
            }
        };
        var a = n("qkCi"),
            i = n("INp2")
    },
    annQ: function(e, t, n) {
        function a(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !r[t] && (r[t] = !0, !0)
            })
        }
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GetBitsButton_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 748
            }
        };
        i.loc.source = {
            body: '# Documentation about how to use GraphQL is located in the Data Access Guide:\n# https://git-aws.internal.justin.tv/pages/twilight/twilight-docs/docs/guides/data-access.html\n# Additionally use the GraphQL explorer (https://api.twitch.tv/gql/explore) to browse\n# available GraphQL data and construct your query.\n#import "twilight/features/bits/models/bits-offers-fragment.gql"\n#import "twilight/features/chat/models/cheer-fragment.gql"\nquery GetBitsButton_Bits($isLoggedIn: Boolean! $withChannel: Boolean! $login: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $login) @include(if: $withChannel) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(a(n("OcEY").definitions)), i.definitions = i.definitions.concat(a(n("576g").definitions)), e.exports = i
    },
    aqNN: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Bits_BuyCard_Offers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 440
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/bits/models/bits-offers-fragment.gql"\nquery Bits_BuyCard_Offers($withChannel: Boolean! $isLoggedIn: Boolean! $channelLogin: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $channelLogin) @include(if: $withChannel) {\nid\ndisplayName\ncheer {\nid\nsettings {\ncheerMinimumBits\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("OcEY").definitions)), e.exports = a
    },
    ass3: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        }), t.c = function() {
            return {
                type: a
            }
        }, t.d = function(e, t, n) {
            return {
                type: i,
                viewerCardOptions: {
                    targetLogin: e,
                    sourceType: t,
                    sourceID: n
                }
            }
        };
        var a = "viewer-card.VIEWER_CARD_HIDDEN",
            i = "viewer-card.VIEWER_CARD_SHOWN"
    },
    bQ8d: function(e, t, n) {
        "use strict";

        function a(e, t) {
            if (void 0 === t && (t = 0), t > e) {
                var n = t;
                t = e, e = n
            }
            return t + Math.floor(Math.random() * (e - t + 1))
        }
        t.a = a, t.b = function(e) {
            return e[a(e.length - 1)]
        }, t.c = function(e, t) {
            for (var n = 0, a = []; n < e;) a.push(t(n)), n += 1;
            return a
        }
    },
    baDC: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 236
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_CurrentUser($channelLogin: String!) {\ncurrentUser {\nid\nlogin\ndisplayName\nchatColor\n}\nuser(login: $channelLogin) {\nid\nself {\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = a
    },
    bdk8: function(e, t) {},
    bgpf: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return r
        });
        var a;
        (a || (a = {})).NewChatter = "NEW_CHATTER";
        var i;
        ! function(e) {
            e.Available = "AVAILABLE", e.Dismissed = "DISMISSED", e.Eligible = "ELIGIBLE", e.Redeemed = "REDEEMED"
        }(i || (i = {}));
        var r;
        ! function(e) {
            e.TokenNotAvailable = "TOKEN_NOT_AVAILABLE", e.TokenNotFound = "TOKEN_NOT_FOUND", e.UserBanned = "USER_CHAT_BANNED", e.UserNotFollowing = "FOLLOWER_ONLY_MODE_ENFORCEMENT_FAILED", e.UserNotSubbed = "SUB_ONLY_MODE_ENFORCEMENT_FAILED", e.UserTimedOut = "USER_CHAT_TIMED_OUT"
        }(r || (r = {}))
    },
    bkpq: function(e, t, n) {
        "use strict";

        function a(e) {
            var t = new Map,
                n = new Map,
                a = new Map,
                r = new Map;
            return e.images.forEach(function(e) {
                "LIGHT" === e.theme ? e.isAnimated ? n.set(e.dpiScale, e.url) : t.set(e.dpiScale, e.url) : e.isAnimated ? r.set(e.dpiScale, e.url) : a.set(e.dpiScale, e.url)
            }), i.__assign({
                indexedImages: {
                    LIGHT: {
                        static: t,
                        animated: n
                    },
                    DARK: {
                        static: a,
                        animated: r
                    }
                }
            }, e)
        }
        t.a = function(e) {
            var t = [],
                n = {};
            return e.forEach(function(e) {
                var o = e.tiers.map(function(e) {
                    return a(e)
                });
                "Cheer" === e.prefix && o.push(function() {
                    var e = ["DARK", "LIGHT"],
                        t = ["static", "animated"],
                        n = [];
                    return [1, 1.5, 2, 3, 4].forEach(function(a) {
                        e.forEach(function(e) {
                            t.forEach(function(t) {
                                n.push({
                                    url: s.a + "/cheer/" + e.toLowerCase() + "/" + t + "/100000/" + a + "." + ("static" === t ? "png" : "gif"),
                                    isAnimated: "animated" === t,
                                    theme: e,
                                    dpiScale: a
                                })
                            })
                        })
                    }), a({
                        id: "Cheer:100000",
                        bits: 1e5,
                        color: s.e[r.a.Yellow],
                        images: n
                    })
                }()), o.sort(function(e, t) {
                    return t.bits - e.bits
                });
                var l = i.__assign({}, e, {
                    indexedTiers: new Map(o.map(function(e) {
                        return [e.bits, e]
                    })),
                    orderedTiers: o
                });
                t.push(l), n[l.prefix.toLowerCase()] = l
            }), {
                indexedActions: n,
                orderedActions: t
            }
        };
        var i = n("TToO"),
            r = n("I89S"),
            s = n("3iBR")
    },
    c8Oh: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.userPreferences.languagePreferences
        };
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("V9YC"),
            s = n("iJpA");
        i.n.store.registerReducer("userPreferences", function(e, t) {
            switch (void 0 === e && (e = {
                languagePreferences: Object(s.b)()
            }), t.type) {
                case r.a:
                    return a.__assign({}, e, {
                        languagePreferences: t.languagePreferences
                    });
                default:
                    return e
            }
        })
    },
    cv4W: function(e, t, n) {
        e.exports = n.p + "assets/gift3-03f7dd6edab76b3567ff92bba447d5cb.png"
    },
    cxe8: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_SharePurchase_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isCommerceRevShareEnabled"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "purchaseTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "asin"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "imageThumbnail"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "40"
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteSets"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteSet"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "token"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "badges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "badge"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "quantity"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "inGameContents"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "imageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "30"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 433
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery Chat_SharePurchase_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nsettings {\nisCommerceRevShareEnabled\n}\nself {\npurchaseTokens {\nid\ntitle\nasin\nimageThumbnail: imageURL(width: 40)\nimageURL\nemoteSets {\nid\nemoteSet {\nid\nemotes {\nid\ntoken\n}\n}\n}\nbadges {\nid\nbadge{\n...badge\n}\n}\nbits {\nid\nquantity\n}\ninGameContents {\nid\nimageURL(width: 30)\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = a
    },
    czpb: function(e, t, n) {
        "use strict";
        var a = n("6sO2"),
            i = n("Ejve"),
            r = n("MSvX");
        t.a = function(e) {
            return a.b.get(r.a, !1) || a.a.buildType !== i.a.Production ? "string" == typeof e ? e : e.pathname || "" : "string" == typeof e ? s + e : s + e.pathname
        }, t.b = function() {
            return !a.b.get(r.a, !1) && a.a.buildType === i.a.Production
        };
        var s = "https://www.twitch.tv"
    },
    dQj3: function(e, t, n) {
        "use strict";

        function a(e) {
            var t = [];
            return e.forEach(function(e) {
                t[e.from] = {
                    startIndex: e.from,
                    endIndex: e.to + 1,
                    data: {
                        images: {
                            themed: !1,
                            sources: {
                                "1x": Object(o.e)(e.emoteID, 1),
                                "2x": Object(o.e)(e.emoteID, 2),
                                "4x": Object(o.e)(e.emoteID, 4)
                            }
                        }
                    }
                }
            }), t
        }
        t.b = a, t.a = function(e, t, n) {
            var c = a(e.body.emotes),
                d = e.badges.reduce(function(e, t) {
                    return e[t.setID] = t.version, e
                }, {});
            return {
                type: s.a.Post,
                id: e.id,
                badges: d,
                bits: e.bitsUsed,
                timestamp: 0,
                deleted: !1,
                user: i.__assign({
                    userID: e.author.id,
                    userLogin: e.author.login,
                    userType: r.a.User,
                    color: e.authorColor
                }, Object(l.a)(e.authorName, e.author.login)),
                messageParts: Object(o.f)(e.body.content, c, e.bitsUsed, t, n, e.authorName)
            }
        }, t.c = function(e) {
            if (null === e.tags || null === e.message || null === e.bits_used) return null;
            var t = "ChatMessage:" + e.tags.msg_id;
            return {
                __typename: "ChatMessage",
                "Symbol(id)": t,
                id: e.tags.msg_id,
                authorName: e.tags.display_name,
                authorColor: e.tags.color,
                author: {
                    __typename: "User",
                    "Symbol(id)": "User:" + e.user_id,
                    id: e.user_id,
                    login: e.username
                },
                body: {
                    __typename: "MessageBody",
                    "Symbol(id)": "$" + t + ".body",
                    content: e.message,
                    emotes: e.tags.emotes.map(function(e, n) {
                        return {
                            __typename: "EmbeddedEmote",
                            "Symbol(id)": t + ".body.emotes." + n,
                            emoteID: e.id.toString(),
                            from: e.start,
                            to: e.end,
                            setID: e.set
                        }
                    })
                },
                badges: e.tags.badges.map(function(e, n) {
                    return {
                        __typename: "Badge",
                        "Symbol(id)": t + ".badges." + n,
                        setID: e.badge_set_id,
                        version: e.badge_set_version
                    }
                }),
                bitsUsed: e.bits_used
            }
        };
        var i = n("TToO"),
            r = n("6Agf"),
            s = n("qkCi"),
            o = n("l21v"),
            l = n("e1CU")
    },
    dVd7: function(e, t) {},
    e9ZN: function(e, t) {},
    f1ZS: function(e, t) {},
    fHoP: function(e, t) {},
    g7wA: function(e, t, n) {
        "use strict";

        function a(e, t) {
            return c.createElement("a", {
                key: e,
                className: "chat-line__message--link",
                href: t.content.url,
                target: "_blank",
                rel: "noreferrer noopener"
            }, t.content.displayText)
        }

        function i(e, t, n) {
            var i = null,
                r = e.reduce(function(r, s, o) {
                    switch (s.type) {
                        case S.a.Text:
                            var l = o > 0;
                            return r.concat(function(e, t, n, a, i) {
                                var r = [],
                                    s = "";
                                a && (s = s.concat(" "));
                                var o = e.content.split(/\s+/);
                                return o.forEach(function(e, a) {
                                    if ("" !== e) {
                                        var i = a < o.length - 1 ? e + " " : e;
                                        (t || n) && function(e, t, n) {
                                            var a = e.trim().toLowerCase();
                                            return t && a === t.toLowerCase() || n && a === n.toLowerCase()
                                        }(e, t, n) ? (r = (r = r.concat(s)).concat(c.createElement(_.V, {
                                            className: "chat-line__message--mention-recipient",
                                            display: _.H.InlineFlex,
                                            key: "" + e + a,
                                            "data-a-target": "chat-message-mention"
                                        }, i)), s = "") : s = s.concat(i)
                                    }
                                }), r = r.concat(s), c.createElement("span", {
                                    key: "chat-line__message-text-" + i,
                                    "data-a-target": "chat-message-text"
                                }, r)
                            }(s, t, n, l, o));
                        case S.a.Mention:
                            var d = "";
                            return function(e) {
                                return e.content && e.content.sender
                            }(s) && t && s.content.sender.toLowerCase() === t.toLowerCase() ? d = "chat-line__message--mention-sender" : function(e) {
                                return e.content && e.content.recipient
                            }(s) && t && s.content.recipient.toLowerCase() === t.toLowerCase() && (d = "chat-line__message--mention-recipient"), r.concat(c.createElement(_.V, {
                                className: d,
                                display: _.H.InlineFlex,
                                key: o,
                                "data-a-target": "chat-message-mention"
                            }, "@" + s.content.recipient));
                        case S.a.Link:
                            return r = r.concat(a(o, s)), e.length > o + 1 && e[o + 1].type === S.a.Link && r.push(" "), r;
                        case S.a.Emote:
                            return r = r.concat(c.createElement(b.a, {
                                key: o,
                                emote: s.content
                            })), e.length > o + 1 && e[o + 1].type === S.a.Emote && r.push(" "), r;
                        case S.a.ClipLink:
                            return i ? r.concat(a(o, s)) : (i = c.createElement(k.a, {
                                key: o,
                                slug: s.content.slug
                            }), r);
                        case S.a.VideoLink:
                            return i ? r.concat(a(o, s)) : (i = c.createElement(y.a, {
                                key: o,
                                id: s.content.id,
                                url: s.content.url
                            }), r);
                        default:
                            return r.concat(c.createElement("span", {
                                key: o
                            }))
                    }
                }, []);
            return i && (r = r.concat(i)), r
        }

        function r(e) {
            var t = Object(h.a)("https://twitch.amazon.com/prime", {
                ref: "subscriptionMessage",
                channel: e
            });
            return c.createElement("a", {
                className: "chat-line__subscribe--prime",
                href: t,
                target: "_blank",
                rel: "noopener"
            }, Object(d.d)("Twitch Prime", "ChatLine"))
        }

        function s(e, t) {
            return Object(d.d)("{userLogin} just subscribed with {service}!", {
                userLogin: e,
                service: t
            }, "ChatLine")
        }

        function o(e, t) {
            return Object(d.d)("{userLogin} just subscribed with a {subTier} sub!", {
                userLogin: e,
                subTier: t
            }, "ChatLine")
        }

        function l(e) {
            return c.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, function(e) {
                var t = e.getHours() % 12;
                0 === t && (t = 12);
                var n = e.getMinutes(),
                    a = n.toString();
                return n < 10 && (a = "0" + a), t + ":" + a
            }(new Date(e)))
        }
        t.e = function() {
            return c.createElement("span", {
                key: "thankyou"
            }, Object(d.d)("Thank you for your feedback!", "ChatLine"))
        }, t.h = i, t.i = function(e) {
            if (e.type === C.a.Ban) return e.reason ? c.createElement("span", {
                className: "chat-line__moderation--ban-with-reason"
            }, Object(d.d)("{userLogin} has been banned. Reason: {reason}", {
                userLogin: e.userLogin,
                reason: e.reason
            }, "ChatLine")) : c.createElement("span", {
                className: "chat-line__moderation--ban"
            }, Object(d.d)("{userLogin}  is now banned from this room.", {
                userLogin: e.userLogin
            }, "ChatLine"));
            if (e.reason && e.duration) {
                var t = Object(d.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                    duration: e.duration,
                    reason: e.reason,
                    userLogin: e.userLogin
                }, "ChatLine");
                return c.createElement("span", {
                    className: "chat-line__moderation--timeout-with-reason"
                }, t)
            }
            return e.duration ? c.createElement("span", {
                className: "chat-line__moderation--timeout"
            }, Object(d.d)("{userLogin} has been timed out for {duration} seconds.", {
                userLogin: e.userLogin,
                duration: e.duration
            }, "ChatLine")) : void 0
        }, t.q = function(e) {
            return e.isPrime ? c.createElement("span", null, s(e.userLogin, r(e.channel))) : c.createElement("span", null, o(e.userLogin, e.tier))
        }, t.p = function(e) {
            return "custom" === e.tier ? c.createElement("span", null, function(e, t) {
                return Object(d.d)("{userLogin} gifted a subscription to {recipient}!", {
                    userLogin: e,
                    recipient: t
                }, "ChatLine")
            }(e.userLogin, e.recipient)) : c.createElement("span", null, function(e, t, n) {
                return Object(d.d)("{userLogin} gifted a {subTier} sub to {recipient}!", {
                    userLogin: e,
                    subTier: t,
                    recipient: n
                }, "ChatLine")
            }(e.userLogin, e.tier, e.recipient))
        }, t.a = function(e) {
            var t = e.daysLeft;
            0 === t && (t = e.hoursLeft);
            var n = {
                bitsTotal: c.createElement("strong", null, Object(g.e)(e.total, {
                    style: "currency",
                    currency: "USD"
                })),
                charityName: c.createElement("strong", null, e.charityName),
                learnMoreURL: c.createElement("a", {
                    href: e.learnMore,
                    target: "_blank"
                }, e.learnMore),
                hashtag: c.createElement("strong", null, e.hashtag),
                timeRemaining: Object(g.e)(t)
            };
            return c.createElement("span", null, 0 === e.daysLeft ? function(e) {
                return Object(d.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more hours to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                    bitsTotal: e.bitsTotal,
                    charityName: e.charityName,
                    timeRemaining: e.timeRemaining,
                    hashtag: e.hashtag,
                    learnMoreURL: e.learnMoreURL
                }, "ChatLine")
            }(n) : function(e) {
                return Object(d.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more days to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                    bitsTotal: e.bitsTotal,
                    charityName: e.charityName,
                    timeRemaining: e.timeRemaining,
                    hashtag: e.hashtag,
                    learnMoreURL: e.learnMoreURL
                }, "ChatLine")
            }(n))
        }, t.l = function(e, t, n, a, u) {
            if (e.user) {
                var p = null;
                e.badges && (p = c.createElement(f.b, {
                    badgeSets: u,
                    badgesToRender: e.badges
                }));
                var m = e.isPrime ? s(e.user.userDisplayName, r(e.channel)) : o(e.user.userDisplayName, e.tier),
                    h = [c.createElement("span", {
                        key: "chat--resubbed"
                    }, m, c.createElement("span", {
                        key: "sub-separator"
                    }, " "), Object(d.d)("{userLogin} subscribed for {months} months in a row!", {
                        userLogin: e.user.userDisplayName,
                        months: e.months
                    }, "ChatLine"))];
                if (e.messageParts && e.user && !e.deleted) {
                    var g = null;
                    t && e.timestamp && (g = l(e.timestamp)), h.push(c.createElement("div", {
                        key: "resub-message",
                        className: "chat-line__subscribe--message"
                    }, g, p, c.createElement(v.a, {
                        userData: e.user
                    }), c.createElement("span", {
                        key: "separator"
                    }, " : "), i(e.messageParts, n, a)))
                }
                return h
            }
            return null
        }, t.n = function(e) {
            var t = e.enabled ? Object(d.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                length: e.length
            }, "ChatLine") : Object(d.d)("This room is no longer in slow mode.", "ChatLine");
            return c.createElement("span", null, t)
        }, t.j = function(e) {
            return c.createElement("span", null, e.message)
        }, t.g = function(e) {
            return c.createElement("span", null, e.message)
        }, t.m = function(e) {
            var t;
            if (e.length > 0) {
                var n = e.join(", ");
                t = Object(d.d)("The moderators of this room are: {moderatorList}", {
                    moderatorList: n
                }, "ChatLine")
            } else t = Object(d.d)("There are no moderators of this room.", "ChatLine");
            return c.createElement("span", null, t)
        }, t.f = function(e) {
            if (e.enabled) {
                var t = 0 === e.length ? Object(d.d)("This room is in followers-only mode.", "ChatLine") : Object(d.d)("This room is now in {length} followers-only mode.", {
                    length: Object(m.a)(60 * e.length)
                }, "ChatLine");
                return c.createElement("span", null, t)
            }
            return c.createElement("span", null, Object(d.d)("This room is no longer in followers-only mode.", "ChatLine"))
        }, t.d = function(e) {
            return e.enabled ? c.createElement("span", null, Object(d.d)("This room is now in emote-only mode.", "ChatLine")) : c.createElement("span", null, Object(d.d)("This room is no longer in emote-only mode.", "ChatLine"))
        }, t.o = function(e) {
            var t = e.enabled ? Object(d.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(d.d)("This room is no longer in subscriber-only mode.", "ChatLine");
            return c.createElement("span", null, t)
        }, t.b = function() {
            return c.createElement("span", null, Object(d.d)("Chat was cleared by a moderator", "ChatLine"))
        }, t.r = l, t.s = function(e) {
            return c.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, function(e, t) {
                void 0 === t && (t = {});
                var n = d.n.intl.getLanguageCode() || "en";
                return Intl.DateTimeFormat(n, t).format(e)
            }(new Date(e), {
                hour: "numeric",
                minute: "numeric"
            }))
        }, t.t = function() {
            return c.createElement("span", null, Object(d.d)("The raid has been cancelled.", "RaidCancelMessage"))
        }, t.c = function(e) {
            return c.createElement(_._19, {
                borderMarked: !0,
                borderBottom: !1
            }, c.createElement(_.V, {
                className: "chat-line__status",
                display: _.H.Flex,
                alignItems: _.c.Center,
                flexWrap: _.K.NoWrap
            }, c.createElement(_.Q, {
                flexShrink: 0
            }, c.createElement("img", {
                src: p.a,
                height: "32",
                width: "32"
            })), c.createElement(_.V, {
                margin: {
                    left: .5
                }
            }, Object(d.d)("<x:boldpurple>{userName}</x:boldpurple>'s Cheer unlocked gifts for <x:bold>{numberOfGifts, number} others</x:bold>!", {
                userName: e.message.user.userDisplayName,
                numberOfGifts: e.selectedCount,
                "x:boldpurple": function(e) {
                    return c.createElement(_._23, {
                        type: _._28.Span,
                        bold: !0,
                        color: _.F.Link
                    }, e)
                },
                "x:bold": function(e) {
                    return c.createElement("strong", null, e)
                }
            }, "Crates"))), c.createElement(_._19, {
                className: "chat-line__status",
                background: _.m.Alt2
            }, c.createElement(_._23, {
                bold: !0,
                color: _.F.Link
            }, Object(d.d)("Cheer 250+ to unlock gifts for others in chat!", "Crates"))))
        }, t.k = function(e, t, n) {
            return 0 === n ? Object(d.d)("<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}!</x:bold>", {
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return c.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage") : Object(d.d)("{numCrates, plural, one {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened a <x:bold>Twitch Crate!</x:bold>} other {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened # <x:bold>Twitch Crates!</x:bold>}}", {
                numCrates: n,
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return c.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage")
        };
        var c = n("U7vG"),
            d = (n.n(c), n("6sO2")),
            u = n("cv4W"),
            p = n.n(u),
            m = n("FsFC"),
            h = n("yDzg"),
            g = n("J4ib"),
            f = n("3T7g"),
            v = n("5Nu7"),
            b = n("hXeO"),
            k = n("5vPJ"),
            y = n("kBA+"),
            C = n("qkCi"),
            S = n("mwvJ"),
            _ = n("Odds")
    },
    gZGZ: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var a = n("TToO"),
            i = n("U7vG"),
            r = n("6sO2"),
            s = n("j7/Y"),
            o = n("w9tK"),
            l = n("vH/s"),
            c = n("CSlQ"),
            d = n("QAcM"),
            u = n("yWCw"),
            p = n("zCIC"),
            m = n("7vx8"),
            h = n("oIkB"),
            g = n("J4ib"),
            f = n("SI0h"),
            v = n("11M/"),
            b = n("RxMT"),
            k = n("2aoH"),
            y = n("5bwi"),
            C = n("WNmM"),
            S = n("Odds"),
            _ = (n("BsP9"), n("2E6s")),
            E = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        leftEdge: 0,
                        containerWidth: 0,
                        hostedChannelDisplayName: null
                    }, t.loadMoreTopClips = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            return a.__generator(this, function(e) {
                                return this.canLoadMore() ? [2, this.props.loadMore()] : [2]
                            })
                        })
                    }, t.canLoadMore = function() {
                        var e = t.props.data;
                        return !e.loading && !e.error && e.user && e.user.clips.pageInfo.hasNextPage
                    }, t.handleHostingChange = function(e) {
                        null === e ? t.setState({
                            hostedChannelDisplayName: null
                        }) : t.props.data.user && e !== t.props.data.user.hosting.login ? t.refetchTimer = setTimeout(function() {
                            return t.props.data.refetch({
                                currentChannelLogin: t.props.channelName
                            })
                        }, g.o.config.hostingCacheDelay) : t.props.data.user && t.props.data.user.hosting.login && t.setState({
                            hostedChannelDisplayName: t.props.data.user.hosting.displayName
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.refetchTimer)
                }, t.prototype.render = function() {
                    var e = i.createElement(S.Z, {
                            fillContent: !0
                        }),
                        t = [];
                    return this.props.data.loading || this.props.data.error || !this.props.data.user || (t = this.props.data.user.clips.edges.map(function(e) {
                        return e.node
                    })), e = this.props.data.error ? i.createElement(u.a, {
                        message: Object(r.d)("Error loading data.", "ChannelClipsContent")
                    }) : this.props.data.user || this.props.data.loading ? i.createElement(y.a, {
                        clips: t,
                        isLoading: this.props.data.loading,
                        pageType: C.b.Channel,
                        updateTimeFilter: this.props.updateTimeFilter,
                        timeFilterValue: this.props.timeFilterValue,
                        loadMoreClips: this.loadMoreTopClips
                    }) : i.createElement(u.a, {
                        message: Object(r.d)("User does not exist", "ChannelClipsContent")
                    }), i.createElement(S.V, {
                        className: "channel-clips-content",
                        display: S.H.Flex,
                        flexDirection: S.J.Column,
                        flexWrap: S.K.NoWrap,
                        fullHeight: !0,
                        fullWidth: !0
                    }, i.createElement(k.a, null, i.createElement(f.a, {
                        currentPage: f.b.Clips,
                        channelLogin: this.props.channelName
                    })), i.createElement(S.V, {
                        display: S.H.Flex,
                        flexGrow: 1,
                        fullHeight: !0
                    }, i.createElement(S.V, {
                        fullWidth: !0,
                        padding: {
                            y: 2,
                            x: 3
                        }
                    }, e, i.createElement(p.a, {
                        loadMore: this.props.loadMore,
                        enabled: this.canLoadMore()
                    })), i.createElement(b.b, null, i.createElement(S._19, {
                        className: "channel-clips__sidebar",
                        background: S.m.Alt2,
                        display: S.H.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        overflow: S._0.Hidden,
                        flexDirection: S.J.Column,
                        flexWrap: S.K.NoWrap,
                        fullHeight: !0
                    }, i.createElement(v.a, {
                        channelLogin: this.props.channelName,
                        clientID: g.o.config.legacyClientID,
                        onHostingChange: this.handleHostingChange
                    })))))
                }, t = a.__decorate([Object(c.c)("ChannelClipsContent"), Object(m.a)(_, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelName,
                                limit: 20,
                                criteria: {
                                    filter: d.a[e.timeFilterValue]
                                }
                            }
                        }
                    },
                    props: function(e) {
                        return a.__assign({}, e, {
                            loadMore: function() {
                                return e.data.fetchMore({
                                    query: _,
                                    variables: a.__assign({}, e.data.variables, {
                                        cursor: e.data.user.clips.edges.length ? e.data.user.clips.edges[e.data.user.clips.edges.length - 1].cursor : null
                                    }),
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult;
                                        return {
                                            user: a.__assign({}, n.user, {
                                                clips: a.__assign({}, n.user.clips, {
                                                    edges: Object(h.b)(e.user.clips.edges, n.user.clips.edges)
                                                })
                                            })
                                        }
                                    }
                                })
                            }
                        })
                    }
                })], t)
            }(i.Component),
            w = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        timeFilterValue: d.b.Week
                    }, t.updateTimeFilter = function(e) {
                        t.setState({
                            timeFilterValue: e
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), r.n.setPageTitle(this.props.match.params.channelName)
                }, t.prototype.render = function() {
                    return i.createElement(E, {
                        channelName: this.props.match.params.channelName,
                        updateTimeFilter: this.updateTimeFilter,
                        timeFilterValue: this.state.timeFilterValue
                    })
                }, t = a.__decorate([Object(c.c)("ClipsChannelPage", {
                    destination: o.a.ChannelClips
                }), Object(s.a)({
                    location: l.PageviewLocation.ChannelClips
                })], t)
            }(i.Component);
        n.d(t, "ChannelClipsPage", function() {
            return w
        })
    },
    gwjw: function(e, t) {},
    hXeO: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var a = n("U7vG"),
            i = (n.n(a), n("8RKZ")),
            r = function(e) {
                var t, n = e.emote,
                    r = n.alt || "";
                return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = a.createElement("strong", {
                    className: "chat-line__message--cheer-amount",
                    style: {
                        color: n.cheerColor
                    }
                }, n.cheerAmount)), a.createElement(i.a, {
                    alt: r,
                    cheerText: t,
                    className: "chat-line__message--emote",
                    srcKey: "1x",
                    srcSet: n.images
                })
            }
    },
    hcyD: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return c
        });
        var a = n("TToO"),
            i = n("6sO2"),
            r = n("vH/s"),
            s = n("l7/s"),
            o = (n.n(s), n("QFW6")),
            l = this,
            c = function(e) {
                return a.__awaiter(l, void 0, void 0, function() {
                    var t, n, l, c;
                    return a.__generator(this, function(d) {
                        switch (d.label) {
                            case 0:
                                t = null, d.label = 1;
                            case 1:
                                return d.trys.push([1, 3, , 4]), [4, i.n.apollo.client.query({
                                    query: s,
                                    variables: {
                                        id: e.channelID
                                    }
                                })];
                            case 2:
                                return t = d.sent(), [3, 4];
                            case 3:
                                return n = d.sent(), i.i.error(n, "ChatEvent query failed."), [3, 4];
                            case 4:
                                return t && t.data || i.i.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), l = t && t.data && t.data.user || null, c = a.__assign({}, Object(o.a)(e), {
                                    broadcast_id: i.m.getVideoPlayerTrackingData().broadcastID,
                                    channel_id: e.channelID,
                                    game: l && l.stream && l.stream.game && l.stream.game.name,
                                    live: !!(l && l.stream && l.stream.id.length > 0),
                                    partner: l && l.isPartner || !1,
                                    play_session_id: i.m.getVideoPlayerTrackingData().playSessionID,
                                    player: e.player,
                                    ritual_nca: e.fromNewChatterRitual || !1,
                                    sub_only_mode: e.subOnlyMode
                                }), i.m.track(r.SpadeEventType.Chat, c), [2]
                        }
                    })
                })
            }
    },
    iJpA: function(e, t, n) {
        "use strict";

        function a() {
            return r.k.get(l, []).filter(function(e) {
                return s.a.has(e)
            })
        }
        t.c = function(e, t) {
            var n = this;
            return function(s) {
                return i.__awaiter(n, void 0, void 0, function() {
                    var n, c;
                    return i.__generator(this, function(i) {
                        return n = new Set(a()), t ? n.add(e) : n.delete(e), c = Array.from(n), r.k.set(l, c), s(Object(o.b)(c)), [2]
                    })
                })
            }
        }, t.a = function() {
            var e = this;
            return function(t) {
                return i.__awaiter(e, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        return r.k.set(l, []), t(Object(o.b)([])), [2]
                    })
                })
            }
        }, t.b = a;
        var i = n("TToO"),
            r = n("6sO2"),
            s = n("D9fv"),
            o = n("V9YC"),
            l = "languageDirectoryFilters"
    },
    iMOk: function(e, t, n) {
        "use strict";

        function a(e) {
            var t, n = Object(r.d)("{bitsAmount} Bits", {
                bitsAmount: e.count.toString()
            }, "Bits--BitsCount");
            if (e.withImage) {
                var a = e.bitsConfig.indexedActions[o.f];
                a || (a = Object(c.b)());
                var u = a.orderedTiers.find(function(t) {
                    return t.bits <= e.count
                });
                if (u) {
                    var p = Object(l.b)(u);
                    return void 0 !== e.themeOverride && (e.themeOverride === s.a.Light ? p.dark = p.light : p.light = p.dark), t = i.createElement(d.a, {
                        className: "bits-count--img",
                        sources: p
                    }), i.createElement("strong", {
                        className: "bits-count",
                        "data-a-target": "bits-count"
                    }, i.createElement("span", null, t, " ", e.withText ? n : ""))
                }
            }
            return i.createElement("strong", {
                className: "bits-count",
                "data-a-target": "bits-count"
            }, i.createElement("span", null, n))
        }
        var i = n("U7vG"),
            r = n("6sO2"),
            s = n("NXs7"),
            o = n("3iBR"),
            l = n("iydZ"),
            c = n("CFVp"),
            d = n("qe65");
        n("1pvm");
        n.d(t, "a", function() {
            return a
        })
    },
    iWdz: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsCard_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "recentMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "bitsBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "totalBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "nextBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "progress"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "current"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "next"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "teams"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 381
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery BitsCard_Bits($name: ID!) {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\nuser(id: $name) {\nid\ndisplayName\ncheer {\nid\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nrecentMinimumBits\nevent\n}\n}\nself {\nbitsBadge {\nid\ntotalBits\nnextBits\nprogress\ncurrent {\n...badge\n}\nnext {\n...badge\n}\n}\n}\ntournament {\nid\nteams {\nid\nname\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = a
    },
    imaO: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RedeemNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemRitualTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "redeemRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 182
            }
        };
        a.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RedeemNewChatterToken($input: RedeemRitualTokenInput!) {\nredeemRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("j/3B").definitions)), e.exports = a
    },
    "j/3B": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualToken"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "RitualToken"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "expiresAt"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "status"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 64
            }
        };
        n.loc.source = {
            body: "fragment ritualToken on RitualToken {\nid\nexpiresAt\nstatus\ntype\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "j7/Y": function(e, t, n) {
        "use strict";

        function a(e) {
            return function(t) {
                var n = function(n) {
                    function a(t) {
                        var a = n.call(this, t) || this;
                        return a.tracked = !1, a.referenceTracking = {}, a.trackPageview = function() {
                            if (!(a.tracked || e.skip && e.skip(a.props))) {
                                a.tracked = !0, l.n.adBlockSentinel.pageTransition();
                                var t = {};
                                "function" == typeof e.properties ? t = e.properties(a.props) : e.properties && (t = i.__assign({}, e.properties));
                                var n = i.__assign({}, a.props);
                                n.location && n.location.state && (t.medium = n.location.state.medium, t.content = n.location.state.content, t.content_index = n.location.state.content_index);
                                var r = a.referenceTracking,
                                    s = r.content,
                                    o = r.medium,
                                    c = r.content_index;
                                l.n.tracking.trackPageview(i.__assign({
                                    content: s,
                                    medium: o,
                                    content_index: c,
                                    location: e.location
                                }, t))
                            }
                        }, l.i.debug("pageViewTracking", e), t.rootLatencyTracker ? t.rootLatencyTracker.setLocation(e.location) : l.i.warn("No latency tracker exists! This means no data will be sent to Spade.", e), a
                    }
                    return i.__extends(a, n), a.prototype.componentDidMount = function() {
                        var e = this;
                        this.referenceTracking = this.stripTTParams(this.props.history.location), this.trackPageview(), this.props.history.listen(function(t, n) {
                            "REPLACE" !== n && (e.tracked = !1, e.referenceTracking = {})
                        })
                    }, a.prototype.componentDidUpdate = function() {
                        this.trackPageview()
                    }, a.prototype.render = function() {
                        return s.createElement(t, i.__assign({}, this.props))
                    }, a.prototype.stripTTParams = function(e) {
                        var t = "" !== e.search ? r.parse(e.search) : {},
                            n = {
                                content: t.tt_content,
                                content_index: t.tt_content_index,
                                medium: t.tt_medium
                            };
                        if (delete t.tt_content, delete t.tt_content_index, delete t.tt_medium, n.medium || n.content) {
                            var a = "",
                                i = r.stringify(t);
                            i.length > 0 && (a = "?" + i), this.props.history.replace({
                                pathname: e.pathname,
                                hash: e.hash,
                                search: a
                            })
                        }
                        return n
                    }, a
                }(s.Component);
                return Object(o.f)(n)
            }
        }
        var i = n("TToO"),
            r = n("OAwv"),
            s = n("U7vG"),
            o = n("F8kA"),
            l = n("6sO2");
        n.d(t, "a", function() {
            return a
        })
    },
    jF7o: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (e) var n = setInterval(function() {
                var a = !1,
                    i = !1;
                try {
                    a = e.closed, i = !!e.success
                } catch (e) {}
                if (a || i) {
                    t(i);
                    try {
                        e.close()
                    } catch (e) {}
                    clearInterval(n)
                }
            }, 500);
            else a.i.warn("[onPopupClose] Attempted to observe a window that failed to open.")
        };
        var a = n("6sO2")
    },
    jML9: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 43
            }
        };
        n.loc.source = {
            body: "query RaidNotification_User {\nuser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jPU6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jxGs: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "c", function() {
            return o
        });
        var a = "AD",
            i = "BUNDLE",
            r = "first_time_purchase",
            s = "single_purchase",
            o = "black_friday_2017"
    },
    "kBA+": function(e, t, n) {
        "use strict";
        var a = n("TToO"),
            i = n("U7vG"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("SZoP"),
            l = n("GxDs"),
            c = n("Odds"),
            d = n("s+oZ"),
            u = {
                ERROR: "video-chat-card-error"
            },
            p = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.video,
                        n = e.error,
                        a = e.loading;
                    if (n || t && !t.owner) return i.createElement(l.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "VideoChatCard"),
                            description: Object(r.d)("We couldn't find that video", "VideoChatCard")
                        }
                    });
                    if (a || !t) return i.createElement(l.a, null);
                    var s = i.createElement(c._23, null, Object(r.c)(new Date(t.publishedAt), "medium"), i.createElement("span", null, " · "), Object(o.a)(t.owner.login, t.owner.displayName));
                    return i.createElement(l.a, {
                        data: {
                            title: t.title,
                            description: s,
                            previewImageURL: t.previewThumbnailURL,
                            contentURL: this.props.url
                        }
                    })
                }, t
            }(i.Component),
            m = function(e) {
                return {
                    variables: {
                        videoID: e.id
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: "cache-first"
                }
            },
            h = Object(s.a)(d, {
                options: m
            })(p);
        n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return h
        })
    },
    kOMe: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_ChannelHeader"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPartner"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "followers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "follows"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 290
            }
        };
        n.loc.source = {
            body: "query ChannelPage_ChannelHeader($login: String!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\nroles {\nisPartner\n}\nstream {\nid\n}\nvideos {\ntotalCount\n}\nfollowers {\ntotalCount\n}\nfollows {\ntotalCount\n}\ncheer {\nid\n}\n}\ncurrentUser {\nid\nroles {\nisStaff\nisSiteAdmin\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    l669: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UnbanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "createdAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\ncreatedAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "l7/s": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_ChatEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 116
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    lGVF: function(e, t) {},
    lTii: function(e, t) {},
    "mR/9": function(e, t) {},
    mbxv: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return l
        });
        var a = n("U7vG"),
            i = (n.n(a), n("+V/3")),
            r = n("Odds"),
            s = n("2IkU"),
            o = (n.n(s), "https://www.twitch.tv/products/turbo?ref=chat_badge"),
            l = function(e) {
                var t = e.badge,
                    n = a.createElement("img", {
                        alt: t.title,
                        className: "chat-badge",
                        src: t.image1x,
                        srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                    }),
                    s = function(e) {
                        switch (e.clickAction) {
                            case i.d:
                                return e.clickURL;
                            case i.b:
                                return e.channelName ? function(e) {
                                    return "https://www.twitch.tv/" + e + "/subscribe?ref=in_chat_subscriber_link"
                                }(e.channelName) : "";
                            case i.c:
                                return o;
                            default:
                                return ""
                        }
                    }(t);
                return "" !== s && (n = a.createElement("a", {
                    href: s,
                    target: "_blank"
                }, n)), a.createElement(r._31, {
                    key: t.image1x,
                    label: t.title,
                    display: r.H.Inline,
                    align: r._32.Left,
                    offsetY: "0.9rem",
                    "data-a-target": "chat-badge"
                }, n)
            }
    },
    nmDn: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserProfileEditor"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 104
            }
        };
        n.loc.source = {
            body: "query UserProfileEditor($login: String!) {\nuser(login: $login) {\nid\nlogin\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    nrdj: function(e, t, n) {
        "use strict";
        var a, i = n("HW6M"),
            r = n("U7vG"),
            s = n("6sO2"),
            o = n("iydZ"),
            l = n("CFVp"),
            c = n("qe65"),
            d = n("Odds");
        n("PPK2");
        ! function(e) {
            e[e.Large = 4] = "Large", e[e.Medium = 3] = "Medium", e[e.Small = 2] = "Small", e[e.ExtraSmall = 1.5] = "ExtraSmall", e[e.ExtremelySmall = 1] = "ExtremelySmall"
        }(a || (a = {}));
        var u = function(e) {
            var t = e.bitsConfig.indexedActions[e.prefix.toLowerCase()];
            t || (t = Object(l.b)());
            var n = t.orderedTiers.find(function(t) {
                return t.bits <= (e.amount || 100)
            });
            n || (n = t.orderedTiers[0]);
            var u = e.display === d.H.Inline || e.display === d.H.InlineFlex || e.display === d.H.InlineBlock,
                p = null,
                m = i("cheermote-for-amount__cheer-amount", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer-amount--medium": e.size === a.Medium
                }, {
                    "cheermote-for-amount__cheer-amount--small": e.size === a.Small || e.size === a.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-amount--extremely-small": e.size === a.ExtremelySmall
                });
            if (e.amount && e.showAmount) {
                var h = e.formattedNumber ? Object(s.e)(e.amount) : e.amount;
                p = r.createElement(d.Q, {
                    padding: e.size === a.Small ? 0 : void 0,
                    textAlign: e.size === a.Small ? d._24.Center : void 0
                }, r.createElement("strong", {
                    className: m,
                    style: {
                        color: n.color
                    }
                }, h))
            }
            var g = i("cheermote-for-amount__cheer-image", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer--inline": u
                }, {
                    "cheermote-for-amount__cheer-image--small": e.size === a.Small
                }, {
                    "cheermote-for-amount__cheer-image--extra-small": e.size === a.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-image--extremely-small": e.size === a.ExtremelySmall
                }),
                f = r.createElement(c.a, {
                    className: g,
                    sources: Object(o.b)(n, e.size || a.Large, e.animated)
                });
            return e.showImage || (f = null), r.createElement(d.V, {
                className: "cheermote-for-amount",
                display: e.display
            }, f, p)
        };
        n.d(t, "a", function() {
            return u
        }), n.d(t, "b", function() {
            return a
        })
    },
    "pV+t": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 62
            }
        };
        n.loc.source = {
            body: "query ChatUser($login: String!) {\nuser(login: $login) {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pexS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsChatCard_Clip"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "slug"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clip"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "curator"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcaster"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "game"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thumbnailURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 166
            }
        };
        n.loc.source = {
            body: "query ClipsChatCard_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nslug\nurl\ncurator {\ndisplayName\n}\nbroadcaster {\ndisplayName\n}\ngame {\ndisplayName\n}\ntitle\nthumbnailURL\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    q4rf: function(e, t) {},
    q8Cw: function(e, t) {},
    qDcU: function(e, t) {},
    qkCi: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var a;
        ! function(e) {
            e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention", e[e.Ban = 3] = "Ban", e[e.Timeout = 4] = "Timeout", e[e.AutoModRejectedPrompt = 5] = "AutoModRejectedPrompt", e[e.AutoModMessageRejected = 6] = "AutoModMessageRejected", e[e.AutoModMessageAllowed = 7] = "AutoModMessageAllowed", e[e.AutoModMessageDenied = 8] = "AutoModMessageDenied", e[e.Connected = 9] = "Connected", e[e.Disconnected = 10] = "Disconnected", e[e.Reconnect = 11] = "Reconnect", e[e.Hosting = 12] = "Hosting", e[e.Unhost = 13] = "Unhost", e[e.Subscription = 14] = "Subscription", e[e.Resubscription = 15] = "Resubscription", e[e.SubGift = 16] = "SubGift", e[e.Clear = 17] = "Clear", e[e.SubscriberOnlyMode = 18] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 19] = "FollowerOnlyMode", e[e.SlowMode = 20] = "SlowMode", e[e.EmoteOnlyMode = 21] = "EmoteOnlyMode", e[e.RoomMods = 22] = "RoomMods", e[e.RoomState = 23] = "RoomState", e[e.Raid = 24] = "Raid", e[e.Unraid = 25] = "Unraid", e[e.Ritual = 26] = "Ritual", e[e.Notice = 27] = "Notice", e[e.Info = 28] = "Info", e[e.BadgesUpdated = 29] = "BadgesUpdated", e[e.Purchase = 30] = "Purchase", e[e.BitsCharity = 31] = "BitsCharity", e[e.CrateGift = 32] = "CrateGift"
        }(a || (a = {}))
    },
    rIzn: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var a = n("6sO2"),
            i = function() {
                return a.k.get("ritualsFeatureFlagOverride", a.b.get("viewer_milestones_enabled", !1))
            }
    },
    rMeN: function(e, t) {},
    "s+oZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "VideoChatCard_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "previewThumbnailURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "90"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "51"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "publishedAt"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 162
            }
        };
        n.loc.source = {
            body: "query VideoChatCard_Video($videoID: ID!) {\nvideo(id: $videoID) {\nid\ntitle\npreviewThumbnailURL(width: 90 height: 51)\npublishedAt\nowner {\nid\nlogin\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    sgUC: function(e, t) {},
    sikP: function(e, t, n) {
        "use strict";

        function a(e) {
            return Object(v.a)(b, e)
        }
        var i = n("TToO"),
            r = n("U7vG"),
            s = n("6sO2"),
            o = n("rCmJ"),
            l = n("Odds"),
            c = (n("XITx"), {
                TITLE: "clips-modal-title",
                MAIN_BODY: "clips-modal-main-body",
                SUCCESS_BODY: "clips-modal-success-body",
                ERROR_BODY: "clips-modal-error-body",
                SUBMIT_BUTTON: "clips-modal-submit-button",
                CANCEL_BUTTON: "clips-modal-cancel-button"
            }),
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderSuccess = function() {
                        return t.props.successContent ? r.createElement(l._19, {
                            "data-test-selector": c.SUCCESS_BODY,
                            padding: {
                                x: 2,
                                y: 1
                            },
                            margin: {
                                bottom: 1
                            },
                            borderMarked: !0,
                            background: l.m.Alt,
                            fullWidth: !0
                        }, r.createElement(l._23, {
                            type: l._28.Strong
                        }, t.props.successContent)) : null
                    }, t.renderError = function() {
                        return t.props.errorContent ? r.createElement(l._19, {
                            "data-test-selector": c.ERROR_BODY,
                            padding: {
                                x: 1,
                                y: .5
                            },
                            margin: {
                                bottom: 1
                            },
                            borderMarked: !0,
                            background: l.m.Alt,
                            fullWidth: !0
                        }, r.createElement(l._23, {
                            type: l._28.Strong,
                            color: l.F.Error
                        }, t.props.errorContent)) : null
                    }, t.onSubmit = function() {
                        t.props.onSubmit()
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.successContent ? r.createElement(o.a, {
                        onClickOut: this.props.onClose
                    }, r.createElement(l._19, {
                        padding: 2,
                        background: l.m.Base,
                        className: "clip-modal"
                    }, this.renderSuccess(), r.createElement(l.V, {
                        display: l.H.Flex,
                        justifyContent: l.U.Center
                    }, r.createElement(l.V, {
                        margin: {
                            x: 1
                        }
                    }, r.createElement(l.u, {
                        "data-test-selector": c.CANCEL_BUTTON,
                        onClick: this.props.onClose
                    }, Object(s.d)("Close", "ClipsModal")))))) : r.createElement(o.a, {
                        onClickOut: this.props.onClose
                    }, r.createElement(l._19, {
                        padding: 2,
                        background: l.m.Base,
                        className: "clip-modal"
                    }, r.createElement(l._19, {
                        "data-test-selector": c.TITLE,
                        borderBottom: !0,
                        margin: {
                            bottom: 2
                        },
                        padding: {
                            bottom: 1
                        }
                    }, this.props.title), r.createElement(l._19, {
                        "data-test-selector": c.MAIN_BODY,
                        borderBottom: !0,
                        margin: {
                            bottom: 2
                        },
                        padding: {
                            bottom: 2
                        }
                    }, this.renderError(), this.props.body), r.createElement(l.V, {
                        display: l.H.Flex,
                        justifyContent: l.U.Center
                    }, r.createElement(l.V, {
                        margin: {
                            x: 1
                        }
                    }, r.createElement(l.u, {
                        "data-test-selector": c.CANCEL_BUTTON,
                        type: l.z.Text,
                        onClick: this.props.onClose
                    }, Object(s.d)("Cancel", "ClipsModal"))), r.createElement(l.V, {
                        margin: {
                            x: 1
                        }
                    }, r.createElement(l.u, {
                        "data-test-selector": c.SUBMIT_BUTTON,
                        type: this.props.buttonType ? this.props.buttonType : l.z.Default,
                        onClick: this.onSubmit,
                        disabled: this.props.submitDisabled
                    }, this.props.buttonContent), this.props.isLoading && r.createElement(l.Z, {
                        delay: 0
                    })))))
                }, t
            }(r.Component),
            u = n("1OO3"),
            p = n("CSlQ"),
            m = 86400,
            h = {
                isLoading: !1,
                hasErrored: !1,
                hasSucceeded: !1
            },
            g = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.renderTitle = function() {
                        return t.props.isTemporary ? r.createElement(l._23, {
                            type: l._28.H5,
                            ellipsis: !0
                        }, Object(s.d)("Timeout this Clip Creator for 24 hours from Your Channel", "ClipsModalBanUser")) : r.createElement(l._23, {
                            type: l._28.H5,
                            ellipsis: !0
                        }, Object(s.d)("Ban this Clip Creator from Your Channel", "ClipsModalBanUser"))
                    }, t.renderBodyText = function() {
                        return t.props.isTemporary ? r.createElement(l._23, null, Object(s.d)("{clipCreator} will temporarily be timed out from creating clips and chatting in your channel for 24 hours.", {
                            clipCreator: t.props.clip.curator.displayName
                        }, "ClipsModalBanUser")) : r.createElement(l._23, null, Object(s.d)("{clipCreator} will be permanently banned from creating clips and chatting in your channel.", {
                            clipCreator: t.props.clip.curator.displayName
                        }, "ClipsModalBanUser"))
                    }, t.renderButtonText = function() {
                        return t.props.isTemporary ? Object(s.d)("Timeout User", "ClipsModalBanUser") : Object(s.d)("Ban User", "ClipsModalBanUser")
                    }, t.renderSuccess = function() {
                        return t.state.hasSucceeded ? Object(s.d)("Success!", "ClipsModalBanUser") : null
                    }, t.renderFailure = function() {
                        return t.state.hasErrored ? t.props.isTemporary ? Object(s.d)("There was a problem timing out this clip creator", "ClipsModalBanUser") : Object(s.d)("There was a problem banning this clip creator", "ClipsModalBanUser") : null
                    }, t.banUser = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        this.setState({
                                            isLoading: !0,
                                            hasSucceeded: !1,
                                            hasErrored: !1
                                        }), e = this.props.clip.curator.login, t = this.props.isTemporary ? this.props.onBanUser(e, m) : this.props.onBanUser(e), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, t];
                                    case 2:
                                        return n.sent(), this.setState({
                                            hasSucceeded: !0,
                                            isLoading: !1
                                        }), [3, 4];
                                    case 3:
                                        return n.sent(), this.setState({
                                            hasErrored: !0,
                                            isLoading: !1
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.state = h, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return r.createElement(d, {
                        onSubmit: this.banUser,
                        onClose: this.props.onClose,
                        title: this.renderTitle(),
                        body: this.renderBodyText(),
                        buttonContent: this.renderButtonText(),
                        buttonType: l.z.Alert,
                        submitDisabled: this.state.isLoading || this.state.hasSucceeded,
                        successContent: this.renderSuccess(),
                        errorContent: this.renderFailure(),
                        isLoading: this.state.isLoading
                    })
                }, t
            }(r.Component),
            f = Object(p.c)("ClipsModalBanUser")(Object(u.a)(function(e) {
                return {
                    channelID: e.clip.broadcaster.id
                }
            })(g)),
            v = n("7vx8"),
            b = n("wnjK"),
            k = (n("lTii"), this),
            y = {
                isLoading: !1,
                hasErrored: !1,
                hasSucceeded: !1
            },
            C = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.onDeleteClick = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            return i.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            isLoading: !0,
                                            hasSucceeded: !1,
                                            hasErrored: !1
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, 3, , 4]), [4, this.props.deleteClip(this.props.clip)];
                                    case 2:
                                        return e.sent(), this.setState({
                                            isLoading: !1,
                                            hasSucceeded: !0
                                        }), [3, 4];
                                    case 3:
                                        return e.sent(), this.setState({
                                            isLoading: !1,
                                            hasErrored: !0
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.state = y, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = [r.createElement(l._23, {
                            key: "title",
                            type: l._28.H4
                        }, Object(s.d)("Delete This Clip", "ClipsModalDelete")), r.createElement(l.V, {
                            key: "message",
                            margin: {
                                top: 1
                            }
                        }, r.createElement(l._23, {
                            type: l._28.P,
                            color: l.F.Alt2
                        }, Object(s.d)("This clip will be permanently deleted.", "ClipsModalDelete")))],
                        t = r.createElement(l._19, {
                            display: l.H.Flex,
                            flexWrap: l.K.NoWrap
                        }, r.createElement(l.V, {
                            className: "clips-modal-delete__thumb",
                            margin: {
                                right: 1
                            }
                        }, r.createElement(l.j, {
                            ratio: l.k.Aspect16x9
                        }, r.createElement("img", {
                            src: this.props.clip.thumbnailURL
                        }))), r.createElement(l.V, null, r.createElement(l._23, {
                            type: l._28.H5
                        }, this.props.clip.title), r.createElement(l._23, {
                            color: l.F.Alt2
                        }, Object(s.d)("{created, date, medium}", {
                            created: new Date(this.props.clip.createdAt)
                        }, "ClipsModalDelete"), " • ", Object(s.d)("Clipped by {curator}", {
                            curator: this.props.clip.curator.login
                        }, "ClipsModalDelete")), r.createElement(l._23, {
                            color: l.F.Alt2
                        }, Object(s.d)("{viewCount, number} views", {
                            viewCount: this.props.clip.viewCount
                        }, "ClipsModalDelete"))));
                    return r.createElement(d, {
                        onSubmit: this.onDeleteClick,
                        onClose: this.props.onClose,
                        title: e,
                        body: t,
                        buttonContent: Object(s.d)("Delete", "ClipsModalDelete"),
                        buttonType: l.z.Alert,
                        submitDisabled: this.state.hasSucceeded || this.state.isLoading,
                        successContent: this.state.hasSucceeded ? Object(s.d)("Success!", "ClipsModalDelete") : null,
                        errorContent: this.state.hasErrored ? Object(s.d)("There was a problem deleting this clip.", "ClipsModalDelete") : null,
                        isLoading: this.state.isLoading
                    })
                }, t
            }(r.Component),
            S = a({
                props: function(e) {
                    return {
                        deleteClip: function(t) {
                            return i.__awaiter(k, void 0, void 0, function() {
                                var n;
                                return i.__generator(this, function(a) {
                                    switch (a.label) {
                                        case 0:
                                            return a.trys.push([0, 2, , 3]), [4, e.mutate({
                                                variables: {
                                                    input: {
                                                        slugs: [t.slug]
                                                    }
                                                }
                                            })];
                                        case 1:
                                            return a.sent(), e.ownProps.onDelete && e.ownProps.onDelete(t), [3, 3];
                                        case 2:
                                            throw n = a.sent(), s.i.error(n, "Failed to delete clip"), n;
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })(C),
            _ = n("BhyV"),
            E = n("wqRA"),
            w = this,
            N = {
                isLoading: !1,
                hasErrored: !1,
                hasSucceeded: !1
            },
            D = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.deleteAll = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            return i.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            isLoading: !0,
                                            hasSucceeded: !1,
                                            hasErrored: !1
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, 3, , 4]), [4, this.props.deleteAllClips(this.props.broadcastID, this.props.videoID)];
                                    case 2:
                                        return e.sent(), this.setState({
                                            isLoading: !1,
                                            hasSucceeded: !0
                                        }), [3, 4];
                                    case 3:
                                        return e.sent(), this.setState({
                                            isLoading: !1,
                                            hasErrored: !0
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.renderSuccess = function() {
                        return t.state.hasSucceeded ? Object(s.d)("A request has been made to delete the clip. Please wait a few minutes for this to take effect.", "ClipsModalDeleteAll") : null
                    }, t.renderFailure = function() {
                        return t.state.hasErrored ? Object(s.d)("There was a problem deleting this clip.", "ClipsModalDeleteAll") : null
                    }, t.state = N, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = r.createElement(l._23, {
                        type: l._28.P
                    }, Object(s.d)("This clip and all other clips created from the same video will be permanently deleted.", "ClipsModalDeleteAll"));
                    return r.createElement(d, {
                        onSubmit: this.deleteAll,
                        onClose: this.props.onClose,
                        title: r.createElement(l._23, {
                            type: l._28.H4
                        }, Object(s.d)("Delete All Clips from Related Video", "ClipsModalDeleteAll")),
                        body: e,
                        buttonContent: Object(s.d)("Delete", "ClipsModalDeleteAll"),
                        buttonType: l.z.Alert,
                        submitDisabled: this.state.isLoading || this.state.hasSucceeded || "" === this.props.broadcastID,
                        isLoading: this.state.isLoading,
                        successContent: this.renderSuccess(),
                        errorContent: this.renderFailure()
                    })
                }, t
            }(r.Component),
            O = Object(_.compose)(Object(p.c)("ClipsModalDeleteAll"), a({
                props: function(e) {
                    return {
                        deleteAllClips: function(t, n) {
                            return i.__awaiter(w, void 0, void 0, function() {
                                var a, r, o;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            return i.trys.push([0, 6, , 7]), a = void 0, n ? [4, e.mutate({
                                                variables: {
                                                    input: {
                                                        videoID: n
                                                    }
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return r = i.sent(), a = r.data, [3, 5];
                                        case 2:
                                            return t ? [4, e.mutate({
                                                variables: {
                                                    input: {
                                                        broadcastID: t
                                                    }
                                                }
                                            })] : [3, 4];
                                        case 3:
                                            return r = i.sent(), a = r.data, [3, 5];
                                        case 4:
                                            throw new Error("Invalid broadcastID specified for deleteAllClips");
                                        case 5:
                                            return e.ownProps.onDeleteAll && e.ownProps.onDeleteAll(a.deleteClips.clips), [3, 7];
                                        case 6:
                                            throw o = i.sent(), s.i.error(o, "Failed to delete clips from VOD"), o;
                                        case 7:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            }), Object(v.a)(E, {
                props: function(e) {
                    var t = e.data.clip;
                    return t ? {
                        videoID: t.video ? t.video.id : null,
                        broadcastID: t.broadcast.id
                    } : {
                        videoID: null,
                        broadcastID: ""
                    }
                },
                options: function(e) {
                    return {
                        variables: {
                            slug: e.clip.slug
                        }
                    }
                }
            }))(D),
            T = this,
            I = {
                isLoading: !1,
                hasErrored: !1,
                hasSucceeded: !1
            },
            L = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.renderSuccess = function() {
                        return t.state.hasSucceeded ? Object(s.d)("Clips successfully deleted.", "ClipsModalBatchDelete") : null
                    }, t.renderError = function() {
                        return t.state.hasErrored ? Object(s.d)("There was a problem deleting this clip.", "ClipsModalBatchDelete") : null
                    }, t.onDeleteClick = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            return i.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            isLoading: !0,
                                            hasSucceeded: !1,
                                            hasErrored: !1
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, 3, , 4]), [4, this.props.deleteClips()];
                                    case 2:
                                        return e.sent(), this.setState({
                                            hasSucceeded: !0,
                                            isLoading: !1
                                        }), [3, 4];
                                    case 3:
                                        return e.sent(), this.setState({
                                            hasErrored: !0,
                                            isLoading: !1
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.state = I, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = r.createElement(l._23, {
                            type: l._28.H4
                        }, Object(s.d)("Delete these clips?", "ClipsModalBatchDelete")),
                        t = r.createElement(l._23, {
                            type: l._28.P
                        }, Object(s.d)("These clips will be permanently deleted. Are you sure?", "ClipsModalBatchDelete"));
                    return r.createElement(d, {
                        onSubmit: this.onDeleteClick,
                        onClose: this.props.onClose,
                        title: e,
                        body: t,
                        buttonContent: Object(s.d)("Delete", "ClipsModalBatchDelete"),
                        buttonType: l.z.Alert,
                        submitDisabled: this.state.hasSucceeded || this.state.isLoading,
                        isLoading: this.state.isLoading,
                        successContent: this.renderSuccess(),
                        errorContent: this.renderError()
                    })
                }, t
            }(r.Component),
            M = a({
                props: function(e) {
                    return {
                        deleteClips: function() {
                            return i.__awaiter(T, void 0, void 0, function() {
                                var t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            return n.trys.push([0, 2, , 3]), [4, e.mutate({
                                                variables: {
                                                    input: {
                                                        slugs: e.ownProps.clips.map(function(e) {
                                                            return e.slug
                                                        })
                                                    }
                                                }
                                            })];
                                        case 1:
                                            return n.sent(), e.ownProps.onBatchDelete && e.ownProps.onBatchDelete(), [3, 3];
                                        case 2:
                                            throw t = n.sent(), s.i.error(t, "Failed to delete clips"), t;
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })(L);
        n.d(t, "a", function() {
            return d
        }), n.d(t, "b", function() {
            return f
        }), n.d(t, "d", function() {
            return S
        }), n.d(t, "e", function() {
            return O
        }), n.d(t, "c", function() {
            return M
        })
    },
    ssrl: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "NewChatterRitual_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "ritualTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "ritualToken"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 167
            }
        };
        a.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nquery NewChatterRitual_Channel($id: ID!) {\nchannel: user(id: $id) {\nid\nself {\nritualTokens {\n...ritualToken\n}\n}\nstream {\nid\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("j/3B").definitions)), e.exports = a
    },
    tNBv: function(e, t) {},
    thJT: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RequestNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RequestRitualTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        a.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RequestNewChatterToken($input: RequestRitualTokenInput!) {\nrequestRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("j/3B").definitions)), e.exports = a
    },
    tjbt: function(e, t, n) {
        "use strict";
        (function(e) {
            function a(e) {
                return !e.firstPageLoaded || !Object(k.a)() || !e.isLoggedIn || e.isEmbedded || e.isPopout
            }
            n.d(t, "a", function() {
                return I
            });
            var i, r = n("TToO"),
                s = n("U7vG"),
                o = (n.n(s), n("BhyV")),
                l = (n.n(o), n("RH2O")),
                c = n("6sO2"),
                d = n("7vx8"),
                u = n("RweG"),
                p = n("WIs4"),
                m = n("C8Io"),
                h = n("oIkB"),
                g = n("HZww"),
                f = n("Aj/L"),
                v = n("aUOx"),
                b = n("QCOJ"),
                k = n("rIzn"),
                y = n("hcyD"),
                C = n("KfLc"),
                S = n("yqxY"),
                _ = n("Tur5"),
                E = n("ssrl"),
                w = (n.n(E), n("Ti/Y")),
                N = (n.n(w), n("imaO")),
                D = (n.n(N), n("thJT")),
                O = (n.n(D), 3e5),
                T = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            closedByError: !1,
                            isLive: !1
                        }, t.eligibilityTimeouts = {}, t.expirationTimeouts = {}, t.getBannerMessage = function() {
                            return Object(c.d)("Click an emote to say hello!", "NewChatterRitual")
                        }, t.getLiveStatus = function(e) {
                            var t = e.pubsub.messages.streamDown ? e.pubsub.messages.streamDown.server_time : 0,
                                n = e.pubsub.messages.streamUp ? e.pubsub.messages.streamUp.server_time : 0;
                            return t || n ? n > t : e.data && e.data.channel && !!e.data.channel.stream.id || !1
                        }, t.setEligibilityTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), a = 0, i = Object.keys(t.eligibilityTimeouts); a < i.length; a++) {
                                var r = i[a];
                                n.has(r) || (clearTimeout(t.eligibilityTimeouts[r]), delete t.eligibilityTimeouts[r])
                            }
                            n.forEach(function(e) {
                                t.eligibilityTimeouts[e] || (t.eligibilityTimeouts[e] = setTimeout(function() {
                                    delete t.eligibilityTimeouts[e], t.isEligible = !0, t.state.isLive && t.requestRitualToken()
                                }, O))
                            })
                        }, t.requestRitualToken = function() {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return r.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            Object(C.e)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), e = r.__assign({}, Object(h.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            })), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.requestToken(e)];
                                        case 2:
                                            return n.sent(), this.isEligible = !1, [3, 4];
                                        case 3:
                                            return t = n.sent(), c.i.error(t, "Failed to request new chatter ritual token."), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.setExpirationTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), a = 0, i = Object.keys(t.expirationTimeouts); a < i.length; a++) {
                                var r = i[a];
                                n.has(r) || (clearTimeout(t.expirationTimeouts[r]), delete t.expirationTimeouts[r])
                            }
                            e.forEach(function(e) {
                                if (!t.expirationTimeouts[e.id] && e.expiresAt && new Date(e.expiresAt).valueOf() > Date.now()) {
                                    var n = new Date(e.expiresAt).valueOf() - Date.now();
                                    t.expirationTimeouts[e.id] = setTimeout(t.expireRitualToken.bind(e.id), n)
                                }
                            })
                        }, t.expireRitualToken = function(e) {
                            delete t.expirationTimeouts[e];
                            Object(h.d)(E, {
                                id: t.props.channelID
                            }, function(t) {
                                return t.channel && (t.channel.self.ritualTokens = t.channel.self.ritualTokens.filter(function(t) {
                                    return t.id === e
                                })), t
                            })
                        }, t.redeemRitualToken = function(e, n) {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var t, a, i;
                                return r.__generator(this, function(s) {
                                    switch (s.label) {
                                        case 0:
                                            Object(y.a)({
                                                channelID: this.props.channelID,
                                                channelLogin: this.props.channelLogin,
                                                isHostMode: this.props.isHostMode,
                                                fromNewChatterRitual: !0,
                                                subOnlyMode: this.props.isSubsOnlyModeEnabled,
                                                player: this.props.isEmbedded || this.props.isPopout ? b.a.Embed : b.a.Web
                                            }), Object(C.d)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID,
                                                userMessage: n
                                            }), t = r.__assign({}, Object(h.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter,
                                                messageText: n
                                            }), {
                                                optimisticResponse: {
                                                    redeemRitualToken: {
                                                        __typename: "RedeemRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Redeemed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), a = null, s.label = 1;
                                        case 1:
                                            return s.trys.push([1, 3, , 4]), [4, this.props.redeemToken(t)];
                                        case 2:
                                            return a = s.sent(), [3, 4];
                                        case 3:
                                            return i = s.sent(), c.i.error(i, "Failed to redeem new chatter ritual."), this.handleGenericError(), [2];
                                        case 4:
                                            if (a.data.redeemRitualToken.error) switch (a.data.redeemRitualToken.error.code) {
                                                case _.RitualTokenMutationErrors.UserBanned:
                                                case _.RitualTokenMutationErrors.UserNotFollowing:
                                                case _.RitualTokenMutationErrors.UserNotSubbed:
                                                case _.RitualTokenMutationErrors.UserTimedOut:
                                                    return this.props.onSendMessage(n), this.setState({
                                                        closedByError: !0
                                                    }), [2];
                                                default:
                                                    return this.handleGenericError(), [2]
                                            }
                                            return a.data.redeemRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.dismissRitualToken = function(e) {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var t, n, a;
                                return r.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            Object(C.a)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), t = r.__assign({}, Object(h.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            }), {
                                                optimisticResponse: {
                                                    dismissRitualToken: {
                                                        __typename: "DismissRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Dismissed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), n = null, i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), [4, this.props.dismissToken(t)];
                                        case 2:
                                            return n = i.sent(), [3, 4];
                                        case 3:
                                            return a = i.sent(), c.i.error(a, "Failed to redeem new chatter ritual."), [3, 4];
                                        case 4:
                                            return n && n.data.dismissRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.handleGenericError = function() {
                            t.props.onPushMessage(Object(v.a)(Object(c.d)("Something went wrong.", "NewChatterRitual"))), t.setState({
                                closedByError: !0
                            })
                        }, t.clearAllTimers = function() {
                            for (var e = 0, n = Object.keys(t.eligibilityTimeouts); e < n.length; e++) {
                                var a = n[e];
                                clearTimeout(t.eligibilityTimeouts[a])
                            }
                            t.eligibilityTimeouts = {};
                            for (var i = 0, r = Object.keys(t.expirationTimeouts); i < r.length; i++) {
                                a = r[i];
                                clearTimeout(t.expirationTimeouts[a])
                            }
                            t.expirationTimeouts = {}
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        this.props.data && this.props.data.loading || !e.data || !e.data.loading || Object(C.b)({
                            channelID: this.props.channelID
                        });
                        var t = this.getLiveStatus(e);
                        if (this.state.isLive !== t && (this.setState({
                                isLive: t
                            }), t && this.isEligible && this.requestRitualToken()), e.data && e.data.channel) {
                            var n = e.data.channel.self.ritualTokens;
                            this.setEligibilityTimeouts(n.filter(function(e) {
                                return e.status === _.RitualTokenStatus.Eligible
                            })), this.setExpirationTimeouts(n.filter(function(e) {
                                return !!e.expiresAt
                            }))
                        } else this.clearAllTimers()
                    }, t.prototype.componentWillUnmount = function() {
                        this.clearAllTimers()
                    }, t.prototype.render = function() {
                        return this.props.data && this.props.data.channel ? this.state.closedByError || !this.state.isLive ? null : s.createElement(S.a, {
                            bannerMessage: this.getBannerMessage(),
                            onRitualDismissed: this.dismissRitualToken,
                            onRitualRedeemed: this.redeemRitualToken,
                            ritualTokens: this.props.data.channel.self.ritualTokens
                        }) : null
                    }, t
                }(s.Component),
                I = Object(o.compose)(Object(l.a)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded,
                        isLoggedIn: Object(f.d)(e),
                        isSubsOnlyModeEnabled: e.chat.subsOnlyMode
                    }
                }, null), Object(d.a)(E, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    },
                    skip: a
                }), Object(p.a)(function(t) {
                    return {
                        query: E,
                        variables: {
                            id: t.channelID
                        },
                        topic: Object(g.h)(t.channelID),
                        type: m.c.UpdatedChannelChatProperty,
                        mutator: function(n, a) {
                            return n.data.is_rituals_enabled ? e(function() {
                                t.data && t.data.refetch && t.data.refetch()
                            }) : a.channel && (a.channel.self.ritualTokens = []), a
                        },
                        skip: a(t)
                    }
                }), Object(u.a)([{
                    topic: function(e) {
                        return Object(g.o)(e.channelID)
                    },
                    mapMessageTypesToProps: (i = {}, i[m.c.ChannelStreamUp] = "streamUp", i[m.c.ChannelStreamDown] = "streamDown", i),
                    skip: a
                }]), Object(d.a)(w, {
                    name: "dismissToken"
                }), Object(d.a)(N, {
                    name: "redeemToken"
                }), Object(d.a)(D, {
                    name: "requestToken"
                }))(T)
        }).call(t, n("162o").setImmediate)
    },
    v2Uk: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualsEnabled"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "settings"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isRitualsEnabled"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isRitualsWhitelisted"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "fragment ritualsEnabled on User {\nid\nsettings {\nisRitualsEnabled\nisRitualsWhitelisted\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vDGQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "c", function() {
            return o
        }), t.d = function(e) {
            if (e.action && e.userId) {
                var t = {
                    location: r.PageviewLocation.Channel,
                    action: e.action,
                    target: e.target,
                    type: e.type,
                    channel_id: e.channelId,
                    reward_id: e.rewardID,
                    user_id: e.userId,
                    time: Date.now()
                };
                i.n.tracking.track(r.SpadeEventType.CrateNotificationAction, t)
            }
        };
        var a, i = n("6sO2"),
            r = n("vH/s");
        ! function(e) {
            e.Close = "close", e.DontShowThis = "dont_show_this", e.LearnMore = "learn_more", e.OpenLater = "open_later", e.OpenNow = "open_now", e.Timeout = "timeout", e.TryBeta = "try_beta", e.View = "view"
        }(a || (a = {}));
        var s;
        ! function(e) {
            e.Inventory = "inventory", e.OpenCrate = "open_crate"
        }(s || (s = {}));
        var o;
        ! function(e) {
            e.Ftue = "ftue", e.ReceiveCrate = "receive_crate", e.ReceiveGift = "receive_giveaway_item", e.BitsIntro = "bits_intro"
        }(o || (o = {}))
    },
    vLl9: function(e, t, n) {
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 193
            }
        };
        a.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatList_Badges($channelLogin: String!) {\nbadges {\n...badge\n}\nuser(login: $channelLogin) {\nid\nbroadcastBadges {\n...badge\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var i = {};
        a.definitions = a.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !i[t] && (i[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = a
    },
    vQzq: function(e, t) {},
    vh75: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "i", function() {
            return o
        }), n.d(t, "f", function() {
            return l
        }), n.d(t, "g", function() {
            return c
        }), n.d(t, "h", function() {
            return d
        }), n.d(t, "j", function() {
            return u
        }), n.d(t, "l", function() {
            return p
        }), n.d(t, "k", function() {
            return m
        }), n.d(t, "o", function() {
            return h
        }), n.d(t, "n", function() {
            return g
        }), n.d(t, "q", function() {
            return f
        }), n.d(t, "p", function() {
            return v
        }), n.d(t, "s", function() {
            return b
        }), n.d(t, "r", function() {
            return k
        }), n.d(t, "a", function() {
            return y
        }), n.d(t, "m", function() {
            return C
        }), t.I = function(e, t) {
            return {
                type: u,
                channel: e,
                messages: t
            }
        }, t.w = function() {
            return {
                type: i
            }
        }, t.G = function() {
            return {
                type: b
            }
        }, t.B = function() {
            return {
                type: k
            }
        }, t.K = function() {
            return {
                type: r
            }
        }, t.H = function() {
            return {
                type: a
            }
        }, t.D = function() {
            return {
                type: p
            }
        }, t.y = function() {
            return {
                type: m
            }
        }, t.C = function() {
            return {
                type: o
            }
        }, t.v = function(e, t) {
            return {
                type: d,
                channelLogin: e,
                duration: t
            }
        }, t.u = function(e) {
            return {
                type: c,
                duration: e
            }
        }, t.x = function() {
            return {
                type: l
            }
        }, t.E = function() {
            return {
                type: h
            }
        }, t.z = function() {
            return {
                type: g
            }
        }, t.F = function() {
            return {
                type: f
            }
        }, t.A = function() {
            return {
                type: v
            }
        }, t.t = function(e, t) {
            return {
                type: y,
                command: e.toLowerCase(),
                handler: t
            }
        }, t.J = function(e) {
            return {
                type: C,
                command: e.toLowerCase()
            }
        };
        var a = "chat.CHAT_HIDDEN",
            i = "chat.CHAT_RESET",
            r = "chat.CHAT_SHOWN",
            s = "chat.EMOTE_SETS_UPDATED",
            o = "chat.FOLLOWER_MODE_ENABLED",
            l = "chat.FOLLOWER_MODE_DISABLED",
            c = "chat.FOLLOWER_MODE_DURATION_CHANGED",
            d = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
            u = "chat.MESSAGES_UPDATED",
            p = "chat.MODICONS_ENABLED",
            m = "chat.MOD_ICONS_DISABLED",
            h = "chat.SLOW_MODE_ENABLED",
            g = "chat.SLOW_MODE_DISABLED",
            f = "chat.SUBS_ONLY_MODE_ENABLED",
            v = "chat.SUBS_ONLY_MODE_DISABLED",
            b = "chat.TIMESTAMPS_ENABLED",
            k = "chat.TIMESTAMPS_DISABLED",
            y = "chat.ADD_COMMAND",
            C = "chat.REMOVE_COMMAND"
    },
    w9tK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var a = {
            BrowseCommunities: "browse.communities",
            BrowseCreative: "browse.creative",
            BrowseGamesAndCommunities: "browse.games-and-communities",
            ChannelIndex: "channel.index.index",
            ChannelDashboardAchievements: "channel.dashboard.achievements",
            ChannelDashboardExtensions: "channel.dashboard.extensions",
            ChannelDashboardModeration: "channel.dashboard.moderation",
            ChannelDashboardStreamSummary: "channel.dashboard.stream-summary",
            ChannelClips: "channel.clips",
            ChannelClipsManager: "videoManager.clips.channel",
            ChannelCollections: "channel.collections",
            ChannelEvents: "channel.events",
            ChatPopout: "chat",
            DevOnly: "dev",
            DirectoryCommunityByLanguage: "directory.community.language",
            DirectoryCommunityIndex: "directory.community.index",
            DirectoryCommunityDetails: "directory.community.details",
            DirectoryGames: "directory.games",
            DirectoryPopular: "directory.popular",
            DirectoryPopularByLanguage: "directory.popular.language",
            DirectoryGameIndex: "directory.game.index",
            DirectoryGameClips: "directory.game.clips",
            DirectoryGameDetails: "directory.game.details",
            DirectoryGameVideos: "directory.game.videos",
            DirectoryFollowingIndex: "directory.following.index",
            DirectoryFollowingGames: "directory.following.games",
            DirectoryFollowingVideos: "directory.following.videos.video-type",
            DirectoryFollowingHosts: "directory.following.hosts",
            DirectoryFollowingLiveChannels: "directory.following.channels",
            DirectoryFollowingCommunities: "directory.following.communities",
            EmailVerification: "emailVerification",
            EventDetails: "event.details",
            ForYou: "for-you",
            Index: "index",
            MyClipsManager: "videoManager.clips",
            NotificationSettingsPage: "settings.notificationSettings",
            OnboardingIndex: "onboarding.index",
            ReportUserPage: "reportUser.page",
            SettingsChannel: "private/embed-components",
            SettingsConnections: "private/embed-components",
            SettingsNotifications: "settings.notifications",
            SettingsPrime: "settings.prime",
            SettingsProfile: "settings.profile",
            SettingsSecurity: "private/embed-components",
            StoreMerchPage: "store.merch",
            SubsLandingPage: "subs.landing",
            SubsBroadcasterPage: "subs.broadcaster",
            TeamsDashboardRevenue: "teams.dashboard.revenue",
            TeamsDashboardStats: "teams.dashboard.stats",
            TeamsDashboardMembers: "teams.dashboard.members",
            TeamsDashboardFeaturedChannels: "teams.dashboard.featured-channels",
            TeamsDashboardSettings: "teams.dashboard.settings",
            VideosPage: "videos",
            VideoWatchPage: "video",
            VideoManagerPage: "videoManager.page",
            VideoManagerEditPropertiesPage: "videoManager.edit",
            VideoManagerUploadPage: "videoManager.upload",
            VideoManagerUploadListPage: "videoManager.upload-list"
        }
    },
    weaG: function(e, t) {},
    wnjK: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Clips_DeleteClips"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DeleteClipsInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "deleteClips"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "clips"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "slug"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 106
            }
        };
        n.loc.source = {
            body: "mutation Clips_DeleteClips($input: DeleteClipsInput!) {\ndeleteClips(input: $input) {\nclips {\nid\nslug\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    wqRA: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsModalDeleteAll_Clip"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "slug"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clip"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "video"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcast"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 101
            }
        };
        n.loc.source = {
            body: "query ClipsModalDeleteAll_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nvideo {\nid\n}\nbroadcast {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    x583: function(e, t) {},
    xZvS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissPurchaseToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPurchaseTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissPurchaseToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 113
            }
        };
        n.loc.source = {
            body: "mutation DismissPurchaseToken($input:DismissPurchaseTokenInput!) {\ndismissPurchaseToken(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xfb5: function(e, t) {},
    "y0i/": function(e, t) {},
    "y1/w": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 190
            }
        };
        n.loc.source = {
            body: "query RecentRaidsModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ySfT: function(e, t, n) {
        "use strict";
        var a = n("U7vG"),
            i = n("6sO2"),
            r = n("3iBR"),
            s = n("qe65"),
            o = n("Odds"),
            l = (n("6lb1"), {
                themed: !0,
                dark: {
                    "1x": r.b + "/dark/animated/1/cheertutorial.gif"
                },
                light: {
                    "1x": r.b + "/light/animated/1/cheertutorial.gif"
                }
            }),
            c = function() {
                return a.createElement(o.V, {
                    display: o.H.Flex,
                    padding: {
                        top: 5
                    },
                    flexGrow: 1,
                    flexDirection: o.J.Column,
                    justifyContent: o.U.Center,
                    alignItems: o.c.Center
                }, a.createElement(o._23, {
                    type: o._28.H4,
                    bold: !0
                }, a.createElement(s.a, {
                    className: "cheermote-help__tutorial-image",
                    sources: l
                }), Object(i.d)("How to Cheer", "Bits--CheermoteHelp")), a.createElement("p", {
                    className: "t-bits-card__contents-body t-bits-card__contents-body--narrow"
                }, Object(i.d)('Type "cheer" + the number of Bits you want to Cheer.', "Bits--CheermoteHelp")))
            };
        n.d(t, "a", function() {
            return c
        })
    },
    yU6t: function(e, t) {},
    yqxY: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return u
        });
        var a = n("TToO"),
            i = n("U7vG"),
            r = (n.n(i), n("6sO2")),
            s = n("l21v"),
            o = n("Odds"),
            l = n("Tur5"),
            c = n("qDcU"),
            d = (n.n(c), [{
                id: "30259",
                alt: "HeyGuys"
            }, {
                id: "81274",
                alt: "VoHiYo"
            }, {
                id: "64138",
                alt: "SeemsGood"
            }]),
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onEmoteClick = function(e) {
                        if (n.renderedTokenID) {
                            var t = e.currentTarget.dataset.emoteString;
                            t ? n.props.onRitualRedeemed(n.renderedTokenID, t) : r.i.warn("[NewChatterRitual] Could not find clicked emote ID.")
                        } else r.i.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.onCloseButtonClick = function() {
                        n.renderedTokenID ? n.props.onRitualDismissed(n.renderedTokenID) : r.i.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.getAvailableToken = function() {
                        return n.props.ritualTokens.find(function(e) {
                            return e.type === l.RitualTokenType.NewChatter && e.status === l.RitualTokenStatus.Available && (!e.expiresAt || Date.now() < new Date(e.expiresAt).valueOf())
                        }) || null
                    }, n.renderedTokenID = null, n
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.getAvailableToken();
                    if (this.renderedTokenID = t ? t.id : null, !t) return null;
                    var n = d.map(function(t) {
                        return i.createElement(o.V, {
                            key: t.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, i.createElement(o._31, {
                            label: t.alt
                        }, i.createElement(o.T, {
                            alpha: !0,
                            onClick: e.onEmoteClick,
                            "data-emote-string": t.alt,
                            "data-test-selector": "emote-button"
                        }, i.createElement(o.V, {
                            padding: .5
                        }, i.createElement("img", {
                            className: "new-chatter-ritual__emote",
                            src: Object(s.e)(t.id, 3)
                        })))))
                    });
                    return i.createElement(o._19, {
                        background: o.m.Base,
                        border: !0,
                        className: "new-chatter-ritual",
                        margin: {
                            x: 2,
                            bottom: .5
                        },
                        padding: {
                            left: .5,
                            y: .5
                        }
                    }, i.createElement(o.V, {
                        alignItems: o.c.Center,
                        display: o.H.Flex,
                        flexWrap: o.K.NoWrap
                    }, i.createElement(o.V, {
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, this.props.bannerMessage), n, i.createElement(o._19, {
                        borderLeft: !0,
                        flexShrink: 0
                    }, i.createElement(o.v, {
                        ariaLabel: "close",
                        icon: o._11.Close,
                        onClick: this.onCloseButtonClick,
                        size: o.x.Large,
                        "data-test-selector": "dismiss-button"
                    }))))
                }, t
            }(i.Component)
    },
    ysVA: function(e, t) {},
    z4Db: function(e, t) {},
    z7Cp: function(e, t) {},
    zVM8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "query ViewerCardModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zbFZ: function(e, t) {},
    zzpv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WatchAdModal_Redeeem"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemTrueXAdInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "redeemTrueXAd"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "grantedBits"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 105
            }
        };
        n.loc.source = {
            body: "mutation WatchAdModal_Redeeem($input:RedeemTrueXAdInput!) {\nredeemTrueXAd(input:$input) {\ngrantedBits\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    }
});
//# sourceMappingURL=pages.channel-clips-26e2cf5650901d88626bd11f59359040.js.map